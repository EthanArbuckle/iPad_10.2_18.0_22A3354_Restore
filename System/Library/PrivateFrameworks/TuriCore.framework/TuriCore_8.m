uint64_t turi::read_sframe_index_file@<X0>(std::string::size_type a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  std::string *p_p;
  uint64_t child;
  void *v12;
  std::string *v13;
  uint64_t v14;
  std::vector<std::string>::size_type *v15;
  void *v16;
  std::string *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *size;
  std::string::size_type v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  const std::string::value_type *v27;
  uint64_t v28;
  const std::string::value_type *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  const std::string::value_type *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string v40;
  std::string v41;
  __int128 v42;
  uint64_t v43;
  std::string v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  std::string v51;
  std::string __p;
  char v53;
  std::string *v54;
  void *v55[3];
  uint64_t v56;
  std::string v57;
  std::string v58[8];
  void *v59;
  char v60;
  _QWORD v61[20];

  v61[19] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 8) = 0u;
  v4 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 88) = 0;
  v5 = a2 + 88;
  *(_QWORD *)(a2 + 80) = a2 + 88;
  v6 = (_QWORD *)(a2 + 80);
  *(_QWORD *)a2 = -1;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v7 = (std::string *)(a2 + 104);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v57 = *(std::string *)a1;
  turi::general_ifstream::general_ifstream(v58, (uint64_t)&v57);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if ((v58[1].__r_.__value_.__s.__data_[*(_QWORD *)(v58[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = a1;
    turi::read_sframe_index_file(std::string)::$_0::operator()();
  }
  memset(v55, 0, sizeof(v55));
  v8 = operator new();
  v9 = operator new(0x60uLL);
  *(_QWORD *)(v8 + 8) = v9;
  v9[7] = 0;
  v9[8] = v9 + 7;
  v9[9] = v9 + 7;
  v9[10] = v9 + 10;
  v9[11] = v9 + 10;
  *(_QWORD *)(v8 + 24) = 0;
  v56 = v8;
  boost::property_tree::ini_parser::read_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v58, (__int128 *)v55);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.version");
  v53 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v54 = p_p;
  child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v55, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(child, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)v51.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = atoi(v51.__r_.__value_.__l.__data_);
    operator delete(v12);
  }
  else
  {
    *(_QWORD *)a2 = atoi((const char *)&v51);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *v4 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.num_columns");
  v53 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__p;
  else
    v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v54 = v13;
  v14 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v55, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v14, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    v16 = (void *)v51.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = atol(v51.__r_.__value_.__l.__data_);
    v15 = (std::vector<std::string>::size_type *)(a2 + 16);
    operator delete(v16);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = atol((const char *)&v51);
    v15 = (std::vector<std::string>::size_type *)(a2 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.nrows");
  v53 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__p;
  else
    v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v54 = v17;
  v18 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)v55, (uint64_t *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v18, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    v19 = (void *)v51.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 24) = atol(v51.__r_.__value_.__l.__data_);
    operator delete(v19);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = atol((const char *)&v51);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v49, "column_names");
  turi::ini::read_sequence_section<std::string>((uint64_t)v55, (uint64_t)v49, *v15, (std::vector<std::string> *)&__p);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 32));
  *(std::string *)(a2 + 32) = __p;
  memset(&__p, 0, sizeof(__p));
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (v50 < 0)
    operator delete(v49[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "column_files");
  turi::ini::read_sequence_section<std::string>((uint64_t)v55, (uint64_t)v47, *v15, (std::vector<std::string> *)&__p);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 56));
  *(std::string *)(a2 + 56) = __p;
  memset(&__p, 0, sizeof(__p));
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata");
  v20 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(v56 + 16, (const void **)&__p.__r_.__value_.__l.__data_, v56 + 17);
  v21 = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v21)
      goto LABEL_44;
  }
  else if (!v20)
  {
    goto LABEL_44;
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "metadata");
  turi::ini::read_dictionary_section<std::string>((uint64_t)v55, (uint64_t)v45, (uint64_t)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v6, *(_QWORD **)(a2 + 88));
  size = (_QWORD *)__p.__r_.__value_.__l.__size_;
  *(_QWORD *)(a2 + 80) = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 88) = size;
  v23 = __p.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a2 + 96) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (v23)
  {
    size[2] = v5;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *v6 = v5;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, size);
  if (v46 < 0)
    operator delete(v45[0]);
LABEL_44:
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&__p, &v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  else
  {
    v51 = v44;
  }
  v24 = *(__int128 **)(a2 + 56);
  v25 = *(__int128 **)(a2 + 64);
  while (v24 != v25)
  {
    v26 = *((_BYTE *)v24 + 23);
    if (v26 < 0)
    {
      if (*((_QWORD *)v24 + 1))
      {
LABEL_56:
        if (v26 >= 0)
          v27 = (const std::string::value_type *)v24;
        else
          v27 = *(const std::string::value_type **)v24;
        if (v26 >= 0)
          v28 = *((unsigned __int8 *)v24 + 23);
        else
          v28 = *((_QWORD *)v24 + 1);
        if (!v28)
          goto LABEL_75;
        v29 = &v27[v28];
        v30 = v28 - 1;
        while (1)
        {
          v31 = 0;
          while (v27[v31] == asc_2187CDC6E[v31])
          {
            v32 = v31 + 1;
            if (v30 != v31 && v31++ != 2)
              continue;
            v34 = &asc_2187CDC6E[v32];
            v35 = &v27[v32];
            goto LABEL_71;
          }
          v34 = &asc_2187CDC6E[v31];
          v35 = &v27[v31];
LABEL_71:
          if (v34 == "")
            break;
          ++v27;
          --v30;
          if (v27 == v29)
            goto LABEL_75;
        }
        if (v27 == v35)
        {
LABEL_75:
          if ((*((_BYTE *)v24 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
          }
          else
          {
            v36 = *v24;
            v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
            *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v36;
          }
          if (!boost::filesystem::path::has_root_directory((boost::filesystem::path *)&v44))
          {
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v41, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
            else
              v41 = v51;
            if (*((char *)v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
            }
            else
            {
              v37 = *v24;
              v40.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
              *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v37;
            }
            turi::fileio::make_absolute_path((uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v42);
            if (*((char *)v24 + 23) < 0)
              operator delete(*(void **)v24);
            v38 = v42;
            *((_QWORD *)v24 + 2) = v43;
            *v24 = v38;
            HIBYTE(v43) = 0;
            LOBYTE(v42) = 0;
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v41.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
    }
    else if (*((_BYTE *)v24 + 23))
    {
      goto LABEL_56;
    }
    v24 = (__int128 *)((char *)v24 + 24);
  }
  std::string::operator=(v7, (const std::string *)a1);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v55);
  v58[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v61[0] = &unk_24D91DA80;
  if (v60 < 0)
    operator delete(v59);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v58[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](v61);
}

void sub_2181B0F18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2181B0FB4);
}

void sub_2181B0F34()
{
  __cxa_end_catch();
  JUMPOUT(0x2181B0FB4);
}

void sub_2181B0F48(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2181B0FCCLL);
}

void sub_2181B0F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v19 < 0)
    operator delete(v18);
  if (v21 < 0)
    operator delete(v20);
  if (v23 < 0)
    operator delete(v22);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v24);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&v25);
  turi::sframe_index_file_information::~sframe_index_file_information(v14);
  _Unwind_Resume(a1);
}

void turi::write_sframe_index_file(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *p_p;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  __int128 *i;
  __int128 v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string v25;
  std::string v26;
  std::locale v27;
  std::string *v28;
  unint64_t v29;
  _QWORD v30[4];
  std::string v31;
  std::string v32;
  char v33;
  std::string __p;
  char v35;
  std::string *v36;
  uint64_t v37;
  int v38;
  void *v39;
  char v40;
  _QWORD v41[21];

  v41[20] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v32 = *(std::string *)a1;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v32, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v31 = __p;
  }
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[5] - a2[4]) >> 3);
  if (v4 != a2[2] || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[8] - a2[7]) >> 3) != v4)
    turi::write_sframe_index_file(std::string,turi::sframe_index_file_information const&)::$_0::operator()();
  memset(v30, 0, 24);
  v5 = operator new();
  v6 = operator new(0x60uLL);
  *(_QWORD *)(v5 + 8) = v6;
  v6[7] = 0;
  v6[8] = v6 + 7;
  v6[9] = v6 + 7;
  v6[10] = v6 + 10;
  v6[11] = v6 + 10;
  *(_QWORD *)(v5 + 24) = 0;
  v30[3] = v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.version");
  v35 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v36 = p_p;
  MEMORY[0x219A19828](&v26);
  std::locale::locale(&v27, (const std::locale *)&v26);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v30, (uint64_t *)&__p, (uint64_t)a2, &v27);
  std::locale::~locale(&v27);
  std::locale::~locale((std::locale *)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.num_segments");
  v35 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v36 = v8;
  MEMORY[0x219A19828](&v26);
  std::locale::locale(&v27, (const std::locale *)&v26);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v30, (uint64_t *)&__p, (uint64_t)(a2 + 1), &v27);
  std::locale::~locale(&v27);
  std::locale::~locale((std::locale *)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.num_columns");
  v35 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v36 = v9;
  MEMORY[0x219A19828](&v26);
  std::locale::locale(&v27, (const std::locale *)&v26);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v30, (uint64_t *)&__p, (uint64_t)(a2 + 2), &v27);
  std::locale::~locale(&v27);
  std::locale::~locale((std::locale *)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe.nrows");
  v35 = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &__p;
  else
    v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v36 = v10;
  MEMORY[0x219A19828](&v26);
  std::locale::locale(&v27, (const std::locale *)&v26);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>((uint64_t)v30, (uint64_t *)&__p, (uint64_t)(a2 + 3), &v27);
  std::locale::~locale(&v27);
  std::locale::~locale((std::locale *)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "metadata");
  turi::ini::write_dictionary_section<std::string>((uint64_t)v30, (const void **)&__p.__r_.__value_.__l.__data_, a2 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_names");
  turi::ini::write_sequence_section<std::string>((uint64_t)v30, (const void **)&__p.__r_.__value_.__l.__data_, a2 + 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27.__locale_ = 0;
  v28 = 0;
  v29 = 0;
  v11 = (__int128 *)a2[7];
  for (i = (__int128 *)a2[8]; v11 != i; v11 = (__int128 *)((char *)v11 + 24))
  {
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v13 = *v11;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    }
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (size)
    {
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = __p.__r_.__value_.__l.__size_;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v31;
      else
        v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if (v16)
      {
        v18 = size - 1;
        v19 = v16 - 1;
        v20 = v17;
        while (v15->__r_.__value_.__s.__data_[0] == v20->__r_.__value_.__s.__data_[0])
        {
          v20 = (std::string *)((char *)v20 + 1);
          if (v19)
          {
            v15 = (std::string *)((char *)v15 + 1);
            v21 = v18--;
            --v19;
            if (v21)
              continue;
          }
          goto LABEL_55;
        }
      }
      else
      {
        v20 = v17;
LABEL_55:
        if (v20 == (std::string *)((char *)v17 + size))
        {
          std::string::basic_string(&v26, &__p, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v33);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v26;
        }
      }
    }
    v22 = v28;
    if ((unint64_t)v28 >= v29)
    {
      v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v28->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      }
      v24 = v22 + 1;
    }
    v28 = v24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "column_files");
  turi::ini::write_sequence_section<std::string>((uint64_t)v30, (const void **)&__p.__r_.__value_.__l.__data_, &v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v25 = *(std::string *)a1;
  turi::general_ofstream::general_ofstream(&__p, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  boost::property_tree::ini_parser::write_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(&__p, (uint64_t)v30);
  if (!turi::general_ofstream::good((turi::general_ofstream *)&__p))
    turi::write_sframe_index_file(std::string,turi::sframe_index_file_information const&)::$_1::operator()();
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(&__p.__r_.__value_.__r.__words[1], 8, &__p.__r_.__value_.__r.__words[1], 16, (turi::fileio_impl::general_fstream_sink *)&v37, &v38);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D920F98;
  v41[0] = &unk_24D920FC0;
  if (v40 < 0)
    operator delete(v39);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&__p.__r_.__value_.__l.__size_);
  MEMORY[0x219A198F4](v41);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v30);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_2181B1640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,std::locale *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a43 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a22);
  if (a34 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_14_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return file_logger::operator<<<std::string>(v4, (uint64_t)va);
}

uint64_t _GLOBAL__sub_I_sframe_index_file_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::sframe_row_to_csv(uint64_t *a1, char *a2, size_t a3)
{
  char *v3;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v41;
  unint64_t v42;
  size_t v43;
  int v44;
  std::string *p_p;
  int v46;
  char *v47;
  char v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t result;
  std::string __p;
  char v83;
  _QWORD v84[3];

  v3 = a2;
  v84[2] = *MEMORY[0x24BDAC8D0];
  memset(v84, 0, 13);
  if (a3)
  {
    v5 = *a1;
    v3 = a2;
    if (a1[1] != *a1)
    {
      v6 = 0;
      v7 = a3;
      v3 = a2;
      while (1)
      {
        v8 = (uint64_t *)(v5 + 16 * v6);
        if (v8 == v84)
          goto LABEL_54;
        switch(BYTE4(v84[1]))
        {
          case 2:
            v9 = (unint64_t *)v84[0];
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v12 = v84[0];
              if (!v84[0])
                goto LABEL_47;
              if (*(char *)(v84[0] + 31) < 0)
                operator delete(*(void **)(v84[0] + 8));
              v13 = v12;
              v14 = 0x1012C404EF22A49;
              goto LABEL_46;
            }
            break;
          case 3:
            v26 = (unint64_t *)v84[0];
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v29 = v84[0];
              if (!v84[0])
                goto LABEL_47;
              v30 = *(void **)(v84[0] + 8);
              if (v30)
              {
                *(_QWORD *)(v84[0] + 16) = v30;
                operator delete(v30);
              }
              v13 = v29;
              v14 = 0x1080C409938AC02;
              goto LABEL_46;
            }
            break;
          case 4:
            v15 = (unint64_t *)v84[0];
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v18 = v84[0];
              if (!v84[0])
                goto LABEL_47;
              __p.__r_.__value_.__r.__words[0] = v84[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_39;
            }
            break;
          case 5:
            v31 = (unint64_t *)v84[0];
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v18 = v84[0];
              if (!v84[0])
                goto LABEL_47;
              __p.__r_.__value_.__r.__words[0] = v84[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_39:
              v13 = v18;
              v14 = 0x1020C405E66F15BLL;
              goto LABEL_46;
            }
            break;
          case 8:
            v34 = (unint64_t *)v84[0];
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = v84[0];
              if (!v84[0])
                goto LABEL_47;
              boost::detail::shared_count::~shared_count((unsigned int **)(v84[0] + 16));
              v13 = v37;
              v25 = -235920773;
              goto LABEL_45;
            }
            break;
          case 9:
            v19 = (unint64_t *)v84[0];
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = v84[0];
              if (v84[0])
              {
                v23 = *(void **)(v84[0] + 48);
                if (v23)
                {
                  *(_QWORD *)(v84[0] + 56) = v23;
                  operator delete(v23);
                }
                v24 = *(void **)(v22 + 24);
                if (v24)
                {
                  *(_QWORD *)(v22 + 32) = v24;
                  operator delete(v24);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
                v13 = v22;
                v25 = 2071181815;
LABEL_45:
                v14 = v25 | 0x1030C4000000000;
LABEL_46:
                MEMORY[0x219A19A08](v13, v14);
              }
LABEL_47:
              v84[0] = 0;
            }
            break;
          default:
            break;
        }
        v38 = *v8;
        *(_QWORD *)((char *)v84 + 5) = *(uint64_t *)((char *)v8 + 5);
        v84[0] = v38;
        BYTE4(v84[1]) = *((_BYTE *)v8 + 12);
        v39 = BYTE4(v84[1]);
        if (BYTE4(v84[1]) <= 9u && ((1 << SBYTE4(v84[1])) & 0x33C) != 0)
          break;
LABEL_55:
        v43 = 0;
        switch(v39)
        {
          case 0:
            v44 = snprintf(v3, v7, "%lld");
            goto LABEL_59;
          case 1:
            v44 = snprintf(v3, v7, "%f");
            goto LABEL_59;
          case 2:
            v44 = snprintf(v3, v7, "\"%s\"");
LABEL_59:
            v43 = v44;
            break;
          case 7:
            break;
          default:
            switch(v39)
            {
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v83, (_QWORD *)(v84[0] + 8));
                goto LABEL_67;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v83, (uint64_t *)(v84[0] + 8));
                goto LABEL_67;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v83, (_QWORD *)(v84[0] + 8));
                goto LABEL_67;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v84, &__p);
                goto LABEL_67;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_67;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v83, (_QWORD *)(v84[0] + 8));
LABEL_67:
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                v46 = snprintf(v3, v7, "%s", (const char *)p_p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v43 = v46;
                goto LABEL_72;
              default:
                result = turi::flexible_type_fail(0);
                __break(1u);
                return result;
            }
        }
LABEL_72:
        if (v43 >= v7)
        {
          v49 = (char *)a3;
          goto LABEL_80;
        }
        v47 = &v3[v43];
        if (v6 == ((a1[1] - *a1) >> 4) - 1)
          v48 = 10;
        else
          v48 = 44;
        *v47 = v48;
        v3 = v47 + 1;
        v7 += ~v43;
        if (v7)
        {
          ++v6;
          v5 = *a1;
          if (v6 < (a1[1] - *a1) >> 4)
            continue;
        }
        goto LABEL_78;
      }
      v41 = (unint64_t *)v84[0];
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
LABEL_54:
      v39 = BYTE4(v84[1]);
      goto LABEL_55;
    }
  }
LABEL_78:
  v49 = (char *)(v3 - a2);
LABEL_80:
  switch(BYTE4(v84[1]))
  {
    case 2:
      v50 = (unint64_t *)v84[0];
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = v84[0];
        if (v84[0])
        {
          if (*(char *)(v84[0] + 31) < 0)
            operator delete(*(void **)(v84[0] + 8));
          v54 = v53;
          v55 = 0x1012C404EF22A49;
          goto LABEL_121;
        }
      }
      break;
    case 3:
      v67 = (unint64_t *)v84[0];
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v84[0];
        if (v84[0])
        {
          v71 = *(void **)(v84[0] + 8);
          if (v71)
          {
            *(_QWORD *)(v84[0] + 16) = v71;
            operator delete(v71);
          }
          v54 = v70;
          v55 = 0x1080C409938AC02;
          goto LABEL_121;
        }
      }
      break;
    case 4:
      v56 = (unint64_t *)v84[0];
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = v84[0];
        if (v84[0])
        {
          __p.__r_.__value_.__r.__words[0] = v84[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_114;
        }
      }
      break;
    case 5:
      v72 = (unint64_t *)v84[0];
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v59 = v84[0];
        if (v84[0])
        {
          __p.__r_.__value_.__r.__words[0] = v84[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_114:
          v54 = v59;
          v55 = 0x1020C405E66F15BLL;
          goto LABEL_121;
        }
      }
      break;
    case 8:
      v75 = (unint64_t *)v84[0];
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        v78 = v84[0];
        if (v84[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v84[0] + 16));
          v54 = v78;
          v66 = -235920773;
          goto LABEL_120;
        }
      }
      break;
    case 9:
      v60 = (unint64_t *)v84[0];
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = v84[0];
        if (v84[0])
        {
          v64 = *(void **)(v84[0] + 48);
          if (v64)
          {
            *(_QWORD *)(v84[0] + 56) = v64;
            operator delete(v64);
          }
          v65 = *(void **)(v63 + 24);
          if (v65)
          {
            *(_QWORD *)(v63 + 32) = v65;
            operator delete(v65);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v63 + 8);
          v54 = v63;
          v66 = 2071181815;
LABEL_120:
          v55 = v66 | 0x1030C4000000000;
LABEL_121:
          MEMORY[0x219A19A08](v54, v55);
        }
      }
      break;
    default:
      return (uint64_t)v49;
  }
  return (uint64_t)v49;
}

void sub_2181B1E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  switch(a18)
  {
    case 2:
      v19 = (unint64_t *)a16;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_39;
      v22 = a16;
      if (!a16)
        goto LABEL_39;
      if (*(char *)(a16 + 31) < 0)
        operator delete(*(void **)(a16 + 8));
      v23 = (_QWORD *)v22;
      v24 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v33 = (unint64_t *)a16;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_39;
      v36 = a16;
      if (!a16)
        goto LABEL_39;
      v37 = *(void **)(a16 + 8);
      if (v37)
      {
        *(_QWORD *)(a16 + 16) = v37;
        operator delete(v37);
      }
      v23 = (_QWORD *)v36;
      v24 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = (unint64_t *)a16;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_39;
      v28 = a16;
      if (!a16)
        goto LABEL_39;
      a12 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_31;
    case 5:
      v38 = (unint64_t *)a16;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_39;
      v28 = a16;
      if (!a16)
        goto LABEL_39;
      a12 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_31:
      v23 = (_QWORD *)v28;
      v24 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v41 = (unint64_t *)a16;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_39;
      v44 = a16;
      if (!a16)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a16 + 16));
      v23 = (_QWORD *)v44;
      v32 = -235920773;
      goto LABEL_37;
    case 9:
      v29 = (unint64_t *)a16;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31 || !a16)
        goto LABEL_39;
      v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a16);
      v32 = 2071181815;
LABEL_37:
      v24 = v32 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v23, v24);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::sframe_row_to_json(uint64_t *a1, uint64_t *a2, internalJSONNode **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  const internalJSONNode *v13;
  internalJSONNode *v14;
  unint64_t v15;
  internalJSONNode *v16;
  internalJSONNode *v17;
  uint64_t v18;
  std::string __p;
  internalJSONNode *v20;

  v3 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *a2;
      v11 = v3 + v7;
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v12 = *(__n128 *)v11;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(__n128 *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      turi::flexible_type_to_json(v10 + v8, &__p, &v20, v12);
      v14 = *a3;
      v15 = *((_QWORD *)*a3 + 10);
      if (v15 >= 2)
      {
        *((_QWORD *)v14 + 10) = v15 - 1;
        internalJSONNode::newInternal(v14, v13);
      }
      *a3 = v14;
      internalJSONNode::push_back(v14, (uint64_t *)&v20);
      v17 = v20;
      if (v20)
      {
        v18 = *((_QWORD *)v20 + 10) - 1;
        *((_QWORD *)v20 + 10) = v18;
        if (!v18)
          internalJSONNode::deleteInternal(v17, v16);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v9;
      v3 = *a1;
      v8 += 16;
      v7 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
}

std::string *turi::flexible_type_to_json@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, internalJSONNode **a3@<X8>, __n128 a4@<Q0>)
{
  std::string *result;
  internalJSONNode *v7;
  const internalJSONNode *v8;
  internalJSONNode *v9;
  unint64_t v10;
  internalJSONNode *v11;
  const internalJSONNode *v12;
  internalJSONNode *v13;
  unint64_t v14;
  internalJSONNode *v15;
  const internalJSONNode *v16;
  internalJSONNode *v17;
  unint64_t v18;
  internalJSONNode *v19;
  uint64_t v20;
  internalJSONNode *v21;
  internalJSONNode *v22;
  internalJSONNode *v23;
  unint64_t v24;
  internalJSONNode *v25;
  const internalJSONNode *v26;
  double v27;
  unint64_t v28;
  const internalJSONNode *v29;
  internalJSONNode *v30;
  unint64_t v31;
  internalJSONNode *v32;
  uint64_t v33;
  unint64_t v34;
  internalJSONNode *v35;
  internalJSONNode *v36;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      a4.n128_f64[0] = (double)*(uint64_t *)a1;
      return (std::string *)JSONNode::JSONNode(a3, a2, a4);
    case 1:
      a4.n128_u64[0] = *(_QWORD *)a1;
      return (std::string *)JSONNode::JSONNode(a3, a2, a4);
    case 2:
    case 5:
      return (std::string *)JSONNode::JSONNode(a3, a2, *(_QWORD *)a1 + 8);
    case 3:
      v20 = *(_QWORD *)a1;
      internalJSONNode::newInternal((internalJSONNode *)4);
      v23 = v22;
      *a3 = v22;
      if (*(_QWORD *)(v20 + 16) != *(_QWORD *)(v20 + 8))
      {
        v24 = 0;
        do
        {
          internalJSONNode::newInternal((internalJSONNode *)2);
          v36 = v25;
          v27 = *(double *)(*(_QWORD *)(v20 + 8) + 8 * v24);
          v28 = *((_QWORD *)v25 + 10);
          if (v28 >= 2)
          {
            *((_QWORD *)v25 + 10) = v28 - 1;
            internalJSONNode::newInternal(v25, v26);
          }
          v36 = v25;
          internalJSONNode::Set(v25, v27);
          v30 = *a3;
          v31 = *((_QWORD *)*a3 + 10);
          if (v31 >= 2)
          {
            *((_QWORD *)v30 + 10) = v31 - 1;
            internalJSONNode::newInternal(v30, v29);
          }
          *a3 = v30;
          internalJSONNode::push_back(v30, (uint64_t *)&v36);
          v32 = v36;
          if (v36)
          {
            v33 = *((_QWORD *)v36 + 10) - 1;
            *((_QWORD *)v36 + 10) = v33;
            if (!v33)
              internalJSONNode::deleteInternal(v32, v21);
          }
          ++v24;
        }
        while (v24 < (uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 3);
        v23 = *a3;
      }
      v34 = *((_QWORD *)v23 + 10);
      if (v34 >= 2)
      {
        *((_QWORD *)v23 + 10) = v34 - 1;
        internalJSONNode::newInternal(v23, v21);
        v23 = v35;
      }
      *a3 = v23;
      result = std::string::operator=((std::string *)((char *)v23 + 8), a2);
      *((_BYTE *)v23 + 32) = 1;
      return result;
    case 7:
      internalJSONNode::newInternal(0);
      v9 = v7;
      *a3 = v7;
      v10 = *((_QWORD *)v7 + 10);
      if (v10 >= 2)
      {
        *((_QWORD *)v7 + 10) = v10 - 1;
        internalJSONNode::newInternal(v7, v8);
        v9 = v11;
      }
      *a3 = v9;
      std::string::operator=((std::string *)((char *)v9 + 8), a2);
      *((_BYTE *)v9 + 32) = 1;
      v13 = *a3;
      v14 = *((_QWORD *)*a3 + 10);
      if (v14 >= 2)
        goto LABEL_11;
      goto LABEL_12;
    default:
      internalJSONNode::newInternal(0);
      v17 = v15;
      *a3 = v15;
      v18 = *((_QWORD *)v15 + 10);
      if (v18 >= 2)
      {
        *((_QWORD *)v15 + 10) = v18 - 1;
        internalJSONNode::newInternal(v15, v16);
        v17 = v19;
      }
      *a3 = v17;
      std::string::operator=((std::string *)((char *)v17 + 8), a2);
      *((_BYTE *)v17 + 32) = 1;
      v13 = *a3;
      v14 = *((_QWORD *)*a3 + 10);
      if (v14 >= 2)
      {
LABEL_11:
        *((_QWORD *)v13 + 10) = v14 - 1;
        internalJSONNode::newInternal(v13, v12);
      }
LABEL_12:
      *a3 = v13;
      return internalJSONNode::Nullify(v13);
  }
}

uint64_t _GLOBAL__sub_I_sframe_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2181B2660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_7()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_iterators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sframe_reader::init(turi::sframe_reader *this, const turi::sframe *a2, uint64_t a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::locale::__imp *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::locale::__imp *locale;
  _QWORD *exception;
  void *v25;
  void *v26;
  uint64_t v27;
  std::locale v28[2];
  __int128 v29;
  std::string *v30;
  __int128 *v31;
  void *v32;
  std::string *v33;
  __int128 *v34;
  void *v35;
  __int128 *v36;
  __int128 v37;
  std::string __p;
  _QWORD *v39;
  void **v40;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "init", 14, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v28, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v28);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*((_BYTE *)this + 8) == 0, "SFrame reader already inited");
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v28, (const turi::sframe *)((char *)a2 + 8));
  v12 = v29;
  *((_OWORD *)this + 1) = *(_OWORD *)&v28[0].__locale_;
  *((_OWORD *)this + 2) = v12;
  if ((std::locale *)((char *)this + 16) != v28)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 2, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 3, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 12, v36, &v37);
  }
  std::string::operator=((std::string *)this + 5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v36, (_QWORD *)v37);
  v25 = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 6))
  {
    *((_QWORD *)this + 39) = 0;
  }
  else if (a3 == -1)
  {
    turi::index_file_information::index_file_information((std::string *)v28, (const turi::index_file_information *)(**((_QWORD **)a2 + 23) + 8));
    v18 = v39;
    *((_QWORD *)this + 39) = v30;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v18);
    v25 = (char *)&v37 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    if (v35)
    {
      v36 = (__int128 *)v35;
      operator delete(v35);
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    if (SBYTE7(v29) < 0)
      operator delete(v28[0].__locale_);
    turi::index_file_information::index_file_information((std::string *)v28, (const turi::index_file_information *)(**((_QWORD **)a2 + 23) + 8));
    v25 = 0;
    v26 = 0;
    v27 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v25, v35, (uint64_t)v36, ((char *)v36 - (_BYTE *)v35) >> 3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v39);
    v40 = (void **)&v37 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
    if (v35)
    {
      v36 = (__int128 *)v35;
      operator delete(v35);
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    if (SBYTE7(v29) < 0)
      operator delete(v28[0].__locale_);
    if (*((_QWORD *)this + 7) != *((_QWORD *)this + 6))
    {
      v19 = 0;
      v20 = 0;
      do
      {
        turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(*((_QWORD *)a2 + 23) + v19), (uint64_t **)&v25, (uint64_t *)v28);
        v21 = *((_QWORD *)this + 19);
        if (v21 >= *((_QWORD *)this + 20))
        {
          v22 = std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__emplace_back_slow_path<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>((uint64_t *)this + 18, v28);
        }
        else
        {
          std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>((uint64_t)this + 144, v28);
          v22 = v21 + 16;
        }
        *((_QWORD *)this + 19) = v22;
        locale = v28[0].__locale_;
        v28[0].__locale_ = 0;
        if (locale)
          (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
        ++v20;
        v19 += 16;
      }
      while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    *((_QWORD *)this + 39) = a3;
    do
    {
      turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(*((_QWORD *)a2 + 23) + v13), *((_QWORD *)this + 39), (uint64_t *)v28);
      v15 = *((_QWORD *)this + 19);
      if (v15 >= *((_QWORD *)this + 20))
      {
        v16 = std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__emplace_back_slow_path<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>((uint64_t *)this + 18, v28);
      }
      else
      {
        std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>((uint64_t)this + 144, v28);
        v16 = v15 + 16;
      }
      *((_QWORD *)this + 19) = v16;
      v17 = v28[0].__locale_;
      v28[0].__locale_ = 0;
      if (v17)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v17 + 8))(v17);
      ++v14;
      v13 += 16;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  }
}

void sub_2181B2C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, std::locale a12)
{
  turi::index_file_information::~index_file_information((turi::index_file_information *)&a12);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::get_reader(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArray which is still writing.");
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_QWORD *)(v6 + 176) = 0;
  turi::sarray_reader<turi::flexible_type>::sarray_reader(v6);
  *a3 = v6;
  turi::sarray_reader<turi::flexible_type>::init((_QWORD *)v6, a1, a2);
}

void sub_2181B2DCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void turi::sframe_reader::init(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  void **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::locale::__imp *locale;
  _QWORD *exception;
  void **v24;
  std::locale v25[2];
  __int128 v26;
  std::string *v27;
  __int128 *v28;
  std::string *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  std::string __p;
  std::string **v34;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "init", 39, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v25, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(_BYTE *)(a1 + 8) == 0, "SFrame reader already inited");
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v25, (const turi::sframe_index_file_information *)(a2 + 8));
  v12 = v26;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v25[0].__locale_;
  *(_OWORD *)(a1 + 32) = v12;
  if ((std::locale *)(a1 + 16) != v25)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 48), v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 72), v29, v30, 0xAAAAAAAAAAAAAAABLL * (((char *)v30 - (char *)v29) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 96), v31, &v32);
  }
  std::string::operator=((std::string *)(a1 + 120), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v31, (_QWORD *)v32);
  v34 = &v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v13 = *a3;
  v14 = a3[1];
  if (*a3 == v14)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = *a3;
    do
    {
      v17 = *v16++;
      v15 = (void **)((char *)v15 + v17);
    }
    while (v16 != v14);
  }
  v34 = (std::string **)v15;
  v24 = *(void ***)(a1 + 40);
  if (v15 != v24)
  {
    v25[0].__locale_ = (std::locale::__imp *)&v34;
    v25[1].__locale_ = (std::locale::__imp *)&v24;
    turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  *(_QWORD *)(a1 + 312) = v14 - v13;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      turi::sarray<turi::flexible_type>::get_reader(*(_QWORD *)(*(_QWORD *)(a2 + 184) + v18), a3, (uint64_t *)v25);
      v20 = *(_QWORD *)(a1 + 152);
      if (v20 >= *(_QWORD *)(a1 + 160))
      {
        v21 = std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__emplace_back_slow_path<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>((uint64_t *)(a1 + 144), v25);
      }
      else
      {
        std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>(a1 + 144, v25);
        v21 = v20 + 16;
      }
      *(_QWORD *)(a1 + 152) = v21;
      locale = v25[0].__locale_;
      v25[0].__locale_ = 0;
      if (locale)
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
      ++v19;
      v18 += 16;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
  }
}

void sub_2181B313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sum", 3);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"size()", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 46, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_reader::init(turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::begin@<X0>(turi::sframe_reader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)this + 16))(this) <= a2)
    turi::sframe_reader::begin(unsigned long)const::$_0::operator()();
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)this + 16))(this) <= a2)
    turi::sframe_reader::begin(unsigned long)const::$_1::operator()();
  return turi::sframe_iterator::sframe_iterator(a3, (_QWORD *)this + 18, a2, 1);
}

void turi::sframe_reader::begin(unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_reader::begin(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B35B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::end@<X0>(turi::sframe_reader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)this + 16))(this) <= a2)
    turi::sframe_reader::end(unsigned long)const::$_0::operator()();
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)this + 16))(this) <= a2)
    turi::sframe_reader::end(unsigned long)const::$_1::operator()();
  return turi::sframe_iterator::sframe_iterator(a3, (_QWORD *)this + 18, a2, 0);
}

void turi::sframe_reader::end(unsigned long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 61, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_reader::end(unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B3854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unint64_t turi::sframe_reader::read_rows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v58;
  void **v60[2];
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;

  v58 = a1 + 168;
  turi::buffer_pool<std::vector<turi::flexible_type>>::get_new_buffer((pthread_mutex_t *)(a1 + 168), (uint64_t)&v63);
  v7 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 152) != v7)
  {
    v8 = 0;
    v9 = v63;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 16 * v8) + 48))(*(_QWORD *)(v7 + 16 * v8), a2, a3, v9);
      v9 = v63;
      if (v8)
      {
        v10 = v63[1];
      }
      else
      {
        v10 = *v63;
        v11 = v63[1];
        v12 = v11 - *v63;
        if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) != v12 >> 4)
        {
          std::vector<std::vector<turi::flexible_type>>::resize(a4, v12 >> 4);
          v9 = v63;
          v10 = *v63;
          v11 = v63[1];
        }
        if (v11 != v10)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            v15 = (uint64_t *)(*a4 + v13);
            v16 = (uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 4;
            if (v16 != (v15[1] - *v15) >> 4)
            {
              std::vector<turi::flexible_type>::resize(v15, v16);
              std::vector<turi::flexible_type>::shrink_to_fit((uint64_t *)(*a4 + v13));
              v9 = v63;
              v10 = *v63;
            }
            ++v14;
            v13 += 24;
          }
          while (v14 < (v9[1] - v10) >> 4);
          v10 = v9[1];
        }
      }
      v17 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      v61 = 0;
      v62 = v17;
      v61 = (v10 - *v9) >> 4;
      if (v17 != v61)
      {
        v60[0] = (void **)&v62;
        v60[1] = (void **)&v61;
        turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator()();
      }
      v18 = *v9;
      if (v10 != *v9)
      {
        v19 = 0;
        do
        {
          v20 = v18 + 16 * v19;
          v21 = *(_QWORD *)(*a4 + 24 * v19) + 16 * v8;
          if (v20 != v21)
          {
            switch(*(_BYTE *)(v21 + 12))
            {
              case 2:
                v22 = *(unint64_t **)v21;
                do
                {
                  v23 = __ldaxr(v22);
                  v24 = v23 - 1;
                }
                while (__stlxr(v24, v22));
                if (!v24)
                {
                  v25 = *(unint64_t **)v21;
                  if (!*(_QWORD *)v21)
                    goto LABEL_59;
                  if (*((char *)v25 + 31) < 0)
                    operator delete((void *)v25[1]);
                  v26 = v25;
                  v27 = 0x1012C404EF22A49;
                  goto LABEL_58;
                }
                break;
              case 3:
                v39 = *(unint64_t **)v21;
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  v42 = *(unint64_t **)v21;
                  if (!*(_QWORD *)v21)
                    goto LABEL_59;
                  v43 = (void *)v42[1];
                  if (v43)
                  {
                    v42[2] = (unint64_t)v43;
                    operator delete(v43);
                  }
                  v26 = v42;
                  v27 = 0x1080C409938AC02;
                  goto LABEL_58;
                }
                break;
              case 4:
                v28 = *(unint64_t **)v21;
                do
                {
                  v29 = __ldaxr(v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, v28));
                if (!v30)
                {
                  v31 = *(unint64_t **)v21;
                  if (!*(_QWORD *)v21)
                    goto LABEL_59;
                  v60[0] = (void **)(v31 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v60);
                  goto LABEL_51;
                }
                break;
              case 5:
                v44 = *(unint64_t **)v21;
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = v45 - 1;
                }
                while (__stlxr(v46, v44));
                if (!v46)
                {
                  v31 = *(unint64_t **)v21;
                  if (!*(_QWORD *)v21)
                    goto LABEL_59;
                  v60[0] = (void **)(v31 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v60);
LABEL_51:
                  v26 = v31;
                  v27 = 0x1020C405E66F15BLL;
                  goto LABEL_58;
                }
                break;
              case 8:
                v47 = *(unint64_t **)v21;
                do
                {
                  v48 = __ldaxr(v47);
                  v49 = v48 - 1;
                }
                while (__stlxr(v49, v47));
                if (!v49)
                {
                  v50 = *(unint64_t **)v21;
                  if (!*(_QWORD *)v21)
                    goto LABEL_59;
                  boost::detail::shared_count::~shared_count((unsigned int **)v50 + 2);
                  v26 = v50;
                  v38 = -235920773;
                  goto LABEL_57;
                }
                break;
              case 9:
                v32 = *(unint64_t **)v21;
                do
                {
                  v33 = __ldaxr(v32);
                  v34 = v33 - 1;
                }
                while (__stlxr(v34, v32));
                if (!v34)
                {
                  v35 = *(unint64_t **)v21;
                  if (*(_QWORD *)v21)
                  {
                    v36 = (void *)v35[6];
                    if (v36)
                    {
                      v35[7] = (unint64_t)v36;
                      operator delete(v36);
                    }
                    v37 = (void *)v35[3];
                    if (v37)
                    {
                      v35[4] = (unint64_t)v37;
                      operator delete(v37);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 1));
                    v26 = v35;
                    v38 = 2071181815;
LABEL_57:
                    v27 = v38 | 0x1030C4000000000;
LABEL_58:
                    MEMORY[0x219A19A08](v26, v27);
                  }
LABEL_59:
                  *(_QWORD *)v21 = 0;
                }
                break;
              default:
                break;
            }
            v51 = *(_QWORD *)v20;
            *(_QWORD *)(v21 + 5) = *(_QWORD *)(v20 + 5);
            *(_QWORD *)v21 = v51;
            *(_BYTE *)(v21 + 12) = *(_BYTE *)(v20 + 12);
            *(_BYTE *)(v20 + 12) = 0;
            v9 = v63;
            v18 = *v63;
          }
          ++v19;
        }
        while (v19 < (v9[1] - v18) >> 4);
      }
      ++v8;
      v7 = *(_QWORD *)(a1 + 144);
    }
    while (v8 < (*(_QWORD *)(a1 + 152) - v7) >> 4);
  }
  turi::buffer_pool<std::vector<turi::flexible_type>>::release_buffer(v58, &v63);
  v53 = *a4;
  v52 = a4[1];
  v54 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v52 - v53) >> 3);
}

void sub_2181B3D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"out_obj.size()", 14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"coldata->size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.cpp", "operator()", 85, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_reader::read_rows(unsigned long,unsigned long,std::vector<std::vector<turi::flexible_type>> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B3EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader::read_rows(turi::sframe_reader *this, uint64_t a2, uint64_t a3, uint64_t ***a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  turi::sframe_rows::resize(a4, (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4, 0xFFFFFFFFFFFFFFFFLL);
  v8 = *((_QWORD *)this + 18);
  if (*((_QWORD *)this + 19) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v8 + v9 * 8);
      if (!*((_BYTE *)a4 + 24))
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, a2, a3, (*a4)[v9]);
      ++v10;
      v8 = *((_QWORD *)this + 18);
      v9 += 2;
    }
    while (v10 < (*((_QWORD *)this + 19) - v8) >> 4);
  }
  if (*a4 == a4[1])
    return 0;
  v12 = **a4;
  if (!v12)
    return 0;
  else
    return (v12[1] - *v12) >> 4;
}

uint64_t turi::sframe_reader::reset_iterators(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 144);
  v2 = *(uint64_t **)(this + 152);
  while (v1 != v2)
  {
    v3 = *v1;
    v1 += 2;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  }
  return this;
}

void turi::sframe_reader::~sframe_reader(turi::sframe_reader *this)
{
  pthread_mutex_t *v2;
  void **v3;

  *(_QWORD *)this = off_24D931518;
  v2 = (pthread_mutex_t *)((char *)this + 168);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)this + 33);
  v3 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  turi::mutex::~mutex(v2);
  v3 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  pthread_mutex_t *v2;
  void **v3;

  *(_QWORD *)this = off_24D931518;
  v2 = (pthread_mutex_t *)((char *)this + 168);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100]((_QWORD *)this + 33);
  v3 = (void **)((char *)this + 240);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  turi::mutex::~mutex(v2);
  v3 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x219A19A08](this, 0x10B3C4034A3DEFELL);
}

uint64_t turi::sframe_reader::num_segments(turi::sframe_reader *this)
{
  return *((_QWORD *)this + 39);
}

uint64_t turi::sframe_reader::segment_length(turi::sframe_reader *this, unint64_t a2)
{
  if ((*(uint64_t (**)(turi::sframe_reader *))(*(_QWORD *)this + 16))(this) <= a2)
    turi::sframe_reader::segment_length(unsigned long)const::{lambda(void)#1}::operator()();
  if (*((_QWORD *)this + 4))
    return (*(uint64_t (**)(_QWORD, unint64_t))(***((_QWORD ***)this + 18) + 24))(**((_QWORD **)this + 18), a2);
  else
    return 0;
}

void sub_2181B43A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_iterator::sframe_iterator(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (uint64_t *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::resize((uint64_t *)(a1 + 8), (uint64_t)(a2[1] - *a2) >> 4);
  std::vector<turi::flexible_type>::resize(v8, (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 4);
  v9 = **(char ***)a1;
  v10 = *(char **)(*(_QWORD *)a1 + 8);
  if (v10 == v9)
    goto LABEL_16;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = (v10 - v9) >> 4;
    if (a4)
    {
      if (v14 <= v13)
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)&v9[v12] + 32))(v18, *(_QWORD *)&v9[v12], a3);
    }
    else
    {
      if (v14 <= v13)
        std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)&v9[v12] + 40))(v18, *(_QWORD *)&v9[v12], a3);
    }
    turi::sarray_iterator<turi::flexible_type>::operator=(*v7 + v11, (uint64_t)v18);
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v18);
    ++v13;
    v9 = **(char ***)a1;
    v10 = *(char **)(*(_QWORD *)a1 + 8);
    v12 += 16;
    v11 += 48;
  }
  while (v13 < (v10 - v9) >> 4);
  if (v10 == v9)
LABEL_16:
    std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v9 + 24))(*(_QWORD *)v9, a3);
  if (a4)
    v16 = 0;
  else
    v16 = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_QWORD *)(a1 + 48) = v15;
  return a1;
}

void sub_2181B45E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_iterator<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((result - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<turi::sarray_iterator<turi::flexible_type>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (result != v7)
      result = turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(result - 48);
    a1[1] = v7;
  }
  return result;
}

uint64_t turi::sarray_iterator<turi::flexible_type>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t **v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unint64_t *v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a2 != a1)
  {
    v4 = (unint64_t **)(a1 + 16);
    v5 = (unint64_t **)(a2 + 16);
    switch(*(_BYTE *)(a1 + 28))
    {
      case 2:
        v6 = *v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *v4;
          if (!*v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *v4;
          if (!*v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *v4;
          if (!*v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *v4;
          if (!*v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *v4;
          if (*v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v5;
    *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
    *v4 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(a2 + 28);
    *(_BYTE *)(a1 + 28) = (_BYTE)v35;
    v36 = v35 > 9;
    v37 = (1 << (char)v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t std::vector<turi::sarray_iterator<turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      v14 = 48 * a2;
      v15 = (_QWORD *)(v7 + 32);
      do
      {
        *v15 = 0;
        *(v15 - 3) = 0;
        *(v15 - 2) = 0;
        *(v15 - 4) = 0;
        *(_QWORD *)((char *)v15 - 11) = 0;
        v15 += 6;
        v14 -= 48;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[48 * v8];
    v22 = &v12[48 * v11];
    v16 = &v20[48 * a2];
    v17 = 48 * a2;
    v18 = v20 + 32;
    do
    {
      *v18 = 0;
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *(v18 - 4) = 0;
      *(_QWORD *)((char *)v18 - 11) = 0;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
    v21 = v16;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_2181B4A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::sarray_iterator<turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_iterator<turi::flexible_type>>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_iterator<turi::flexible_type>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 result;

  for (; a3 != a5; a3 -= 48)
  {
    v8 = a7;
    *(_OWORD *)(a7 - 48) = *(_OWORD *)(a3 - 48);
    *(_QWORD *)(a7 - 32) = 0;
    v9 = (unint64_t **)(a7 - 32);
    *(_DWORD *)(a7 - 24) = 0;
    *(_BYTE *)(a7 - 20) = 0;
    if (a3 != a7)
    {
      v10 = *(unint64_t **)(a3 - 32);
      *(_QWORD *)(a7 - 27) = *(_QWORD *)(a3 - 27);
      *v9 = v10;
      v11 = *(unsigned __int8 *)(a3 - 20);
      *(_BYTE *)(a7 - 20) = v11;
      if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
      {
        v12 = *v9;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    a7 -= 48;
    result = *(__n128 *)(a3 - 16);
    *(__n128 *)(v8 - 16) = result;
  }
  return result;
}

uint64_t std::__split_buffer<turi::sarray_iterator<turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void turi::sframe_reader::segment_length(unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segment", 7);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_reader.hpp", "operator()", 344, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_reader::segment_length(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B4D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::flexible_type>::init(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *__p;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  assert_msg(a1[1] == 0, "Reader already inited");
  turi::sarray_reader<turi::flexible_type>::open_format_reader((uint64_t)a1, a2);
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 += v9;
    }
    while (v6 != v7);
  }
  v27 = v8;
  v26 = turi::sarray_reader<turi::flexible_type>::size((uint64_t)a1);
  if (v8 != v26)
  {
    __p = &v27;
    v24 = &v26;
    turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,std::vector<unsigned long> const&)::{lambda(void)#1}::operator()();
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  v10 = *a3;
  if (a3[1] != *a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v13;
      v13 += v10[v12];
      if (v11 >= v25)
      {
        v15 = (uint64_t *)__p;
        v16 = ((char *)v11 - (_BYTE *)__p) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = (char *)v25 - (_BYTE *)__p;
        if (((char *)v25 - (_BYTE *)__p) >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v25, v19);
          v15 = (uint64_t *)__p;
          v11 = v24;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[16 * v16];
        *(_QWORD *)v21 = v14;
        *((_QWORD *)v21 + 1) = v13;
        v22 = v21;
        if (v11 != v15)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v11 - 1);
            v22 -= 16;
            v11 -= 2;
          }
          while (v11 != v15);
          v15 = (uint64_t *)__p;
        }
        v11 = (uint64_t *)(v21 + 16);
        __p = v22;
        v24 = (uint64_t *)(v21 + 16);
        v25 = (uint64_t *)&v20[16 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v11 = v14;
        v11[1] = v13;
        v11 += 2;
      }
      v24 = v11;
      ++v12;
      v10 = *a3;
    }
    while (v12 < a3[1] - *a3);
  }
  turi::sarray_reader<turi::flexible_type>::create_segment_read_buffers(a1, &__p);
  if (__p)
  {
    v24 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_2181B4FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,std::vector<unsigned long> const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sum", 3);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"size()", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 277, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,std::vector<unsigned long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__construct_one_at_end[abi:ne180100]<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;

  v4 = *(_QWORD **)(a1 + 8);
  *v4 = *a2;
  result = (_QWORD *)operator new();
  v6 = *a2;
  *result = &unk_24D91E558;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  v4[1] = result;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4 + 2;
  return result;
}

void sub_2181B5278(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::__emplace_back_slow_path<std::unique_ptr<turi::sarray_reader<turi::flexible_type>>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  char *v22;
  int64x2_t v23;
  char *v24;
  _QWORD *v25;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v25 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v22 = v10;
  v23.i64[0] = (uint64_t)v11;
  v23.i64[1] = (uint64_t)v11;
  v24 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  v12 = (_QWORD *)operator new();
  v13 = *a2;
  *v12 = &unk_24D91E558;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v13;
  *((_QWORD *)v11 + 1) = v12;
  *a2 = 0;
  v14 = v23.i64[0];
  v15 = v23.i64[1] + 16;
  v23.i64[1] += 16;
  v17 = (_QWORD *)*a1;
  v16 = (_QWORD *)a1[1];
  if (v16 == (_QWORD *)*a1)
  {
    v19 = vdupq_n_s64((unint64_t)v16);
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v16 - 1);
      v16 -= 2;
      *(_OWORD *)(v14 - 16) = v18;
      v14 -= 16;
      *v16 = 0;
      v16[1] = 0;
    }
    while (v16 != v17);
    v19 = *(int64x2_t *)a1;
    v15 = v23.i64[1];
  }
  *a1 = v14;
  a1[1] = v15;
  v23 = v19;
  v20 = (char *)a1[2];
  a1[2] = (uint64_t)v24;
  v24 = v20;
  v22 = (char *)v19.i64[0];
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v22);
  return v15;
}

void sub_2181B53C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_6_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_reader_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sframe_rows::resize(uint64_t ***this, unint64_t a2, unint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  void **v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v42 = a3;
  turi::sframe_rows::ensure_unique((turi::sframe_rows *)this);
  v5 = *this;
  v6 = this[1];
  if (a2 != ((char *)v6 - (char *)*this) >> 4)
  {
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t)this, a2);
    v5 = *this;
    v6 = this[1];
  }
  while (v5 != v6)
  {
    v7 = *v5;
    if (*v5)
    {
      if (v42 != -1 && v42 != (v7[1] - *v7) >> 4)
      {
        *(_QWORD *)((char *)&v44 + 5) = 0x700000000000000;
        *(_QWORD *)&v44 = 0;
        std::vector<turi::flexible_type>::resize(v7, v42, (uint64_t *)&v44);
        switch(BYTE12(v44))
        {
          case 2:
            v8 = (unint64_t *)v44;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v11 = v44;
              if ((_QWORD)v44)
              {
                if (*(char *)(v44 + 31) < 0)
                  operator delete(*(void **)(v44 + 8));
                v12 = v11;
                v13 = 0x1012C404EF22A49;
                goto LABEL_58;
              }
            }
            break;
          case 3:
            v19 = (unint64_t *)v44;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              v22 = v44;
              if ((_QWORD)v44)
              {
                v23 = *(void **)(v44 + 8);
                if (v23)
                {
                  *(_QWORD *)(v44 + 16) = v23;
                  operator delete(v23);
                }
                v12 = v22;
                v13 = 0x1080C409938AC02;
                goto LABEL_58;
              }
            }
            break;
          case 4:
            v24 = (unint64_t *)v44;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v44;
              if ((_QWORD)v44)
              {
                v43 = (void **)(v44 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
                goto LABEL_42;
              }
            }
            break;
          case 5:
            v28 = (unint64_t *)v44;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v27 = v44;
              if ((_QWORD)v44)
              {
                v43 = (void **)(v44 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_42:
                v12 = v27;
                v13 = 0x1020C405E66F15BLL;
                goto LABEL_58;
              }
            }
            break;
          case 8:
            v31 = (unint64_t *)v44;
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              v34 = v44;
              if ((_QWORD)v44)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v44 + 16));
                v12 = v34;
                v35 = -235920773;
                goto LABEL_57;
              }
            }
            break;
          case 9:
            v36 = (unint64_t *)v44;
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v39 = v44;
              if ((_QWORD)v44)
              {
                v40 = *(void **)(v44 + 48);
                if (v40)
                {
                  *(_QWORD *)(v44 + 56) = v40;
                  operator delete(v40);
                }
                v41 = *(void **)(v39 + 24);
                if (v41)
                {
                  *(_QWORD *)(v39 + 32) = v41;
                  operator delete(v41);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 + 8);
                v12 = v39;
                v35 = 2071181815;
LABEL_57:
                v13 = v35 | 0x1030C4000000000;
LABEL_58:
                MEMORY[0x219A19A08](v12, v13);
              }
            }
            break;
          default:
            break;
        }
      }
    }
    else if (v42 == -1)
    {
      v17 = operator new(0x30uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &unk_24D91E508;
      v17[4] = 0;
      v17[5] = 0;
      v17[3] = 0;
      *(_QWORD *)&v44 = v17 + 3;
      *((_QWORD *)&v44 + 1) = v17;
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v5, &v44);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v16 = __ldaxr(v18);
        while (__stlxr(v16 - 1, v18));
LABEL_23:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,long &,turi::flex_undefined,void>(&v42, &v44);
      std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v5, &v44);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        goto LABEL_23;
      }
    }
    v5 += 2;
  }
}

void sub_2181B5824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, char a14)
{
  switch(a14)
  {
    case 2:
      turi::gl_sarray::clip(&a12);
      break;
    case 3:
      turi::gl_sarray::clip(&a12);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a12);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a12);
      break;
    case 8:
      turi::gl_sarray::clip(&a12);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::sframe_rows::ensure_unique(turi::sframe_rows *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  if (!*((_BYTE *)this + 24))
  {
    v2 = *(_QWORD *)this;
    v3 = *((_QWORD *)this + 1);
    while (v2 != v3)
    {
      v4 = *(_QWORD *)(v2 + 8);
      if (!v4 || *(_QWORD *)(v4 + 8))
      {
        std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>(*(uint64_t ***)v2, &v8);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v2, &v8);
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
        if (*((_QWORD *)&v8 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      v2 += 16;
    }
    *((_BYTE *)this + 24) = 1;
  }
}

uint64_t turi::sframe_rows::clear(turi::sframe_rows *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  while (result != v3)
    result = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 1) = v3;
  return result;
}

void turi::sframe_rows::save(turi::sframe_rows *this, turi::oarchive *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  size_t v14;
  const void *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  char **v19;
  size_t v20;
  BOOL v21;
  std::vector<char>::size_type v22;
  size_t v23;
  char **v24;
  size_t v25;
  BOOL v26;
  std::vector<char>::size_type v27;
  void *v28;
  size_t v29;
  char **v30;
  size_t v31;
  BOOL v32;
  std::vector<char>::size_type v33;
  _BYTE v34[48];
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
  *(_QWORD *)&v35 = v4;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 8 > v5)
    {
      v29 = 2 * v5 + 16;
      *((_QWORD *)a2 + 5) = v29;
      v30 = (char **)*((_QWORD *)a2 + 2);
      if (v30)
      {
        v6 = *v30;
        v31 = v30[1] - *v30;
        v32 = v29 >= v31;
        v33 = v29 - v31;
        if (v33 != 0 && v32)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v33);
          v6 = (char *)**((_QWORD **)a2 + 2);
        }
        else if (!v32)
        {
          v30[1] = &v6[v29];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v29, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v6;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a2 + 3);
    }
    *(_QWORD *)&v6[*((_QWORD *)a2 + 4)] = v4;
    *((_QWORD *)a2 + 4) += 8;
  }
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  v7 = *(uint64_t ***)this;
  v8 = (uint64_t **)*((_QWORD *)this + 1);
  if (*(uint64_t ***)this == v8)
  {
    v28 = 0;
  }
  else
  {
    do
    {
      *(_QWORD *)v34 = -1;
      memset(&v34[8], 0, 34);
      *(_QWORD *)&v37 = 0;
      turi::v2_block_impl::typed_encode(*v7, v34, (uint64_t)&v35);
      *(_QWORD *)&v34[16] = v37;
      if (*(_QWORD *)a2)
      {
        std::ostream::write();
      }
      else
      {
        v9 = *((_QWORD *)a2 + 5);
        if (*((_QWORD *)a2 + 4) + 48 > v9)
        {
          v18 = 2 * v9 + 96;
          *((_QWORD *)a2 + 5) = v18;
          v19 = (char **)*((_QWORD *)a2 + 2);
          if (v19)
          {
            v10 = *v19;
            v20 = v19[1] - *v19;
            v21 = v18 >= v20;
            v22 = v18 - v20;
            if (v22 != 0 && v21)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v22);
              v10 = (char *)**((_QWORD **)a2 + 2);
            }
            else if (!v21)
            {
              v19[1] = &v10[v18];
            }
          }
          else
          {
            v10 = (char *)malloc_type_realloc(*((void **)a2 + 3), v18, 0xF6EA6B1uLL);
          }
          *((_QWORD *)a2 + 3) = v10;
        }
        else
        {
          v10 = (char *)*((_QWORD *)a2 + 3);
        }
        v11 = &v10[*((_QWORD *)a2 + 4)];
        v12 = *(_OWORD *)v34;
        v13 = *(_OWORD *)&v34[32];
        *((_OWORD *)v11 + 1) = *(_OWORD *)&v34[16];
        *((_OWORD *)v11 + 2) = v13;
        *(_OWORD *)v11 = v12;
        *((_QWORD *)a2 + 4) += 48;
      }
      v15 = (const void *)*((_QWORD *)&v36 + 1);
      v14 = v37;
      if (*(_QWORD *)a2)
      {
        std::ostream::write();
      }
      else
      {
        v16 = *((_QWORD *)a2 + 5);
        if (*((_QWORD *)a2 + 4) + (_QWORD)v37 > v16)
        {
          v23 = 2 * (v16 + v37);
          *((_QWORD *)a2 + 5) = v23;
          v24 = (char **)*((_QWORD *)a2 + 2);
          if (v24)
          {
            v17 = *v24;
            v25 = v24[1] - *v24;
            v26 = v23 >= v25;
            v27 = v23 - v25;
            if (v27 != 0 && v26)
            {
              std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v27);
              v17 = (char *)**((_QWORD **)a2 + 2);
            }
            else if (!v26)
            {
              v24[1] = &v17[v23];
            }
          }
          else
          {
            v17 = (char *)malloc_type_realloc(*((void **)a2 + 3), v23, 0xF6EA6B1uLL);
          }
          *((_QWORD *)a2 + 3) = v17;
        }
        else
        {
          v17 = (char *)*((_QWORD *)a2 + 3);
        }
        memcpy(&v17[*((_QWORD *)a2 + 4)], v15, v14);
        *((_QWORD *)a2 + 4) += v14;
      }
      v7 += 2;
    }
    while (v7 != v8);
    v28 = (void *)*((_QWORD *)&v36 + 1);
  }
  free(v28);
}

void turi::sframe_rows::load(uint64_t ***this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[48];
  unint64_t v19;

  v19 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 3);
    v6 = *(_QWORD *)(v4 + v5);
    v19 = v6;
    *((_QWORD *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v6 = v19;
  }
  turi::sframe_rows::resize(this, v6, 0xFFFFFFFFFFFFFFFFLL);
  if (v19)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      *(_QWORD *)v18 = -1;
      memset(&v18[8], 0, 34);
      v10 = *((_QWORD *)a2 + 2);
      if (v10)
      {
        v11 = *((_QWORD *)a2 + 3);
        v12 = (_OWORD *)(v10 + v11);
        v14 = v12[1];
        v13 = v12[2];
        *(_OWORD *)v18 = *v12;
        *(_OWORD *)&v18[16] = v14;
        *(_OWORD *)&v18[32] = v13;
        *((_QWORD *)a2 + 3) = v11 + 48;
      }
      else
      {
        std::istream::read();
      }
      v15 = malloc_type_realloc(v9, *(size_t *)&v18[16], 0x62E558EDuLL);
      v9 = v15;
      v16 = *(_QWORD *)&v18[16];
      v17 = *((_QWORD *)a2 + 2);
      if (v17)
      {
        memcpy(v15, (const void *)(v17 + *((_QWORD *)a2 + 3)), *(size_t *)&v18[16]);
        *((_QWORD *)a2 + 3) += v16;
      }
      else
      {
        std::istream::read();
      }
      turi::v2_block_impl::typed_decode((uint64_t)v18, (uint64_t)v9, *(uint64_t *)&v18[16], (*this)[v7]);
      ++v8;
      v7 += 2;
    }
    while (v8 < v19);
    if (v9)
      free(v9);
  }
}

void turi::sframe_rows::type_check_inplace(uint64_t *a1, _QWORD *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  int v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  std::string *v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::string *v60;
  __int128 v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  std::string *v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  char *v100;
  uint64_t *v101;
  uint64_t *v102;
  _QWORD *v103;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  BOOL v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  BOOL v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  BOOL v138;
  _QWORD *v139;
  uint64_t v140;
  std::string *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *p_shared_owners;
  unint64_t v159;
  void *v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  _QWORD *v170;
  void *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  std::string *v189;
  __int128 v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  BOOL v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  unint64_t v218;
  BOOL v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  _QWORD *v224;
  uint64_t v225;
  std::string *v226;
  __int128 v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  __int128 v239;
  __n128 v240;
  __int128 v241;
  __int128 v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  void *v249;
  void *v250;
  unint64_t *v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  std::string *v278;
  __int128 v279;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  unint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  unsigned int v294;
  __int128 v295;
  __int128 v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int *v301;
  unsigned int v302;
  __int128 v303;
  __int128 v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  unsigned int v319;
  __int128 v320;
  __int128 v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int *v326;
  unsigned int v327;
  __int128 v328;
  __int128 v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int *v340;
  unsigned int v341;
  __int128 v342;
  __int128 v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int *v351;
  unsigned int v352;
  __int128 v353;
  __int128 v354;
  unint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  unsigned int v363;
  __int128 v364;
  __int128 v365;
  unint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  _QWORD *v380;
  void *v381;
  void *v382;
  unsigned int v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  void *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _QWORD *v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  void **v422;
  void **v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  void **v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void **v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t *v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  __int128 v464;
  unint64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  _QWORD *v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unsigned __int32 v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _QWORD *v492;
  char v494;
  _BYTE v495[32];
  _BYTE v496[32];
  uint64_t v497;
  void *__p;
  char v499;
  _BYTE v500[160];
  std::__shared_weak_count *v501;
  std::__shared_weak_count *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  __n128 v507;
  uint64_t v508;
  _QWORD v509[5];

  v509[2] = *MEMORY[0x24BDAC8D0];
  v507.n128_u64[0] = a2[1] - *a2;
  v3 = *a1;
  v4 = a1[1];
  v504 = (v4 - *a1) >> 4;
  if (v507.n128_u64[0] != (v4 - v3) >> 4)
  {
    *(_QWORD *)v495 = &v507;
    *(_QWORD *)&v495[8] = &v504;
    turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator()();
  }
  if (v4 != v3)
  {
    v6 = 0;
    v491 = *MEMORY[0x24BEDB7F0];
    v489 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v490 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v488 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v7 = *(unsigned __int8 *)(*a2 + v6);
      if (v7 == 7)
        goto LABEL_684;
      v8 = (uint64_t ***)(v3 + 16 * v6);
      v9 = v8[1];
      v11 = **v8;
      v10 = (*v8)[1];
      v12 = ((char *)v10 - (char *)v11) >> 4;
      if (v9 && !v9[1])
      {
        v13 = 0;
      }
      else
      {
        if (v10 == v11)
          goto LABEL_684;
        v13 = 0;
        if (v12 <= 1)
          v14 = 1;
        else
          v14 = ((char *)v10 - (char *)v11) >> 4;
        v15 = (unsigned __int8 *)v11 + 12;
        while (1)
        {
          v17 = *v15;
          v15 += 16;
          v16 = v17;
          if (v17 != 7 && v16 != v7)
            break;
          if (v14 == ++v13)
            goto LABEL_684;
        }
        std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>(*v8, v495);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v495);
        v19 = *(std::__shared_weak_count **)&v495[8];
        if (*(_QWORD *)&v495[8])
        {
          v20 = (unint64_t *)(*(_QWORD *)&v495[8] + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      if (v13 >= v12)
        goto LABEL_684;
      do
      {
        v22 = (uint64_t)&(**v8)[2 * v13];
        v23 = *(unsigned __int8 *)(v22 + 12);
        v24 = *(unsigned __int8 *)(*a2 + v6);
        if (v23 == 7 || v23 == v24)
          goto LABEL_507;
        v26 = 0;
        memset(v509, 0, 13);
        BYTE4(v509[1]) = v24;
        switch(v24)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            v26 = operator new();
            *(_QWORD *)v26 = 0;
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)(v26 + 24) = 0;
            *(_QWORD *)(v26 + 8) = 0;
            goto LABEL_34;
          case 6:
            v26 = 0x1900000000000000;
            v509[0] = 0x1900000000000000;
            LODWORD(v509[1]) = 0;
            break;
          case 8:
            v26 = operator new();
            *(_QWORD *)v26 = 0;
            a3.n128_u16[0] = 0;
            a3.n128_u8[2] = 0;
            a3.n128_u8[3] = 0;
            a3.n128_u8[4] = 0;
            a3.n128_u8[5] = 0;
            a3.n128_u8[6] = 0;
            a3.n128_u8[7] = 0;
            *(_OWORD *)(v26 + 8) = 0u;
            *(_OWORD *)(v26 + 24) = 0u;
            *(_OWORD *)(v26 + 40) = 0u;
            *(_QWORD *)(v26 + 56) = 0;
            *(_QWORD *)(v26 + 64) = 3;
            goto LABEL_34;
          case 9:
            v26 = operator new();
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v26);
LABEL_34:
            v509[0] = v26;
            *(_QWORD *)v26 = 1;
            break;
          default:
            break;
        }
        if ((_QWORD *)v22 == v509)
        {
          switch(BYTE4(v509[1]))
          {
            case 2:
              v28 = (unint64_t *)v509[0];
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v31 = v509[0];
                if (v509[0])
                {
                  if (*(char *)(v509[0] + 31) < 0)
                    operator delete(*(void **)(v509[0] + 8));
                  v32 = v31;
                  v33 = 0x1012C404EF22A49;
                  goto LABEL_112;
                }
              }
              break;
            case 3:
              v78 = (unint64_t *)v509[0];
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                v81 = v509[0];
                if (v509[0])
                {
                  v82 = *(void **)(v509[0] + 8);
                  if (v82)
                  {
                    *(_QWORD *)(v509[0] + 16) = v82;
                    operator delete(v82);
                  }
                  v32 = v81;
                  v33 = 0x1080C409938AC02;
                  goto LABEL_112;
                }
              }
              break;
            case 4:
              v67 = (unint64_t *)v509[0];
              do
              {
                v68 = __ldaxr(v67);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, v67));
              if (!v69)
              {
                v70 = v509[0];
                if (v509[0])
                {
                  *(_QWORD *)v495 = v509[0] + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
                  goto LABEL_105;
                }
              }
              break;
            case 5:
              v83 = (unint64_t *)v509[0];
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v70 = v509[0];
                if (v509[0])
                {
                  *(_QWORD *)v495 = v509[0] + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
LABEL_105:
                  v32 = v70;
                  v33 = 0x1020C405E66F15BLL;
                  goto LABEL_112;
                }
              }
              break;
            case 8:
              v86 = (unint64_t *)v509[0];
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                v89 = v509[0];
                if (v509[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v509[0] + 16));
                  v32 = v89;
                  v77 = -235920773;
                  goto LABEL_111;
                }
              }
              break;
            case 9:
              v71 = (unint64_t *)v509[0];
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = v509[0];
                if (v509[0])
                {
                  v75 = *(void **)(v509[0] + 48);
                  if (v75)
                  {
                    *(_QWORD *)(v509[0] + 56) = v75;
                    operator delete(v75);
                  }
                  v76 = *(void **)(v74 + 24);
                  if (v76)
                  {
                    *(_QWORD *)(v74 + 32) = v76;
                    operator delete(v76);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v74 + 8);
                  v32 = v74;
                  v77 = 2071181815;
LABEL_111:
                  v33 = v77 | 0x1030C4000000000;
LABEL_112:
                  MEMORY[0x219A19A08](v32, v33);
                }
              }
              break;
            default:
              goto LABEL_507;
          }
          goto LABEL_507;
        }
        switch(*(_BYTE *)(v22 + 12))
        {
          case 0:
            switch(BYTE4(v509[1]))
            {
              case 0:
                v27 = *(_QWORD *)v22;
                goto LABEL_74;
              case 1:
                a3.n128_f64[0] = (double)*(uint64_t *)v22;
                goto LABEL_332;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v187 = (_QWORD *)operator new();
                  v188 = v509[0];
                  *v187 = *(_QWORD *)v509[0];
                  v189 = (std::string *)(v187 + 1);
                  if (*(char *)(v188 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v189, *(const std::string::value_type **)(v188 + 8), *(_QWORD *)(v188 + 16));
                  }
                  else
                  {
                    v190 = *(_OWORD *)(v188 + 8);
                    v187[3] = *(_QWORD *)(v188 + 24);
                    *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v190;
                  }
                  v509[0] = v187;
                  *v187 = 1;
                  do
                  {
                    v470 = __ldaxr((unint64_t *)v26);
                    v471 = v470 - 1;
                  }
                  while (__stlxr(v471, (unint64_t *)v26));
                  if (!v471)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v472 = v509[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v495);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(_QWORD *)v495 = v491;
                *(_QWORD *)&v495[*(_QWORD *)(v491 - 24)] = v490;
                *(_QWORD *)&v495[16] = v489;
                *(_QWORD *)&v495[24] = v488;
                if (v499 < 0)
                  operator delete(__p);
                v473 = v472 + 8;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x219A198F4](v500);
                if (*(char *)(v472 + 31) < 0)
                  operator delete(*(void **)v473);
                a3 = v507;
                v474 = v508;
                goto LABEL_671;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v145 = (_QWORD *)operator new();
                v146 = v509[0];
                *v145 = *(_QWORD *)v509[0];
                v145[2] = 0;
                v145[3] = 0;
                v145[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v145 + 1, *(const void **)(v146 + 8), *(_QWORD *)(v146 + 16), (uint64_t)(*(_QWORD *)(v146 + 16) - *(_QWORD *)(v146 + 8)) >> 3);
                v509[0] = v145;
                *v145 = 1;
                do
                {
                  v147 = __ldaxr((unint64_t *)v26);
                  v108 = --v147 == 0;
                }
                while (__stlxr(v147, (unint64_t *)v26));
                goto LABEL_343;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v280 = (_QWORD *)operator new();
                v281 = v509[0];
                *v280 = *(_QWORD *)v509[0];
                v280[2] = 0;
                v280[3] = 0;
                v280[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v280 + 1, *(uint64_t **)(v281 + 8), *(uint64_t **)(v281 + 16), (uint64_t)(*(_QWORD *)(v281 + 16) - *(_QWORD *)(v281 + 8)) >> 4);
                v509[0] = v280;
                *v280 = 1;
                do
                {
                  v282 = __ldaxr((unint64_t *)v26);
                  v219 = --v282 == 0;
                }
                while (__stlxr(v282, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v309 = (_QWORD *)operator new();
                v310 = v509[0];
                *v309 = *(_QWORD *)v509[0];
                v309[2] = 0;
                v309[3] = 0;
                v309[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v309 + 1, *(uint64_t **)(v310 + 8), *(uint64_t **)(v310 + 16), (uint64_t)(*(_QWORD *)(v310 + 16) - *(_QWORD *)(v310 + 8)) >> 5);
                v509[0] = v309;
                *v309 = 1;
                do
                {
                  v311 = __ldaxr((unint64_t *)v26);
                  v138 = --v311 == 0;
                }
                while (__stlxr(v311, (unint64_t *)v26));
                goto LABEL_434;
              case 6:
                v509[0] = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                LODWORD(v509[1]) = 0;
                goto LABEL_463;
              case 7:
                goto LABEL_462;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v315 = operator new();
                v316 = v509[0];
                *(_QWORD *)v315 = *(_QWORD *)v509[0];
                *(_QWORD *)(v315 + 8) = *(_QWORD *)(v316 + 8);
                v317 = *(_QWORD *)(v316 + 16);
                *(_QWORD *)(v315 + 16) = v317;
                if (v317)
                {
                  v318 = (unsigned int *)(v317 + 8);
                  do
                    v319 = __ldxr(v318);
                  while (__stxr(v319 + 1, v318));
                }
                v320 = *(_OWORD *)(v316 + 24);
                v321 = *(_OWORD *)(v316 + 40);
                *(_OWORD *)(v315 + 56) = *(_OWORD *)(v316 + 56);
                *(_OWORD *)(v315 + 40) = v321;
                *(_OWORD *)(v315 + 24) = v320;
                v509[0] = v315;
                *(_QWORD *)v315 = 1;
                do
                {
                  v322 = __ldaxr((unint64_t *)v26);
                  v206 = --v322 == 0;
                }
                while (__stlxr(v322, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v178 = (_QWORD *)operator new();
                v179 = v509[0] + 8;
                *v178 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v178 + 1, v179);
                v509[0] = v178;
                *v178 = 1;
                do
                {
                  v180 = __ldaxr((unint64_t *)v26);
                  v134 = --v180 == 0;
                }
                while (__stlxr(v180, (unint64_t *)v26));
                goto LABEL_291;
              default:
                goto LABEL_690;
            }
          case 1:
            switch(BYTE4(v509[1]))
            {
              case 0:
                a3.n128_u64[0] = *(_QWORD *)v22;
                v27 = (uint64_t)*(double *)v22;
                goto LABEL_74;
              case 1:
                a3.n128_u64[0] = *(_QWORD *)v22;
                goto LABEL_332;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v224 = (_QWORD *)operator new();
                  v225 = v509[0];
                  *v224 = *(_QWORD *)v509[0];
                  v226 = (std::string *)(v224 + 1);
                  if (*(char *)(v225 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v226, *(const std::string::value_type **)(v225 + 8), *(_QWORD *)(v225 + 16));
                  }
                  else
                  {
                    v227 = *(_OWORD *)(v225 + 8);
                    v224[3] = *(_QWORD *)(v225 + 24);
                    *(_OWORD *)&v226->__r_.__value_.__l.__data_ = v227;
                  }
                  v509[0] = v224;
                  *v224 = 1;
                  do
                  {
                    v475 = __ldaxr((unint64_t *)v26);
                    v476 = v475 - 1;
                  }
                  while (__stlxr(v476, (unint64_t *)v26));
                  if (!v476)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v477 = v509[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v495);
                std::ostream::operator<<();
                std::stringbuf::str();
                *(_QWORD *)v495 = v491;
                *(_QWORD *)&v495[*(_QWORD *)(v491 - 24)] = v490;
                *(_QWORD *)&v495[16] = v489;
                *(_QWORD *)&v495[24] = MEMORY[0x24BEDB848] + 16;
                if (v499 < 0)
                  operator delete(__p);
                v478 = v477 + 8;
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x219A198F4](v500);
                if (*(char *)(v477 + 31) < 0)
                  operator delete(*(void **)v478);
                a3 = v507;
                v479 = v508;
                goto LABEL_683;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v148 = (_QWORD *)operator new();
                v149 = v509[0];
                *v148 = *(_QWORD *)v509[0];
                v148[2] = 0;
                v148[3] = 0;
                v148[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v148 + 1, *(const void **)(v149 + 8), *(_QWORD *)(v149 + 16), (uint64_t)(*(_QWORD *)(v149 + 16) - *(_QWORD *)(v149 + 8)) >> 3);
                v509[0] = v148;
                *v148 = 1;
                do
                {
                  v150 = __ldaxr((unint64_t *)v26);
                  v108 = --v150 == 0;
                }
                while (__stlxr(v150, (unint64_t *)v26));
                goto LABEL_343;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v283 = (_QWORD *)operator new();
                v284 = v509[0];
                *v283 = *(_QWORD *)v509[0];
                v283[2] = 0;
                v283[3] = 0;
                v283[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v283 + 1, *(uint64_t **)(v284 + 8), *(uint64_t **)(v284 + 16), (uint64_t)(*(_QWORD *)(v284 + 16) - *(_QWORD *)(v284 + 8)) >> 4);
                v509[0] = v283;
                *v283 = 1;
                do
                {
                  v285 = __ldaxr((unint64_t *)v26);
                  v219 = --v285 == 0;
                }
                while (__stlxr(v285, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v312 = (_QWORD *)operator new();
                v313 = v509[0];
                *v312 = *(_QWORD *)v509[0];
                v312[2] = 0;
                v312[3] = 0;
                v312[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v312 + 1, *(uint64_t **)(v313 + 8), *(uint64_t **)(v313 + 16), (uint64_t)(*(_QWORD *)(v313 + 16) - *(_QWORD *)(v313 + 8)) >> 5);
                v509[0] = v312;
                *v312 = 1;
                do
                {
                  v314 = __ldaxr((unint64_t *)v26);
                  v138 = --v314 == 0;
                }
                while (__stlxr(v314, (unint64_t *)v26));
                goto LABEL_434;
              case 6:
                a3.n128_u64[0] = *(_QWORD *)v22;
                v228 = (int)((*(double *)v22 - (double)(uint64_t)floor(*(double *)v22)) * 1000000.0);
                if (v228 >= 999999)
                  v228 = 999999;
                if (v228 >= 0xF4240)
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                v509[0] = vcvtmd_s64_f64(a3.n128_f64[0]) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                LODWORD(v509[1]) = v228;
                goto LABEL_463;
              case 7:
                goto LABEL_462;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v323 = operator new();
                v324 = v509[0];
                *(_QWORD *)v323 = *(_QWORD *)v509[0];
                *(_QWORD *)(v323 + 8) = *(_QWORD *)(v324 + 8);
                v325 = *(_QWORD *)(v324 + 16);
                *(_QWORD *)(v323 + 16) = v325;
                if (v325)
                {
                  v326 = (unsigned int *)(v325 + 8);
                  do
                    v327 = __ldxr(v326);
                  while (__stxr(v327 + 1, v326));
                }
                v328 = *(_OWORD *)(v324 + 24);
                v329 = *(_OWORD *)(v324 + 40);
                *(_OWORD *)(v323 + 56) = *(_OWORD *)(v324 + 56);
                *(_OWORD *)(v323 + 40) = v329;
                *(_OWORD *)(v323 + 24) = v328;
                v509[0] = v323;
                *(_QWORD *)v323 = 1;
                do
                {
                  v330 = __ldaxr((unint64_t *)v26);
                  v206 = --v330 == 0;
                }
                while (__stlxr(v330, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v181 = (_QWORD *)operator new();
                v182 = v509[0] + 8;
                *v181 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v181 + 1, v182);
                v509[0] = v181;
                *v181 = 1;
                do
                {
                  v183 = __ldaxr((unint64_t *)v26);
                  v134 = --v183 == 0;
                }
                while (__stlxr(v183, (unint64_t *)v26));
                goto LABEL_291;
              default:
                goto LABEL_690;
            }
          case 2:
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v46 = *(_QWORD *)v22;
                if (*(_QWORD *)v26 != 1)
                {
                  v47 = (_QWORD *)operator new();
                  v48 = v509[0];
                  *v47 = *(_QWORD *)v509[0];
                  v49 = (std::string *)(v47 + 1);
                  if (*(char *)(v48 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)(v48 + 8), *(_QWORD *)(v48 + 16));
                  }
                  else
                  {
                    v50 = *(_OWORD *)(v48 + 8);
                    v47[3] = *(_QWORD *)(v48 + 24);
                    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
                  }
                  v509[0] = v47;
                  *v47 = 1;
                  do
                  {
                    v461 = __ldaxr((unint64_t *)v26);
                    v462 = v461 - 1;
                  }
                  while (__stlxr(v462, (unint64_t *)v26));
                  if (!v462)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v463 = v509[0];
                if (*(char *)(v46 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v495, *(const std::string::value_type **)(v46 + 8), *(_QWORD *)(v46 + 16));
                }
                else
                {
                  v464 = *(_OWORD *)(v46 + 8);
                  *(_QWORD *)&v495[16] = *(_QWORD *)(v46 + 24);
                  *(_OWORD *)v495 = v464;
                }
                goto LABEL_680;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v105 = (_QWORD *)operator new();
                v106 = v509[0];
                *v105 = *(_QWORD *)v509[0];
                v105[2] = 0;
                v105[3] = 0;
                v105[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v105 + 1, *(const void **)(v106 + 8), *(_QWORD *)(v106 + 16), (uint64_t)(*(_QWORD *)(v106 + 16) - *(_QWORD *)(v106 + 8)) >> 3);
                v509[0] = v105;
                *v105 = 1;
                do
                {
                  v107 = __ldaxr((unint64_t *)v26);
                  v108 = --v107 == 0;
                }
                while (__stlxr(v107, (unint64_t *)v26));
                goto LABEL_343;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v252 = (_QWORD *)operator new();
                v253 = v509[0];
                *v252 = *(_QWORD *)v509[0];
                v252[2] = 0;
                v252[3] = 0;
                v252[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v252 + 1, *(uint64_t **)(v253 + 8), *(uint64_t **)(v253 + 16), (uint64_t)(*(_QWORD *)(v253 + 16) - *(_QWORD *)(v253 + 8)) >> 4);
                v509[0] = v252;
                *v252 = 1;
                do
                {
                  v254 = __ldaxr((unint64_t *)v26);
                  v219 = --v254 == 0;
                }
                while (__stlxr(v254, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v184 = (_QWORD *)operator new();
                v185 = v509[0];
                *v184 = *(_QWORD *)v509[0];
                v184[2] = 0;
                v184[3] = 0;
                v184[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v184 + 1, *(uint64_t **)(v185 + 8), *(uint64_t **)(v185 + 16), (uint64_t)(*(_QWORD *)(v185 + 16) - *(_QWORD *)(v185 + 8)) >> 5);
                v509[0] = v184;
                *v184 = 1;
                do
                {
                  v186 = __ldaxr((unint64_t *)v26);
                  v138 = --v186 == 0;
                }
                while (__stlxr(v186, (unint64_t *)v26));
                goto LABEL_434;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v255 = operator new();
                v256 = v509[0];
                *(_QWORD *)v255 = *(_QWORD *)v509[0];
                *(_QWORD *)(v255 + 8) = *(_QWORD *)(v256 + 8);
                v257 = *(_QWORD *)(v256 + 16);
                *(_QWORD *)(v255 + 16) = v257;
                if (v257)
                {
                  v258 = (unsigned int *)(v257 + 8);
                  do
                    v259 = __ldxr(v258);
                  while (__stxr(v259 + 1, v258));
                }
                v260 = *(_OWORD *)(v256 + 24);
                v261 = *(_OWORD *)(v256 + 40);
                *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 56);
                *(_OWORD *)(v255 + 40) = v261;
                *(_OWORD *)(v255 + 24) = v260;
                v509[0] = v255;
                *(_QWORD *)v255 = 1;
                do
                {
                  v262 = __ldaxr((unint64_t *)v26);
                  v206 = --v262 == 0;
                }
                while (__stlxr(v262, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v131 = (_QWORD *)operator new();
                v132 = v509[0] + 8;
                *v131 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v131 + 1, v132);
                v509[0] = v131;
                *v131 = 1;
                do
                {
                  v133 = __ldaxr((unint64_t *)v26);
                  v134 = --v133 == 0;
                }
                while (__stlxr(v133, (unint64_t *)v26));
                goto LABEL_291;
              default:
                goto LABEL_690;
            }
          case 3:
            v51 = *(_QWORD *)v22;
            v52 = (_QWORD *)(*(_QWORD *)v22 + 8);
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v53 = (_QWORD *)operator new();
                  v54 = v509[0];
                  *v53 = *(_QWORD *)v509[0];
                  v55 = (std::string *)(v53 + 1);
                  if (*(char *)(v54 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)(v54 + 8), *(_QWORD *)(v54 + 16));
                  }
                  else
                  {
                    v56 = *(_OWORD *)(v54 + 8);
                    v53[3] = *(_QWORD *)(v54 + 24);
                    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
                  }
                  v509[0] = v53;
                  *v53 = 1;
                  do
                  {
                    v468 = __ldaxr((unint64_t *)v26);
                    v469 = v468 - 1;
                  }
                  while (__stlxr(v469, (unint64_t *)v26));
                  if (!v469)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v458 = v509[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v507, v52);
                goto LABEL_668;
              case 3:
                if (*(_QWORD *)v26 != 1)
                {
                  v120 = (_QWORD *)operator new();
                  v121 = v509[0];
                  *v120 = *(_QWORD *)v509[0];
                  v120[2] = 0;
                  v120[3] = 0;
                  v120[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v120 + 1, *(const void **)(v121 + 8), *(_QWORD *)(v121 + 16), (uint64_t)(*(_QWORD *)(v121 + 16) - *(_QWORD *)(v121 + 8)) >> 3);
                  v509[0] = v120;
                  *v120 = 1;
                  do
                  {
                    v122 = __ldaxr((unint64_t *)v26);
                    v123 = v122 - 1;
                  }
                  while (__stlxr(v123, (unint64_t *)v26));
                  if (!v123)
                  {
                    v124 = *(void **)(v26 + 8);
                    if (v124)
                    {
                      *(_QWORD *)(v26 + 16) = v124;
                      operator delete(v124);
                    }
                    MEMORY[0x219A19A08](v26, 0x1080C409938AC02);
                  }
                }
                if (v509[0] != v51)
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v509[0] + 8), *(char **)(v51 + 8), *(_QWORD *)(v51 + 16), (uint64_t)(*(_QWORD *)(v51 + 16) - *(_QWORD *)(v51 + 8)) >> 3);
                goto LABEL_463;
              case 4:
                if (*(_QWORD *)v26 != 1)
                {
                  v272 = (_QWORD *)operator new();
                  v273 = v509[0];
                  *v272 = *(_QWORD *)v509[0];
                  v272[2] = 0;
                  v272[3] = 0;
                  v272[1] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v272 + 1, *(uint64_t **)(v273 + 8), *(uint64_t **)(v273 + 16), (uint64_t)(*(_QWORD *)(v273 + 16) - *(_QWORD *)(v273 + 8)) >> 4);
                  v509[0] = v272;
                  *v272 = 1;
                  do
                  {
                    v274 = __ldaxr((unint64_t *)v26);
                    v275 = v274 - 1;
                  }
                  while (__stlxr(v275, (unint64_t *)v26));
                  if (!v275)
                  {
                    *(_QWORD *)v495 = v26 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
                    MEMORY[0x219A19A08](v26, 0x1020C405E66F15BLL);
                  }
                }
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(v509[0] + 8), *(_QWORD **)(v51 + 8), *(_QWORD **)(v51 + 16), (uint64_t)(*(_QWORD *)(v51 + 16) - *(_QWORD *)(v51 + 8)) >> 3);
                goto LABEL_463;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v210 = (_QWORD *)operator new();
                v211 = v509[0];
                *v210 = *(_QWORD *)v509[0];
                v210[2] = 0;
                v210[3] = 0;
                v210[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v210 + 1, *(uint64_t **)(v211 + 8), *(uint64_t **)(v211 + 16), (uint64_t)(*(_QWORD *)(v211 + 16) - *(_QWORD *)(v211 + 8)) >> 5);
                v509[0] = v210;
                *v210 = 1;
                do
                {
                  v212 = __ldaxr((unint64_t *)v26);
                  v138 = --v212 == 0;
                }
                while (__stlxr(v212, (unint64_t *)v26));
                goto LABEL_434;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v290 = operator new();
                v291 = v509[0];
                *(_QWORD *)v290 = *(_QWORD *)v509[0];
                *(_QWORD *)(v290 + 8) = *(_QWORD *)(v291 + 8);
                v292 = *(_QWORD *)(v291 + 16);
                *(_QWORD *)(v290 + 16) = v292;
                if (v292)
                {
                  v293 = (unsigned int *)(v292 + 8);
                  do
                    v294 = __ldxr(v293);
                  while (__stxr(v294 + 1, v293));
                }
                v295 = *(_OWORD *)(v291 + 24);
                v296 = *(_OWORD *)(v291 + 40);
                *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 56);
                *(_OWORD *)(v290 + 40) = v296;
                *(_OWORD *)(v290 + 24) = v295;
                v509[0] = v290;
                *(_QWORD *)v290 = 1;
                do
                {
                  v297 = __ldaxr((unint64_t *)v26);
                  v206 = --v297 == 0;
                }
                while (__stlxr(v297, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 != 1)
                {
                  v151 = (_QWORD *)operator new();
                  v152 = v509[0] + 8;
                  *v151 = *(_QWORD *)v509[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v151 + 1, v152);
                  v509[0] = v151;
                  *v151 = 1;
                  do
                  {
                    v153 = __ldaxr((unint64_t *)v26);
                    v154 = v153 - 1;
                  }
                  while (__stlxr(v154, (unint64_t *)v26));
                  if (!v154)
                  {
                    v155 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v26);
                    MEMORY[0x219A19A08](v155, 0x1030C407B73B9F7);
                  }
                }
                v156 = (_QWORD *)v509[0];
                v508 = 0;
                v504 = 0;
                v505 = 0;
                v506 = 0;
                v507 = 0uLL;
                std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v52, &v501);
                turi::flexible_type_impl::ndarray<double>::ndarray(v495, &v501, (uint64_t)&v507, (uint64_t)&v504, 0);
                v157 = v502;
                if (v502)
                {
                  p_shared_owners = (unint64_t *)&v502->__shared_owners_;
                  do
                    v159 = __ldaxr(p_shared_owners);
                  while (__stlxr(v159 - 1, p_shared_owners));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                if (v504)
                {
                  v505 = v504;
                  operator delete((void *)v504);
                }
                if (v507.n128_u64[0])
                {
                  v507.n128_u64[1] = v507.n128_u64[0];
                  operator delete((void *)v507.n128_u64[0]);
                }
                std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v156 + 1), (__int128 *)v495);
                v160 = (void *)v156[3];
                if (v160)
                {
                  v156[4] = v160;
                  operator delete(v160);
                  v156[3] = 0;
                  v156[4] = 0;
                  v156[5] = 0;
                }
                v161 = (void *)v156[6];
                *(_OWORD *)(v156 + 3) = *(_OWORD *)&v495[16];
                v156[5] = *(_QWORD *)v496;
                *(_OWORD *)&v495[16] = 0uLL;
                *(_QWORD *)v496 = 0;
                if (v161)
                {
                  v156[7] = v161;
                  operator delete(v161);
                  v156[6] = 0;
                  v156[7] = 0;
                  v156[8] = 0;
                  v161 = *(void **)&v495[16];
                }
                a3.n128_u64[0] = *(_QWORD *)&v496[8];
                *((_OWORD *)v156 + 3) = *(_OWORD *)&v496[8];
                v156[8] = *(_QWORD *)&v496[24];
                memset(&v496[8], 0, 24);
                v156[9] = v497;
                if (v161)
                {
                  *(_QWORD *)&v495[24] = v161;
                  operator delete(v161);
                }
                v162 = *(std::__shared_weak_count **)&v495[8];
                if (!*(_QWORD *)&v495[8])
                  goto LABEL_463;
                v163 = (unint64_t *)(*(_QWORD *)&v495[8] + 8);
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                goto LABEL_582;
              default:
                goto LABEL_690;
            }
          case 4:
            v34 = *(_QWORD *)v22;
            v35 = (uint64_t *)(*(_QWORD *)v22 + 8);
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v36 = (_QWORD *)operator new();
                  v37 = v509[0];
                  *v36 = *(_QWORD *)v509[0];
                  v38 = (std::string *)(v36 + 1);
                  if (*(char *)(v37 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)(v37 + 8), *(_QWORD *)(v37 + 16));
                  }
                  else
                  {
                    v39 = *(_OWORD *)(v37 + 8);
                    v36[3] = *(_QWORD *)(v37 + 24);
                    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
                  }
                  v509[0] = v36;
                  *v36 = 1;
                  do
                  {
                    v456 = __ldaxr((unint64_t *)v26);
                    v457 = v456 - 1;
                  }
                  while (__stlxr(v457, (unint64_t *)v26));
                  if (!v457)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v458 = v509[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v507, v35);
                goto LABEL_668;
              case 3:
                if (*(_QWORD *)v26 != 1)
                {
                  v90 = (_QWORD *)operator new();
                  v91 = v509[0];
                  *v90 = *(_QWORD *)v509[0];
                  v90[2] = 0;
                  v90[3] = 0;
                  v90[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v90 + 1, *(const void **)(v91 + 8), *(_QWORD *)(v91 + 16), (uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 3);
                  v509[0] = v90;
                  *v90 = 1;
                  do
                  {
                    v92 = __ldaxr((unint64_t *)v26);
                    v93 = v92 - 1;
                  }
                  while (__stlxr(v93, (unint64_t *)v26));
                  if (!v93)
                  {
                    v94 = *(void **)(v26 + 8);
                    if (v94)
                    {
                      *(_QWORD *)(v26 + 16) = v94;
                      operator delete(v94);
                    }
                    MEMORY[0x219A19A08](v26, 0x1080C409938AC02);
                  }
                }
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v494, (_QWORD *)(v509[0] + 8), v35);
                goto LABEL_463;
              case 4:
                if (*(_QWORD *)v26 != 1)
                {
                  v191 = (_QWORD *)operator new();
                  v192 = v509[0];
                  *v191 = *(_QWORD *)v509[0];
                  v191[2] = 0;
                  v191[3] = 0;
                  v191[1] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v191 + 1, *(uint64_t **)(v192 + 8), *(uint64_t **)(v192 + 16), (uint64_t)(*(_QWORD *)(v192 + 16) - *(_QWORD *)(v192 + 8)) >> 4);
                  v509[0] = v191;
                  *v191 = 1;
                  do
                  {
                    v193 = __ldaxr((unint64_t *)v26);
                    v194 = v193 - 1;
                  }
                  while (__stlxr(v194, (unint64_t *)v26));
                  if (!v194)
                  {
                    *(_QWORD *)v495 = v26 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
                    MEMORY[0x219A19A08](v26, 0x1020C405E66F15BLL);
                  }
                }
                if (v509[0] != v34)
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v509[0] + 8, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 4);
                goto LABEL_463;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v135 = (_QWORD *)operator new();
                v136 = v509[0];
                *v135 = *(_QWORD *)v509[0];
                v135[2] = 0;
                v135[3] = 0;
                v135[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v135 + 1, *(uint64_t **)(v136 + 8), *(uint64_t **)(v136 + 16), (uint64_t)(*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 5);
                v509[0] = v135;
                *v135 = 1;
                do
                {
                  v137 = __ldaxr((unint64_t *)v26);
                  v138 = --v137 == 0;
                }
                while (__stlxr(v137, (unint64_t *)v26));
                goto LABEL_434;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v198 = operator new();
                v199 = v509[0];
                *(_QWORD *)v198 = *(_QWORD *)v509[0];
                *(_QWORD *)(v198 + 8) = *(_QWORD *)(v199 + 8);
                v200 = *(_QWORD *)(v199 + 16);
                *(_QWORD *)(v198 + 16) = v200;
                if (v200)
                {
                  v201 = (unsigned int *)(v200 + 8);
                  do
                    v202 = __ldxr(v201);
                  while (__stxr(v202 + 1, v201));
                }
                v203 = *(_OWORD *)(v199 + 24);
                v204 = *(_OWORD *)(v199 + 40);
                *(_OWORD *)(v198 + 56) = *(_OWORD *)(v199 + 56);
                *(_OWORD *)(v198 + 40) = v204;
                *(_OWORD *)(v198 + 24) = v203;
                v509[0] = v198;
                *(_QWORD *)v198 = 1;
                do
                {
                  v205 = __ldaxr((unint64_t *)v26);
                  v206 = --v205 == 0;
                }
                while (__stlxr(v205, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 != 1)
                {
                  v109 = (_QWORD *)operator new();
                  v110 = v509[0] + 8;
                  *v109 = *(_QWORD *)v509[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v109 + 1, v110);
                  v509[0] = v109;
                  *v109 = 1;
                  do
                  {
                    v111 = __ldaxr((unint64_t *)v26);
                    v112 = v111 - 1;
                  }
                  while (__stlxr(v112, (unint64_t *)v26));
                  if (!v112)
                  {
                    v113 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v26);
                    MEMORY[0x219A19A08](v113, 0x1030C407B73B9F7);
                  }
                }
                v114 = (_QWORD *)v509[0];
                v508 = 0;
                v507 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v507, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 4);
                turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v507, v495);
                std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v114 + 1), (__int128 *)v495);
                v115 = (void *)v114[3];
                if (v115)
                {
                  v114[4] = v115;
                  operator delete(v115);
                  v114[3] = 0;
                  v114[4] = 0;
                  v114[5] = 0;
                }
                v116 = (void *)v114[6];
                *(_OWORD *)(v114 + 3) = *(_OWORD *)&v495[16];
                v114[5] = *(_QWORD *)v496;
                *(_OWORD *)&v495[16] = 0uLL;
                *(_QWORD *)v496 = 0;
                if (v116)
                {
                  v114[7] = v116;
                  operator delete(v116);
                  v114[6] = 0;
                  v114[7] = 0;
                  v114[8] = 0;
                  v116 = *(void **)&v495[16];
                }
                *((_OWORD *)v114 + 3) = *(_OWORD *)&v496[8];
                v114[8] = *(_QWORD *)&v496[24];
                memset(&v496[8], 0, 24);
                v114[9] = v497;
                if (v116)
                {
                  *(_QWORD *)&v495[24] = v116;
                  operator delete(v116);
                }
                v117 = *(std::__shared_weak_count **)&v495[8];
                if (*(_QWORD *)&v495[8])
                {
                  v118 = (unint64_t *)(*(_QWORD *)&v495[8] + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
                v504 = (uint64_t)&v507;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v504);
                goto LABEL_463;
              default:
                goto LABEL_690;
            }
          case 5:
            v57 = *(_QWORD *)v22;
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v58 = (_QWORD *)operator new();
                  v59 = v509[0];
                  *v58 = *(_QWORD *)v509[0];
                  v60 = (std::string *)(v58 + 1);
                  if (*(char *)(v59 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)(v59 + 8), *(_QWORD *)(v59 + 16));
                  }
                  else
                  {
                    v61 = *(_OWORD *)(v59 + 8);
                    v58[3] = *(_QWORD *)(v59 + 24);
                    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
                  }
                  v509[0] = v58;
                  *v58 = 1;
                  do
                  {
                    v480 = __ldaxr((unint64_t *)v26);
                    v481 = v480 - 1;
                  }
                  while (__stlxr(v481, (unint64_t *)v26));
                  if (!v481)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v482 = (_QWORD *)(v57 + 8);
                v458 = v509[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v507, v482);
                goto LABEL_668;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v142 = (_QWORD *)operator new();
                v143 = v509[0];
                *v142 = *(_QWORD *)v509[0];
                v142[2] = 0;
                v142[3] = 0;
                v142[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v142 + 1, *(const void **)(v143 + 8), *(_QWORD *)(v143 + 16), (uint64_t)(*(_QWORD *)(v143 + 16) - *(_QWORD *)(v143 + 8)) >> 3);
                v509[0] = v142;
                *v142 = 1;
                do
                {
                  v144 = __ldaxr((unint64_t *)v26);
                  v108 = --v144 == 0;
                }
                while (__stlxr(v144, (unint64_t *)v26));
                goto LABEL_343;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v331 = (_QWORD *)operator new();
                v332 = v509[0];
                *v331 = *(_QWORD *)v509[0];
                v331[2] = 0;
                v331[3] = 0;
                v331[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v331 + 1, *(uint64_t **)(v332 + 8), *(uint64_t **)(v332 + 16), (uint64_t)(*(_QWORD *)(v332 + 16) - *(_QWORD *)(v332 + 8)) >> 4);
                v509[0] = v331;
                *v331 = 1;
                do
                {
                  v333 = __ldaxr((unint64_t *)v26);
                  v219 = --v333 == 0;
                }
                while (__stlxr(v333, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 != 1)
                {
                  v268 = (_QWORD *)operator new();
                  v269 = v509[0];
                  *v268 = *(_QWORD *)v509[0];
                  v268[2] = 0;
                  v268[3] = 0;
                  v268[1] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v268 + 1, *(uint64_t **)(v269 + 8), *(uint64_t **)(v269 + 16), (uint64_t)(*(_QWORD *)(v269 + 16) - *(_QWORD *)(v269 + 8)) >> 5);
                  v509[0] = v268;
                  *v268 = 1;
                  do
                  {
                    v270 = __ldaxr((unint64_t *)v26);
                    v271 = v270 - 1;
                  }
                  while (__stlxr(v271, (unint64_t *)v26));
                  if (!v271)
                  {
                    *(_QWORD *)v495 = v26 + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
                    MEMORY[0x219A19A08](v26, 0x1020C405E66F15BLL);
                  }
                }
                if (v509[0] != v57)
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v509[0] + 8), *(uint64_t **)(v57 + 8), *(uint64_t **)(v57 + 16), (uint64_t)(*(_QWORD *)(v57 + 16) - *(_QWORD *)(v57 + 8)) >> 5);
                goto LABEL_463;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v337 = operator new();
                v338 = v509[0];
                *(_QWORD *)v337 = *(_QWORD *)v509[0];
                *(_QWORD *)(v337 + 8) = *(_QWORD *)(v338 + 8);
                v339 = *(_QWORD *)(v338 + 16);
                *(_QWORD *)(v337 + 16) = v339;
                if (v339)
                {
                  v340 = (unsigned int *)(v339 + 8);
                  do
                    v341 = __ldxr(v340);
                  while (__stxr(v341 + 1, v340));
                }
                v342 = *(_OWORD *)(v338 + 24);
                v343 = *(_OWORD *)(v338 + 40);
                *(_OWORD *)(v337 + 56) = *(_OWORD *)(v338 + 56);
                *(_OWORD *)(v337 + 40) = v343;
                *(_OWORD *)(v337 + 24) = v342;
                v509[0] = v337;
                *(_QWORD *)v337 = 1;
                do
                {
                  v344 = __ldaxr((unint64_t *)v26);
                  v206 = --v344 == 0;
                }
                while (__stlxr(v344, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v207 = (_QWORD *)operator new();
                v208 = v509[0] + 8;
                *v207 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v207 + 1, v208);
                v509[0] = v207;
                *v207 = 1;
                do
                {
                  v209 = __ldaxr((unint64_t *)v26);
                  v134 = --v209 == 0;
                }
                while (__stlxr(v209, (unint64_t *)v26));
                goto LABEL_291;
              default:
                goto LABEL_690;
            }
          case 6:
            switch(BYTE4(v509[1]))
            {
              case 0:
                v27 = (uint64_t)(*(_QWORD *)v22 << 8) >> 8;
                goto LABEL_74;
              case 1:
                a3.n128_f64[0] = (double)*(int *)(v22 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v22 << 8) >> 8);
LABEL_332:
                v509[0] = a3.n128_u64[0];
                goto LABEL_463;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v276 = (_QWORD *)operator new();
                  v277 = v509[0];
                  *v276 = *(_QWORD *)v509[0];
                  v278 = (std::string *)(v276 + 1);
                  if (*(char *)(v277 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v278, *(const std::string::value_type **)(v277 + 8), *(_QWORD *)(v277 + 16));
                  }
                  else
                  {
                    v279 = *(_OWORD *)(v277 + 8);
                    v276[3] = *(_QWORD *)(v277 + 24);
                    *(_OWORD *)&v278->__r_.__value_.__l.__data_ = v279;
                  }
                  v509[0] = v276;
                  *v276 = 1;
                  do
                  {
                    v485 = __ldaxr((unint64_t *)v26);
                    v486 = v485 - 1;
                  }
                  while (__stlxr(v486, (unint64_t *)v26));
                  if (!v486)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v463 = v509[0];
                v487 = *(_DWORD *)(v22 + 8);
                v507.n128_u64[0] = *(_QWORD *)v22;
                v507.n128_u32[2] = v487;
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v507, (std::string *)v495);
LABEL_680:
                v478 = v463 + 8;
                if (*(char *)(v463 + 31) < 0)
                  operator delete(*(void **)v478);
                a3 = *(__n128 *)v495;
                v479 = *(_QWORD *)&v495[16];
LABEL_683:
                *(_QWORD *)(v478 + 16) = v479;
                *(__n128 *)v478 = a3;
                goto LABEL_463;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v195 = (_QWORD *)operator new();
                v196 = v509[0];
                *v195 = *(_QWORD *)v509[0];
                v195[2] = 0;
                v195[3] = 0;
                v195[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v195 + 1, *(const void **)(v196 + 8), *(_QWORD *)(v196 + 16), (uint64_t)(*(_QWORD *)(v196 + 16) - *(_QWORD *)(v196 + 8)) >> 3);
                v509[0] = v195;
                *v195 = 1;
                do
                {
                  v197 = __ldaxr((unint64_t *)v26);
                  v108 = --v197 == 0;
                }
                while (__stlxr(v197, (unint64_t *)v26));
                goto LABEL_343;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v334 = (_QWORD *)operator new();
                v335 = v509[0];
                *v334 = *(_QWORD *)v509[0];
                v334[2] = 0;
                v334[3] = 0;
                v334[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v334 + 1, *(uint64_t **)(v335 + 8), *(uint64_t **)(v335 + 16), (uint64_t)(*(_QWORD *)(v335 + 16) - *(_QWORD *)(v335 + 8)) >> 4);
                v509[0] = v334;
                *v334 = 1;
                do
                {
                  v336 = __ldaxr((unint64_t *)v26);
                  v219 = --v336 == 0;
                }
                while (__stlxr(v336, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v345 = (_QWORD *)operator new();
                v346 = v509[0];
                *v345 = *(_QWORD *)v509[0];
                v345[2] = 0;
                v345[3] = 0;
                v345[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v345 + 1, *(uint64_t **)(v346 + 8), *(uint64_t **)(v346 + 16), (uint64_t)(*(_QWORD *)(v346 + 16) - *(_QWORD *)(v346 + 8)) >> 5);
                v509[0] = v345;
                *v345 = 1;
                do
                {
                  v347 = __ldaxr((unint64_t *)v26);
                  v138 = --v347 == 0;
                }
                while (__stlxr(v347, (unint64_t *)v26));
                goto LABEL_434;
              case 6:
                v289 = *(_DWORD *)(v22 + 8);
                v509[0] = *(_QWORD *)v22;
                LODWORD(v509[1]) = v289;
                goto LABEL_463;
              case 7:
                goto LABEL_462;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v348 = operator new();
                v349 = v509[0];
                *(_QWORD *)v348 = *(_QWORD *)v509[0];
                *(_QWORD *)(v348 + 8) = *(_QWORD *)(v349 + 8);
                v350 = *(_QWORD *)(v349 + 16);
                *(_QWORD *)(v348 + 16) = v350;
                if (v350)
                {
                  v351 = (unsigned int *)(v350 + 8);
                  do
                    v352 = __ldxr(v351);
                  while (__stxr(v352 + 1, v351));
                }
                v353 = *(_OWORD *)(v349 + 24);
                v354 = *(_OWORD *)(v349 + 40);
                *(_OWORD *)(v348 + 56) = *(_OWORD *)(v349 + 56);
                *(_OWORD *)(v348 + 40) = v354;
                *(_OWORD *)(v348 + 24) = v353;
                v509[0] = v348;
                *(_QWORD *)v348 = 1;
                do
                {
                  v355 = __ldaxr((unint64_t *)v26);
                  v206 = --v355 == 0;
                }
                while (__stlxr(v355, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v220 = (_QWORD *)operator new();
                v221 = v509[0] + 8;
                *v220 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v220 + 1, v221);
                v509[0] = v220;
                *v220 = 1;
                do
                {
                  v222 = __ldaxr((unint64_t *)v26);
                  v134 = --v222 == 0;
                }
                while (__stlxr(v222, (unint64_t *)v26));
                goto LABEL_291;
              default:
                goto LABEL_690;
            }
          case 7:
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 6:
                goto LABEL_462;
              case 1:
                v27 = 0x7FF8000000000000;
LABEL_74:
                v509[0] = v27;
                goto LABEL_463;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v139 = (_QWORD *)operator new();
                  v140 = v509[0];
                  *v139 = *(_QWORD *)v509[0];
                  v141 = (std::string *)(v139 + 1);
                  if (*(char *)(v140 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v141, *(const std::string::value_type **)(v140 + 8), *(_QWORD *)(v140 + 16));
                  }
                  else
                  {
                    a3 = *(__n128 *)(v140 + 8);
                    v139[3] = *(_QWORD *)(v140 + 24);
                    *(__n128 *)&v141->__r_.__value_.__l.__data_ = a3;
                  }
                  v509[0] = v139;
                  *v139 = 1;
                  do
                  {
                    v465 = __ldaxr((unint64_t *)v26);
                    v466 = v465 - 1;
                  }
                  while (__stlxr(v466, (unint64_t *)v26));
                  if (!v466)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v467 = v509[0] + 8;
                if (*(char *)(v509[0] + 31) < 0)
                  operator delete(*(void **)v467);
                *(_QWORD *)v467 = 0;
                *(_QWORD *)(v467 + 8) = 0;
                *(_QWORD *)(v467 + 16) = 0;
                goto LABEL_463;
              case 3:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v263 = (_QWORD *)operator new();
                v264 = v509[0];
                *v263 = *(_QWORD *)v509[0];
                v263[2] = 0;
                v263[3] = 0;
                v263[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v263 + 1, *(const void **)(v264 + 8), *(_QWORD *)(v264 + 16), (uint64_t)(*(_QWORD *)(v264 + 16) - *(_QWORD *)(v264 + 8)) >> 3);
                v509[0] = v263;
                *v263 = 1;
                do
                {
                  v265 = __ldaxr((unint64_t *)v26);
                  v108 = --v265 == 0;
                }
                while (__stlxr(v265, (unint64_t *)v26));
LABEL_343:
                if (!v108)
                  goto LABEL_462;
                v266 = *(void **)(v26 + 8);
                v267 = 0x1080C409938AC02;
                if (v266)
                {
                  *(_QWORD *)(v26 + 16) = v266;
                  operator delete(v266);
                  v267 = 0x1080C409938AC02;
                }
                goto LABEL_461;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v286 = (_QWORD *)operator new();
                v287 = v509[0];
                *v286 = *(_QWORD *)v509[0];
                v286[2] = 0;
                v286[3] = 0;
                v286[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v286 + 1, *(uint64_t **)(v287 + 8), *(uint64_t **)(v287 + 16), (uint64_t)(*(_QWORD *)(v287 + 16) - *(_QWORD *)(v287 + 8)) >> 4);
                v509[0] = v286;
                *v286 = 1;
                do
                {
                  v288 = __ldaxr((unint64_t *)v26);
                  v219 = --v288 == 0;
                }
                while (__stlxr(v288, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v213 = (_QWORD *)operator new();
                v214 = v509[0];
                *v213 = *(_QWORD *)v509[0];
                v213[2] = 0;
                v213[3] = 0;
                v213[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v213 + 1, *(uint64_t **)(v214 + 8), *(uint64_t **)(v214 + 16), (uint64_t)(*(_QWORD *)(v214 + 16) - *(_QWORD *)(v214 + 8)) >> 5);
                v509[0] = v213;
                *v213 = 1;
                do
                {
                  v215 = __ldaxr((unint64_t *)v26);
                  v138 = --v215 == 0;
                }
                while (__stlxr(v215, (unint64_t *)v26));
                goto LABEL_434;
              case 7:
                goto LABEL_463;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v298 = operator new();
                v299 = v509[0];
                *(_QWORD *)v298 = *(_QWORD *)v509[0];
                *(_QWORD *)(v298 + 8) = *(_QWORD *)(v299 + 8);
                v300 = *(_QWORD *)(v299 + 16);
                *(_QWORD *)(v298 + 16) = v300;
                if (v300)
                {
                  v301 = (unsigned int *)(v300 + 8);
                  do
                    v302 = __ldxr(v301);
                  while (__stxr(v302 + 1, v301));
                }
                v303 = *(_OWORD *)(v299 + 24);
                v304 = *(_OWORD *)(v299 + 40);
                *(_OWORD *)(v298 + 56) = *(_OWORD *)(v299 + 56);
                *(_OWORD *)(v298 + 40) = v304;
                *(_OWORD *)(v298 + 24) = v303;
                v509[0] = v298;
                *(_QWORD *)v298 = 1;
                do
                {
                  v305 = __ldaxr((unint64_t *)v26);
                  v206 = --v305 == 0;
                }
                while (__stlxr(v305, (unint64_t *)v26));
                goto LABEL_457;
              case 9:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v175 = (_QWORD *)operator new();
                v176 = v509[0] + 8;
                *v175 = *(_QWORD *)v509[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v175 + 1, v176);
                v509[0] = v175;
                *v175 = 1;
                do
                {
                  v177 = __ldaxr((unint64_t *)v26);
                  v134 = --v177 == 0;
                }
                while (__stlxr(v177, (unint64_t *)v26));
LABEL_291:
                if (!v134)
                  goto LABEL_462;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v26);
                v223 = 2071181815;
                goto LABEL_460;
              default:
                goto LABEL_690;
            }
          case 8:
            v62 = (uint64_t *)(*(_QWORD *)v22 + 8);
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                if (*(_QWORD *)v26 != 1)
                {
                  v63 = (_QWORD *)operator new();
                  v64 = v509[0];
                  *v63 = *(_QWORD *)v509[0];
                  v65 = (std::string *)(v63 + 1);
                  if (*(char *)(v64 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
                  }
                  else
                  {
                    v66 = *(_OWORD *)(v64 + 8);
                    v63[3] = *(_QWORD *)(v64 + 24);
                    *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
                  }
                  v509[0] = v63;
                  *v63 = 1;
                  do
                  {
                    v483 = __ldaxr((unint64_t *)v26);
                    v484 = v483 - 1;
                  }
                  while (__stlxr(v484, (unint64_t *)v26));
                  if (!v484)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v458 = v509[0];
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_668;
              case 3:
                if (*(_QWORD *)v26 != 1)
                {
                  v165 = (_QWORD *)operator new();
                  v166 = v509[0];
                  *v165 = *(_QWORD *)v509[0];
                  v165[2] = 0;
                  v165[3] = 0;
                  v165[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v165 + 1, *(const void **)(v166 + 8), *(_QWORD *)(v166 + 16), (uint64_t)(*(_QWORD *)(v166 + 16) - *(_QWORD *)(v166 + 8)) >> 3);
                  v509[0] = v165;
                  *v165 = 1;
                  do
                  {
                    v167 = __ldaxr((unint64_t *)v26);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, (unint64_t *)v26));
                  if (!v168)
                  {
                    v169 = *(void **)(v26 + 8);
                    if (v169)
                    {
                      *(_QWORD *)(v26 + 16) = v169;
                      operator delete(v169);
                    }
                    a3.n128_f64[0] = MEMORY[0x219A19A08](v26, 0x1080C409938AC02);
                  }
                }
                v170 = (_QWORD *)v509[0];
                turi::flexible_type_impl::get_vec_visitor::operator()(v62, (double **)v495, a3.n128_u64[0]);
                v171 = (void *)v170[1];
                if (v171)
                {
                  v170[2] = v171;
                  operator delete(v171);
                  v170[1] = 0;
                  v170[2] = 0;
                  v170[3] = 0;
                }
                a3.n128_u64[0] = *(_QWORD *)v495;
                *(_OWORD *)(v170 + 1) = *(_OWORD *)v495;
                v170[3] = *(_QWORD *)&v495[16];
                goto LABEL_463;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v356 = (_QWORD *)operator new();
                v357 = v509[0];
                *v356 = *(_QWORD *)v509[0];
                v356[2] = 0;
                v356[3] = 0;
                v356[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v356 + 1, *(uint64_t **)(v357 + 8), *(uint64_t **)(v357 + 16), (uint64_t)(*(_QWORD *)(v357 + 16) - *(_QWORD *)(v357 + 8)) >> 4);
                v509[0] = v356;
                *v356 = 1;
                do
                {
                  v358 = __ldaxr((unint64_t *)v26);
                  v219 = --v358 == 0;
                }
                while (__stlxr(v358, (unint64_t *)v26));
                goto LABEL_447;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v306 = (_QWORD *)operator new();
                v307 = v509[0];
                *v306 = *(_QWORD *)v509[0];
                v306[2] = 0;
                v306[3] = 0;
                v306[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v306 + 1, *(uint64_t **)(v307 + 8), *(uint64_t **)(v307 + 16), (uint64_t)(*(_QWORD *)(v307 + 16) - *(_QWORD *)(v307 + 8)) >> 5);
                v509[0] = v306;
                *v306 = 1;
                do
                {
                  v308 = __ldaxr((unint64_t *)v26);
                  v138 = --v308 == 0;
                }
                while (__stlxr(v308, (unint64_t *)v26));
                goto LABEL_434;
              case 8:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v359 = operator new();
                v360 = v509[0];
                *(_QWORD *)v359 = *(_QWORD *)v509[0];
                *(_QWORD *)(v359 + 8) = *(_QWORD *)(v360 + 8);
                v361 = *(_QWORD *)(v360 + 16);
                *(_QWORD *)(v359 + 16) = v361;
                if (v361)
                {
                  v362 = (unsigned int *)(v361 + 8);
                  do
                    v363 = __ldxr(v362);
                  while (__stxr(v363 + 1, v362));
                }
                v364 = *(_OWORD *)(v360 + 24);
                v365 = *(_OWORD *)(v360 + 40);
                *(_OWORD *)(v359 + 56) = *(_OWORD *)(v360 + 56);
                *(_OWORD *)(v359 + 40) = v365;
                *(_OWORD *)(v359 + 24) = v364;
                v509[0] = v359;
                *(_QWORD *)v359 = 1;
                do
                {
                  v366 = __ldaxr((unint64_t *)v26);
                  v206 = --v366 == 0;
                }
                while (__stlxr(v366, (unint64_t *)v26));
LABEL_457:
                if (!v206)
                  goto LABEL_462;
                boost::detail::shared_count::~shared_count((unsigned int **)(v26 + 16));
                v223 = -235920773;
LABEL_460:
                v267 = v223 | 0x1030C4000000000;
                goto LABEL_461;
              case 9:
                if (*(_QWORD *)v26 != 1)
                {
                  v243 = (_QWORD *)operator new();
                  v244 = v509[0] + 8;
                  *v243 = *(_QWORD *)v509[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v243 + 1, v244);
                  v509[0] = v243;
                  *v243 = 1;
                  do
                  {
                    v245 = __ldaxr((unint64_t *)v26);
                    v246 = v245 - 1;
                  }
                  while (__stlxr(v246, (unint64_t *)v26));
                  if (!v246)
                  {
                    v247 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v26);
                    a3.n128_f64[0] = MEMORY[0x219A19A08](v247, 0x1030C407B73B9F7);
                  }
                }
                v248 = (_QWORD *)v509[0];
                turi::flexible_type_impl::get_ndvec_visitor::operator()(v62, v495, a3.n128_u64[0]);
                std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v248 + 1), (__int128 *)v495);
                v249 = (void *)v248[3];
                if (v249)
                {
                  v248[4] = v249;
                  operator delete(v249);
                  v248[3] = 0;
                  v248[4] = 0;
                  v248[5] = 0;
                }
                v250 = (void *)v248[6];
                *(_OWORD *)(v248 + 3) = *(_OWORD *)&v495[16];
                v248[5] = *(_QWORD *)v496;
                *(_OWORD *)&v495[16] = 0uLL;
                *(_QWORD *)v496 = 0;
                if (v250)
                {
                  v248[7] = v250;
                  operator delete(v250);
                  v248[6] = 0;
                  v248[7] = 0;
                  v248[8] = 0;
                  v250 = *(void **)&v495[16];
                }
                a3.n128_u64[0] = *(_QWORD *)&v496[8];
                *((_OWORD *)v248 + 3) = *(_OWORD *)&v496[8];
                v248[8] = *(_QWORD *)&v496[24];
                memset(&v496[8], 0, 24);
                v248[9] = v497;
                if (v250)
                {
                  *(_QWORD *)&v495[24] = v250;
                  operator delete(v250);
                }
                v162 = *(std::__shared_weak_count **)&v495[8];
                if (!*(_QWORD *)&v495[8])
                  goto LABEL_463;
                v251 = (unint64_t *)(*(_QWORD *)&v495[8] + 8);
                do
                  v164 = __ldaxr(v251);
                while (__stlxr(v164 - 1, v251));
                goto LABEL_582;
              default:
                goto LABEL_690;
            }
          case 9:
            v40 = *(_QWORD *)v22;
            v492 = (_QWORD *)(*(_QWORD *)v22 + 8);
            switch(BYTE4(v509[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_462;
              case 2:
                v41 = (_QWORD *)(*(_QWORD *)v22 + 8);
                if (*(_QWORD *)v26 != 1)
                {
                  v42 = (_QWORD *)operator new();
                  v43 = v509[0];
                  *v42 = *(_QWORD *)v509[0];
                  v44 = (std::string *)(v42 + 1);
                  if (*(char *)(v43 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)(v43 + 8), *(_QWORD *)(v43 + 16));
                  }
                  else
                  {
                    v45 = *(_OWORD *)(v43 + 8);
                    v42[3] = *(_QWORD *)(v43 + 24);
                    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
                  }
                  v41 = v492;
                  v509[0] = v42;
                  *v42 = 1;
                  do
                  {
                    v459 = __ldaxr((unint64_t *)v26);
                    v460 = v459 - 1;
                  }
                  while (__stlxr(v460, (unint64_t *)v26));
                  if (!v460)
                  {
                    if (*(char *)(v26 + 31) < 0)
                      operator delete(*(void **)(v26 + 8));
                    MEMORY[0x219A19A08](v26, 0x1012C404EF22A49);
                  }
                }
                v458 = v509[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v507, v41);
LABEL_668:
                v473 = v458 + 8;
                if (*(char *)(v458 + 31) < 0)
                  operator delete(*(void **)v473);
                a3 = *(__n128 *)v495;
                v474 = *(_QWORD *)&v495[16];
LABEL_671:
                *(_QWORD *)(v473 + 16) = v474;
                *(__n128 *)v473 = a3;
                goto LABEL_463;
              case 3:
                if (*(_QWORD *)v26 != 1)
                {
                  v95 = (_QWORD *)operator new();
                  v96 = v509[0];
                  *v95 = *(_QWORD *)v509[0];
                  v95[2] = 0;
                  v95[3] = 0;
                  v95[1] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v95 + 1, *(const void **)(v96 + 8), *(_QWORD *)(v96 + 16), (uint64_t)(*(_QWORD *)(v96 + 16) - *(_QWORD *)(v96 + 8)) >> 3);
                  v509[0] = v95;
                  *v95 = 1;
                  do
                  {
                    v97 = __ldaxr((unint64_t *)v26);
                    v98 = v97 - 1;
                  }
                  while (__stlxr(v98, (unint64_t *)v26));
                  if (!v98)
                  {
                    v99 = *(void **)(v26 + 8);
                    if (v99)
                    {
                      *(_QWORD *)(v26 + 16) = v99;
                      operator delete(v99);
                    }
                    MEMORY[0x219A19A08](v26, 0x1080C409938AC02);
                  }
                }
                v100 = (char *)(v509[0] + 8);
                if (!*(_QWORD *)(v40 + 72))
                {
                  v102 = *(uint64_t **)(v40 + 24);
                  v101 = *(uint64_t **)(v40 + 32);
                  v103 = *(_QWORD **)(v40 + 8);
                  if (v101 == v102 || v103 == 0)
                  {
                    v397 = 0;
                  }
                  else
                  {
                    v397 = 1;
                    do
                    {
                      v398 = *v102++;
                      v397 *= v398;
                    }
                    while (v102 != v101);
                  }
                  if (v397 == (uint64_t)(v103[1] - *v103) >> 3
                    && turi::flexible_type_impl::ndarray<double>::last_index(v492) == (uint64_t)(*(_QWORD *)(*v492 + 8)
                                                                                              - *(_QWORD *)*v492) >> 3)
                  {
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v492))
                      turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                    if (v100 != (char *)*v492)
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v100, *(char **)*v492, *(_QWORD *)(*v492 + 8), (uint64_t)(*(_QWORD *)(*v492 + 8) - *(_QWORD *)*v492) >> 3);
                    goto LABEL_463;
                  }
                }
                if (!turi::flexible_type_impl::ndarray<double>::is_valid(v492))
                  turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                if (turi::flexible_type_impl::ndarray<double>::is_full(v492))
                {
                  turi::flexible_type_impl::ndarray<double>::ndarray(v495, (uint64_t)v492);
                  goto LABEL_572;
                }
                v507 = 0uLL;
                v508 = 0;
                v505 = 0;
                v506 = 0;
                v501 = 0;
                v502 = 0;
                v503 = 0;
                v504 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v495, (uint64_t)&v507, (uint64_t)&v504, (uint64_t)&v501, 0);
                if (v501)
                {
                  v502 = v501;
                  operator delete(v501);
                }
                if (v504)
                {
                  v505 = v504;
                  operator delete((void *)v504);
                }
                if (v507.n128_u64[0])
                {
                  v507.n128_u64[1] = v507.n128_u64[0];
                  operator delete((void *)v507.n128_u64[0]);
                }
                v497 = 0;
                if (&v495[16] != (_BYTE *)(v40 + 24))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v495[16], *(char **)(v40 + 24), *(_QWORD *)(v40 + 32), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
                v400 = *(uint64_t **)(v40 + 24);
                v399 = *(uint64_t **)(v40 + 32);
                if (v399 == v400 || !*v492)
                {
                  v401 = 0;
                }
                else
                {
                  v401 = 1;
                  do
                  {
                    v402 = *v400++;
                    v401 *= v402;
                  }
                  while (v400 != v399);
                }
                std::vector<double>::resize(*(uint64_t *)v495, v401);
                std::vector<unsigned long>::resize((uint64_t)&v496[8], (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
                if (*(_QWORD *)&v495[24] == *(_QWORD *)&v495[16]
                  || *(_QWORD *)(*(_QWORD *)v495 + 8) == **(_QWORD **)v495)
                {
                  goto LABEL_572;
                }
                std::vector<std::pair<unsigned long,unsigned long>>::vector(&v507, (uint64_t)(*(_QWORD *)(v40 + 56) - *(_QWORD *)(v40 + 48)) >> 3);
                v403 = *(_QWORD *)(v40 + 48);
                v404 = *(_QWORD *)(v40 + 56);
                v405 = (unint64_t *)v507.n128_u64[0];
                v406 = v404 - v403;
                if (v404 != v403)
                {
                  v407 = 0;
                  v408 = v406 >> 3;
                  if (v408 <= 1)
                    v408 = 1;
                  v409 = (_QWORD *)(v507.n128_u64[0] + 8);
                  do
                  {
                    *(v409 - 1) = *(_QWORD *)(v403 + 8 * v407);
                    *v409 = v407++;
                    v409 += 2;
                  }
                  while (v408 != v407);
                }
                v410 = 126 - 2 * __clz((uint64_t)(v507.n128_u64[1] - (_QWORD)v405) >> 4);
                if ((unint64_t *)v507.n128_u64[1] == v405)
                  v411 = 0;
                else
                  v411 = v410;
                std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>,false>(v507.n128_i64[1], (unint64_t *)v507.n128_u64[1], (uint64_t)v405, v405, (uint64_t)&v501, v411, 1);
                v412 = v507.n128_u64[0];
                v413 = *(_QWORD *)&v496[8];
                *(_QWORD *)(*(_QWORD *)&v496[8] + 8 * *(_QWORD *)(v507.n128_u64[0] + 8)) = 1;
                v414 = *(_QWORD *)(v40 + 56) - *(_QWORD *)(v40 + 48);
                if ((unint64_t)v414 >= 9)
                {
                  v415 = v414 >> 3;
                  v416 = *(_QWORD *)&v495[16];
                  if (v415 <= 2)
                    v415 = 2;
                  v417 = (uint64_t *)(v412 + 24);
                  v418 = v415 - 1;
                  do
                  {
                    v419 = *(_QWORD *)(v416 + 8 * *(v417 - 2)) * *(_QWORD *)(v413 + 8 * *(v417 - 2));
                    v420 = *v417;
                    v417 += 2;
                    *(_QWORD *)(v413 + 8 * v420) = v419;
                    --v418;
                  }
                  while (v418);
                }
                v421 = (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3;
                v501 = 0;
                std::vector<unsigned long>::vector(&v504, v421, &v501);
                v422 = (void **)v504;
                v423 = (void **)v505;
                v424 = v505 - v504;
                v425 = (v505 - v504) >> 3;
                v426 = v425 - 1;
                if (v425 <= 1)
                  v427 = 1;
                else
                  v427 = (v505 - v504) >> 3;
                v428 = *(uint64_t **)&v496[8];
                v429 = **(_QWORD **)v495;
                break;
              case 4:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v216 = (_QWORD *)operator new();
                v217 = v509[0];
                *v216 = *(_QWORD *)v509[0];
                v216[2] = 0;
                v216[3] = 0;
                v216[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v216 + 1, *(uint64_t **)(v217 + 8), *(uint64_t **)(v217 + 16), (uint64_t)(*(_QWORD *)(v217 + 16) - *(_QWORD *)(v217 + 8)) >> 4);
                v509[0] = v216;
                *v216 = 1;
                do
                {
                  v218 = __ldaxr((unint64_t *)v26);
                  v219 = --v218 == 0;
                }
                while (__stlxr(v218, (unint64_t *)v26));
LABEL_447:
                if (!v219)
                  goto LABEL_462;
                *(_QWORD *)v495 = v26 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
                goto LABEL_450;
              case 5:
                if (*(_QWORD *)v26 == 1)
                  goto LABEL_462;
                v172 = (_QWORD *)operator new();
                v173 = v509[0];
                *v172 = *(_QWORD *)v509[0];
                v172[2] = 0;
                v172[3] = 0;
                v172[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v172 + 1, *(uint64_t **)(v173 + 8), *(uint64_t **)(v173 + 16), (uint64_t)(*(_QWORD *)(v173 + 16) - *(_QWORD *)(v173 + 8)) >> 5);
                v509[0] = v172;
                *v172 = 1;
                do
                {
                  v174 = __ldaxr((unint64_t *)v26);
                  v138 = --v174 == 0;
                }
                while (__stlxr(v174, (unint64_t *)v26));
LABEL_434:
                if (!v138)
                  goto LABEL_462;
                *(_QWORD *)v495 = v26 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
LABEL_450:
                v267 = 0x1020C405E66F15BLL;
LABEL_461:
                MEMORY[0x219A19A08](v26, v267);
LABEL_462:
                turi::flexible_type_fail(0);
                goto LABEL_463;
              case 8:
                if (*(_QWORD *)v26 != 1)
                {
                  v229 = operator new();
                  v230 = v509[0];
                  *(_QWORD *)v229 = *(_QWORD *)v509[0];
                  *(_QWORD *)(v229 + 8) = *(_QWORD *)(v230 + 8);
                  v231 = *(_QWORD *)(v230 + 16);
                  *(_QWORD *)(v229 + 16) = v231;
                  if (v231)
                  {
                    v232 = (unsigned int *)(v231 + 8);
                    do
                      v233 = __ldxr(v232);
                    while (__stxr(v233 + 1, v232));
                  }
                  v234 = *(_OWORD *)(v230 + 24);
                  v235 = *(_OWORD *)(v230 + 40);
                  *(_OWORD *)(v229 + 56) = *(_OWORD *)(v230 + 56);
                  *(_OWORD *)(v229 + 40) = v235;
                  *(_OWORD *)(v229 + 24) = v234;
                  v509[0] = v229;
                  *(_QWORD *)v229 = 1;
                  do
                  {
                    v236 = __ldaxr((unint64_t *)v26);
                    v237 = v236 - 1;
                  }
                  while (__stlxr(v237, (unint64_t *)v26));
                  if (!v237)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v26 + 16));
                    MEMORY[0x219A19A08](v26, 0x1030C40F1F0227BLL);
                  }
                }
                v238 = v509[0];
                turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v492, (turi::image_type *)v495);
                v239 = *(_OWORD *)v495;
                *(_OWORD *)v495 = 0uLL;
                v240 = *(__n128 *)(v238 + 8);
                *(_OWORD *)(v238 + 8) = v239;
                v507 = v240;
                boost::detail::shared_count::~shared_count((unsigned int **)&v507.n128_u64[1]);
                v241 = *(_OWORD *)&v495[16];
                v242 = *(_OWORD *)v496;
                *(_OWORD *)(v238 + 56) = *(_OWORD *)&v496[16];
                *(_OWORD *)(v238 + 40) = v242;
                *(_OWORD *)(v238 + 24) = v241;
                boost::detail::shared_count::~shared_count((unsigned int **)&v495[8]);
                goto LABEL_463;
              case 9:
                if (*(_QWORD *)v26 != 1)
                {
                  v125 = (_QWORD *)operator new();
                  v126 = v509[0] + 8;
                  *v125 = *(_QWORD *)v509[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v125 + 1, v126);
                  v509[0] = v125;
                  *v125 = 1;
                  do
                  {
                    v127 = __ldaxr((unint64_t *)v26);
                    v128 = v127 - 1;
                  }
                  while (__stlxr(v128, (unint64_t *)v26));
                  if (!v128)
                  {
                    v129 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v26);
                    MEMORY[0x219A19A08](v129, 0x1030C407B73B9F7);
                  }
                }
                v130 = v509[0];
                std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v509[0] + 8), v492);
                if (v130 != v40)
                {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v130 + 24), *(char **)(v40 + 24), *(_QWORD *)(v40 + 32), (uint64_t)(*(_QWORD *)(v40 + 32) - *(_QWORD *)(v40 + 24)) >> 3);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v130 + 48), *(char **)(v40 + 48), *(_QWORD *)(v40 + 56), (uint64_t)(*(_QWORD *)(v40 + 56) - *(_QWORD *)(v40 + 48)) >> 3);
                }
                *(_QWORD *)(v130 + 72) = *(_QWORD *)(v40 + 72);
                goto LABEL_463;
              default:
                goto LABEL_690;
            }
            break;
          default:
LABEL_690:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
        while (1)
        {
          if (v423 == v422)
          {
            v437 = 0;
            v438 = *(_QWORD *)(**(_QWORD **)(v40 + 8) + 8 * *(_QWORD *)(v40 + 72));
          }
          else
          {
            v430 = 0;
            v431 = *(uint64_t **)(v40 + 48);
            v432 = v422;
            v433 = v427;
            do
            {
              v435 = (uint64_t)*v432++;
              v434 = v435;
              v436 = *v431++;
              v430 += v436 * v434;
              --v433;
            }
            while (v433);
            v437 = 0;
            v438 = *(_QWORD *)(**(_QWORD **)(v40 + 8) + 8 * (*(_QWORD *)(v40 + 72) + v430));
            v439 = v422;
            v440 = v428;
            v441 = v427;
            do
            {
              v443 = (uint64_t)*v439++;
              v442 = v443;
              v444 = *v440++;
              v437 += v444 * v442;
              --v441;
            }
            while (v441);
          }
          *(_QWORD *)(v429 + 8 * v437) = v438;
          v445 = v423 - v422;
          v446 = v425 - 1;
          if (v424 < 1)
            goto LABEL_561;
          v447 = *(_QWORD *)(v40 + 24);
          v448 = (unint64_t)v422[v426] + 1;
          v422[v426] = (void *)v448;
          if (v448 >= *(_QWORD *)(v447 + 8 * v426))
            break;
          v445 = 1;
          v446 = v425 - 1;
LABEL_561:
          if ((v446 & 0x8000000000000000) != 0)
            goto LABEL_568;
LABEL_562:
          if (!v445)
            goto LABEL_568;
        }
        v449 = v447 - 16;
        v450 = v423 - v422;
        v451 = (unint64_t *)((char *)v422 + (v424 & 0xFFFFFFFFFFFFFFF8) - 16);
        while (1)
        {
          v452 = v450 - 1;
          v451[1] = 0;
          if (v450 - 1 <= 0)
            break;
          v453 = *v451 + 1;
          *v451-- = v453;
          v454 = *(_QWORD *)(v449 + 8 * v450--);
          if (v453 < v454)
          {
            v445 = 1;
            if (((v452 - 1) & 0x8000000000000000) == 0)
              goto LABEL_562;
            break;
          }
        }
LABEL_568:
        if (v422)
        {
          v505 = (uint64_t)v422;
          operator delete(v422);
        }
        if (v507.n128_u64[0])
        {
          v507.n128_u64[1] = v507.n128_u64[0];
          operator delete((void *)v507.n128_u64[0]);
        }
LABEL_572:
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v495);
        if (!turi::flexible_type_impl::ndarray<double>::is_full(v495))
          turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
        if (v100 != *(char **)v495)
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v100, **(char ***)v495, *(_QWORD *)(*(_QWORD *)v495 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v495 + 8) - **(_QWORD **)v495) >> 3);
        if (*(_QWORD *)&v496[8])
        {
          *(_QWORD *)&v496[16] = *(_QWORD *)&v496[8];
          operator delete(*(void **)&v496[8]);
        }
        if (*(_QWORD *)&v495[16])
        {
          *(_QWORD *)&v495[24] = *(_QWORD *)&v495[16];
          operator delete(*(void **)&v495[16]);
        }
        v162 = *(std::__shared_weak_count **)&v495[8];
        if (*(_QWORD *)&v495[8])
        {
          v455 = (unint64_t *)(*(_QWORD *)&v495[8] + 8);
          do
            v164 = __ldaxr(v455);
          while (__stlxr(v164 - 1, v455));
LABEL_582:
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
          }
        }
LABEL_463:
        switch(*(_BYTE *)(v22 + 12))
        {
          case 2:
            v367 = *(unint64_t **)v22;
            do
            {
              v368 = __ldaxr(v367);
              v369 = v368 - 1;
            }
            while (__stlxr(v369, v367));
            if (!v369)
            {
              v370 = *(_QWORD *)v22;
              if (!*(_QWORD *)v22)
                goto LABEL_505;
              if (*(char *)(v370 + 31) < 0)
                operator delete(*(void **)(v370 + 8));
              v371 = (_QWORD *)v370;
              v372 = 0x1012C404EF22A49;
              goto LABEL_504;
            }
            break;
          case 3:
            v384 = *(unint64_t **)v22;
            do
            {
              v385 = __ldaxr(v384);
              v386 = v385 - 1;
            }
            while (__stlxr(v386, v384));
            if (!v386)
            {
              v387 = *(_QWORD *)v22;
              if (!*(_QWORD *)v22)
                goto LABEL_505;
              v388 = *(void **)(v387 + 8);
              if (v388)
              {
                *(_QWORD *)(v387 + 16) = v388;
                operator delete(v388);
              }
              v371 = (_QWORD *)v387;
              v372 = 0x1080C409938AC02;
              goto LABEL_504;
            }
            break;
          case 4:
            v373 = *(unint64_t **)v22;
            do
            {
              v374 = __ldaxr(v373);
              v375 = v374 - 1;
            }
            while (__stlxr(v375, v373));
            if (!v375)
            {
              v376 = *(_QWORD *)v22;
              if (!*(_QWORD *)v22)
                goto LABEL_505;
              *(_QWORD *)v495 = v376 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
              goto LABEL_497;
            }
            break;
          case 5:
            v389 = *(unint64_t **)v22;
            do
            {
              v390 = __ldaxr(v389);
              v391 = v390 - 1;
            }
            while (__stlxr(v391, v389));
            if (!v391)
            {
              v376 = *(_QWORD *)v22;
              if (!*(_QWORD *)v22)
                goto LABEL_505;
              *(_QWORD *)v495 = v376 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v495);
LABEL_497:
              v371 = (_QWORD *)v376;
              v372 = 0x1020C405E66F15BLL;
              goto LABEL_504;
            }
            break;
          case 8:
            v392 = *(unint64_t **)v22;
            do
            {
              v393 = __ldaxr(v392);
              v394 = v393 - 1;
            }
            while (__stlxr(v394, v392));
            if (!v394)
            {
              v395 = *(_QWORD *)v22;
              if (!*(_QWORD *)v22)
                goto LABEL_505;
              boost::detail::shared_count::~shared_count((unsigned int **)(v395 + 16));
              v371 = (_QWORD *)v395;
              v383 = -235920773;
              goto LABEL_503;
            }
            break;
          case 9:
            v377 = *(unint64_t **)v22;
            do
            {
              v378 = __ldaxr(v377);
              v379 = v378 - 1;
            }
            while (__stlxr(v379, v377));
            if (!v379)
            {
              v380 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v381 = (void *)v380[6];
                if (v381)
                {
                  v380[7] = v381;
                  operator delete(v381);
                }
                v382 = (void *)v380[3];
                if (v382)
                {
                  v380[4] = v382;
                  operator delete(v382);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v380 + 1));
                v371 = v380;
                v383 = 2071181815;
LABEL_503:
                v372 = v383 | 0x1030C4000000000;
LABEL_504:
                MEMORY[0x219A19A08](v371, v372);
              }
LABEL_505:
              *(_QWORD *)v22 = 0;
            }
            break;
          default:
            break;
        }
        v396 = v509[0];
        *(_QWORD *)(v22 + 5) = *(_QWORD *)((char *)v509 + 5);
        *(_QWORD *)v22 = v396;
        *(_BYTE *)(v22 + 12) = BYTE4(v509[1]);
LABEL_507:
        ++v13;
      }
      while (v13 != v12);
LABEL_684:
      ++v6;
      v3 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 4);
  }
}

void sub_2181B9204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _QWORD *v15;
  uint64_t v16;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  va_list va;

  va_start(va, a15);
  v18 = (void *)v15[6];
  if (v18)
  {
    v15[7] = v18;
    operator delete(v18);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  switch(*(_BYTE *)(v16 - 124))
  {
    case 2:
      v19 = (unint64_t *)v15[11];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_41;
      v22 = v15[11];
      if (!v22)
        goto LABEL_41;
      if (*(char *)(v22 + 31) < 0)
        operator delete(*(void **)(v22 + 8));
      v23 = (_QWORD *)v22;
      v24 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v34 = (unint64_t *)v15[11];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_41;
      v37 = (_QWORD *)v15[11];
      if (!v37)
        goto LABEL_41;
      v38 = (void *)v37[1];
      if (v38)
      {
        v37[2] = v38;
        operator delete(v38);
      }
      v23 = v37;
      v24 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v25 = (unint64_t *)v15[11];
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_41;
      v28 = (_QWORD *)v15[11];
      if (!v28)
        goto LABEL_41;
      v15[3] = v28 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 200));
      goto LABEL_33;
    case 5:
      v39 = (unint64_t *)v15[11];
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_41;
      v28 = (_QWORD *)v15[11];
      if (!v28)
        goto LABEL_41;
      v15[3] = v28 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 200));
LABEL_33:
      v23 = v28;
      v24 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v42 = (unint64_t *)v15[11];
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_41;
      v45 = v15[11];
      if (!v45)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v45 + 16));
      v23 = (_QWORD *)v45;
      v33 = -235920773;
      goto LABEL_39;
    case 9:
      v29 = (unint64_t *)v15[11];
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_41;
      v32 = (_QWORD *)v15[11];
      if (!v32)
        goto LABEL_41;
      v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v32);
      v33 = 2071181815;
LABEL_39:
      v24 = v33 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v23, v24);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"typelist.size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", "operator()", 83, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_rows::type_check_inplace(std::vector<turi::flex_type_enum> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B9784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe_rows::type_check(turi::sframe_rows *a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  __n128 v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2[1] - *a2;
  v10 = (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 4;
  v11 = v5;
  if (v5 != v10)
  {
    v8 = &v11;
    v9 = &v10;
    turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)const::$_0::operator()();
  }
  v6 = (uint64_t *)turi::sframe_rows::sframe_rows(a3, (uint64_t **)a1);
  turi::sframe_rows::type_check_inplace(v6, a2, v7);
}

void turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"typelist.size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_columns()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_rows.cpp", "operator()", 123, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sframe_rows::type_check(std::vector<turi::flex_type_enum> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181B9A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

turi::sframe_rows *turi::sframe_rows::sframe_rows(uint64_t **this, uint64_t **a2)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  *((_BYTE *)this + 24) = 1;
  if (this != a2)
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)this, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return (turi::sframe_rows *)this;
}

void sub_2181B9B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,long &,turi::flex_undefined,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<long &,turi::flex_undefined,std::allocator<std::vector<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2181B9B6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<long &,turi::flex_undefined,std::allocator<std::vector<turi::flexible_type>>,0>(_QWORD *a1, unint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D91E508;
  a1[1] = 0;
  std::allocator<std::vector<turi::flexible_type>>::construct[abi:ne180100]<std::vector<turi::flexible_type>,long &,turi::flex_undefined>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_2181B9BD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<std::vector<turi::flexible_type>>::construct[abi:ne180100]<std::vector<turi::flexible_type>,long &,turi::flex_undefined>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  unint64_t v4;
  _QWORD *result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  *(uint64_t *)((char *)v36 + 5) = 0x700000000000000;
  v36[0] = 0;
  result = std::vector<turi::flexible_type>::vector(a2, v4, v36);
  switch(BYTE4(v36[1]))
  {
    case 2:
      v6 = (unint64_t *)v36[0];
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = v36[0];
        if (v36[0])
        {
          if (*(char *)(v36[0] + 31) < 0)
            operator delete(*(void **)(v36[0] + 8));
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v12 = (unint64_t *)v36[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v36[0];
        if (v36[0])
        {
          v16 = *(void **)(v36[0] + 8);
          if (v16)
          {
            *(_QWORD *)(v36[0] + 16) = v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v17 = (unint64_t *)v36[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v36[0];
        if (v36[0])
        {
          v35 = (void **)(v36[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v21 = (unint64_t *)v36[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v20 = v36[0];
        if (v36[0])
        {
          v35 = (void **)(v36[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_26:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v31 = (unint64_t *)v36[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v36[0];
        if (v36[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v36[0] + 16));
          v10 = v34;
          v30 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v24 = (unint64_t *)v36[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v36[0];
        if (v36[0])
        {
          v28 = *(void **)(v36[0] + 48);
          if (v28)
          {
            *(_QWORD *)(v36[0] + 56) = v28;
            operator delete(v28);
          }
          v29 = *(void **)(v27 + 24);
          if (v29)
          {
            *(_QWORD *)(v27 + 32) = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
          v10 = v27;
          v30 = 2071181815;
LABEL_41:
          v11 = v30 | 0x1030C4000000000;
LABEL_42:
          result = (_QWORD *)MEMORY[0x219A19A08](v10, v11);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2181B9E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a10);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<std::vector<turi::flexible_type>,std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>&,void>@<X0>(uint64_t **a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_2181B9EE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::vector<turi::flexible_type>&,std::allocator<std::vector<turi::flexible_type>>,0>(uint64_t a1, uint64_t **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_24D91E508;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(a1 + 24), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_2181B9F48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_sframe_rows_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sframe_save_naive(turi::sframe *this, const std::string *a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  char v16;
  char v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  turi::thread_pool *v32;
  turi::thread_pool *instance;
  turi::thread *v34;
  turi::thread_pool *tls_data;
  turi::thread_pool *v36;
  uint64_t v37;
  double v38;
  turi::thread *v39;
  unint64_t v40;
  unint64_t i;
  turi::sframe_reader *v42;
  _QWORD v44[5];
  turi::sframe_reader *v45;
  unint64_t v46;
  unint64_t v47;
  void *__p;
  char *v49;
  char *v50;
  std::vector<std::string> v51;
  uint64_t v52[4];
  std::__split_buffer<std::string> __v;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  memset(&v51, 0, sizeof(v51));
  __p = 0;
  v49 = 0;
  v50 = 0;
  if (*((_QWORD *)this + 3))
  {
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)this + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 6) - v4) >> 3) <= v3)
        turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
      v5 = (__int128 *)(v4 + 24 * v3);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        v54.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v6;
      }
      end = v51.__end_;
      if (v51.__end_ >= v51.__end_cap_.__value_)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) > v10)
          v10 = 0x5555555555555556 * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_cap_.__value_ - (char *)v51.__begin_) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v51.__end_cap_;
        if (v11)
          v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v51.__end_cap_, v11);
        else
          v12 = 0;
        v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v14 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        memset(&v54, 0, sizeof(v54));
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v51, &__v);
        v15 = v51.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v51.__end_ = v15;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
      else
      {
        v8 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        v51.__end_->__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v51.__end_ = end + 1;
      }
      v16 = turi::sframe::column_type(this, v3);
      v17 = v16;
      v18 = v49;
      if (v49 >= v50)
      {
        v20 = (unint64_t)__p;
        v21 = v49 - (_BYTE *)__p;
        v22 = v49 - (_BYTE *)__p + 1;
        if (v22 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v50 - (_BYTE *)__p;
        if (2 * (v50 - (_BYTE *)__p) > (unint64_t)v22)
          v22 = 2 * v23;
        if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v25 = (char *)operator new(v24);
        else
          v25 = 0;
        v26 = &v25[v21];
        v27 = &v25[v21];
        *v27 = v17;
        v19 = v27 + 1;
        if (v18 != (char *)v20)
        {
          v28 = &v18[~v20];
          do
          {
            v29 = *--v18;
            (v28--)[(_QWORD)v25] = v29;
          }
          while (v18 != (char *)v20);
          v26 = v25;
        }
        __p = v26;
        v49 = v19;
        v50 = &v25[v24];
        if (v20)
          operator delete((void *)v20);
      }
      else
      {
        *v49 = v16;
        v19 = v18 + 1;
      }
      v49 = v19;
      ++v3;
    }
    while (v3 < *((_QWORD *)this + 3));
  }
  turi::sframe::sframe((turi::sframe *)&__v);
  v47 = turi::SFRAME_DEFAULT_NUM_SEGMENTS;
  if (!(*(uint64_t (**)(turi::sframe *))(*(_QWORD *)this + 24))(this))
    v47 = 0;
  turi::sframe::open_for_write((uint64_t)&__v, &v51, &__p, a2, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 1);
  if ((*(uint64_t (**)(turi::sframe *))(*(_QWORD *)this + 24))(this))
  {
    if (*((_BYTE *)this + 288))
      v30 = *((_QWORD *)this + 4);
    else
      v30 = 0;
    v46 = v30 / v47;
    turi::sframe::get_reader(this, &v45);
    v31 = v47;
    v44[0] = &__v;
    v44[1] = &v46;
    v44[2] = &v47;
    v44[3] = this;
    v44[4] = &v45;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v32);
    v34 = (turi::thread *)turi::thread_pool::size(instance);
    tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v34);
    if (*((_BYTE *)tls_data + 8) || (unint64_t)v34 <= 1)
    {
      if (v31)
      {
        for (i = 0; i != v31; ++i)
          turi::sframe_save_naive(turi::sframe const&,std::string)::$_0::operator()((uint64_t)v44, i);
      }
    }
    else
    {
      v36 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v54, v36);
      v37 = 0;
      v38 = (double)v31 / (double)(unint64_t)v34;
      do
      {
        v39 = (turi::thread *)(v37 + 1);
        v40 = (unint64_t)(v38 * (double)(unint64_t)(v37 + 1) + 0.0);
        if ((turi::thread *)v37 == (turi::thread *)((char *)v34 - 1))
          v40 = v31;
        v52[2] = (unint64_t)(v38 * (double)(unint64_t)v37 + 0.0);
        v52[3] = v40;
        v52[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sframe_save_naive(turi::sframe const&,std::string)::$_0>(unsigned long,unsigned long,turi::sframe_save_naive(turi::sframe const&,std::string)::$_0 const&)::{lambda(void)#1}>(turi::sframe_save_naive(turi::sframe const&,std::string)::$_0)::stored_vtable
               + 1;
        v52[1] = (uint64_t)v44;
        turi::parallel_task_queue::launch((uint64_t)&v54, (uint64_t)v52, v37);
        boost::function0<void>::~function0(v52);
        v37 = (uint64_t)v39;
      }
      while (v39 != v34);
      turi::parallel_task_queue::join((turi::parallel_task_queue *)&v54);
      turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v54);
    }
    turi::sframe::close((turi::sframe *)&__v);
    v42 = v45;
    v45 = 0;
    if (v42)
      (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v42 + 8))(v42);
  }
  else
  {
    turi::sframe::close((turi::sframe *)&__v);
  }
  turi::sframe::~sframe((turi::sframe *)&__v);
  if (__p)
  {
    v49 = (char *)__p;
    operator delete(__p);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_2181BA438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__pa, void *a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v69;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a68);
  v69 = a15;
  a15 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  turi::sframe::~sframe((turi::sframe *)&a28);
  if (__pa)
  {
    a19 = __pa;
    operator delete(__pa);
  }
  __p = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::sframe_save_blockwise(turi::v2_block_impl::block_manager *a1, const std::string *a2)
{
  turi::v2_block_impl::block_manager *v3;
  turi::v2_block_impl::block_manager *instance;
  int v5;
  std::string::size_type size;
  const std::string *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  std::string *p_s;
  std::string *p_p;
  size_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  uint64_t **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  turi::index_file_information *v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  void **v52;
  __int128 v53;
  void **v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void **v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  turi::index_file_information *v78;
  std::string *v79;
  int64_t v80;
  __int128 v81;
  uint64_t v82;
  std::string::size_type v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  turi::index_file_information *v92;
  uint64_t v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  std::string::size_type v100;
  void **v101;
  __int128 v102;
  void **p_data;
  __int128 v104;
  __int128 v105;
  std::string::size_type v106;
  std::string::size_type *p_size;
  std::string *v108;
  void **v109;
  std::string *v110;
  std::string *v111;
  void **v112;
  int v113;
  __int128 v114;
  std::string::size_type v115;
  __int128 v116;
  std::string *v117;
  std::string::__raw *v118;
  std::string *v119;
  __int128 v120;
  __int128 v121;
  std::string::size_type v122;
  std::string *v123;
  std::string *v124;
  __int128 v125;
  std::string::size_type v126;
  __int128 v127;
  void *v128;
  std::string *v129;
  std::string::size_type *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  std::string::size_type v135;
  __int128 v136;
  void *v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  std::string *v142;
  __int128 v143;
  __int128 v144;
  std::string::size_type v145;
  __int128 v146;
  __int128 v147;
  std::string::size_type v148;
  std::string *v149;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v151;
  uint64_t v152;
  std::string *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  std::string *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t index_info;
  uint64_t v162;
  __int128 v163;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  const turi::index_file_information *i;
  _OWORD *v168;
  __int128 v169;
  uint64_t v170;
  const std::string *v171;
  turi::v2_block_impl::block_manager *v172;
  turi::v2_block_impl::block_manager *v173;
  uint64_t v174;
  std::string *v175;
  std::string v176;
  std::string v177;
  __int128 v178;
  std::string v179;
  std::string v180;
  std::vector<std::string>::pointer v181;
  __int128 v182;
  void *v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  std::string __str;
  __int128 v188;
  uint64_t v189;
  std::string v190;
  void *v191;
  uint64_t v192[2];
  std::string *v193;
  void *v194;
  __int128 *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE v199[32];
  std::string::value_type v200;
  std::string v201;
  turi::index_file_information *v202;
  std::string *v203;
  unint64_t v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string __s;
  std::string __p;
  std::string v210;
  _BYTE v211[24];
  std::string v212[2];
  std::vector<std::string> v213;
  __int128 *v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  std::string::value_type v220;
  std::vector<std::string> *v221;
  pthread_mutex_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  char v241;
  uint64_t v242;

  v3 = a1;
  v242 = *MEMORY[0x24BDAC8D0];
  instance = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(a1);
  v5 = pthread_mutex_init(&v222, 0);
  assert_msg(v5 == 0, "Mutex create error %d", v5);
  v227 = 0u;
  v226 = 0u;
  v225 = 0u;
  v224 = 0u;
  v228 = 0;
  v223 = 128;
  v229 = 0u;
  v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  v234 = 0u;
  v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  v238 = 0u;
  v239 = 0u;
  v240 = 0u;
  v241 = 0;
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v7 = a2;
  }
  v8 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_11;
    v9 = *(unsigned __int8 *)(v8 + size--);
  }
  while (v9 != 46);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=(&__p, a2);
    goto LABEL_12;
  }
  std::string::basic_string(&v210, a2, 0, size, (std::allocator<char> *)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v210;
LABEL_12:
  v171 = a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v10 = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v10 + 5);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_s = &__s;
  else
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(p_s, p_p, v10);
  }
  strcpy((char *)p_s + v10, ".sidx");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v207, v13 + 5);
  if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v207;
  else
    v14 = (std::string *)v207.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, ".0000");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v206, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v206 = __s;
  turi::v2_block_impl::block_writer::init((uint64_t)&v222, &v206, 1uLL, *((_QWORD *)v3 + 3));
  if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v206.__r_.__value_.__l.__data_);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v205, v207.__r_.__value_.__l.__data_, v207.__r_.__value_.__l.__size_);
  else
    v205 = v207;
  turi::v2_block_impl::block_writer::open_segment(&v222, 0, (std::string::size_type)&v205);
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v205.__r_.__value_.__l.__data_);
  v203 = 0;
  v202 = 0;
  v204 = 0;
  v16 = (std::string *)*((_QWORD *)v3 + 3);
  v172 = v3;
  v173 = instance;
  if (v16)
  {
    v17 = 0;
    v18 = (uint64_t)v3;
    do
    {
      memset(&v210, 0, sizeof(v210));
      *(_DWORD *)v211 = -1;
      v215 = 0uLL;
      *(_OWORD *)&v211[8] = 0u;
      memset(v212, 0, sizeof(v212));
      memset(&v213, 0, sizeof(v213));
      v214 = &v215;
      v216 = 0u;
      v217 = 0u;
      v218 = 0u;
      v219 = 0u;
      v220 = 0;
      turi::sframe::select_column(v18, v17, &v177);
      turi::index_file_information::index_file_information(&__str, (const turi::index_file_information *)(v177.__r_.__value_.__r.__words[0] + 8));
      std::string::operator=(&v210, &__str);
      *(_OWORD *)v211 = v188;
      *(_QWORD *)&v211[16] = v189;
      std::string::operator=(v212, &v190);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v212[1], (char *)v191, v192[0], (v192[0] - (uint64_t)v191) >> 3);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v213, v193, (__int128 *)v194, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v194 - (_BYTE *)v193) >> 3));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)&v214, v195, &v196);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v195, (_QWORD *)v196);
      v221 = (std::vector<std::string> *)&v193;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
      if (v191)
      {
        v192[0] = (uint64_t)v191;
        operator delete(v191);
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v190.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v213.__end_ != v213.__begin_)
      {
        if (SHIBYTE(v213.__begin_->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v201, v213.__begin_->__r_.__value_.__l.__data_, v213.__begin_->__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&v213.__begin_->__r_.__value_.__l.__data_;
          v201.__r_.__value_.__r.__words[2] = v213.__begin_->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v19;
        }
        v20 = turi::v2_block_impl::block_manager::open_column((uint64_t)instance, (uint64_t)&v201);
        v22 = v21;
        *((_QWORD *)&v218 + 1) = v20;
        *(_QWORD *)&v219 = v21;
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v201.__r_.__value_.__l.__data_);
          v20 = *((_QWORD *)&v218 + 1);
          v22 = v219;
        }
        *(_QWORD *)&v217 = turi::v2_block_impl::block_manager::num_blocks_in_column(instance, v20, v22);
        *((_QWORD *)&v219 + 1) = 0;
        *(_QWORD *)&v216 = v17;
        *((_QWORD *)&v216 + 1) = 0xAAAAAAAAAAAAAAABLL * (((char *)v213.__end_ - (char *)v213.__begin_) >> 3);
        if ((unint64_t)v218 >= (unint64_t)v217)
          turi::sframe_saving_impl::advance_column_blocks_to_next_block(instance, (uint64_t)&v210);
        if (!v220)
        {
          v23 = v203;
          if ((unint64_t)v203 >= v204)
          {
            v27 = (std::string *)std::vector<turi::sframe_saving_impl::column_blocks>::__push_back_slow_path<turi::sframe_saving_impl::column_blocks const&>((uint64_t *)&v202, (uint64_t)&v210);
          }
          else
          {
            turi::index_file_information::index_file_information(v203, (const turi::index_file_information *)&v210);
            *(_OWORD *)&v23[6].__r_.__value_.__l.__data_ = v216;
            v24 = v217;
            v25 = v218;
            v26 = v219;
            v23[8].__r_.__value_.__s.__data_[16] = v220;
            *(_OWORD *)&v23[7].__r_.__value_.__r.__words[1] = v25;
            *(_OWORD *)&v23[8].__r_.__value_.__l.__data_ = v26;
            *(_OWORD *)&v23[6].__r_.__value_.__r.__words[2] = v24;
            v27 = v23 + 9;
          }
          v203 = v27;
        }
      }
      v28 = (uint64_t **)(*(_QWORD *)(turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)&v222)
                                   + 64)
                       + 144 * v17
                       + 120);
      if (v28 != (uint64_t **)&v214)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v28, v214, &v215);
      v29 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
      if (v177.__r_.__value_.__l.__size_)
      {
        v30 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v214, (_QWORD *)v215);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (v212[1].__r_.__value_.__r.__words[0])
      {
        v212[1].__r_.__value_.__l.__size_ = v212[1].__r_.__value_.__r.__words[0];
        operator delete(v212[1].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v212[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v212[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v210.__r_.__value_.__l.__data_);
      ++v17;
      v18 = (uint64_t)v3;
    }
    while (v17 < *((_QWORD *)v3 + 3));
    v32 = v202;
    v16 = v203;
  }
  else
  {
    v32 = 0;
  }
  if ((char *)v16 - (char *)v32 >= 217)
  {
    v174 = 0x84BDA12F684BDA13 * (((char *)v16 - (char *)v32) >> 3);
    v33 = (unint64_t)(v174 - 2) >> 1;
    v34 = v33;
    do
    {
      if (v33 >= v34)
      {
        v35 = (2 * v34) | 1;
        v36 = (char *)v32 + 216 * v35;
        if (2 * v34 + 2 < v174)
        {
          v37 = *((_QWORD *)v32 + 27 * v35 + 25);
          v38 = *((_QWORD *)v36 + 52);
          v36 += 216 * (v37 > v38);
          if (v37 > v38)
            v35 = 2 * v34 + 2;
        }
        if (*((_QWORD *)v36 + 25) <= *((_QWORD *)v32 + 27 * v34 + 25))
        {
          v39 = (char *)v32 + 216 * v34;
          v40 = *(_OWORD *)v39;
          v210.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v40;
          *((_QWORD *)v39 + 1) = 0;
          *((_QWORD *)v39 + 2) = 0;
          *(_QWORD *)v39 = 0;
          v41 = *(_OWORD *)(v39 + 24);
          *(_QWORD *)&v211[16] = *((_QWORD *)v39 + 5);
          *(_OWORD *)v211 = v41;
          v42 = *((_OWORD *)v39 + 3);
          v212[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 8);
          *(_OWORD *)&v212[0].__r_.__value_.__l.__data_ = v42;
          *((_QWORD *)v39 + 7) = 0;
          *((_QWORD *)v39 + 8) = 0;
          *((_QWORD *)v39 + 6) = 0;
          v212[1] = *(std::string *)(v39 + 3);
          *((_QWORD *)v39 + 9) = 0;
          *((_QWORD *)v39 + 10) = 0;
          *((_QWORD *)v39 + 11) = 0;
          v213 = *(std::vector<std::string> *)(v39 + 4);
          *((_QWORD *)v39 + 12) = 0;
          *((_QWORD *)v39 + 13) = 0;
          *((_QWORD *)v39 + 14) = 0;
          v214 = (__int128 *)*((_QWORD *)v39 + 15);
          v43 = v39 + 128;
          v44 = *((_QWORD *)v39 + 16);
          *(_QWORD *)&v215 = v44;
          *((_QWORD *)&v215 + 1) = *((_QWORD *)v39 + 17);
          if (*((_QWORD *)&v215 + 1))
          {
            *(_QWORD *)(v44 + 16) = &v215;
            *((_QWORD *)v39 + 15) = v43;
            *v43 = 0;
            *((_QWORD *)v39 + 17) = 0;
          }
          else
          {
            v214 = &v215;
          }
          v45 = (char *)v32 + 216 * v34;
          v216 = *((_OWORD *)v45 + 9);
          v46 = *((_OWORD *)v45 + 10);
          v47 = *((_OWORD *)v45 + 11);
          v48 = *((_OWORD *)v45 + 12);
          v220 = v45[208];
          v218 = v47;
          v219 = v48;
          v217 = v46;
          do
          {
            v49 = v36;
            if (v39[23] < 0)
              operator delete(*(void **)v39);
            v50 = *(_OWORD *)v49;
            *((_QWORD *)v39 + 2) = *((_QWORD *)v49 + 2);
            *(_OWORD *)v39 = v50;
            v49[23] = 0;
            *v49 = 0;
            v51 = *((_QWORD *)v49 + 5);
            *(_OWORD *)(v39 + 24) = *(_OWORD *)(v49 + 24);
            *((_QWORD *)v39 + 5) = v51;
            v52 = (void **)(v39 + 48);
            if (v39[71] < 0)
              operator delete(*v52);
            v53 = *((_OWORD *)v49 + 3);
            *((_QWORD *)v39 + 8) = *((_QWORD *)v49 + 8);
            *(_OWORD *)v52 = v53;
            v49[71] = 0;
            v49[48] = 0;
            v54 = (void **)(v49 + 72);
            _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)(v39 + 72), (__n128 *)(v49 + 72));
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v39 + 4);
            *((_OWORD *)v39 + 6) = *((_OWORD *)v49 + 6);
            *((_QWORD *)v39 + 14) = *((_QWORD *)v49 + 14);
            *((_QWORD *)v49 + 12) = 0;
            *((_QWORD *)v49 + 13) = 0;
            *((_QWORD *)v49 + 14) = 0;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)(v39 + 120), (_QWORD *)v49 + 15);
            v55 = *((_OWORD *)v49 + 9);
            v56 = *((_OWORD *)v49 + 10);
            *((_QWORD *)v39 + 22) = *((_QWORD *)v49 + 22);
            *((_OWORD *)v39 + 9) = v55;
            *((_OWORD *)v39 + 10) = v56;
            *((_QWORD *)v39 + 23) = *((_QWORD *)v49 + 23);
            *((_QWORD *)v39 + 24) = *((_QWORD *)v49 + 24);
            v57 = *((_QWORD *)v49 + 25);
            v39[208] = v49[208];
            *((_QWORD *)v39 + 25) = v57;
            if (v33 < v35)
              break;
            v58 = (2 * v35) | 1;
            v36 = (char *)v32 + 216 * v58;
            if (2 * v35 + 2 < v174)
            {
              v59 = *((_QWORD *)v32 + 27 * v58 + 25);
              v60 = *((_QWORD *)v36 + 52);
              v36 += 216 * (v59 > v60);
              if (v59 > v60)
                v58 = 2 * v35 + 2;
            }
            v39 = v49;
            v35 = v58;
          }
          while (*((_QWORD *)v36 + 25) <= *((_QWORD *)&v219 + 1));
          if (v49[23] < 0)
            operator delete(*(void **)v49);
          v61 = (void **)(v49 + 48);
          v62 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
          *((_QWORD *)v49 + 2) = *((_QWORD *)&v210.__r_.__value_.__l + 2);
          *(_OWORD *)v49 = v62;
          *((_BYTE *)&v210.__r_.__value_.__s + 23) = 0;
          v210.__r_.__value_.__s.__data_[0] = 0;
          v63 = *(_QWORD *)&v211[16];
          *(_OWORD *)(v49 + 24) = *(_OWORD *)v211;
          *((_QWORD *)v49 + 5) = v63;
          if (v49[71] < 0)
            operator delete(*v61);
          v64 = *(_OWORD *)&v212[0].__r_.__value_.__l.__data_;
          *((_QWORD *)v49 + 8) = *((_QWORD *)&v212[0].__r_.__value_.__l + 2);
          *(_OWORD *)v61 = v64;
          *((_BYTE *)&v212[0].__r_.__value_.__s + 23) = 0;
          v212[0].__r_.__value_.__s.__data_[0] = 0;
          v65 = *v54;
          if (*v54)
          {
            *((_QWORD *)v49 + 10) = v65;
            operator delete(v65);
            *v54 = 0;
            *((_QWORD *)v49 + 10) = 0;
            *((_QWORD *)v49 + 11) = 0;
          }
          *((std::string *)v49 + 3) = v212[1];
          memset(&v212[1], 0, sizeof(std::string));
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v49 + 4);
          v67 = v49 + 128;
          v66 = (_QWORD *)*((_QWORD *)v49 + 16);
          *((std::vector<std::string> *)v49 + 4) = v213;
          memset(&v213, 0, sizeof(v213));
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v49 + 120), v66);
          *((_QWORD *)v49 + 15) = v214;
          v68 = v215;
          *((_QWORD *)v49 + 16) = v215;
          v69 = *((_QWORD *)&v215 + 1);
          *((_QWORD *)v49 + 17) = *((_QWORD *)&v215 + 1);
          if (v69)
          {
            v70 = 0;
            *(_QWORD *)(v68 + 16) = v67;
            v214 = &v215;
            v215 = 0uLL;
          }
          else
          {
            *((_QWORD *)v49 + 15) = v67;
            v70 = (_QWORD *)v215;
          }
          v71 = v216;
          v72 = v217;
          *((_QWORD *)v49 + 22) = v218;
          *((_OWORD *)v49 + 9) = v71;
          *((_OWORD *)v49 + 10) = v72;
          *((_QWORD *)v49 + 23) = *((_QWORD *)&v218 + 1);
          *((_QWORD *)v49 + 24) = v219;
          v73 = *((_QWORD *)&v219 + 1);
          v49[208] = v220;
          *((_QWORD *)v49 + 25) = v73;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v214, v70);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          if (v212[1].__r_.__value_.__r.__words[0])
          {
            v212[1].__r_.__value_.__l.__size_ = v212[1].__r_.__value_.__r.__words[0];
            operator delete(v212[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v212[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v212[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v210.__r_.__value_.__l.__data_);
        }
      }
    }
    while (v34-- > 0);
    v32 = v202;
    v16 = v203;
    v3 = v172;
    instance = v173;
  }
  if (v32 != (turi::index_file_information *)v16)
  {
    do
    {
      turi::index_file_information::index_file_information(&__str, v32);
      v197 = *((_OWORD *)v32 + 9);
      v75 = *((_OWORD *)v32 + 10);
      v76 = *((_OWORD *)v32 + 11);
      v77 = *((_OWORD *)v32 + 12);
      v200 = *((_BYTE *)v32 + 208);
      *(_OWORD *)v199 = v76;
      *(_OWORD *)&v199[16] = v77;
      v198 = v75;
      v78 = v202;
      v79 = v203;
      v80 = (char *)v203 - (char *)v202;
      if ((char *)v203 - (char *)v202 >= 217)
      {
        v175 = v203;
        v81 = *(_OWORD *)v202;
        v210.__r_.__value_.__r.__words[2] = *((_QWORD *)v202 + 2);
        *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v81;
        *((_QWORD *)v202 + 1) = 0;
        *((_QWORD *)v78 + 2) = 0;
        *(_QWORD *)v78 = 0;
        v82 = *((_QWORD *)v78 + 5);
        *(_OWORD *)v211 = *(_OWORD *)((char *)v78 + 24);
        *(_QWORD *)&v211[16] = v82;
        v83 = *((_QWORD *)v78 + 8);
        *(_OWORD *)&v212[0].__r_.__value_.__l.__data_ = *((_OWORD *)v78 + 3);
        v212[0].__r_.__value_.__r.__words[2] = v83;
        *((_QWORD *)v78 + 7) = 0;
        *((_QWORD *)v78 + 8) = 0;
        *((_QWORD *)v78 + 6) = 0;
        memset(&v212[1], 0, sizeof(std::string));
        v212[1] = *(std::string *)((_BYTE *)v78 + 3);
        *((_QWORD *)v78 + 9) = 0;
        *((_QWORD *)v78 + 10) = 0;
        *((_QWORD *)v78 + 11) = 0;
        memset(&v213, 0, sizeof(v213));
        *(_OWORD *)&v213.__begin_ = *((_OWORD *)v78 + 6);
        v84 = (uint64_t *)*((_QWORD *)v78 + 15);
        v213.__end_cap_.__value_ = (std::string *)*((_QWORD *)v78 + 14);
        *((_QWORD *)v78 + 12) = 0;
        *((_QWORD *)v78 + 13) = 0;
        *((_QWORD *)v78 + 14) = 0;
        v85 = (_QWORD *)((char *)v78 + 128);
        v86 = *((_QWORD *)v78 + 16);
        v214 = (__int128 *)v84;
        *(_QWORD *)&v215 = v86;
        *((_QWORD *)&v215 + 1) = *((_QWORD *)v78 + 17);
        if (*((_QWORD *)&v215 + 1))
        {
          *(_QWORD *)(v86 + 16) = &v215;
          *((_QWORD *)v78 + 15) = v85;
          *v85 = 0;
          *((_QWORD *)v78 + 17) = 0;
        }
        else
        {
          v214 = &v215;
        }
        v87 = 0;
        v88 = 0x84BDA12F684BDA13 * (v80 >> 3);
        v216 = *((_OWORD *)v78 + 9);
        v89 = *((_OWORD *)v78 + 10);
        v90 = *((_OWORD *)v78 + 11);
        v91 = *((_OWORD *)v78 + 12);
        v220 = *((_BYTE *)v78 + 208);
        v218 = v90;
        v219 = v91;
        v217 = v89;
        v92 = v78;
        do
        {
          v93 = v87 + 1;
          v94 = (std::string *)((char *)v92 + 216 * v87 + 216);
          v95 = 2 * v87;
          v87 = (2 * v87) | 1;
          v96 = v95 + 2;
          if (v95 + 2 < v88)
          {
            v97 = *((_QWORD *)v92 + 27 * v93 + 25);
            v98 = v94[17].__r_.__value_.__l.__size_;
            v94 += 9 * (v97 > v98);
            if (v97 > v98)
              v87 = v96;
          }
          if (*((char *)v92 + 23) < 0)
            operator delete(*(void **)v92);
          v99 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          *((_QWORD *)v92 + 2) = *((_QWORD *)&v94->__r_.__value_.__l + 2);
          *(_OWORD *)v92 = v99;
          *((_BYTE *)&v94->__r_.__value_.__s + 23) = 0;
          v94->__r_.__value_.__s.__data_[0] = 0;
          v100 = v94[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)((char *)v92 + 24) = *(_OWORD *)&v94[1].__r_.__value_.__l.__data_;
          *((_QWORD *)v92 + 5) = v100;
          v101 = (void **)((char *)v92 + 48);
          if (*((char *)v92 + 71) < 0)
            operator delete(*v101);
          v102 = *(_OWORD *)&v94[2].__r_.__value_.__l.__data_;
          *((_QWORD *)v92 + 8) = *((_QWORD *)&v94[2].__r_.__value_.__l + 2);
          *(_OWORD *)v101 = v102;
          *((_BYTE *)&v94[2].__r_.__value_.__s + 23) = 0;
          v94[2].__r_.__value_.__s.__data_[0] = 0;
          p_data = (void **)&v94[3].__r_.__value_.__l.__data_;
          _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)v92 + 72, (__n128 *)&v94[3]);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v92 + 4);
          *((_OWORD *)v92 + 6) = *(_OWORD *)&v94[4].__r_.__value_.__l.__data_;
          *((_QWORD *)v92 + 14) = *((_QWORD *)&v94[4].__r_.__value_.__l + 2);
          v94[4].__r_.__value_.__r.__words[0] = 0;
          v94[4].__r_.__value_.__l.__size_ = 0;
          v94[4].__r_.__value_.__r.__words[2] = 0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v92 + 120, v94[5].__r_.__value_.__r.__words);
          v104 = *(_OWORD *)&v94[6].__r_.__value_.__l.__data_;
          v105 = *(_OWORD *)&v94[6].__r_.__value_.__r.__words[2];
          *((_QWORD *)v92 + 22) = v94[7].__r_.__value_.__l.__size_;
          *((_OWORD *)v92 + 9) = v104;
          *((_OWORD *)v92 + 10) = v105;
          *((_QWORD *)v92 + 23) = *((_QWORD *)&v94[7].__r_.__value_.__l + 2);
          *((_QWORD *)v92 + 24) = v94[8].__r_.__value_.__l.__data_;
          p_size = &v94[8].__r_.__value_.__l.__size_;
          v106 = v94[8].__r_.__value_.__l.__size_;
          *((_BYTE *)v92 + 208) = v94[8].__r_.__value_.__s.__data_[16];
          *((_QWORD *)v92 + 25) = v106;
          v92 = (turi::index_file_information *)v94;
        }
        while (v87 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
        v108 = v94 + 1;
        v109 = (void **)&v94[2].__r_.__value_.__l.__data_;
        v110 = v94 + 6;
        v111 = v175;
        v112 = (void **)&v175[-9].__r_.__value_.__l.__data_;
        v113 = SHIBYTE(v94->__r_.__value_.__r.__words[2]);
        if (v94 == &v175[-9])
        {
          if (v113 < 0)
            operator delete(v94->__r_.__value_.__l.__data_);
          v134 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
          v94->__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v134;
          *((_BYTE *)&v210.__r_.__value_.__s + 23) = 0;
          v210.__r_.__value_.__s.__data_[0] = 0;
          v135 = *(_QWORD *)&v211[16];
          *(_OWORD *)&v108->__r_.__value_.__l.__data_ = *(_OWORD *)v211;
          v94[1].__r_.__value_.__r.__words[2] = v135;
          if (SHIBYTE(v94[2].__r_.__value_.__r.__words[2]) < 0)
            operator delete(*v109);
          v136 = *(_OWORD *)&v212[0].__r_.__value_.__l.__data_;
          v94[2].__r_.__value_.__r.__words[2] = v212[0].__r_.__value_.__r.__words[2];
          *(_OWORD *)v109 = v136;
          *((_BYTE *)&v212[0].__r_.__value_.__s + 23) = 0;
          v212[0].__r_.__value_.__s.__data_[0] = 0;
          v137 = *p_data;
          instance = v173;
          if (*p_data)
          {
            v94[3].__r_.__value_.__l.__size_ = (std::string::size_type)v137;
            operator delete(v137);
            *p_data = 0;
            v94[3].__r_.__value_.__l.__size_ = 0;
            v94[3].__r_.__value_.__r.__words[2] = 0;
          }
          v94[3] = v212[1];
          memset(&v212[1], 0, sizeof(std::string));
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v94[4]);
          v139 = &v94[5].__r_.__value_.__s.__data_[8];
          v138 = (_QWORD *)v94[5].__r_.__value_.__l.__size_;
          v94[4] = (std::string)v213;
          memset(&v213, 0, sizeof(v213));
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v94[5], v138);
          v94[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
          v140 = v215;
          v94[5].__r_.__value_.__l.__size_ = v215;
          v141 = *((_QWORD *)&v215 + 1);
          v94[5].__r_.__value_.__r.__words[2] = *((_QWORD *)&v215 + 1);
          if (v141)
          {
            *(_QWORD *)(v140 + 16) = v139;
            v214 = &v215;
            v215 = 0uLL;
          }
          else
          {
            v94[5].__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
          }
          v146 = v216;
          v147 = v217;
          v94[7].__r_.__value_.__l.__size_ = v218;
          *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v146;
          *(_OWORD *)&v94[6].__r_.__value_.__r.__words[2] = v147;
          v94[7].__r_.__value_.__r.__words[2] = *((_QWORD *)&v218 + 1);
          v94[8].__r_.__value_.__r.__words[0] = v219;
          v148 = *((_QWORD *)&v219 + 1);
          v94[8].__r_.__value_.__s.__data_[16] = v220;
          *p_size = v148;
        }
        else
        {
          if (v113 < 0)
          {
            operator delete(v94->__r_.__value_.__l.__data_);
            v111 = v175;
          }
          v114 = *(_OWORD *)v112;
          v94->__r_.__value_.__r.__words[2] = v175[-9].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v114;
          *((_BYTE *)&v111[-9].__r_.__value_.__s + 23) = 0;
          v111[-9].__r_.__value_.__s.__data_[0] = 0;
          v115 = v111[-8].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v108->__r_.__value_.__l.__data_ = *(_OWORD *)&v111[-8].__r_.__value_.__l.__data_;
          v94[1].__r_.__value_.__r.__words[2] = v115;
          if (SHIBYTE(v94[2].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(*v109);
            v111 = v175;
          }
          v116 = *(_OWORD *)&v111[-7].__r_.__value_.__l.__data_;
          v94[2].__r_.__value_.__r.__words[2] = v111[-7].__r_.__value_.__r.__words[2];
          *(_OWORD *)v109 = v116;
          *((_BYTE *)&v111[-7].__r_.__value_.__s + 23) = 0;
          v111[-7].__r_.__value_.__s.__data_[0] = 0;
          v117 = v111 - 6;
          _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)&v94[3], (__n128 *)&v111[-6]);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v94[4]);
          *(_OWORD *)&v94[4].__r_.__value_.__l.__data_ = *(_OWORD *)&v175[-5].__r_.__value_.__l.__data_;
          v94[4].__r_.__value_.__r.__words[2] = v175[-5].__r_.__value_.__r.__words[2];
          v175[-5].__r_.__value_.__r.__words[0] = 0;
          v175[-5].__r_.__value_.__l.__size_ = 0;
          v175[-5].__r_.__value_.__r.__words[2] = 0;
          v118 = (std::string::__raw *)&v175[-4];
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)&v94[5], v175[-4].__r_.__value_.__r.__words);
          v119 = v175;
          v120 = *(_OWORD *)&v175[-3].__r_.__value_.__l.__data_;
          v121 = *(_OWORD *)&v175[-3].__r_.__value_.__r.__words[2];
          v94[7].__r_.__value_.__l.__size_ = v175[-2].__r_.__value_.__l.__size_;
          *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v120;
          *(_OWORD *)&v94[6].__r_.__value_.__r.__words[2] = v121;
          v94[7].__r_.__value_.__r.__words[2] = v175[-2].__r_.__value_.__r.__words[2];
          v94[8].__r_.__value_.__r.__words[0] = v175[-1].__r_.__value_.__r.__words[0];
          v122 = v175[-1].__r_.__value_.__l.__size_;
          v94[8].__r_.__value_.__s.__data_[16] = v175[-1].__r_.__value_.__s.__data_[16];
          *p_size = v122;
          if (SHIBYTE(v175[-9].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(*v112);
            v119 = v175;
          }
          v123 = v119 - 8;
          v124 = v119 - 7;
          v125 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
          v175[-9].__r_.__value_.__r.__words[2] = v210.__r_.__value_.__r.__words[2];
          *(_OWORD *)v112 = v125;
          *((_BYTE *)&v210.__r_.__value_.__s + 23) = 0;
          v210.__r_.__value_.__s.__data_[0] = 0;
          v126 = *(_QWORD *)&v211[16];
          *(_OWORD *)&v123->__r_.__value_.__l.__data_ = *(_OWORD *)v211;
          v123->__r_.__value_.__r.__words[2] = v126;
          if (SHIBYTE(v119[-7].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v124->__r_.__value_.__l.__data_);
            v119 = v175;
          }
          v127 = *(_OWORD *)&v212[0].__r_.__value_.__l.__data_;
          v124->__r_.__value_.__r.__words[2] = v212[0].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124->__r_.__value_.__l.__data_ = v127;
          *((_BYTE *)&v212[0].__r_.__value_.__s + 23) = 0;
          v212[0].__r_.__value_.__s.__data_[0] = 0;
          v128 = (void *)v117->__r_.__value_.__r.__words[0];
          if (v117->__r_.__value_.__r.__words[0])
          {
            v119[-6].__r_.__value_.__l.__size_ = (std::string::size_type)v128;
            operator delete(v128);
            v119 = v175;
            v117->__r_.__value_.__r.__words[0] = 0;
            v117->__r_.__value_.__l.__size_ = 0;
            v117->__r_.__value_.__r.__words[2] = 0;
          }
          v119[-6] = v212[1];
          memset(&v212[1], 0, sizeof(std::string));
          v129 = v119;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v175[-5]);
          v129[-5] = (std::string)v213;
          memset(&v213, 0, sizeof(v213));
          v131 = (_QWORD *)v129[-4].__r_.__value_.__l.__size_;
          v130 = &v129[-4].__r_.__value_.__l.__size_;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v118, v131);
          *(v130 - 1) = (std::string::size_type)v214;
          v132 = v215;
          *v130 = v215;
          v133 = *((_QWORD *)&v215 + 1);
          v130[1] = *((_QWORD *)&v215 + 1);
          if (v133)
          {
            *(_QWORD *)(v132 + 16) = v130;
            v214 = &v215;
            v215 = 0uLL;
          }
          else
          {
            v118->__words[0] = (std::string::size_type)v130;
          }
          instance = v173;
          v142 = v175 - 3;
          v143 = v216;
          v144 = v217;
          v142[1].__r_.__value_.__l.__size_ = v218;
          *(_OWORD *)&v142->__r_.__value_.__l.__data_ = v143;
          *(_OWORD *)&v142->__r_.__value_.__r.__words[2] = v144;
          v175[-2].__r_.__value_.__r.__words[2] = *((_QWORD *)&v218 + 1);
          v175[-1].__r_.__value_.__r.__words[0] = v219;
          v145 = *((_QWORD *)&v219 + 1);
          v175[-1].__r_.__value_.__s.__data_[16] = v220;
          v175[-1].__r_.__value_.__l.__size_ = v145;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sframe_save_blockwise(turi::sframe const&,std::string)::$_0 &,std::__wrap_iter<turi::sframe_saving_impl::column_blocks *>>((uint64_t)v78, (uint64_t)&v94[9], 0x84BDA12F684BDA13 * (((char *)&v94[9] - (char *)v78) >> 3));
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v214, (_QWORD *)v215);
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v213;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
        v3 = v172;
        if (v212[1].__r_.__value_.__r.__words[0])
        {
          v212[1].__r_.__value_.__l.__size_ = v212[1].__r_.__value_.__r.__words[0];
          operator delete(v212[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v212[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v212[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v210.__r_.__value_.__l.__data_);
        v79 = v203;
      }
      v149 = v79 - 9;
      std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)&v204, (uint64_t)&v79[-9]);
      v203 = v149;
      v221 = 0;
      v185 = *(_OWORD *)&v199[8];
      v186 = *(_QWORD *)v199;
      turi::v2_block_impl::block_manager::read_block((uint64_t)instance, (unint64_t *)&v185, &v221, (__n128 *)&v177);
      begin = v221->__begin_;
      v151 = v221[1].__begin_;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)v221[1].__end_;
      LOWORD(v210.__r_.__value_.__r.__words[1]) = v221[1].__end_cap_.__value_;
      v152 = *(_QWORD *)v177.__r_.__value_.__l.__data_;
      v182 = *(_OWORD *)&v221->__end_;
      v181 = begin;
      v183 = v151;
      v184 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
      turi::v2_block_impl::block_writer::write_block((uint64_t)&v222, 0, v197, v152, (__int128 *)&v181);
      turi::sframe_saving_impl::advance_column_blocks_to_next_block(instance, (uint64_t)&__str);
      *(_QWORD *)&v199[24] += v151;
      if (!v200)
      {
        v153 = v203;
        if ((unint64_t)v203 >= v204)
        {
          v157 = (std::string *)std::vector<turi::sframe_saving_impl::column_blocks>::__push_back_slow_path<turi::sframe_saving_impl::column_blocks const&>((uint64_t *)&v202, (uint64_t)&__str);
        }
        else
        {
          turi::index_file_information::index_file_information(v203, (const turi::index_file_information *)&__str);
          *(_OWORD *)&v153[6].__r_.__value_.__l.__data_ = v197;
          v154 = v198;
          v155 = *(_OWORD *)v199;
          v156 = *(_OWORD *)&v199[16];
          v153[8].__r_.__value_.__s.__data_[16] = v200;
          *(_OWORD *)&v153[7].__r_.__value_.__r.__words[1] = v155;
          *(_OWORD *)&v153[8].__r_.__value_.__l.__data_ = v156;
          *(_OWORD *)&v153[6].__r_.__value_.__r.__words[2] = v154;
          v157 = v153 + 9;
        }
        v203 = v157;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sframe_save_blockwise(turi::sframe const&,std::string)::$_0 &,std::__wrap_iter<turi::sframe_saving_impl::column_blocks *>>((uint64_t)v202, (uint64_t)v157, 0x84BDA12F684BDA13 * (((char *)v157 - (char *)v202) >> 3));
      }
      v158 = (std::__shared_weak_count *)v177.__r_.__value_.__l.__size_;
      if (v177.__r_.__value_.__l.__size_)
      {
        v159 = (unint64_t *)(v177.__r_.__value_.__l.__size_ + 8);
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v195, (_QWORD *)v196);
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
      if (v191)
      {
        v192[0] = (uint64_t)v191;
        operator delete(v191);
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v190.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v32 = v202;
    }
    while (v202 != (turi::index_file_information *)v203);
  }
  turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)&v222, 0);
  turi::v2_block_impl::block_writer::write_index_file((turi::v2_block_impl::block_writer *)&v222);
  index_info = turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)&v222);
  v162 = index_info;
  if (*(char *)(index_info + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)index_info, *(_QWORD *)(index_info + 8));
  }
  else
  {
    v163 = *(_OWORD *)index_info;
    v177.__r_.__value_.__r.__words[2] = *(_QWORD *)(index_info + 16);
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v163;
  }
  v178 = *(_OWORD *)(v162 + 24);
  memset(&v179, 0, sizeof(v179));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, *(__int128 **)(v162 + 40), *(__int128 **)(v162 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v162 + 48) - *(_QWORD *)(v162 + 40)) >> 3));
  memset(&v180, 0, sizeof(v180));
  std::vector<turi::index_file_information>::__init_with_size[abi:ne180100]<turi::index_file_information*,turi::index_file_information*>(&v180, *(turi::index_file_information **)(v162 + 64), *(turi::index_file_information **)(v162 + 72), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v162 + 72) - *(_QWORD *)(v162 + 64)) >> 4));
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&__str, (turi::v2_block_impl::block_manager *)((char *)v3 + 8));
  v165 = v190.__r_.__value_.__r.__words[2];
  v164 = v190.__r_.__value_.__l.__size_;
  while (v165 != v164)
  {
    if (*(char *)(v165 - 1) < 0)
      operator delete(*(void **)(v165 - 24));
    v165 -= 24;
  }
  v190.__r_.__value_.__r.__words[2] = v164;
  v166 = v180.__r_.__value_.__l.__size_;
  for (i = (const turi::index_file_information *)v180.__r_.__value_.__r.__words[0];
        i != (const turi::index_file_information *)v166;
        i = (const turi::index_file_information *)((char *)i + 144))
  {
    turi::index_file_information::index_file_information(&v210, i);
    v168 = (_OWORD *)v190.__r_.__value_.__r.__words[2];
    if (v190.__r_.__value_.__r.__words[2] >= (unint64_t)v191)
    {
      v170 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v190.__r_.__value_.__l.__size_, (__int128 *)&v210);
    }
    else
    {
      if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v190.__r_.__value_.__r.__words[2], v210.__r_.__value_.__l.__data_, v210.__r_.__value_.__l.__size_);
      }
      else
      {
        v169 = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
        *(_QWORD *)(v190.__r_.__value_.__r.__words[2] + 16) = *((_QWORD *)&v210.__r_.__value_.__l + 2);
        *v168 = v169;
      }
      v170 = (uint64_t)v168 + 24;
    }
    v190.__r_.__value_.__r.__words[2] = v170;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v214, (_QWORD *)v215);
    v221 = &v213;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
    if (v212[1].__r_.__value_.__r.__words[0])
    {
      v212[1].__r_.__value_.__l.__size_ = v212[1].__r_.__value_.__r.__words[0];
      operator delete(v212[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v212[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v171->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v176, v171->__r_.__value_.__l.__data_, v171->__r_.__value_.__l.__size_);
  else
    v176 = *v171;
  turi::write_sframe_index_file((uint64_t)&v176, &__str);
  if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v176.__r_.__value_.__l.__data_);
  if (SHIBYTE(v195) < 0)
    operator delete(v194);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v192, (_QWORD *)v192[1]);
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<turi::sframe_saving_impl::column_blocks>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v207.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::v2_block_impl::block_writer::~block_writer((void **)&v222);
}

void sub_2181BBBB8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  turi::v2_block_impl::block_writer::~block_writer((void **)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void turi::sframe_save(turi *this, uint64_t a2)
{
  unint64_t v4;
  char v5;
  int v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  std::string v14;
  int v15;
  void *v16;
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _QWORD *v21[3];
  __int128 v22;
  void **v23;

  if (!*((_QWORD *)this + 3))
    goto LABEL_18;
  v4 = 0;
  v5 = 0;
  do
  {
    turi::sframe::select_column((uint64_t)this, v4, &v22);
    turi::index_file_information::index_file_information(&v14, (const turi::index_file_information *)(v22 + 8));
    v6 = v15;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v21, v21[1]);
    v23 = (void **)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
    if (v17 < 0)
      operator delete(v16);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v7 = v6 < 2;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 |= v7;
    ++v4;
  }
  while (v4 < *((_QWORD *)this + 3));
  if ((v5 & 1) != 0)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v13 = *(std::string *)a2;
    turi::sframe_save_naive(this, &v13);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = &v13;
      goto LABEL_26;
    }
  }
  else
  {
LABEL_18:
    turi::sframe_fast_compact(this, (const turi::sframe *)a2);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v12 = *(std::string *)a2;
    turi::sframe_save_blockwise(this, &v12);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = &v12;
LABEL_26:
      operator delete(v11->__r_.__value_.__l.__data_);
    }
  }
}

void sub_2181BBFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::sframe_save_weak_reference(unint64_t *a1, std::string *__str)
{
  std::string::size_type size;
  std::string *v5;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  void **v21;
  std::string *p_s1;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t i;
  uint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  __int128 v38;
  turi::fileio::file_handle_pool *v39;
  __int128 v40;
  int v41;
  pthread_mutex_t *instance;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 *v49;
  std::string *v50;
  uint64_t v51;
  unint64_t v52;
  std::string *v53;
  __int128 v54;
  turi::fileio::file_handle_pool *v55;
  __int128 v56;
  int v57;
  pthread_mutex_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  std::string *v63;
  std::string *p_p;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  size_t v72;
  std::string *v73;
  std::string *v74;
  std::string *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  size_t v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::value_type *v89;
  std::string::size_type v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string::size_type v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  std::string *v106;
  int v107;
  int v108;
  int v109;
  _BOOL4 v110;
  void *v112;
  std::string::size_type v113;
  size_t v114;
  std::string *v115;
  std::string *v116;
  std::string *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  size_t v126;
  std::string *v127;
  const void *v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  char v133;
  std::string *v134;
  uint64_t *v135;
  std::vector<std::string>::pointer begin;
  uint64_t v137;
  unint64_t v138;
  std::string *v139;
  turi::sframe_index_file_information *v140;
  turi::sframe *v141;
  unint64_t v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string __s1;
  std::string::size_type v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _QWORD *v154;
  void *v155;
  char v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  __int128 v166;
  std::string v167;
  int v168;
  std::vector<std::string> v169;
  void *v170[3];
  uint64_t v171[3];
  std::string __s;
  void *v173;
  uint64_t v174;
  unsigned __int8 v175;
  std::string __p;
  _QWORD v177[2];
  std::string v178;
  std::string v179;
  _BYTE v180[9];
  std::string::value_type v181[6];
  void *v182;
  std::string::value_type *v183;
  char v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  std::string *v188;
  std::string *v189;
  _BYTE v190[7];
  char v191;
  _QWORD *v192;
  std::string __stra;
  uint64_t v194;
  void *v195;
  char v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201[22];
  std::string v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v5 = __str;
  }
  v6 = (char *)&v5[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_11;
    v7 = v6[size--];
  }
  while (v7 != 46);
  if (size == -1)
  {
LABEL_11:
    std::string::operator=(&__p, __str);
    goto LABEL_12;
  }
  std::string::basic_string(&__stra, __str, 0, size, (std::allocator<char> *)&v179);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __stra;
LABEL_12:
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  else
    __s = *__str;
  turi::fileio::get_protocol(&__s, (std::string::size_type)&v173);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  memset(v171, 0, sizeof(v171));
  memset(v170, 0, sizeof(v170));
  memset(&v169, 0, sizeof(v169));
  v8 = a1[3];
  std::vector<std::vector<BOOL>>::resize(v171, v8);
  std::vector<BOOL>::resize((uint64_t)v170, v8, 0);
  std::vector<std::string>::resize(&v169, v8);
  v142 = v8;
  v168 = 0;
  boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v168);
  v140 = (turi::sframe_index_file_information *)(a1 + 1);
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&v179, (const turi::sframe_index_file_information *)(a1 + 1));
  v139 = __str;
  v141 = (turi::sframe *)a1;
  if (a1[3])
  {
    v9 = (uint64_t)a1;
    v10 = 0;
    while (1)
    {
      turi::sframe::select_column(v9, v10, &__s1);
      turi::index_file_information::index_file_information(&__stra, (const turi::index_file_information *)(__s1.__r_.__value_.__r.__words[0] + 8));
      v11 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::string::operator=(&v169.__begin_[v10], &__stra);
      std::vector<BOOL>::resize(v171[0] + 24 * v10, 0xAAAAAAAAAAAAAAABLL * ((v200 - v199) >> 3), 0);
      v14 = v199;
      if (v200 != v199)
        break;
LABEL_53:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v201, v201[1]);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      if (v196 < 0)
        operator delete(v195);
      if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__stra.__r_.__value_.__l.__data_);
      ++v10;
      v9 = (uint64_t)a1;
      if (v10 >= a1[3])
        goto LABEL_60;
    }
    v15 = 0;
    while (1)
    {
      v16 = (__int128 *)(v14 + 24 * v15);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
      }
      else
      {
        v17 = *v16;
        v167.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v17;
      }
      turi::fileio::get_protocol(&v167, (std::string::size_type)&__s1);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v19 = __s1.__r_.__value_.__l.__size_;
      v20 = v175;
      if ((v175 & 0x80u) != 0)
        v20 = v174;
      if (v19 != v20)
        goto LABEL_46;
      v21 = (v175 & 0x80u) == 0 ? &v173 : (void **)v173;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        break;
      v26 = memcmp(__s1.__r_.__value_.__l.__data_, v21, __s1.__r_.__value_.__l.__size_);
      v23 = (uint64_t *)(*(_QWORD *)(v171[0] + 24 * v10) + 8 * (v15 >> 6));
      v24 = 1 << v15;
      if (!v26)
        goto LABEL_49;
LABEL_47:
      v25 = *v23 | v24;
LABEL_50:
      *v23 = v25;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      ++v15;
      v14 = v199;
      if (v15 >= 0xAAAAAAAAAAAAAAABLL * ((v200 - v199) >> 3))
        goto LABEL_53;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
LABEL_45:
      v23 = (uint64_t *)(*(_QWORD *)(v171[0] + 24 * v10) + 8 * (v15 >> 6));
      v24 = 1 << v15;
LABEL_49:
      v25 = *v23 & ~v24;
      goto LABEL_50;
    }
    p_s1 = &__s1;
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v21 = (void **)((char *)v21 + 1);
      if (!--v18)
        goto LABEL_45;
    }
LABEL_46:
    v23 = (uint64_t *)(*(_QWORD *)(v171[0] + 24 * v10) + 8 * (v15 >> 6));
    v24 = 1 << v15;
    goto LABEL_47;
  }
LABEL_60:
  if (v191 < 0)
    operator delete(v189);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v186, v187);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  turi::sframe::sframe((turi::sframe *)&__stra);
  v27 = (uint64_t)a1;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v29 = v171[0] + 24 * i;
      v30 = *(_QWORD *)(v29 + 8);
      v31 = v30 & 0x3F;
      v32 = v30 <= 0x3F && v31 == 0;
      v33 = i >> 3;
      if (!v32)
      {
        v34 = 0;
        v35 = *(_QWORD **)v29;
        v36 = &v35[v30 >> 6];
        while (((*v35 >> v34) & 1) == 0)
        {
          v35 += v34 == 63;
          if (v34 == 63)
            v34 = 0;
          else
            ++v34;
          if (v34 == v31 && v35 == v36)
            goto LABEL_75;
        }
        *(_QWORD *)((char *)v170[0] + (v33 & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
        turi::sframe::select_column(v27, i, &v166);
        v43 = *(_QWORD *)(v27 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v27 + 48) - v43) >> 3) <= i)
          turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
        v44 = (__int128 *)(v43 + 24 * i);
        if (*((char *)v44 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)v44, *((_QWORD *)v44 + 1));
        }
        else
        {
          v45 = *v44;
          __s1.__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v45;
        }
        turi::sframe::add_column((uint64_t)&__stra, &v166, (uint64_t)&__s1, (uint64_t)&v179);
        turi::sframe::operator=((uint64_t)&__stra, (uint64_t)&v179);
        turi::sframe::~sframe((turi::sframe *)&v179);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        v77 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        continue;
      }
LABEL_75:
      *(_QWORD *)((char *)v170[0] + (v33 & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i);
      v37 = &v169.__begin_[i];
      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v37->__r_.__value_.__l.__size_)
          goto LABEL_90;
        std::string::__init_copy_ctor_external(&v165, v37->__r_.__value_.__l.__data_, v37->__r_.__value_.__l.__size_);
      }
      else
      {
        if (!*((_BYTE *)&v37->__r_.__value_.__s + 23))
          goto LABEL_90;
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v38;
      }
      turi::parse_v2_segment_filename((uint64_t)&v165, &v179);
      v40 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      LODWORD(__s1.__r_.__value_.__l.__data_) = v179.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)__s1.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v179.__r_.__value_.__r.__words[2]
                                                                          + 3);
      v41 = SHIBYTE(v179.__r_.__value_.__r.__words[2]);
      memset(&v179, 0, sizeof(v179));
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      instance = turi::fileio::file_handle_pool::get_instance(v39);
      if (v41 < 0)
      {
        std::string::__init_copy_ctor_external(&v164, (const std::string::value_type *)v40, *((std::string::size_type *)&v40 + 1));
      }
      else
      {
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v40;
        LODWORD(v164.__r_.__value_.__r.__words[2]) = __s1.__r_.__value_.__l.__data_;
        *(_DWORD *)((char *)&v164.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)__s1.__r_.__value_.__r.__words
                                                                                + 3);
        *((_BYTE *)&v164.__r_.__value_.__s + 23) = v41;
      }
      turi::fileio::file_handle_pool::unmark_file_for_delete(instance, (uint64_t)&v164);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v164.__r_.__value_.__l.__data_);
        if (v41 < 0)
LABEL_167:
          operator delete((void *)v40);
      }
      else if (v41 < 0)
      {
        goto LABEL_167;
      }
LABEL_90:
      turi::sframe::select_column(v27, i, &__s1);
      turi::index_file_information::index_file_information(&v179, (const turi::index_file_information *)(__s1.__r_.__value_.__r.__words[0] + 8));
      v46 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        v47 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (__int128 *)v189;
      v50 = v188;
      if (v189 != v188)
      {
        v51 = 0;
        v52 = 0;
        while (1)
        {
          v53 = &v50[v51];
          if (SHIBYTE(v50[v51].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v163, v53->__r_.__value_.__l.__data_, v53->__r_.__value_.__l.__size_);
          }
          else
          {
            v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            v163.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v54;
          }
          turi::parse_v2_segment_filename((uint64_t)&v163, &__s1);
          v56 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
          LODWORD(v202.__r_.__value_.__l.__data_) = __s1.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v202.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__s1.__r_.__value_.__r.__words[2]
                                                                              + 3);
          v57 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
          memset(&__s1, 0, sizeof(__s1));
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v163.__r_.__value_.__l.__data_);
          v58 = turi::fileio::file_handle_pool::get_instance(v55);
          if (v57 < 0)
          {
            std::string::__init_copy_ctor_external(&v162, (const std::string::value_type *)v56, *((std::string::size_type *)&v56 + 1));
          }
          else
          {
            *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v56;
            LODWORD(v162.__r_.__value_.__r.__words[2]) = v202.__r_.__value_.__l.__data_;
            *(_DWORD *)((char *)&v162.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v202.__r_.__value_.__r.__words
                                                                                    + 3);
            *((_BYTE *)&v162.__r_.__value_.__s + 23) = v57;
          }
          turi::fileio::file_handle_pool::unmark_file_for_delete(v58, (uint64_t)&v162);
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v162.__r_.__value_.__l.__data_);
            if (v57 < 0)
LABEL_110:
              operator delete((void *)v56);
          }
          else if (v57 < 0)
          {
            goto LABEL_110;
          }
          ++v52;
          v49 = (__int128 *)v189;
          v50 = v188;
          v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v189 - (char *)v188) >> 3);
          ++v51;
          if (v52 >= v59)
          {
            v27 = (uint64_t)v141;
            goto LABEL_112;
          }
        }
      }
      v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v189 - (char *)v188) >> 3);
      v50 = v189;
LABEL_112:
      memset(&__s1, 0, sizeof(__s1));
      v151 = 0u;
      v152 = 0u;
      v153 = 0u;
      LODWORD(v149) = 2;
      v150 = v59;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v151, v50, v49, v59);
      v60 = v153;
      if ((unint64_t)v153 >= *((_QWORD *)&v153 + 1))
      {
        v61 = std::vector<turi::index_file_information>::__push_back_slow_path<turi::index_file_information const&>((uint64_t *)&v152 + 1, (const turi::index_file_information *)&v179);
      }
      else
      {
        turi::index_file_information::index_file_information((std::string *)v153, (const turi::index_file_information *)&v179);
        v61 = v60 + 144;
      }
      *(_QWORD *)&v153 = v61;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v62 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v178, v62 + 8);
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v178;
      else
        v63 = (std::string *)v178.__r_.__value_.__r.__words[0];
      if (v62)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v63, p_p, v62);
      }
      strcpy((char *)v63 + v62, "-column-");
      std::to_string(&v160, i);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v160;
      else
        v65 = (std::string *)v160.__r_.__value_.__r.__words[0];
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      else
        v66 = v160.__r_.__value_.__l.__size_;
      v67 = std::string::append(&v178, (const std::string::value_type *)v65, v66);
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v161.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      v69 = std::string::append(&v161, ".sidx");
      v202 = *v69;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      v70 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v159, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
      else
        v159 = v202;
      v71 = v70;
      turi::write_array_group_index_file((uint64_t)&v159, (uint64_t)&__s1);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if ((v70 & 0x80u) == 0)
        v72 = v70;
      else
        v72 = v202.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v161, v72 + 2);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &v161;
      else
        v73 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if (v72)
      {
        if ((v71 & 0x80u) == 0)
          v74 = &v202;
        else
          v74 = (std::string *)v202.__r_.__value_.__r.__words[0];
        memmove(v73, v74, v72);
      }
      strcpy((char *)v73 + v72, ":0");
      v75 = &v169.__begin_[i];
      if (SHIBYTE(v75->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75->__r_.__value_.__l.__data_);
      v76 = *(_OWORD *)&v161.__r_.__value_.__l.__data_;
      v75->__r_.__value_.__r.__words[2] = v161.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
      if ((v71 & 0x80) != 0)
        operator delete(v202.__r_.__value_.__l.__data_);
      v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152 + 8;
      std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
      v202.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v202);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v190, v192);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
      if (v185)
      {
        v186 = v185;
        operator delete(v185);
      }
      if (v184 < 0)
        operator delete(v182);
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v179.__r_.__value_.__l.__data_);
    }
  }
  if (v194)
  {
    v202.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&v168);
    v202.__r_.__value_.__l.__size_ = v80;
    memset(&__s1, 0, sizeof(__s1));
    if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v202, &__s1) & 1) == 0)
    {
      std::bad_cast::bad_cast((std::bad_cast *)&v179);
      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v179);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v81 = __p.__r_.__value_.__l.__size_;
    v82 = &v202;
    std::string::basic_string[abi:ne180100]((uint64_t)&v202, v81 + 1);
    if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v82 = (std::string *)v202.__r_.__value_.__r.__words[0];
    if (v81)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &__p;
      else
        v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(v82, v83, v81);
    }
    *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v81) = 45;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &__s1;
    else
      v84 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v85 = __s1.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v202, (const std::string::value_type *)v84, v85);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v179.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = std::string::append(&v179, ".frame_idx");
    v89 = (std::string::value_type *)v88->__r_.__value_.__r.__words[0];
    v90 = v88->__r_.__value_.__l.__size_;
    LODWORD(v161.__r_.__value_.__l.__data_) = v88->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v161.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v88->__r_.__value_.__r.__words[2] + 3);
    v91 = SHIBYTE(v88->__r_.__value_.__r.__words[2]);
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v179.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v202.__r_.__value_.__l.__data_);
      if ((v91 & 0x80000000) == 0)
        goto LABEL_199;
    }
    else if ((v91 & 0x80000000) == 0)
    {
LABEL_199:
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
      v158.__r_.__value_.__l.__size_ = v90;
      LODWORD(v158.__r_.__value_.__r.__words[2]) = v161.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v158.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v161.__r_.__value_.__r.__words
                                                                              + 3);
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v91;
      goto LABEL_202;
    }
    std::string::__init_copy_ctor_external(&v158, v89, v90);
LABEL_202:
    turi::sframe_save((turi *)&__stra, (uint64_t)&v158);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v158.__r_.__value_.__l.__data_);
      if ((v91 & 0x80000000) == 0)
        goto LABEL_204;
    }
    else if ((v91 & 0x80000000) == 0)
    {
LABEL_204:
      v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
      v157.__r_.__value_.__l.__size_ = v90;
      LODWORD(v157.__r_.__value_.__r.__words[2]) = v161.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v157.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v161.__r_.__value_.__r.__words
                                                                              + 3);
      *((_BYTE *)&v157.__r_.__value_.__s + 23) = v91;
      goto LABEL_207;
    }
    std::string::__init_copy_ctor_external(&v157, v89, v90);
LABEL_207:
    turi::sframe::sframe((uint64_t)&v179, (uint64_t)&v157);
    turi::sframe::operator=((uint64_t)&__stra, (uint64_t)&v179);
    turi::sframe::~sframe((turi::sframe *)&v179);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v157.__r_.__value_.__l.__data_);
      if ((v91 & 0x80000000) == 0)
        goto LABEL_209;
    }
    else if ((v91 & 0x80000000) == 0)
    {
      goto LABEL_209;
    }
    operator delete(v89);
LABEL_209:
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
  }
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&__s1, (const turi::sframe_index_file_information *)&__stra.__r_.__value_.__r.__words[1]);
  if (v142)
  {
    v92 = 0;
    v93 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v170[0] + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v92) & 1) != 0)
      {
        turi::sframe::select_column((uint64_t)&__stra, v93, &v202);
        turi::index_file_information::index_file_information(&v179, (const turi::index_file_information *)(v202.__r_.__value_.__r.__words[0] + 8));
        std::string::operator=(&v169.__begin_[v92], &v179);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v190, v192);
        v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
        if (v185)
        {
          v186 = v185;
          operator delete(v185);
        }
        if (v184 < 0)
          operator delete(v182);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v179.__r_.__value_.__l.__data_);
        v94 = (std::__shared_weak_count *)v202.__r_.__value_.__l.__size_;
        if (v202.__r_.__value_.__l.__size_)
        {
          v95 = (unint64_t *)(v202.__r_.__value_.__l.__size_ + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        ++v93;
      }
      ++v92;
    }
    while (v92 != v142);
  }
  if (v156 < 0)
    operator delete(v155);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v153 + 8, v154);
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
  *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = 0uLL;
  v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161.__r_.__value_.__l.__size_;
  if (v142)
  {
    v97 = 0;
    while (1)
    {
      v98 = &v169.__begin_[v97];
      if (SHIBYTE(v98->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v147, v98->__r_.__value_.__l.__data_, v98->__r_.__value_.__l.__size_);
      }
      else
      {
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v99;
      }
      turi::parse_v2_segment_filename((uint64_t)&v147, &__s1);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if (v149 == -1)
        v149 = 0;
      v100 = &v169.__begin_[v97];
      if (SHIBYTE(v100->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v146, v100->__r_.__value_.__l.__data_, v100->__r_.__value_.__l.__size_);
      }
      else
      {
        v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v101;
      }
      turi::fileio::get_protocol(&v146, (std::string::size_type)&v179);
      if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
      else
        v102 = v179.__r_.__value_.__l.__size_;
      v103 = v175;
      if ((v175 & 0x80u) != 0)
        v103 = v174;
      if (v102 != v103)
        break;
      if ((v175 & 0x80u) == 0)
        v104 = (unsigned __int8 *)&v173;
      else
        v104 = (unsigned __int8 *)v173;
      if ((*((_BYTE *)&v179.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v112 = (void *)v179.__r_.__value_.__r.__words[0];
        v110 = memcmp(v179.__r_.__value_.__l.__data_, v104, v179.__r_.__value_.__l.__size_) != 0;
        goto LABEL_263;
      }
      if (*((_BYTE *)&v179.__r_.__value_.__s + 23))
      {
        v105 = HIBYTE(v179.__r_.__value_.__r.__words[2]) - 1;
        v106 = &v179;
        do
        {
          v108 = v106->__r_.__value_.__s.__data_[0];
          v106 = (std::string *)((char *)v106 + 1);
          v107 = v108;
          v109 = *v104++;
          v110 = v107 != v109;
        }
        while (v107 == v109 && v105-- != 0);
        if ((*((_BYTE *)&v179.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_261;
      }
      else
      {
        v110 = 0;
      }
LABEL_265:
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v146.__r_.__value_.__l.__data_);
        if (v110)
        {
LABEL_267:
          if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v161, (const void **)&__s1.__r_.__value_.__l.__data_))
          {
            v178.__r_.__value_.__r.__words[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&v168);
            v178.__r_.__value_.__l.__size_ = v113;
            memset(&v202, 0, sizeof(v202));
            if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)&v178, &v202) & 1) == 0)
            {
              std::bad_cast::bad_cast((std::bad_cast *)&v179);
              v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
              boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v179);
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v114 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v160, v114 + 1);
            if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = &v160;
            else
              v115 = (std::string *)v160.__r_.__value_.__r.__words[0];
            if (v114)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v116 = &__p;
              else
                v116 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v115, v116, v114);
            }
            *(_WORD *)((char *)&v115->__r_.__value_.__l.__data_ + v114) = 45;
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v117 = &v202;
            else
              v117 = (std::string *)v202.__r_.__value_.__r.__words[0];
            if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v118 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
            else
              v118 = v202.__r_.__value_.__l.__size_;
            v119 = std::string::append(&v160, (const std::string::value_type *)v117, v118);
            v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
            v178.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v120;
            v119->__r_.__value_.__l.__size_ = 0;
            v119->__r_.__value_.__r.__words[2] = 0;
            v119->__r_.__value_.__r.__words[0] = 0;
            v121 = std::string::append(&v178, ".sidx");
            v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
            v179.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v122;
            v121->__r_.__value_.__l.__size_ = 0;
            v121->__r_.__value_.__r.__words[2] = 0;
            v121->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v178.__r_.__value_.__l.__data_);
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v160.__r_.__value_.__l.__data_);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v145, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
            else
              v145 = __s1;
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v144, v179.__r_.__value_.__l.__data_, v179.__r_.__value_.__l.__size_);
            else
              v144 = v179;
            turi::fileio::copy((char *)&v145, (char *)&v144);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            v178.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
            v135 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v161, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v178);
            std::string::operator=((std::string *)(v135 + 7), &v179);
            if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v179.__r_.__value_.__l.__data_);
            if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v202.__r_.__value_.__l.__data_);
          }
          goto LABEL_294;
        }
      }
      else if (v110)
      {
        goto LABEL_267;
      }
      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      v123 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v161, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v179);
      std::string::operator=((std::string *)(v123 + 7), &__s1);
LABEL_294:
      v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      v124 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v161, (const void **)&__s1.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v179);
      v125 = v124;
      if (*((char *)v124 + 79) >= 0)
        v126 = *((unsigned __int8 *)v124 + 79);
      else
        v126 = v124[8];
      std::string::basic_string[abi:ne180100]((uint64_t)&v178, v126 + 1);
      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = &v178;
      else
        v127 = (std::string *)v178.__r_.__value_.__r.__words[0];
      if (v126)
      {
        if (*((char *)v125 + 79) >= 0)
          v128 = v125 + 7;
        else
          v128 = (const void *)v125[7];
        memmove(v127, v128, v126);
      }
      *(_WORD *)((char *)&v127->__r_.__value_.__l.__data_ + v126) = 58;
      memset(&v160, 0, sizeof(v160));
      v182 = &v179.__r_.__value_.__s.__data_[2];
      v183 = v181;
      v202.__r_.__value_.__r.__words[0] = v149;
      v202.__r_.__value_.__l.__size_ = (std::string::size_type)v181;
      v202.__r_.__value_.__s.__data_[16] = 48;
      HIDWORD(v202.__r_.__value_.__r.__words[2]) = 48;
      v182 = (void *)boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned long,char>::convert((uint64_t)&v202);
      v183 = v181;
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v160, (std::string::value_type *)v182, v181, v181 - (_BYTE *)v182);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = &v160;
      else
        v129 = (std::string *)v160.__r_.__value_.__r.__words[0];
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      else
        v130 = v160.__r_.__value_.__l.__size_;
      v131 = std::string::append(&v178, (const std::string::value_type *)v129, v130);
      v132 = v131->__r_.__value_.__r.__words[0];
      v177[0] = v131->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v177 + 7) = *(std::string::size_type *)((char *)&v131->__r_.__value_.__r.__words[1] + 7);
      v133 = HIBYTE(v131->__r_.__value_.__r.__words[2]);
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      v134 = &v169.__begin_[v97];
      if (SHIBYTE(v134->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v134->__r_.__value_.__l.__data_);
      v134->__r_.__value_.__r.__words[0] = v132;
      v134->__r_.__value_.__l.__size_ = v177[0];
      *(std::string::size_type *)((char *)&v134->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v177 + 7);
      *((_BYTE *)&v134->__r_.__value_.__s + 23) = v133;
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v178.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (++v97 == v142)
        goto LABEL_333;
    }
    v110 = 1;
    if ((*((_BYTE *)&v179.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_265;
LABEL_261:
    v112 = (void *)v179.__r_.__value_.__r.__words[0];
LABEL_263:
    operator delete(v112);
    goto LABEL_265;
  }
LABEL_333:
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)&v179, v140);
  begin = v169.__begin_;
  if (v169.__end_ != v169.__begin_)
  {
    v137 = 0;
    v138 = 0;
    do
    {
      std::string::operator=((std::string *)&v183[v137 * 24], &begin[v137]);
      ++v138;
      begin = v169.__begin_;
      ++v137;
    }
    while (v138 < 0xAAAAAAAAAAAAAAABLL * (((char *)v169.__end_ - (char *)v169.__begin_) >> 3));
  }
  if (SHIBYTE(v139->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v143, v139->__r_.__value_.__l.__data_, v139->__r_.__value_.__l.__size_);
  else
    v143 = *v139;
  turi::write_sframe_index_file((uint64_t)&v143, &v179);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (v191 < 0)
    operator delete(v189);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v186, v187);
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
  __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v180;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v161, (_QWORD *)v161.__r_.__value_.__l.__size_);
  turi::sframe::~sframe((turi::sframe *)&__stra);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&v168);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  if (v170[0])
    operator delete(v170[0]);
  __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__stra);
  if ((char)v175 < 0)
    operator delete(v173);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2181BD608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  int v44;
  void *v45;

  if (v44 < 0)
    operator delete(v45);
  if (a44 < 0)
    operator delete(__p);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x478]);
  boost::uuids::detail::random_provider_base::destroy((boost::uuids::detail::random_provider_base *)&STACK[0x284]);
  STACK[0x478] = (unint64_t)&STACK[0x288];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);
  if (STACK[0x2A0])
    operator delete((void *)STACK[0x2A0]);
  STACK[0x478] = (unint64_t)&STACK[0x2B8];
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<BOOL>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != v7)
    {
      v9 = *(void **)(v3 - 24);
      v3 -= 24;
      v8 = v9;
      if (v9)
        operator delete(v8);
    }
    a1[1] = v7;
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_2181BDC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2181BDE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe::sframe(uint64_t a1, uint64_t a2)
{
  int v4;
  _BYTE v6[32];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9[5];
  char v10;
  std::string v11;
  _BYTE v12[32];
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15[5];
  char v16;
  void **v17;

  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)a1 = &off_24D931248;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 288) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  turi::read_sframe_index_file((std::string::size_type)&v11, (uint64_t)v12);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  turi::sframe_index_file_information::sframe_index_file_information((turi::sframe_index_file_information *)v6, (const turi::sframe_index_file_information *)v12);
  turi::sframe::open_for_read(a1, (const turi::sframe_index_file_information *)v6);
  if (v10 < 0)
    operator delete(v9[3]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, v9[1]);
  v17 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  if (v16 < 0)
    operator delete(v15[3]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v15, v15[1]);
  v17 = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
  return a1;
}

void sub_2181BE080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  uint64_t v33;
  void **v34;
  uint64_t v35;
  pthread_mutex_t *v36;

  turi::mutex::~mutex(v36);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35);
  a33 = v33 + 184;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (*(char *)(v33 + 159) < 0)
    operator delete(*(void **)(v33 + 136));
  turi::sframe_index_file_information::~sframe_index_file_information(v34);
  _Unwind_Resume(a1);
}

uint64_t boost::uuids::detail::random_provider_base::destroy(boost::uuids::detail::random_provider_base *this)
{
  uint64_t result;

  result = *(unsigned int *)this;
  if ((result & 0x80000000) == 0)
    return close(result);
  return result;
}

_QWORD *turi::sframe_save_naive(turi::sframe const&,std::string)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t **v19[3];
  char v20;
  uint64_t ***v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  turi::sframe::get_output_iterator(*(size_t **)a1, a2, (uint64_t)v22);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = v4 * a2;
  if (**(_QWORD **)(a1 + 16) - 1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v6 + 288))
      v7 = *(_QWORD *)(v6 + 32);
    else
      v7 = 0;
  }
  else
  {
    v7 = v4 + v5;
  }
  memset(v19, 0, sizeof(v19));
  v20 = 1;
  while (1)
  {
    v8 = v7 - v5;
    if (v7 <= v5)
      break;
    if (v8 >= turi::sframe_config::SFRAME_READ_BATCH_SIZE)
      v8 = turi::sframe_config::SFRAME_READ_BATCH_SIZE;
    v9 = v8 + v5;
    turi::sframe_reader::read_rows(**(turi::sframe_reader ***)(a1 + 32), v5, v8 + v5, v19);
    if (!v27)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, uint64_t ***))(*(_QWORD *)v27 + 48))(v27, v19);
    v5 = v9;
  }
  v21 = v19;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v10, v11, v12);
LABEL_17:
  v15 = v25;
  if (v25 == v24)
  {
    v16 = 4;
    v15 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_22;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v10, v11, v12);
LABEL_22:
  result = v23;
  if (v23 == v22)
  {
    v18 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*result + 8 * v18))(result, v10, v11, v12);
}

void sub_2181BE2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sframe_save_naive(turi::sframe const&,std::string)::$_0>(unsigned long,unsigned long,turi::sframe_save_naive(turi::sframe const&,std::string)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_17sframe_save_naiveERKNS_6sframeENSt3__112basic_string"
                                        "IcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_17sframe_save_naiveERKNS_6sframeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sframe_save_naive(turi::sframe const&,std::string)::$_0>(unsigned long,unsigned long,turi::sframe_save_naive(turi::sframe const&,std::string)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::sframe_save_naive(turi::sframe const&,std::string)::$_0::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<turi::sframe_saving_impl::column_blocks>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::sframe_saving_impl::column_blocks>::__push_back_slow_path<turi::sframe_saving_impl::column_blocks const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v17;
  std::string *v18;
  std::string *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x97B425ED097B42)
    v9 = 0x12F684BDA12F684;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>>(v7, v9);
  else
    v10 = 0;
  v17 = v10;
  v18 = (std::string *)&v10[216 * v4];
  v19 = v18;
  v20 = &v10[216 * v9];
  turi::index_file_information::index_file_information(v18, (const turi::index_file_information *)a2);
  v11 = v18;
  *(_OWORD *)&v18[6].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 176);
  v12 = *(_OWORD *)(a2 + 192);
  v14 = *(_OWORD *)(a2 + 160);
  v11[8].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 208);
  *(_OWORD *)&v11[7].__r_.__value_.__r.__words[1] = v13;
  *(_OWORD *)&v11[8].__r_.__value_.__l.__data_ = v12;
  *(_OWORD *)&v11[6].__r_.__value_.__r.__words[2] = v14;
  v19 += 9;
  std::vector<turi::sframe_saving_impl::column_blocks>::__swap_out_circular_buffer(a1, &v17);
  v15 = a1[1];
  std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer(&v17);
  return v15;
}

void sub_2181BE5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe_saving_impl::column_blocks>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 216);
      std::allocator<turi::sframe_saving_impl::column_blocks>::construct[abi:ne180100]<turi::sframe_saving_impl::column_blocks,turi::sframe_saving_impl::column_blocks>(a1, v7 - 216, v9);
      v7 = *((_QWORD *)&v16 + 1) - 216;
      *((_QWORD *)&v16 + 1) -= 216;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<turi::sframe_saving_impl::column_blocks>::construct[abi:ne180100]<turi::sframe_saving_impl::column_blocks,turi::sframe_saving_impl::column_blocks>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  v6 = a3 + 8;
  v7 = *((_QWORD *)a3 + 16);
  *(_QWORD *)(a2 + 128) = v7;
  v8 = a2 + 128;
  v9 = *((_QWORD *)a3 + 17);
  *(_QWORD *)(a2 + 136) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *((_QWORD *)a3 + 15) = v6;
    *v6 = 0;
    *((_QWORD *)a3 + 17) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 120) = v8;
  }
  *(_OWORD *)(a2 + 144) = a3[9];
  result = (__n128)a3[10];
  v11 = a3[11];
  v12 = a3[12];
  *(_BYTE *)(a2 + 208) = *((_BYTE *)a3 + 208);
  *(_OWORD *)(a2 + 176) = v11;
  *(_OWORD *)(a2 + 192) = v12;
  *(__n128 *)(a2 + 160) = result;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_saving_impl::column_blocks>,std::reverse_iterator<turi::sframe_saving_impl::column_blocks*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::index_file_information>::destroy[abi:ne180100](v3, v1);
      v1 += 216;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sframe_saving_impl::column_blocks>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sframe_saving_impl::column_blocks>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sframe_saving_impl::column_blocks>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 216;
    std::allocator<turi::index_file_information>::destroy[abi:ne180100](v4, i - 216);
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sframe_save_blockwise(turi::sframe const&,std::string)::$_0 &,std::__wrap_iter<turi::sframe_saving_impl::column_blocks *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  void **v52[14];

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v52[12] = v3;
    v52[13] = v4;
    v7 = v5 >> 1;
    if (*(_QWORD *)(a1 + 216 * (v5 >> 1) + 200) > *(_QWORD *)(a2 - 16))
    {
      v8 = (__int128 *)(a2 - 216);
      v35 = *(_QWORD *)(a2 - 200);
      *(_OWORD *)v34 = *(_OWORD *)(a2 - 216);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = 0;
      v37 = *(_QWORD *)(a2 - 176);
      v36 = *(_OWORD *)(a2 - 192);
      v39 = *(_QWORD *)(a2 - 152);
      *(_OWORD *)v38 = *(_OWORD *)(a2 - 168);
      *(_QWORD *)(a2 - 160) = 0;
      *(_QWORD *)(a2 - 152) = 0;
      *(_QWORD *)(a2 - 168) = 0;
      *(_OWORD *)__p = *(_OWORD *)(a2 - 144);
      v41 = *(_QWORD *)(a2 - 128);
      *(_QWORD *)(a2 - 144) = 0;
      *(_QWORD *)(a2 - 136) = 0;
      *(_QWORD *)(a2 - 128) = 0;
      v42 = *(_OWORD *)(a2 - 120);
      v43 = *(_QWORD *)(a2 - 104);
      *(_QWORD *)(a2 - 120) = 0;
      *(_QWORD *)(a2 - 112) = 0;
      *(_QWORD *)(a2 - 104) = 0;
      v44 = *(_QWORD **)(a2 - 96);
      v9 = (_QWORD *)(a2 - 88);
      v10 = *(_QWORD **)(a2 - 88);
      v45 = v10;
      v46 = *(_QWORD *)(a2 - 80);
      if (v46)
      {
        v10[2] = &v45;
        *(_QWORD *)(a2 - 96) = v9;
        *v9 = 0;
        *(_QWORD *)(a2 - 80) = 0;
      }
      else
      {
        v44 = &v45;
      }
      v47 = *(_OWORD *)(a2 - 72);
      v11 = *(_OWORD *)(a2 - 56);
      v12 = *(_OWORD *)(a2 - 40);
      v13 = *(_OWORD *)(a2 - 24);
      v51 = *(_BYTE *)(a2 - 8);
      v49 = v12;
      v50 = v13;
      v48 = v11;
      do
      {
        if (*((char *)v8 + 23) < 0)
          operator delete(*(void **)v8);
        v14 = (__int128 *)(a1 + 216 * v7);
        v15 = *v14;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v14 + 2);
        *v8 = v15;
        *((_BYTE *)v14 + 23) = 0;
        *(_BYTE *)v14 = 0;
        v16 = *((_QWORD *)v14 + 5);
        *(__int128 *)((char *)v8 + 24) = *(__int128 *)((char *)v14 + 24);
        *((_QWORD *)v8 + 5) = v16;
        v17 = (void **)(v8 + 3);
        if (*((char *)v8 + 71) < 0)
          operator delete(*v17);
        v18 = v14[3];
        *((_QWORD *)v8 + 8) = *((_QWORD *)v14 + 8);
        *(_OWORD *)v17 = v18;
        *((_BYTE *)v14 + 71) = 0;
        *((_BYTE *)v14 + 48) = 0;
        v33 = (void **)v14 + 9;
        _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)v8 + 72, (__n128 *)((char *)v14 + 72));
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v8 + 4);
        v8[6] = v14[6];
        *((_QWORD *)v8 + 14) = *((_QWORD *)v14 + 14);
        *((_QWORD *)v14 + 12) = 0;
        *((_QWORD *)v14 + 13) = 0;
        *((_QWORD *)v14 + 14) = 0;
        v19 = (_QWORD *)v14 + 15;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((uint64_t)v8 + 120, (_QWORD *)v14 + 15);
        v20 = a1 + 216 * v7;
        v21 = *(_OWORD *)(v20 + 144);
        v22 = *(_OWORD *)(v20 + 160);
        *((_QWORD *)v8 + 22) = *(_QWORD *)(v20 + 176);
        v8[9] = v21;
        v8[10] = v22;
        *((_QWORD *)v8 + 23) = *(_QWORD *)(v20 + 184);
        *((_QWORD *)v8 + 24) = *(_QWORD *)(v20 + 192);
        v23 = *(_QWORD *)(v20 + 200);
        *((_BYTE *)v8 + 208) = *(_BYTE *)(v20 + 208);
        *((_QWORD *)v8 + 25) = v23;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = v14;
      }
      while (*(_QWORD *)(a1 + 216 * v7 + 200) > *((_QWORD *)&v50 + 1));
      if (*((char *)v14 + 23) < 0)
        operator delete(*(void **)v14);
      v24 = (void **)(v14 + 3);
      *((_QWORD *)v14 + 2) = v35;
      *v14 = *(_OWORD *)v34;
      *(__int128 *)((char *)v14 + 24) = v36;
      *((_QWORD *)v14 + 5) = v37;
      if (*((char *)v14 + 71) < 0)
        operator delete(*v24);
      *((_QWORD *)v14 + 8) = v39;
      *(_OWORD *)v24 = *(_OWORD *)v38;
      v25 = *v33;
      if (*v33)
      {
        *((_QWORD *)v14 + 10) = v25;
        operator delete(v25);
        *v33 = 0;
        *((_QWORD *)v14 + 10) = 0;
        *((_QWORD *)v14 + 11) = 0;
      }
      *(__int128 *)((char *)v14 + 72) = *(_OWORD *)__p;
      *((_QWORD *)v14 + 11) = v41;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v14 + 4);
      v14[6] = v42;
      *((_QWORD *)v14 + 14) = v43;
      v42 = 0uLL;
      v43 = 0;
      v27 = (_QWORD *)*((_QWORD *)v14 + 16);
      v26 = v14 + 8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v19, v27);
      *(v26 - 1) = v44;
      v28 = v45;
      *v26 = v45;
      v29 = v46;
      v26[1] = v46;
      if (v29)
      {
        v28[2] = v26;
        v28 = 0;
        v44 = &v45;
        v45 = 0;
        v46 = 0;
      }
      else
      {
        *v19 = v26;
      }
      v30 = v47;
      v31 = v48;
      *(_QWORD *)(v20 + 176) = v49;
      *(_OWORD *)(v20 + 144) = v30;
      *(_OWORD *)(v20 + 160) = v31;
      *(_QWORD *)(v20 + 184) = *((_QWORD *)&v49 + 1);
      *(_QWORD *)(v20 + 192) = v50;
      v32 = *((_QWORD *)&v50 + 1);
      *(_BYTE *)(v20 + 208) = v51;
      *(_QWORD *)(v20 + 200) = v32;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v44, v28);
      v52[0] = (void **)&v42;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v52);
    }
  }
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void std::vector<std::vector<BOOL>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<BOOL>>::~__split_buffer(&v15);
  }
}

void sub_2181BEEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<BOOL>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<BOOL>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>,std::reverse_iterator<std::vector<BOOL>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(a3 - 3);
      a3 -= 3;
      *(_QWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 16) = a3[1];
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<BOOL>>,std::reverse_iterator<std::vector<BOOL>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*v1)
      operator delete(*v1);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<BOOL>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<BOOL>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<BOOL>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    v5 = *(void **)(v1 - 24);
    v1 -= 24;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v1;
    if (v5)
    {
      operator delete(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_2181BF1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void __cxx_global_var_init_11_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_saving_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::sframe_saving_impl::advance_column_blocks_to_next_block(turi::v2_block_impl::block_manager *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string __p;
  std::string v13;

  v2 = *(_QWORD *)(a2 + 176) + 1;
  *(_QWORD *)(a2 + 176) = v2;
  if (v2 >= *(_QWORD *)(a2 + 160))
  {
    turi::v2_block_impl::block_manager::close_column((uint64_t)a1, *(_QWORD *)(a2 + 184));
    while (1)
    {
      v5 = *(_QWORD *)(a2 + 168) + 1;
      *(_QWORD *)(a2 + 168) = v5;
      *(_QWORD *)(a2 + 176) = 0;
      if (v5 >= *(_QWORD *)(a2 + 152))
        break;
      v6 = *(_QWORD *)(a2 + 96) + 24 * v5;
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v7 = *(_OWORD *)v6;
        v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      else
        __p = v13;
      v8 = turi::v2_block_impl::block_manager::open_column((uint64_t)a1, (uint64_t)&__p);
      v10 = v9;
      *(_QWORD *)(a2 + 184) = v8;
      *(_QWORD *)(a2 + 192) = v9;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v8 = *(_QWORD *)(a2 + 184);
        v10 = *(_QWORD *)(a2 + 192);
      }
      v11 = turi::v2_block_impl::block_manager::num_blocks_in_column(a1, v8, v10);
      *(_QWORD *)(a2 + 160) = v11;
      if (!v11)
        turi::v2_block_impl::block_manager::close_column((uint64_t)a1, *(_QWORD *)(a2 + 184));
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (v11)
        return;
    }
    *(_BYTE *)(a2 + 208) = 1;
  }
}

void sub_2181BF710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2181BF8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_8()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_saving_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::shuffle(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  unint64_t i;
  pthread_mutex_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  pthread_mutex_t **v31;
  void **v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  pthread_mutex_t *v36;
  int64x2_t v37;
  pthread_mutex_t *v38;
  void **v39;
  unint64_t v40;
  turi::thread_pool *v41;
  turi::thread_pool *instance;
  turi::thread *v43;
  turi::thread_pool *tls_data;
  turi::thread_pool *v45;
  uint64_t v46;
  double v47;
  turi::thread *v48;
  unint64_t v49;
  uint64_t j;
  uint64_t v51;
  uint64_t v52;
  turi::sframe_reader *v53;
  std::string __p;
  void **v57;
  uint64_t *v58;
  int64x2_t *v59;
  turi::sframe_reader **v60;
  uint64_t v61;
  uint64_t v62;
  turi::sframe_reader *v63;
  int64x2_t v64;
  void **v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73[4];
  void *v74;
  int64x2_t v75;
  void **v76;
  _QWORD v77[3];
  _QWORD *v78;
  _BYTE v79[24];
  _BYTE *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v72 = (unint64_t)a2;
  v74 = a2;
  if (!a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator()();
  }
  if (*(_BYTE *)(a1 + 288))
    v8 = *(_QWORD *)(a1 + 32);
  else
    v8 = 0;
  v71 = v8;
  v9 = turi::thread::cpu_count((turi::thread *)a1);
  v69 = v8 / v9;
  v70 = v9;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  std::vector<turi::sframe>::resize(a5, (unint64_t)a2);
  v10 = *a5;
  v11 = a5[1];
  if (*a5 != v11)
  {
    do
    {
      std::vector<turi::flex_type_enum>::vector(&v74, *(_QWORD *)(a1 + 24));
      if (*(_QWORD *)(a1 + 24))
      {
        v12 = 0;
        do
        {
          v13 = turi::sframe::column_type((turi::sframe *)a1, v12);
          *((_BYTE *)v74 + v12++) = v13;
        }
        while (v12 < *(_QWORD *)(a1 + 24));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      turi::sframe::open_for_write(v10, (_QWORD *)(a1 + 40), &v74, &__p, 1, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v74)
      {
        v75.i64[0] = (uint64_t)v74;
        operator delete(v74);
      }
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(&v74, v10, 0);
      v14 = v67;
      if (v67 >= v68)
      {
        v15 = std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__push_back_slow_path<std::function<void ()(turi::sframe_rows const&)>>(&v66, (uint64_t)&v74);
      }
      else
      {
        std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>((uint64_t)&v68, v67, (uint64_t)&v74);
        v15 = v14 + 96;
      }
      v67 = v15;
      v16 = v80;
      if (v80 == v79)
      {
        v16 = v79;
        v17 = 4;
      }
      else
      {
        if (!v80)
          goto LABEL_21;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_21:
      v18 = v78;
      if (v78 == v77)
      {
        v18 = v77;
        v19 = 4;
      }
      else
      {
        if (!v78)
          goto LABEL_26;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_26:
      v20 = v76;
      if (v76 == &v74)
      {
        v20 = &v74;
        v21 = 4;
        goto LABEL_30;
      }
      if (v76)
      {
        v21 = 5;
LABEL_30:
        (*((void (**)(void))*v20 + v21))();
      }
      v10 += 296;
    }
    while (v10 != v11);
  }
  v64 = 0uLL;
  v65 = 0;
  if (v72)
  {
    for (i = 0; i < v72; ++i)
    {
      v23 = (pthread_mutex_t *)operator new();
      v24 = pthread_mutex_init(v23, 0);
      assert_msg(v24 == 0, "Mutex create error %d", v24);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      v25 = v64.i64[1];
      if (v64.i64[1] >= (unint64_t)v65)
      {
        v26 = (v64.i64[1] - v64.i64[0]) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v28 = (uint64_t)v65 - v64.i64[0];
        if (((uint64_t)v65 - v64.i64[0]) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        v77[0] = &v65;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v65, v29);
        else
          v30 = 0;
        v31 = (pthread_mutex_t **)&v30[8 * v26];
        v32 = (void **)&v30[8 * v29];
        v76 = v32;
        __p.__r_.__value_.__r.__words[0] = 0;
        *v31 = v23;
        v33 = v31 + 1;
        v75.i64[1] = (uint64_t)(v31 + 1);
        v34 = (_QWORD *)v64.i64[1];
        v35 = (_QWORD *)v64.i64[0];
        if (v64.i64[1] == v64.i64[0])
        {
          v38 = 0;
          v37 = vdupq_n_s64(v64.u64[1]);
        }
        else
        {
          do
          {
            v36 = (pthread_mutex_t *)*--v34;
            *v34 = 0;
            *--v31 = v36;
          }
          while (v34 != v35);
          v37 = v64;
          v33 = (_QWORD *)v75.i64[1];
          v32 = v76;
          v38 = (pthread_mutex_t *)__p.__r_.__value_.__r.__words[0];
        }
        v64.i64[0] = (uint64_t)v31;
        v64.i64[1] = (uint64_t)v33;
        v75 = v37;
        v39 = v65;
        v65 = v32;
        v76 = v39;
        v74 = (void *)v37.i64[0];
        std::__split_buffer<std::unique_ptr<turi::mutex>>::~__split_buffer((uint64_t)&v74);
        v64.i64[1] = (uint64_t)v33;
        if (v38)
        {
          turi::mutex::~mutex(v38);
          MEMORY[0x219A19A08]();
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)v64.i64[1] = v23;
        v64.i64[1] = v25 + 8;
      }
    }
  }
  turi::sframe::get_reader((turi::sframe *)a1, &v63);
  v40 = v70;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v71;
  v57 = (void **)&v72;
  v58 = &v66;
  v59 = &v64;
  v60 = &v63;
  v61 = a3;
  v62 = a4;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v41);
  v43 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v43);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v43 <= 1)
  {
    if (v40)
    {
      for (j = 0; j != v40; ++j)
        turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1::operator()((uint64_t **)&__p, j);
    }
  }
  else
  {
    v45 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&v74, v45);
    v46 = 0;
    v47 = (double)v40 / (double)(unint64_t)v43;
    do
    {
      v48 = (turi::thread *)(v46 + 1);
      v49 = (unint64_t)(v47 * (double)(unint64_t)(v46 + 1) + 0.0);
      if ((turi::thread *)v46 == (turi::thread *)((char *)v43 - 1))
        v49 = v40;
      v73[2] = (unint64_t)(v47 * (double)(unint64_t)v46 + 0.0);
      v73[3] = v49;
      v73[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1>(unsigned long,unsigned long,turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1 const&)::{lambda(void)#1}>(turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1)::stored_vtable
             + 1;
      v73[1] = (uint64_t)&__p;
      turi::parallel_task_queue::launch((uint64_t)&v74, (uint64_t)v73, v46);
      boost::function0<void>::~function0(v73);
      v46 = (uint64_t)v48;
    }
    while (v48 != v43);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)&v74);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&v74);
  }
  v51 = *a5;
  v52 = a5[1];
  while (v51 != v52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
    v51 += 296;
  }
  v53 = v63;
  v63 = 0;
  if (v53)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v53 + 8))(v53);
  v74 = &v64;
  std::vector<std::unique_ptr<turi::mutex>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  v74 = &v66;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
}

void sub_2181BFFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  uint64_t v42;

  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&__p);
  v42 = a25;
  a25 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  a13 = &a26;
  std::vector<std::unique_ptr<turi::mutex>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a29;
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::vector<turi::sframe>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/shuffle.cpp", 102);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/shuffle.cpp", "operator()", 19, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181C0268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<turi::sframe>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = 0x14C1BACF914C1BADLL * ((v3 - *result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<turi::sframe>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 296 * a2;
    if (v3 != v7)
    {
      v8 = (uint64_t (***)(_QWORD))(v3 - 296);
      do
      {
        result = (uint64_t *)(**v8)(v8);
        v9 = v8 == (uint64_t (***)(_QWORD))v7;
        v8 -= 37;
      }
      while (!v9);
    }
    v2[1] = v7;
  }
  return result;
}

void sub_2181C0524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

turi::sframe *std::vector<turi::sframe>::__append(uint64_t *a1, unint64_t a2)
{
  turi::sframe *result;
  uint64_t v5;
  uint64_t v6;
  turi::sframe *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  turi::sframe *v13;
  uint64_t v14;
  turi::sframe *v15;
  uint64_t v16;
  turi::sframe *v17;
  _QWORD v18[2];
  turi::sframe *v19;
  char *v20;
  turi::sframe *v21;

  v6 = a1[2];
  result = (turi::sframe *)(a1 + 2);
  v5 = v6;
  v7 = (turi::sframe *)*((_QWORD *)result - 1);
  if (0x14C1BACF914C1BADLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (turi::sframe *)((char *)v7 + 296 * a2);
      v14 = 296 * a2;
      do
      {
        result = turi::sframe::sframe(v7);
        v7 = (turi::sframe *)((char *)v7 + 296);
        v14 -= 296;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x14C1BACF914C1BADLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xDD67C8A60DD67CLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x14C1BACF914C1BADLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x6EB3E45306EB3ELL)
      v11 = 0xDD67C8A60DD67CLL;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sframe>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (turi::sframe *)&v12[296 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[296 * v11];
    v16 = 296 * a2;
    v17 = (turi::sframe *)((char *)v15 + 296 * a2);
    do
    {
      turi::sframe::sframe(v15);
      v15 = (turi::sframe *)((char *)v15 + 296);
      v16 -= 296;
    }
    while (v16);
    v19 = v17;
    std::vector<turi::sframe>::__swap_out_circular_buffer(a1, v18);
    return (turi::sframe *)std::__split_buffer<turi::sframe>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_2181C0718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sframe>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>,std::reverse_iterator<turi::sframe*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  turi::sframe *v12;

  v10 = 0;
  v11 = a7 - 296;
  while (a3 + v10 != a5)
  {
    v12 = (turi::sframe *)(v11 + v10);
    v10 -= 296;
    turi::sframe::sframe(v12, (const turi::sframe *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<turi::sframe>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    (**(void (***)(uint64_t))(i - 296))(i - 296);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__push_back_slow_path<std::function<void ()(turi::sframe_rows const&)>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 96;
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer(&v10);
  return v8;
}

void sub_2181C0998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<turi::mutex>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  pthread_mutex_t **v2;
  pthread_mutex_t **v4;
  void *v5;

  v1 = *a1;
  v2 = (pthread_mutex_t **)**a1;
  if (v2)
  {
    v4 = (pthread_mutex_t **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<turi::mutex>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pthread_mutex_t *std::unique_ptr<turi::mutex>::reset[abi:ne180100](pthread_mutex_t **a1, pthread_mutex_t *a2)
{
  pthread_mutex_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::mutex::~mutex(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<turi::mutex>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<turi::mutex>::reset[abi:ne180100]((pthread_mutex_t **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t rows;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  __int128 *v46;
  __int128 *v47;
  char *v48;
  char *v49;
  unint64_t *v50;

  v4 = **a1;
  if (*a1[1] - 1 == a2)
    v5 = *a1[2];
  else
    v5 = v4 + v4 * a2;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *a1[3];
  v33 = v5;
  if (v6)
  {
    v34 = v4;
    v7 = 0;
    for (i = 0; i < v6; ++i)
    {
      turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(&v37, *a1[4] + v7, *(_QWORD *)(*a1[5] + 8 * i), 0x1000uLL, 0x2800uLL);
      v9 = v42;
      if ((unint64_t)v42 >= v43)
      {
        v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v42 - v41) >> 3);
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) > 0x492492492492492)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v43 - v41) >> 3) > v13)
          v13 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v43 - v41) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v43 - v41) >> 3)) >= 0x249249249249249)
          v14 = 0x492492492492492;
        else
          v14 = v13;
        v50 = &v43;
        v15 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>((uint64_t)&v43, v14);
        v16 = (char *)v15 + 56 * v12;
        v46 = v15;
        v47 = (__int128 *)v16;
        v49 = (char *)v15 + 56 * v17;
        v18 = v38;
        *(_OWORD *)v16 = v37;
        *((_OWORD *)v16 + 1) = v18;
        *((_QWORD *)v16 + 5) = 0;
        *((_QWORD *)v16 + 6) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_OWORD *)v16 + 2) = v39;
        *((_QWORD *)v16 + 6) = v40;
        v39 = 0uLL;
        v40 = 0;
        v48 = v16 + 56;
        std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__swap_out_circular_buffer(&v41, &v46);
        v11 = v42;
        std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::~__split_buffer((void **)&v46);
      }
      else
      {
        v10 = v38;
        *v42 = v37;
        v9[1] = v10;
        *((_QWORD *)v9 + 5) = 0;
        *((_QWORD *)v9 + 6) = 0;
        *((_QWORD *)v9 + 4) = 0;
        v9[2] = v39;
        *((_QWORD *)v9 + 6) = v40;
        v39 = 0uLL;
        v40 = 0;
        v11 = (_OWORD *)((char *)v9 + 56);
      }
      v42 = v11;
      v46 = &v39;
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      v6 = *a1[3];
      v7 += 96;
    }
    v5 = v33;
    v4 = v34;
  }
  v19 = v4 * a2;
  if (v4 * a2 < v5)
  {
    do
    {
      v37 = 0uLL;
      *(_QWORD *)&v38 = 0;
      BYTE8(v38) = 1;
      v20 = v5 - v19;
      if (v5 - v19 > 0x400)
        v20 = 1024;
      rows = turi::sframe_reader::read_rows((turi::sframe_reader *)*a1[6], v19, v20 + v19, (uint64_t ***)&v37);
      if (BYTE8(v38))
      {
        v46 = 0;
        v47 = &v37;
        v48 = 0;
      }
      else
      {
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)&v37);
        v46 = 0;
        v47 = &v37;
        v48 = 0;
        if (!BYTE8(v38))
          turi::sframe_rows::ensure_unique((turi::sframe_rows *)&v37);
      }
      v35 = rows;
      if ((_QWORD)v37 == *((_QWORD *)&v37 + 1) || !*(_QWORD *)v37)
        v22 = 0;
      else
        v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v37 + 8) - **(_QWORD **)v37) >> 4;
      if (!v46)
      {
        v23 = v48;
        goto LABEL_30;
      }
      do
      {
        do
        {
          v24 = a1[7];
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v47, (uint64_t *)v36);
          v25 = v24[3];
          if (!v25)
            std::__throw_bad_function_call[abi:ne180100]();
          v26 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v25 + 48))(v25, v36);
          v27 = *a1[3];
          v45 = (void **)v36;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
          v28 = a1[8];
          if (v28[3])
          {
            turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v47, (uint64_t *)v36);
            v44 = a2;
            v29 = v28[3];
            if (!v29)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v29 + 48))(v29, v36, &v44);
            v45 = (void **)v36;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
          }
          v30 = v41;
          turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v47, (uint64_t *)v36);
          turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::write(v30 + 56 * (v26 % v27), v36);
          v45 = (void **)v36;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
          v23 = ++v48;
        }
        while (v46);
LABEL_30:
        ;
      }
      while (v23 != (char *)v22);
      v19 += v35;
      v46 = &v37;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      v5 = v33;
    }
    while (v19 < v33);
    v6 = *a1[3];
  }
  if (v6)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(v41 + v31, 0);
      ++v32;
      v31 += 56;
    }
    while (v32 < *a1[3]);
  }
  *(_QWORD *)&v37 = &v41;
  std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_2181C0F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  *(_QWORD *)(v22 - 128) = &a15;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 128));
  a15 = (void **)&a22;
  std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::write(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = (uint64_t *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 >= *(_QWORD *)(a1 + 48))
  {
    result = std::vector<std::vector<turi::flexible_type>>::__push_back_slow_path<std::vector<turi::flexible_type> const&>(v3, a2);
  }
  else
  {
    std::vector<std::vector<turi::flexible_type>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::flexible_type> const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  *(_QWORD *)(a1 + 40) = result;
  if (0xAAAAAAAAAAAAAAABLL * ((result - *(_QWORD *)(a1 + 32)) >> 3) >= *(_QWORD *)(a1 + 16))
  {
    result = pthread_mutex_trylock(*(pthread_mutex_t **)(a1 + 8));
    if (!(_DWORD)result
      || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3) >= *(_QWORD *)(a1 + 24))
    {
      return turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(a1, (_DWORD)result == 0);
    }
  }
  return result;
}

uint64_t turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::flush(uint64_t a1, char a2)
{
  pthread_mutex_t *v3;
  void **v4;
  void **v5;
  uint64_t v6;
  void **v7;
  void **v9;

  if ((a2 & 1) == 0)
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v3 = *(pthread_mutex_t **)(a1 + 8);
  v4 = *(void ***)(a1 + 32);
  v5 = *(void ***)(a1 + 40);
  if (v4 != v5)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 56);
      if (!v6)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, v4);
      v4 += 3;
    }
    while (v4 != v5);
    v4 = *(void ***)(a1 + 32);
    v7 = *(void ***)(a1 + 40);
    while (v7 != v4)
    {
      v7 -= 3;
      v9 = v7;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v9);
    }
  }
  *(_QWORD *)(a1 + 40) = v4;
  return pthread_mutex_unlock(v3);
}

void sub_2181C10F0(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>,std::reverse_iterator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 32);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 56;
  }
}

void **std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = (void **)(i - 24);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

_QWORD *turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  *result = a2;
  result[1] = a3;
  result[4] = 0;
  result[2] = a4;
  result[3] = a5;
  result[5] = 0;
  result[6] = 0;
  if (a5 <= a4)
    turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  return result;
}

void sub_2181C1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/buffered_writer.hpp", 105);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"hard_limit", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"soft_limit", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/buffered_writer.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::buffered_writer(std::function<void ()(turi::sframe_rows const&)>&,turi::mutex &,unsigned long,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181C1538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::buffered_writer<std::vector<turi::flexible_type>,turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        v7 = (void **)(v4 - 24);
        std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1>(unsigned long,unsigned long,turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7shuffleENS_6sframeEmNSt3__18functionIFmRKNS2_6vectorI"
                                        "NS_13flexible_typeENS2_9allocatorIS5_EEEEEEENS3_IFvSA_mEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7shuffleENS_6sframeEmNSt3__18functionIFmRKNS2_6vectorINS_13flexible_typeENS2_9allocatorIS5_EEEEEEENS3_IFvSA_mEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1>(unsigned long,unsigned long,turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    turi::shuffle(turi::sframe,unsigned long,std::function<unsigned long ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type> const&,unsigned long)>)::$_1::operator()(*(uint64_t ***)a1, i);
}

void __cxx_global_var_init_4_9()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_shuffle_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_NeuralNetwork_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2181C19D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2181C1ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long *>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2181C1B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<long long>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<long long>::__find_equal<long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void __cxx_global_var_init_10_3()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_testing_utils_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::`anonymous namespace'::get_priority_tls_key_id(turi::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
  }
}

void sub_2181C1ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::unfair_lock::lock(turi::unfair_lock *this)
{
  char *unfair_lock_priority;
  int v3;
  char *v5;

  pthread_mutex_lock((pthread_mutex_t *)this + 1);
  if (*((_BYTE *)this + 128)
    || *((_QWORD *)this + 19) && *(_QWORD *)(*((_QWORD *)this + 17) + 32) < *(_QWORD *)unfair_lock_priority)
  {
    v5 = unfair_lock_priority;
    std::__tree<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 17, (unint64_t *)unfair_lock_priority, (uint64_t)&std::piecewise_construct, (uint64_t **)&v5)[5] = (uint64_t)(unfair_lock_priority + 8);
    while (*((_BYTE *)this + 128)
         || *((_QWORD *)this + 19) && *(_QWORD *)(*((_QWORD *)this + 17) + 32) < *(_QWORD *)unfair_lock_priority)
    {
      v3 = pthread_cond_wait((pthread_cond_t *)(unfair_lock_priority + 8), (pthread_mutex_t *)this + 1);
      assert_msg(v3 == 0, "Condition variable wait error %d", v3);
      if (*(_QWORD *)unfair_lock_priority > *((_QWORD *)this + 20))
      {
        pthread_mutex_unlock((pthread_mutex_t *)this + 1);
        turi::timer::sleep_ms(*((int *)this + 46));
        pthread_mutex_lock((pthread_mutex_t *)this + 1);
      }
    }
    std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>((uint64_t)this + 136, (unint64_t *)unfair_lock_priority);
  }
  pthread_mutex_lock((pthread_mutex_t *)this);
  *((_BYTE *)this + 128) = 1;
  return pthread_mutex_unlock((pthread_mutex_t *)this + 1);
}

char *turi::`anonymous namespace'::get_unfair_lock_priority(turi::_anonymous_namespace_ *this)
{
  pthread_key_t priority_tls_key_id;
  char *v2;
  pthread_cond_t *v3;
  unint64_t v4;
  unint64_t v5;
  pthread_key_t v6;

  v2 = (char *)pthread_getspecific(priority_tls_key_id);
  if (!v2)
  {
    v2 = (char *)operator new();
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_QWORD *)v2 + 6) = 0;
    v3 = turi::conditional::conditional((pthread_cond_t *)(v2 + 8));
    do
    {
      v5 = v4 + 1;
    }
    *(_QWORD *)v2 = v5;
    pthread_setspecific(v6, v2);
  }
  return v2;
}

void sub_2181C20AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1000C4021716A34);
  _Unwind_Resume(a1);
}

uint64_t turi::unfair_lock::unlock(turi::unfair_lock *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  double v4;
  double v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  timeval v14;

  v2 = (pthread_mutex_t *)((char *)this + 64);
  pthread_mutex_lock((pthread_mutex_t *)this + 1);
  v3 = *((_QWORD *)this + 25) + 1;
  *((_QWORD *)this + 25) = v3;
  if (v3 == 100)
  {
    gettimeofday(&v14, 0);
    v4 = (double)(v14.tv_usec - *((_DWORD *)this + 56)) / 1000000.0 + (double)(v14.tv_sec - *((_QWORD *)this + 27));
    *((double *)this + 24) = v4;
    v5 = *((double *)this + 22);
    if (*((_BYTE *)this + 208))
      v6 = 1;
    else
      v6 = v4 <= v5 + 0.5;
    if (v6)
    {
      *((_BYTE *)this + 208) = 0;
      v7 = *((_DWORD *)this + 46);
      if (v5 <= v4)
      {
        v8 = *((_DWORD *)this + 46);
        if (v5 < v4)
          v8 = *((_DWORD *)this + 42);
      }
      else
      {
        v8 = 2 * v7 - *((_DWORD *)this + 42);
      }
      v9 = v8 & ~(v8 >> 31);
      if (v9 >= 0x64)
        v9 = 100;
      *((_DWORD *)this + 42) = v7;
      *((double *)this + 22) = v4;
      if (v9 == v7)
        v10 = v9 + 5;
      else
        v10 = v9;
      *((_QWORD *)this + 25) = 0;
      *((_DWORD *)this + 46) = v10;
    }
    else
    {
      *((_DWORD *)this + 42) = 0;
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = 50;
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
      *((_BYTE *)this + 208) = 1;
    }
    gettimeofday((timeval *)((char *)this + 216), 0);
  }
  v11 = pthread_mutex_unlock((pthread_mutex_t *)this);
  if (*((_QWORD *)this + 19))
  {
    v12 = pthread_cond_signal(*(pthread_cond_t **)(*((_QWORD *)this + 17) + 40));
    v11 = assert_msg(v12 == 0, "Condition variable signal error %d", v12);
  }
  *((_BYTE *)this + 128) = 0;
  return pthread_mutex_unlock(v2);
}

uint64_t turi::`anonymous namespace'::destroy_tls_data(uint64_t this, void *a2)
{
  if (this)
  {
    turi::conditional::~conditional((pthread_cond_t *)(this + 8));
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void sub_2181C2418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long,turi::conditional *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::conditional *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::conditional *>>>::__erase_unique<unsigned long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t _GLOBAL__sub_I_unfair_lock_cpp()
{
  turi::_anonymous_namespace_ *v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  v0 = (turi::_anonymous_namespace_ *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::unity_sarray *turi::unity_sarray::unity_sarray(turi::unity_sarray *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24D9315D0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  turi::unity_sarray::clear(this);
  return this;
}

void sub_2181C25B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](v1 + 8, 0);
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](v1 + 7, 0);
  v4 = v1[6];
  v1[6] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  cppipc::ipc_object_base::~ipc_object_base((cppipc::ipc_object_base *)v1);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::~unity_sarray(turi::unity_sarray *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D9315D0;
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  turi::unity_sarray::~unity_sarray(this);
  JUMPOUT(0x219A19A08);
}

void turi::unity_sarray::construct_from_vector(uint64_t a1, uint64_t *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v15);
  turi::sarray<turi::flexible_type>::open_for_write(v15, 1, 1);
  turi::sarray<turi::flexible_type>::set_type(v15, a3);
  turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(*a2, a2[1], v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v6 = (std::__shared_weak_count *)v16;
  v14[0] = v15;
  v14[1] = v16;
  if (v16)
  {
    v7 = (unint64_t *)(v16 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  turi::unity_sarray::construct_from_sarray(a1, v14);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v12 = (unint64_t *)(v16 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2181C27B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*(_BYTE *)(a3 + 248))
    v3 = *(_BYTE *)(a3 + 249) == 0;
  else
    v3 = 1;
  if (v3)
    turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()();
  turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(a1, a2, (uint64_t *)a3);
}

void turi::unity_sarray::construct_from_sarray(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v4 = a2[1];
  v13 = *a2;
  v14 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(&v13, 0, -1, &v15);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v15);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_2181C28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_const(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  double v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  void *v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  unint64_t v101;
  BOOL v102;
  _QWORD *v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  _QWORD *v111;
  unint64_t v112;
  BOOL v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t *v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  void *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  BOOL v130;
  _QWORD *v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  BOOL v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  double v177;
  _QWORD *v178;
  unint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  void **v195;
  __int128 v196;
  void *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  BOOL v206;
  _QWORD *v207;
  unint64_t v208;
  int v209;
  _QWORD *v210;
  _QWORD *v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  void **v222;
  __int128 v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  _QWORD *v232;
  unint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  __int128 v243;
  __int128 v244;
  unint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  __int128 v276;
  __int128 v277;
  unint64_t v278;
  int v279;
  _QWORD *v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int v290;
  __int128 v291;
  __int128 v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  __int128 v301;
  __int128 v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  _QWORD *v320;
  void *v321;
  void *v322;
  unsigned int v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  _QWORD *v327;
  void *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void **v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t *v362;
  void **v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *exception;
  __int128 v376;
  __int128 v377;
  _BYTE v378[32];
  uint64_t v379;
  void *v380;
  void *v381;
  uint64_t v382;
  void **v383;
  void **v384;
  uint64_t v385;
  __int128 v386;
  void *v387;
  _QWORD *v388[3];

  v388[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_const", 104, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)&v376, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v376);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v15 = 0;
  v16 = *(_BYTE *)(a2 + 12);
  if (a4 != 7)
    v16 = a4;
  if (v16 == 7)
    v17 = 1;
  else
    v17 = v16;
  memset(v388, 0, 13);
  BYTE4(v388[1]) = v17;
  switch(v17)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v15 = operator new();
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 8) = 0;
      goto LABEL_18;
    case 6:
      v15 = 0x1900000000000000;
      v388[0] = (_QWORD *)0x1900000000000000;
      LODWORD(v388[1]) = 0;
      break;
    case 8:
      v15 = operator new();
      *(_QWORD *)v15 = 0;
      v14 = 0.0;
      *(_OWORD *)(v15 + 8) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = 3;
      goto LABEL_18;
    case 9:
      v15 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v15);
LABEL_18:
      v388[0] = (_QWORD *)v15;
      *(_QWORD *)v15 = 1;
      break;
    default:
      break;
  }
  v18 = *(unsigned __int8 *)(a2 + 12);
  if (v18 == 7 || v18 == v17)
  {
    if (v388 != (_QWORD **)a2)
    {
      switch(BYTE4(v388[1]))
      {
        case 2:
          do
          {
            v20 = __ldaxr((unint64_t *)v15);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, (unint64_t *)v15));
          if (!v21)
          {
            v22 = v388[0];
            if (v388[0])
            {
              if (*((char *)v388[0] + 31) < 0)
                operator delete(*((void **)v388[0] + 1));
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_57;
            }
          }
          break;
        case 3:
          do
          {
            v31 = __ldaxr((unint64_t *)v15);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, (unint64_t *)v15));
          if (!v32)
          {
            v33 = v388[0];
            if (v388[0])
            {
              v34 = (void *)v388[0][1];
              if (v34)
              {
                v388[0][2] = v34;
                operator delete(v34);
              }
              v23 = v33;
              v24 = 0x1080C409938AC02;
              goto LABEL_57;
            }
          }
          break;
        case 4:
          do
          {
            v25 = __ldaxr((unint64_t *)v15);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, (unint64_t *)v15));
          if (!v26)
          {
            v27 = v388[0];
            if (v388[0])
            {
              *(_QWORD *)&v376 = v388[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
              goto LABEL_51;
            }
          }
          break;
        case 5:
          do
          {
            v35 = __ldaxr((unint64_t *)v15);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unint64_t *)v15));
          if (!v36)
          {
            v27 = v388[0];
            if (v388[0])
            {
              *(_QWORD *)&v376 = v388[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
LABEL_51:
              v23 = v27;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_57;
            }
          }
          break;
        case 8:
          do
          {
            v37 = __ldaxr((unint64_t *)v15);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unint64_t *)v15));
          if (!v38)
          {
            v39 = v388[0];
            if (v388[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v388[0] + 2);
              v23 = v39;
              v30 = -235920773;
              goto LABEL_56;
            }
          }
          break;
        case 9:
          do
          {
            v28 = __ldaxr((unint64_t *)v15);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, (unint64_t *)v15));
          if (!v29 && v388[0])
          {
            v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v388[0]);
            v30 = 2071181815;
LABEL_56:
            v24 = v30 | 0x1030C4000000000;
LABEL_57:
            MEMORY[0x219A19A08](v23, v24);
          }
          break;
        default:
          break;
      }
      *(_QWORD **)((char *)v388 + 5) = *(_QWORD **)(a2 + 5);
      v388[0] = *(_QWORD **)a2;
      BYTE4(v388[1]) = *(_BYTE *)(a2 + 12);
      switch(BYTE4(v388[1]))
      {
        case 2:
          v40 = v388[0];
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          break;
        case 3:
          v46 = v388[0];
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
          break;
        case 4:
          v42 = v388[0];
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
          break;
        case 5:
          v48 = v388[0];
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 + 1, v48));
          break;
        case 8:
          v50 = v388[0];
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 + 1, v50));
          break;
        case 9:
          v44 = v388[0];
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 + 1, v44));
          break;
        default:
          break;
      }
    }
  }
  else if (v388 != (_QWORD **)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v388[1]))
        {
          case 0:
            v19 = *(_QWORD *)a2;
            goto LABEL_137;
          case 1:
            v177 = (double)*(uint64_t *)a2;
            goto LABEL_418;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v218 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v218, (uint64_t)v388[0]);
              v388[0] = v218;
              *v218 = 1;
              do
              {
                v219 = __ldaxr((unint64_t *)v15);
                v220 = v219 - 1;
              }
              while (__stlxr(v220, (unint64_t *)v15));
              if (!v220)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v221 = v388[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v376);
            std::ostream::operator<<();
            std::stringbuf::str();
            v222 = (void **)(v221 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v376);
            if (*((char *)v221 + 31) < 0)
              operator delete(*v222);
            v223 = v386;
            v221[3] = v387;
            *(_OWORD *)v222 = v223;
            goto LABEL_458;
          case 3:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v178 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v178, (uint64_t)v388[0]);
            v388[0] = v178;
            *v178 = 1;
            do
            {
              v179 = __ldaxr((unint64_t *)v15);
              v102 = --v179 == 0;
            }
            while (__stlxr(v179, (unint64_t *)v15));
            goto LABEL_293;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v280 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v280, (uint64_t)v388[0]);
            v388[0] = v280;
            *v280 = 1;
            do
            {
              v281 = __ldaxr((unint64_t *)v15);
              v135 = --v281 == 0;
            }
            while (__stlxr(v281, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v282 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v282, (uint64_t)v388[0]);
            v388[0] = v282;
            *v282 = 1;
            do
            {
              v283 = __ldaxr((unint64_t *)v15);
              v113 = --v283 == 0;
            }
            while (__stlxr(v283, (unint64_t *)v15));
            goto LABEL_444;
          case 6:
            v388[0] = (_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v388[1]) = 0;
            goto LABEL_458;
          case 7:
            goto LABEL_457;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v286 = operator new();
            v287 = v388[0];
            *(_QWORD *)v286 = *v388[0];
            *(_QWORD *)(v286 + 8) = v287[1];
            v288 = v287[2];
            *(_QWORD *)(v286 + 16) = v288;
            if (v288)
            {
              v289 = (unsigned int *)(v288 + 8);
              do
                v290 = __ldxr(v289);
              while (__stxr(v290 + 1, v289));
            }
            v291 = *(_OWORD *)(v287 + 3);
            v292 = *(_OWORD *)(v287 + 5);
            *(_OWORD *)(v286 + 56) = *(_OWORD *)(v287 + 7);
            *(_OWORD *)(v286 + 40) = v292;
            *(_OWORD *)(v286 + 24) = v291;
            v388[0] = (_QWORD *)v286;
            *(_QWORD *)v286 = 1;
            do
            {
              v293 = __ldaxr((unint64_t *)v15);
              v206 = --v293 == 0;
            }
            while (__stlxr(v293, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v210 = (_QWORD *)operator new();
            v211 = v388[0] + 1;
            *v210 = *v388[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v210 + 1, (uint64_t)v211);
            v388[0] = v210;
            *v210 = 1;
            do
            {
              v212 = __ldaxr((unint64_t *)v15);
              v130 = --v212 == 0;
            }
            while (__stlxr(v212, (unint64_t *)v15));
            goto LABEL_333;
          default:
            goto LABEL_570;
        }
      case 1:
        switch(BYTE4(v388[1]))
        {
          case 0:
            v19 = (uint64_t)*(double *)a2;
            goto LABEL_137;
          case 1:
            v177 = *(double *)a2;
            goto LABEL_418;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v191 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v191, (uint64_t)v388[0]);
              v388[0] = v191;
              *v191 = 1;
              do
              {
                v192 = __ldaxr((unint64_t *)v15);
                v193 = v192 - 1;
              }
              while (__stlxr(v193, (unint64_t *)v15));
              if (!v193)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v194 = v388[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v376);
            std::ostream::operator<<();
            std::stringbuf::str();
            v195 = (void **)(v194 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v376);
            if (*((char *)v194 + 31) < 0)
              operator delete(*v195);
            v196 = v386;
            v197 = v387;
            goto LABEL_510;
          case 3:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v131 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v131, (uint64_t)v388[0]);
            v388[0] = v131;
            *v131 = 1;
            do
            {
              v132 = __ldaxr((unint64_t *)v15);
              v102 = --v132 == 0;
            }
            while (__stlxr(v132, (unint64_t *)v15));
            goto LABEL_293;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v234 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v234, (uint64_t)v388[0]);
            v388[0] = v234;
            *v234 = 1;
            do
            {
              v235 = __ldaxr((unint64_t *)v15);
              v135 = --v235 == 0;
            }
            while (__stlxr(v235, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v257 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v257, (uint64_t)v388[0]);
            v388[0] = v257;
            *v257 = 1;
            do
            {
              v258 = __ldaxr((unint64_t *)v15);
              v113 = --v258 == 0;
            }
            while (__stlxr(v258, (unint64_t *)v15));
            goto LABEL_444;
          case 6:
            v209 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v209 >= 999999)
              v209 = 999999;
            if (v209 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v388[0] = (_QWORD *)(vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v388[1]) = v209;
            goto LABEL_458;
          case 7:
            goto LABEL_457;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v271 = operator new();
            v272 = v388[0];
            *(_QWORD *)v271 = *v388[0];
            *(_QWORD *)(v271 + 8) = v272[1];
            v273 = v272[2];
            *(_QWORD *)(v271 + 16) = v273;
            if (v273)
            {
              v274 = (unsigned int *)(v273 + 8);
              do
                v275 = __ldxr(v274);
              while (__stxr(v275 + 1, v274));
            }
            v276 = *(_OWORD *)(v272 + 3);
            v277 = *(_OWORD *)(v272 + 5);
            *(_OWORD *)(v271 + 56) = *(_OWORD *)(v272 + 7);
            *(_OWORD *)(v271 + 40) = v277;
            *(_OWORD *)(v271 + 24) = v276;
            v388[0] = (_QWORD *)v271;
            *(_QWORD *)v271 = 1;
            do
            {
              v278 = __ldaxr((unint64_t *)v15);
              v206 = --v278 == 0;
            }
            while (__stlxr(v278, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v171 = (_QWORD *)operator new();
            v172 = v388[0] + 1;
            *v171 = *v388[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v171 + 1, (uint64_t)v172);
            v388[0] = v171;
            *v171 = 1;
            do
            {
              v173 = __ldaxr((unint64_t *)v15);
              v130 = --v173 == 0;
            }
            while (__stlxr(v173, (unint64_t *)v15));
            goto LABEL_333;
          default:
            goto LABEL_570;
        }
      case 2:
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            v67 = *(_QWORD **)a2;
            if (*(_QWORD *)v15 != 1)
            {
              v68 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v68, (uint64_t)v388[0]);
              v388[0] = v68;
              *v68 = 1;
              do
              {
                v69 = __ldaxr((unint64_t *)v15);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, (unint64_t *)v15));
              if (!v70)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            if (*((char *)v67 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v376, (const std::string::value_type *)v67[1], v67[2]);
            }
            else
            {
              v71 = *(_OWORD *)(v67 + 1);
              *(_QWORD *)&v377 = v67[3];
              v376 = v71;
            }
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v103 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v103, (uint64_t)v388[0]);
            v388[0] = v103;
            *v103 = 1;
            do
            {
              v104 = __ldaxr((unint64_t *)v15);
              v102 = --v104 == 0;
            }
            while (__stlxr(v104, (unint64_t *)v15));
            goto LABEL_293;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v232 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v232, (uint64_t)v388[0]);
            v388[0] = v232;
            *v232 = 1;
            do
            {
              v233 = __ldaxr((unint64_t *)v15);
              v135 = --v233 == 0;
            }
            while (__stlxr(v233, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v180 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v180, (uint64_t)v388[0]);
            v388[0] = v180;
            *v180 = 1;
            do
            {
              v181 = __ldaxr((unint64_t *)v15);
              v113 = --v181 == 0;
            }
            while (__stlxr(v181, (unint64_t *)v15));
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v238 = operator new();
            v239 = v388[0];
            *(_QWORD *)v238 = *v388[0];
            *(_QWORD *)(v238 + 8) = v239[1];
            v240 = v239[2];
            *(_QWORD *)(v238 + 16) = v240;
            if (v240)
            {
              v241 = (unsigned int *)(v240 + 8);
              do
                v242 = __ldxr(v241);
              while (__stxr(v242 + 1, v241));
            }
            v243 = *(_OWORD *)(v239 + 3);
            v244 = *(_OWORD *)(v239 + 5);
            *(_OWORD *)(v238 + 56) = *(_OWORD *)(v239 + 7);
            *(_OWORD *)(v238 + 40) = v244;
            *(_OWORD *)(v238 + 24) = v243;
            v388[0] = (_QWORD *)v238;
            *(_QWORD *)v238 = 1;
            do
            {
              v245 = __ldaxr((unint64_t *)v15);
              v206 = --v245 == 0;
            }
            while (__stlxr(v245, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v136 = (_QWORD *)operator new();
            v137 = v388[0] + 1;
            *v136 = *v388[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v136 + 1, (uint64_t)v137);
            v388[0] = v136;
            *v136 = 1;
            do
            {
              v138 = __ldaxr((unint64_t *)v15);
              v130 = --v138 == 0;
            }
            while (__stlxr(v138, (unint64_t *)v15));
            goto LABEL_333;
          default:
            goto LABEL_570;
        }
      case 3:
        v76 = *(_QWORD **)a2;
        v77 = (char *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v78 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v78, (uint64_t)v388[0]);
              v388[0] = v78;
              *v78 = 1;
              do
              {
                v79 = __ldaxr((unint64_t *)v15);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, (unint64_t *)v15));
              if (!v80)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v386, v77);
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 != 1)
            {
              v114 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v114, (uint64_t)v388[0]);
              v388[0] = v114;
              *v114 = 1;
              do
              {
                v115 = __ldaxr((unint64_t *)v15);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, (unint64_t *)v15));
              if (!v116)
              {
                v117 = *(void **)(v15 + 8);
                if (v117)
                {
                  *(_QWORD *)(v15 + 16) = v117;
                  operator delete(v117);
                }
                MEMORY[0x219A19A08](v15, 0x1080C409938AC02);
              }
            }
            if (v388[0] == v76)
              goto LABEL_458;
            v85 = (char *)(v388[0] + 1);
            v118 = v76 + 2;
            goto LABEL_199;
          case 4:
            if (*(_QWORD *)v15 != 1)
            {
              v246 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v246, (uint64_t)v388[0]);
              v388[0] = v246;
              *v246 = 1;
              do
              {
                v247 = __ldaxr((unint64_t *)v15);
                v248 = v247 - 1;
              }
              while (__stlxr(v248, (unint64_t *)v15));
              if (!v248)
              {
                *(_QWORD *)&v376 = v15 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
                MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v388[0] + 1, (_QWORD *)v76[1], (_QWORD *)v76[2], (uint64_t)(v76[2] - v76[1]) >> 3);
            goto LABEL_458;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v207 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v207, (uint64_t)v388[0]);
            v388[0] = v207;
            *v207 = 1;
            do
            {
              v208 = __ldaxr((unint64_t *)v15);
              v113 = --v208 == 0;
            }
            while (__stlxr(v208, (unint64_t *)v15));
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v259 = operator new();
            v260 = v388[0];
            *(_QWORD *)v259 = *v388[0];
            *(_QWORD *)(v259 + 8) = v260[1];
            v261 = v260[2];
            *(_QWORD *)(v259 + 16) = v261;
            if (v261)
            {
              v262 = (unsigned int *)(v261 + 8);
              do
                v263 = __ldxr(v262);
              while (__stxr(v263 + 1, v262));
            }
            v264 = *(_OWORD *)(v260 + 3);
            v265 = *(_OWORD *)(v260 + 5);
            *(_OWORD *)(v259 + 56) = *(_OWORD *)(v260 + 7);
            *(_OWORD *)(v259 + 40) = v265;
            *(_OWORD *)(v259 + 24) = v264;
            v388[0] = (_QWORD *)v259;
            *(_QWORD *)v259 = 1;
            do
            {
              v266 = __ldaxr((unint64_t *)v15);
              v206 = --v266 == 0;
            }
            while (__stlxr(v266, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 != 1)
            {
              v163 = (_QWORD *)operator new();
              v164 = v388[0] + 1;
              *v163 = *v388[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v163 + 1, (uint64_t)v164);
              v388[0] = v163;
              *v163 = 1;
              do
              {
                v165 = __ldaxr((unint64_t *)v15);
                v166 = v165 - 1;
              }
              while (__stlxr(v166, (unint64_t *)v15));
              if (!v166)
              {
                v167 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
                MEMORY[0x219A19A08](v167, 0x1030C407B73B9F7);
              }
            }
            v168 = v388[0];
            v386 = 0uLL;
            v387 = 0;
            v383 = 0;
            v384 = 0;
            v385 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v77, &v380);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v376, &v380, (uint64_t)&v386, (uint64_t)&v383, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v380);
            if (v383)
            {
              v384 = v383;
              operator delete(v383);
            }
            if ((_QWORD)v386)
            {
              *((_QWORD *)&v386 + 1) = v386;
              operator delete((void *)v386);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v168 + 1), &v376);
            v169 = (void *)v168[3];
            if (v169)
            {
              v168[4] = v169;
              operator delete(v169);
              v168[3] = 0;
              v168[4] = 0;
              v168[5] = 0;
            }
            v170 = (void *)v168[6];
            *(_OWORD *)(v168 + 3) = v377;
            v168[5] = *(_QWORD *)v378;
            v377 = 0uLL;
            *(_QWORD *)v378 = 0;
            if (v170)
            {
              v168[7] = v170;
              operator delete(v170);
              v168[6] = 0;
              v168[7] = 0;
              v168[8] = 0;
            }
            *((_OWORD *)v168 + 3) = *(_OWORD *)&v378[8];
            v168[8] = *(_QWORD *)&v378[24];
            memset(&v378[8], 0, 24);
            v168[9] = v379;
            goto LABEL_564;
          default:
            goto LABEL_570;
        }
      case 4:
        v58 = *(_QWORD **)a2;
        v59 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v60 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v60, (uint64_t)v388[0]);
              v388[0] = v60;
              *v60 = 1;
              do
              {
                v61 = __ldaxr((unint64_t *)v15);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, (unint64_t *)v15));
              if (!v62)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v386, v59);
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 != 1)
            {
              v90 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v90, (uint64_t)v388[0]);
              v388[0] = v90;
              *v90 = 1;
              do
              {
                v91 = __ldaxr((unint64_t *)v15);
                v92 = v91 - 1;
              }
              while (__stlxr(v92, (unint64_t *)v15));
              if (!v92)
              {
                v93 = *(void **)(v15 + 8);
                if (v93)
                {
                  *(_QWORD *)(v15 + 16) = v93;
                  operator delete(v93);
                }
                MEMORY[0x219A19A08](v15, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v376, v388[0] + 1, v59);
            goto LABEL_458;
          case 4:
            if (*(_QWORD *)v15 != 1)
            {
              v182 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v182, (uint64_t)v388[0]);
              v388[0] = v182;
              *v182 = 1;
              do
              {
                v183 = __ldaxr((unint64_t *)v15);
                v184 = v183 - 1;
              }
              while (__stlxr(v184, (unint64_t *)v15));
              if (!v184)
              {
                *(_QWORD *)&v376 = v15 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
                MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
              }
            }
            if (v388[0] != v58)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v388[0] + 1), (uint64_t *)v58[1], (uint64_t *)v58[2], (uint64_t)(v58[2] - v58[1]) >> 4);
            goto LABEL_458;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v139 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v139, (uint64_t)v388[0]);
            v388[0] = v139;
            *v139 = 1;
            do
            {
              v140 = __ldaxr((unint64_t *)v15);
              v113 = --v140 == 0;
            }
            while (__stlxr(v140, (unint64_t *)v15));
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v198 = operator new();
            v199 = v388[0];
            *(_QWORD *)v198 = *v388[0];
            *(_QWORD *)(v198 + 8) = v199[1];
            v200 = v199[2];
            *(_QWORD *)(v198 + 16) = v200;
            if (v200)
            {
              v201 = (unsigned int *)(v200 + 8);
              do
                v202 = __ldxr(v201);
              while (__stxr(v202 + 1, v201));
            }
            v203 = *(_OWORD *)(v199 + 3);
            v204 = *(_OWORD *)(v199 + 5);
            *(_OWORD *)(v198 + 56) = *(_OWORD *)(v199 + 7);
            *(_OWORD *)(v198 + 40) = v204;
            *(_OWORD *)(v198 + 24) = v203;
            v388[0] = (_QWORD *)v198;
            *(_QWORD *)v198 = 1;
            do
            {
              v205 = __ldaxr((unint64_t *)v15);
              v206 = --v205 == 0;
            }
            while (__stlxr(v205, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 != 1)
            {
              v119 = (_QWORD *)operator new();
              v120 = v388[0] + 1;
              *v119 = *v388[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v119 + 1, (uint64_t)v120);
              v388[0] = v119;
              *v119 = 1;
              do
              {
                v121 = __ldaxr((unint64_t *)v15);
                v122 = v121 - 1;
              }
              while (__stlxr(v122, (unint64_t *)v15));
              if (!v122)
              {
                v123 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
                MEMORY[0x219A19A08](v123, 0x1030C407B73B9F7);
              }
            }
            v124 = v388[0];
            v387 = 0;
            v386 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v386, (uint64_t *)v58[1], (uint64_t *)v58[2], (uint64_t)(v58[2] - v58[1]) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v386, &v376);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v124 + 1), &v376);
            v125 = (void *)v124[3];
            if (v125)
            {
              v124[4] = v125;
              operator delete(v125);
              v124[3] = 0;
              v124[4] = 0;
              v124[5] = 0;
            }
            v126 = (void *)v124[6];
            *(_OWORD *)(v124 + 3) = v377;
            v124[5] = *(_QWORD *)v378;
            v377 = 0uLL;
            *(_QWORD *)v378 = 0;
            if (v126)
            {
              v124[7] = v126;
              operator delete(v126);
              v124[6] = 0;
              v124[7] = 0;
              v124[8] = 0;
            }
            *((_OWORD *)v124 + 3) = *(_OWORD *)&v378[8];
            v124[8] = *(_QWORD *)&v378[24];
            memset(&v378[8], 0, 24);
            v124[9] = v379;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v376);
            v383 = (void **)&v386;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v383);
            goto LABEL_458;
          default:
            goto LABEL_570;
        }
      case 5:
        v63 = *(_QWORD **)a2;
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v64 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v64, (uint64_t)v388[0]);
              v388[0] = v64;
              *v64 = 1;
              do
              {
                v65 = __ldaxr((unint64_t *)v15);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, (unint64_t *)v15));
              if (!v66)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v386, v63 + 1);
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v100 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v100, (uint64_t)v388[0]);
            v388[0] = v100;
            *v100 = 1;
            do
            {
              v101 = __ldaxr((unint64_t *)v15);
              v102 = --v101 == 0;
            }
            while (__stlxr(v101, (unint64_t *)v15));
            goto LABEL_293;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v216 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v216, (uint64_t)v388[0]);
            v388[0] = v216;
            *v216 = 1;
            do
            {
              v217 = __ldaxr((unint64_t *)v15);
              v135 = --v217 == 0;
            }
            while (__stlxr(v217, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 != 1)
            {
              v174 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v174, (uint64_t)v388[0]);
              v388[0] = v174;
              *v174 = 1;
              do
              {
                v175 = __ldaxr((unint64_t *)v15);
                v176 = v175 - 1;
              }
              while (__stlxr(v176, (unint64_t *)v15));
              if (!v176)
              {
                *(_QWORD *)&v376 = v15 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
                MEMORY[0x219A19A08](v15, 0x1020C405E66F15BLL);
              }
            }
            if (v388[0] != v63)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v388[0] + 1, (uint64_t *)v63[1], (uint64_t *)v63[2], (uint64_t)(v63[2] - v63[1]) >> 5);
            goto LABEL_458;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v224 = operator new();
            v225 = v388[0];
            *(_QWORD *)v224 = *v388[0];
            *(_QWORD *)(v224 + 8) = v225[1];
            v226 = v225[2];
            *(_QWORD *)(v224 + 16) = v226;
            if (v226)
            {
              v227 = (unsigned int *)(v226 + 8);
              do
                v228 = __ldxr(v227);
              while (__stxr(v228 + 1, v227));
            }
            v229 = *(_OWORD *)(v225 + 3);
            v230 = *(_OWORD *)(v225 + 5);
            *(_OWORD *)(v224 + 56) = *(_OWORD *)(v225 + 7);
            *(_OWORD *)(v224 + 40) = v230;
            *(_OWORD *)(v224 + 24) = v229;
            v388[0] = (_QWORD *)v224;
            *(_QWORD *)v224 = 1;
            do
            {
              v231 = __ldaxr((unint64_t *)v15);
              v206 = --v231 == 0;
            }
            while (__stlxr(v231, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v127 = (_QWORD *)operator new();
            v128 = v388[0] + 1;
            *v127 = *v388[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v127 + 1, (uint64_t)v128);
            v388[0] = v127;
            *v127 = 1;
            do
            {
              v129 = __ldaxr((unint64_t *)v15);
              v130 = --v129 == 0;
            }
            while (__stlxr(v129, (unint64_t *)v15));
            goto LABEL_333;
          default:
            goto LABEL_570;
        }
      case 6:
        switch(BYTE4(v388[1]))
        {
          case 0:
            v19 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
LABEL_137:
            v388[0] = (_QWORD *)v19;
            goto LABEL_458;
          case 1:
            v177 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_418:
            v388[0] = *(_QWORD **)&v177;
            goto LABEL_458;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v267 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v267, (uint64_t)v388[0]);
              v388[0] = v267;
              *v267 = 1;
              do
              {
                v268 = __ldaxr((unint64_t *)v15);
                v269 = v268 - 1;
              }
              while (__stlxr(v269, (unint64_t *)v15));
              if (!v269)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            v270 = *(_DWORD *)(a2 + 8);
            *(_QWORD *)&v386 = *(_QWORD *)a2;
            DWORD2(v386) = v270;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v386, (std::string *)&v376);
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v185 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v185, (uint64_t)v388[0]);
            v388[0] = v185;
            *v185 = 1;
            do
            {
              v186 = __ldaxr((unint64_t *)v15);
              v102 = --v186 == 0;
            }
            while (__stlxr(v186, (unint64_t *)v15));
LABEL_293:
            if (!v102)
              goto LABEL_457;
            v187 = 0x1080C409938AC02;
            v188 = *(void **)(v15 + 8);
            if (v188)
            {
              *(_QWORD *)(v15 + 16) = v188;
              operator delete(v188);
            }
            goto LABEL_456;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v284 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v284, (uint64_t)v388[0]);
            v388[0] = v284;
            *v284 = 1;
            do
            {
              v285 = __ldaxr((unint64_t *)v15);
              v135 = --v285 == 0;
            }
            while (__stlxr(v285, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v294 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v294, (uint64_t)v388[0]);
            v388[0] = v294;
            *v294 = 1;
            do
            {
              v295 = __ldaxr((unint64_t *)v15);
              v113 = --v295 == 0;
            }
            while (__stlxr(v295, (unint64_t *)v15));
            goto LABEL_444;
          case 6:
            v279 = *(_DWORD *)(a2 + 8);
            v388[0] = *(_QWORD **)a2;
            LODWORD(v388[1]) = v279;
            goto LABEL_458;
          case 7:
            goto LABEL_457;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v296 = operator new();
            v297 = v388[0];
            *(_QWORD *)v296 = *v388[0];
            *(_QWORD *)(v296 + 8) = v297[1];
            v298 = v297[2];
            *(_QWORD *)(v296 + 16) = v298;
            if (v298)
            {
              v299 = (unsigned int *)(v298 + 8);
              do
                v300 = __ldxr(v299);
              while (__stxr(v300 + 1, v299));
            }
            v301 = *(_OWORD *)(v297 + 3);
            v302 = *(_OWORD *)(v297 + 5);
            *(_OWORD *)(v296 + 56) = *(_OWORD *)(v297 + 7);
            *(_OWORD *)(v296 + 40) = v302;
            *(_OWORD *)(v296 + 24) = v301;
            v388[0] = (_QWORD *)v296;
            *(_QWORD *)v296 = 1;
            do
            {
              v303 = __ldaxr((unint64_t *)v15);
              v206 = --v303 == 0;
            }
            while (__stlxr(v303, (unint64_t *)v15));
            goto LABEL_453;
          case 9:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v213 = (_QWORD *)operator new();
            v214 = v388[0] + 1;
            *v213 = *v388[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v213 + 1, (uint64_t)v214);
            v388[0] = v213;
            *v213 = 1;
            do
            {
              v215 = __ldaxr((unint64_t *)v15);
              v130 = --v215 == 0;
            }
            while (__stlxr(v215, (unint64_t *)v15));
LABEL_333:
            if (!v130)
              goto LABEL_457;
            v187 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
            goto LABEL_456;
          default:
            goto LABEL_570;
        }
      case 8:
        v72 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v73 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v73, (uint64_t)v388[0]);
              v388[0] = v73;
              *v73 = 1;
              do
              {
                v74 = __ldaxr((unint64_t *)v15);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, (unint64_t *)v15));
              if (!v75)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_507;
          case 3:
            if (*(_QWORD *)v15 != 1)
            {
              v105 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v105, (uint64_t)v388[0]);
              v388[0] = v105;
              *v105 = 1;
              do
              {
                v106 = __ldaxr((unint64_t *)v15);
                v107 = v106 - 1;
              }
              while (__stlxr(v107, (unint64_t *)v15));
              if (!v107)
              {
                v108 = *(void **)(v15 + 8);
                if (v108)
                {
                  *(_QWORD *)(v15 + 16) = v108;
                  operator delete(v108);
                }
                v14 = MEMORY[0x219A19A08](v15, 0x1080C409938AC02);
              }
            }
            v109 = v388[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v72, (double **)&v376, *(unint64_t *)&v14);
            v110 = (void *)v109[1];
            if (v110)
            {
              v109[2] = v110;
              operator delete(v110);
              v109[1] = 0;
              v109[2] = 0;
              v109[3] = 0;
            }
            *(_OWORD *)(v109 + 1) = v376;
            v109[3] = v377;
            goto LABEL_458;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v236 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v236, (uint64_t)v388[0]);
            v388[0] = v236;
            *v236 = 1;
            do
            {
              v237 = __ldaxr((unint64_t *)v15);
              v135 = --v237 == 0;
            }
            while (__stlxr(v237, (unint64_t *)v15));
            goto LABEL_431;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v189 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v189, (uint64_t)v388[0]);
            v388[0] = v189;
            *v189 = 1;
            do
            {
              v190 = __ldaxr((unint64_t *)v15);
              v113 = --v190 == 0;
            }
            while (__stlxr(v190, (unint64_t *)v15));
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v249 = operator new();
            v250 = v388[0];
            *(_QWORD *)v249 = *v388[0];
            *(_QWORD *)(v249 + 8) = v250[1];
            v251 = v250[2];
            *(_QWORD *)(v249 + 16) = v251;
            if (v251)
            {
              v252 = (unsigned int *)(v251 + 8);
              do
                v253 = __ldxr(v252);
              while (__stxr(v253 + 1, v252));
            }
            v254 = *(_OWORD *)(v250 + 3);
            v255 = *(_OWORD *)(v250 + 5);
            *(_OWORD *)(v249 + 56) = *(_OWORD *)(v250 + 7);
            *(_OWORD *)(v249 + 40) = v255;
            *(_OWORD *)(v249 + 24) = v254;
            v388[0] = (_QWORD *)v249;
            *(_QWORD *)v249 = 1;
            do
            {
              v256 = __ldaxr((unint64_t *)v15);
              v206 = --v256 == 0;
            }
            while (__stlxr(v256, (unint64_t *)v15));
LABEL_453:
            if (!v206)
              goto LABEL_457;
            v187 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v15 + 16));
            goto LABEL_456;
          case 9:
            if (*(_QWORD *)v15 != 1)
            {
              v155 = (_QWORD *)operator new();
              v156 = v388[0] + 1;
              *v155 = *v388[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v155 + 1, (uint64_t)v156);
              v388[0] = v155;
              *v155 = 1;
              do
              {
                v157 = __ldaxr((unint64_t *)v15);
                v158 = v157 - 1;
              }
              while (__stlxr(v158, (unint64_t *)v15));
              if (!v158)
              {
                v159 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
                v14 = MEMORY[0x219A19A08](v159, 0x1030C407B73B9F7);
              }
            }
            v160 = v388[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v72, &v376, *(unint64_t *)&v14);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v160 + 1), &v376);
            v161 = (void *)v160[3];
            if (v161)
            {
              v160[4] = v161;
              operator delete(v161);
              v160[3] = 0;
              v160[4] = 0;
              v160[5] = 0;
            }
            v162 = (void *)v160[6];
            *(_OWORD *)(v160 + 3) = v377;
            v160[5] = *(_QWORD *)v378;
            v377 = 0uLL;
            *(_QWORD *)v378 = 0;
            if (v162)
            {
              v160[7] = v162;
              operator delete(v162);
              v160[6] = 0;
              v160[7] = 0;
              v160[8] = 0;
            }
            *((_OWORD *)v160 + 3) = *(_OWORD *)&v378[8];
            v160[8] = *(_QWORD *)&v378[24];
            memset(&v378[8], 0, 24);
            v160[9] = v379;
            goto LABEL_564;
          default:
            goto LABEL_570;
        }
      case 9:
        v52 = *(char **)a2;
        v53 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v388[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_457;
          case 2:
            if (*(_QWORD *)v15 != 1)
            {
              v54 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v54, (uint64_t)v388[0]);
              v388[0] = v54;
              *v54 = 1;
              do
              {
                v55 = __ldaxr((unint64_t *)v15);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, (unint64_t *)v15));
              if (!v56)
              {
                if (*(char *)(v15 + 31) < 0)
                  operator delete(*(void **)(v15 + 8));
                MEMORY[0x219A19A08](v15, 0x1012C404EF22A49);
              }
            }
            v57 = v388[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v386, v53);
LABEL_507:
            v195 = (void **)(v57 + 1);
            if (*((char *)v57 + 31) < 0)
              operator delete(*v195);
            v196 = v376;
            v197 = (void *)v377;
LABEL_510:
            v195[2] = v197;
            *(_OWORD *)v195 = v196;
            goto LABEL_458;
          case 3:
            if (*(_QWORD *)v15 != 1)
            {
              v81 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v81, (uint64_t)v388[0]);
              v388[0] = v81;
              *v81 = 1;
              do
              {
                v82 = __ldaxr((unint64_t *)v15);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, (unint64_t *)v15));
              if (!v83)
              {
                v84 = *(void **)(v15 + 8);
                if (v84)
                {
                  *(_QWORD *)(v15 + 16) = v84;
                  operator delete(v84);
                }
                MEMORY[0x219A19A08](v15, 0x1080C409938AC02);
              }
            }
            v85 = (char *)(v388[0] + 1);
            if (*((_QWORD *)v52 + 9))
              goto LABEL_517;
            v87 = (uint64_t *)*((_QWORD *)v52 + 3);
            v86 = (uint64_t *)*((_QWORD *)v52 + 4);
            v88 = (_QWORD *)*((_QWORD *)v52 + 1);
            if (v86 == v87 || v88 == 0)
            {
              v336 = 0;
            }
            else
            {
              v336 = 1;
              do
              {
                v337 = *v87++;
                v336 *= v337;
              }
              while (v87 != v86);
            }
            if (v336 == (uint64_t)(v88[1] - *v88) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v53) == (uint64_t)(*(_QWORD *)(*v53 + 8)
                                                                                       - *(_QWORD *)*v53) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v53))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v77 = (char *)*v53;
              if (v85 != v77)
              {
                v118 = (uint64_t *)(v77 + 8);
LABEL_199:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v85, *(char **)v77, *v118, (*v118 - *(_QWORD *)v77) >> 3);
              }
            }
            else
            {
LABEL_517:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v53))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full(v53))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v376, (uint64_t)v53);
              }
              else
              {
                v386 = 0uLL;
                v387 = 0;
                v383 = 0;
                v384 = 0;
                v385 = 0;
                v380 = 0;
                v381 = 0;
                v382 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v376, (uint64_t)&v386, (uint64_t)&v383, (uint64_t)&v380, 0);
                if (v380)
                {
                  v381 = v380;
                  operator delete(v380);
                }
                if (v383)
                {
                  v384 = v383;
                  operator delete(v383);
                }
                if ((_QWORD)v386)
                {
                  *((_QWORD *)&v386 + 1) = v386;
                  operator delete((void *)v386);
                }
                v379 = 0;
                if (&v376 != (__int128 *)(v52 + 8))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v377, *((char **)v52 + 3), *((_QWORD *)v52 + 4), (uint64_t)(*((_QWORD *)v52 + 4) - *((_QWORD *)v52 + 3)) >> 3);
                v339 = (uint64_t *)*((_QWORD *)v52 + 3);
                v338 = (uint64_t *)*((_QWORD *)v52 + 4);
                if (v338 == v339 || !*v53)
                {
                  v340 = 0;
                }
                else
                {
                  v340 = 1;
                  do
                  {
                    v341 = *v339++;
                    v340 *= v341;
                  }
                  while (v339 != v338);
                }
                std::vector<double>::resize(v376, v340);
                std::vector<unsigned long>::resize((uint64_t)&v378[8], (uint64_t)(*((_QWORD *)v52 + 4) - *((_QWORD *)v52 + 3)) >> 3);
                if (*((_QWORD *)&v377 + 1) != (_QWORD)v377 && *(_QWORD *)(v376 + 8) != *(_QWORD *)v376)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v386, (uint64_t)(*((_QWORD *)v52 + 7) - *((_QWORD *)v52 + 6)) >> 3);
                  v342 = *((_QWORD *)v52 + 6);
                  v343 = *((_QWORD *)v52 + 7);
                  v344 = (unint64_t *)v386;
                  v345 = v343 - v342;
                  if (v343 != v342)
                  {
                    v346 = 0;
                    v347 = v345 >> 3;
                    if (v347 <= 1)
                      v347 = 1;
                    v348 = (_QWORD *)(v386 + 8);
                    do
                    {
                      *(v348 - 1) = *(_QWORD *)(v342 + 8 * v346);
                      *v348 = v346++;
                      v348 += 2;
                    }
                    while (v347 != v346);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v386 + 1), *((unint64_t **)&v386 + 1), (uint64_t)v344, v344);
                  v349 = v386;
                  v350 = *(_QWORD *)&v378[8];
                  *(_QWORD *)(*(_QWORD *)&v378[8] + 8 * *(_QWORD *)(v386 + 8)) = 1;
                  v351 = *((_QWORD *)v52 + 7) - *((_QWORD *)v52 + 6);
                  if ((unint64_t)v351 >= 9)
                  {
                    v352 = v351 >> 3;
                    v353 = v377;
                    if (v352 <= 2)
                      v352 = 2;
                    v354 = (uint64_t *)(v349 + 24);
                    v355 = v352 - 1;
                    do
                    {
                      v356 = *(_QWORD *)(v353 + 8 * *(v354 - 2)) * *(_QWORD *)(v350 + 8 * *(v354 - 2));
                      v357 = *v354;
                      v354 += 2;
                      *(_QWORD *)(v350 + 8 * v357) = v356;
                      --v355;
                    }
                    while (v355);
                  }
                  v358 = (uint64_t)(*((_QWORD *)v52 + 4) - *((_QWORD *)v52 + 3)) >> 3;
                  v380 = 0;
                  std::vector<unsigned long>::vector(&v383, v358, &v380);
                  do
                  {
                    v359 = v383;
                    if (v384 == v383)
                    {
                      v368 = 0;
                      v369 = *(_QWORD *)(**((_QWORD **)v52 + 1) + 8 * *((_QWORD *)v52 + 9));
                      v370 = (_QWORD *)v376;
                    }
                    else
                    {
                      v360 = 0;
                      v361 = v384 - v383;
                      v362 = (uint64_t *)*((_QWORD *)v52 + 6);
                      if (v361 <= 1)
                        v361 = 1;
                      v363 = v383;
                      v364 = v361;
                      do
                      {
                        v366 = (uint64_t)*v363++;
                        v365 = v366;
                        v367 = *v362++;
                        v360 += v367 * v365;
                        --v364;
                      }
                      while (v364);
                      v368 = 0;
                      v369 = *(_QWORD *)(**((_QWORD **)v52 + 1) + 8 * (*((_QWORD *)v52 + 9) + v360));
                      v370 = (_QWORD *)v376;
                      v371 = *(uint64_t **)&v378[8];
                      do
                      {
                        v373 = (uint64_t)*v359++;
                        v372 = v373;
                        v374 = *v371++;
                        v368 += v374 * v372;
                        --v361;
                      }
                      while (v361);
                    }
                    *(_QWORD *)(*v370 + 8 * v368) = v369;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v53, (uint64_t *)&v383));
                  if (v383)
                  {
                    v384 = v383;
                    operator delete(v383);
                  }
                  if ((_QWORD)v386)
                  {
                    *((_QWORD *)&v386 + 1) = v386;
                    operator delete((void *)v386);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v376);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v376))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v85 != (char *)v376)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v85, *(char **)v376, *(_QWORD *)(v376 + 8), (uint64_t)(*(_QWORD *)(v376 + 8) - *(_QWORD *)v376) >> 3);
LABEL_564:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v376);
            }
            goto LABEL_458;
          case 4:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v133 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v133, (uint64_t)v388[0]);
            v388[0] = v133;
            *v133 = 1;
            do
            {
              v134 = __ldaxr((unint64_t *)v15);
              v135 = --v134 == 0;
            }
            while (__stlxr(v134, (unint64_t *)v15));
LABEL_431:
            if (!v135)
              goto LABEL_457;
            v187 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v376 = v15 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
            break;
          case 5:
            if (*(_QWORD *)v15 == 1)
              goto LABEL_457;
            v111 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v111, (uint64_t)v388[0]);
            v388[0] = v111;
            *v111 = 1;
            do
            {
              v112 = __ldaxr((unint64_t *)v15);
              v113 = --v112 == 0;
            }
            while (__stlxr(v112, (unint64_t *)v15));
LABEL_444:
            if (!v113)
              goto LABEL_457;
            v187 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v376 = v15 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
            break;
          case 8:
            if (*(_QWORD *)v15 != 1)
            {
              v141 = operator new();
              v142 = v388[0];
              *(_QWORD *)v141 = *v388[0];
              *(_QWORD *)(v141 + 8) = v142[1];
              v143 = v142[2];
              *(_QWORD *)(v141 + 16) = v143;
              if (v143)
              {
                v144 = (unsigned int *)(v143 + 8);
                do
                  v145 = __ldxr(v144);
                while (__stxr(v145 + 1, v144));
              }
              v146 = *(_OWORD *)(v142 + 3);
              v147 = *(_OWORD *)(v142 + 5);
              *(_OWORD *)(v141 + 56) = *(_OWORD *)(v142 + 7);
              *(_OWORD *)(v141 + 40) = v147;
              *(_OWORD *)(v141 + 24) = v146;
              v388[0] = (_QWORD *)v141;
              *(_QWORD *)v141 = 1;
              do
              {
                v148 = __ldaxr((unint64_t *)v15);
                v149 = v148 - 1;
              }
              while (__stlxr(v149, (unint64_t *)v15));
              if (!v149)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v15 + 16));
                MEMORY[0x219A19A08](v15, 0x1030C40F1F0227BLL);
              }
            }
            v150 = v388[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v53, (turi::image_type *)&v376);
            v151 = v376;
            v376 = 0uLL;
            v152 = *(_OWORD *)(v150 + 1);
            *(_OWORD *)(v150 + 1) = v151;
            v386 = v152;
            boost::detail::shared_count::~shared_count((unsigned int **)&v386 + 1);
            v153 = v377;
            v154 = *(_OWORD *)v378;
            *(_OWORD *)(v150 + 7) = *(_OWORD *)&v378[16];
            *(_OWORD *)(v150 + 5) = v154;
            *(_OWORD *)(v150 + 3) = v153;
            boost::detail::shared_count::~shared_count((unsigned int **)&v376 + 1);
            goto LABEL_458;
          case 9:
            if (*(_QWORD *)v15 != 1)
            {
              v94 = (_QWORD *)operator new();
              v95 = v388[0] + 1;
              *v94 = *v388[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v94 + 1, (uint64_t)v95);
              v388[0] = v94;
              *v94 = 1;
              do
              {
                v96 = __ldaxr((unint64_t *)v15);
                v97 = v96 - 1;
              }
              while (__stlxr(v97, (unint64_t *)v15));
              if (!v97)
              {
                v98 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
                MEMORY[0x219A19A08](v98, 0x1030C407B73B9F7);
              }
            }
            v99 = (char *)v388[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v388[0] + 1, v53);
            if (v99 != v52)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v99 + 24, *((char **)v52 + 3), *((_QWORD *)v52 + 4), (uint64_t)(*((_QWORD *)v52 + 4) - *((_QWORD *)v52 + 3)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v99 + 48, *((char **)v52 + 6), *((_QWORD *)v52 + 7), (uint64_t)(*((_QWORD *)v52 + 7) - *((_QWORD *)v52 + 6)) >> 3);
            }
            *((_QWORD *)v99 + 9) = *((_QWORD *)v52 + 9);
            goto LABEL_458;
          default:
            goto LABEL_570;
        }
LABEL_456:
        MEMORY[0x219A19A08](v15, v187);
LABEL_457:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_570:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_458:
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node((uint64_t)v388, v17, a3, &v376);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 24, &v376);
  v304 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
  if (*((_QWORD *)&v376 + 1))
  {
    v305 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
  switch(BYTE4(v388[1]))
  {
    case 2:
      v307 = v388[0];
      do
      {
        v308 = __ldaxr(v307);
        v309 = v308 - 1;
      }
      while (__stlxr(v309, v307));
      if (!v309)
      {
        v310 = v388[0];
        if (v388[0])
        {
          if (*((char *)v388[0] + 31) < 0)
            operator delete(*((void **)v388[0] + 1));
          v311 = v310;
          v312 = 0x1012C404EF22A49;
          goto LABEL_504;
        }
      }
      break;
    case 3:
      v324 = v388[0];
      do
      {
        v325 = __ldaxr(v324);
        v326 = v325 - 1;
      }
      while (__stlxr(v326, v324));
      if (!v326)
      {
        v327 = v388[0];
        if (v388[0])
        {
          v328 = (void *)v388[0][1];
          if (v328)
          {
            v388[0][2] = v328;
            operator delete(v328);
          }
          v311 = v327;
          v312 = 0x1080C409938AC02;
          goto LABEL_504;
        }
      }
      break;
    case 4:
      v313 = v388[0];
      do
      {
        v314 = __ldaxr(v313);
        v315 = v314 - 1;
      }
      while (__stlxr(v315, v313));
      if (!v315)
      {
        v316 = v388[0];
        if (v388[0])
        {
          *(_QWORD *)&v376 = v388[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
          goto LABEL_497;
        }
      }
      break;
    case 5:
      v329 = v388[0];
      do
      {
        v330 = __ldaxr(v329);
        v331 = v330 - 1;
      }
      while (__stlxr(v331, v329));
      if (!v331)
      {
        v316 = v388[0];
        if (v388[0])
        {
          *(_QWORD *)&v376 = v388[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v376);
LABEL_497:
          v311 = v316;
          v312 = 0x1020C405E66F15BLL;
          goto LABEL_504;
        }
      }
      break;
    case 8:
      v332 = v388[0];
      do
      {
        v333 = __ldaxr(v332);
        v334 = v333 - 1;
      }
      while (__stlxr(v334, v332));
      if (!v334)
      {
        v335 = v388[0];
        if (v388[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v388[0] + 2);
          v311 = v335;
          v323 = -235920773;
          goto LABEL_503;
        }
      }
      break;
    case 9:
      v317 = v388[0];
      do
      {
        v318 = __ldaxr(v317);
        v319 = v318 - 1;
      }
      while (__stlxr(v319, v317));
      if (!v319)
      {
        v320 = v388[0];
        if (v388[0])
        {
          v321 = (void *)v388[0][6];
          if (v321)
          {
            v388[0][7] = v321;
            operator delete(v321);
          }
          v322 = (void *)v320[3];
          if (v322)
          {
            v320[4] = v322;
            operator delete(v322);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v320 + 1));
          v311 = v320;
          v323 = 2071181815;
LABEL_503:
          v312 = v323 | 0x1030C4000000000;
LABEL_504:
          MEMORY[0x219A19A08](v311, v312);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2181C53D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(_QWORD *)(v9 - 136) = v11;
    operator delete(v11);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  switch(*(_BYTE *)(v9 - 92))
  {
    case 2:
      v12 = *(unint64_t **)(v9 - 104);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
        goto LABEL_41;
      v15 = *(_QWORD *)(v9 - 104);
      if (!v15)
        goto LABEL_41;
      if (*(char *)(v15 + 31) < 0)
        operator delete(*(void **)(v15 + 8));
      v16 = (_QWORD *)v15;
      v17 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v27 = *(unint64_t **)(v9 - 104);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_41;
      v30 = *(_QWORD **)(v9 - 104);
      if (!v30)
        goto LABEL_41;
      v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = v31;
        operator delete(v31);
      }
      v16 = v30;
      v17 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v18 = *(unint64_t **)(v9 - 104);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (v20)
        goto LABEL_41;
      v21 = *(_QWORD **)(v9 - 104);
      if (!v21)
        goto LABEL_41;
      *(_QWORD *)(v9 - 112) = v21 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 112));
      goto LABEL_33;
    case 5:
      v32 = *(unint64_t **)(v9 - 104);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_41;
      v21 = *(_QWORD **)(v9 - 104);
      if (!v21)
        goto LABEL_41;
      *(_QWORD *)(v9 - 112) = v21 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 112));
LABEL_33:
      v16 = v21;
      v17 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v35 = *(unint64_t **)(v9 - 104);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_41;
      v38 = *(_QWORD *)(v9 - 104);
      if (!v38)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v38 + 16));
      v16 = (_QWORD *)v38;
      v26 = -235920773;
      goto LABEL_39;
    case 9:
      v22 = *(unint64_t **)(v9 - 104);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_41;
      v25 = *(_QWORD **)(v9 - 104);
      if (!v25)
        goto LABEL_41;
      v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v25);
      v26 = 2071181815;
LABEL_39:
      v17 = v26 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v16, v17);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  uint64_t i;
  uint64_t result;
  _QWORD *v11[3];
  const void **v12;
  _QWORD *v13[2];
  _BYTE v14[8];
  _QWORD *v15;
  int v16;
  void **v17;
  std::string v18;
  _QWORD v19[4];
  int v20;
  char v21;
  _QWORD v22[5];
  _QWORD v23[4];
  int v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(a1 + 12);
  if (v5 != a2 && v5 != 7)
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator()();
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type const&,0>(&v18, "value", a1);
  std::string::basic_string[abi:ne180100]<0>(v19, "type");
  v21 = 0;
  v20 = 0;
  v19[3] = a2;
  std::string::basic_string[abi:ne180100]<0>(v22, "begin_index");
  memset(&v22[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v23, "end_index");
  v25 = 0;
  v24 = 0;
  v23[3] = a3;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v14, &v18, 4);
  v13[0] = 0;
  v13[1] = 0;
  v12 = (const void **)v13;
  memset(v11, 0, sizeof(v11));
  v16 = 0;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v16, (uint64_t)v14, &v12, v11, a4);
  v17 = (void **)v11;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v12, v13[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v14, v15);
  for (i = 120; i != -40; i -= 40)
    result = std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v18 + i);
  return result;
}

void sub_2181C5970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, uint64_t a20,void **a21,char a22)
{
  uint64_t i;

  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a13, a14);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(&a22 + i));
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sarray::construct_from_planner_node(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int *v21;
  file_logger *v22;
  file_logger *started;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *result;
  uint64_t v39;
  _QWORD *exception;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  void **v48;
  _OWORD v49[2];
  __int128 v50;
  void *__p[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE v55[24];
  _BYTE v56[11];
  char v57;
  void *v58;
  char v59;
  _QWORD v60[4];

  v60[3] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v54 = 0;
  *(_QWORD *)v56 = 0;
  *(_DWORD *)&v56[7] = 0x10000;
  v57 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v58, "");
  memset(v60, 0, 24);
  v4 = a2[1];
  v45 = *a2;
  v46 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  turi::query_eval::optimization_engine::optimize_planner_graph(&v45, (uint64_t)&v54, &v47);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(a1 + 3), &v47);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)a1[4];
  v43 = a1[3];
  v44 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = turi::query_eval::planner::online_materialization_recommended((uint64_t)&v47, &v43);
  v17 = v16;
  v18 = v44;
  if (!v44)
    goto LABEL_21;
  v19 = (unint64_t *)&v44->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v17)
      goto LABEL_52;
  }
  else
  {
LABEL_21:
    if (!v16)
      goto LABEL_52;
  }
  v21 = (int *)global_logger();
  if (v21[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v21))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v22 = (file_logger *)global_logger();
    started = file_logger::start_stream(v22, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_planner_node", 138, 1);
    v24 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v24 && *((_BYTE *)v24 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Forced materialization of SArray due to size of lazy graph: ", 60);
    v25 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v25)
    {
      if (*((_BYTE *)v25 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(v25[2] - 24) + 16));
        v26 = std::locale::use_facet((const std::locale *)&v47, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
        std::locale::~locale((std::locale *)&v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v27 = (std::__shared_weak_count *)a1[4];
  v41 = a1[3];
  v42 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v49, 0, sizeof(v49));
  BYTE11(v50) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v52 + 1) = 0;
  v53 = 0uLL;
  turi::query_eval::planner::materialize_as_planner_node(&v41, (uint64_t *)v49, &v47);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(a1 + 3), &v47);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v48 = (void **)&v52 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v48);
  if (SBYTE7(v52) < 0)
    operator delete(__p[0]);
  v33 = (_QWORD *)v50;
  if ((_OWORD *)v50 == (_OWORD *)((char *)v49 + 8))
  {
    v34 = 4;
    v33 = (_QWORD *)v49 + 1;
    goto LABEL_46;
  }
  if ((_QWORD)v50)
  {
    v34 = 5;
LABEL_46:
    (*(void (**)(_QWORD *))(*v33 + 8 * v34))(v33);
  }
  v35 = v42;
  if (v42)
  {
    v36 = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_52:
  *(_QWORD *)&v47 = v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (v59 < 0)
    operator delete(v58);
  result = *(_QWORD **)v56;
  if (*(_BYTE **)v56 == v55)
  {
    v39 = 4;
    result = v55;
  }
  else
  {
    if (!*(_QWORD *)v56)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v39))(result);
}

void sub_2181C5E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  std::locale::~locale(&a16);
  turi::query_eval::materialize_options::~materialize_options((void **)(v23 - 168));
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_sarray_index(uint64_t a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  int v11;
  _BOOL4 is_web_protocol;
  size_t v13;
  void **v14;
  const void *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  int data;
  int v29;
  BOOL v31;
  size_t size;
  void **v33;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *exception;
  uint64_t v44[2];
  void *v45[2];
  char v46;
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  void *v50[2];
  char v51;
  std::string v52;
  std::string v53;
  uint64_t v54[2];
  void *__p[2];
  char v56;
  std::string v57;
  int v58;
  void *v59;
  uint64_t v60;
  char v61;
  std::string v62;
  __n128 v63;
  char v64;
  std::locale v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_sarray_index", 144, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Construct sarray from location: ", 32);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v62 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v62, &v63);
    v8 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v63);
    v9 = pthread_getspecific(*(_QWORD *)(v8 + 592));
    if (v9)
    {
      if (*((_BYTE *)v9 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(v9[2] - 24) + 16));
        v10 = std::locale::use_facet(&v65, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v65);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v8);
        if (*(_DWORD *)(v8 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v64 < 0)
      operator delete((void *)v63.n128_u64[0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v58);
  v11 = v58;
  if (v58 != 3 && v58)
  {
    is_web_protocol = 0;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v57 = *(std::string *)a2;
    is_web_protocol = turi::fileio::is_web_protocol((uint64_t)&v57);
  }
  if ((v11 == 3 || !v11) && SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if (is_web_protocol)
    {
LABEL_27:
      if (*(char *)(a2 + 23) >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      v14 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 16);
      if (v56 < 0)
        v14 = (void **)__p[0];
      if (v13)
      {
        if (*(char *)(a2 + 23) >= 0)
          v15 = (const void *)a2;
        else
          v15 = *(const void **)a2;
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, "/dir_archive.ini");
      v16 = turi::fileio::try_to_open_file((uint64_t)__p);
      v17 = v16;
      if (v56 < 0)
      {
        operator delete(__p[0]);
        if (v17)
          goto LABEL_39;
      }
      else if (v16)
      {
LABEL_39:
        v18 = 2;
        goto LABEL_44;
      }
      v18 = 1;
LABEL_44:
      v58 = v18;
      if (v61 < 0)
      {
        *(_BYTE *)v59 = 0;
        v60 = 0;
      }
      else
      {
        LOBYTE(v59) = 0;
        v61 = 0;
      }
    }
  }
  else if (is_web_protocol)
  {
    goto LABEL_27;
  }
  switch(v58)
  {
    case 0:
      v65.__locale_ = (std::locale::__imp *)a2;
      v66 = (std::__shared_weak_count *)&v58;
      turi::unity_sarray::construct_from_sarray_index(std::string)::$_0::operator()();
    case 1:
      std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string &,void>(a2, &v65);
      v19 = v66;
      v54[0] = (uint64_t)v65.__locale_;
      v54[1] = (uint64_t)v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      turi::unity_sarray::construct_from_sarray(a1, v54);
      if (v19)
      {
        v22 = (unint64_t *)&v19->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v24 = v66;
      if (v66)
      {
        v25 = (unint64_t *)&v66->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      goto LABEL_112;
    case 2:
      v65.__locale_ = (std::locale::__imp *)-1;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = v70;
      v70[0] = 0;
      v70[1] = 0;
      v75 = 0;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v53 = *(std::string *)a2;
      turi::dir_archive::open_directory_for_read((uint64_t)&v65, (uint64_t)&v53);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      memset(&v52, 0, sizeof(v52));
      std::string::basic_string[abi:ne180100]<0>(v50, "contents");
      if (!turi::dir_archive::get_metadata((uint64_t)&v65, (uint64_t)v50, &v52))
      {
        turi::unity_sarray::construct_from_sarray_index((uint64_t)v50);
        goto LABEL_119;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v52.__r_.__value_.__l.__size_ == 6)
        {
          v27 = (std::string *)v52.__r_.__value_.__r.__words[0];
          goto LABEL_72;
        }
LABEL_78:
        v31 = 1;
        goto LABEL_79;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_78;
      v27 = &v52;
LABEL_72:
      data = (int)v27->__r_.__value_.__l.__data_;
      v29 = WORD2(v27->__r_.__value_.__r.__words[0]);
      v31 = data != 1920098675 || v29 != 31073;
LABEL_79:
      if (v51 < 0)
        operator delete(v50[0]);
      if (v31)
LABEL_119:
        turi::unity_sarray::construct_from_sarray_index(std::string)::$_1::operator()();
      turi::dir_archive::get_next_read_prefix((turi::dir_archive *)&v65, &v49);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      else
        size = v49.__r_.__value_.__l.__size_;
      v33 = v45;
      std::string::basic_string[abi:ne180100]((uint64_t)v45, size + 5);
      if (v46 < 0)
        v33 = (void **)v45[0];
      if (size)
      {
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v49;
        else
          v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
        memmove(v33, v34, size);
      }
      strcpy((char *)v33 + size, ".sidx");
      std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string,void>((uint64_t)v45, &v47);
      if (v46 < 0)
        operator delete(v45[0]);
      v35 = (std::__shared_weak_count *)v48;
      v44[0] = v47;
      v44[1] = v48;
      if (v48)
      {
        v36 = (unint64_t *)(v48 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      turi::unity_sarray::construct_from_sarray(a1, v44);
      if (v35)
      {
        v38 = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      turi::dir_archive::close((turi::dir_archive *)&v65);
      v40 = (std::__shared_weak_count *)v48;
      if (v48)
      {
        v41 = (unint64_t *)(v48 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      turi::dir_archive::~dir_archive((turi::dir_archive *)&v65);
LABEL_112:
      if (v61 < 0)
        operator delete(v59);
      return;
    case 3:
      v65.__locale_ = (std::locale::__imp *)&v58;
      turi::unity_sarray::construct_from_sarray_index(std::string)::$_2::operator()();
    default:
      goto LABEL_112;
  }
}

void sub_2181C65F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  turi::dir_archive::~dir_archive((turi::dir_archive *)(v43 - 208));
  if (a43 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_files(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int *v12;
  file_logger *v13;
  file_logger *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  char *v19;
  _QWORD *v20;
  size_t v21;
  size_t v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *exception;
  _QWORD *v34;
  uint64_t v35[2];
  _QWORD v36[3];
  uint64_t *v37[3];
  _BYTE v38[8];
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  std::string v42;
  __n128 __p;
  char v44;
  uint64_t v45[3];
  void **v46;
  void *v47[2];
  char v48;
  char v49;
  std::locale v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  turi::fileio::get_glob_files(a2, v45);
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_51;
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_files", 201, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v50);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (int *)global_logger();
  if (v12[169] > 2)
    goto LABEL_35;
  if (cppipc::must_cancel((cppipc *)v12))
LABEL_51:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v13 = (file_logger *)global_logger();
  v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_files", 202, 1);
  v15 = pthread_getspecific(*((_QWORD *)v14 + 74));
  if (v15 && *((_BYTE *)v15 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Construct sarray from url: ", 27);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v42 = *(std::string *)a2;
  turi::sanitize_url((__n128 *)&v42, &__p);
  v16 = file_logger::operator<<<std::string>((uint64_t)v14, (uint64_t)&__p);
  v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v17 && *((_BYTE *)v17 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)" type: ", 7);
  if (a3 > 9)
    v18 = "undefined";
  else
    v18 = off_24D933760[a3];
  v19 = (char *)pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v19)
  {
    if (v19[280])
    {
      v20 = v19 + 16;
      v21 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v18, v21);
      v22 = strlen(v18);
      if (v22)
      {
        if (v18[v22 - 1] == 10)
          file_logger::stream_flush((file_logger *)v16);
      }
    }
  }
  v23 = pthread_getspecific(*(_QWORD *)(v16 + 592));
  if (v23)
  {
    if (*((_BYTE *)v23 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(v23[2] - 24) + 16));
      v24 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale(&v50);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v16);
      if (*(_DWORD *)(v16 + 600) == 7)
      {
        __print_back_trace();
        v34 = __cxa_allocate_exception(8uLL);
        *v34 = "LOG_FATAL encountered";
        __cxa_throw(v34, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (v44 < 0)
    operator delete((void *)__p.n128_u64[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
LABEL_35:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  turi::csv_line_tokenizer::csv_line_tokenizer((turi::csv_line_tokenizer *)&v40);
  MEMORY[0x219A19390](&v41, "\n");
  turi::csv_line_tokenizer::init((turi::csv_line_tokenizer *)&v40);
  turi::sframe::sframe((turi::sframe *)&v50);
  std::string::basic_string[abi:ne180100]<0>(v47, "X1");
  v49 = a3;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)v37, (const void **)v47, 1);
  memset(v36, 0, sizeof(v36));
  turi::sframe::init_from_csvs(&v50, a2, (unsigned __int8 *)&v40, 0, 0, 0, v37, (uint64_t)v36, (uint64_t)v38, 0, 0);
  std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy((uint64_t)v38, v39);
  v46 = (void **)v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v46);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v37, (char *)v37[1]);
  if (v48 < 0)
    operator delete(v47[0]);
  turi::sframe::select_column((uint64_t)&v50, 0, v47);
  v25 = (std::__shared_weak_count *)v47[1];
  v35[0] = (uint64_t)v47[0];
  v35[1] = (uint64_t)v47[1];
  if (v47[1])
  {
    v26 = (unint64_t *)((char *)v47[1] + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  turi::unity_sarray::construct_from_sarray(a1, v35);
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v30 = (std::__shared_weak_count *)v47[1];
  if (v47[1])
  {
    v31 = (unint64_t *)((char *)v47[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  turi::sframe::~sframe((turi::sframe *)&v50);
  turi::csv_line_tokenizer::~csv_line_tokenizer(&v40);
  v50.__locale_ = (std::locale::__imp *)v45;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
}

void sub_2181C6C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *__p;
  char a70;
  char a71;

  std::locale::~locale((std::locale *)&STACK[0x200]);
  if (a70 < 0)
    operator delete(__p);
  if (a64 < 0)
    operator delete(a59);
  a23 = (uint64_t)&a71;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_json_record_files(uint64_t a1, uint64_t a2)
{
  char *i;
  char *v5;
  __int128 v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  int *v14;
  file_logger *v15;
  file_logger *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v36;
  BOOL v37;
  BOOL v38;
  char v39;
  BOOL v40;
  int *v41;
  file_logger *v42;
  file_logger *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  const char *v72;
  _QWORD *exception;
  _QWORD *v74;
  _QWORD *v75;
  size_t v76;
  _QWORD *v77;
  _QWORD *v78;
  const char *v79;
  _QWORD *v80;
  __n128 *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  size_t v87;
  _QWORD *v88;
  uint64_t v89[2];
  std::string v90;
  __n128 v91;
  char v92;
  std::string v93;
  __n128 v94;
  char v95;
  std::string v96;
  __n128 v97;
  unsigned __int8 v98;
  std::locale v99;
  char *v100[33];
  char *begin;
  std::string v102;
  __n128 v103;
  char v104;
  std::string v105;
  std::string v106;
  __n128 v107;
  char v108;
  std::string v109;
  int v110;
  void *v111[2];
  char v112;
  char v113[8];
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  uint64_t v117;
  std::string v118[8];
  void *v119;
  char v120;
  void *v121;
  void *__p;
  char v123;
  char v124;
  char v125;
  char *v126;
  char *v127;
  char v128;
  std::vector<char> v129;
  _QWORD v130[3];
  _QWORD *v131;
  _BYTE v132[24];
  _BYTE *v133;
  _BYTE v134[24];
  _BYTE *v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v116);
  turi::sarray<turi::flexible_type>::open_for_write(v116, 1, 0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v130, v116, 0);
  std::string::basic_string[abi:ne180100]<0>(v111, ",");
  std::string::basic_string[abi:ne180100]<0>(&v129, "null");
  std::unordered_set<std::string>::unordered_set((uint64_t)v118, (unsigned __int8 *)&v129, 1);
  std::string::basic_string[abi:ne180100]<0>(&v126, "true");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v99, (unsigned __int8 *)&v126, 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "false");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v109, (unsigned __int8 *)&__p, 1);
  turi::flexible_type_parser::flexible_type_parser(v113, v111, 1, 92, v118, &v99, &v109, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v109);
  if (v125 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v99);
  if (v128 < 0)
    operator delete(v126);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v118);
  if (SHIBYTE(v129.__end_cap_.__value_) < 0)
    operator delete(v129.__begin_);
  if (v112 < 0)
    operator delete(v111[0]);
  memset(&v129, 0, sizeof(v129));
  turi::fileio::get_glob_files(a2, (uint64_t *)&v126);
  v5 = v126;
  for (i = v127; v5 != i; v5 += 32)
  {
    if (v5[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v6 = *(_OWORD *)v5;
      v109.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v6;
    }
    v110 = *((_DWORD *)v5 + 6);
    switch(v110)
    {
      case 0:
        v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
        turi::unity_sarray::construct_from_json_record_files(std::string)::$_3::operator()();
      case 1:
        v7 = (int *)global_logger();
        if (v7[169] <= 4)
        {
          if (cppipc::must_cancel((cppipc *)v7))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v8 = (file_logger *)global_logger();
          started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_json_record_files", 243, 1);
          v10 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v10 && *((_BYTE *)v10 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Parsing JSON records from ", 26);
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v106, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
          else
            v106 = v109;
          turi::sanitize_url((__n128 *)&v106, &v107);
          v11 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v107);
          v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
          if (v12)
          {
            if (*((_BYTE *)v12 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
              v13 = std::locale::use_facet((const std::locale *)v118, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
              std::locale::~locale((std::locale *)v118);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v11);
              if (*(_DWORD *)(v11 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (v108 < 0)
            operator delete((void *)v107.n128_u64[0]);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v105, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
        else
          v105 = v109;
        turi::general_ifstream::general_ifstream(v118, (uint64_t)&v105);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (*(_DWORD *)((char *)&v118[1].__r_.__value_.__r.__words[1]
                       + *(_QWORD *)(v118[0].__r_.__value_.__r.__words[0] - 24)))
        {
          v14 = (int *)global_logger();
          if (v14[169] <= 4)
          {
            if (cppipc::must_cancel((cppipc *)v14))
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            v15 = (file_logger *)global_logger();
            v16 = file_logger::start_stream(v15, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_json_record_files", 323, 1);
            v17 = pthread_getspecific(*((_QWORD *)v16 + 74));
            if (v17 && *((_BYTE *)v17 + 280))
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Unable to read ", 15);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v90, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
            else
              v90 = v109;
            turi::sanitize_url((__n128 *)&v90, &v91);
            v25 = file_logger::operator<<<std::string>((uint64_t)v16, (uint64_t)&v91);
            v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
            if (v26)
            {
              if (*((_BYTE *)v26 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v26[2] - 24) + 16));
                v27 = std::locale::use_facet(&v99, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
                std::locale::~locale(&v99);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v25);
                if (*(_DWORD *)(v25 + 600) == 7)
                {
                  __print_back_trace();
                  v75 = __cxa_allocate_exception(8uLL);
                  *v75 = "LOG_FATAL encountered";
                  __cxa_throw(v75, MEMORY[0x24BEDB718], 0);
                }
              }
            }
            if (v92 < 0)
              operator delete((void *)v91.n128_u64[0]);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v18 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v118);
          v19 = v18;
          if (v18 == -1)
          {
            v21 = (int *)global_logger();
            if (v21[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v21))
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              v22 = (file_logger *)global_logger();
              v23 = file_logger::start_stream(v22, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_json_record_files", 254, 1);
              v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
              if (v24 && *((_BYTE *)v24 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Unable to read ", 15);
              if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v102, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
              else
                v102 = v109;
              turi::sanitize_url((__n128 *)&v102, &v103);
              v47 = file_logger::operator<<<std::string>((uint64_t)v23, (uint64_t)&v103);
              v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
              if (v48)
              {
                if (*((_BYTE *)v48 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(v48[2] - 24) + 16));
                  v49 = std::locale::use_facet(&v99, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
                  std::locale::~locale(&v99);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v47);
                  if (*(_DWORD *)(v47 + 600) == 7)
                  {
                    __print_back_trace();
                    v80 = __cxa_allocate_exception(8uLL);
                    *v80 = "LOG_FATAL encountered";
                    __cxa_throw(v80, MEMORY[0x24BEDB718], 0);
                  }
                }
              }
              if (v104 < 0)
                operator delete((void *)v103.n128_u64[0]);
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
            }
          }
          else if (v18)
          {
            v20 = turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v118);
            if (v20 <= v129.__end_ - v129.__begin_)
            {
              if (v20 < v129.__end_ - v129.__begin_)
                v129.__end_ = &v129.__begin_[v20];
            }
            else
            {
              std::vector<char>::__append(&v129, v20 - (v129.__end_ - v129.__begin_));
            }
            std::vector<char>::shrink_to_fit(&v129);
            std::istream::read();
            begin = v129.__begin_;
            turi::flexible_type_parser::recursive_parse((turi::flexible_type_parser *)v113, (const char **)&begin, v19, (_QWORD **)&__p);
            if (!v124 || v123 != 4)
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v99);
              v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Unable to parse ", 16);
              if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v96, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
              else
                v96 = v109;
              turi::sanitize_url((__n128 *)&v96, &v97);
              if ((v98 & 0x80u) == 0)
                v81 = &v97;
              else
                v81 = (__n128 *)v97.n128_u64[0];
              if ((v98 & 0x80u) == 0)
                v82 = v98;
              else
                v82 = v97.n128_i64[1];
              v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v81, v82);
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)". ", 2);
              v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"It does not appear to be in JSON record format. ", 48);
              v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"A list of dictionaries is expected", 34);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v86);
              turi::unity_sarray::construct_from_json_record_files((char *)&v98, (uint64_t)&v96, (void **)&v97);
              v97.n128_u64[0] = (unint64_t)&v99;
              turi::unity_sarray::construct_from_json_record_files(std::string)::$_0::operator()();
            }
            v28 = __p;
            v29 = *((_QWORD *)__p + 1);
            if (v29 != *((_QWORD *)__p + 2))
            {
              LOBYTE(v30) = *(_BYTE *)(v29 + 12);
              turi::sarray<turi::flexible_type>::set_type(v116, (char)v30);
              v31 = v28[1];
              if (v31 != v28[2])
              {
                v32 = 0;
                v30 = v30;
                v33 = -v31;
                do
                {
                  v34 = *(unsigned __int8 *)(v31 + 12);
                  if (v34 != 7 && v30 == 7)
                    v36 = *(unsigned __int8 *)(v31 + 12);
                  else
                    v36 = v30;
                  if ((_BYTE)v36)
                    v37 = 0;
                  else
                    v37 = v34 == 1;
                  if (v37)
                    v30 = 1;
                  else
                    v30 = v36;
                  if (*(_BYTE *)(v31 + 12))
                    v38 = 0;
                  else
                    v38 = v30 == 1;
                  v39 = v38;
                  v40 = v34 == v30 || v34 == 7;
                  if (!v40 && (v39 & 1) == 0)
                  {
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v99);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"sequence item ", 14);
                    v70 = (_QWORD *)std::ostream::operator<<();
                    v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)": expected ", 11);
                    if (v30 > 9u)
                      v72 = "undefined";
                    else
                      v72 = off_24D933760[(char)v30];
                    v76 = strlen(v72);
                    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v76);
                    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)", but get ", 10);
                    if ((char)v34 > 9)
                      v79 = "undefined";
                    else
                      v79 = off_24D933760[(char)v34];
                    v87 = strlen(v79);
                    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v87);
                    std::endl[abi:ne180100]<char,std::char_traits<char>>(v88);
                    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
                    v97.n128_u64[0] = (unint64_t)&v99;
                    turi::unity_sarray::construct_from_json_record_files(std::string)::$_1::operator()();
                  }
                  if (!v131)
                    std::__throw_bad_function_call[abi:ne180100]();
                  (*(void (**)(_QWORD *, uint64_t))(*v131 + 48))(v131, v31);
                  turi::sarray<turi::flexible_type>::set_type(v116, (char)v30);
                  ++v32;
                  v31 += 16;
                  v33 -= 16;
                }
                while (v31 != v28[2]);
              }
            }
            v41 = (int *)global_logger();
            if (v41[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v41))
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              v42 = (file_logger *)global_logger();
              v43 = file_logger::start_stream(v42, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "construct_from_json_record_files", 319, 1);
              v44 = pthread_getspecific(*((_QWORD *)v43 + 74));
              if (v44 && *((_BYTE *)v44 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)"Successfully parsed ", 20);
              v45 = file_logger::operator<<<unsigned long>((uint64_t)v43);
              v46 = pthread_getspecific(*(_QWORD *)(v45 + 592));
              if (v46 && *((_BYTE *)v46 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" elements from the JSON file ", 29);
              if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v93, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
              else
                v93 = v109;
              turi::sanitize_url((__n128 *)&v93, &v94);
              file_logger::operator<<<std::string>(v45, (uint64_t)&v94);
              if (v95 < 0)
                operator delete((void *)v94.n128_u64[0]);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v93.__r_.__value_.__l.__data_);
            }
            std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__p);
          }
        }
        v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
        v121 = &unk_24D91DA80;
        if (v120 < 0)
          operator delete(v119);
        std::istream::~istream();
        boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v118[0].__r_.__value_.__r.__words[2]);
        MEMORY[0x219A198F4](&v121);
        break;
      case 2:
        v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
        turi::unity_sarray::construct_from_json_record_files(std::string)::$_2::operator()();
      case 3:
        v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v109;
        turi::unity_sarray::construct_from_json_record_files(std::string)::$_4::operator()();
      default:
        break;
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
  v50 = (std::__shared_weak_count *)v117;
  v89[0] = v116;
  v89[1] = v117;
  if (v117)
  {
    v51 = (unint64_t *)(v117 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  turi::unity_sarray::construct_from_sarray(a1, v89);
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v118);
  if (v129.__begin_)
  {
    v129.__end_ = v129.__begin_;
    operator delete(v129.__begin_);
  }
  v55 = v115;
  if (v115)
  {
    v56 = (unint64_t *)&v115->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v114;
  if (v114)
  {
    v59 = (unint64_t *)&v114->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v135;
  if (v135 == v134)
  {
    v62 = 4;
    v61 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_149;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_149:
  v63 = v133;
  if (v133 == v132)
  {
    v64 = 4;
    v63 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_154;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_154:
  v65 = v131;
  if (v131 == v130)
  {
    v66 = 4;
    v65 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_159;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_159:
  v67 = (std::__shared_weak_count *)v117;
  if (v117)
  {
    v68 = (unint64_t *)(v117 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_2181C7B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,std::locale a33)
{
  uint64_t v33;
  void *v35;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&STACK[0x448]);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  STACK[0x260] = v33 - 240;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  v35 = *(void **)(v33 - 216);
  if (v35)
  {
    *(_QWORD *)(v33 - 208) = v35;
    operator delete(v35);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v33 - 192));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::construct_from_autodetect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL4 is_web_protocol;
  size_t v10;
  void **v11;
  const void *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  size_t v16;
  void **v17;
  const void *v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  std::string *v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  void *__p[2];
  char v37;
  std::string v38;
  void *v39[2];
  char v40;
  std::string __s;
  void *v42[2];
  char v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  turi::fileio::get_file_status(a2, (uint64_t)&v44);
  v6 = v44;
  if (v44 == 3 || v44 == 0)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __s = *(std::string *)a2;
    turi::fileio::get_protocol(&__s, (std::string::size_type)v42);
    is_web_protocol = turi::fileio::is_web_protocol((uint64_t)v42);
  }
  else
  {
    is_web_protocol = 0;
  }
  if (v6 != 3 && v6 != 0)
    goto LABEL_20;
  if (v43 < 0)
    operator delete(v42[0]);
  if ((v6 == 3 || !v6) && SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (!is_web_protocol)
      goto LABEL_40;
  }
  else
  {
LABEL_20:
    if (!is_web_protocol)
      goto LABEL_40;
  }
  if (*(char *)(a2 + 23) >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = v39;
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v10 + 16);
  if (v40 < 0)
    v11 = (void **)v39[0];
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = (const void *)a2;
    else
      v12 = *(const void **)a2;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/dir_archive.ini");
  v13 = turi::fileio::try_to_open_file((uint64_t)v39);
  v14 = v13;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v14)
      goto LABEL_33;
  }
  else if (v13)
  {
LABEL_33:
    v15 = 2;
    goto LABEL_36;
  }
  v15 = 1;
LABEL_36:
  v44 = v15;
  if (v47 < 0)
  {
    *v45 = 0;
    v46 = 0;
  }
  else
  {
    LOBYTE(v45) = 0;
    v47 = 0;
  }
LABEL_40:
  switch(v44)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v38 = *(std::string *)a2;
      (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v38, a3);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_91;
      v31 = &v38;
      goto LABEL_90;
    case 1:
      v21 = 0;
      v22 = *(char *)(a2 + 23);
      v23 = *(const std::string::value_type **)a2;
      v24 = *(_QWORD *)(a2 + 8);
      if (v22 >= 0)
        v25 = a2;
      else
        v25 = *(_QWORD *)a2;
      v26 = *(unsigned __int8 *)(a2 + 23);
      if (v22 < 0)
        v26 = *(_QWORD *)(a2 + 8);
      v27 = v26 + v25 - 1;
      v28 = -v26;
      break;
    case 2:
      if (*(char *)(a2 + 23) >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      v17 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 16);
      if (v37 < 0)
        v17 = (void **)__p[0];
      if (v16)
      {
        if (*(char *)(a2 + 23) >= 0)
          v18 = (const void *)a2;
        else
          v18 = *(const void **)a2;
        memmove(v17, v18, v16);
      }
      strcpy((char *)v17 + v16, "/dir_archive.ini");
      v19 = turi::fileio::try_to_open_file((uint64_t)__p);
      if (v37 < 0)
        operator delete(__p[0]);
      v20 = *(char *)(a2 + 23);
      if (v19)
      {
        if (v20 < 0)
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v35 = *(std::string *)a2;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 48))(a1, &v35);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = &v35;
          goto LABEL_90;
        }
      }
      else
      {
        if (v20 < 0)
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v34 = *(std::string *)a2;
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v34, a3);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = &v34;
          goto LABEL_90;
        }
      }
      goto LABEL_91;
    case 3:
      turi::unity_sarray::construct_from_autodetect(std::string,turi::flex_type_enum)::$_0::operator()();
    default:
      goto LABEL_91;
  }
  while (v28 != v21 && v21 != -5)
  {
    v29 = *(unsigned __int8 *)(v27 + v21);
    v30 = aSidx[v21-- + 4];
    if (v29 != v30)
      goto LABEL_69;
  }
  if (v21 == -5)
  {
    if (v22 < 0)
      std::string::__init_copy_ctor_external(&v33, v23, v24);
    else
      v33 = *(std::string *)a2;
    (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1 + 48))(a1, &v33, v24);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = &v33;
      goto LABEL_90;
    }
  }
  else
  {
LABEL_69:
    if (v22 < 0)
      std::string::__init_copy_ctor_external(&v32, v23, v24);
    else
      v32 = *(std::string *)a2;
    (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 56))(a1, &v32, a3);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = &v32;
LABEL_90:
      operator delete(v31->__r_.__value_.__l.__data_);
    }
  }
LABEL_91:
  if (v47 < 0)
    operator delete(v45);
}

void sub_2181C82F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 65) < 0)
    operator delete(*(void **)(v49 - 88));
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::save_array(turi::unity_sarray *a1, uint64_t a2)
{
  size_t v3;
  void **v4;
  void **v5;
  void *v6[2];
  char v7;
  void *v8[2];
  unsigned __int8 v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;
  _QWORD v15[5];
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 3))
    turi::unity_sarray::save_array(std::string)::$_0::operator()();
  v15[0] = -1;
  memset(&v15[1], 0, 24);
  v15[4] = v16;
  v16[0] = 0;
  v16[1] = 0;
  v21 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  turi::dir_archive::open_directory_for_write((uint64_t)v15, (uint64_t)&v14, 0);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v12, "contents");
  std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
  turi::dir_archive::set_metadata((uint64_t)v15, (uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  turi::dir_archive::get_next_write_prefix((turi::dir_archive *)v15, (unsigned __int8 *)v8);
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = (size_t)v8[1];
  v4 = v6;
  std::string::basic_string[abi:ne180100]((uint64_t)v6, v3 + 5);
  if (v7 < 0)
    v4 = (void **)v6[0];
  if (v3)
  {
    if ((v9 & 0x80u) == 0)
      v5 = v8;
    else
      v5 = (void **)v8[0];
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".sidx");
  turi::unity_sarray::save_array_by_index_file(a1, (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  turi::dir_archive::close((turi::dir_archive *)v15);
  if ((char)v9 < 0)
    operator delete(v8[0]);
  turi::dir_archive::~dir_archive((turi::dir_archive *)v15);
}

void sub_2181C85C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  turi::dir_archive::~dir_archive((turi::dir_archive *)&a40);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::save_array_by_index_file(turi::unity_sarray *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::string __p;
  __int128 v8;

  turi::unity_sarray::get_underlying_sarray(a1, &v8);
  v3 = v8;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::sarray<turi::flexible_type>::save(v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2181C86F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::get_underlying_sarray(turi::unity_sarray *this@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *exception;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void **v21;
  _OWORD v22[2];
  __int128 v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  std::locale v27;
  void **v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "get_underlying_sarray", 440, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v27, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v19 = *((_QWORD *)this + 3);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v22, 0, sizeof(v22));
  BYTE11(v23) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v25 + 1) = 0;
  v26 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v19, (uint64_t)v22, (const turi::sframe *)&v27);
  v21 = (void **)&v25 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  v13 = (_QWORD *)v23;
  if ((_OWORD *)v23 == (_OWORD *)((char *)v22 + 8))
  {
    v14 = 4;
    v13 = (_QWORD *)v22 + 1;
    goto LABEL_18;
  }
  if ((_QWORD)v23)
  {
    v14 = 5;
LABEL_18:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v21 = v28;
  if (v28 != (void **)1)
    turi::unity_sarray::get_underlying_sarray(void)::$_0::operator()();
  turi::sframe::select_column((uint64_t)&v27, 0, a2);
  turi::sframe::~sframe((turi::sframe *)&v27);
}

void sub_2181C89D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  std::locale::~locale(&a25);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::clear(turi::unity_sarray *this)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  __int128 v21;

  {
    turi::mutex::mutex(&turi::get_empty_sarray(void)::static_sa_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::get_empty_sarray(void)::static_sa_lock, &dword_217E69000);
  }
  pthread_mutex_lock(&turi::get_empty_sarray(void)::static_sa_lock);
  v3 = (uint64_t *)turi::get_empty_sarray(void)::empty_sarray;
  if (!turi::get_empty_sarray(void)::empty_sarray)
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    v4[1] = 0;
    turi::get_empty_sarray(void)::empty_sarray = (uint64_t)v4;
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v21);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](turi::get_empty_sarray(void)::empty_sarray, &v21);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    turi::sarray<turi::flexible_type>::open_for_write(*(_QWORD *)turi::get_empty_sarray(void)::empty_sarray, 1, 0);
    turi::sarray<turi::flexible_type>::set_type(*(_QWORD *)turi::get_empty_sarray(void)::empty_sarray, 1);
    (*(void (**)(_QWORD))(**(_QWORD **)turi::get_empty_sarray(void)::empty_sarray + 40))(*(_QWORD *)turi::get_empty_sarray(void)::empty_sarray);
    v3 = (uint64_t *)turi::get_empty_sarray(void)::empty_sarray;
  }
  v9 = *v3;
  v8 = (std::__shared_weak_count *)v3[1];
  v18 = v9;
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  pthread_mutex_unlock(&turi::get_empty_sarray(void)::static_sa_lock);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(&v18, 0, -1, &v20);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 24, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2181C8C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::unity_sarray::save(turi::unity_sarray *this, turi::oarchive *a2)
{
  unint64_t v4;
  _BYTE *v5;
  size_t v6;
  void **v7;
  void **v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  void *__p[2];
  char v15;
  void *v16[2];
  unsigned __int8 v17;

  LOBYTE(v16[0]) = 1;
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *((_QWORD *)a2 + 5);
    if (*((_QWORD *)a2 + 4) + 1 > v4)
    {
      v9 = 2 * v4 + 2;
      *((_QWORD *)a2 + 5) = v9;
      v10 = (_QWORD *)*((_QWORD *)a2 + 2);
      if (v10)
      {
        v5 = (_BYTE *)*v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          v5 = (_BYTE *)**((_QWORD **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((_QWORD *)a2 + 3) = v5;
    }
    else
    {
      v5 = (_BYTE *)*((_QWORD *)a2 + 3);
    }
    v5[(*((_QWORD *)a2 + 4))++] = 1;
  }
  turi::oarchive::get_prefix(a2, (unsigned __int8 *)v16);
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (size_t)v16[1];
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 5);
  if (v15 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if ((v17 & 0x80u) == 0)
      v8 = v16;
    else
      v8 = (void **)v16[0];
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".sidx");
  turi::unity_sarray::save_array_by_index_file(this, (uint64_t)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_2181C8E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::load(turi::unity_sarray *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  std::string::value_type *v8;
  std::string::size_type size;
  int v10;
  std::string v11;
  std::string v12;
  _BYTE v13[7];
  char v14;

  (*(void (**)(turi::unity_sarray *))(*(_QWORD *)this + 88))(this);
  v14 = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (!v4)
  {
    std::istream::read();
    return;
  }
  v5 = *((_QWORD *)a2 + 3);
  v6 = *(unsigned __int8 *)(v4 + v5);
  v14 = v6;
  *((_QWORD *)a2 + 3) = v5 + 1;
  if (v6)
  {
    turi::iarchive::get_prefix(a2, &v12);
    v7 = std::string::append(&v12, ".sidx");
    v8 = (std::string::value_type *)v7->__r_.__value_.__r.__words[0];
    size = v7->__r_.__value_.__l.__size_;
    *(_DWORD *)v13 = v7->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v13[3] = *(_DWORD *)((char *)&v7->__r_.__value_.__r.__words[2] + 3);
    v10 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((v10 & 0x80000000) == 0)
    {
LABEL_7:
      v11.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v11.__r_.__value_.__l.__size_ = size;
      LODWORD(v11.__r_.__value_.__r.__words[2]) = *(_DWORD *)v13;
      *(_DWORD *)((char *)&v11.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v13[3];
      *((_BYTE *)&v11.__r_.__value_.__s + 23) = v10;
      goto LABEL_10;
    }
    std::string::__init_copy_ctor_external(&v11, v8, size);
LABEL_10:
    (*(void (**)(turi::unity_sarray *, std::string *))(*(_QWORD *)this + 48))(this, &v11);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        return;
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v8);
  }
}

void sub_2181C8F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::size(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *exception;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "size", 425, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet((const std::locale *)&v24, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v24);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v25 = *((_QWORD *)this + 3);
  v26 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = turi::query_eval::infer_planner_node_length((uint64_t)&v25);
  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11 == -1)
  {
    turi::unity_sarray::get_underlying_sarray(this, &v24);
    if (*(_BYTE *)(v24 + 248) && (v16 = *(uint64_t **)(v24 + 80), (v17 = *(_QWORD *)(v24 + 88) - (_QWORD)v16) != 0))
    {
      v11 = 0;
      v18 = v17 >> 3;
      if (v18 <= 1)
        v18 = 1;
      do
      {
        v19 = *v16++;
        v11 += v19;
        --v18;
      }
      while (v18);
    }
    else
    {
      v11 = 0;
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  return v11;
}

void sub_2181C9218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

BOOL turi::unity_sarray::has_size(turi::unity_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 3);
  v10 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = turi::query_eval::infer_planner_node_length((uint64_t)&v9);
  v5 = v10;
  if (v10)
  {
    v6 = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4 != -1;
}

void sub_2181C92C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::get_underlying_sarray(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sf.num_columns()", 16);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 442, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::unity_sarray::get_underlying_sarray(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181C9464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::get_planner_node@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t turi::unity_sarray::dtype(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::locale v19;
  std::locale::__imp *locale;

  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dtype", 451, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v17 = *((_QWORD *)this + 3);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  turi::query_eval::infer_planner_node_type(&v17, (unint64_t *)&v19);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((std::locale::__imp *)(locale - v19.__locale_) != (std::locale::__imp *)1)
    turi::unity_sarray::dtype(void)::$_0::operator()();
  v14 = *(char *)v19.__locale_;
  locale = v19.__locale_;
  operator delete(v19.__locale_);
  return v14;
}

void sub_2181C96F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, std::locale a14, uint64_t a15)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::dtype(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nodetype.size()", 15);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 453, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::unity_sarray::dtype(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181C98B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::head(std::__shared_weak_count **this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34[2];
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _OWORD v42[2];
  __int128 v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  _BYTE v47[24];
  _BYTE *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v39);
  turi::sarray<turi::flexible_type>::open_for_write(v39, 1, 0);
  v6 = v39;
  v7 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[4].__shared_weak_owners_)(this);
  turi::sarray<turi::flexible_type>::set_type(v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v49, v39, 0);
  v38 = 0;
  if (!a2)
    goto LABEL_22;
  v8 = this[4];
  v36 = this[3];
  v37 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v48 = 0;
  v11 = operator new(0x20uLL);
  *v11 = &off_24D931890;
  v11[1] = v49;
  v11[2] = &v38;
  v11[3] = a2;
  v48 = v11;
  memset(v42, 0, sizeof(v42));
  v43 = 0u;
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  v46 = 0u;
  BYTE11(v43) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v45 + 1) = 0;
  v46 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v41, (uint64_t *)&v36, (uint64_t)v47, 1, (uint64_t *)v42);
  *(_QWORD *)&v35 = (char *)&v45 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  v12 = (_QWORD *)v43;
  if ((_OWORD *)v43 == (_OWORD *)((char *)v42 + 8))
  {
    v13 = 4;
    v12 = (_QWORD *)v42 + 1;
  }
  else
  {
    if (!(_QWORD)v43)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_12:
  v14 = v48;
  if (v48 == v47)
  {
    v15 = 4;
    v14 = v47;
    goto LABEL_16;
  }
  if (v48)
  {
    v15 = 5;
LABEL_16:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = v37;
  if (v37)
  {
    v17 = (unint64_t *)&v37->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_22:
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v35);
  v19 = v35;
  v20 = (std::__shared_weak_count *)v40;
  v34[0] = v39;
  v34[1] = v40;
  if (v40)
  {
    v21 = (unint64_t *)(v40 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  turi::unity_sarray::construct_from_sarray(v19, v34);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *a3 = v35;
  if (v54 == &v53)
  {
    v26 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_35;
    v26 = 5;
  }
  (*(void (**)(uint64_t *, uint64_t))(*v54 + 8 * v26))(v54, v23);
LABEL_35:
  v27 = v52;
  if (v52 == v51)
  {
    v28 = 4;
    v27 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_40;
    v28 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v27 + 8 * v28))(v27, v23);
LABEL_40:
  v29 = v50;
  if (v50 == v49)
  {
    v30 = 4;
    v29 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_45;
    v30 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v29 + 8 * v30))(v29, v23);
LABEL_45:
  v31 = (std::__shared_weak_count *)v40;
  if (v40)
  {
    v32 = (unint64_t *)(v40 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_2181C9CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  uint64_t v35;
  char *v37;
  uint64_t v38;

  turi::query_eval::materialize_options::~materialize_options(&a19);
  v37 = a35;
  if (a35 == &a32)
  {
    v38 = 4;
    v37 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v35 - 152));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::transform()
{
  int *v0;
  file_logger *v1;
  file_logger *started;
  _QWORD *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *exception;
  std::locale v7;

  v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "transform", 488, 1);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    v4 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v4 && *((_BYTE *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(v4[2] - 24) + 16));
      v5 = std::locale::use_facet(&v7, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  turi::unity_sarray::transform(std::string const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()();
}

void sub_2181C9EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sarray::transform_native@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  char v10;
  int v11;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  turi::neural_net::external_float_array **v36;
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  _BYTE v45[24];
  _BYTE *v46;
  char v47;
  _BYTE v48[24];
  _BYTE *v49;
  turi::neural_net::external_float_array *v50;
  std::__shared_weak_count *v51;
  turi::neural_net::external_float_array **v52;
  char v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v10 = a4;
  v11 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  turi::get_unity_global_singleton(a3, a4, a5, a6, a7, a8, (uint64_t *)&v50);
  v15 = turi::neural_net::external_float_array::shape(v50);
  turi::toolkit_function_registry::get_native_function(v15, a2, (uint64_t)v54);
  v16 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (uint64_t)v55;
  if (!v55)
    goto LABEL_9;
  if (v55 != v54)
  {
    v19 = (*(uint64_t (**)(_QWORD *))(*v55 + 16))(v55);
LABEL_9:
    v52 = (turi::neural_net::external_float_array **)v19;
    goto LABEL_11;
  }
  v52 = &v50;
  (*(void (**)(_QWORD *, turi::neural_net::external_float_array **))(v54[0] + 24))(v54, &v50);
LABEL_11:
  v53 = v10;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v44);
  v20 = (_QWORD *)v44;
  v21 = *(std::__shared_weak_count **)(a1 + 32);
  v40 = *(_QWORD *)(a1 + 24);
  v41 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (uint64_t)v52;
  if (v52)
  {
    if (v52 == &v50)
    {
      v46 = v45;
      (*((void (**)(turi::neural_net::external_float_array **, _BYTE *))v50 + 3))(&v50, v45);
      goto LABEL_19;
    }
    v24 = (*((uint64_t (**)(turi::neural_net::external_float_array **))*v52 + 2))(v52);
  }
  v46 = (_BYTE *)v24;
LABEL_19:
  v47 = v53;
  v49 = 0;
  v25 = operator new(0x30uLL);
  *(_QWORD *)v25 = &off_24D931910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)v45);
  v25[40] = v47;
  v49 = v25;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v40, (uint64_t)v48, v11, a5, &v42);
  turi::unity_sarray::construct_from_planner_node(v20, &v42);
  v26 = v43;
  if (v43)
  {
    v27 = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v49;
  if (v49 == v48)
  {
    v30 = 4;
    v29 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_29;
    v30 = 5;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v30))(v29);
LABEL_29:
  v31 = v46;
  if (v46 == v45)
  {
    v32 = 4;
    v31 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_34;
    v32 = 5;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v32))(v31);
LABEL_34:
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *a9 = v44;
  v36 = v52;
  if (v52 == &v50)
  {
    v37 = 4;
    v36 = &v50;
  }
  else
  {
    if (!v52)
      goto LABEL_44;
    v37 = 5;
  }
  (*((void (**)(turi::neural_net::external_float_array **))*v36 + v37))(v36);
LABEL_44:
  result = v55;
  if (v55 == v54)
  {
    v39 = 4;
    result = v54;
  }
  else
  {
    if (!v55)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v39))(result);
}

void sub_2181CA1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  uint64_t v28;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  v30 = a28;
  if (a28 == &a25)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  v32 = *(_QWORD **)(v28 - 80);
  if (v32 == (_QWORD *)(v28 - 104))
  {
    v33 = 4;
    v32 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t i;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  const void **v23[3];
  _BYTE v24[8];
  _QWORD *v25;
  void **v26;
  char v27;
  int v28;
  _QWORD v29[2];
  void *__p[2];
  char v31;
  uint64_t v32;
  std::string v33;
  uint64_t v34;
  int v35;
  char v36;
  _QWORD v37[4];
  int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v33, "output_type");
  v36 = 0;
  v35 = 0;
  v34 = a3;
  std::string::basic_string[abi:ne180100]<0>(v37, "random_seed");
  v39 = 0;
  v38 = 0;
  v37[3] = a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v24, &v33, 2);
  turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>(&v22, a2);
  std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(__p, "function", &v22);
  std::map<std::string,turi::any>::map[abi:ne180100]((uint64_t)v23, (const void **)__p, 1);
  v11 = *a1;
  v10 = a1[1];
  v29[0] = v11;
  v29[1] = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v26 = (void **)&v19;
  v27 = 0;
  v14 = operator new(0x10uLL);
  v19 = v14;
  v21 = v14 + 2;
  *v14 = v11;
  v14[1] = v10;
  if (v10)
  {
    v15 = (unint64_t *)(v10 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v20 = v14 + 2;
  v28 = 8;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v28, (uint64_t)v24, v23, &v19, a5);
  v26 = (void **)&v19;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v29);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)v23, v23[1]);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v31 < 0)
    operator delete(__p[0]);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v24, v25);
  for (i = 40; i != -40; i -= 40)
    result = std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v33 + i);
  return result;
}

void sub_2181CA50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t i;

  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a26);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a18, a19);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v26 - 152 + i);
  _Unwind_Resume(a1);
}

void sub_2181CA59C()
{
  JUMPOUT(0x2181CA578);
}

void sub_2181CA5A4()
{
  uint64_t v0;

  std::pair<std::string const,turi::flexible_type>::~pair(v0 - 152);
  JUMPOUT(0x2181CA594);
}

void sub_2181CA5B4()
{
  JUMPOUT(0x2181CA594);
}

_QWORD *turi::unity_sarray::transform_lambda@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _WORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  _BYTE v34[24];
  _BYTE *v35;
  __int16 v36;
  _BYTE v37[24];
  _BYTE *v38;
  _QWORD v39[3];
  _QWORD *v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v39, a2);
  LOBYTE(v41) = a3;
  HIBYTE(v41) = a4;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v33);
  v11 = (_QWORD *)v33;
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (uint64_t)v40;
  if (v40)
  {
    if (v40 == v39)
    {
      v35 = v34;
      (*(void (**)(_QWORD *, _BYTE *))(v39[0] + 24))(v39, v34);
      goto LABEL_9;
    }
    v15 = (*(uint64_t (**)(_QWORD *))(*v40 + 16))(v40);
  }
  v35 = (_BYTE *)v15;
LABEL_9:
  v36 = v41;
  v38 = 0;
  v16 = operator new(0x30uLL);
  *(_QWORD *)v16 = &off_24D931990;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v16 + 4), (uint64_t)v34);
  v16[20] = v36;
  v38 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node(&v29, (uint64_t)v37, a3, a5, &v31);
  turi::unity_sarray::construct_from_planner_node(v11, &v31);
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v38;
  if (v38 == v37)
  {
    v21 = 4;
    v20 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_19;
    v21 = 5;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
LABEL_19:
  v22 = v35;
  if (v35 == v34)
  {
    v23 = 4;
    v22 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_24;
    v23 = 5;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
LABEL_24:
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *a6 = v33;
  result = v40;
  if (v40 == v39)
  {
    v28 = 4;
    result = v39;
  }
  else
  {
    if (!v40)
      return result;
    v28 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v28))(result);
}

void sub_2181CA814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  v15 = *(_QWORD **)(v13 - 72);
  if (v15 == (_QWORD *)(v13 - 96))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 96);
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void turi::unity_sarray::append(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v37 = *a2;
  v38 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if (v10 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2))
    turi::unity_sarray::append(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v36);
  v11 = (_QWORD *)v36;
  v12 = (std::__shared_weak_count *)a1[4];
  v32 = a1[3];
  v33 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(v7 + 32);
  v30 = *(_QWORD *)(v7 + 24);
  v31 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(&v32, &v30, &v34);
  turi::unity_sarray::construct_from_planner_node(v11, &v34);
  v18 = v35;
  if (v35)
  {
    v19 = (unint64_t *)&v35->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *a3 = v36;
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_2181CAAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

double turi::unity_sarray::vector_slice@<D0>(std::__shared_weak_count **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  int v14;
  char v15;
  char v17;
  std::locale::__imp *locale;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  double result;
  _QWORD *exception;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::locale v37[2];
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "vector_slice", 583, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v37, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v37);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[4].__shared_weak_owners_)(this);
  v15 = v14;
  if ((v14 - 5) <= 0xFDu)
    turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_0::operator()();
  if (a3 <= a2)
    turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_1::operator()();
  if (v14 == 3 && a2 + 1 == a3)
    v17 = 1;
  else
    v17 = v14;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v37);
  locale = v37[0].__locale_;
  v19 = this[4];
  v33 = this[3];
  v34 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v39 = 0;
  v22 = operator new(0x28uLL);
  *v22 = &off_24D931A10;
  v22[1] = a3;
  *((_BYTE *)v22 + 16) = v17;
  v22[3] = a2;
  *((_BYTE *)v22 + 32) = v15;
  v39 = v22;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::make_planner_node((uint64_t *)&v33, (uint64_t)v38, v17, -1, &v35);
  turi::unity_sarray::construct_from_planner_node(locale, &v35);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v39;
  if (v39 == v38)
  {
    v27 = 4;
    v26 = v38;
    goto LABEL_29;
  }
  if (v39)
  {
    v27 = 5;
LABEL_29:
    (*(void (**)(_QWORD *))(*v26 + 8 * v27))(v26);
  }
  v28 = v34;
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  result = *(double *)&v37[0].__locale_;
  *a4 = *(_OWORD *)&v37[0].__locale_;
  return result;
}

void sub_2181CAE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::filter(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v15);
  v3 = v15;
  v2 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v19 = v3;
  v20 = v2;
  v17 = 0;
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 168))(a1, &v19);
  v6 = v20;
  if (v20)
  {
    v7 = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v18;
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_2181CAFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::logical_filter(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale::__imp *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *exception;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::locale v71;
  std::__shared_weak_count *v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "logical_filter", 649, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v71, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v71);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = *(std::locale::__imp **)a2;
  if (!*(_QWORD *)a2)
    turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v71.__locale_ = *(std::locale::__imp **)a2;
  v72 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(std::__shared_weak_count **)(a1 + 32);
  v69 = *(_QWORD *)(a1 + 24);
  v70 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20 = *((_QWORD *)v12 + 3);
  v19 = (std::__shared_weak_count *)*((_QWORD *)v12 + 4);
  v67 = v20;
  v68 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = turi::query_eval::planner::test_equal_length((uint64_t)&v66, &v69, &v67);
  v24 = v68;
  if (v68)
  {
    v25 = (unint64_t *)&v68->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v70;
  if (v70)
  {
    v28 = (unint64_t *)&v70->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!v23)
    turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_1::operator()();
  v73[0] = &off_24D931A90;
  v74 = v73;
  turi::unity_sarray::transform_lambda((uint64_t)v71.__locale_, (uint64_t)v73, 0, 1, 0, &v65);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  v66 = v65;
  if (*((_QWORD *)&v65 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v34 = v74;
  if (v74 == v73)
  {
    v35 = 4;
    v34 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_41;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_41:
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v65);
  v36 = (_QWORD *)v65;
  v37 = *(std::__shared_weak_count **)(a1 + 32);
  v61 = *(_QWORD *)(a1 + 24);
  v62 = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(std::__shared_weak_count **)(v66 + 32);
  v59 = *(_QWORD *)(v66 + 24);
  v60 = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v61, &v59, &v63);
  turi::unity_sarray::construct_from_planner_node(v36, &v63);
  v43 = v64;
  if (v64)
  {
    v44 = (unint64_t *)&v64->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v60;
  if (v60)
  {
    v47 = (unint64_t *)&v60->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v62;
  if (v62)
  {
    v50 = (unint64_t *)&v62->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *a3 = v65;
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v72;
  if (v72)
  {
    v56 = (unint64_t *)&v72->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_2181CB4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,std::locale a23)
{
  std::locale::~locale(&a23);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index != nullptr", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "operator()", 651, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181CB660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::topk_index(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t (**v15)();
  turi::thread *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unint64_t *v34;
  unint64_t v35;
  std::locale *v36;
  uint64_t v37;
  turi::thread_pool *v38;
  turi::thread_pool *instance;
  turi::thread *v40;
  turi::thread_pool *tls_data;
  turi::thread_pool *v42;
  uint64_t v43;
  double v44;
  turi::thread *v45;
  unint64_t v46;
  uint64_t i;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t j;
  uint64_t v56;
  _QWORD *v57;
  _QWORD **v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  turi::thread_pool *v74;
  turi::thread_pool *v75;
  turi::thread *v76;
  turi::thread_pool *v77;
  turi::thread_pool *v78;
  uint64_t v79;
  double v80;
  turi::thread *v81;
  unint64_t v82;
  uint64_t k;
  turi::unity_sarray *v84;
  std::locale::__imp *locale;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void ***v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *exception;
  uint64_t v103[2];
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  void *__p[2];
  char v114;
  unint64_t v115;
  uint64_t *v116;
  char **v117;
  unint64_t *v118;
  unint64_t v119;
  char **v120;
  uint64_t **v121;
  unint64_t v122;
  void ***v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[3];
  _QWORD *v128;
  std::locale v129[2];
  std::locale *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v115 = a2;
  v7 = (int *)global_logger();
  if (v7[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "topk_index", 678, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Function entry", 14);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(v129, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(v129);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v13 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
  v14 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "<");
  turi::unity_sarray_binary_operations::check_operation_feasibility(v13, v14, (unsigned __int8 *)__p);
  if (v114 < 0)
    operator delete(__p[0]);
  turi::unity_sarray::get_underlying_sarray(this, &v112);
  v128 = 0;
  if (a3)
    v15 = &off_24D931B10;
  else
    v15 = &off_24D931BB8;
  v129[0].__locale_ = (std::locale::__imp *)v15;
  v130 = v129;
  std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::swap(v129, v127);
  v16 = (turi::thread *)v130;
  if (v130 == v129)
  {
    v17 = 4;
    v16 = (turi::thread *)v129;
  }
  else
  {
    if (!v130)
      goto LABEL_19;
    v17 = 5;
  }
  v16 = (turi::thread *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_19:
  v18 = v112;
  v19 = turi::thread::cpu_count(v16);
  turi::sarray<turi::flexible_type>::get_reader(v18, v19, &v111);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
  v21 = (uint64_t)v128;
  if (v128)
  {
    if (v128 == v127)
    {
      v130 = v129;
      (*(void (**)(_QWORD *, std::locale *))(v127[0] + 24))(v127, v129);
      goto LABEL_24;
    }
    v21 = (*(uint64_t (**)(void))(*v128 + 16))();
  }
  v130 = (std::locale *)v21;
LABEL_24:
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v109 = 0;
  v110 = 0;
  v108 = 0;
  v116 = (uint64_t *)&v108;
  LOBYTE(v117) = 0;
  if (!v20)
    goto LABEL_46;
  if (v20 >= 0x492492492492493)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v22 = (char *)operator new(56 * v20);
  v108 = v22;
  v109 = v22;
  v23 = &v22[56 * v20];
  v110 = v23;
  do
  {
    v24 = (uint64_t)v130;
    if (!v130)
      goto LABEL_30;
    if (v130 != v129)
    {
      v24 = (*((uint64_t (**)(void))v130->__locale_ + 2))();
LABEL_30:
      *((_QWORD *)v22 + 3) = v24;
      goto LABEL_32;
    }
    *((_QWORD *)v22 + 3) = v22;
    (*((void (**)(uint64_t, _QWORD *))v129[0].__locale_ + 3))((uint64_t)v129, v22);
LABEL_32:
    *((_QWORD *)v22 + 4) = 0;
    *((_QWORD *)v22 + 5) = 0;
    *((_QWORD *)v22 + 6) = 0;
    v25 = v131;
    v26 = v132;
    v120 = (char **)(v22 + 32);
    LOBYTE(v121) = 0;
    v27 = v132 - v131;
    if (v132 != v131)
    {
      if (v27 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>(v27 >> 5);
      *((_QWORD *)v22 + 4) = v28;
      *((_QWORD *)v22 + 5) = v28;
      *((_QWORD *)v22 + 6) = &v28[32 * v29];
      do
      {
        *(_QWORD *)v28 = 0;
        *((_DWORD *)v28 + 2) = 0;
        v28[12] = 0;
        if (v25 != v28)
        {
          v30 = *(_QWORD *)v25;
          *(_QWORD *)(v28 + 5) = *(_QWORD *)(v25 + 5);
          *(_QWORD *)v28 = v30;
          LODWORD(v30) = v25[12];
          v28[12] = v30;
          v31 = v30 > 9;
          v32 = (1 << v30) & 0x33C;
          if (!v31 && v32 != 0)
          {
            v34 = *(unint64_t **)v28;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 + 1, v34));
          }
        }
        *((_OWORD *)v28 + 1) = *((_OWORD *)v25 + 1);
        v25 += 32;
        v28 += 32;
      }
      while (v25 != v26);
      *((_QWORD *)v22 + 5) = v28;
    }
    v22 += 56;
  }
  while (v22 != v23);
  v109 = v23;
LABEL_46:
  v120 = &v131;
  std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  v36 = v130;
  if (v130 == v129)
  {
    v37 = 4;
    v36 = v129;
LABEL_50:
    (*((void (**)(void))v36->__locale_ + v37))();
  }
  else if (v130)
  {
    v37 = 5;
    goto LABEL_50;
  }
  v38 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
  v116 = &v111;
  v117 = &v108;
  v118 = &v115;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v38);
  v40 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v40);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v40 <= 1)
  {
    if (v38)
    {
      for (i = 0; (turi::thread_pool *)i != v38; ++i)
        turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1::operator()(&v116, i);
    }
  }
  else
  {
    v42 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v129, v42);
    v43 = 0;
    v44 = (double)(unint64_t)v38 / (double)(unint64_t)v40;
    do
    {
      v45 = (turi::thread *)(v43 + 1);
      v46 = (unint64_t)(v44 * (double)(unint64_t)(v43 + 1) + 0.0);
      if ((turi::thread *)v43 == (turi::thread *)((char *)v40 - 1))
        v46 = (unint64_t)v38;
      v122 = (unint64_t)(v44 * (double)(unint64_t)v43 + 0.0);
      v123 = (void ***)v46;
      v120 = (char **)((char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1 const&)::{lambda(void)#1}>(turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1)::stored_vtable
                     + 1);
      v121 = &v116;
      turi::parallel_task_queue::launch((uint64_t)v129, (uint64_t)&v120, v43);
      boost::function0<void>::~function0((uint64_t *)&v120);
      v43 = (uint64_t)v45;
    }
    while (v45 != v40);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v129);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v129);
  }
  v48 = (uint64_t)v128;
  if (v128)
  {
    if (v128 != v127)
    {
      v48 = (*(uint64_t (**)(void))(*v128 + 16))();
      goto LABEL_64;
    }
    v123 = (void ***)&v120;
    (*(void (**)(_QWORD *, char ***))(v127[0] + 24))(v127, &v120);
  }
  else
  {
LABEL_64:
    v123 = (void ***)v48;
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v49 = v108;
  v50 = v109;
  while (v49 != v50)
  {
    v51 = *((_QWORD *)v49 + 4);
    v52 = *((_QWORD *)v49 + 5);
    while (v51 != v52)
    {
      boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::push(&v120, v51);
      if (v115 < (v125 - v124) >> 5)
        boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::pop((uint64_t)&v120);
      v51 += 32;
    }
    v49 += 56;
  }
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
  std::vector<std::vector<unsigned long>>::vector(v107, v53);
  v54 = v124;
  for (j = v125; v54 != j; v54 += 32)
  {
    v56 = v107[0] + 24 * *(_QWORD *)(v54 + 16);
    v58 = (_QWORD **)(v56 + 8);
    v57 = *(_QWORD **)(v56 + 8);
    v60 = (_QWORD *)(v56 + 16);
    v59 = *(_QWORD *)(v56 + 16);
    if ((unint64_t)v57 >= v59)
    {
      v62 = *(_QWORD **)v56;
      v63 = ((uint64_t)v57 - *(_QWORD *)v56) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v65 = v59 - (_QWORD)v62;
      if (v65 >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v60, v66);
        v57 = *v58;
        v62 = *(_QWORD **)v56;
      }
      else
      {
        v67 = 0;
      }
      v68 = &v67[8 * v63];
      *(_QWORD *)v68 = *(_QWORD *)(v54 + 24);
      v61 = v68 + 8;
      while (v57 != v62)
      {
        v69 = *--v57;
        *((_QWORD *)v68 - 1) = v69;
        v68 -= 8;
      }
      *(_QWORD *)v56 = v68;
      *v58 = v61;
      *v60 = &v67[8 * v66];
      if (v62)
        operator delete(v62);
    }
    else
    {
      *v57 = *(_QWORD *)(v54 + 24);
      v61 = v57 + 1;
    }
    *v58 = v61;
  }
  v70 = v107[0];
  v71 = v107[1];
  while (v70 != v71)
  {
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    v70 += 24;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v105);
  v72 = v105;
  v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
  turi::sarray<turi::flexible_type>::open_for_write(v72, v73, 0);
  turi::sarray<turi::flexible_type>::set_type(v105, 0);
  v74 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
  v104[0] = &v105;
  v104[1] = &v111;
  v104[2] = v107;
  v75 = (turi::thread_pool *)turi::thread_pool::get_instance(v74);
  v76 = (turi::thread *)turi::thread_pool::size(v75);
  v77 = (turi::thread_pool *)turi::thread::get_tls_data(v76);
  if (*((_BYTE *)v77 + 8) || (unint64_t)v76 <= 1)
  {
    if (v74)
    {
      for (k = 0; (turi::thread_pool *)k != v74; ++k)
        turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2::operator()((uint64_t)v104, k);
    }
  }
  else
  {
    v78 = (turi::thread_pool *)turi::thread_pool::get_instance(v77);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v129, v78);
    v79 = 0;
    v80 = (double)(unint64_t)v74 / (double)(unint64_t)v76;
    do
    {
      v81 = (turi::thread *)(v79 + 1);
      v82 = (unint64_t)(v80 * (double)(unint64_t)(v79 + 1) + 0.0);
      if ((turi::thread *)v79 == (turi::thread *)((char *)v76 - 1))
        v82 = (unint64_t)v74;
      v118 = (unint64_t *)(v80 * (double)(unint64_t)v79 + 0.0);
      v119 = v82;
      v116 = (uint64_t *)((char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2 const&)::{lambda(void)#1}>(turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2)::stored_vtable
                       + 1);
      v117 = (char **)v104;
      turi::parallel_task_queue::launch((uint64_t)v129, (uint64_t)&v116, v79);
      boost::function0<void>::~function0((uint64_t *)&v116);
      v79 = (uint64_t)v81;
    }
    while (v81 != v76);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v129);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v129);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
  v84 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v84);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)v129, (uint64_t)v84);
  locale = v129[0].__locale_;
  v86 = (std::__shared_weak_count *)v106;
  v103[0] = v105;
  v103[1] = v106;
  if (v106)
  {
    v87 = (unint64_t *)(v106 + 8);
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  turi::unity_sarray::construct_from_sarray((uint64_t)locale, v103);
  if (v86)
  {
    p_shared_owners = (unint64_t *)&v86->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  *a4 = *(_OWORD *)&v129[0].__locale_;
  v91 = (std::__shared_weak_count *)v106;
  if (v106)
  {
    v92 = (unint64_t *)(v106 + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v129[0].__locale_ = (std::locale::__imp *)v107;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v129[0].__locale_ = (std::locale::__imp *)&v124;
  std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v94 = v123;
  if (v123 == (void ***)&v120)
  {
    v95 = 4;
    v94 = (void ***)&v120;
LABEL_122:
    ((void (*)(void))(*v94)[v95])();
  }
  else if (v123)
  {
    v95 = 5;
    goto LABEL_122;
  }
  v129[0].__locale_ = (std::locale::__imp *)&v108;
  std::vector<boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  v96 = v111;
  v111 = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = v128;
  if (v128 == v127)
  {
    v98 = 4;
    v97 = v127;
LABEL_129:
    (*(void (**)(void))(*v97 + 8 * v98))();
  }
  else if (v128)
  {
    v98 = 5;
    goto LABEL_129;
  }
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
}

void sub_2181CC128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,std::locale a48)
{
  std::locale::~locale(&a48);
  _Unwind_Resume(a1);
}

uint64_t boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::~priority_queue(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v5;

  v5 = (void **)(a1 + 32);
  std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::push(_QWORD *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  _QWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  memset(v31, 0, 13);
  if (v31 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)(a2 + 5);
    v31[0] = *(_QWORD *)a2;
    BYTE4(v31[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v31[1]) <= 9u && ((1 << SBYTE4(v31[1])) & 0x33C) != 0)
    {
      v4 = (unint64_t *)v31[0];
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  v32 = *(_OWORD *)(a2 + 16);
  v6 = a1[5];
  v7 = a1[6];
  if (v6 >= v7)
  {
    v10 = a1[4];
    v11 = (uint64_t)(v6 - v10) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = v7 - v10;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>(v14);
    else
      v15 = 0;
    v16 = v14 + 32 * v11;
    v17 = v14 + 32 * v15;
    *(_QWORD *)v16 = 0;
    *(_DWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 12) = 0;
    v18 = v31[0];
    *(_QWORD *)(v16 + 5) = *(_QWORD *)((char *)v31 + 5);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 12) = BYTE4(v31[1]);
    BYTE4(v31[1]) = 0;
    *(_OWORD *)(v16 + 16) = v32;
    v9 = v16 + 32;
    v19 = (char *)a1[4];
    v20 = (char *)a1[5];
    if (v20 == v19)
    {
      a1[4] = v16;
      a1[5] = v9;
      a1[6] = v17;
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = v16 + v21;
        *(_QWORD *)(v22 - 32) = 0;
        *(_DWORD *)(v22 - 24) = 0;
        *(_BYTE *)(v22 - 20) = 0;
        v23 = *(_QWORD *)&v20[v21 - 32];
        *(_QWORD *)(v22 - 27) = *(_QWORD *)&v20[v21 - 27];
        *(_QWORD *)(v22 - 32) = v23;
        *(_BYTE *)(v22 - 20) = v20[v21 - 20];
        v20[v21 - 20] = 0;
        *(_OWORD *)(v22 - 16) = *(_OWORD *)&v20[v21 - 16];
        v21 -= 32;
      }
      while (&v20[v21] != v19);
      v20 = (char *)a1[4];
      v24 = a1[5];
      a1[4] = v16 + v21;
      a1[5] = v9;
      a1[6] = v17;
      while ((char *)v24 != v20)
        v24 = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(v24 - 32);
    }
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 12) = 0;
    v8 = v31[0];
    *(_QWORD *)(v6 + 5) = *(_QWORD *)((char *)v31 + 5);
    *(_QWORD *)v6 = v8;
    *(_BYTE *)(v6 + 12) = BYTE4(v31[1]);
    BYTE4(v31[1]) = 0;
    *(_OWORD *)(v6 + 16) = v32;
    v9 = v6 + 32;
  }
  a1[5] = v9;
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v31);
  v25 = a1[4];
  v26 = a1[5];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)a1);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(v25, v26, (uint64_t)v29, (v26 - v25) >> 5);
  result = v30;
  if (v30 == v29)
  {
    v28 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v28 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
}

void sub_2181CC608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::pop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[13];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v14, a1);
  if (v3 - v2 >= 33)
  {
    v4 = 0;
    v5 = (v3 - v2) >> 5;
    v6 = *(_QWORD *)v2;
    *(_QWORD *)&v16[5] = *(_QWORD *)(v2 + 5);
    *(_QWORD *)v16 = v6;
    v16[12] = *(_BYTE *)(v2 + 12);
    *(_BYTE *)(v2 + 12) = 0;
    v17 = *(_OWORD *)(v2 + 16);
    v7 = v2;
    do
    {
      v8 = (uint64_t *)(v7 + 32 * v4 + 32);
      v9 = (2 * v4) | 1;
      v10 = 2 * v4 + 2;
      if (v10 < v5)
      {
        if (!v15)
          std::__throw_bad_function_call[abi:ne180100]();
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, v7 + 32 * v4 + 32, v7 + 32 * v4 + 64))
        {
          v8 += 4;
          v9 = v10;
        }
      }
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v7, v8);
      v7 = (uint64_t)v8;
      v4 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(v5 - 2) >> 1));
    if (v8 == (uint64_t *)(v3 - 32))
    {
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v8, (uint64_t *)v16);
    }
    else
    {
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v8, (uint64_t *)(v3 - 32));
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v3 - 32, (uint64_t *)v16);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(v2, (uint64_t)(v8 + 4), (uint64_t)v14, ((uint64_t)v8 - v2 + 32) >> 5);
    }
    turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v16);
  }
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_16;
  }
  if (v15)
  {
    v12 = 5;
LABEL_16:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  result = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(*(_QWORD *)(a1 + 40) - 32);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_2181CC828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sarray::num_missing(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  uint64_t v26;
  turi::flexible_type_impl **v27;
  turi::flexible_type_impl *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  turi::sframe_reader *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t result;
  _QWORD *exception;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  std::__shared_weak_count *v48;
  std::string v49;
  std::string::size_type v50;
  void **v51;
  _QWORD v52[4];
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  turi::sframe_reader *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t (**v63)();
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[32];
  void *v73;
  char v74;
  uint64_t v75;
  _OWORD v76[2];
  __int128 v77;
  void *__p[2];
  __int128 v79;
  __int128 v80;
  std::locale v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "num_missing", 792, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v81, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v81);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v48 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v64 = 0;
    v65 = 0;
    v63 = off_24D931C78;
    v59 = v8;
    v60 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v64 = 0;
    v65 = 0;
    v63 = off_24D931C78;
    v59 = v8;
    v60 = 0;
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v59, (uint64_t (***)(_QWORD))&v63, 2, &v61);
  v13 = v60;
  if (v60)
  {
    v14 = (unint64_t *)&v60->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v57 = v61;
  v58 = v62;
  if (v62)
  {
    v16 = (unint64_t *)&v62->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v76, 0, sizeof(v76));
  BYTE11(v77) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v80 = 0uLL;
  *((_QWORD *)&v79 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v57, (uint64_t)v76, (const turi::sframe *)&v81);
  v66 = (void **)&v79 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  v18 = (_QWORD *)v77;
  if ((_OWORD *)v77 == (_OWORD *)((char *)v76 + 8))
  {
    v19 = 4;
    v18 = (_QWORD *)v76 + 1;
  }
  else
  {
    if (!(_QWORD)v77)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v58;
  if (v58)
  {
    v21 = (unint64_t *)&v58->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v81, 1, &v56);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v56 + 32))(&v51, v56, 0);
  v23 = 0;
  v50 = 0;
  v24 = (void **)*MEMORY[0x24BEDB7F0];
  v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v47 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v45 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v56 + 40))(&v66, v56, 0);
    if (v51 != v66 || v52[3] != v70)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      goto LABEL_42;
    }
    v25 = v53;
    v26 = v71;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if (v25 == v26)
      break;
LABEL_42:
    v27 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v51);
    v28 = *v27;
    switch(*((_BYTE *)*v27 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v24;
        *(void ***)((char *)&v66 + (_QWORD)*(v24 - 3)) = v47;
        v68 = v46;
        v29 = v45;
        goto LABEL_51;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v24;
        *(void ***)((char *)&v66 + (_QWORD)*(v24 - 3)) = v47;
        v29 = MEMORY[0x24BEDB848] + 16;
        v68 = v46;
LABEL_51:
        v69 = v29;
        if (v74 < 0)
          operator delete(v73);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v75);
        goto LABEL_58;
      case 2:
        v30 = *(_QWORD *)v28;
        if (*(char *)(*(_QWORD *)v28 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v31 = *(_OWORD *)(v30 + 8);
          v49.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 24);
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v31;
        }
        goto LABEL_58;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (uint64_t *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v28, &v49);
        goto LABEL_58;
      case 7:
        memset(&v49, 0, sizeof(v49));
        goto LABEL_58;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_58;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
LABEL_58:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v32 = &v49;
LABEL_61:
          v33 = v32->__r_.__value_.__r.__words[0];
          v50 = v32->__r_.__value_.__r.__words[0];
          goto LABEL_62;
        }
        v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if (v49.__r_.__value_.__r.__words[0])
          goto LABEL_61;
        std::istream::read();
        v33 = v50;
LABEL_62:
        v34 = v52[0];
        v35 = v52[1];
        while (v34 != v35)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++(v34);
          v34 += 48;
        }
        if (v53 + 1 < v54)
          v36 = v53 + 1;
        else
          v36 = v54;
        v53 = v36;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v23 += v33;
        break;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v66 = (void **)&v55;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
  v66 = (void **)v52;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
  v37 = v56;
  v56 = 0;
  if (v37)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v37 + 8))(v37);
  turi::sframe::~sframe((turi::sframe *)&v81);
  v38 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v48)
  {
    v41 = (unint64_t *)&v48->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v23;
}

void sub_2181CCFA4(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x288]);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::all(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  turi::flexible_type_impl **v28;
  turi::flexible_type_impl *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::string *v33;
  int data;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  turi::sframe_reader *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t result;
  void *v45;
  _QWORD *exception;
  uint64_t v47;
  void **v48;
  std::__shared_weak_count *v49;
  std::string v50;
  int v51;
  void **v52;
  _QWORD v53[4];
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  turi::sframe_reader *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t (**v64)();
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[32];
  void *v73;
  char v74;
  uint64_t v75;
  _OWORD v76[2];
  __int128 v77;
  void *__p[2];
  __int128 v79;
  __int128 v80;
  std::locale v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "all", 805, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v81, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v81);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v49 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v64 = off_24D931D18;
    v65 = 0x100000001;
    v60 = v8;
    v61 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v64 = off_24D931D18;
    v65 = 0x100000001;
    v60 = v8;
    v61 = 0;
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v60, (uint64_t (***)(_QWORD))&v64, 2, &v62);
  v13 = v61;
  if (v61)
  {
    v14 = (unint64_t *)&v61->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v58 = v62;
  v59 = v63;
  if (v63)
  {
    v16 = (unint64_t *)&v63->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v76, 0, sizeof(v76));
  BYTE11(v77) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v80 = 0uLL;
  *((_QWORD *)&v79 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v58, (uint64_t)v76, (const turi::sframe *)&v81);
  v66 = (void **)&v79 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  v18 = (_QWORD *)v77;
  if ((_OWORD *)v77 == (_OWORD *)((char *)v76 + 8))
  {
    v19 = 4;
    v18 = (_QWORD *)v76 + 1;
  }
  else
  {
    if (!(_QWORD)v77)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v59;
  if (v59)
  {
    v21 = (unint64_t *)&v59->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v81, 1, &v57);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v57 + 32))(&v52, v57, 0);
  v51 = 0;
  v23 = (void **)*MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v48 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  LOBYTE(v25) = 1;
  v47 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v57 + 40))(&v66, v57, 0);
    if (v52 != v66 || v53[3] != v70)
    {
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      goto LABEL_42;
    }
    v26 = v54;
    v27 = v71;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (v26 == v27)
      break;
LABEL_42:
    v28 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v52);
    v29 = *v28;
    switch(*((_BYTE *)*v28 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v23;
        *(void ***)((char *)&v66 + (_QWORD)*(v23 - 3)) = v48;
        v68 = v24;
        v30 = v47;
        goto LABEL_51;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v23;
        *(void ***)((char *)&v66 + (_QWORD)*(v23 - 3)) = v48;
        v30 = MEMORY[0x24BEDB848] + 16;
        v68 = v24;
LABEL_51:
        v69 = v30;
        if (v74 < 0)
          operator delete(v73);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v75);
        goto LABEL_58;
      case 2:
        v31 = *(_QWORD *)v29;
        if (*(char *)(*(_QWORD *)v29 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
        }
        else
        {
          v32 = *(_OWORD *)(v31 + 8);
          v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 24);
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v32;
        }
        goto LABEL_58;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (uint64_t *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v29, &v50);
        goto LABEL_58;
      case 7:
        memset(&v50, 0, sizeof(v50));
        goto LABEL_58;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_58;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v29 + 8));
LABEL_58:
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v33 = &v50;
LABEL_61:
          data = (int)v33->__r_.__value_.__l.__data_;
          v51 = data;
          goto LABEL_62;
        }
        v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v50.__r_.__value_.__r.__words[0])
          goto LABEL_61;
        std::istream::read();
        data = v51;
LABEL_62:
        v25 = v25 & (data != 0);
        if (!v25)
        {
          v45 = __cxa_allocate_exception(1uLL);
        }
        v35 = v53[0];
        v36 = v53[1];
        while (v35 != v36)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++(v35);
          v35 += 48;
        }
        if (v54 + 1 < v55)
          v37 = v54 + 1;
        else
          v37 = v55;
        v54 = v37;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        break;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v66 = (void **)&v56;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
  v66 = (void **)v53;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
  v38 = v57;
  v57 = 0;
  if (v38)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v38 + 8))(v38);
  turi::sframe::~sframe((turi::sframe *)&v81);
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return 1;
}

void sub_2181CD804(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::any(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  turi::flexible_type_impl **v28;
  turi::flexible_type_impl *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::string *v33;
  int data;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  turi::sframe_reader *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t result;
  void *v45;
  _QWORD *exception;
  uint64_t v47;
  void **v48;
  std::__shared_weak_count *v49;
  std::string v50;
  int v51;
  void **v52;
  _QWORD v53[4];
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  turi::sframe_reader *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t (**v64)();
  int v65;
  int v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[32];
  void *v74;
  char v75;
  uint64_t v76;
  _OWORD v77[2];
  __int128 v78;
  void *__p[2];
  __int128 v80;
  __int128 v81;
  std::locale v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "any", 822, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v82, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v82);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v49 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v64 = off_24D931DB8;
    v65 = 0;
    v66 = 0;
    v60 = v8;
    v61 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v64 = off_24D931DB8;
    v65 = 0;
    v66 = 0;
    v60 = v8;
    v61 = 0;
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v60, (uint64_t (***)(_QWORD))&v64, 2, &v62);
  v13 = v61;
  if (v61)
  {
    v14 = (unint64_t *)&v61->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v58 = v62;
  v59 = v63;
  if (v63)
  {
    v16 = (unint64_t *)&v63->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v77, 0, sizeof(v77));
  BYTE11(v78) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v81 = 0uLL;
  *((_QWORD *)&v80 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v58, (uint64_t)v77, (const turi::sframe *)&v82);
  v67 = (void **)&v80 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v67);
  if (SBYTE7(v80) < 0)
    operator delete(__p[0]);
  v18 = (_QWORD *)v78;
  if ((_OWORD *)v78 == (_OWORD *)((char *)v77 + 8))
  {
    v19 = 4;
    v18 = (_QWORD *)v77 + 1;
  }
  else
  {
    if (!(_QWORD)v78)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v59;
  if (v59)
  {
    v21 = (unint64_t *)&v59->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v82, 1, &v57);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v57 + 32))(&v52, v57, 0);
  v23 = 0;
  v51 = 0;
  v24 = (void **)*MEMORY[0x24BEDB7F0];
  v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v48 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v47 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v57 + 40))(&v67, v57, 0);
    if (v52 != v67 || v53[3] != v71)
    {
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      goto LABEL_42;
    }
    v26 = v54;
    v27 = v72;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (v26 == v27)
      break;
LABEL_42:
    v28 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v52);
    v29 = *v28;
    switch(*((_BYTE *)*v28 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v67);
        std::ostream::operator<<();
        std::stringbuf::str();
        v67 = v24;
        *(void ***)((char *)&v67 + (_QWORD)*(v24 - 3)) = v48;
        v69 = v25;
        v30 = v47;
        goto LABEL_51;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v67);
        std::ostream::operator<<();
        std::stringbuf::str();
        v67 = v24;
        *(void ***)((char *)&v67 + (_QWORD)*(v24 - 3)) = v48;
        v30 = MEMORY[0x24BEDB848] + 16;
        v69 = v25;
LABEL_51:
        v70 = v30;
        if (v75 < 0)
          operator delete(v74);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v76);
        goto LABEL_58;
      case 2:
        v31 = *(_QWORD *)v29;
        if (*(char *)(*(_QWORD *)v29 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v31 + 8), *(_QWORD *)(v31 + 16));
        }
        else
        {
          v32 = *(_OWORD *)(v31 + 8);
          v50.__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 24);
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v32;
        }
        goto LABEL_58;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v67, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v67, (uint64_t *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v67, (_QWORD *)(*(_QWORD *)v29 + 8));
        goto LABEL_58;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v29, &v50);
        goto LABEL_58;
      case 7:
        memset(&v50, 0, sizeof(v50));
        goto LABEL_58;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_58;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v67, (_QWORD *)(*(_QWORD *)v29 + 8));
LABEL_58:
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v33 = &v50;
LABEL_61:
          data = (int)v33->__r_.__value_.__l.__data_;
          v51 = data;
          goto LABEL_62;
        }
        v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v50.__r_.__value_.__r.__words[0])
          goto LABEL_61;
        std::istream::read();
        data = v51;
LABEL_62:
        v23 |= data != 0;
        if (v23 == 1)
        {
          v45 = __cxa_allocate_exception(1uLL);
        }
        v35 = v53[0];
        v36 = v53[1];
        while (v35 != v36)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++(v35);
          v35 += 48;
        }
        if (v54 + 1 < v55)
          v37 = v54 + 1;
        else
          v37 = v55;
        v54 = v37;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        break;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v67 = (void **)&v56;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v67);
  v67 = (void **)v53;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v67);
  v38 = v57;
  v57 = 0;
  if (v38)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v38 + 8))(v38);
  turi::sframe::~sframe((turi::sframe *)&v82);
  v39 = v63;
  if (v63)
  {
    v40 = (unint64_t *)&v63->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v23 > 0;
}

void sub_2181CE0A0(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x278]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::max(std::__shared_weak_count **this@<X0>, uint64_t *a2@<X8>)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned int v9;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void **v57;
  std::string *v58;
  unint64_t v59;
  uint64_t v60;
  turi::flexible_type_impl **v61;
  turi::flexible_type_impl *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string::size_type size;
  std::string *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  turi::sframe_reader *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  unsigned int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  void *v179;
  void *v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  void *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD *exception;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::string v200;
  void **v201;
  _QWORD v202[4];
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  turi::sframe_reader *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t *v213;
  void **time_rep;
  uint64_t v215;
  std::string *v216;
  uint64_t v217;
  std::string::size_type v218;
  uint64_t v219;
  _BYTE v220[32];
  void *v221;
  char v222;
  uint64_t v223;
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD *v226;
  int v227;
  char v228;
  _OWORD v229[2];
  __int128 v230;
  void *__p[2];
  __int128 v232;
  __int128 v233;
  std::locale v234;
  uint64_t (**v235[9])(_QWORD);

  v235[6] = *(uint64_t (***)(_QWORD))MEMORY[0x24BDAC8D0];
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "max", 839, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(&v234, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v234);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v9 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[4].__shared_weak_owners_)(this);
  if (v9 >= 2 && v9 != 6)
    turi::unity_sarray::max(void)::$_1::operator()();
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 0;
  if (v9 == 6)
  {
    time_rep = (void **)boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(3);
    v13 = turi::flexible_type_impl::ptime_to_time_t((uint64_t *)&time_rep) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        v14 = (unint64_t *)*a2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          v17 = *a2;
          if (!*a2)
            goto LABEL_58;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          goto LABEL_57;
        }
        break;
      case 3:
        v28 = (unint64_t *)*a2;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          goto LABEL_57;
        }
        break;
      case 4:
        v20 = (unint64_t *)*a2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v234.__locale_ = (std::locale::__imp *)(v23 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_50;
        }
        break;
      case 5:
        v33 = (unint64_t *)*a2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v23 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v234.__locale_ = (std::locale::__imp *)(v23 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_50:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          goto LABEL_57;
        }
        break;
      case 8:
        v36 = (unint64_t *)*a2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *a2;
          if (!*a2)
            goto LABEL_58;
          boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
          v18 = (_QWORD *)v39;
          v27 = -235920773;
          goto LABEL_56;
        }
        break;
      case 9:
        v24 = (unint64_t *)*a2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          if (*a2)
          {
            v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a2);
            v27 = 2071181815;
LABEL_56:
            v19 = v27 | 0x1030C4000000000;
LABEL_57:
            MEMORY[0x219A19A08](v18, v19);
          }
LABEL_58:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
    *((_BYTE *)a2 + 12) = 6;
    *a2 = v13;
    *((_DWORD *)a2 + 2) = 0;
  }
  else
  {
    if (v9 == 1)
    {
      v11 = (unint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((_BYTE *)a2 + 12) = 1;
      v12 = 0xFFEFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((_BYTE)v9)
        goto LABEL_60;
      v11 = (unint64_t *)a2;
      *((_DWORD *)a2 + 2) = 0;
      *((_BYTE *)a2 + 12) = 0;
      v12 = 0x8000000000000000;
    }
    *v11 = v12;
  }
LABEL_60:
  v40 = this[4];
  v198 = (uint64_t)this[3];
  v199 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  *(_QWORD *)((char *)v224 + 5) = 0x700000000000000;
  v224[0] = 0;
  v213 = a2;
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::generic_aggregator((uint64_t)v235, (uint64_t)a2, (uint64_t)v224);
  v209 = v198;
  v210 = v199;
  if (v199)
  {
    v43 = (unint64_t *)&v199->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v209, v235, 2, &v211);
  v45 = v210;
  if (v210)
  {
    v46 = (unint64_t *)&v210->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v207 = v211;
  v208 = v212;
  if (v212)
  {
    v48 = (unint64_t *)&v212->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v232 = 0u;
  v233 = 0u;
  v230 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v229, 0, sizeof(v229));
  BYTE11(v230) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v233 = 0uLL;
  *((_QWORD *)&v232 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v207, (uint64_t)v229, (const turi::sframe *)&v234);
  time_rep = (void **)&v232 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  if (SBYTE7(v232) < 0)
    operator delete(__p[0]);
  v50 = (_QWORD *)v230;
  if ((_OWORD *)v230 == (_OWORD *)((char *)v229 + 8))
  {
    v51 = 4;
    v50 = (_QWORD *)v229 + 1;
    goto LABEL_80;
  }
  if ((_QWORD)v230)
  {
    v51 = 5;
LABEL_80:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = v208;
  if (v208)
  {
    v53 = (unint64_t *)&v208->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v234, 1, &v206);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v206 + 32))(&v201, v206, 0);
  *(_QWORD *)((char *)v225 + 5) = *(_QWORD *)((char *)v224 + 5);
  v225[0] = v224[0];
  BYTE4(v225[1]) = BYTE4(v224[1]);
  if (BYTE4(v224[1]) <= 9u && ((1 << SBYTE4(v224[1])) & 0x33C) != 0)
  {
    v55 = (unint64_t *)v225[0];
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v57 = (void **)*MEMORY[0x24BEDB7F0];
  v58 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v197 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v196 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v206 + 40))(&time_rep, v206, 0);
    if (v201 != time_rep || v202[3] != v218)
    {
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
      goto LABEL_96;
    }
    v59 = v203;
    v60 = v219;
    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    if (v59 != v60)
    {
LABEL_96:
      v61 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v201);
      v62 = *v61;
      switch(*((_BYTE *)*v61 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&time_rep);
          std::ostream::operator<<();
          std::stringbuf::str();
          time_rep = v57;
          *(void ***)((char *)&time_rep + (_QWORD)*(v57 - 3)) = v197;
          v216 = v58;
          v63 = v196;
          goto LABEL_105;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&time_rep);
          std::ostream::operator<<();
          std::stringbuf::str();
          time_rep = v57;
          *(void ***)((char *)&time_rep + (_QWORD)*(v57 - 3)) = v197;
          v63 = MEMORY[0x24BEDB848] + 16;
          v216 = v58;
LABEL_105:
          v217 = v63;
          if (v222 < 0)
            operator delete(v221);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v223);
          goto LABEL_112;
        case 2:
          v64 = *(_QWORD *)v62;
          if (*(char *)(*(_QWORD *)v62 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
          }
          else
          {
            v65 = *(_OWORD *)(v64 + 8);
            v200.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 24);
            *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v65;
          }
          goto LABEL_112;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (uint64_t *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v62, &v200);
          goto LABEL_112;
        case 7:
          memset(&v200, 0, sizeof(v200));
          goto LABEL_112;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_112;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
LABEL_112:
          size = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v200;
          else
            v67 = (std::string *)v200.__r_.__value_.__r.__words[0];
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v200.__r_.__value_.__l.__size_;
          time_rep = 0;
          v215 = 0;
          v216 = v67;
          v217 = 0;
          v218 = size;
          turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)&time_rep, &v226);
          turi::unity_sarray::max(void)::$_0::operator()((uint64_t)&v213, (uint64_t)&v226, (uint64_t)v225, v68);
          v70 = v202[0];
          v69 = v202[1];
          while (v70 != v69)
          {
            turi::sarray_iterator<turi::flexible_type>::operator++(v70);
            v70 += 48;
          }
          if (v203 + 1 < v204)
            v71 = v203 + 1;
          else
            v71 = v204;
          v203 = v71;
          if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v200.__r_.__value_.__l.__data_);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  switch(v228)
  {
    case 2:
      v72 = v226;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v226;
        if (v226)
        {
          if (*((char *)v226 + 31) < 0)
            operator delete((void *)v226[1]);
          v76 = v75;
          v77 = 0x1012C404EF22A49;
          goto LABEL_166;
        }
      }
      break;
    case 3:
      v89 = v226;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = v226;
        if (v226)
        {
          v93 = (void *)v226[1];
          if (v93)
          {
            v226[2] = v93;
            operator delete(v93);
          }
          v76 = v92;
          v77 = 0x1080C409938AC02;
          goto LABEL_166;
        }
      }
      break;
    case 4:
      v78 = v226;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = v226;
        if (v226)
        {
          time_rep = (void **)(v226 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&time_rep);
          goto LABEL_159;
        }
      }
      break;
    case 5:
      v94 = v226;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = v226;
        if (v226)
        {
          time_rep = (void **)(v226 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&time_rep);
LABEL_159:
          v76 = v81;
          v77 = 0x1020C405E66F15BLL;
          goto LABEL_166;
        }
      }
      break;
    case 8:
      v97 = v226;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = v226;
        if (v226)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v226 + 2);
          v76 = v100;
          v88 = -235920773;
          goto LABEL_165;
        }
      }
      break;
    case 9:
      v82 = v226;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = v226;
        if (v226)
        {
          v86 = (void *)v226[6];
          if (v86)
          {
            v226[7] = v86;
            operator delete(v86);
          }
          v87 = (void *)v85[3];
          if (v87)
          {
            v85[4] = v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_165:
          v77 = v88 | 0x1030C4000000000;
LABEL_166:
          MEMORY[0x219A19A08](v76, v77);
        }
      }
      break;
    default:
      break;
  }
  time_rep = (void **)&v205;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  time_rep = (void **)v202;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  v101 = v206;
  v206 = 0;
  if (v101)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v101 + 8))(v101);
  turi::sframe::~sframe((turi::sframe *)&v234);
  v102 = v212;
  if (v212)
  {
    v103 = (unint64_t *)&v212->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator((uint64_t)v235);
  if (v225 == a2)
  {
    switch(BYTE4(v225[1]))
    {
      case 2:
        v165 = (unint64_t *)*a2;
        do
        {
          v166 = __ldaxr(v165);
          v167 = v166 - 1;
        }
        while (__stlxr(v167, v165));
        if (!v167)
        {
          v168 = *a2;
          if (!*a2)
            goto LABEL_309;
          if (*(char *)(v168 + 31) < 0)
            operator delete(*(void **)(v168 + 8));
          v169 = (_QWORD *)v168;
          v170 = 0x1012C404EF22A49;
          goto LABEL_308;
        }
        break;
      case 3:
        v182 = (unint64_t *)*a2;
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          v185 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v186 = (void *)v185[1];
          if (v186)
          {
            v185[2] = v186;
            operator delete(v186);
          }
          v169 = v185;
          v170 = 0x1080C409938AC02;
          goto LABEL_308;
        }
        break;
      case 4:
        v171 = (unint64_t *)*a2;
        do
        {
          v172 = __ldaxr(v171);
          v173 = v172 - 1;
        }
        while (__stlxr(v173, v171));
        if (!v173)
        {
          v174 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v234.__locale_ = (std::locale::__imp *)(v174 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_301;
        }
        break;
      case 5:
        v187 = (unint64_t *)*a2;
        do
        {
          v188 = __ldaxr(v187);
          v189 = v188 - 1;
        }
        while (__stlxr(v189, v187));
        if (!v189)
        {
          v174 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v234.__locale_ = (std::locale::__imp *)(v174 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_301:
          v169 = v174;
          v170 = 0x1020C405E66F15BLL;
          goto LABEL_308;
        }
        break;
      case 8:
        v190 = (unint64_t *)*a2;
        do
        {
          v191 = __ldaxr(v190);
          v192 = v191 - 1;
        }
        while (__stlxr(v192, v190));
        if (!v192)
        {
          v193 = *a2;
          if (!*a2)
            goto LABEL_309;
          boost::detail::shared_count::~shared_count((unsigned int **)(v193 + 16));
          v169 = (_QWORD *)v193;
          v181 = -235920773;
          goto LABEL_307;
        }
        break;
      case 9:
        v175 = (unint64_t *)*a2;
        do
        {
          v176 = __ldaxr(v175);
          v177 = v176 - 1;
        }
        while (__stlxr(v177, v175));
        if (!v177)
        {
          v178 = (_QWORD *)*a2;
          if (*a2)
          {
            v179 = (void *)v178[6];
            if (v179)
            {
              v178[7] = v179;
              operator delete(v179);
            }
            v180 = (void *)v178[3];
            if (v180)
            {
              v178[4] = v180;
              operator delete(v180);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v178 + 1));
            v169 = v178;
            v181 = 2071181815;
LABEL_307:
            v170 = v181 | 0x1030C4000000000;
LABEL_308:
            MEMORY[0x219A19A08](v169, v170);
          }
LABEL_309:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
  }
  else
  {
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        v105 = (unint64_t *)*a2;
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          v108 = *a2;
          if (!*a2)
            goto LABEL_217;
          if (*(char *)(v108 + 31) < 0)
            operator delete(*(void **)(v108 + 8));
          v109 = (_QWORD *)v108;
          v110 = 0x1012C404EF22A49;
          goto LABEL_216;
        }
        break;
      case 3:
        v122 = (unint64_t *)*a2;
        do
        {
          v123 = __ldaxr(v122);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, v122));
        if (!v124)
        {
          v125 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v126 = (void *)v125[1];
          if (v126)
          {
            v125[2] = v126;
            operator delete(v126);
          }
          v109 = v125;
          v110 = 0x1080C409938AC02;
          goto LABEL_216;
        }
        break;
      case 4:
        v111 = (unint64_t *)*a2;
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          v114 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v234.__locale_ = (std::locale::__imp *)(v114 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_209;
        }
        break;
      case 5:
        v127 = (unint64_t *)*a2;
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
        {
          v114 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v234.__locale_ = (std::locale::__imp *)(v114 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_209:
          v109 = v114;
          v110 = 0x1020C405E66F15BLL;
          goto LABEL_216;
        }
        break;
      case 8:
        v130 = (unint64_t *)*a2;
        do
        {
          v131 = __ldaxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
        {
          v133 = *a2;
          if (!*a2)
            goto LABEL_217;
          boost::detail::shared_count::~shared_count((unsigned int **)(v133 + 16));
          v109 = (_QWORD *)v133;
          v121 = -235920773;
          goto LABEL_215;
        }
        break;
      case 9:
        v115 = (unint64_t *)*a2;
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
        {
          v118 = (_QWORD *)*a2;
          if (*a2)
          {
            v119 = (void *)v118[6];
            if (v119)
            {
              v118[7] = v119;
              operator delete(v119);
            }
            v120 = (void *)v118[3];
            if (v120)
            {
              v118[4] = v120;
              operator delete(v120);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v118 + 1));
            v109 = v118;
            v121 = 2071181815;
LABEL_215:
            v110 = v121 | 0x1030C4000000000;
LABEL_216:
            MEMORY[0x219A19A08](v109, v110);
          }
LABEL_217:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
    *(uint64_t *)((char *)a2 + 5) = *(_QWORD *)((char *)v225 + 5);
    *a2 = v225[0];
    *((_BYTE *)a2 + 12) = BYTE4(v225[1]);
    BYTE4(v225[1]) = 0;
  }
  memset(v225, 0, 13);
  switch(BYTE4(v224[1]))
  {
    case 2:
      v134 = (unint64_t *)v224[0];
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        v137 = v224[0];
        if (v224[0])
        {
          if (*(char *)(v224[0] + 31) < 0)
            operator delete(*(void **)(v224[0] + 8));
          v138 = v137;
          v139 = 0x1012C404EF22A49;
          goto LABEL_260;
        }
      }
      break;
    case 3:
      v151 = (unint64_t *)v224[0];
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      if (!v153)
      {
        v154 = v224[0];
        if (v224[0])
        {
          v155 = *(void **)(v224[0] + 8);
          if (v155)
          {
            *(_QWORD *)(v224[0] + 16) = v155;
            operator delete(v155);
          }
          v138 = v154;
          v139 = 0x1080C409938AC02;
          goto LABEL_260;
        }
      }
      break;
    case 4:
      v140 = (unint64_t *)v224[0];
      do
      {
        v141 = __ldaxr(v140);
        v142 = v141 - 1;
      }
      while (__stlxr(v142, v140));
      if (!v142)
      {
        v143 = v224[0];
        if (v224[0])
        {
          v234.__locale_ = (std::locale::__imp *)(v224[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_253;
        }
      }
      break;
    case 5:
      v156 = (unint64_t *)v224[0];
      do
      {
        v157 = __ldaxr(v156);
        v158 = v157 - 1;
      }
      while (__stlxr(v158, v156));
      if (!v158)
      {
        v143 = v224[0];
        if (v224[0])
        {
          v234.__locale_ = (std::locale::__imp *)(v224[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_253:
          v138 = v143;
          v139 = 0x1020C405E66F15BLL;
          goto LABEL_260;
        }
      }
      break;
    case 8:
      v159 = (unint64_t *)v224[0];
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        v162 = v224[0];
        if (v224[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224[0] + 16));
          v138 = v162;
          v150 = -235920773;
          goto LABEL_259;
        }
      }
      break;
    case 9:
      v144 = (unint64_t *)v224[0];
      do
      {
        v145 = __ldaxr(v144);
        v146 = v145 - 1;
      }
      while (__stlxr(v146, v144));
      if (!v146)
      {
        v147 = v224[0];
        if (v224[0])
        {
          v148 = *(void **)(v224[0] + 48);
          if (v148)
          {
            *(_QWORD *)(v224[0] + 56) = v148;
            operator delete(v148);
          }
          v149 = *(void **)(v147 + 24);
          if (v149)
          {
            *(_QWORD *)(v147 + 32) = v149;
            operator delete(v149);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v147 + 8);
          v138 = v147;
          v150 = 2071181815;
LABEL_259:
          v139 = v150 | 0x1030C4000000000;
LABEL_260:
          MEMORY[0x219A19A08](v138, v139);
        }
      }
      break;
    default:
      break;
  }
  memset(v224, 0, 13);
  if (v199)
  {
    v163 = (unint64_t *)&v199->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
}

void sub_2181CF3EC(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::min(std::__shared_weak_count **this@<X0>, uint64_t *a2@<X8>)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned int v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  void **v57;
  std::string *v58;
  unint64_t v59;
  uint64_t v60;
  turi::flexible_type_impl **v61;
  turi::flexible_type_impl *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string::size_type size;
  std::string *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  void *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  turi::sframe_reader *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  void *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  unsigned int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  void *v179;
  void *v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  void *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  _QWORD *exception;
  uint64_t v196;
  void **v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::string v200;
  void **v201;
  _QWORD v202[4];
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  turi::sframe_reader *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t *v213;
  void **time_rep;
  uint64_t v215;
  std::string *v216;
  uint64_t v217;
  std::string::size_type v218;
  uint64_t v219;
  _BYTE v220[32];
  void *v221;
  char v222;
  uint64_t v223;
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD *v226;
  int v227;
  char v228;
  _OWORD v229[2];
  __int128 v230;
  void *__p[2];
  __int128 v232;
  __int128 v233;
  std::locale v234;
  uint64_t (**v235[9])(_QWORD);

  v235[6] = *(uint64_t (***)(_QWORD))MEMORY[0x24BDAC8D0];
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "min", 875, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(&v234, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v234);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v9 = ((uint64_t (*)(std::__shared_weak_count **))(*this)[4].__shared_weak_owners_)(this);
  if (v9 >= 2 && v9 != 6)
    turi::unity_sarray::min(void)::$_1::operator()();
  *a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 0;
  if (v9 == 6)
  {
    time_rep = (void **)boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(4);
    v13 = turi::flexible_type_impl::ptime_to_time_t((uint64_t *)&time_rep) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        v14 = (unint64_t *)*a2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          v17 = *a2;
          if (!*a2)
            goto LABEL_58;
          if (*(char *)(v17 + 31) < 0)
            operator delete(*(void **)(v17 + 8));
          v18 = (_QWORD *)v17;
          v19 = 0x1012C404EF22A49;
          goto LABEL_57;
        }
        break;
      case 3:
        v28 = (unint64_t *)*a2;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v32 = (void *)v31[1];
          if (v32)
          {
            v31[2] = v32;
            operator delete(v32);
          }
          v18 = v31;
          v19 = 0x1080C409938AC02;
          goto LABEL_57;
        }
        break;
      case 4:
        v20 = (unint64_t *)*a2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v234.__locale_ = (std::locale::__imp *)(v23 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_50;
        }
        break;
      case 5:
        v33 = (unint64_t *)*a2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v23 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_58;
          v234.__locale_ = (std::locale::__imp *)(v23 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_50:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          goto LABEL_57;
        }
        break;
      case 8:
        v36 = (unint64_t *)*a2;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *a2;
          if (!*a2)
            goto LABEL_58;
          boost::detail::shared_count::~shared_count((unsigned int **)(v39 + 16));
          v18 = (_QWORD *)v39;
          v27 = -235920773;
          goto LABEL_56;
        }
        break;
      case 9:
        v24 = (unint64_t *)*a2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          if (*a2)
          {
            v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)*a2);
            v27 = 2071181815;
LABEL_56:
            v19 = v27 | 0x1030C4000000000;
LABEL_57:
            MEMORY[0x219A19A08](v18, v19);
          }
LABEL_58:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
    *((_BYTE *)a2 + 12) = 6;
    *a2 = v13;
    *((_DWORD *)a2 + 2) = 0;
  }
  else
  {
    if (v9 == 1)
    {
      v11 = a2;
      *((_DWORD *)a2 + 2) = 0;
      *((_BYTE *)a2 + 12) = 1;
      v12 = 0x7FEFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((_BYTE)v9)
        goto LABEL_60;
      v11 = a2;
      *((_DWORD *)a2 + 2) = 0;
      *((_BYTE *)a2 + 12) = 0;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *v11 = v12;
  }
LABEL_60:
  v40 = this[4];
  v198 = (uint64_t)this[3];
  v199 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  *(_QWORD *)((char *)v224 + 5) = 0x700000000000000;
  v224[0] = 0;
  v213 = a2;
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::generic_aggregator((uint64_t)v235, (uint64_t)a2, (uint64_t)v224);
  v209 = v198;
  v210 = v199;
  if (v199)
  {
    v43 = (unint64_t *)&v199->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v209, v235, 2, &v211);
  v45 = v210;
  if (v210)
  {
    v46 = (unint64_t *)&v210->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v207 = v211;
  v208 = v212;
  if (v212)
  {
    v48 = (unint64_t *)&v212->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v232 = 0u;
  v233 = 0u;
  v230 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v229, 0, sizeof(v229));
  BYTE11(v230) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v233 = 0uLL;
  *((_QWORD *)&v232 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v207, (uint64_t)v229, (const turi::sframe *)&v234);
  time_rep = (void **)&v232 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  if (SBYTE7(v232) < 0)
    operator delete(__p[0]);
  v50 = (_QWORD *)v230;
  if ((_OWORD *)v230 == (_OWORD *)((char *)v229 + 8))
  {
    v51 = 4;
    v50 = (_QWORD *)v229 + 1;
    goto LABEL_80;
  }
  if ((_QWORD)v230)
  {
    v51 = 5;
LABEL_80:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = v208;
  if (v208)
  {
    v53 = (unint64_t *)&v208->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v234, 1, &v206);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v206 + 32))(&v201, v206, 0);
  *(_QWORD *)((char *)v225 + 5) = *(_QWORD *)((char *)v224 + 5);
  v225[0] = v224[0];
  BYTE4(v225[1]) = BYTE4(v224[1]);
  if (BYTE4(v224[1]) <= 9u && ((1 << SBYTE4(v224[1])) & 0x33C) != 0)
  {
    v55 = (unint64_t *)v225[0];
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v57 = (void **)*MEMORY[0x24BEDB7F0];
  v58 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v197 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v196 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v206 + 40))(&time_rep, v206, 0);
    if (v201 != time_rep || v202[3] != v218)
    {
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
      v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
      goto LABEL_96;
    }
    v59 = v203;
    v60 = v219;
    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    v200.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
    if (v59 != v60)
    {
LABEL_96:
      v61 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v201);
      v62 = *v61;
      switch(*((_BYTE *)*v61 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&time_rep);
          std::ostream::operator<<();
          std::stringbuf::str();
          time_rep = v57;
          *(void ***)((char *)&time_rep + (_QWORD)*(v57 - 3)) = v197;
          v216 = v58;
          v63 = v196;
          goto LABEL_105;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&time_rep);
          std::ostream::operator<<();
          std::stringbuf::str();
          time_rep = v57;
          *(void ***)((char *)&time_rep + (_QWORD)*(v57 - 3)) = v197;
          v63 = MEMORY[0x24BEDB848] + 16;
          v216 = v58;
LABEL_105:
          v217 = v63;
          if (v222 < 0)
            operator delete(v221);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v223);
          goto LABEL_112;
        case 2:
          v64 = *(_QWORD *)v62;
          if (*(char *)(*(_QWORD *)v62 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(v64 + 8), *(_QWORD *)(v64 + 16));
          }
          else
          {
            v65 = *(_OWORD *)(v64 + 8);
            v200.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 24);
            *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v65;
          }
          goto LABEL_112;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (uint64_t *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
          goto LABEL_112;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v62, &v200);
          goto LABEL_112;
        case 7:
          memset(&v200, 0, sizeof(v200));
          goto LABEL_112;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_112;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&time_rep, (_QWORD *)(*(_QWORD *)v62 + 8));
LABEL_112:
          size = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v200;
          else
            v67 = (std::string *)v200.__r_.__value_.__r.__words[0];
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v200.__r_.__value_.__l.__size_;
          time_rep = 0;
          v215 = 0;
          v216 = v67;
          v217 = 0;
          v218 = size;
          turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)&time_rep, &v226);
          turi::unity_sarray::min(void)::$_0::operator()((uint64_t)&v213, (uint64_t *)&v226, (unsigned __int8 *)v225, v68);
          v70 = v202[0];
          v69 = v202[1];
          while (v70 != v69)
          {
            turi::sarray_iterator<turi::flexible_type>::operator++(v70);
            v70 += 48;
          }
          if (v203 + 1 < v204)
            v71 = v203 + 1;
          else
            v71 = v204;
          v203 = v71;
          if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v200.__r_.__value_.__l.__data_);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  switch(v228)
  {
    case 2:
      v72 = v226;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v226;
        if (v226)
        {
          if (*((char *)v226 + 31) < 0)
            operator delete((void *)v226[1]);
          v76 = v75;
          v77 = 0x1012C404EF22A49;
          goto LABEL_166;
        }
      }
      break;
    case 3:
      v89 = v226;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = v226;
        if (v226)
        {
          v93 = (void *)v226[1];
          if (v93)
          {
            v226[2] = v93;
            operator delete(v93);
          }
          v76 = v92;
          v77 = 0x1080C409938AC02;
          goto LABEL_166;
        }
      }
      break;
    case 4:
      v78 = v226;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = v226;
        if (v226)
        {
          time_rep = (void **)(v226 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&time_rep);
          goto LABEL_159;
        }
      }
      break;
    case 5:
      v94 = v226;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = v226;
        if (v226)
        {
          time_rep = (void **)(v226 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&time_rep);
LABEL_159:
          v76 = v81;
          v77 = 0x1020C405E66F15BLL;
          goto LABEL_166;
        }
      }
      break;
    case 8:
      v97 = v226;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = v226;
        if (v226)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v226 + 2);
          v76 = v100;
          v88 = -235920773;
          goto LABEL_165;
        }
      }
      break;
    case 9:
      v82 = v226;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = v226;
        if (v226)
        {
          v86 = (void *)v226[6];
          if (v86)
          {
            v226[7] = v86;
            operator delete(v86);
          }
          v87 = (void *)v85[3];
          if (v87)
          {
            v85[4] = v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_165:
          v77 = v88 | 0x1030C4000000000;
LABEL_166:
          MEMORY[0x219A19A08](v76, v77);
        }
      }
      break;
    default:
      break;
  }
  time_rep = (void **)&v205;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  time_rep = (void **)v202;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&time_rep);
  v101 = v206;
  v206 = 0;
  if (v101)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v101 + 8))(v101);
  turi::sframe::~sframe((turi::sframe *)&v234);
  v102 = v212;
  if (v212)
  {
    v103 = (unint64_t *)&v212->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator((uint64_t)v235);
  if (v225 == a2)
  {
    switch(BYTE4(v225[1]))
    {
      case 2:
        v165 = (unint64_t *)*a2;
        do
        {
          v166 = __ldaxr(v165);
          v167 = v166 - 1;
        }
        while (__stlxr(v167, v165));
        if (!v167)
        {
          v168 = *a2;
          if (!*a2)
            goto LABEL_309;
          if (*(char *)(v168 + 31) < 0)
            operator delete(*(void **)(v168 + 8));
          v169 = (_QWORD *)v168;
          v170 = 0x1012C404EF22A49;
          goto LABEL_308;
        }
        break;
      case 3:
        v182 = (unint64_t *)*a2;
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          v185 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v186 = (void *)v185[1];
          if (v186)
          {
            v185[2] = v186;
            operator delete(v186);
          }
          v169 = v185;
          v170 = 0x1080C409938AC02;
          goto LABEL_308;
        }
        break;
      case 4:
        v171 = (unint64_t *)*a2;
        do
        {
          v172 = __ldaxr(v171);
          v173 = v172 - 1;
        }
        while (__stlxr(v173, v171));
        if (!v173)
        {
          v174 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v234.__locale_ = (std::locale::__imp *)(v174 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_301;
        }
        break;
      case 5:
        v187 = (unint64_t *)*a2;
        do
        {
          v188 = __ldaxr(v187);
          v189 = v188 - 1;
        }
        while (__stlxr(v189, v187));
        if (!v189)
        {
          v174 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_309;
          v234.__locale_ = (std::locale::__imp *)(v174 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_301:
          v169 = v174;
          v170 = 0x1020C405E66F15BLL;
          goto LABEL_308;
        }
        break;
      case 8:
        v190 = (unint64_t *)*a2;
        do
        {
          v191 = __ldaxr(v190);
          v192 = v191 - 1;
        }
        while (__stlxr(v192, v190));
        if (!v192)
        {
          v193 = *a2;
          if (!*a2)
            goto LABEL_309;
          boost::detail::shared_count::~shared_count((unsigned int **)(v193 + 16));
          v169 = (_QWORD *)v193;
          v181 = -235920773;
          goto LABEL_307;
        }
        break;
      case 9:
        v175 = (unint64_t *)*a2;
        do
        {
          v176 = __ldaxr(v175);
          v177 = v176 - 1;
        }
        while (__stlxr(v177, v175));
        if (!v177)
        {
          v178 = (_QWORD *)*a2;
          if (*a2)
          {
            v179 = (void *)v178[6];
            if (v179)
            {
              v178[7] = v179;
              operator delete(v179);
            }
            v180 = (void *)v178[3];
            if (v180)
            {
              v178[4] = v180;
              operator delete(v180);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v178 + 1));
            v169 = v178;
            v181 = 2071181815;
LABEL_307:
            v170 = v181 | 0x1030C4000000000;
LABEL_308:
            MEMORY[0x219A19A08](v169, v170);
          }
LABEL_309:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
  }
  else
  {
    switch(*((_BYTE *)a2 + 12))
    {
      case 2:
        v105 = (unint64_t *)*a2;
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          v108 = *a2;
          if (!*a2)
            goto LABEL_217;
          if (*(char *)(v108 + 31) < 0)
            operator delete(*(void **)(v108 + 8));
          v109 = (_QWORD *)v108;
          v110 = 0x1012C404EF22A49;
          goto LABEL_216;
        }
        break;
      case 3:
        v122 = (unint64_t *)*a2;
        do
        {
          v123 = __ldaxr(v122);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, v122));
        if (!v124)
        {
          v125 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v126 = (void *)v125[1];
          if (v126)
          {
            v125[2] = v126;
            operator delete(v126);
          }
          v109 = v125;
          v110 = 0x1080C409938AC02;
          goto LABEL_216;
        }
        break;
      case 4:
        v111 = (unint64_t *)*a2;
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          v114 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v234.__locale_ = (std::locale::__imp *)(v114 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_209;
        }
        break;
      case 5:
        v127 = (unint64_t *)*a2;
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
        {
          v114 = (_QWORD *)*a2;
          if (!*a2)
            goto LABEL_217;
          v234.__locale_ = (std::locale::__imp *)(v114 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_209:
          v109 = v114;
          v110 = 0x1020C405E66F15BLL;
          goto LABEL_216;
        }
        break;
      case 8:
        v130 = (unint64_t *)*a2;
        do
        {
          v131 = __ldaxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
        {
          v133 = *a2;
          if (!*a2)
            goto LABEL_217;
          boost::detail::shared_count::~shared_count((unsigned int **)(v133 + 16));
          v109 = (_QWORD *)v133;
          v121 = -235920773;
          goto LABEL_215;
        }
        break;
      case 9:
        v115 = (unint64_t *)*a2;
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
        {
          v118 = (_QWORD *)*a2;
          if (*a2)
          {
            v119 = (void *)v118[6];
            if (v119)
            {
              v118[7] = v119;
              operator delete(v119);
            }
            v120 = (void *)v118[3];
            if (v120)
            {
              v118[4] = v120;
              operator delete(v120);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v118 + 1));
            v109 = v118;
            v121 = 2071181815;
LABEL_215:
            v110 = v121 | 0x1030C4000000000;
LABEL_216:
            MEMORY[0x219A19A08](v109, v110);
          }
LABEL_217:
          *a2 = 0;
        }
        break;
      default:
        break;
    }
    *(uint64_t *)((char *)a2 + 5) = *(_QWORD *)((char *)v225 + 5);
    *a2 = v225[0];
    *((_BYTE *)a2 + 12) = BYTE4(v225[1]);
    BYTE4(v225[1]) = 0;
  }
  memset(v225, 0, 13);
  switch(BYTE4(v224[1]))
  {
    case 2:
      v134 = (unint64_t *)v224[0];
      do
      {
        v135 = __ldaxr(v134);
        v136 = v135 - 1;
      }
      while (__stlxr(v136, v134));
      if (!v136)
      {
        v137 = v224[0];
        if (v224[0])
        {
          if (*(char *)(v224[0] + 31) < 0)
            operator delete(*(void **)(v224[0] + 8));
          v138 = v137;
          v139 = 0x1012C404EF22A49;
          goto LABEL_260;
        }
      }
      break;
    case 3:
      v151 = (unint64_t *)v224[0];
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      if (!v153)
      {
        v154 = v224[0];
        if (v224[0])
        {
          v155 = *(void **)(v224[0] + 8);
          if (v155)
          {
            *(_QWORD *)(v224[0] + 16) = v155;
            operator delete(v155);
          }
          v138 = v154;
          v139 = 0x1080C409938AC02;
          goto LABEL_260;
        }
      }
      break;
    case 4:
      v140 = (unint64_t *)v224[0];
      do
      {
        v141 = __ldaxr(v140);
        v142 = v141 - 1;
      }
      while (__stlxr(v142, v140));
      if (!v142)
      {
        v143 = v224[0];
        if (v224[0])
        {
          v234.__locale_ = (std::locale::__imp *)(v224[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
          goto LABEL_253;
        }
      }
      break;
    case 5:
      v156 = (unint64_t *)v224[0];
      do
      {
        v157 = __ldaxr(v156);
        v158 = v157 - 1;
      }
      while (__stlxr(v158, v156));
      if (!v158)
      {
        v143 = v224[0];
        if (v224[0])
        {
          v234.__locale_ = (std::locale::__imp *)(v224[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
LABEL_253:
          v138 = v143;
          v139 = 0x1020C405E66F15BLL;
          goto LABEL_260;
        }
      }
      break;
    case 8:
      v159 = (unint64_t *)v224[0];
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        v162 = v224[0];
        if (v224[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224[0] + 16));
          v138 = v162;
          v150 = -235920773;
          goto LABEL_259;
        }
      }
      break;
    case 9:
      v144 = (unint64_t *)v224[0];
      do
      {
        v145 = __ldaxr(v144);
        v146 = v145 - 1;
      }
      while (__stlxr(v146, v144));
      if (!v146)
      {
        v147 = v224[0];
        if (v224[0])
        {
          v148 = *(void **)(v224[0] + 48);
          if (v148)
          {
            *(_QWORD *)(v224[0] + 56) = v148;
            operator delete(v148);
          }
          v149 = *(void **)(v147 + 24);
          if (v149)
          {
            *(_QWORD *)(v147 + 32) = v149;
            operator delete(v149);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v147 + 8);
          v138 = v147;
          v150 = 2071181815;
LABEL_259:
          v139 = v150 | 0x1030C4000000000;
LABEL_260:
          MEMORY[0x219A19A08](v138, v139);
        }
      }
      break;
    default:
      break;
  }
  memset(v224, 0, 13);
  if (v199)
  {
    v163 = (unint64_t *)&v199->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
}

void sub_2181D0E00(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::sum(turi::unity_sarray *this@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned int v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  std::string *v32;
  unint64_t v33;
  uint64_t v34;
  turi::flexible_type_impl **v35;
  turi::flexible_type_impl *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  std::string::size_type v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  turi::sframe_reader *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void **v72;
  std::string *v73;
  unint64_t v74;
  uint64_t v75;
  turi::flexible_type_impl **v76;
  turi::flexible_type_impl *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  std::string::size_type v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  turi::sframe_reader *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  unsigned int v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  turi::sframe_reader *v118;
  std::__shared_weak_count *size;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  void *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  unint64_t v148;
  _QWORD *exception;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  void **v153;
  void **v154;
  char v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  std::string v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _BYTE v166[24];
  turi::sframe_reader *v167;
  _QWORD *v168;
  std::__shared_weak_count *v169;
  turi::sframe_reader *v170;
  std::__shared_weak_count *v171;
  char *v172;
  void **v173;
  uint64_t v174;
  std::string *v175;
  uint64_t v176;
  std::string::size_type v177;
  uint64_t v178;
  _BYTE v179[32];
  void *v180;
  char v181;
  _BYTE v182[152];
  char v183[8];
  _BYTE v184[13];
  _BYTE v185[21];
  uint64_t v186[3];
  _QWORD *v187[2];
  std::string v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 __p;
  __int128 v193;
  __int128 v194;
  std::locale v195;
  _QWORD *v196;
  std::__shared_weak_count *v197;
  uint64_t (**v198[2])(_QWORD);
  uint64_t v199;
  _QWORD v200[6];

  v200[3] = *MEMORY[0x24BDAC8D0];
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "sum", 910, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(&v195, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v195);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v9 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
  v10 = v9;
  if (v9 <= 1)
  {
    v12 = *((_QWORD *)this + 3);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v157 = v12;
    v158 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    memset(v187, 0, 13);
    BYTE4(v187[1]) = v9 != 0;
    turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::generic_aggregator((uint64_t)v198, (uint64_t)v187);
    v186[0] = v12;
    v186[1] = (uint64_t)v11;
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(v186, v198, 2, &v159);
    v17 = (std::__shared_weak_count *)v186[1];
    if (v186[1])
    {
      v18 = (unint64_t *)(v186[1] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_OWORD *)v185 = *(_OWORD *)&v159.__r_.__value_.__l.__data_;
    if (v159.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v191 = 0u;
    v194 = 0u;
    v193 = 0u;
    __p = 0u;
    v190 = 0u;
    v189 = 0u;
    BYTE11(v191) = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v194 = 0uLL;
    *((_QWORD *)&v193 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)v185, (uint64_t)&v189, (const turi::sframe *)&v195);
    v173 = (void **)&v193 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v173);
    if (SBYTE7(v193) < 0)
      operator delete((void *)__p);
    v22 = (_QWORD *)v191;
    if ((__int128 *)v191 == (__int128 *)((char *)&v189 + 8))
    {
      v23 = 4;
      v22 = (_QWORD *)&v189 + 1;
    }
    else
    {
      if (!(_QWORD)v191)
        goto LABEL_37;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_37:
    v25 = *(std::__shared_weak_count **)&v185[8];
    if (*(_QWORD *)&v185[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&v185[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    turi::sframe::get_reader((turi::sframe *)&v195, 1, &v170);
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v170 + 32))(&v160, v170, 0);
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (v187 != (_QWORD **)a2)
    {
      *(_QWORD **)(a2 + 5) = *(_QWORD **)((char *)v187 + 5);
      *(_QWORD **)a2 = v187[0];
      v28 = BYTE4(v187[1]);
      *(_BYTE *)(a2 + 12) = BYTE4(v187[1]);
      if (v28 <= 9 && ((1 << v28) & 0x33C) != 0)
      {
        v29 = *(unint64_t **)a2;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
      }
    }
    v196 = 0;
    LODWORD(v197) = 0;
    BYTE4(v197) = 0;
    v31 = (void **)*MEMORY[0x24BEDB7F0];
    v32 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
    v153 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v151 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v170 + 40))(&v173, v170, 0);
      if (v160 == v173 && v163 == v177)
      {
        v33 = v164;
        v34 = v178;
        v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
        v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
        std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
        if (v33 == v34)
        {
          switch(BYTE4(v197))
          {
            case 2:
              v45 = v196;
              do
              {
                v46 = __ldaxr(v45);
                v47 = v46 - 1;
              }
              while (__stlxr(v47, v45));
              if (!v47)
              {
                v48 = v196;
                if (v196)
                {
                  if (*((char *)v196 + 31) < 0)
                    operator delete((void *)v196[1]);
                  v49 = v48;
                  v50 = 0x1012C404EF22A49;
                  goto LABEL_215;
                }
              }
              break;
            case 3:
              v106 = v196;
              do
              {
                v107 = __ldaxr(v106);
                v108 = v107 - 1;
              }
              while (__stlxr(v108, v106));
              if (!v108)
              {
                v109 = v196;
                if (v196)
                {
                  v110 = (void *)v196[1];
                  if (v110)
                  {
                    v196[2] = v110;
                    operator delete(v110);
                  }
                  v49 = v109;
                  v50 = 0x1080C409938AC02;
                  goto LABEL_215;
                }
              }
              break;
            case 4:
              v95 = v196;
              do
              {
                v96 = __ldaxr(v95);
                v97 = v96 - 1;
              }
              while (__stlxr(v97, v95));
              if (!v97)
              {
                v98 = v196;
                if (v196)
                {
                  v173 = (void **)(v196 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v173);
                  goto LABEL_208;
                }
              }
              break;
            case 5:
              v111 = v196;
              do
              {
                v112 = __ldaxr(v111);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v111));
              if (!v113)
              {
                v98 = v196;
                if (v196)
                {
                  v173 = (void **)(v196 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v173);
LABEL_208:
                  v49 = v98;
                  v50 = 0x1020C405E66F15BLL;
                  goto LABEL_215;
                }
              }
              break;
            case 8:
              v114 = v196;
              do
              {
                v115 = __ldaxr(v114);
                v116 = v115 - 1;
              }
              while (__stlxr(v116, v114));
              if (!v116)
              {
                v117 = v196;
                if (v196)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v196 + 2);
                  v49 = v117;
                  v105 = -235920773;
                  goto LABEL_214;
                }
              }
              break;
            case 9:
              v99 = v196;
              do
              {
                v100 = __ldaxr(v99);
                v101 = v100 - 1;
              }
              while (__stlxr(v101, v99));
              if (!v101)
              {
                v102 = v196;
                if (v196)
                {
                  v103 = (void *)v196[6];
                  if (v103)
                  {
                    v196[7] = v103;
                    operator delete(v103);
                  }
                  v104 = (void *)v102[3];
                  if (v104)
                  {
                    v102[4] = v104;
                    operator delete(v104);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v102 + 1));
                  v49 = v102;
                  v105 = 2071181815;
LABEL_214:
                  v50 = v105 | 0x1030C4000000000;
LABEL_215:
                  MEMORY[0x219A19A08](v49, v50);
                }
              }
              break;
            default:
              break;
          }
          v173 = (void **)v166;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v173);
          v173 = (void **)&v161;
          std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v173);
          v118 = v170;
          v170 = 0;
          if (v118)
            (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v118 + 8))(v118);
          turi::sframe::~sframe((turi::sframe *)&v195);
          size = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
          if (v159.__r_.__value_.__l.__size_)
          {
            v120 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator((uint64_t)v198);
          switch(BYTE4(v187[1]))
          {
            case 2:
              v122 = v187[0];
              do
              {
                v123 = __ldaxr(v122);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, v122));
              if (!v124)
              {
                v125 = v187[0];
                if (v187[0])
                {
                  if (*((char *)v187[0] + 31) < 0)
                    operator delete(*((void **)v187[0] + 1));
                  v126 = v125;
                  v127 = 0x1012C404EF22A49;
                  goto LABEL_254;
                }
              }
              break;
            case 3:
              v135 = v187[0];
              do
              {
                v136 = __ldaxr(v135);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, v135));
              if (!v137)
              {
                v138 = v187[0];
                if (v187[0])
                {
                  v139 = (void *)v187[0][1];
                  if (v139)
                  {
                    v187[0][2] = v139;
                    operator delete(v139);
                  }
                  v126 = v138;
                  v127 = 0x1080C409938AC02;
                  goto LABEL_254;
                }
              }
              break;
            case 4:
              v128 = v187[0];
              do
              {
                v129 = __ldaxr(v128);
                v130 = v129 - 1;
              }
              while (__stlxr(v130, v128));
              if (!v130)
              {
                v131 = v187[0];
                if (v187[0])
                {
                  v195.__locale_ = (std::locale::__imp *)(v187[0] + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
                  goto LABEL_253;
                }
              }
              break;
            case 5:
              v140 = v187[0];
              do
              {
                v141 = __ldaxr(v140);
                v142 = v141 - 1;
              }
              while (__stlxr(v142, v140));
              if (!v142)
              {
                v131 = v187[0];
                if (v187[0])
                {
                  v195.__locale_ = (std::locale::__imp *)(v187[0] + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
LABEL_253:
                  v126 = v131;
                  v127 = 0x1020C405E66F15BLL;
                  goto LABEL_254;
                }
              }
              break;
            case 8:
              v143 = v187[0];
              do
              {
                v144 = __ldaxr(v143);
                v145 = v144 - 1;
              }
              while (__stlxr(v145, v143));
              if (!v145)
              {
                v146 = v187[0];
                if (v187[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v187[0] + 2);
                  MEMORY[0x219A19A08](v146, 0x1030C40F1F0227BLL);
                }
                v187[0] = 0;
              }
              break;
            case 9:
              v132 = v187[0];
              do
              {
                v133 = __ldaxr(v132);
                v134 = v133 - 1;
              }
              while (__stlxr(v134, v132));
              if (!v134 && v187[0])
              {
                v126 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v187[0]);
                v127 = 0x1030C407B73B9F7;
LABEL_254:
                MEMORY[0x219A19A08](v126, v127);
              }
              break;
            default:
              break;
          }
          memset(v187, 0, 13);
          if (v158)
          {
            v147 = &v158->__shared_owners_;
            do
              v148 = __ldaxr((unint64_t *)v147);
            while (__stlxr(v148 - 1, (unint64_t *)v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          return;
        }
      }
      else
      {
        v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
        v188.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
        std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
      }
      v35 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v160);
      v36 = *v35;
      switch(*((_BYTE *)*v35 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v173);
          std::ostream::operator<<();
          std::stringbuf::str();
          v173 = v31;
          *(void ***)((char *)&v173 + (_QWORD)*(v31 - 3)) = v153;
          v175 = v32;
          v37 = v151;
          goto LABEL_62;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v173);
          std::ostream::operator<<();
          std::stringbuf::str();
          v173 = v31;
          *(void ***)((char *)&v173 + (_QWORD)*(v31 - 3)) = v153;
          v37 = MEMORY[0x24BEDB848] + 16;
          v175 = v32;
LABEL_62:
          v176 = v37;
          if (v181 < 0)
            operator delete(v180);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v182);
          break;
        case 2:
          v38 = *(_QWORD *)v36;
          if (*(char *)(*(_QWORD *)v36 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(v38 + 8), *(_QWORD *)(v38 + 16));
          }
          else
          {
            v39 = *(_OWORD *)(v38 + 8);
            v188.__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 24);
            *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v39;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v36 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (uint64_t *)(*(_QWORD *)v36 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v36 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v36, &v188);
          break;
        case 7:
          memset(&v188, 0, sizeof(v188));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v36 + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          goto LABEL_274;
      }
      v40 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v188;
      else
        v41 = (std::string *)v188.__r_.__value_.__r.__words[0];
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = v188.__r_.__value_.__l.__size_;
      v173 = 0;
      v174 = 0;
      v175 = v41;
      v176 = 0;
      v177 = v40;
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec((turi::iarchive *)&v173, &v196);
      turi::unity_sarray::sum(void)::$_0::operator()((uint64_t)&v196, (uint64_t *)a2);
      v42 = v161;
      v43 = v162;
      while (v42 != v43)
      {
        turi::sarray_iterator<turi::flexible_type>::operator++(v42);
        v42 += 48;
      }
      if (v164 + 1 < v165)
        v44 = v164 + 1;
      else
        v44 = v165;
      v164 = v44;
      if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v188.__r_.__value_.__l.__data_);
    }
  }
  if (v9 != 9 && v9 != 3)
    turi::unity_sarray::sum(void)::$_5::operator()();
  v156 = 0;
  LOBYTE(v186[0]) = 0;
  memset(&v186[1], 0, 13);
  BYTE4(v186[2]) = v9;
  switch((char)v9)
  {
    case 3:
    case 4:
    case 5:
      v52 = operator new();
      *(_QWORD *)v52 = 0;
      *(_QWORD *)(v52 + 16) = 0;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 8) = 0;
      goto LABEL_94;
    case 6:
      v186[1] = 0x1900000000000000;
      LODWORD(v186[2]) = 0;
      break;
    case 8:
      v52 = operator new();
      *(_QWORD *)v52 = 0;
      *(_OWORD *)(v52 + 8) = 0u;
      *(_OWORD *)(v52 + 24) = 0u;
      *(_OWORD *)(v52 + 40) = 0u;
      *(_QWORD *)(v52 + 56) = 0;
      *(_QWORD *)(v52 + 64) = 3;
LABEL_94:
      v186[1] = v52;
      *(_QWORD *)v52 = 1;
      break;
    case 9:
      v51 = (_QWORD *)operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v51);
      v186[1] = (uint64_t)v51;
      *v51 = 1;
      break;
    default:
      break;
  }
  v54 = (turi::sframe_reader *)*((_QWORD *)this + 3);
  v53 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v53)
  {
    v55 = (unint64_t *)&v53->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v183[0] = v186[0];
  *(_QWORD *)&v184[5] = *(uint64_t *)((char *)&v186[1] + 5);
  *(_QWORD *)v184 = v186[1];
  v184[12] = BYTE4(v186[2]);
  if (BYTE4(v186[2]) <= 9u && ((1 << SBYTE4(v186[2])) & 0x33C) != 0)
  {
    do
      v57 = __ldaxr(*(unint64_t **)v184);
    while (__stlxr(v57 + 1, *(unint64_t **)v184));
  }
  v172 = &v156;
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::generic_aggregator((uint64_t)v198, (uint64_t)&v156, v183);
  v170 = v54;
  v171 = v53;
  if (v53)
  {
    v58 = (unint64_t *)&v53->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t *)&v170, v198, 2, &v196);
  v60 = v171;
  if (v171)
  {
    v61 = (unint64_t *)&v171->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v168 = v196;
  v169 = v197;
  if (v197)
  {
    v63 = (unint64_t *)&v197->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v191 = 0u;
  v194 = 0u;
  v193 = 0u;
  __p = 0u;
  v190 = 0u;
  v189 = 0u;
  BYTE11(v191) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v194 = 0uLL;
  *((_QWORD *)&v193 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v168, (uint64_t)&v189, (const turi::sframe *)&v195);
  v173 = (void **)&v193 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v173);
  if (SBYTE7(v193) < 0)
    operator delete((void *)__p);
  v65 = (_QWORD *)v191;
  if ((__int128 *)v191 == (__int128 *)((char *)&v189 + 8))
  {
    v66 = 4;
    v65 = (_QWORD *)&v189 + 1;
    goto LABEL_118;
  }
  if ((_QWORD)v191)
  {
    v66 = 5;
LABEL_118:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = v169;
  if (v169)
  {
    v68 = (unint64_t *)&v169->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v195, 1, &v167);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v167 + 32))(&v160, v167, 0);
  v150 = v10;
  v185[0] = v183[0];
  *(_QWORD *)&v185[13] = *(_QWORD *)&v184[5];
  *(_QWORD *)&v185[8] = *(_QWORD *)v184;
  v185[20] = v184[12];
  if (v184[12] <= 9u && ((1 << v184[12]) & 0x33C) != 0)
  {
    v70 = *(unint64_t **)&v185[8];
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  v188.__r_.__value_.__s.__data_[0] = 0;
  v188.__r_.__value_.__l.__size_ = 0;
  LODWORD(v188.__r_.__value_.__r.__words[2]) = 0;
  v188.__r_.__value_.__s.__data_[20] = 0;
  v72 = (void **)*MEMORY[0x24BEDB7F0];
  v73 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v154 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v152 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v167 + 40))(&v173, v167, 0);
    if (v160 != v173 || v163 != v177)
    {
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      goto LABEL_134;
    }
    v74 = v164;
    v75 = v178;
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
    if (v74 != v75)
    {
LABEL_134:
      v76 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v160);
      v77 = *v76;
      switch(*((_BYTE *)*v76 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v173);
          std::ostream::operator<<();
          std::stringbuf::str();
          v173 = v72;
          *(void ***)((char *)&v173 + (_QWORD)*(v72 - 3)) = v154;
          v175 = v73;
          v78 = v152;
          goto LABEL_143;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v173);
          std::ostream::operator<<();
          std::stringbuf::str();
          v173 = v72;
          *(void ***)((char *)&v173 + (_QWORD)*(v72 - 3)) = v154;
          v78 = MEMORY[0x24BEDB848] + 16;
          v175 = v73;
LABEL_143:
          v176 = v78;
          if (v181 < 0)
            operator delete(v180);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v182);
          goto LABEL_150;
        case 2:
          v79 = *(_QWORD *)v77;
          if (*(char *)(*(_QWORD *)v77 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)(v79 + 8), *(_QWORD *)(v79 + 16));
          }
          else
          {
            v80 = *(_OWORD *)(v79 + 8);
            v159.__r_.__value_.__r.__words[2] = *(_QWORD *)(v79 + 24);
            *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v80;
          }
          goto LABEL_150;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v77 + 8));
          goto LABEL_150;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (uint64_t *)(*(_QWORD *)v77 + 8));
          goto LABEL_150;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v77 + 8));
          goto LABEL_150;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v77, &v159);
          goto LABEL_150;
        case 7:
          memset(&v159, 0, sizeof(v159));
          goto LABEL_150;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_150;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v173, (_QWORD *)(*(_QWORD *)v77 + 8));
LABEL_150:
          v81 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v159;
          else
            v82 = (std::string *)v159.__r_.__value_.__r.__words[0];
          if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v81 = v159.__r_.__value_.__l.__size_;
          v173 = 0;
          v174 = 0;
          v175 = v82;
          v176 = 0;
          v177 = v81;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec((turi::iarchive *)&v173, (uint64_t)&v188);
          turi::unity_sarray::sum(void)::$_2::operator()(&v172, (uint64_t)&v188, (uint64_t)v185);
          v83 = v161;
          v84 = v162;
          while (v83 != v84)
          {
            turi::sarray_iterator<turi::flexible_type>::operator++(v83);
            v83 += 48;
          }
          if (v164 + 1 < v165)
            v85 = v164 + 1;
          else
            v85 = v165;
          v164 = v85;
          if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v159.__r_.__value_.__l.__data_);
          continue;
        default:
          turi::flexible_type_fail(0);
LABEL_274:
          __break(1u);
          return;
      }
    }
    break;
  }
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)&v188);
  v173 = (void **)v166;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v173);
  v173 = (void **)&v161;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v173);
  v86 = v167;
  v167 = 0;
  if (v86)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v86 + 8))(v86);
  turi::sframe::~sframe((turi::sframe *)&v195);
  v87 = v197;
  if (v197)
  {
    v88 = (unint64_t *)&v197->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v198[0] = (uint64_t (**)(_QWORD))off_24D932038;
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)v200);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)&v199);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)v183);
  if (v53)
  {
    v90 = (unint64_t *)&v53->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v156)
  {
    if (v150 == 9)
      turi::unity_sarray::sum(void)::$_3::operator()();
    turi::unity_sarray::sum(void)::$_4::operator()();
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  if (&v185[8] != (_BYTE *)a2)
  {
    *(_QWORD *)(a2 + 5) = *(_QWORD *)&v185[13];
    *(_QWORD *)a2 = *(_QWORD *)&v185[8];
    v92 = v185[20];
    *(_BYTE *)(a2 + 12) = v185[20];
    if (v92 <= 9 && ((1 << v92) & 0x33C) != 0)
    {
      v93 = *(unint64_t **)a2;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 + 1, v93));
    }
  }
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)v185);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)v186);
}

void sub_2181D29E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1030C407B73B9F7);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::mean(turi::sframe_reader **this@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  turi::sframe_reader *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  turi::sframe_reader *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  void **v43;
  double v44;
  unint64_t v45;
  uint64_t v46;
  turi::flexible_type_impl **v47;
  turi::flexible_type_impl *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  turi::sframe_reader *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  void **v68;
  std::string *v69;
  unint64_t v70;
  uint64_t v71;
  turi::flexible_type_impl **v72;
  turi::flexible_type_impl *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::string::size_type size;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  turi::sframe_reader *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *exception;
  uint64_t v103;
  std::string *v104;
  uint64_t v105;
  void **v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  std::string v110;
  void **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _BYTE v117[24];
  turi::sframe_reader *v118;
  double v119;
  std::__shared_weak_count *v120;
  turi::sframe_reader *v121;
  std::__shared_weak_count *v122;
  double v123;
  unint64_t v124;
  void **v125;
  uint64_t v126;
  std::string *v127;
  uint64_t v128;
  std::string::size_type v129;
  uint64_t v130;
  _BYTE v131[32];
  void *v132;
  char v133;
  _BYTE v134[152];
  unint64_t *v135[2];
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  std::string v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  void *__p[2];
  __int128 v146;
  __int128 v147;
  std::locale v148;
  uint64_t (**v149[2])(_QWORD);
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "mean", 1008, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Function entry", 14);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(v7[2] - 24) + 16));
        v8 = std::locale::use_facet(&v148, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v148);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v9 = (*((uint64_t (**)(turi::sframe_reader **))*this + 14))(this);
  if (v9 > 1)
  {
    if (v9 != 9 && v9 != 3)
      turi::unity_sarray::mean(void)::$_4::operator()();
    v140 = 0;
    *(_QWORD *)&v139 = 0;
    *(_QWORD *)((char *)&v139 + 5) = 0;
    v24 = this[3];
    v25 = (std::__shared_weak_count *)this[4];
    v108 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      *(unint64_t **)((char *)v135 + 5) = *(unint64_t **)((char *)&v139 + 5);
      v135[0] = (unint64_t *)v139;
      BYTE4(v135[1]) = BYTE12(v139);
      if (BYTE12(v139) <= 9u && ((1 << SBYTE12(v139)) & 0x33C) != 0)
      {
        do
          v29 = __ldaxr(v135[0]);
        while (__stlxr(v29 + 1, v135[0]));
      }
    }
    else
    {
      memset(v135, 0, 13);
    }
    v136 = v140;
    turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::generic_aggregator((uint64_t)v149, (uint64_t)v135);
    v121 = v24;
    v122 = v25;
    if (v25)
    {
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t *)&v121, v149, 2, &v123);
    v32 = v122;
    if (v122)
    {
      v33 = (unint64_t *)&v122->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v119 = v123;
    v120 = (std::__shared_weak_count *)v124;
    if (v124)
    {
      v35 = (unint64_t *)(v124 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    *(_OWORD *)__p = 0u;
    v142 = 0u;
    v143 = 0u;
    BYTE11(v144) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v147 = 0uLL;
    *((_QWORD *)&v146 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)&v119, (uint64_t)&v142, (const turi::sframe *)&v148);
    v125 = (void **)&v146 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v125);
    if (SBYTE7(v146) < 0)
      operator delete(__p[0]);
    v37 = (_QWORD *)v144;
    if ((__int128 *)v144 == (__int128 *)((char *)&v142 + 8))
    {
      v38 = 4;
      v37 = (_QWORD *)&v142 + 1;
    }
    else
    {
      if (!(_QWORD)v144)
      {
LABEL_119:
        v63 = v120;
        if (v120)
        {
          v64 = (unint64_t *)&v120->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        turi::sframe::get_reader((turi::sframe *)&v148, 1, &v118);
        (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v118 + 32))(&v111, v118, 0);
        *(unint64_t **)((char *)&v137 + 5) = *(unint64_t **)((char *)v135 + 5);
        *(unint64_t **)&v137 = v135[0];
        BYTE12(v137) = BYTE4(v135[1]);
        if (BYTE4(v135[1]) <= 9u && ((1 << SBYTE4(v135[1])) & 0x33C) != 0)
        {
          v66 = (unint64_t *)v137;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 + 1, v66));
        }
        v138 = v136;
        v141.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v141.__r_.__value_.__r.__words[1]) = 0;
        v141.__r_.__value_.__s.__data_[12] = 0;
        v141.__r_.__value_.__r.__words[2] = 0;
        v68 = (void **)*MEMORY[0x24BEDB7F0];
        v69 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
        v107 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
        v105 = MEMORY[0x24BEDB848] + 16;
        while (2)
        {
          (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v118 + 40))(&v125, v118, 0);
          if (v111 == v125 && v114 == v129)
          {
            v70 = v115;
            v71 = v130;
            v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
            v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
            std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
            if (v70 == v71)
            {
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v141);
              v125 = (void **)v117;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
              v125 = (void **)&v112;
              std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v125);
              v82 = v118;
              v118 = 0;
              if (v82)
                (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v82 + 8))(v82);
              turi::sframe::~sframe((turi::sframe *)&v148);
              v83 = (std::__shared_weak_count *)v124;
              if (v124)
              {
                v84 = (unint64_t *)(v124 + 8);
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              v149[0] = (uint64_t (**)(_QWORD))off_24D932178;
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v151 + 8);
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v150);
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)v135);
              if (v108)
              {
                v86 = (unint64_t *)&v108->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
              if (v138)
              {
                *(_QWORD *)a2 = 0;
                *(_DWORD *)(a2 + 8) = 0;
                *(_BYTE *)(a2 + 12) = 0;
                if (&v137 != (__int128 *)a2)
                {
                  *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v137 + 5);
                  *(_QWORD *)a2 = v137;
                  v88 = BYTE12(v137);
                  *(_BYTE *)(a2 + 12) = BYTE12(v137);
                  switch(v88)
                  {
                    case 2:
                      v89 = *(unint64_t **)a2;
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 + 1, v89));
                      break;
                    case 3:
                      v95 = *(unint64_t **)a2;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 + 1, v95));
                      break;
                    case 4:
                      v91 = *(unint64_t **)a2;
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 + 1, v91));
                      break;
                    case 5:
                      v97 = *(unint64_t **)a2;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 + 1, v97));
                      break;
                    case 8:
                      v99 = *(unint64_t **)a2;
                      do
                        v100 = __ldaxr(v99);
                      while (__stlxr(v100 + 1, v99));
                      break;
                    case 9:
                      v93 = *(unint64_t **)a2;
                      do
                        v94 = __ldaxr(v93);
                      while (__stlxr(v94 + 1, v93));
                      break;
                    default:
                      break;
                  }
                }
              }
              else
              {
                *(_QWORD *)(a2 + 5) = 0;
                *(_QWORD *)a2 = 0;
                *(_BYTE *)(a2 + 12) = 7;
              }
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v137);
              std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v139);
              return;
            }
          }
          else
          {
            v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
            v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
            std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
          }
          v72 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v111);
          v73 = *v72;
          switch(*((_BYTE *)*v72 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v125);
              std::ostream::operator<<();
              std::stringbuf::str();
              v125 = v68;
              *(void ***)((char *)&v125 + (_QWORD)*(v68 - 3)) = v107;
              v127 = v69;
              v74 = v105;
              goto LABEL_143;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v125);
              std::ostream::operator<<();
              std::stringbuf::str();
              v125 = v68;
              *(void ***)((char *)&v125 + (_QWORD)*(v68 - 3)) = v107;
              v74 = MEMORY[0x24BEDB848] + 16;
              v127 = v69;
LABEL_143:
              v128 = v74;
              if (v133 < 0)
                operator delete(v132);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](v134);
              goto LABEL_150;
            case 2:
              v75 = *(_QWORD *)v73;
              if (*(char *)(*(_QWORD *)v73 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)(v75 + 8), *(_QWORD *)(v75 + 16));
              }
              else
              {
                v76 = *(_OWORD *)(v75 + 8);
                v110.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 24);
                *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v76;
              }
              goto LABEL_150;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v73 + 8));
              goto LABEL_150;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (uint64_t *)(*(_QWORD *)v73 + 8));
              goto LABEL_150;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v73 + 8));
              goto LABEL_150;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v73, &v110);
              goto LABEL_150;
            case 7:
              memset(&v110, 0, sizeof(v110));
              goto LABEL_150;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_150;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v73 + 8));
LABEL_150:
              size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v78 = &v110;
              else
                v78 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v110.__r_.__value_.__l.__size_;
              v125 = 0;
              v126 = 0;
              v127 = v78;
              v128 = 0;
              v129 = size;
              turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,unsigned long>,false,void>::exec((turi::iarchive *)&v125, (uint64_t)&v141);
              turi::unity_sarray::mean(void)::$_3::operator()((double *)&v141, (double *)&v137);
              v79 = v112;
              v80 = v113;
              while (v79 != v80)
              {
                turi::sarray_iterator<turi::flexible_type>::operator++(v79);
                v79 += 48;
              }
              if (v115 + 1 < v116)
                v81 = v115 + 1;
              else
                v81 = v116;
              v115 = v81;
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v110.__r_.__value_.__l.__data_);
              continue;
            default:
LABEL_200:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
          }
        }
      }
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_119;
  }
  v11 = this[3];
  v10 = (std::__shared_weak_count *)this[4];
  v109 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v149[0] = (uint64_t (**)(_QWORD))off_24D9320D8;
  v150 = 0u;
  v151 = 0u;
  *(_QWORD *)&v139 = v11;
  *((_QWORD *)&v139 + 1) = v10;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node((uint64_t *)&v139, v149, 2, &v110);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v137 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
  if (v110.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  *(_OWORD *)__p = 0u;
  v142 = 0u;
  v143 = 0u;
  BYTE11(v144) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v147 = 0uLL;
  *((_QWORD *)&v146 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v137, (uint64_t)&v142, (const turi::sframe *)&v148);
  v125 = (void **)&v146 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v125);
  if (SBYTE7(v146) < 0)
    operator delete(__p[0]);
  v21 = (_QWORD *)v144;
  if ((__int128 *)v144 == (__int128 *)((char *)&v142 + 8))
  {
    v22 = 4;
    v21 = (_QWORD *)&v142 + 1;
  }
  else
  {
    if (!(_QWORD)v144)
      goto LABEL_62;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_62:
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v148, 1, &v121);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v121 + 32))(&v111, v121, 0);
  v42 = 0;
  v123 = 0.0;
  v124 = 0;
  v43 = (void **)*MEMORY[0x24BEDB7F0];
  v104 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v106 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v44 = 0.0;
  v103 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v121 + 40))(&v125, v121, 0);
    if (v111 == v125 && v114 == v129)
      break;
    v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
LABEL_73:
    v47 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v111);
    v48 = *v47;
    switch(*((_BYTE *)*v47 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v125);
        std::ostream::operator<<();
        std::stringbuf::str();
        v125 = v43;
        *(void ***)((char *)&v125 + (_QWORD)*(v43 - 3)) = v106;
        v127 = v104;
        v49 = v103;
        goto LABEL_82;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v125);
        std::ostream::operator<<();
        std::stringbuf::str();
        v125 = v43;
        *(void ***)((char *)&v125 + (_QWORD)*(v43 - 3)) = v106;
        v49 = MEMORY[0x24BEDB848] + 16;
        v127 = v104;
LABEL_82:
        v128 = v49;
        if (v133 < 0)
          operator delete(v132);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v134);
        break;
      case 2:
        v50 = *(_QWORD *)v48;
        if (*(char *)(*(_QWORD *)v48 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)(v50 + 8), *(_QWORD *)(v50 + 16));
        }
        else
        {
          v51 = *(_OWORD *)(v50 + 8);
          v141.__r_.__value_.__r.__words[2] = *(_QWORD *)(v50 + 24);
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v51;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v48 + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (uint64_t *)(*(_QWORD *)v48 + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v48 + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v48, &v141);
        break;
      case 7:
        memset(&v141, 0, sizeof(v141));
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v125, (_QWORD *)(*(_QWORD *)v48 + 8));
        break;
      default:
        goto LABEL_200;
    }
    v52 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v141;
    else
      v53 = (std::string *)v141.__r_.__value_.__r.__words[0];
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = v141.__r_.__value_.__l.__size_;
    v125 = 0;
    v126 = 0;
    v127 = v53;
    v128 = 0;
    v129 = v52;
    turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)&v125, &v123);
    if (v124 + v42)
    {
      v44 = (double)v124 / (double)(v124 + v42) * v123 + v44 * ((double)v42 / (double)(v124 + v42));
      v42 += v124;
    }
    v54 = v112;
    v55 = v113;
    while (v54 != v55)
    {
      turi::sarray_iterator<turi::flexible_type>::operator++(v54);
      v54 += 48;
    }
    if (v115 + 1 < v116)
      v56 = v115 + 1;
    else
      v56 = v116;
    v115 = v56;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
  }
  v45 = v115;
  v46 = v130;
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  if (v45 != v46)
    goto LABEL_73;
  v125 = (void **)v117;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v125);
  v125 = (void **)&v112;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v125);
  v57 = v121;
  v121 = 0;
  if (v57)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v57 + 8))(v57);
  turi::sframe::~sframe((turi::sframe *)&v148);
  v58 = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
  if (v110.__r_.__value_.__l.__size_)
  {
    v59 = (unint64_t *)(v110.__r_.__value_.__l.__size_ + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (!v109)
    goto LABEL_115;
  v61 = (unint64_t *)&v109->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
    std::__shared_weak_count::__release_weak(v109);
    if (!v42)
      goto LABEL_184;
LABEL_116:
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 1;
    *(double *)a2 = v44;
  }
  else
  {
LABEL_115:
    if (v42)
      goto LABEL_116;
LABEL_184:
    *(_QWORD *)(a2 + 5) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 12) = 7;
  }
}

void sub_2181D40C0(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::std(turi::unity_sarray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  float v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  std::runtime_error *v57;
  std::string *v58;
  __int128 v59;
  void *v60[2];
  void *v61[2];
  __int128 v62;
  __int128 v63;
  std::string v64;
  size_t __idx;
  _BYTE v66[13];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "std", 1106, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)v60, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)v60);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(_BYTE *__return_ptr, turi::unity_sarray *, uint64_t))(*(_QWORD *)this + 240))(v66, this, a2);
  if (v66[12] == 7)
  {
    *(_QWORD *)(a3 + 5) = *(_QWORD *)&v66[5];
    *(_QWORD *)a3 = *(_QWORD *)v66;
    *(_BYTE *)(a3 + 12) = 7;
  }
  else
  {
    switch(v66[12])
    {
      case 0:
        v12 = (double)*(uint64_t *)v66;
        goto LABEL_42;
      case 1:
        v12 = *(double *)v66;
        goto LABEL_42;
      case 2:
        v16 = *(_QWORD *)v66;
        __idx = 0;
        v17 = (char *)(*(_QWORD *)v66 + 8);
        if (*(char *)(*(_QWORD *)v66 + 31) < 0)
          v17 = *(char **)(*(_QWORD *)v66 + 8);
        std::string::basic_string[abi:ne180100]<0>(v60, v17);
        v18 = std::stod((const std::string *)v60, &__idx);
        if (SHIBYTE(v61[0]) < 0)
          operator delete(v60[0]);
        if (*(char *)(v16 + 31) < 0)
          v19 = *(_QWORD *)(v16 + 16);
        else
          v19 = *(unsigned __int8 *)(v16 + 31);
        if (__idx != v19)
        {
          v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v58 = std::string::append(&v64, " cannot be interpreted as a float");
          v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v61[0] = (void *)v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)v60 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v57, (const std::string *)v60);
          __cxa_throw(v57, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v26 = v18;
        v12 = v26;
        goto LABEL_42;
      case 3:
        v60[1] = 0;
        v61[0] = 0;
        v60[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v60, *(const void **)(*(_QWORD *)v66 + 8), *(_QWORD *)(*(_QWORD *)v66 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)v66 + 16) - *(_QWORD *)(*(_QWORD *)v66 + 8)) >> 3);
        turi::flexible_type_fail(0);
        v12 = 0.0;
        if (v60[0])
        {
          v60[1] = v60[0];
          operator delete(v60[0]);
        }
        goto LABEL_42;
      case 4:
        v60[1] = 0;
        v61[0] = 0;
        v60[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v60, *(uint64_t **)(*(_QWORD *)v66 + 8), *(uint64_t **)(*(_QWORD *)v66 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)v66 + 16) - *(_QWORD *)(*(_QWORD *)v66 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        goto LABEL_34;
      case 5:
        v60[1] = 0;
        v61[0] = 0;
        v60[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v60, *(uint64_t **)(*(_QWORD *)v66 + 8), *(uint64_t **)(*(_QWORD *)v66 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)v66 + 16) - *(_QWORD *)(*(_QWORD *)v66 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
        goto LABEL_34;
      case 6:
        v12 = (double)*(int *)&v66[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v66 << 8) >> 8);
        goto LABEL_42;
      case 8:
        v20 = *(_QWORD *)v66;
        v21 = *(unsigned int **)(*(_QWORD *)v66 + 16);
        v60[0] = *(void **)(*(_QWORD *)v66 + 8);
        v60[1] = v21;
        if (v21)
        {
          v22 = v21 + 2;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = *(_OWORD *)(v20 + 24);
        v25 = *(_OWORD *)(v20 + 56);
        v62 = *(_OWORD *)(v20 + 40);
        v63 = v25;
        *(_OWORD *)v61 = v24;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v60[1]);
LABEL_34:
        v12 = 0.0;
        goto LABEL_42;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v60, *(_QWORD *)v66 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v62 + 1))
        {
          *(_QWORD *)&v63 = *((_QWORD *)&v62 + 1);
          operator delete(*((void **)&v62 + 1));
        }
        if (v61[0])
        {
          v61[1] = v61[0];
          operator delete(v61[0]);
        }
        v13 = (std::__shared_weak_count *)v60[1];
        v12 = 0.0;
        if (v60[1])
        {
          v14 = (unint64_t *)((char *)v60[1] + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
LABEL_42:
        *(_DWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 12) = 1;
        *(double *)a3 = sqrt(v12);
        switch(v66[12])
        {
          case 2:
            v27 = *(unint64_t **)v66;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              v30 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                if (*(char *)(*(_QWORD *)v66 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)v66 + 8));
                v31 = v30;
                v32 = 0x1012C404EF22A49;
                goto LABEL_83;
              }
            }
            break;
          case 3:
            v44 = *(unint64_t **)v66;
            do
            {
              v45 = __ldaxr(v44);
              v46 = v45 - 1;
            }
            while (__stlxr(v46, v44));
            if (!v46)
            {
              v47 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                v48 = *(void **)(*(_QWORD *)v66 + 8);
                if (v48)
                {
                  *(_QWORD *)(*(_QWORD *)v66 + 16) = v48;
                  operator delete(v48);
                }
                v31 = v47;
                v32 = 0x1080C409938AC02;
                goto LABEL_83;
              }
            }
            break;
          case 4:
            v33 = *(unint64_t **)v66;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v36 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                v60[0] = (void *)(*(_QWORD *)v66 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
                goto LABEL_76;
              }
            }
            break;
          case 5:
            v49 = *(unint64_t **)v66;
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              v36 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                v60[0] = (void *)(*(_QWORD *)v66 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
LABEL_76:
                v31 = v36;
                v32 = 0x1020C405E66F15BLL;
                goto LABEL_83;
              }
            }
            break;
          case 8:
            v52 = *(unint64_t **)v66;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v55 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v66 + 16));
                v31 = v55;
                v43 = -235920773;
                goto LABEL_82;
              }
            }
            break;
          case 9:
            v37 = *(unint64_t **)v66;
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              v40 = *(_QWORD *)v66;
              if (*(_QWORD *)v66)
              {
                v41 = *(void **)(*(_QWORD *)v66 + 48);
                if (v41)
                {
                  *(_QWORD *)(*(_QWORD *)v66 + 56) = v41;
                  operator delete(v41);
                }
                v42 = *(void **)(v40 + 24);
                if (v42)
                {
                  *(_QWORD *)(v40 + 32) = v42;
                  operator delete(v42);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v40 + 8);
                v31 = v40;
                v43 = 2071181815;
LABEL_82:
                v32 = v43 | 0x1030C4000000000;
LABEL_83:
                MEMORY[0x219A19A08](v31, v32);
              }
            }
            break;
          default:
            return;
        }
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
}

void sub_2181D4968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v27)
  {
LABEL_8:
    switch(*(_BYTE *)(v28 - 76))
    {
      case 2:
        v30 = *(unint64_t **)(v28 - 88);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (v32)
          goto LABEL_46;
        v33 = *(_QWORD *)(v28 - 88);
        if (!v33)
          goto LABEL_46;
        if (*(char *)(v33 + 31) < 0)
          operator delete(*(void **)(v33 + 8));
        v34 = (_QWORD *)v33;
        v35 = 0x1012C404EF22A49;
        goto LABEL_45;
      case 3:
        v45 = *(unint64_t **)(v28 - 88);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (v47)
          goto LABEL_46;
        v48 = *(_QWORD **)(v28 - 88);
        if (!v48)
          goto LABEL_46;
        v49 = (void *)v48[1];
        if (v49)
        {
          v48[2] = v49;
          operator delete(v49);
        }
        v34 = v48;
        v35 = 0x1080C409938AC02;
        goto LABEL_45;
      case 4:
        v36 = *(unint64_t **)(v28 - 88);
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (v38)
          goto LABEL_46;
        v39 = *(_QWORD **)(v28 - 88);
        if (!v39)
          goto LABEL_46;
        a21 = v39 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
        goto LABEL_38;
      case 5:
        v50 = *(unint64_t **)(v28 - 88);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (v52)
          goto LABEL_46;
        v39 = *(_QWORD **)(v28 - 88);
        if (!v39)
          goto LABEL_46;
        a21 = v39 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_38:
        v34 = v39;
        v35 = 0x1020C405E66F15BLL;
        goto LABEL_45;
      case 8:
        v53 = *(unint64_t **)(v28 - 88);
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (v55)
          goto LABEL_46;
        v56 = *(_QWORD *)(v28 - 88);
        if (!v56)
          goto LABEL_46;
        boost::detail::shared_count::~shared_count((unsigned int **)(v56 + 16));
        v34 = (_QWORD *)v56;
        v44 = -235920773;
        goto LABEL_44;
      case 9:
        v40 = *(unint64_t **)(v28 - 88);
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (v42)
          goto LABEL_46;
        v43 = *(_QWORD **)(v28 - 88);
        if (!v43)
          goto LABEL_46;
        v34 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v43);
        v44 = 2071181815;
LABEL_44:
        v35 = v44 | 0x1030C4000000000;
LABEL_45:
        MEMORY[0x219A19A08](v34, v35);
LABEL_46:
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_46;
    }
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::unity_sarray::var(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  double v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  turi::flexible_type_impl **v36;
  turi::flexible_type_impl *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  turi::sframe_reader *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *exception;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  std::__shared_weak_count *v60;
  std::string v61;
  __int128 v62;
  double v63;
  void **v64;
  _QWORD v65[4];
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  turi::sframe_reader *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t (**v76)();
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[32];
  void *v87;
  char v88;
  uint64_t v89;
  _OWORD v90[2];
  __int128 v91;
  void *__p[2];
  __int128 v93;
  __int128 v94;
  std::locale v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "var", 1117, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v95, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v95);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(_QWORD *)this + 104))(this)
    && !(*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this))
  {
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 7;
    return;
  }
  v12 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this) > 1)
    turi::unity_sarray::var(unsigned long)::$_3::operator()();
  if (v12 <= a2)
    turi::unity_sarray::var(unsigned long)::$_0::operator()();
  v14 = *((_QWORD *)this + 3);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v60 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v76 = off_24D932218;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v72 = v14;
  v73 = v13;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v72, (uint64_t (***)(_QWORD))&v76, 2, &v74);
  v19 = v73;
  if (v73)
  {
    v20 = (unint64_t *)&v73->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v70 = v74;
  v71 = v75;
  if (v75)
  {
    v22 = (unint64_t *)&v75->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v90, 0, sizeof(v90));
  BYTE11(v91) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v94 = 0uLL;
  *((_QWORD *)&v93 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v70, (uint64_t)v90, (const turi::sframe *)&v95);
  v80 = (void **)&v93 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  v24 = (_QWORD *)v91;
  if ((_OWORD *)v91 == (_OWORD *)((char *)v90 + 8))
  {
    v25 = 4;
    v24 = (_QWORD *)v90 + 1;
  }
  else
  {
    if (!(_QWORD)v91)
      goto LABEL_34;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_34:
  v26 = v71;
  if (v71)
  {
    v27 = (unint64_t *)&v71->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v95, 1, &v69);
  v55 = a2;
  v56 = a3;
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v69 + 32))(&v64, v69, 0);
  v29 = 0;
  v30 = 0;
  v62 = 0uLL;
  v63 = 0.0;
  v31 = (void **)*MEMORY[0x24BEDB7F0];
  v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v59 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v32 = 0.0;
  v57 = MEMORY[0x24BEDB848] + 16;
  v33 = 0.0;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v69 + 40))(&v80, v69, 0);
    if (v64 != v80 || v65[3] != v84)
    {
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      goto LABEL_45;
    }
    v34 = v66;
    v35 = v85;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if (v34 == v35)
      break;
LABEL_45:
    v36 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v64);
    v37 = *v36;
    switch(*((_BYTE *)*v36 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v80);
        std::ostream::operator<<();
        std::stringbuf::str();
        v80 = v31;
        *(void ***)((char *)&v80 + (_QWORD)*(v31 - 3)) = v59;
        v82 = v58;
        v38 = v57;
        goto LABEL_54;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v80);
        std::ostream::operator<<();
        std::stringbuf::str();
        v80 = v31;
        *(void ***)((char *)&v80 + (_QWORD)*(v31 - 3)) = v59;
        v38 = MEMORY[0x24BEDB848] + 16;
        v82 = v58;
LABEL_54:
        v83 = v38;
        if (v88 < 0)
          operator delete(v87);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v89);
        goto LABEL_61;
      case 2:
        v39 = *(_QWORD *)v37;
        if (*(char *)(*(_QWORD *)v37 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(v39 + 8), *(_QWORD *)(v39 + 16));
        }
        else
        {
          v40 = *(_OWORD *)(v39 + 8);
          v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 24);
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v40;
        }
        goto LABEL_61;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v80, (_QWORD *)(*(_QWORD *)v37 + 8));
        goto LABEL_61;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v80, (uint64_t *)(*(_QWORD *)v37 + 8));
        goto LABEL_61;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v80, (_QWORD *)(*(_QWORD *)v37 + 8));
        goto LABEL_61;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v37, &v61);
        goto LABEL_61;
      case 7:
        memset(&v61, 0, sizeof(v61));
        goto LABEL_61;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_61;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v80, (_QWORD *)(*(_QWORD *)v37 + 8));
LABEL_61:
        if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v41 = &v61;
LABEL_64:
          v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v63 = *(double *)&v41->__r_.__value_.__r.__words[2];
          v62 = v42;
          goto LABEL_65;
        }
        v41 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if (v61.__r_.__value_.__r.__words[0])
          goto LABEL_64;
        std::istream::read();
LABEL_65:
        v43 = v62 + v30;
        if ((_QWORD)v62 + v30)
        {
          v44 = *((double *)&v62 + 1) - v33;
          v33 = (double)(unint64_t)v62 / (double)v43 * *((double *)&v62 + 1) + v33 * ((double)v30 / (double)v43);
          v32 = v32 + v63 + v44 * (v44 * (double)v30) * (double)(unint64_t)v62 / (double)v43;
          v29 = v62 + v30;
          v30 += v62;
        }
        v46 = v65[0];
        v45 = v65[1];
        while (v46 != v45)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++(v46);
          v46 += 48;
        }
        if (v66 + 1 < v67)
          v47 = v66 + 1;
        else
          v47 = v67;
        v66 = v47;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        break;
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  v80 = (void **)&v68;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v80);
  v80 = (void **)v65;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v80);
  v48 = v69;
  v69 = 0;
  if (v48)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v48 + 8))(v48);
  turi::sframe::~sframe((turi::sframe *)&v95);
  v49 = v75;
  if (v75)
  {
    v50 = (unint64_t *)&v75->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (!v60)
    goto LABEL_87;
  v52 = (unint64_t *)&v60->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    if (!v29)
      goto LABEL_90;
LABEL_88:
    *(_DWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 12) = 1;
    *(double *)v56 = v32 / (double)(v29 - v55);
  }
  else
  {
LABEL_87:
    if (v29)
      goto LABEL_88;
LABEL_90:
    *(_QWORD *)(v56 + 5) = 0;
    *(_QWORD *)v56 = 0;
    *(_BYTE *)(v56 + 12) = 7;
  }
}

void sub_2181D5470(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::str_to_datetime(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  turi::thread *v12;
  int v13;
  const std::string::value_type *v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t i;
  uint64_t v20;
  std::ios_base *v21;
  std::ios_base *v22;
  std::locale::facet *v23;
  uint64_t v24;
  std::locale *rdbuf;
  std::locale *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *exception;
  __int128 v34;
  uint64_t v35;
  std::string __p;
  std::locale v37;
  char *v38;
  uint64_t v39;
  std::string v40;
  std::locale v41;
  std::locale __loc;
  std::locale v43;
  char *v44;
  char *v45;
  std::locale v46;
  std::locale v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "str_to_datetime", 1174, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v37, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v37);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = (turi::thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)v12 != 2)
    turi::unity_sarray::str_to_datetime(std::string)::$_0::operator()();
  v13 = *(char *)(a2 + 23);
  if (v13 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 3)
      goto LABEL_21;
    v14 = *(const std::string::value_type **)a2;
  }
  else
  {
    v14 = (const std::string::value_type *)a2;
    if (v13 != 3)
      goto LABEL_21;
  }
  v15 = *(unsigned __int16 *)v14;
  v16 = *((unsigned __int8 *)v14 + 2);
  if (v15 == 21321 && v16 == 79)
    v12 = (turi::thread *)MEMORY[0x219A19390](a2, "%Y%m%dT%H%M%S%F%q");
LABEL_21:
  v18 = turi::thread::cpu_count(v12);
  std::vector<std::shared_ptr<std::istringstream>>::vector(&v44, v18);
  if (v18)
  {
    for (i = 0; i != v18; ++i)
    {
      v20 = operator new();
      std::istringstream::basic_istringstream[abi:ne180100](v20);
      std::shared_ptr<std::istringstream>::shared_ptr[abi:ne180100]<std::istringstream,void>(&v37, v20);
      v21 = (std::ios_base *)((char *)v37.__locale_ + *(_QWORD *)(*(_QWORD *)v37.__locale_ - 24));
      v21->__exceptions_ = 4;
      std::ios_base::clear(v21, v21->__rdstate_);
      v22 = (std::ios_base *)((char *)v37.__locale_ + *(_QWORD *)(*(_QWORD *)v37.__locale_ - 24));
      std::ios_base::getloc(v22);
      v23 = (std::locale::facet *)operator new();
      boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet((uint64_t)v23, a2, 0);
      v24 = std::locale::id::__get(&boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::id);
      std::locale::__install_ctor(&__loc, &v41, v23, v24);
      std::ios_base::getloc(v22);
      std::ios_base::imbue(v22, &__loc);
      std::locale::~locale(&v47);
      rdbuf = (std::locale *)v22->__rdbuf_;
      if (rdbuf)
      {
        (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, &__loc);
        v26 = rdbuf + 1;
        std::locale::locale(&v46, v26);
        std::locale::operator=(v26, &__loc);
        std::locale::~locale(&v46);
      }
      std::locale::~locale(&v43);
      std::locale::~locale(&__loc);
      std::locale::~locale(&v41);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v44[16 * i], (uint64_t *)&v37);
      v27 = (std::__shared_weak_count *)v38;
      if (v38)
      {
        v28 = (unint64_t *)(v38 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  v37.__locale_ = 0;
  v38 = 0;
  v39 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v37, v44, v45, (v45 - v44) >> 4);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v40 = *(std::string *)a2;
  v34 = 0uLL;
  v35 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v34, v37.__locale_, v38, (v38 - (char *)v37.__locale_) >> 4);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    __p = v40;
  v49 = 0;
  v30 = (char *)operator new(0x38uLL);
  *(_QWORD *)v30 = off_24D932330;
  *(_OWORD *)(v30 + 8) = v34;
  *((_QWORD *)v30 + 3) = v35;
  v34 = 0uLL;
  v35 = 0;
  *(std::string *)(v30 + 32) = __p;
  memset(&__p, 0, sizeof(__p));
  v49 = v30;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v48, 6, 1, 0, a3);
  v31 = v49;
  if (v49 == v48)
  {
    v32 = 4;
    v31 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_42;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47.__locale_ = (std::locale::__imp *)&v34;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  (*(void (**)(_QWORD))(**(_QWORD **)a3 + 392))(*(_QWORD *)a3);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v47.__locale_ = (std::locale::__imp *)&v37;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v37.__locale_ = (std::locale::__imp *)&v44;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_2181D5AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,std::locale a23,std::locale a24,char a25)
{
  uint64_t v25;

  *(_QWORD *)(v25 - 128) = &a9;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 128));
  turi::unity_sarray::str_to_datetime(std::string)::$_1::~$_1((uint64_t)&a16);
  a16.__locale_ = (std::locale::__imp *)&a25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::str_to_datetime(std::string)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void turi::unity_sarray::datetime_to_str(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  turi::thread *v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  std::ios_base *v8;
  std::ios_base *v9;
  std::locale::facet *v10;
  char *v11;
  uint64_t v12;
  std::locale *rdbuf;
  std::locale *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  std::string *v27;
  _QWORD *v28;
  uint64_t v29;
  std::string v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::string v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int *v42;
  std::locale __loc[2];
  char v44;
  std::locale v45[2];
  char v46;
  __int128 v47;
  char v48;
  std::string v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  __int128 *v56[3];
  _BYTE v57[8];
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *__p;
  char v65;
  std::locale v66;
  std::locale v67;
  char *v68;
  char *v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v4 = (turi::thread *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)v4 != 6)
    turi::unity_sarray::datetime_to_str(std::string)::$_0::operator()();
  v5 = turi::thread::cpu_count(v4);
  std::vector<std::shared_ptr<std::ostringstream>>::vector(&v68, v5);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = operator new();
      std::ostringstream::basic_ostringstream[abi:ne180100](v7);
      std::shared_ptr<std::ostringstream>::shared_ptr[abi:ne180100]<std::ostringstream,void>(&v36, v7);
      v8 = (std::ios_base *)(v36.__r_.__value_.__r.__words[0]
                           + *(_QWORD *)(*(_QWORD *)v36.__r_.__value_.__l.__data_ - 24));
      v8->__exceptions_ = 4;
      std::ios_base::clear(v8, v8->__rdstate_);
      v9 = (std::ios_base *)(v36.__r_.__value_.__r.__words[0]
                           + *(_QWORD *)(*(_QWORD *)v36.__r_.__value_.__l.__data_ - 24));
      std::ios_base::getloc(v9);
      v10 = (std::locale::facet *)operator new();
      v11 = (char *)a2;
      if (*(char *)(a2 + 23) < 0)
        v11 = *(char **)a2;
      boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v57, 1, "/", "[", ")", "]");
      boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter((std::vector<std::string> *)&v49);
      boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter((uint64_t)v56);
      boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::time_facet((uint64_t)v10, v11, (uint64_t)v57, (__int128 **)&v49, v56, 0);
      v12 = std::locale::id::__get(&boost::date_time::time_facet<boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>,char,std::ostreambuf_iterator<char>>::id);
      std::locale::__install_ctor(__loc, &v66, v10, v12);
      std::ios_base::getloc(v9);
      std::ios_base::imbue(v9, __loc);
      std::locale::~locale(v45);
      rdbuf = (std::locale *)v9->__rdbuf_;
      if (rdbuf)
      {
        (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, __loc);
        v14 = rdbuf + 1;
        std::locale::locale((std::locale *)&v47, v14);
        std::locale::operator=(v14, __loc);
        std::locale::~locale((std::locale *)&v47);
      }
      std::locale::~locale(&v67);
      std::locale::~locale(__loc);
      *(_QWORD *)&v47 = v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      *(_QWORD *)&v47 = &v49;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      if (v65 < 0)
        operator delete(__p);
      if (v63 < 0)
        operator delete(v62);
      if (v61 < 0)
        operator delete(v60);
      if (v59 < 0)
        operator delete(v58);
      std::locale::~locale(&v66);
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v68[16 * i], (uint64_t *)&v36);
      size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
      if (v36.__r_.__value_.__l.__size_)
      {
        v16 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "");
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  std::string::basic_string[abi:ne180100]<0>(__loc, "");
  boost::date_time::time_zone_names_base<char>::time_zone_names_base(&v49, (__int128 *)&v36, &v47, (__int128 *)v45, (__int128 *)__loc);
  if (v44 < 0)
    operator delete(__loc[0].__locale_);
  if (v46 < 0)
    operator delete(v45[0].__locale_);
  if (v48 < 0)
    operator delete((void *)v47);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v18 = operator new();
  v41 = 0;
  v42 = 0;
  *(_QWORD *)v18 = &unk_24D932488;
  boost::date_time::time_zone_names_base<char>::time_zone_names_base((std::string *)(v18 + 8), (__int128 *)&v49);
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  v19 = v42;
  *(_QWORD *)(v18 + 136) = v41;
  *(_QWORD *)(v18 + 144) = v19;
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::custom_time_zone_base<char>>((uint64_t *)&v47, v18);
  boost::detail::shared_count::~shared_count(&v42);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v36 = *(std::string *)a2;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v37, v68, v69, (v69 - v68) >> 4);
  v40 = v47;
  if (*((_QWORD *)&v47 + 1))
  {
    v22 = (unsigned int *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v32 = v36;
  v33 = 0uLL;
  v34 = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((char *)&v33, v37, v38, (v38 - v37) >> 4);
  v35 = v40;
  if (*((_QWORD *)&v40 + 1))
  {
    v24 = (unsigned int *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v71 = 0;
  v26 = (char *)operator new(0x48uLL);
  *(_QWORD *)v26 = off_24D932570;
  v27 = (std::string *)(v26 + 8);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
    *((_QWORD *)v26 + 3) = *((_QWORD *)&v32.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v26 + 2) = v33;
  *((_QWORD *)v26 + 6) = v34;
  v34 = 0;
  v33 = 0uLL;
  *(_OWORD *)(v26 + 56) = v35;
  v35 = 0uLL;
  v71 = v26;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v70, 2, 1, 0, a3);
  v28 = v71;
  if (v71 == v70)
  {
    v29 = 4;
    v28 = v70;
  }
  else
  {
    if (!v71)
      goto LABEL_53;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_53:
  boost::detail::shared_count::~shared_count((unsigned int **)&v35 + 1);
  v45[0].__locale_ = (std::locale::__imp *)&v33;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  (*(void (**)(_QWORD))(**(_QWORD **)a3 + 392))(*(_QWORD *)a3);
  boost::detail::shared_count::~shared_count((unsigned int **)&v40 + 1);
  v45[0].__locale_ = (std::locale::__imp *)&v37;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  boost::detail::shared_count::~shared_count((unsigned int **)&v47 + 1);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
}

void sub_2181D629C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,unsigned int *a36,uint64_t a37,uint64_t a38)
{
  void *v38;
  uint64_t v39;

  operator delete(v38);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1((uint64_t)&__p);
  turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1((uint64_t)&a19);
  boost::detail::shared_count::~shared_count(&a36);
  boost::date_time::time_zone_names_base<char>::~time_zone_names_base((uint64_t)&a38);
  a38 = v39 - 152;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::datetime_to_str(std::string)::$_1::~$_1(uint64_t a1)
{
  void **v3;

  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 56));
  v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *turi::unity_sarray::astype@<X0>(uint64_t a1@<X0>, char a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 272))(a3);
  if ((a2 & 1) == 0)
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    if ((_DWORD)result == 2)
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 392))(*a3);
  }
  return result;
}

void sub_2181D65B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::lazy_astype(_QWORD *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t (***v24)();
  uint64_t v25;
  std::locale::__imp *v26;
  std::locale::__imp *v27;
  unint64_t *v28;
  unint64_t v29;
  std::locale::__imp *v30;
  unint64_t *v31;
  unint64_t v32;
  BOOL v35;
  BOOL v36;
  std::locale::__imp *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  __int16 locale;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _WORD *v51;
  _QWORD *v52;
  uint64_t v53;
  __int16 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *exception;
  std::locale::__imp *v65;
  std::locale v66[2];
  __int128 v67;
  std::__shared_weak_count *v68;
  char v69;
  _OWORD v70[2];
  int v71;
  _OWORD v72[2];
  int v73;
  void *__p[2];
  char v75;
  std::locale::__imp *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  char v80;
  std::locale::__imp *v81;
  std::__shared_weak_count *v82;
  uint64_t (**v83)();
  __int16 v84;
  uint64_t (***v85)();
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t (**v88)();
  char v89;
  uint64_t (***v90)();
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "lazy_astype", 1320, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v66, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v66);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if (a2 == 3 && v14 == 8)
  {
    std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v76, a1 + 1);
    v81 = v76;
    v82 = v77;
    if (v77)
    {
      p_shared_owners = (unint64_t *)&v77->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    turi::image_util::image_sarray_to_vector_sarray((uint64_t *)&v81, a3, v66);
    *(_OWORD *)a4 = *(_OWORD *)&v66[0].__locale_;
    v66[0].__locale_ = 0;
    v66[1].__locale_ = 0;
    v17 = v82;
    if (v82)
    {
      v18 = (unint64_t *)&v82->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v77;
    if (!v77)
      return;
    v21 = (unint64_t *)&v77->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
LABEL_22:
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      v23 = v20;
LABEL_24:
      std::__shared_weak_count::__release_weak(v23);
      return;
    }
    return;
  }
  if (a2 == 8 && v14 == 2)
  {
    v88 = &off_24D9325F0;
    v89 = a3;
    v90 = &v88;
    turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)&v88, 8, 1, 0, (_OWORD *)a4);
    v24 = v90;
    if (v90 != &v88)
    {
LABEL_28:
      if (!v24)
        return;
      v25 = 5;
      goto LABEL_73;
    }
    v25 = 4;
    v24 = &v88;
LABEL_73:
    (*v24)[v25]();
    return;
  }
  if (v14 != a2)
  {
    v35 = (a2 < 2 || a2 - 3 < 3) && v14 == 2;
    v36 = v14 == 4 && a2 == 3;
    if (!v36
      && !v35
      && !turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * v14 + a2])
    {
      turi::unity_sarray::lazy_astype(turi::flex_type_enum,BOOL)::$_1::operator()();
    }
    if (v14 != 2)
    {
      if (a3)
        v54 = 256;
      else
        v54 = 0;
      v83 = &off_24D9326F0;
      v84 = v54 & 0xFF00 | a2;
      v85 = &v83;
      turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)&v83, a2, 1, 0, (_OWORD *)a4);
      v24 = v85;
      if (v85 != &v83)
        goto LABEL_28;
      v25 = 4;
      v24 = &v83;
      goto LABEL_73;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, ",");
    *(_OWORD *)&v66[0].__locale_ = 0u;
    v67 = 0u;
    LODWORD(v68) = 1065353216;
    memset(v72, 0, sizeof(v72));
    v73 = 1065353216;
    memset(v70, 0, sizeof(v70));
    v71 = 1065353216;
    turi::flexible_type_parser::flexible_type_parser(&v76, __p, 1, 92, v66, v72, v70, 0);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v70);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v72);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v66);
    if (v75 < 0)
      operator delete(__p[0]);
    LOBYTE(v66[0].__locale_) = a2;
    BYTE1(v66[0].__locale_) = a3;
    v37 = v76;
    v38 = v77;
    v66[1].__locale_ = v76;
    *(_QWORD *)&v67 = v77;
    if (v77)
    {
      v39 = (unint64_t *)&v77->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v42 = v78;
    v41 = v79;
    *((_QWORD *)&v67 + 1) = v78;
    v68 = v79;
    if (v79)
    {
      v43 = (unint64_t *)&v79->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v80;
    v69 = v80;
    locale = (__int16)v66[0].__locale_;
    if (v38)
    {
      v47 = (unint64_t *)&v38->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v65 = v37;
    if (v41)
    {
      v49 = (unint64_t *)&v41->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v87 = 0;
    v51 = operator new(0x38uLL);
    *(_QWORD *)v51 = &off_24D932670;
    v51[4] = locale;
    *((_QWORD *)v51 + 2) = v65;
    *((_QWORD *)v51 + 3) = v38;
    *((_QWORD *)v51 + 4) = v42;
    *((_QWORD *)v51 + 5) = v41;
    *((_BYTE *)v51 + 48) = v45;
    v87 = v51;
    turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)v86, a2, 1, 0, (_OWORD *)a4);
    v52 = v87;
    if (v87 == v86)
    {
      v53 = 4;
      v52 = v86;
    }
    else
    {
      if (!v87)
        goto LABEL_83;
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_83:
    if (v41)
    {
      v55 = (unint64_t *)&v41->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v57 = (std::__shared_weak_count *)v67;
    if ((_QWORD)v67)
    {
      v58 = (unint64_t *)(v67 + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = v79;
    if (v79)
    {
      v61 = (unint64_t *)&v79->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v20 = v77;
    if (!v77)
      return;
    v63 = (unint64_t *)&v77->__shared_owners_;
    do
      v22 = __ldaxr(v63);
    while (__stlxr(v22 - 1, v63));
    goto LABEL_22;
  }
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(v66, a1 + 1);
  v26 = v66[0].__locale_;
  v27 = v66[1].__locale_;
  if (v66[1].__locale_)
  {
    v28 = (unint64_t *)((char *)v66[1].__locale_ + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v66[1].__locale_;
    *(_QWORD *)a4 = v26;
    *(_QWORD *)(a4 + 8) = v27;
    if (v30)
    {
      v31 = (unint64_t *)((char *)v30 + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        (*(void (**)(std::locale::__imp *))(*(_QWORD *)v30 + 16))(v30);
        v23 = (std::__shared_weak_count *)v30;
        goto LABEL_24;
      }
    }
  }
  else
  {
    *(std::locale *)a4 = v66[0];
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_2181D6C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43)
{
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;

  v48 = *(_QWORD **)(v46 - 136);
  if (v48 == v43)
  {
    v49 = 4;
    v48 = (_QWORD *)(v46 - 160);
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v44);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v45);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::clip(_QWORD *a1@<X0>, _BYTE *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  unsigned int v14;
  __n128 v15;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  char v41;
  BOOL v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  char *v48;
  const std::string *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  char **v90;
  char *v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  __int128 v100;
  __int128 v101;
  float v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *exception;
  std::runtime_error *v130;
  std::string *v131;
  __int128 v132;
  std::runtime_error *v133;
  std::string *v134;
  __int128 v135;
  void **v136;
  unsigned int *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _QWORD v141[3];
  void *v142[3];
  void *__p;
  void *v144;
  uint64_t v145;
  std::string v146;
  std::string __idx;
  size_t v148;
  char v149[8];
  _BYTE v150[13];
  char v151;
  _BYTE v152[13];
  _BYTE v153[24];
  _BYTE *v154;
  _BYTE v155[32];
  _OWORD v156[2];
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "clip", 1444, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)v155, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)v155);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if (v14 >= 2 && v14 != 3)
    turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_3::operator()();
  v17 = a2[12];
  if (v17 >= 2 && v17 != 7 || (v18 = *((unsigned __int8 *)a3 + 12), v18 >= 2) && v18 != 7)
    turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_0::operator()();
  v19 = v18 != 7;
  v20 = v17 != 7;
  if (v17 != 7 && v18 != 7)
  {
    switch(*((_BYTE *)a3 + 12))
    {
      case 0:
        switch(a2[12])
        {
          case 0:
            if (*(_QWORD *)a2 > *(_QWORD *)a3)
              goto LABEL_114;
            goto LABEL_40;
          case 1:
            v15.n128_u64[0] = *(_QWORD *)a2;
            v59 = (double)*(uint64_t *)a3;
            goto LABEL_101;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_39;
          case 6:
            if (*(_QWORD *)a3 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
              goto LABEL_114;
            goto LABEL_40;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(a2[12])
        {
          case 0:
            v15.n128_u64[0] = *(_QWORD *)a3;
            if (*(double *)a3 < (double)*(uint64_t *)a2)
              goto LABEL_114;
            goto LABEL_40;
          case 1:
            v15.n128_u64[0] = *(_QWORD *)a2;
            v59 = *(double *)a3;
LABEL_101:
            if (v15.n128_f64[0] > v59)
              goto LABEL_114;
            goto LABEL_40;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_39;
          case 6:
            v15.n128_f64[0] = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
            if (v15.n128_f64[0] > *(double *)a3)
              goto LABEL_114;
            goto LABEL_40;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
      case 3:
      case 4:
      case 5:
LABEL_39:
        turi::flexible_type_fail(0);
        break;
      case 6:
        switch(a2[12])
        {
          case 0:
            if (*(_QWORD *)a2 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
              goto LABEL_114;
            goto LABEL_40;
          case 1:
            v15.n128_f64[0] = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
            if (v15.n128_f64[0] < *(double *)a2)
              goto LABEL_114;
            goto LABEL_40;
          case 2:
          case 3:
          case 4:
          case 5:
            goto LABEL_39;
          case 6:
            v60 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            if (v60 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8
              || v60 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && *((_DWORD *)a2 + 2) > *((_DWORD *)a3 + 2))
            {
LABEL_114:
              turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_1::operator()();
            }
            return;
          default:
            turi::apply_binary_op_ff();
        }
      default:
        turi::apply_binary_op_ff();
    }
LABEL_40:
    if (a2[12] == 1)
    {
      if ((v14 & 0xFE) == 0)
        LOBYTE(v14) = 1;
    }
    else
    {
      v39 = *((unsigned __int8 *)a3 + 12);
      if (v39 == 1 && v14 == 0)
        v41 = 1;
      else
        v41 = v14;
      v42 = v14 == 1;
      if (v14 == 1)
        LOBYTE(v14) = 1;
      else
        LOBYTE(v14) = v41;
      if (v42 && v39 != 1)
      {
        if (v17 != 7)
        {
          v43 = 0.0;
          switch(a2[12])
          {
            case 0:
              v15.n128_u64[0] = *(_QWORD *)a2;
              v43 = (double)*(uint64_t *)a2;
              break;
            case 2:
              v46 = *(_QWORD *)a2;
              v47 = (char **)(*(_QWORD *)a2 + 8);
              __idx.__r_.__value_.__r.__words[0] = 0;
              v48 = (char *)v47;
              if (*(char *)(v46 + 31) < 0)
                v48 = *v47;
              v49 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v155, v48);
              v15.n128_f64[0] = std::stod(v49, (size_t *)&__idx);
              v50 = v15.n128_f64[0];
              if ((v155[23] & 0x80000000) != 0)
                operator delete(*(void **)v155);
              if (*(char *)(v46 + 31) < 0)
                v51 = *(_QWORD *)(v46 + 16);
              else
                v51 = *(unsigned __int8 *)(v46 + 31);
              if (__idx.__r_.__value_.__r.__words[0] != v51)
              {
                v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v131 = std::string::append((std::string *)&v136, " cannot be interpreted as a float");
                v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
                *(_QWORD *)&v155[16] = *((_QWORD *)&v131->__r_.__value_.__l + 2);
                *(_OWORD *)v155 = v132;
                v131->__r_.__value_.__l.__size_ = 0;
                v131->__r_.__value_.__r.__words[2] = 0;
                v131->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v130, (const std::string *)v155);
                __cxa_throw(v130, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v15.n128_f32[0] = v50;
              v43 = v15.n128_f32[0];
              break;
            case 3:
              v58 = *(_QWORD *)a2;
              memset(v155, 0, 24);
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v155, *(const void **)(v58 + 8), *(_QWORD *)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (*(_QWORD *)v155)
              {
                *(_QWORD *)&v155[8] = *(_QWORD *)v155;
                operator delete(*(void **)v155);
              }
              break;
            case 4:
              v44 = *(_QWORD *)a2;
              memset(v155, 0, 24);
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v155, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v136 = (void **)v155;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
              break;
            case 5:
              v45 = *(_QWORD *)a2;
              memset(v155, 0, 24);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v155, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v136 = (void **)v155;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
              break;
            case 6:
              v15.n128_f64[0] = (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
              v43 = (double)*((int *)a2 + 2) / 1000000.0 + v15.n128_f64[0];
              break;
            case 7:
              break;
            case 8:
              v52 = *(_QWORD *)a2;
              v53 = *(_QWORD *)(*(_QWORD *)a2 + 16);
              *(_QWORD *)v155 = *(_QWORD *)(*(_QWORD *)a2 + 8);
              *(_QWORD *)&v155[8] = v53;
              if (v53)
              {
                v54 = (unsigned int *)(v53 + 8);
                do
                  v55 = __ldxr(v54);
                while (__stxr(v55 + 1, v54));
              }
              v56 = *(_OWORD *)(v52 + 24);
              v57 = *(_OWORD *)(v52 + 56);
              v156[0] = *(_OWORD *)(v52 + 40);
              v156[1] = v57;
              *(_OWORD *)&v155[16] = v56;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v155[8]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(v155, *(_QWORD *)a2 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(v155);
              break;
            default:
              turi::apply_binary_op_ff();
          }
          switch(a2[12])
          {
            case 2:
              v61 = *(unint64_t **)a2;
              do
              {
                v62 = __ldaxr(v61);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, v61));
              if (!v63)
              {
                v64 = *(_QWORD *)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_156;
                if (*(char *)(v64 + 31) < 0)
                  operator delete(*(void **)(v64 + 8));
                v65 = (_QWORD *)v64;
                v66 = 0x1012C404EF22A49;
                goto LABEL_155;
              }
              break;
            case 3:
              v75 = *(unint64_t **)a2;
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                v78 = *(_QWORD **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_156;
                v79 = (void *)v78[1];
                if (v79)
                {
                  v78[2] = v79;
                  operator delete(v79);
                }
                v65 = v78;
                v66 = 0x1080C409938AC02;
                goto LABEL_155;
              }
              break;
            case 4:
              v67 = *(unint64_t **)a2;
              do
              {
                v68 = __ldaxr(v67);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, v67));
              if (!v69)
              {
                v70 = *(_QWORD **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_156;
                *(_QWORD *)v155 = v70 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v155);
                goto LABEL_148;
              }
              break;
            case 5:
              v80 = *(unint64_t **)a2;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v70 = *(_QWORD **)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_156;
                *(_QWORD *)v155 = v70 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v155);
LABEL_148:
                v65 = v70;
                v66 = 0x1020C405E66F15BLL;
                goto LABEL_155;
              }
              break;
            case 8:
              v83 = *(unint64_t **)a2;
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v86 = *(_QWORD *)a2;
                if (!*(_QWORD *)a2)
                  goto LABEL_156;
                boost::detail::shared_count::~shared_count((unsigned int **)(v86 + 16));
                v65 = (_QWORD *)v86;
                v74 = -235920773;
                goto LABEL_154;
              }
              break;
            case 9:
              v71 = *(unint64_t **)a2;
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                if (*(_QWORD *)a2)
                {
                  v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2);
                  v74 = 2071181815;
LABEL_154:
                  v66 = v74 | 0x1030C4000000000;
LABEL_155:
                  MEMORY[0x219A19A08](v65, v66, v15);
                }
LABEL_156:
                *(_QWORD *)a2 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)a2 + 2) = 0;
          a2[12] = 1;
          *(double *)a2 = v43;
        }
        if (v18 == 7)
        {
          LOBYTE(v14) = 1;
        }
        else
        {
          v87 = 0.0;
          switch(*((_BYTE *)a3 + 12))
          {
            case 0:
              v87 = (double)*(uint64_t *)a3;
              goto LABEL_221;
            case 1:
              v87 = *(double *)a3;
              goto LABEL_221;
            case 2:
              v89 = *(_QWORD *)a3;
              v90 = (char **)(*(_QWORD *)a3 + 8);
              v148 = 0;
              v91 = (char *)v90;
              if (*(char *)(v89 + 31) < 0)
                v91 = *v90;
              std::string::basic_string[abi:ne180100]<0>(&__idx, v91);
              v92 = std::stod(&__idx, &v148);
              if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__idx.__r_.__value_.__l.__data_);
              if (*(char *)(v89 + 31) < 0)
                v93 = *(_QWORD *)(v89 + 16);
              else
                v93 = *(unsigned __int8 *)(v89 + 31);
              if (v148 != v93)
              {
                v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v134 = std::string::append(&v146, " cannot be interpreted as a float");
                v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
                __idx.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v135;
                v134->__r_.__value_.__l.__size_ = 0;
                v134->__r_.__value_.__r.__words[2] = 0;
                v134->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v133, &__idx);
                __cxa_throw(v133, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v102 = v92;
              v87 = v102;
              goto LABEL_182;
            case 3:
              v88 = *(_QWORD *)a3;
              v144 = 0;
              v145 = 0;
              __p = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v88 + 8), *(_QWORD *)(v88 + 16), (uint64_t)(*(_QWORD *)(v88 + 16) - *(_QWORD *)(v88 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p)
              {
                v144 = __p;
                operator delete(__p);
              }
              goto LABEL_182;
            case 4:
              v94 = *(_QWORD *)a3;
              memset(v142, 0, sizeof(v142));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v142, *(uint64_t **)(v94 + 8), *(uint64_t **)(v94 + 16), (uint64_t)(*(_QWORD *)(v94 + 16) - *(_QWORD *)(v94 + 8)) >> 4);
              turi::flexible_type_fail(0);
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              goto LABEL_182;
            case 5:
              v95 = *(_QWORD *)a3;
              memset(v141, 0, sizeof(v141));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v141, *(uint64_t **)(v95 + 8), *(uint64_t **)(v95 + 16), (uint64_t)(*(_QWORD *)(v95 + 16) - *(_QWORD *)(v95 + 8)) >> 5);
              turi::flexible_type_fail(0);
              __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
              goto LABEL_182;
            case 6:
              v87 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
              goto LABEL_182;
            case 7:
              goto LABEL_221;
            case 8:
              v96 = *(_QWORD *)a3;
              v97 = *(unsigned int **)(*(_QWORD *)a3 + 16);
              v136 = *(void ***)(*(_QWORD *)a3 + 8);
              v137 = v97;
              if (v97)
              {
                v98 = v97 + 2;
                do
                  v99 = __ldxr(v98);
                while (__stxr(v99 + 1, v98));
              }
              v100 = *(_OWORD *)(v96 + 24);
              v101 = *(_OWORD *)(v96 + 56);
              v139 = *(_OWORD *)(v96 + 40);
              v140 = v101;
              v138 = v100;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v137);
              v87 = 0.0;
              goto LABEL_182;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(v155, *(_QWORD *)a3 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(v155);
LABEL_182:
              switch(*((_BYTE *)a3 + 12))
              {
                case 2:
                  v103 = *(unint64_t **)a3;
                  do
                  {
                    v104 = __ldaxr(v103);
                    v105 = v104 - 1;
                  }
                  while (__stlxr(v105, v103));
                  if (!v105)
                  {
                    v106 = *(_QWORD *)a3;
                    if (!*(_QWORD *)a3)
                      goto LABEL_220;
                    if (*(char *)(v106 + 31) < 0)
                      operator delete(*(void **)(v106 + 8));
                    v107 = (_QWORD *)v106;
                    v108 = 0x1012C404EF22A49;
                    goto LABEL_219;
                  }
                  break;
                case 3:
                  v117 = *(unint64_t **)a3;
                  do
                  {
                    v118 = __ldaxr(v117);
                    v119 = v118 - 1;
                  }
                  while (__stlxr(v119, v117));
                  if (!v119)
                  {
                    v120 = *(_QWORD **)a3;
                    if (!*(_QWORD *)a3)
                      goto LABEL_220;
                    v121 = (void *)v120[1];
                    if (v121)
                    {
                      v120[2] = v121;
                      operator delete(v121);
                    }
                    v107 = v120;
                    v108 = 0x1080C409938AC02;
                    goto LABEL_219;
                  }
                  break;
                case 4:
                  v109 = *(unint64_t **)a3;
                  do
                  {
                    v110 = __ldaxr(v109);
                    v111 = v110 - 1;
                  }
                  while (__stlxr(v111, v109));
                  if (!v111)
                  {
                    v112 = *(_QWORD **)a3;
                    if (!*(_QWORD *)a3)
                      goto LABEL_220;
                    *(_QWORD *)v155 = v112 + 1;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v155);
                    goto LABEL_212;
                  }
                  break;
                case 5:
                  v122 = *(unint64_t **)a3;
                  do
                  {
                    v123 = __ldaxr(v122);
                    v124 = v123 - 1;
                  }
                  while (__stlxr(v124, v122));
                  if (!v124)
                  {
                    v112 = *(_QWORD **)a3;
                    if (!*(_QWORD *)a3)
                      goto LABEL_220;
                    *(_QWORD *)v155 = v112 + 1;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v155);
LABEL_212:
                    v107 = v112;
                    v108 = 0x1020C405E66F15BLL;
                    goto LABEL_219;
                  }
                  break;
                case 8:
                  v125 = *(unint64_t **)a3;
                  do
                  {
                    v126 = __ldaxr(v125);
                    v127 = v126 - 1;
                  }
                  while (__stlxr(v127, v125));
                  if (!v127)
                  {
                    v128 = *(_QWORD *)a3;
                    if (!*(_QWORD *)a3)
                      goto LABEL_220;
                    boost::detail::shared_count::~shared_count((unsigned int **)(v128 + 16));
                    v107 = (_QWORD *)v128;
                    v116 = -235920773;
                    goto LABEL_218;
                  }
                  break;
                case 9:
                  v113 = *(unint64_t **)a3;
                  do
                  {
                    v114 = __ldaxr(v113);
                    v115 = v114 - 1;
                  }
                  while (__stlxr(v115, v113));
                  if (!v115)
                  {
                    if (*(_QWORD *)a3)
                    {
                      v107 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a3);
                      v116 = 2071181815;
LABEL_218:
                      v108 = v116 | 0x1030C4000000000;
LABEL_219:
                      MEMORY[0x219A19A08](v107, v108);
                    }
LABEL_220:
                    *(_QWORD *)a3 = 0;
                  }
                  break;
                default:
                  break;
              }
LABEL_221:
              *((_DWORD *)a3 + 2) = 0;
              LOBYTE(v14) = 1;
              *((_BYTE *)a3 + 12) = 1;
              *(double *)a3 = v87;
              break;
            default:
              turi::apply_binary_op_ff();
          }
        }
      }
    }
    v155[0] = v20;
    *(_QWORD *)&v155[8] = 0;
    *(_DWORD *)&v155[16] = 0;
    v155[20] = 0;
    if (&v155[8] != a2)
    {
      *(_QWORD *)&v155[13] = *(_QWORD *)(a2 + 5);
      *(_QWORD *)&v155[8] = *(_QWORD *)a2;
      v155[20] = a2[12];
      if (v155[20] <= 9u && ((1 << v155[20]) & 0x33C) != 0)
      {
        v28 = *(unint64_t **)&v155[8];
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
      }
    }
    v155[24] = v19;
    *(_QWORD *)&v156[0] = 0;
    DWORD2(v156[0]) = 0;
    BYTE12(v156[0]) = 0;
    if (v156 != a3)
    {
      *(_QWORD *)((char *)v156 + 5) = *(_QWORD *)((char *)a3 + 5);
      *(_QWORD *)&v156[0] = *(_QWORD *)a3;
      BYTE12(v156[0]) = *((_BYTE *)a3 + 12);
      if (BYTE12(v156[0]) <= 9u && ((1 << SBYTE12(v156[0])) & 0x33C) != 0)
      {
        v30 = *(unint64_t **)&v156[0];
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
    }
    v149[0] = v155[0];
    *(_QWORD *)&v150[5] = *(_QWORD *)&v155[13];
    *(_QWORD *)v150 = *(_QWORD *)&v155[8];
    v150[12] = v155[20];
    if (v155[20] <= 9u && ((1 << v155[20]) & 0x33C) != 0)
    {
      v32 = *(unint64_t **)v150;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v151 = v155[24];
    *(_QWORD *)&v152[5] = *(_QWORD *)((char *)v156 + 5);
    *(_QWORD *)v152 = *(_QWORD *)&v156[0];
    v152[12] = BYTE12(v156[0]);
    if (BYTE12(v156[0]) <= 9u && ((1 << SBYTE12(v156[0])) & 0x33C) != 0)
    {
      v34 = *(unint64_t **)v152;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    v154 = 0;
    v36 = (char *)operator new(0x38uLL);
    *(_QWORD *)v36 = &off_24D932770;
    v36[8] = v149[0];
    *(_QWORD *)(v36 + 21) = *(_QWORD *)&v150[5];
    *((_QWORD *)v36 + 2) = *(_QWORD *)v150;
    v36[28] = v150[12];
    v150[12] = 0;
    v36[32] = v151;
    *(_QWORD *)(v36 + 45) = *(_QWORD *)&v152[5];
    *((_QWORD *)v36 + 5) = *(_QWORD *)v152;
    v36[52] = v152[12];
    v152[12] = 0;
    v154 = v36;
    turi::unity_sarray::transform_lambda((uint64_t)a1, (uint64_t)v153, (char)v14, 1, 0, (_OWORD *)a4);
    v37 = v154;
    if (v154 == v153)
    {
      v38 = 4;
      v37 = v153;
    }
    else
    {
      if (!v154)
      {
LABEL_81:
        turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)v149);
        turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2((uint64_t)v155);
        return;
      }
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_81;
  }
  if (v17 != 7 || v18 != 7)
    goto LABEL_40;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(v155, a1 + 1);
  v21 = *(_QWORD *)v155;
  v22 = *(_QWORD *)&v155[8];
  if (*(_QWORD *)&v155[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v155[8] + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v25 = *(std::__shared_weak_count **)&v155[8];
    *(_QWORD *)a4 = v21;
    *(_QWORD *)(a4 + 8) = v22;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    *(_QWORD *)a4 = *(_QWORD *)v155;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_2181D7DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  void *v42;
  int v43;

  if (a40 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v43 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

uint64_t turi::unity_sarray::clip(turi::flexible_type,turi::flexible_type)::$_2::~$_2(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void **v61;

  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v31 = *(unint64_t **)(a1 + 8);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(a1 + 8);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)(a1 + 8);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(_QWORD **)(a1 + 8);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)(a1 + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 8);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)(a1 + 8);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(_QWORD *)(a1 + 8);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)(a1 + 8);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(_QWORD *)(a1 + 8);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)(a1 + 8);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(a1 + 8);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

uint64_t turi::unity_sarray::nnz(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  uint64_t v26;
  turi::flexible_type_impl **v27;
  turi::flexible_type_impl *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  turi::sframe_reader *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t result;
  _QWORD *exception;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  std::__shared_weak_count *v48;
  std::string v49;
  std::string::size_type v50;
  void **v51;
  _QWORD v52[4];
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  turi::sframe_reader *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t (**v63)();
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[32];
  void *v73;
  char v74;
  uint64_t v75;
  _OWORD v76[2];
  __int128 v77;
  void *__p[2];
  __int128 v79;
  __int128 v80;
  std::locale v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "nnz", 1520, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v81, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v81);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v8 = *((_QWORD *)this + 3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v48 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v64 = 0;
    v65 = 0;
    v63 = off_24D9327F0;
    v59 = v8;
    v60 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v64 = 0;
    v65 = 0;
    v63 = off_24D9327F0;
    v59 = v8;
    v60 = 0;
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v59, (uint64_t (***)(_QWORD))&v63, 2, &v61);
  v13 = v60;
  if (v60)
  {
    v14 = (unint64_t *)&v60->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v57 = v61;
  v58 = v62;
  if (v62)
  {
    v16 = (unint64_t *)&v62->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v76, 0, sizeof(v76));
  BYTE11(v77) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v80 = 0uLL;
  *((_QWORD *)&v79 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v57, (uint64_t)v76, (const turi::sframe *)&v81);
  v66 = (void **)&v79 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  v18 = (_QWORD *)v77;
  if ((_OWORD *)v77 == (_OWORD *)((char *)v76 + 8))
  {
    v19 = 4;
    v18 = (_QWORD *)v76 + 1;
  }
  else
  {
    if (!(_QWORD)v77)
      goto LABEL_31;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_31:
  v20 = v58;
  if (v58)
  {
    v21 = (unint64_t *)&v58->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  turi::sframe::get_reader((turi::sframe *)&v81, 1, &v56);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v56 + 32))(&v51, v56, 0);
  v23 = 0;
  v50 = 0;
  v24 = (void **)*MEMORY[0x24BEDB7F0];
  v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v47 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v45 = MEMORY[0x24BEDB848] + 16;
  while (1)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v56 + 40))(&v66, v56, 0);
    if (v51 != v66 || v52[3] != v70)
    {
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      goto LABEL_42;
    }
    v25 = v53;
    v26 = v71;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if (v25 == v26)
      break;
LABEL_42:
    v27 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v51);
    v28 = *v27;
    switch(*((_BYTE *)*v27 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v24;
        *(void ***)((char *)&v66 + (_QWORD)*(v24 - 3)) = v47;
        v68 = v46;
        v29 = v45;
        goto LABEL_51;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v66);
        std::ostream::operator<<();
        std::stringbuf::str();
        v66 = v24;
        *(void ***)((char *)&v66 + (_QWORD)*(v24 - 3)) = v47;
        v29 = MEMORY[0x24BEDB848] + 16;
        v68 = v46;
LABEL_51:
        v69 = v29;
        if (v74 < 0)
          operator delete(v73);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v75);
        goto LABEL_58;
      case 2:
        v30 = *(_QWORD *)v28;
        if (*(char *)(*(_QWORD *)v28 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v30 + 8), *(_QWORD *)(v30 + 16));
        }
        else
        {
          v31 = *(_OWORD *)(v30 + 8);
          v49.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 24);
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v31;
        }
        goto LABEL_58;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (uint64_t *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
        goto LABEL_58;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v28, &v49);
        goto LABEL_58;
      case 7:
        memset(&v49, 0, sizeof(v49));
        goto LABEL_58;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_58;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v66, (_QWORD *)(*(_QWORD *)v28 + 8));
LABEL_58:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v32 = &v49;
LABEL_61:
          v33 = v32->__r_.__value_.__r.__words[0];
          v50 = v32->__r_.__value_.__r.__words[0];
          goto LABEL_62;
        }
        v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if (v49.__r_.__value_.__r.__words[0])
          goto LABEL_61;
        std::istream::read();
        v33 = v50;
LABEL_62:
        v34 = v52[0];
        v35 = v52[1];
        while (v34 != v35)
        {
          turi::sarray_iterator<turi::flexible_type>::operator++(v34);
          v34 += 48;
        }
        if (v53 + 1 < v54)
          v36 = v53 + 1;
        else
          v36 = v54;
        v53 = v36;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v23 += v33;
        break;
      default:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v66 = (void **)&v55;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
  v66 = (void **)v52;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
  v37 = v56;
  v56 = 0;
  if (v37)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v37 + 8))(v37);
  turi::sframe::~sframe((turi::sframe *)&v81);
  v38 = v62;
  if (v62)
  {
    v39 = (unint64_t *)&v62->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v48)
  {
    v41 = (unint64_t *)&v48->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v23;
}

void sub_2181D8A90(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x288]);
  _Unwind_Resume(a1);
}

uint64_t (***turi::unity_sarray::scalar_operator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>))()
{
  char v10;
  char v11;
  uint64_t v12;
  uint64_t output_type;
  turi::unity_sarray *v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  turi::unity_sarray *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t (***result)();
  uint64_t v41;
  __int128 v42;
  std::string v43;
  std::string v44;
  std::string v45;
  void **v46;
  char v47[8];
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[13];
  _BYTE v51[24];
  _BYTE *v52;
  char v53[8];
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[13];
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[2];
  uint64_t (**v63[3])();
  uint64_t (***v64)();
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) != 0)
  {
    v10 = *(_BYTE *)(a2 + 12);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v11 = *(_BYTE *)(a2 + 12);
  }
  if ((char)a3[23] < 0)
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v45 = *(std::string *)a3;
  v12 = v10;
  turi::unity_sarray_binary_operations::check_operation_feasibility(v12, v11, (unsigned __int8 *)&v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if ((char)a3[23] < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v44 = *(std::string *)a3;
  output_type = turi::unity_sarray_binary_operations::get_output_type(v10, v11, (unsigned __int8 **)&v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if ((char)a3[23] < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v43 = *(std::string *)a3;
  turi::unity_sarray_binary_operations::get_binary_operator(v12, v11, (unsigned __int8 *)&v43, v63);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)
    && !(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    v20 = (turi::unity_sarray *)operator new();
    turi::unity_sarray::unity_sarray(v20);
    std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v42, (uint64_t)v20);
    v59 = 0;
    v60[0] = 0;
    v60[1] = 0;
    (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)v42 + 32))(v42, &v59, output_type);
    v46 = (void **)&v59;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
    *a5 = v42;
    goto LABEL_101;
  }
  v14 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v14);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v42, (uint64_t)v14);
  v15 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    if (v15 != 1)
    {
      if (v15 == 2 && (*(_WORD *)a3 == 15677 || *(_WORD *)a3 == 15649 || *(_WORD *)a3 == 28265))
        goto LABEL_49;
      goto LABEL_42;
    }
    goto LABEL_35;
  }
  v16 = *((_QWORD *)a3 + 1);
  if (v16 == 2)
  {
    if (**(_WORD **)a3 == 15677 || **(_WORD **)a3 == 15649)
    {
LABEL_49:
      LOBYTE(v59) = a4;
      v19 = (uint64_t)v64;
      if (v64)
      {
        if (v64 == v63)
        {
          v61 = v60;
          (*((void (**)(uint64_t (***)(), _QWORD *))v63[0] + 3))(v63, v60);
          goto LABEL_55;
        }
        v19 = (*v64)[2]();
      }
      v61 = (_QWORD *)v19;
LABEL_55:
      memset(v62, 0, 13);
      if (v62 != (_QWORD *)a2)
      {
        *(_QWORD *)((char *)v62 + 5) = *(_QWORD *)(a2 + 5);
        v62[0] = *(_QWORD *)a2;
        BYTE4(v62[1]) = *(_BYTE *)(a2 + 12);
        if (BYTE4(v62[1]) <= 9u && ((1 << SBYTE4(v62[1])) & 0x33C) != 0)
        {
          v21 = (unint64_t *)v62[0];
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
      }
      v53[0] = v59;
      v23 = (uint64_t)v61;
      if (v61)
      {
        if (v61 == v60)
        {
          v55 = v54;
          (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v54);
          goto LABEL_65;
        }
        v23 = (*(uint64_t (**)(void))(*v61 + 16))();
      }
      v55 = (_BYTE *)v23;
LABEL_65:
      *(_QWORD *)&v56[5] = *(_QWORD *)((char *)v62 + 5);
      *(_QWORD *)v56 = v62[0];
      v56[12] = BYTE4(v62[1]);
      if (BYTE4(v62[1]) <= 9u && ((1 << SBYTE4(v62[1])) & 0x33C) != 0)
      {
        v24 = *(unint64_t **)v56;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v58 = 0;
      v26 = (char *)operator new(0x40uLL);
      *(_QWORD *)v26 = &off_24D932890;
      v26[8] = v53[0];
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v26 + 16), (uint64_t)v54);
      *(_QWORD *)(v26 + 53) = *(_QWORD *)&v56[5];
      *((_QWORD *)v26 + 6) = *(_QWORD *)v56;
      v26[60] = v56[12];
      v56[12] = 0;
      v58 = v26;
      turi::unity_sarray::transform_lambda(a1, (uint64_t)v57, output_type, 0, 0, a5);
      v27 = v58;
      if (v58 == v57)
      {
        v28 = 4;
        v27 = v57;
      }
      else
      {
        if (!v58)
        {
LABEL_74:
          turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)v53);
          turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0((uint64_t)&v59);
          goto LABEL_96;
        }
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
      goto LABEL_74;
    }
    v16 = *((_QWORD *)a3 + 1);
    if (v16 == 2)
    {
      if (**(_WORD **)a3 == 28265)
        goto LABEL_49;
      if ((v15 & 0x80) == 0)
      {
        if (v15 == 1)
        {
LABEL_35:
          if (*a3 == 38)
            goto LABEL_49;
          goto LABEL_41;
        }
LABEL_42:
        v17 = 0;
        goto LABEL_43;
      }
    }
  }
  if (v16 != 1)
    goto LABEL_42;
  if (**(_BYTE **)a3 == 38)
    goto LABEL_49;
  if (*((_QWORD *)a3 + 1) != 1)
    goto LABEL_42;
  a3 = *(unsigned __int8 **)a3;
LABEL_41:
  v17 = *a3 == 124;
LABEL_43:
  if (*(_BYTE *)(a2 + 12) == 7 || v17)
    goto LABEL_49;
  LOBYTE(v59) = a4;
  v18 = (uint64_t)v64;
  if (v64)
  {
    if (v64 == v63)
    {
      v61 = v60;
      (*((void (**)(uint64_t (***)(), _QWORD *))v63[0] + 3))(v63, v60);
      goto LABEL_76;
    }
    v18 = (*v64)[2]();
  }
  v61 = (_QWORD *)v18;
LABEL_76:
  memset(v62, 0, 13);
  if (v62 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v62 + 5) = *(_QWORD *)(a2 + 5);
    v62[0] = *(_QWORD *)a2;
    BYTE4(v62[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v62[1]) <= 9u && ((1 << SBYTE4(v62[1])) & 0x33C) != 0)
    {
      v29 = (unint64_t *)v62[0];
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
  }
  v47[0] = v59;
  v31 = (uint64_t)v61;
  if (v61)
  {
    if (v61 == v60)
    {
      v49 = v48;
      (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v48);
      goto LABEL_86;
    }
    v31 = (*(uint64_t (**)(void))(*v61 + 16))();
  }
  v49 = (_BYTE *)v31;
LABEL_86:
  *(_QWORD *)&v50[5] = *(_QWORD *)((char *)v62 + 5);
  *(_QWORD *)v50 = v62[0];
  v50[12] = BYTE4(v62[1]);
  if (BYTE4(v62[1]) <= 9u && ((1 << SBYTE4(v62[1])) & 0x33C) != 0)
  {
    v32 = *(unint64_t **)v50;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v52 = 0;
  v34 = (char *)operator new(0x40uLL);
  *(_QWORD *)v34 = &off_24D932910;
  v34[8] = v47[0];
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)(v34 + 16), (uint64_t)v48);
  *(_QWORD *)(v34 + 53) = *(_QWORD *)&v50[5];
  *((_QWORD *)v34 + 6) = *(_QWORD *)v50;
  v34[60] = v50[12];
  v50[12] = 0;
  v52 = v34;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v51, output_type, 1, 0, a5);
  v35 = v52;
  if (v52 == v51)
  {
    v36 = 4;
    v35 = v51;
    goto LABEL_94;
  }
  if (v52)
  {
    v36 = 5;
LABEL_94:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)v47);
  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1((uint64_t)&v59);
LABEL_96:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_101:
  result = v64;
  if (v64 == v63)
  {
    v41 = 4;
    result = v63;
  }
  else
  {
    if (!v64)
      return result;
    v41 = 5;
  }
  return (uint64_t (***)())(*result)[v41]();
}

void sub_2181D9370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;

  turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1(v43 - 176);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v45 = *(_QWORD **)(v43 - 96);
  if (v45 == (_QWORD *)(v43 - 120))
  {
    v46 = 4;
    v45 = (_QWORD *)(v43 - 120);
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_0::~$_0(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void **v34;

  switch(*(_BYTE *)(a1 + 52))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 40);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 40);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 40);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 40);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 40);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
        {
          v34 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 40);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
        {
          v34 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 40);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 40);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 40);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  v31 = *(_QWORD **)(a1 + 32);
  if (v31 == (_QWORD *)(a1 + 8))
  {
    v32 = 4;
    v31 = (_QWORD *)(a1 + 8);
    goto LABEL_47;
  }
  if (v31)
  {
    v32 = 5;
LABEL_47:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  return a1;
}

uint64_t turi::unity_sarray::scalar_operator(turi::flexible_type,std::string,BOOL)::$_1::~$_1(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void **v34;

  switch(*(_BYTE *)(a1 + 52))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 40);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 40);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 40);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 40);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 40);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
        {
          v34 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 40);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
        {
          v34 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 40);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 40);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 40);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  v31 = *(_QWORD **)(a1 + 32);
  if (v31 == (_QWORD *)(a1 + 8))
  {
    v32 = 4;
    v31 = (_QWORD *)(a1 + 8);
    goto LABEL_47;
  }
  if (v31)
  {
    v32 = 5;
LABEL_47:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  return a1;
}

void turi::unity_sarray::left_scalar_operator(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *exception;
  std::string __p;
  std::locale v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "left_scalar_operator", 1610, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  memset(v48, 0, 13);
  if (v48 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v48 + 5) = *(_QWORD *)(a2 + 5);
    v48[0] = *(_QWORD *)a2;
    BYTE4(v48[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v48[1]) <= 9u && ((1 << SBYTE4(v48[1])) & 0x33C) != 0)
    {
      v14 = (unint64_t *)v48[0];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::unity_sarray::scalar_operator(a1, (uint64_t)v48, (unsigned __int8 *)&__p, 0, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  switch(BYTE4(v48[1]))
  {
    case 2:
      v16 = (unint64_t *)v48[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v48[0];
        if (v48[0])
        {
          if (*(char *)(v48[0] + 31) < 0)
            operator delete(*(void **)(v48[0] + 8));
          v20 = v19;
          v21 = 0x1012C404EF22A49;
          goto LABEL_60;
        }
      }
      break;
    case 3:
      v33 = (unint64_t *)v48[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = v48[0];
        if (v48[0])
        {
          v37 = *(void **)(v48[0] + 8);
          if (v37)
          {
            *(_QWORD *)(v48[0] + 16) = v37;
            operator delete(v37);
          }
          v20 = v36;
          v21 = 0x1080C409938AC02;
          goto LABEL_60;
        }
      }
      break;
    case 4:
      v22 = (unint64_t *)v48[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47.__locale_ = (std::locale::__imp *)(v48[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
          goto LABEL_53;
        }
      }
      break;
    case 5:
      v38 = (unint64_t *)v48[0];
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47.__locale_ = (std::locale::__imp *)(v48[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
LABEL_53:
          v20 = v25;
          v21 = 0x1020C405E66F15BLL;
          goto LABEL_60;
        }
      }
      break;
    case 8:
      v41 = (unint64_t *)v48[0];
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v48[0];
        if (v48[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v48[0] + 16));
          v20 = v44;
          v32 = -235920773;
          goto LABEL_59;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v48[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v48[0];
        if (v48[0])
        {
          v30 = *(void **)(v48[0] + 48);
          if (v30)
          {
            *(_QWORD *)(v48[0] + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v20 = v29;
          v32 = 2071181815;
LABEL_59:
          v21 = v32 | 0x1030C4000000000;
LABEL_60:
          MEMORY[0x219A19A08](v20, v21);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2181D9D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, char a19)
{
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  switch(a19)
  {
    case 2:
      v20 = (unint64_t *)a17;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = a17;
      if (!a17)
        goto LABEL_39;
      if (*(char *)(a17 + 31) < 0)
        operator delete(*(void **)(a17 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v34 = (unint64_t *)a17;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v37 = a17;
      if (!a17)
        goto LABEL_39;
      v38 = *(void **)(a17 + 8);
      if (v38)
      {
        *(_QWORD *)(a17 + 16) = v38;
        operator delete(v38);
      }
      v24 = (_QWORD *)v37;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = (unint64_t *)a17;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = a17;
      if (!a17)
        goto LABEL_39;
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_31;
    case 5:
      v39 = (unint64_t *)a17;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v29 = a17;
      if (!a17)
        goto LABEL_39;
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_31:
      v24 = (_QWORD *)v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v42 = (unint64_t *)a17;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v45 = a17;
      if (!a17)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a17 + 16));
      v24 = (_QWORD *)v45;
      v33 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = (unint64_t *)a17;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32 || !a17)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a17);
      v33 = 2071181815;
LABEL_37:
      v25 = v33 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::unity_sarray::right_scalar_operator(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *exception;
  std::string __p;
  std::locale v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "right_scalar_operator", 1616, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  memset(v48, 0, 13);
  if (v48 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v48 + 5) = *(_QWORD *)(a2 + 5);
    v48[0] = *(_QWORD *)a2;
    BYTE4(v48[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v48[1]) <= 9u && ((1 << SBYTE4(v48[1])) & 0x33C) != 0)
    {
      v14 = (unint64_t *)v48[0];
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::unity_sarray::scalar_operator(a1, (uint64_t)v48, (unsigned __int8 *)&__p, 1, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  switch(BYTE4(v48[1]))
  {
    case 2:
      v16 = (unint64_t *)v48[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v48[0];
        if (v48[0])
        {
          if (*(char *)(v48[0] + 31) < 0)
            operator delete(*(void **)(v48[0] + 8));
          v20 = v19;
          v21 = 0x1012C404EF22A49;
          goto LABEL_60;
        }
      }
      break;
    case 3:
      v33 = (unint64_t *)v48[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = v48[0];
        if (v48[0])
        {
          v37 = *(void **)(v48[0] + 8);
          if (v37)
          {
            *(_QWORD *)(v48[0] + 16) = v37;
            operator delete(v37);
          }
          v20 = v36;
          v21 = 0x1080C409938AC02;
          goto LABEL_60;
        }
      }
      break;
    case 4:
      v22 = (unint64_t *)v48[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47.__locale_ = (std::locale::__imp *)(v48[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
          goto LABEL_53;
        }
      }
      break;
    case 5:
      v38 = (unint64_t *)v48[0];
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47.__locale_ = (std::locale::__imp *)(v48[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
LABEL_53:
          v20 = v25;
          v21 = 0x1020C405E66F15BLL;
          goto LABEL_60;
        }
      }
      break;
    case 8:
      v41 = (unint64_t *)v48[0];
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v48[0];
        if (v48[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v48[0] + 16));
          v20 = v44;
          v32 = -235920773;
          goto LABEL_59;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v48[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v48[0];
        if (v48[0])
        {
          v30 = *(void **)(v48[0] + 48);
          if (v30)
          {
            *(_QWORD *)(v48[0] + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v20 = v29;
          v32 = 2071181815;
LABEL_59:
          v21 = v32 | 0x1030C4000000000;
LABEL_60:
          MEMORY[0x219A19A08](v20, v21);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2181DA358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, char a19)
{
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  switch(a19)
  {
    case 2:
      v20 = (unint64_t *)a17;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = a17;
      if (!a17)
        goto LABEL_39;
      if (*(char *)(a17 + 31) < 0)
        operator delete(*(void **)(a17 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v34 = (unint64_t *)a17;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v37 = a17;
      if (!a17)
        goto LABEL_39;
      v38 = *(void **)(a17 + 8);
      if (v38)
      {
        *(_QWORD *)(a17 + 16) = v38;
        operator delete(v38);
      }
      v24 = (_QWORD *)v37;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = (unint64_t *)a17;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = a17;
      if (!a17)
        goto LABEL_39;
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_31;
    case 5:
      v39 = (unint64_t *)a17;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v29 = a17;
      if (!a17)
        goto LABEL_39;
      a16.__locale_ = (std::locale::__imp *)(a17 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_31:
      v24 = (_QWORD *)v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v42 = (unint64_t *)a17;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v45 = a17;
      if (!a17)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a17 + 16));
      v24 = (_QWORD *)v45;
      v33 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = (unint64_t *)a17;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32 || !a17)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a17);
      v33 = 2071181815;
LABEL_37:
      v25 = v33 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::unity_sarray::vector_operator(_QWORD *a1@<X0>, _QWORD *a2@<X1>, const std::string::value_type **a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int output_type;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::locale *v45;
  uint64_t (**v46)();
  uint64_t v47;
  std::locale *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::locale::__imp *locale;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t (***v75)();
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *exception;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::string v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string v94;
  std::string v95;
  _BYTE v96[24];
  _BYTE *v97;
  _BYTE v98[24];
  _BYTE *v99;
  _QWORD v100[3];
  _QWORD *v101;
  uint64_t (**v102[3])();
  uint64_t (***v103)();
  _BYTE v104[24];
  _BYTE *v105;
  std::locale v106[2];
  std::locale *v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "vector_operator", 1622, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v106, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v106);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v95, *a3, (std::string::size_type)a3[1]);
  else
    v95 = *(std::string *)a3;
  turi::unity_sarray_binary_operations::check_operation_feasibility(v14, v15, (unsigned __int8 *)&v95);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v94, *a3, (std::string::size_type)a3[1]);
  else
    v94 = *(std::string *)a3;
  output_type = turi::unity_sarray_binary_operations::get_output_type(v16, v17, (unsigned __int8 **)&v94);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  v92 = *a2;
  v93 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (std::__shared_weak_count *)a1[4];
  v90 = a1[3];
  v91 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v27 = *(_QWORD *)(v19 + 24);
  v26 = *(std::__shared_weak_count **)(v19 + 32);
  v88 = v27;
  v89 = v26;
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = turi::query_eval::planner::test_equal_length((uint64_t)v106, &v90, &v88);
  v31 = v89;
  if (v89)
  {
    v32 = (unint64_t *)&v89->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v91;
  if (v91)
  {
    v35 = (unint64_t *)&v91->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (!v30)
    turi::unity_sarray::vector_operator(std::shared_ptr<turi::unity_sarray_base>,std::string)::$_0::operator()();
  v37 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v87, *a3, (std::string::size_type)a3[1]);
  else
    v87 = *(std::string *)a3;
  turi::unity_sarray_binary_operations::get_binary_operator(v37, v38, (unsigned __int8 *)&v87, v102);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  v101 = 0;
  v39 = *((unsigned __int8 *)a3 + 23);
  if ((v39 & 0x80) != 0)
  {
    v41 = (unsigned __int8 *)a3[1];
    if (v41 == (unsigned __int8 *)2)
    {
      if (*(_WORD *)*a3 == 15677)
        goto LABEL_69;
      if (*(_WORD *)*a3 == 15649)
        goto LABEL_75;
      v41 = (unsigned __int8 *)a3[1];
    }
    if (v41 != (unsigned __int8 *)1)
      goto LABEL_65;
    if (**a3 == 38)
    {
LABEL_61:
      v42 = (uint64_t)v103;
      if (v103)
      {
        if (v103 == v102)
        {
          v99 = v98;
          (*((void (**)(uint64_t (***)(), _BYTE *))v102[0] + 3))(v102, v98);
          goto LABEL_80;
        }
        v42 = ((uint64_t (*)(uint64_t (***)()))(*v103)[2])(v103);
      }
      v99 = (_BYTE *)v42;
LABEL_80:
      std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)v98);
      v45 = (std::locale *)operator new(0x28uLL);
      v46 = &off_24D932AA0;
      goto LABEL_85;
    }
    if (a3[1] != (const std::string::value_type *)1)
      goto LABEL_65;
    v40 = *(unsigned __int8 *)*a3;
LABEL_60:
    if (v40 != 124)
      goto LABEL_65;
    goto LABEL_61;
  }
  if (v39 == 1)
  {
    v40 = *(unsigned __int8 *)a3;
    if (v40 == 38)
      goto LABEL_61;
    goto LABEL_60;
  }
  if (v39 != 2)
    goto LABEL_65;
  if (*(_WORD *)a3 == 15677)
  {
LABEL_69:
    v44 = (uint64_t)v103;
    if (v103)
    {
      if (v103 == v102)
      {
        v99 = v98;
        (*((void (**)(uint64_t (***)(), _BYTE *))v102[0] + 3))(v102, v98);
        goto LABEL_82;
      }
      v44 = ((uint64_t (*)(uint64_t (***)()))(*v103)[2])(v103);
    }
    v99 = (_BYTE *)v44;
LABEL_82:
    std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)v98);
    v45 = (std::locale *)operator new(0x28uLL);
    v46 = &off_24D932990;
    goto LABEL_85;
  }
  if (*(_WORD *)a3 != 15649)
  {
LABEL_65:
    v43 = (uint64_t)v103;
    if (v103)
    {
      if (v103 == v102)
      {
        v99 = v98;
        (*((void (**)(uint64_t (***)(), _BYTE *))v102[0] + 3))(v102, v98);
        goto LABEL_74;
      }
      v43 = ((uint64_t (*)(uint64_t (***)()))(*v103)[2])(v103);
    }
    v99 = (_BYTE *)v43;
LABEL_74:
    std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)v98);
    v45 = (std::locale *)operator new(0x28uLL);
    v46 = &off_24D932B20;
    goto LABEL_85;
  }
LABEL_75:
  v47 = (uint64_t)v103;
  if (v103)
  {
    if (v103 == v102)
    {
      v99 = v98;
      (*((void (**)(uint64_t (***)(), _BYTE *))v102[0] + 3))(v102, v98);
      goto LABEL_84;
    }
    v47 = ((uint64_t (*)(uint64_t (***)()))(*v103)[2])(v103);
  }
  v99 = (_BYTE *)v47;
LABEL_84:
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)v98);
  v45 = (std::locale *)operator new(0x28uLL);
  v46 = &off_24D932A20;
LABEL_85:
  v45->__locale_ = (std::locale::__imp *)v46;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&,turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)&v45[1], (uint64_t)v104);
  v107 = v45;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::swap[abi:ne180100](v106, v100);
  v48 = v107;
  if (v107 == v106)
  {
    v49 = 4;
    v48 = v106;
  }
  else
  {
    if (!v107)
      goto LABEL_90;
    v49 = 5;
  }
  (*((void (**)(void))v48->__locale_ + v49))();
LABEL_90:
  v50 = v105;
  if (v105 == v104)
  {
    v51 = 4;
    v50 = v104;
  }
  else
  {
    if (!v105)
      goto LABEL_95;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_95:
  v52 = v99;
  if (v99 == v98)
  {
    v53 = 4;
    v52 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_100;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_100:
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v106);
  locale = v106[0].__locale_;
  v55 = (std::__shared_weak_count *)a1[4];
  v83 = a1[3];
  v84 = v55;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = *(std::__shared_weak_count **)(v92 + 32);
  v81 = *(_QWORD *)(v92 + 24);
  v82 = v58;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = (uint64_t)v101;
  if (v101)
  {
    if (v101 == v100)
    {
      v97 = v96;
      (*(void (**)(_QWORD *, _BYTE *))(v100[0] + 24))(v100, v96);
      goto LABEL_111;
    }
    v61 = (*(uint64_t (**)(_QWORD *))(*v101 + 16))(v101);
  }
  v97 = (_BYTE *)v61;
LABEL_111:
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::make_planner_node(&v83, &v81, (uint64_t)v96, output_type, &v85);
  turi::unity_sarray::construct_from_planner_node(locale, &v85);
  v62 = v86;
  if (v86)
  {
    v63 = (unint64_t *)&v86->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v97;
  if (v97 == v96)
  {
    v66 = 4;
    v65 = v96;
    goto LABEL_120;
  }
  if (v97)
  {
    v66 = 5;
LABEL_120:
    (*(void (**)(_QWORD *))(*v65 + 8 * v66))(v65);
  }
  v67 = v82;
  if (v82)
  {
    v68 = (unint64_t *)&v82->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v84;
  if (v84)
  {
    v71 = (unint64_t *)&v84->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  *a4 = *(_OWORD *)&v106[0].__locale_;
  v73 = v101;
  if (v101 == v100)
  {
    v74 = 4;
    v73 = v100;
  }
  else
  {
    if (!v101)
      goto LABEL_136;
    v74 = 5;
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v74))(v73);
LABEL_136:
  v75 = v103;
  if (v103 == v102)
  {
    v76 = 4;
    v75 = v102;
  }
  else
  {
    if (!v103)
      goto LABEL_141;
    v76 = 5;
  }
  ((void (*)(uint64_t (***)()))(*v75)[v76])(v75);
LABEL_141:
  v77 = v93;
  if (v93)
  {
    v78 = (unint64_t *)&v93->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
}

void sub_2181DAE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  v51 = *(_QWORD **)(v49 - 184);
  if (v51 == (_QWORD *)(v49 - 208))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 208);
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_6:
  v53 = *(_QWORD **)(v49 - 152);
  if (v53 == (_QWORD *)(v49 - 176))
  {
    v54 = 4;
    v53 = (_QWORD *)(v49 - 176);
  }
  else
  {
    if (!v53)
      goto LABEL_11;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_11:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::make_planner_node@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  const void **v27[3];
  _BYTE v28[8];
  _QWORD *v29;
  void **v30;
  char v31;
  int v32;
  _QWORD v33[4];
  const void *v34[2];
  char v35;
  uint64_t v36;
  std::string v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v37, "output_type");
  v40 = 0;
  v39 = 0;
  v38 = a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v28, &v37, 1);
  turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>(&v26, a3);
  std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(v34, "function", &v26);
  std::map<std::string,turi::any>::map[abi:ne180100]((uint64_t)v27, v34, 1);
  v10 = a1[1];
  v33[0] = *a1;
  v33[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a2[1];
  v33[2] = *a2;
  v33[3] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v30 = (void **)&v23;
  v31 = 0;
  v16 = operator new(0x20uLL);
  v17 = 0;
  v23 = v16;
  v24 = v16;
  v25 = v16 + 4;
  do
  {
    v18 = *(_OWORD *)&v33[2 * v17];
    *(_OWORD *)v16 = v18;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    ++v17;
    v16 += 2;
  }
  while (v17 != 2);
  v24 = v16;
  v32 = 2;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v32, (uint64_t)v28, v27, &v23, a5);
  v30 = (void **)&v23;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v30);
  for (i = 2; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v33[i]);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)v27, v27[1]);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (v35 < 0)
    operator delete((void *)v34[0]);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v28, v29);
  return std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v37);
}

void sub_2181DB268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t i;

  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(&a25 + i));
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a15, a16);
  std::pair<std::string const,turi::any>::~pair(v25 - 128);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a19, a20);
  std::pair<std::string const,turi::flexible_type>::~pair(v25 - 96);
  _Unwind_Resume(a1);
}

void sub_2181DB2F8()
{
  JUMPOUT(0x2181DB2E8);
}

void sub_2181DB300()
{
  JUMPOUT(0x2181DB2F0);
}

void turi::unity_sarray::drop_missing_values(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *exception;
  __int128 v12;
  std::locale v13;

  v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "drop_missing_values", 1704, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sarray::missing_mask(this, 0, 0, &v12);
  (*(void (**)(turi::unity_sarray *, __int128 *))(*(_QWORD *)this + 168))(this, &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2181DB4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sarray::missing_mask@<X0>(turi::unity_sarray *this@<X0>, int a2@<W1>, int a3@<W2>, _OWORD *a4@<X8>)
{
  unsigned int v8;
  BOOL v9;
  uint64_t (**v10)();
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
  v21 = 0;
  if (!a2 || (v8 <= 9 ? (v9 = ((1 << v8) & 0x238) == 0) : (v9 = 1), v9))
  {
    if (a3)
      v10 = &off_24D932CA0;
    else
      v10 = &off_24D932D20;
  }
  else if (a3)
  {
    v10 = &off_24D932BA0;
  }
  else
  {
    v10 = &off_24D932C20;
  }
  v22[0] = v10;
  v23 = v22;
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::swap[abi:ne180100](v22, v20);
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_17;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
  v13 = (uint64_t)v21;
  if (!v21)
  {
LABEL_20:
    v19 = (_BYTE *)v13;
    goto LABEL_22;
  }
  if (v21 != v20)
  {
    v13 = (*(uint64_t (**)(void))(*v21 + 16))();
    goto LABEL_20;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _BYTE *))(v20[0] + 24))(v20, v18);
LABEL_22:
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v18, 0, 0, 0, a4);
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  result = v21;
  if (v21 == v20)
  {
    v17 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_2181DB6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t turi::unity_sarray::fill_missing_values@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  char v12;
  unsigned int v13;
  unint64_t *locale;
  unint64_t v15;
  unint64_t v17;
  int v18;
  uint64_t (***v19)();
  uint64_t v20;
  _QWORD *exception;
  _BYTE v23[13];
  uint64_t (**v24)();
  _BYTE v25[13];
  uint64_t (***v26)();
  std::locale v27[3];

  v27[2] = *(std::locale *)MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "fill_missing_values", 1743, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v27, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v12 = *(_BYTE *)(a2 + 12);
  if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * v12
                                                                                          + (*(int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1)])
    turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_0::operator()();
  memset(v27, 0, 13);
  if (v27 == (std::locale *)a2)
  {
    LOBYTE(v13) = 0;
    *(_QWORD *)&v23[5] = *(_QWORD *)(a2 + 5);
    *(_QWORD *)v23 = *(_QWORD *)a2;
    v23[12] = 0;
  }
  else
  {
    *(std::locale::__imp **)((char *)&v27[0].__locale_ + 5) = *(std::locale::__imp **)(a2 + 5);
    v27[0] = *(std::locale *)a2;
    BYTE4(v27[1].__locale_) = *(_BYTE *)(a2 + 12);
    v13 = BYTE4(v27[1].__locale_);
    if (BYTE4(v27[1].__locale_) <= 9u && ((1 << SBYTE4(v27[1].__locale_)) & 0x33C) != 0)
    {
      locale = (unint64_t *)v27[0].__locale_;
      do
        v15 = __ldaxr(locale);
      while (__stlxr(v15 + 1, locale));
      v13 = BYTE4(v27[1].__locale_);
    }
    *(std::locale *)&v23[5] = *(std::locale *)((char *)&v27[0].__locale_ + 5);
    *(std::locale *)v23 = v27[0];
    v23[12] = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      do
        v17 = __ldaxr(*(unint64_t **)v23);
      while (__stlxr(v17 + 1, *(unint64_t **)v23));
      LOBYTE(v13) = v23[12];
    }
  }
  *(_QWORD *)&v25[5] = *(_QWORD *)&v23[5];
  v24 = &off_24D932DA0;
  *(_QWORD *)v25 = *(_QWORD *)v23;
  v25[12] = v13;
  v23[12] = 0;
  v26 = &v24;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  turi::unity_sarray::transform_lambda(a1, (uint64_t)&v24, v18, 0, 0, a3);
  v19 = v26;
  if (v26 == &v24)
  {
    v20 = 4;
    v19 = &v24;
    goto LABEL_26;
  }
  if (v26)
  {
    v20 = 5;
LABEL_26:
    (*v19)[v20]();
  }
  turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)v23);
  return turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1((uint64_t)v27);
}

void sub_2181DBA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
  std::locale::~locale(&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::fill_missing_values(turi::flexible_type)::$_1::~$_1(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t turi::unity_sarray::tail(turi::unity_sarray *this, unint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *exception;
  std::locale v14;

  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "tail", 1760, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v14);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v10 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  if (v10 < a2)
    a2 = v10;
  v11 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  return (*(uint64_t (**)(turi::unity_sarray *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 528))(this, v11 - a2, 1, v11);
}

void sub_2181DBE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::make_uniform_BOOLean_array(turi::unity_sarray *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, _OWORD *a5@<X8>)
{
  float v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  turi *v14;
  turi *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  void **v48;
  _QWORD v49[3];
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v8 = 0.0;
    if (a2 >= 0.0)
      v8 = a2;
    turi::unity_sarray::make_exact_uniform_BOOLean_array(this, (unint64_t)(float)(v8 * (float)(unint64_t)this), a3, a5);
    return;
  }
  turi::unity_sarray::create_sequential_sarray((uint64_t)this, 0, 0, &v51);
  v47 = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  BYTE12(v51) = 0;
  DWORD2(v51) = 0;
  *(_QWORD *)&v51 = a3;
  v14 = (turi *)turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)&v51);
  v15 = v14;
  switch(BYTE12(v51))
  {
    case 2:
      v16 = (unint64_t *)v51;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (_QWORD *)v51;
        if ((_QWORD)v51)
        {
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v20 = v19;
          v21 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v22 = (unint64_t *)v51;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = (_QWORD *)v51;
        if ((_QWORD)v51)
        {
          v26 = *(void **)(v51 + 8);
          if (v26)
          {
            *(_QWORD *)(v51 + 16) = v26;
            operator delete(v26);
          }
          v20 = v25;
          v21 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v27 = (unint64_t *)v51;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = (_QWORD *)v51;
        if ((_QWORD)v51)
        {
          v48 = (void **)(v51 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v48);
          goto LABEL_38;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v51;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v30 = (_QWORD *)v51;
        if ((_QWORD)v51)
        {
          v48 = (void **)(v51 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_38:
          v20 = v30;
          v21 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v38 = (unint64_t *)v51;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = (_QWORD *)v51;
        if ((_QWORD)v51)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v51 + 16));
          v20 = v41;
          v37 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v34 = (unint64_t *)v51;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v14 = (turi *)v51;
        if ((_QWORD)v51)
        {
          v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v51);
          v37 = 2071181815;
LABEL_49:
          v21 = v37 | 0x1030C4000000000;
LABEL_50:
          v14 = (turi *)MEMORY[0x219A19A08](v20, v21);
        }
      }
      break;
    default:
      break;
  }
  v42 = turi::hash64_proportion_cutoff(v14, a2);
  v49[0] = &off_24D932E20;
  v49[1] = v42;
  v49[2] = v15;
  v50 = v49;
  turi::unity_sarray::transform_lambda(v47, (uint64_t)v49, 0, 0, 0, a5);
  v43 = v50;
  if (v50 == v49)
  {
    v44 = 4;
    v43 = v49;
    goto LABEL_55;
  }
  if (v50)
  {
    v44 = 5;
LABEL_55:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  if (*((_QWORD *)&v47 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v47 + 1) + 16))(*((_QWORD *)&v47 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v47 + 1));
    }
  }
}

void sub_2181DC1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double turi::unity_sarray::make_exact_uniform_BOOLean_array@<D0>(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  turi::unity_sframe *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::vector<std::string>::pointer v28;
  unint64_t v29;
  unint64_t v30;
  std::vector<std::string>::pointer v31;
  std::string::__raw *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::vector<std::string>::pointer v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  std::vector<std::string>::pointer v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::vector<std::string>::pointer v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::vector<std::string>::pointer begin;
  unint64_t v52;
  BOOL v53;
  std::vector<std::string>::pointer v54;
  unint64_t v55;
  std::vector<std::string>::pointer v56;
  std::string::__raw *v57;
  uint64_t v58;
  double result;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::vector<std::string>::pointer v69;
  unint64_t v70;
  BOOL v71;
  std::vector<std::string>::pointer v72;
  unint64_t v73;
  BOOL v74;
  std::vector<std::string>::pointer v75;
  unint64_t v76;
  BOOL v77;
  std::vector<std::string>::pointer v78;
  unint64_t v79;
  BOOL v80;
  std::vector<std::string>::pointer v81;
  unint64_t v82;
  BOOL v83;
  std::vector<std::string>::pointer v84;
  unint64_t v85;
  std::vector<std::string>::pointer v86;
  void *size;
  std::vector<std::string>::pointer v88;
  unint64_t v89;
  std::vector<std::string>::pointer v90;
  std::vector<std::string>::pointer v91;
  unint64_t v92;
  std::vector<std::string>::pointer v93;
  unint64_t v94;
  unsigned int v95;
  std::vector<std::string>::pointer v96;
  unint64_t v97;
  std::vector<std::string>::pointer v98;
  void *v99[2];
  char v100;
  std::vector<int>::value_type v101;
  std::vector<int> v102;
  std::vector<std::string>::value_type __x;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void *__p[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void *v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  _QWORD v117[3];
  _QWORD *v118;
  std::vector<std::string> v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    *(std::vector<std::string>::pointer *)((char *)&v119.__begin_ + 5) = 0;
    v119.__begin_ = 0;
    (*(void (**)(void *, std::vector<std::string> *, turi::unity_sarray *, _QWORD))(*(_QWORD *)__p[0] + 40))(__p[0], &v119, this, 0);
    switch(BYTE4(v119.__end_))
    {
      case 2:
        begin = v119.__begin_;
        do
        {
          v52 = __ldaxr((unint64_t *)begin);
          v53 = --v52 == 0;
        }
        while (__stlxr(v52, (unint64_t *)begin));
LABEL_79:
        if (v53)
        {
          v56 = v119.__begin_;
          if (v119.__begin_)
          {
            if (v119.__begin_[1].__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v119.__begin_->__r_.__value_.__l.__size_);
            v57 = (std::string::__raw *)v56;
            v58 = 0x1012C404EF22A49;
            goto LABEL_151;
          }
        }
        break;
      case 3:
        v69 = v119.__begin_;
        do
        {
          v70 = __ldaxr((unint64_t *)v69);
          v71 = --v70 == 0;
        }
        while (__stlxr(v70, (unint64_t *)v69));
LABEL_119:
        if (v71)
        {
          v86 = v119.__begin_;
          if (v119.__begin_)
          {
            size = (void *)v119.__begin_->__r_.__value_.__l.__size_;
            if (size)
            {
              v119.__begin_->__r_.__value_.__r.__words[2] = (std::string::size_type)size;
              operator delete(size);
            }
            v57 = (std::string::__raw *)v86;
            v58 = 0x1080C409938AC02;
            goto LABEL_151;
          }
        }
        break;
      case 4:
        v72 = v119.__begin_;
        do
        {
          v73 = __ldaxr((unint64_t *)v72);
          v74 = --v73 == 0;
        }
        while (__stlxr(v73, (unint64_t *)v72));
LABEL_127:
        if (v74)
        {
          v90 = v119.__begin_;
          if (v119.__begin_)
          {
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119.__begin_->__r_.__value_.__l.__size_;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
            goto LABEL_137;
          }
        }
        break;
      case 5:
        v75 = v119.__begin_;
        do
        {
          v76 = __ldaxr((unint64_t *)v75);
          v77 = --v76 == 0;
        }
        while (__stlxr(v76, (unint64_t *)v75));
LABEL_133:
        if (v77)
        {
          v90 = v119.__begin_;
          if (v119.__begin_)
          {
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119.__begin_->__r_.__value_.__l.__size_;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
LABEL_137:
            v57 = (std::string::__raw *)v90;
            v58 = 0x1020C405E66F15BLL;
            goto LABEL_151;
          }
        }
        break;
      case 8:
        v81 = v119.__begin_;
        do
        {
          v82 = __ldaxr((unint64_t *)v81);
          v83 = --v82 == 0;
        }
        while (__stlxr(v82, (unint64_t *)v81));
LABEL_146:
        if (v83)
        {
          v98 = v119.__begin_;
          if (v119.__begin_)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)&v119.__begin_->__r_.__value_.__r.__words[2]);
            v57 = (std::string::__raw *)v98;
            v95 = -235920773;
            goto LABEL_150;
          }
        }
        break;
      case 9:
        v78 = v119.__begin_;
        do
        {
          v79 = __ldaxr((unint64_t *)v78);
          v80 = --v79 == 0;
        }
        while (__stlxr(v79, (unint64_t *)v78));
LABEL_140:
        if (v80 && v119.__begin_)
        {
          v57 = (std::string::__raw *)std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v119.__begin_->__r_.__value_.__r.__words);
          v95 = 2071181815;
LABEL_150:
          v58 = v95 | 0x1030C4000000000;
LABEL_151:
          MEMORY[0x219A19A08](v57, v58);
        }
        break;
      default:
        goto LABEL_152;
    }
    goto LABEL_152;
  }
  if (a2 >= (unint64_t)this)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    BYTE4(v119.__end_) = 0;
    LODWORD(v119.__end_) = 0;
    v119.__begin_ = (std::vector<std::string>::pointer)1;
    (*(void (**)(void *, std::vector<std::string> *, turi::unity_sarray *, _QWORD))(*(_QWORD *)__p[0] + 40))(__p[0], &v119, this, 0);
    switch(BYTE4(v119.__end_))
    {
      case 2:
        v54 = v119.__begin_;
        do
        {
          v55 = __ldaxr((unint64_t *)v54);
          v53 = --v55 == 0;
        }
        while (__stlxr(v55, (unint64_t *)v54));
        goto LABEL_79;
      case 3:
        v84 = v119.__begin_;
        do
        {
          v85 = __ldaxr((unint64_t *)v84);
          v71 = --v85 == 0;
        }
        while (__stlxr(v85, (unint64_t *)v84));
        goto LABEL_119;
      case 4:
        v88 = v119.__begin_;
        do
        {
          v89 = __ldaxr((unint64_t *)v88);
          v74 = --v89 == 0;
        }
        while (__stlxr(v89, (unint64_t *)v88));
        goto LABEL_127;
      case 5:
        v91 = v119.__begin_;
        do
        {
          v92 = __ldaxr((unint64_t *)v91);
          v77 = --v92 == 0;
        }
        while (__stlxr(v92, (unint64_t *)v91));
        goto LABEL_133;
      case 8:
        v96 = v119.__begin_;
        do
        {
          v97 = __ldaxr((unint64_t *)v96);
          v83 = --v97 == 0;
        }
        while (__stlxr(v97, (unint64_t *)v96));
        goto LABEL_146;
      case 9:
        v93 = v119.__begin_;
        do
        {
          v94 = __ldaxr((unint64_t *)v93);
          v80 = --v94 == 0;
        }
        while (__stlxr(v94, (unint64_t *)v93));
        goto LABEL_140;
      default:
        break;
    }
LABEL_152:
    result = *(double *)__p;
    *a4 = *(_OWORD *)__p;
    return result;
  }
  turi::unity_sarray::create_sequential_sarray((uint64_t)this, 0, 0, &v116);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v116 + 352))(__p, v116, a3);
  v114 = __p[0];
  v115 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v8 = (unint64_t *)((char *)__p[1] + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v11 = (unint64_t *)((char *)__p[1] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v13);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>(&v112, (uint64_t)v13);
  v14 = v112;
  v110 = v114;
  v111 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shash");
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v14 + 200))(v14, &v110, __p);
  if (v109 < 0)
    operator delete(__p[0]);
  v17 = v111;
  if (v111)
  {
    v18 = (unint64_t *)&v111->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v112;
  std::string::basic_string[abi:ne180100]<0>(&__x, "shash");
  std::vector<std::string>::vector(&v119, 1uLL, &__x);
  v101 = 1;
  std::vector<int>::vector(&v102, 1uLL, &v101);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::vector<std::string> *, std::vector<int> *))(*(_QWORD *)v20 + 344))(&v104, v20, &v119, &v102);
  v21 = v104;
  std::string::basic_string[abi:ne180100]<0>(v99, "shash");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v21 + 192))(&v106, v21, v99);
  turi::gl_sarray::gl_sarray(__p, &v106);
  v22 = v107;
  if (v107)
  {
    v23 = (unint64_t *)&v107->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v100 < 0)
    operator delete(v99[0]);
  v25 = v105;
  if (v105)
  {
    v26 = (unint64_t *)&v105->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v102.__begin_)
  {
    v102.__end_ = v102.__begin_;
    operator delete(v102.__begin_);
  }
  v102.__begin_ = (std::vector<int>::pointer)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  turi::gl_sarray::operator[]((_QWORD **)__p, a2, (uint64_t)&v119);
  v28 = v119.__begin_;
  switch(BYTE4(v119.__end_))
  {
    case 2:
      do
      {
        v29 = __ldaxr((unint64_t *)v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)v28));
      if (!v30)
      {
        v31 = v119.__begin_;
        if (v119.__begin_)
        {
          if (v119.__begin_[1].__r_.__value_.__s.__data_[7] < 0)
            operator delete((void *)v119.__begin_->__r_.__value_.__l.__size_);
          v32 = (std::string::__raw *)v31;
          v33 = 0x1012C404EF22A49;
          goto LABEL_68;
        }
      }
      break;
    case 3:
      do
      {
        v34 = __ldaxr((unint64_t *)v28);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unint64_t *)v28));
      if (!v35)
      {
        v36 = v119.__begin_;
        if (v119.__begin_)
        {
          v37 = (void *)v119.__begin_->__r_.__value_.__l.__size_;
          if (v37)
          {
            v119.__begin_->__r_.__value_.__r.__words[2] = (std::string::size_type)v37;
            operator delete(v37);
          }
          v32 = (std::string::__raw *)v36;
          v33 = 0x1080C409938AC02;
          goto LABEL_68;
        }
      }
      break;
    case 4:
      do
      {
        v38 = __ldaxr((unint64_t *)v28);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, (unint64_t *)v28));
      if (!v39)
      {
        v40 = v119.__begin_;
        if (v119.__begin_)
        {
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119.__begin_->__r_.__value_.__l.__size_;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
          goto LABEL_58;
        }
      }
      break;
    case 5:
      do
      {
        v41 = __ldaxr((unint64_t *)v28);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, (unint64_t *)v28));
      if (!v42)
      {
        v40 = v119.__begin_;
        if (v119.__begin_)
        {
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119.__begin_->__r_.__value_.__l.__size_;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
LABEL_58:
          v32 = (std::string::__raw *)v40;
          v33 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        }
      }
      break;
    case 8:
      do
      {
        v43 = __ldaxr((unint64_t *)v28);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, (unint64_t *)v28));
      if (!v44)
      {
        v45 = v119.__begin_;
        if (v119.__begin_)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)&v119.__begin_->__r_.__value_.__r.__words[2]);
          v32 = (std::string::__raw *)v45;
          v46 = -235920773;
          goto LABEL_67;
        }
      }
      break;
    case 9:
      do
      {
        v47 = __ldaxr((unint64_t *)v28);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, (unint64_t *)v28));
      if (!v48 && v119.__begin_)
      {
        v32 = (std::string::__raw *)std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v119.__begin_->__r_.__value_.__r.__words);
        v46 = 2071181815;
LABEL_67:
        v33 = v46 | 0x1030C4000000000;
LABEL_68:
        MEMORY[0x219A19A08](v32, v33);
      }
      break;
    default:
      break;
  }
  v117[0] = &off_24D932EA0;
  v117[1] = v28;
  v118 = v117;
  turi::unity_sarray::transform_lambda((uint64_t)v114, (uint64_t)v117, 0, 0, 0, a4);
  v49 = v118;
  if (v118 == v117)
  {
    v50 = 4;
    v49 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_87;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_87:
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
  v60 = v113;
  if (v113)
  {
    v61 = (unint64_t *)&v113->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v115;
  if (v115)
  {
    v64 = (unint64_t *)&v115->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return result;
}

void sub_2181DCB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;

  v41 = *(_QWORD **)(v39 - 88);
  if (v41 == v38)
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 112);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a29);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 - 144);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::create_sequential_sarray(uint64_t this@<X0>, _QWORD *a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *__p[2];
  char v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  void **v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (this < 0)
    turi::unity_sarray::create_sequential_sarray(long,long,BOOL)::$_0::operator()();
  if ((a3 & 1) != 0)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v61);
    BYTE4(v64) = 0;
    LODWORD(v64) = 0;
    v63 = a2;
    (*(void (**)(_QWORD, _QWORD **, uint64_t, _QWORD))(*(_QWORD *)v61 + 40))(v61, &v63, this, 0);
    switch(BYTE4(v64))
    {
      case 2:
        v7 = v63;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = v63;
          if (v63)
          {
            if (*((char *)v63 + 31) < 0)
              operator delete((void *)v63[1]);
            v11 = v10;
            v12 = 0x1012C404EF22A49;
            goto LABEL_46;
          }
        }
        break;
      case 3:
        v17 = v63;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = v63;
          if (v63)
          {
            v21 = (void *)v63[1];
            if (v21)
            {
              v63[2] = v21;
              operator delete(v21);
            }
            v11 = v20;
            v12 = 0x1080C409938AC02;
            goto LABEL_46;
          }
        }
        break;
      case 4:
        v22 = v63;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v63;
          if (v63)
          {
            v62 = (void **)(v63 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v62);
            goto LABEL_34;
          }
        }
        break;
      case 5:
        v26 = v63;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v25 = v63;
          if (v63)
          {
            v62 = (void **)(v63 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v62);
LABEL_34:
            v11 = v25;
            v12 = 0x1020C405E66F15BLL;
            goto LABEL_46;
          }
        }
        break;
      case 8:
        v33 = v63;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = v63;
          if (v63)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v63 + 2);
            v11 = v36;
            v32 = -235920773;
            goto LABEL_45;
          }
        }
        break;
      case 9:
        v29 = v63;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31 && v63)
        {
          v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v63);
          v32 = 2071181815;
LABEL_45:
          v12 = v32 | 0x1030C4000000000;
LABEL_46:
          MEMORY[0x219A19A08](v11, v12);
        }
        break;
      default:
        break;
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v63);
    v37 = v63;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::make_planner_node(0, this, &v57);
    turi::unity_sarray::construct_from_planner_node(v37, &v57);
    v38 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v61;
    v55 = v63;
    v56 = v64;
    if (v64)
    {
      v42 = (unint64_t *)&v64->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "-");
    (*(void (**)(uint64_t, _QWORD **, void **))(*(_QWORD *)v41 + 312))(v41, &v55, __p);
    if (v54 < 0)
      operator delete(__p[0]);
    v44 = v56;
    if (v56)
    {
      v45 = (unint64_t *)&v56->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v64;
    if (v64)
    {
      v48 = (unint64_t *)&v64->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v61);
    v13 = (_QWORD *)v61;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::make_planner_node((uint64_t)a2, (uint64_t)a2 + this, &v59);
    turi::unity_sarray::construct_from_planner_node(v13, &v59);
    v14 = v60;
    if (v60)
    {
      v15 = (unint64_t *)&v60->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *a4 = v61;
  }
}

void sub_2181DD15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 - 56);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::sample(turi::unity_sarray *this, float a2, uint64_t a3, int a4)
{
  turi::unity_sarray *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v8 = (turi::unity_sarray *)(*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  turi::unity_sarray::make_uniform_BOOLean_array(v8, a2, a3, a4, &v18);
  v17 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  (*(void (**)(turi::unity_sarray *, __int128 *))(*(_QWORD *)this + 168))(this, &v17);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_2181DD354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sarray::hash@<X0>(turi::unity_sarray *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *result;
  uint64_t v36;
  void **v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  v41 = 0;
  v40 = a2;
  v5 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)&v40);
  switch(v42)
  {
    case 2:
      v6 = (unint64_t *)v40;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = v40;
        if (v40)
        {
          if (*(char *)(v40 + 31) < 0)
            operator delete(*(void **)(v40 + 8));
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v12 = (unint64_t *)v40;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v40;
        if (v40)
        {
          v16 = *(void **)(v40 + 8);
          if (v16)
          {
            *(_QWORD *)(v40 + 16) = v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v17 = (unint64_t *)v40;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v40;
        if (v40)
        {
          v37 = (void **)(v40 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v37);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v21 = (unint64_t *)v40;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v20 = v40;
        if (v40)
        {
          v37 = (void **)(v40 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v37);
LABEL_26:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v31 = (unint64_t *)v40;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v40;
        if (v40)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40 + 16));
          v10 = v34;
          v30 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v24 = (unint64_t *)v40;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v40;
        if (v40)
        {
          v28 = *(void **)(v40 + 48);
          if (v28)
          {
            *(_QWORD *)(v40 + 56) = v28;
            operator delete(v28);
          }
          v29 = *(void **)(v27 + 24);
          if (v29)
          {
            *(_QWORD *)(v27 + 32) = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
          v10 = v27;
          v30 = 2071181815;
LABEL_41:
          v11 = v30 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v10, v11);
        }
      }
      break;
    default:
      break;
  }
  v38[0] = &off_24D932F20;
  v38[1] = v5;
  v39 = v38;
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v38, 0, 0, 0, a3);
  result = v39;
  if (v39 == v38)
  {
    v36 = 4;
    result = v38;
  }
  else
  {
    if (!v39)
      return result;
    v36 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
}

void sub_2181DD60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, int a15, int a16, char a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::count_bag_of_words(uint64_t a1@<X0>, uint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  std::__shared_weak_count *locale;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::locale::__imp *v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void ***v33;
  void **v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  void **v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const std::string *v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  _QWORD *v46;
  unint64_t v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void **v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  double v82;
  double v83;
  unint64_t *v84;
  unint64_t v85;
  double v86;
  double v87;
  uint64_t v88;
  void **v89;
  std::locale::__imp *v90;
  unsigned int *v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  std::runtime_error *v95;
  std::string *v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  BOOL v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  BOOL v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  BOOL v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  BOOL v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  BOOL v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  double v135;
  unint64_t *v136;
  unint64_t v137;
  double v138;
  void *v139;
  void *v140;
  unsigned int v141;
  unint64_t *v142;
  unint64_t v143;
  double v144;
  void *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  double v150;
  turi::flexible_type_impl *v151;
  std::locale::__imp *v152;
  uint64_t v153;
  std::locale::__imp *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  char *v158;
  char *v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *exception;
  uint64_t v166;
  BOOL v167;
  _OWORD *v168;
  uint64_t v169;
  char v170;
  _QWORD **v171;
  _QWORD *v172;
  uint64_t v173;
  std::string __idx;
  void *v175[2];
  _QWORD v176[2];
  std::locale v177[2];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  void *v181;
  char v182;
  uint64_t v183;
  std::string v184;
  _BYTE v185[24];
  _BYTE *v186;
  double v187;
  int v188;
  char v189;
  uint64_t v190[2];

  v190[0] = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_bag_of_words", 1860, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(v177, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(v177);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 2)
    turi::unity_sarray::count_bag_of_words(std::map<std::string,turi::flexible_type>)::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(v177, "to_lower");
  v12 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2, (const void **)&v177[0].__locale_);
  v13 = a2 + 1;
  if (SBYTE7(v178) < 0)
    operator delete(v177[0].__locale_);
  if (v13 != (uint64_t **)v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "to_lower");
    v177[0].__locale_ = (std::locale::__imp *)v175;
    v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)v175, (uint64_t)&std::piecewise_construct, v177);
    v15 = 0;
    switch(*((_BYTE *)v14 + 68))
    {
      case 0:
        v15 = *((_QWORD *)v14 + 7);
        goto LABEL_42;
      case 1:
        v15 = (uint64_t)*((double *)v14 + 7);
        goto LABEL_42;
      case 2:
        v21 = *((_QWORD *)v14 + 7);
        __idx.__r_.__value_.__r.__words[0] = 0;
        v22 = (char *)(v21 + 8);
        if (*(char *)(v21 + 31) < 0)
          v22 = *(char **)(v21 + 8);
        std::string::basic_string[abi:ne180100]<0>(v177, v22);
        v15 = std::stoll((const std::string *)v177, (size_t *)&__idx, 10);
        if (SBYTE7(v178) < 0)
          operator delete(v177[0].__locale_);
        if (*(char *)(v21 + 31) < 0)
          v23 = *(_QWORD *)(v21 + 16);
        else
          v23 = *(unsigned __int8 *)(v21 + 31);
        if (__idx.__r_.__value_.__r.__words[0] != v23)
        {
          v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v96 = std::string::append(&v184, " cannot be interpreted as an integer");
          v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          *(_QWORD *)&v178 = *((_QWORD *)&v96->__r_.__value_.__l + 2);
          *(_OWORD *)&v177[0].__locale_ = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v95, (const std::string *)v177);
          __cxa_throw(v95, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_42;
      case 3:
        v17 = *((_QWORD *)v14 + 7);
        v177[1].__locale_ = 0;
        *(_QWORD *)&v178 = 0;
        v177[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v177, *(const void **)(v17 + 8), *(_QWORD *)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v177[0].__locale_)
        {
          v177[1] = v177[0];
          operator delete(v177[0].__locale_);
        }
        goto LABEL_41;
      case 4:
        v24 = *((_QWORD *)v14 + 7);
        v177[1].__locale_ = 0;
        *(_QWORD *)&v178 = 0;
        v177[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v177, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
        goto LABEL_41;
      case 5:
        v25 = *((_QWORD *)v14 + 7);
        v177[1].__locale_ = 0;
        *(_QWORD *)&v178 = 0;
        v177[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v177, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
        goto LABEL_41;
      case 6:
        v15 = (uint64_t)(*((_QWORD *)v14 + 7) << 8) >> 8;
        goto LABEL_42;
      case 7:
        goto LABEL_42;
      case 8:
        v26 = *((_QWORD *)v14 + 7);
        v27 = *(std::locale::__imp **)(v26 + 16);
        v177[0] = *(std::locale *)(v26 + 8);
        v177[1].__locale_ = v27;
        if (v27)
        {
          v28 = (unsigned int *)((char *)v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(_OWORD *)(v26 + 24);
        v31 = *(_OWORD *)(v26 + 56);
        v179 = *(_OWORD *)(v26 + 40);
        v180 = v31;
        v178 = v30;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v177[1]);
        goto LABEL_41;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v177, *((_QWORD *)v14 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v179 + 1))
        {
          *(_QWORD *)&v180 = *((_QWORD *)&v179 + 1);
          operator delete(*((void **)&v179 + 1));
        }
        if ((_QWORD)v178)
        {
          *((_QWORD *)&v178 + 1) = v178;
          operator delete((void *)v178);
        }
        locale = (std::__shared_weak_count *)v177[1].__locale_;
        if (v177[1].__locale_)
        {
          v19 = (unint64_t *)((char *)v177[1].__locale_ + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
            std::__shared_weak_count::__release_weak(locale);
          }
        }
LABEL_41:
        v15 = 0;
LABEL_42:
        v16 = v15 != 0;
        if (SHIBYTE(v176[0]) < 0)
          operator delete(v175[0]);
        goto LABEL_44;
      default:
        turi::flexible_type_fail(0);
LABEL_256:
        __break(1u);
        return;
    }
  }
  v16 = 1;
LABEL_44:
  memset(&v184, 0, sizeof(v184));
  std::string::basic_string[abi:ne180100]<0>(v177, "delimiters");
  v32 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2, (const void **)&v177[0].__locale_);
  v167 = v16;
  if (SBYTE7(v178) < 0)
    operator delete(v177[0].__locale_);
  v168 = a3;
  v166 = a1;
  if (v13 != (uint64_t **)v32)
  {
    std::string::basic_string[abi:ne180100]<0>(&__idx, "delimiters");
    v177[0].__locale_ = (std::locale::__imp *)&__idx;
    v33 = (void ***)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (const void **)&__idx.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v177);
    switch(*((_BYTE *)v33 + 68))
    {
      case 0:
        v34 = v33[7];
        v189 = 0;
        v188 = 0;
        v187 = *(double *)&v34;
        v175[1] = 0;
        v176[0] = 0;
        v175[0] = 0;
        v177[0].__locale_ = (std::locale::__imp *)v175;
        LOBYTE(v177[1].__locale_) = 0;
        v175[0] = operator new(0x10uLL);
        v175[1] = v175[0];
        v176[0] = (char *)v175[0] + 16;
        v175[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v176, (uint64_t *)&v187, v190, (uint64_t)v175[0]);
        switch(v189)
        {
          case 2:
            v35 = *(unint64_t **)&v187;
            do
            {
              v36 = __ldaxr(v35);
              v37 = --v36 == 0;
            }
            while (__stlxr(v36, v35));
            goto LABEL_122;
          case 3:
            v112 = *(unint64_t **)&v187;
            do
            {
              v113 = __ldaxr(v112);
              v114 = --v113 == 0;
            }
            while (__stlxr(v113, v112));
            goto LABEL_198;
          case 4:
            v98 = *(unint64_t **)&v187;
            do
            {
              v99 = __ldaxr(v98);
              v100 = --v99 == 0;
            }
            while (__stlxr(v99, v98));
            goto LABEL_182;
          case 5:
            v117 = *(unint64_t **)&v187;
            do
            {
              v118 = __ldaxr(v117);
              v119 = --v118 == 0;
            }
            while (__stlxr(v118, v117));
            goto LABEL_206;
          case 8:
            v124 = *(unint64_t **)&v187;
            do
            {
              v125 = __ldaxr(v124);
              v126 = --v125 == 0;
            }
            while (__stlxr(v125, v124));
            goto LABEL_213;
          case 9:
            v103 = *(unint64_t **)&v187;
            do
            {
              v104 = __ldaxr(v103);
              v105 = --v104 == 0;
            }
            while (__stlxr(v104, v103));
            goto LABEL_188;
          default:
            goto LABEL_219;
        }
      case 1:
        v78 = v33[7];
        v188 = 0;
        v189 = 1;
        v187 = *(double *)&v78;
        v175[1] = 0;
        v176[0] = 0;
        v175[0] = 0;
        v177[0].__locale_ = (std::locale::__imp *)v175;
        LOBYTE(v177[1].__locale_) = 0;
        v175[0] = operator new(0x10uLL);
        v175[1] = v175[0];
        v176[0] = (char *)v175[0] + 16;
        v175[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v176, (uint64_t *)&v187, v190, (uint64_t)v175[0]);
        switch(v189)
        {
          case 2:
            v79 = *(unint64_t **)&v187;
            do
            {
              v80 = __ldaxr(v79);
              v37 = --v80 == 0;
            }
            while (__stlxr(v80, v79));
            goto LABEL_122;
          case 3:
            v115 = *(unint64_t **)&v187;
            do
            {
              v116 = __ldaxr(v115);
              v114 = --v116 == 0;
            }
            while (__stlxr(v116, v115));
            goto LABEL_198;
          case 4:
            v101 = *(unint64_t **)&v187;
            do
            {
              v102 = __ldaxr(v101);
              v100 = --v102 == 0;
            }
            while (__stlxr(v102, v101));
            goto LABEL_182;
          case 5:
            v120 = *(unint64_t **)&v187;
            do
            {
              v121 = __ldaxr(v120);
              v119 = --v121 == 0;
            }
            while (__stlxr(v121, v120));
            goto LABEL_206;
          case 8:
            v127 = *(unint64_t **)&v187;
            do
            {
              v128 = __ldaxr(v127);
              v126 = --v128 == 0;
            }
            while (__stlxr(v128, v127));
            goto LABEL_213;
          case 9:
            v106 = *(unint64_t **)&v187;
            do
            {
              v107 = __ldaxr(v106);
              v105 = --v107 == 0;
            }
            while (__stlxr(v107, v106));
            goto LABEL_188;
          default:
            goto LABEL_219;
        }
      case 2:
        v42 = (const std::string *)(v33[7] + 1);
        v187 = 0.0;
        v188 = 0;
        v189 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t *)&v187, v42);
        v175[0] = 0;
        v175[1] = 0;
        v176[0] = 0;
        v177[0].__locale_ = (std::locale::__imp *)v175;
        LOBYTE(v177[1].__locale_) = 0;
        v175[0] = operator new(0x10uLL);
        v175[1] = v175[0];
        v176[0] = (char *)v175[0] + 16;
        v175[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v176, (uint64_t *)&v187, v190, (uint64_t)v175[0]);
        switch(v189)
        {
          case 2:
            v43 = *(unint64_t **)&v187;
            do
            {
              v44 = __ldaxr(v43);
              v37 = --v44 == 0;
            }
            while (__stlxr(v44, v43));
            goto LABEL_122;
          case 3:
            v142 = *(unint64_t **)&v187;
            do
            {
              v143 = __ldaxr(v142);
              v114 = --v143 == 0;
            }
            while (__stlxr(v143, v142));
            goto LABEL_198;
          case 4:
            v133 = *(unint64_t **)&v187;
            do
            {
              v134 = __ldaxr(v133);
              v100 = --v134 == 0;
            }
            while (__stlxr(v134, v133));
            goto LABEL_182;
          case 5:
            v146 = *(unint64_t **)&v187;
            do
            {
              v147 = __ldaxr(v146);
              v119 = --v147 == 0;
            }
            while (__stlxr(v147, v146));
            goto LABEL_206;
          case 8:
            v148 = *(unint64_t **)&v187;
            do
            {
              v149 = __ldaxr(v148);
              v126 = --v149 == 0;
            }
            while (__stlxr(v149, v148));
            goto LABEL_213;
          case 9:
            v136 = *(unint64_t **)&v187;
            do
            {
              v137 = __ldaxr(v136);
              v105 = --v137 == 0;
            }
            while (__stlxr(v137, v136));
            goto LABEL_188;
          default:
            goto LABEL_219;
        }
      case 3:
        v45 = v33[7];
        std::vector<turi::flexible_type>::vector(v175, ((_BYTE *)v45[2] - (_BYTE *)v45[1]) >> 3);
        v46 = v45[1];
        if (v45[2] != v46)
        {
          v47 = 0;
          do
          {
            v48 = (char *)v175[0] + 16 * v47;
            switch(v48[12])
            {
              case 2:
                v49 = *(unint64_t **)v48;
                do
                {
                  v50 = __ldaxr(v49);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v49));
                if (!v51)
                {
                  v52 = *(_QWORD *)v48;
                  if (!*(_QWORD *)v48)
                    goto LABEL_110;
                  if (*(char *)(v52 + 31) < 0)
                    operator delete(*(void **)(v52 + 8));
                  v53 = (_QWORD *)v52;
                  v54 = 0x1012C404EF22A49;
                  goto LABEL_109;
                }
                break;
              case 3:
                v66 = *(unint64_t **)v48;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v69 = *(_QWORD **)v48;
                  if (!*(_QWORD *)v48)
                    goto LABEL_110;
                  v70 = (void *)v69[1];
                  if (v70)
                  {
                    v69[2] = v70;
                    operator delete(v70);
                  }
                  v53 = v69;
                  v54 = 0x1080C409938AC02;
                  goto LABEL_109;
                }
                break;
              case 4:
                v55 = *(unint64_t **)v48;
                do
                {
                  v56 = __ldaxr(v55);
                  v57 = v56 - 1;
                }
                while (__stlxr(v57, v55));
                if (!v57)
                {
                  v58 = *(_QWORD **)v48;
                  if (!*(_QWORD *)v48)
                    goto LABEL_110;
                  v177[0].__locale_ = (std::locale::__imp *)(v58 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
                  goto LABEL_102;
                }
                break;
              case 5:
                v71 = *(unint64_t **)v48;
                do
                {
                  v72 = __ldaxr(v71);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v71));
                if (!v73)
                {
                  v58 = *(_QWORD **)v48;
                  if (!*(_QWORD *)v48)
                    goto LABEL_110;
                  v177[0].__locale_ = (std::locale::__imp *)(v58 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
LABEL_102:
                  v53 = v58;
                  v54 = 0x1020C405E66F15BLL;
                  goto LABEL_109;
                }
                break;
              case 8:
                v74 = *(unint64_t **)v48;
                do
                {
                  v75 = __ldaxr(v74);
                  v76 = v75 - 1;
                }
                while (__stlxr(v76, v74));
                if (!v76)
                {
                  v77 = *(_QWORD *)v48;
                  if (!*(_QWORD *)v48)
                    goto LABEL_110;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v77 + 16));
                  v53 = (_QWORD *)v77;
                  v65 = -235920773;
                  goto LABEL_108;
                }
                break;
              case 9:
                v59 = *(unint64_t **)v48;
                do
                {
                  v60 = __ldaxr(v59);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v59));
                if (!v61)
                {
                  v62 = *(_QWORD **)v48;
                  if (*(_QWORD *)v48)
                  {
                    v63 = (void *)v62[6];
                    if (v63)
                    {
                      v62[7] = v63;
                      operator delete(v63);
                    }
                    v64 = (void *)v62[3];
                    if (v64)
                    {
                      v62[4] = v64;
                      operator delete(v64);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v62 + 1));
                    v53 = v62;
                    v65 = 2071181815;
LABEL_108:
                    v54 = v65 | 0x1030C4000000000;
LABEL_109:
                    MEMORY[0x219A19A08](v53, v54);
                  }
LABEL_110:
                  *(_QWORD *)v48 = 0;
                }
                break;
              default:
                break;
            }
            *(_QWORD *)v48 = 0;
            *((_DWORD *)v48 + 2) = 0;
            v48[12] = 1;
            *(_QWORD *)v48 = v46[v47++];
            v46 = v45[1];
          }
          while (v47 < ((_BYTE *)v45[2] - (_BYTE *)v46) >> 3);
        }
        break;
      case 4:
        v38 = v33[7];
        v175[1] = 0;
        v176[0] = 0;
        v175[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v175, (uint64_t *)v38[1], (uint64_t *)v38[2], ((_BYTE *)v38[2] - (_BYTE *)v38[1]) >> 4);
        break;
      case 5:
        v81 = v33[7];
        v177[1].__locale_ = 0;
        *(_QWORD *)&v178 = 0;
        v177[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v177, (uint64_t *)v81[1], (uint64_t *)v81[2], ((_BYTE *)v81[2] - (_BYTE *)v81[1]) >> 5);
        turi::flexible_type_fail(0);
        v175[0] = 0;
        v175[1] = 0;
        v176[0] = 0;
        v187 = COERCE_DOUBLE(v177);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
        break;
      case 6:
        v82 = (double)((uint64_t)((_QWORD)v33[7] << 8) >> 8);
        v83 = (double)*((int *)v33 + 16) / 1000000.0;
        v188 = 0;
        v189 = 1;
        v187 = v83 + v82;
        v175[1] = 0;
        v176[0] = 0;
        v175[0] = 0;
        v177[0].__locale_ = (std::locale::__imp *)v175;
        LOBYTE(v177[1].__locale_) = 0;
        v175[0] = operator new(0x10uLL);
        v175[1] = v175[0];
        v176[0] = (char *)v175[0] + 16;
        v175[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v176, (uint64_t *)&v187, v190, (uint64_t)v175[0]);
        switch(v189)
        {
          case 2:
            v84 = *(unint64_t **)&v187;
            do
            {
              v85 = __ldaxr(v84);
              v37 = --v85 == 0;
            }
            while (__stlxr(v85, v84));
LABEL_122:
            if (v37)
            {
              v86 = v187;
              if (v187 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v187 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v187 + 8));
                v87 = v86;
                v88 = 0x1012C404EF22A49;
                goto LABEL_218;
              }
            }
            break;
          case 3:
            v122 = *(unint64_t **)&v187;
            do
            {
              v123 = __ldaxr(v122);
              v114 = --v123 == 0;
            }
            while (__stlxr(v123, v122));
LABEL_198:
            if (v114)
            {
              v144 = v187;
              if (v187 != 0.0)
              {
                v145 = *(void **)(*(_QWORD *)&v187 + 8);
                if (v145)
                {
                  *(_QWORD *)(*(_QWORD *)&v187 + 16) = v145;
                  operator delete(v145);
                }
                v87 = v144;
                v88 = 0x1080C409938AC02;
                goto LABEL_218;
              }
            }
            break;
          case 4:
            v108 = *(unint64_t **)&v187;
            do
            {
              v109 = __ldaxr(v108);
              v100 = --v109 == 0;
            }
            while (__stlxr(v109, v108));
LABEL_182:
            if (v100)
            {
              v135 = v187;
              if (v187 != 0.0)
              {
                v177[0].__locale_ = (std::locale::__imp *)(*(_QWORD *)&v187 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
                goto LABEL_210;
              }
            }
            break;
          case 5:
            v129 = *(unint64_t **)&v187;
            do
            {
              v130 = __ldaxr(v129);
              v119 = --v130 == 0;
            }
            while (__stlxr(v130, v129));
LABEL_206:
            if (v119)
            {
              v135 = v187;
              if (v187 != 0.0)
              {
                v177[0].__locale_ = (std::locale::__imp *)(*(_QWORD *)&v187 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
LABEL_210:
                v87 = v135;
                v88 = 0x1020C405E66F15BLL;
                goto LABEL_218;
              }
            }
            break;
          case 8:
            v131 = *(unint64_t **)&v187;
            do
            {
              v132 = __ldaxr(v131);
              v126 = --v132 == 0;
            }
            while (__stlxr(v132, v131));
LABEL_213:
            if (v126)
            {
              v150 = v187;
              if (v187 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v187 + 16));
                v87 = v150;
                v141 = -235920773;
                goto LABEL_217;
              }
            }
            break;
          case 9:
            v110 = *(unint64_t **)&v187;
            do
            {
              v111 = __ldaxr(v110);
              v105 = --v111 == 0;
            }
            while (__stlxr(v111, v110));
LABEL_188:
            if (v105)
            {
              v138 = v187;
              if (v187 != 0.0)
              {
                v139 = *(void **)(*(_QWORD *)&v187 + 48);
                if (v139)
                {
                  *(_QWORD *)(*(_QWORD *)&v187 + 56) = v139;
                  operator delete(v139);
                }
                v140 = *(void **)(*(_QWORD *)&v138 + 24);
                if (v140)
                {
                  *(_QWORD *)(*(_QWORD *)&v138 + 32) = v140;
                  operator delete(v140);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v138 + 8);
                v87 = v138;
                v141 = 2071181815;
LABEL_217:
                v88 = v141 | 0x1030C4000000000;
LABEL_218:
                MEMORY[0x219A19A08](*(_QWORD *)&v87, v88);
              }
            }
            break;
          default:
            goto LABEL_219;
        }
        break;
      case 7:
        v175[0] = 0;
        v175[1] = 0;
        v176[0] = 0;
        break;
      case 8:
        v89 = v33[7];
        v90 = (std::locale::__imp *)v89[2];
        v177[0].__locale_ = (std::locale::__imp *)v89[1];
        v177[1].__locale_ = v90;
        if (v90)
        {
          v91 = (unsigned int *)((char *)v90 + 8);
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        v93 = *(_OWORD *)(v89 + 3);
        v94 = *(_OWORD *)(v89 + 7);
        v179 = *(_OWORD *)(v89 + 5);
        v180 = v94;
        v178 = v93;
        turi::flexible_type_fail(0);
        v175[0] = 0;
        v175[1] = 0;
        v176[0] = 0;
        boost::detail::shared_count::~shared_count((unsigned int **)&v177[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v177, (uint64_t)(v33[7] + 1));
        turi::flexible_type_fail(0);
        v175[0] = 0;
        v175[1] = 0;
        v176[0] = 0;
        if (*((_QWORD *)&v179 + 1))
        {
          *(_QWORD *)&v180 = *((_QWORD *)&v179 + 1);
          operator delete(*((void **)&v179 + 1));
        }
        if ((_QWORD)v178)
        {
          *((_QWORD *)&v178 + 1) = v178;
          operator delete((void *)v178);
        }
        v39 = (std::__shared_weak_count *)v177[1].__locale_;
        if (v177[1].__locale_)
        {
          v40 = (unint64_t *)((char *)v177[1].__locale_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        break;
      default:
LABEL_255:
        turi::flexible_type_fail(0);
        goto LABEL_256;
    }
LABEL_219:
    std::vector<turi::flexible_type>::__vdeallocate((void **)&v184.__r_.__value_.__l.__data_);
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = *(_OWORD *)v175;
    v184.__r_.__value_.__r.__words[2] = v176[0];
    v175[1] = 0;
    v176[0] = 0;
    v175[0] = 0;
    v177[0].__locale_ = (std::locale::__imp *)v175;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
    if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__idx.__r_.__value_.__l.__data_);
  }
  v175[1] = 0;
  v176[0] = 0;
  v175[0] = &v175[1];
  v151 = (turi::flexible_type_impl *)v184.__r_.__value_.__r.__words[0];
  if (v184.__r_.__value_.__r.__words[0] != v184.__r_.__value_.__l.__size_)
  {
    v152 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
    v154 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
    v153 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v169 = MEMORY[0x24BEDB848] + 16;
    do
    {
      switch(*((_BYTE *)v151 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v177);
          std::ostream::operator<<();
          std::stringbuf::str();
          v177[0].__locale_ = v152;
          *(std::locale::__imp **)((char *)&v177[0].__locale_ + *((_QWORD *)v152 - 3)) = v154;
          *(_QWORD *)&v178 = v153;
          v155 = v169;
          goto LABEL_232;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v177);
          std::ostream::operator<<();
          std::stringbuf::str();
          v177[0].__locale_ = v152;
          *(std::locale::__imp **)((char *)&v177[0].__locale_ + *((_QWORD *)v152 - 3)) = v154;
          v155 = MEMORY[0x24BEDB848] + 16;
          *(_QWORD *)&v178 = v153;
LABEL_232:
          *((_QWORD *)&v178 + 1) = v155;
          if (v182 < 0)
            operator delete(v181);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v183);
          break;
        case 2:
          v156 = *(_QWORD *)v151;
          if (*(char *)(*(_QWORD *)v151 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__idx, *(const std::string::value_type **)(v156 + 8), *(_QWORD *)(v156 + 16));
          }
          else
          {
            v157 = *(_OWORD *)(v156 + 8);
            __idx.__r_.__value_.__r.__words[2] = *(_QWORD *)(v156 + 24);
            *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = v157;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v177, (_QWORD *)(*(_QWORD *)v151 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v177, (uint64_t *)(*(_QWORD *)v151 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v177, (_QWORD *)(*(_QWORD *)v151 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v151, &__idx);
          break;
        case 7:
          memset(&__idx, 0, sizeof(__idx));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v177, (_QWORD *)(*(_QWORD *)v151 + 8));
          break;
        default:
          goto LABEL_255;
      }
      v158 = std::string::at(&__idx, 0);
      std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>((uint64_t **)v175, v158, v158);
      if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__idx.__r_.__value_.__l.__data_);
      v151 = (turi::flexible_type_impl *)((char *)v151 + 16);
    }
    while (v151 != (turi::flexible_type_impl *)v184.__r_.__value_.__l.__size_);
  }
  std::set<char>::set[abi:ne180100]((uint64_t *)&__idx, (uint64_t)v175);
  LOBYTE(v177[0].__locale_) = v167;
  std::set<char>::set[abi:ne180100]((uint64_t *)&v177[1], (uint64_t)&__idx);
  v170 = (char)v177[0].__locale_;
  std::set<char>::set[abi:ne180100]((uint64_t *)&v171, (uint64_t)&v177[1]);
  v186 = 0;
  v159 = (char *)operator new(0x28uLL);
  *(_QWORD *)v159 = &off_24D932FA0;
  v159[8] = v170;
  v160 = v172;
  *((_QWORD *)v159 + 2) = v171;
  *((_QWORD *)v159 + 3) = v160;
  v161 = v159 + 24;
  v162 = v173;
  *((_QWORD *)v159 + 4) = v173;
  if (v162)
  {
    v160[2] = v161;
    v171 = &v172;
    v172 = 0;
    v173 = 0;
  }
  else
  {
    *((_QWORD *)v159 + 2) = v161;
  }
  v186 = v159;
  turi::unity_sarray::transform_lambda(v166, (uint64_t)v185, 5, 1, 0, v168);
  v163 = v186;
  if (v186 == v185)
  {
    v164 = 4;
    v163 = v185;
    goto LABEL_249;
  }
  if (v186)
  {
    v164 = 5;
LABEL_249:
    (*(void (**)(void))(*v163 + 8 * v164))();
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v171, v172);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v177[1], (_QWORD *)v178);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&__idx, (_QWORD *)__idx.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v175, (_QWORD *)v175[1]);
  v177[0].__locale_ = (std::locale::__imp *)&v184;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
}

void sub_2181DE918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  uint64_t v38;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 169) < 0)
  {
    operator delete(*(void **)(v38 - 192));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a29 < 0)
        operator delete(a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

_QWORD *turi::unity_sarray::count_ngrams@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t locale;
  _BOOL8 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::locale::__imp *v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  _QWORD *result;
  uint64_t v33;
  std::runtime_error *v34;
  std::string *v35;
  __int128 v36;
  _QWORD *exception;
  void *v38[2];
  char v39;
  std::locale v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;
  size_t __idx;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_ngrams", 1945, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v40, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v40);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 2)
    turi::unity_sarray::count_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(v40, "to_lower");
  v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v40[0].__locale_);
  if (SBYTE7(v41) < 0)
    operator delete(v40[0].__locale_);
  if (a3 + 1 == (uint64_t **)v14)
  {
    v17 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "to_lower");
    v40[0].__locale_ = (std::locale::__imp *)v38;
    v15 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v38, (uint64_t)&std::piecewise_construct, v40);
    locale = 0;
    switch(*((_BYTE *)v15 + 68))
    {
      case 0:
        locale = *((_QWORD *)v15 + 7);
        goto LABEL_42;
      case 1:
        locale = (uint64_t)*((double *)v15 + 7);
        goto LABEL_42;
      case 2:
        v21 = *((_QWORD *)v15 + 7);
        __idx = 0;
        v22 = (char *)(v21 + 8);
        if (*(char *)(v21 + 31) < 0)
          v22 = *(char **)(v21 + 8);
        std::string::basic_string[abi:ne180100]<0>(v40, v22);
        locale = std::stoll((const std::string *)v40, &__idx, 10);
        if (SBYTE7(v41) < 0)
          operator delete(v40[0].__locale_);
        if (*(char *)(v21 + 31) < 0)
          v23 = *(_QWORD *)(v21 + 16);
        else
          v23 = *(unsigned __int8 *)(v21 + 31);
        if (__idx != v23)
        {
          v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v35 = std::string::append(&v44, " cannot be interpreted as an integer");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          *(_QWORD *)&v41 = *((_QWORD *)&v35->__r_.__value_.__l + 2);
          *(_OWORD *)&v40[0].__locale_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v34, (const std::string *)v40);
          __cxa_throw(v34, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_42;
      case 3:
        v18 = *((_QWORD *)v15 + 7);
        v40[1].__locale_ = 0;
        *(_QWORD *)&v41 = 0;
        v40[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v40, *(const void **)(v18 + 8), *(_QWORD *)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v40[0].__locale_)
        {
          v40[1] = v40[0];
          operator delete(v40[0].__locale_);
        }
        goto LABEL_41;
      case 4:
        v24 = *((_QWORD *)v15 + 7);
        v40[1].__locale_ = 0;
        *(_QWORD *)&v41 = 0;
        v40[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v40, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(_QWORD *)(v24 + 16) - *(_QWORD *)(v24 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        goto LABEL_41;
      case 5:
        v25 = *((_QWORD *)v15 + 7);
        v40[1].__locale_ = 0;
        *(_QWORD *)&v41 = 0;
        v40[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v40, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        goto LABEL_41;
      case 6:
        locale = (uint64_t)(*((_QWORD *)v15 + 7) << 8) >> 8;
        goto LABEL_42;
      case 7:
        goto LABEL_42;
      case 8:
        v26 = *((_QWORD *)v15 + 7);
        v27 = *(std::locale::__imp **)(v26 + 16);
        v40[0] = *(std::locale *)(v26 + 8);
        v40[1].__locale_ = v27;
        if (v27)
        {
          v28 = (unsigned int *)((char *)v27 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v30 = *(_OWORD *)(v26 + 24);
        v31 = *(_OWORD *)(v26 + 56);
        v42 = *(_OWORD *)(v26 + 40);
        v43 = v31;
        v41 = v30;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v40[1]);
        goto LABEL_41;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v40, *((_QWORD *)v15 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v42 + 1))
        {
          *(_QWORD *)&v43 = *((_QWORD *)&v42 + 1);
          operator delete(*((void **)&v42 + 1));
        }
        if ((_QWORD)v41)
        {
          *((_QWORD *)&v41 + 1) = v41;
          operator delete((void *)v41);
        }
        locale = (uint64_t)v40[1].__locale_;
        if (!v40[1].__locale_)
          goto LABEL_42;
        v19 = (unint64_t *)((char *)v40[1].__locale_ + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)locale + 16))(locale);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
        }
LABEL_41:
        locale = 0;
LABEL_42:
        if (v39 < 0)
          operator delete(v38[0]);
        v17 = locale != 0;
        break;
      default:
        result = (_QWORD *)turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  v46[0] = &off_24D933020;
  v46[1] = v17;
  v46[2] = a2;
  v47 = v46;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v46, 5, 1, 0, a4);
  result = v47;
  if (v47 == v46)
  {
    v33 = 4;
    result = v46;
  }
  else
  {
    if (!v47)
      return result;
    v33 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v33))();
}

void sub_2181DF570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

_QWORD *turi::unity_sarray::count_character_ngrams@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t locale;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::locale::__imp *v28;
  unsigned int *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::locale::__imp *v46;
  unsigned int *v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  _QWORD *result;
  uint64_t v52;
  std::runtime_error *v53;
  std::string *v54;
  __int128 v55;
  std::runtime_error *v56;
  std::string *v57;
  __int128 v58;
  _QWORD *exception;
  void *v60[2];
  char v61;
  std::locale v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string v66;
  size_t __idx;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "count_character_ngrams", 2079, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(v62, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(v62);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 2)
    turi::unity_sarray::count_character_ngrams(unsigned long,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  std::string::basic_string[abi:ne180100]<0>(v62, "to_lower");
  v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v62[0].__locale_);
  v15 = a3 + 1;
  if (SBYTE7(v63) < 0)
    operator delete(v62[0].__locale_);
  if (v15 == (uint64_t **)v14)
  {
    v18 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v60, "to_lower");
    v62[0].__locale_ = (std::locale::__imp *)v60;
    v16 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v60, (uint64_t)&std::piecewise_construct, v62);
    locale = 0;
    switch(*((_BYTE *)v16 + 68))
    {
      case 0:
        locale = *((_QWORD *)v16 + 7);
        goto LABEL_42;
      case 1:
        locale = (uint64_t)*((double *)v16 + 7);
        goto LABEL_42;
      case 2:
        v22 = *((_QWORD *)v16 + 7);
        __idx = 0;
        v23 = (char *)(v22 + 8);
        if (*(char *)(v22 + 31) < 0)
          v23 = *(char **)(v22 + 8);
        std::string::basic_string[abi:ne180100]<0>(v62, v23);
        locale = std::stoll((const std::string *)v62, &__idx, 10);
        if (SBYTE7(v63) < 0)
          operator delete(v62[0].__locale_);
        if (*(char *)(v22 + 31) < 0)
          v24 = *(_QWORD *)(v22 + 16);
        else
          v24 = *(unsigned __int8 *)(v22 + 31);
        if (__idx != v24)
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v54 = std::string::append(&v66, " cannot be interpreted as an integer");
          v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          *(_QWORD *)&v63 = *((_QWORD *)&v54->__r_.__value_.__l + 2);
          *(_OWORD *)&v62[0].__locale_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v53, (const std::string *)v62);
          __cxa_throw(v53, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_42;
      case 3:
        v19 = *((_QWORD *)v16 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v62, *(const void **)(v19 + 8), *(_QWORD *)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v62[0].__locale_)
        {
          v62[1] = v62[0];
          operator delete(v62[0].__locale_);
        }
        goto LABEL_41;
      case 4:
        v25 = *((_QWORD *)v16 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v62, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_41;
      case 5:
        v26 = *((_QWORD *)v16 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v62, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_41;
      case 6:
        locale = (uint64_t)(*((_QWORD *)v16 + 7) << 8) >> 8;
        goto LABEL_42;
      case 7:
        goto LABEL_42;
      case 8:
        v27 = *((_QWORD *)v16 + 7);
        v28 = *(std::locale::__imp **)(v27 + 16);
        v62[0] = *(std::locale *)(v27 + 8);
        v62[1].__locale_ = v28;
        if (v28)
        {
          v29 = (unsigned int *)((char *)v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v31 = *(_OWORD *)(v27 + 24);
        v32 = *(_OWORD *)(v27 + 56);
        v64 = *(_OWORD *)(v27 + 40);
        v65 = v32;
        v63 = v31;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v62[1]);
        goto LABEL_41;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v62, *((_QWORD *)v16 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v64 + 1))
        {
          *(_QWORD *)&v65 = *((_QWORD *)&v64 + 1);
          operator delete(*((void **)&v64 + 1));
        }
        if ((_QWORD)v63)
        {
          *((_QWORD *)&v63 + 1) = v63;
          operator delete((void *)v63);
        }
        locale = (uint64_t)v62[1].__locale_;
        if (!v62[1].__locale_)
          goto LABEL_42;
        v20 = (unint64_t *)((char *)v62[1].__locale_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)locale + 16))(locale);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
        }
LABEL_41:
        locale = 0;
LABEL_42:
        if (v61 < 0)
          operator delete(v60[0]);
        v18 = locale != 0;
        break;
      default:
LABEL_95:
        result = (_QWORD *)turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v62, "ignore_space");
  v33 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a3, (const void **)&v62[0].__locale_);
  if (SBYTE7(v63) < 0)
    operator delete(v62[0].__locale_);
  if (v15 == (uint64_t **)v33)
  {
    v36 = 256;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v60, "ignore_space");
    v62[0].__locale_ = (std::locale::__imp *)v60;
    v34 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (const void **)v60, (uint64_t)&std::piecewise_construct, v62);
    v35 = 0;
    switch(*((_BYTE *)v34 + 68))
    {
      case 0:
        v35 = *((_QWORD *)v34 + 7);
        goto LABEL_77;
      case 1:
        v35 = (uint64_t)*((double *)v34 + 7);
        goto LABEL_77;
      case 2:
        v40 = *((_QWORD *)v34 + 7);
        __idx = 0;
        v41 = (char *)(v40 + 8);
        if (*(char *)(v40 + 31) < 0)
          v41 = *(char **)(v40 + 8);
        std::string::basic_string[abi:ne180100]<0>(v62, v41);
        v35 = std::stoll((const std::string *)v62, &__idx, 10);
        if (SBYTE7(v63) < 0)
          operator delete(v62[0].__locale_);
        if (*(char *)(v40 + 31) < 0)
          v42 = *(_QWORD *)(v40 + 16);
        else
          v42 = *(unsigned __int8 *)(v40 + 31);
        if (__idx != v42)
        {
          v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v57 = std::string::append(&v66, " cannot be interpreted as an integer");
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          *(_QWORD *)&v63 = *((_QWORD *)&v57->__r_.__value_.__l + 2);
          *(_OWORD *)&v62[0].__locale_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v56, (const std::string *)v62);
          __cxa_throw(v56, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_77;
      case 3:
        v37 = *((_QWORD *)v34 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v62, *(const void **)(v37 + 8), *(_QWORD *)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (v62[0].__locale_)
        {
          v62[1] = v62[0];
          operator delete(v62[0].__locale_);
        }
        goto LABEL_76;
      case 4:
        v43 = *((_QWORD *)v34 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v62, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(_QWORD *)(v43 + 16) - *(_QWORD *)(v43 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_76;
      case 5:
        v44 = *((_QWORD *)v34 + 7);
        v62[1].__locale_ = 0;
        *(_QWORD *)&v63 = 0;
        v62[0].__locale_ = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v62, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_76;
      case 6:
        v35 = (uint64_t)(*((_QWORD *)v34 + 7) << 8) >> 8;
        goto LABEL_77;
      case 7:
        goto LABEL_77;
      case 8:
        v45 = *((_QWORD *)v34 + 7);
        v46 = *(std::locale::__imp **)(v45 + 16);
        v62[0] = *(std::locale *)(v45 + 8);
        v62[1].__locale_ = v46;
        if (v46)
        {
          v47 = (unsigned int *)((char *)v46 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v49 = *(_OWORD *)(v45 + 24);
        v50 = *(_OWORD *)(v45 + 56);
        v64 = *(_OWORD *)(v45 + 40);
        v65 = v50;
        v63 = v49;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&v62[1]);
        goto LABEL_76;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v62, *((_QWORD *)v34 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v64 + 1))
        {
          *(_QWORD *)&v65 = *((_QWORD *)&v64 + 1);
          operator delete(*((void **)&v64 + 1));
        }
        if ((_QWORD)v63)
        {
          *((_QWORD *)&v63 + 1) = v63;
          operator delete((void *)v63);
        }
        v35 = (uint64_t)v62[1].__locale_;
        if (!v62[1].__locale_)
          goto LABEL_77;
        v38 = (unint64_t *)((char *)v62[1].__locale_ + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v35);
        }
LABEL_76:
        v35 = 0;
LABEL_77:
        if (v61 < 0)
          operator delete(v60[0]);
        v36 = (unint64_t)(v35 != 0) << 8;
        break;
      default:
        goto LABEL_95;
    }
  }
  v68[0] = &off_24D9330A0;
  v68[1] = v36 | v18;
  v68[2] = a2;
  v69 = v68;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v68, 5, 1, 0, a4);
  result = v69;
  if (v69 == v68)
  {
    v52 = 4;
    result = v68;
  }
  else
  {
    if (!v69)
      return result;
    v52 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v52))();
}

void sub_2181DFF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;

  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0)
        operator delete(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void turi::unity_sarray::dict_trim_by_keys(uint64_t a1@<X0>, char **a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *exception;
  char locale;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t v27;
  std::locale v28;
  uint64_t v29[3];
  char v30[8];
  _QWORD *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_trim_by_keys", 2198, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v28);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 5)
    turi::unity_sarray::dict_trim_by_keys(std::vector<turi::flexible_type> const&,BOOL)::$_0::operator()();
  std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>((uint64_t)v30, *a2, a2[1], v14);
  LOBYTE(v28.__locale_) = a3;
  std::set<turi::flexible_type>::set[abi:ne180100](v29, (uint64_t)v30, v15);
  locale = (char)v28.__locale_;
  std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)&v25, (uint64_t)v29, v16);
  v33 = 0;
  v17 = (char *)operator new(0x28uLL);
  *(_QWORD *)v17 = &off_24D933120;
  v17[8] = locale;
  v18 = v26;
  *((_QWORD *)v17 + 2) = v25;
  *((_QWORD *)v17 + 3) = v18;
  v19 = v17 + 24;
  v20 = v27;
  *((_QWORD *)v17 + 4) = v27;
  if (v20)
  {
    v18[2] = v19;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *((_QWORD *)v17 + 2) = v19;
  }
  v33 = v17;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v32, 5, 1, 0, a4);
  v21 = v33;
  if (v33 == v32)
  {
    v22 = 4;
    v21 = v32;
    goto LABEL_17;
  }
  if (v33)
  {
    v22 = 5;
LABEL_17:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  std::__tree<turi::flexible_type>::destroy((uint64_t)&v25, v26);
  std::__tree<turi::flexible_type>::destroy((uint64_t)v29, (_QWORD *)v29[1]);
  std::__tree<turi::flexible_type>::destroy((uint64_t)v30, v31);
}

void sub_2181E03AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::dict_trim_by_values(turi::unity_sarray *this@<X0>, const turi::flexible_type *a2@<X1>, const turi::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  __n128 v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  double *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::locale::__imp *locale;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  BOOL v44;
  unsigned int v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *exception;
  char v51[8];
  _BYTE v52[13];
  BOOL v53;
  _BYTE v54[13];
  _BYTE v55[24];
  _BYTE *v56;
  std::locale v57;
  _QWORD v58[2];
  BOOL v59;
  _QWORD v60[3];

  v60[2] = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_trim_by_values", 2227, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet(&v57, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v57);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this) != 5)
    turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_0::operator()();
  v15 = *((unsigned __int8 *)a2 + 12);
  v16 = *((unsigned __int8 *)a3 + 12);
  if (v16 != 7 && v15 != 7)
  {
    switch(*((_BYTE *)a3 + 12))
    {
      case 0:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 > *(_QWORD *)a3)
              goto LABEL_110;
            goto LABEL_78;
          case 1:
            v31 = *(double *)a2;
            v32 = (double)*(uint64_t *)a3;
            goto LABEL_77;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_53;
          case 6:
            if (*(_QWORD *)a3 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
              goto LABEL_110;
            goto LABEL_78;
          default:
            turi::apply_binary_op_ff();
        }
      case 1:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            if (*(double *)a3 < (double)*(uint64_t *)a2)
              goto LABEL_110;
            goto LABEL_78;
          case 1:
            v31 = *(double *)a2;
            v32 = *(double *)a3;
LABEL_77:
            if (v31 <= v32)
              goto LABEL_78;
            goto LABEL_110;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_53;
          case 6:
            if ((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) > *(double *)a3)
              goto LABEL_110;
            goto LABEL_78;
          default:
            turi::apply_binary_op_ff();
        }
      case 2:
        if (v15 > 9)
          goto LABEL_117;
        if (((1 << v15) & 0x37B) != 0)
          goto LABEL_53;
        if (v15 != 2)
LABEL_117:
          turi::apply_binary_op_ff();
        v17 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
        goto LABEL_30;
      case 3:
        if (v15 > 9)
          goto LABEL_118;
        if (((1 << v15) & 0x377) != 0)
          goto LABEL_53;
        if (v15 != 3)
LABEL_118:
          turi::apply_binary_op_ff();
        v18 = *(double **)(*(_QWORD *)a2 + 8);
        v19 = *(double **)(*(_QWORD *)a3 + 8);
        v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
        v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
        if (*(double **)(*(_QWORD *)a2 + 16) == v18)
          goto LABEL_47;
        if (v21 <= 1)
          v22 = 1;
        else
          v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
        v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
        do
        {
          if (!v23 || *v18 > *v19)
            goto LABEL_110;
          if (*v18 < *v19)
            goto LABEL_54;
          --v23;
          ++v19;
          ++v18;
          --v22;
        }
        while (v22);
LABEL_47:
        if (v21 > v20)
          goto LABEL_110;
        goto LABEL_54;
      case 4:
        if (v15 > 9)
          goto LABEL_116;
        if (((1 << v15) & 0x36F) != 0)
        {
LABEL_53:
          turi::flexible_type_fail(0);
          goto LABEL_54;
        }
        if (v15 != 4)
LABEL_116:
          turi::apply_binary_op_ff();
        v17 = turi::flexible_type_impl::gt_operator::operator()(v14, (uint64_t)&v57, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
LABEL_30:
        if (v17)
LABEL_110:
          turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_1::operator()();
        return;
      case 5:
        if (v15 >= 7 && v15 - 8 >= 2)
          turi::apply_binary_op_ff();
        goto LABEL_53;
      case 6:
        switch(*((_BYTE *)a2 + 12))
        {
          case 0:
            if (*(_QWORD *)a2 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
              goto LABEL_110;
            goto LABEL_78;
          case 1:
            if ((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8) < *(double *)a2)
              goto LABEL_110;
            goto LABEL_78;
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_53;
          case 6:
            v33 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            if (v33 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
              goto LABEL_110;
            if (v33 != (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
              goto LABEL_54;
            if (*((_DWORD *)a2 + 2) > *((_DWORD *)a3 + 2))
              goto LABEL_110;
            goto LABEL_78;
          default:
            turi::apply_binary_op_ff();
        }
      case 8:
        if (v15 >= 7 && v15 - 8 >= 2)
          turi::apply_binary_op_ff();
        goto LABEL_53;
      case 9:
        if (v15 >= 7 && v15 - 8 >= 2)
          turi::apply_binary_op_ff();
        goto LABEL_53;
      default:
        turi::apply_binary_op_ff();
    }
LABEL_78:
    LOBYTE(v57.__locale_) = v15 != 7;
    memset(v58, 0, 13);
    if (v58 != (_QWORD *)a2)
    {
      *(_QWORD *)((char *)v58 + 5) = *(_QWORD *)((char *)a2 + 5);
      v58[0] = *(_QWORD *)a2;
      BYTE4(v58[1]) = *((_BYTE *)a2 + 12);
      if (BYTE4(v58[1]) <= 9u && ((1 << SBYTE4(v58[1])) & 0x33C) != 0)
      {
        v34 = (unint64_t *)v58[0];
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
    }
    v59 = v16 != 7;
    memset(v60, 0, 13);
    if (v60 != (_QWORD *)a3)
    {
      *(_QWORD *)((char *)v60 + 5) = *(_QWORD *)((char *)a3 + 5);
      v60[0] = *(_QWORD *)a3;
      BYTE4(v60[1]) = *((_BYTE *)a3 + 12);
      if (BYTE4(v60[1]) <= 9u && ((1 << SBYTE4(v60[1])) & 0x33C) != 0)
      {
        v36 = (unint64_t *)v60[0];
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
    }
    v51[0] = (char)v57.__locale_;
    *(_QWORD *)&v52[5] = *(_QWORD *)((char *)v58 + 5);
    *(_QWORD *)v52 = v58[0];
    v52[12] = BYTE4(v58[1]);
    if (BYTE4(v58[1]) <= 9u && ((1 << SBYTE4(v58[1])) & 0x33C) != 0)
    {
      do
        v38 = __ldaxr(*(unint64_t **)v52);
      while (__stlxr(v38 + 1, *(unint64_t **)v52));
    }
    v53 = v59;
    *(_QWORD *)&v54[5] = *(_QWORD *)((char *)v60 + 5);
    *(_QWORD *)v54 = v60[0];
    v54[12] = BYTE4(v60[1]);
    if (BYTE4(v60[1]) <= 9u && ((1 << SBYTE4(v60[1])) & 0x33C) != 0)
    {
      do
        v39 = __ldaxr(*(unint64_t **)v54);
      while (__stlxr(v39 + 1, *(unint64_t **)v54));
    }
    v56 = 0;
    v40 = (char *)operator new(0x38uLL);
    *(_QWORD *)v40 = &off_24D9331A0;
    *((_QWORD *)v40 + 2) = *(_QWORD *)v52;
    v40[8] = v51[0];
    *(_QWORD *)(v40 + 21) = *(_QWORD *)&v52[5];
    v41 = v52[12];
    v40[28] = v52[12];
    if (v41 <= 9 && ((1 << v41) & 0x33C) != 0)
    {
      v42 = (unint64_t *)*((_QWORD *)v40 + 2);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
    }
    v44 = v53;
    *((_QWORD *)v40 + 5) = *(_QWORD *)v54;
    v40[32] = v44;
    *(_QWORD *)(v40 + 45) = *(_QWORD *)&v54[5];
    v45 = v54[12];
    v40[52] = v54[12];
    if (v45 <= 9 && ((1 << v45) & 0x33C) != 0)
    {
      v46 = (unint64_t *)*((_QWORD *)v40 + 5);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
    }
    v56 = v40;
    turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v55, 5, 1, 0, (_OWORD *)a4);
    v48 = v56;
    if (v56 == v55)
    {
      v49 = 4;
      v48 = v55;
    }
    else
    {
      if (!v56)
      {
LABEL_107:
        turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)v51);
        turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2((uint64_t)&v57);
        return;
      }
      v49 = 5;
    }
    (*(void (**)(void))(*v48 + 8 * v49))();
    goto LABEL_107;
  }
LABEL_54:
  if (v16 != 7 || v15 != 7)
    goto LABEL_78;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v57, (_QWORD *)this + 1);
  locale = v57.__locale_;
  v25 = v58[0];
  if (v58[0])
  {
    v26 = (unint64_t *)(v58[0] + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = (std::__shared_weak_count *)v58[0];
    *(_QWORD *)a4 = locale;
    *(_QWORD *)(a4 + 8) = v25;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    *(std::locale *)a4 = v57;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_2181E0C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
  std::locale::~locale(&a20);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::dict_trim_by_values(turi::flexible_type const&,turi::flexible_type const&)::$_2::~$_2(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void **v61;

  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v31 = *(unint64_t **)(a1 + 8);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(a1 + 8);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)(a1 + 8);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(_QWORD **)(a1 + 8);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)(a1 + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 8);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)(a1 + 8);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(_QWORD *)(a1 + 8);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)(a1 + 8);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(_QWORD *)(a1 + 8);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)(a1 + 8);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(a1 + 8);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

_QWORD *turi::unity_sarray::dict_keys@<X0>(turi::unity_sarray *this@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *exception;
  std::locale v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_keys", 2275, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this) != 5)
    turi::unity_sarray::dict_keys(void)::$_0::operator()();
  v14[0] = &off_24D933220;
  v15 = v14;
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v14, 4, 1, 0, a2);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_2181E12A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *turi::unity_sarray::dict_values@<X0>(turi::unity_sarray *this@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD *exception;
  std::locale v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_values", 2288, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v13, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v13);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this) != 5)
    turi::unity_sarray::dict_values(void)::$_0::operator()();
  v14[0] = &off_24D9332A0;
  v15 = v14;
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v14, 4, 1, 0, a2);
  result = v15;
  if (v15 == v14)
  {
    v11 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_2181E14F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::dict_has_any_keys(uint64_t a1@<X0>, char **a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *exception;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28[3];
  std::locale v29;
  _QWORD *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_has_any_keys", 2304, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 5)
    turi::unity_sarray::dict_has_any_keys(std::vector<turi::flexible_type> const&)::$_0::operator()();
  std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>((uint64_t)&v29, *a2, a2[1], v12);
  std::set<turi::flexible_type>::set[abi:ne180100](v28, (uint64_t)&v29, v13);
  std::set<turi::flexible_type>::set[abi:ne180100]((uint64_t *)&v25, (uint64_t)v28, v14);
  v32 = 0;
  v15 = operator new(0x20uLL);
  v17 = (uint64_t)v25;
  v16 = v26;
  *v15 = &off_24D933320;
  v15[1] = v17;
  v15[2] = v16;
  v18 = v15 + 2;
  v19 = v27;
  v15[3] = v27;
  if (v19)
  {
    v16[2] = v18;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v15[1] = v18;
  }
  v32 = v15;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v31, 0, 1, 0, a3);
  v22 = v32;
  if (v32 == v31)
  {
    v23 = 4;
    v22 = v31;
    goto LABEL_17;
  }
  if (v32)
  {
    v23 = 5;
LABEL_17:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v22 + 8 * v23))(v22, v20, v21);
  }
  std::__tree<turi::flexible_type>::destroy((uint64_t)&v25, v26);
  std::__tree<turi::flexible_type>::destroy((uint64_t)v28, (_QWORD *)v28[1]);
  std::__tree<turi::flexible_type>::destroy((uint64_t)&v29, v30);
}

void sub_2181E17D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::dict_has_all_keys(uint64_t a1@<X0>, uint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *exception;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  std::locale v19;
  uint64_t *v20;
  uint64_t v21;
  std::locale *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "dict_has_all_keys", 2328, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v19);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 5)
    turi::unity_sarray::dict_has_all_keys(std::vector<turi::flexible_type> const&)::$_0::operator()();
  v19.__locale_ = 0;
  v20 = 0;
  v21 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v19, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v16, (uint64_t *)v19.__locale_, v20, ((char *)v20 - (char *)v19.__locale_) >> 4);
  v24 = 0;
  v12 = operator new(0x20uLL);
  *v12 = off_24D9333A0;
  v12[2] = 0;
  v12[3] = 0;
  v12[1] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v12 + 1, v16, v17, ((char *)v17 - (char *)v16) >> 4);
  v24 = v12;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)v23, 0, 1, 0, a3);
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
    goto LABEL_14;
  }
  if (v24)
  {
    v14 = 5;
LABEL_14:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  v22 = (std::locale *)&v16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  v22 = &v19;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_2181E1AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::item_length(turi::unity_sarray *this@<X0>, _OWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *exception;
  __int16 v16;
  char v17;
  std::locale v18;
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "item_length", 2350, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = 773;
  v17 = 4;
  std::set<turi::flex_type_enum>::set[abi:ne180100]((uint64_t)&v18, (char *)&v16, 3);
  v10 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
  v11 = v19;
  if (!v19)
LABEL_14:
    turi::unity_sarray::item_length(void)::$_0::operator()();
  while (1)
  {
    v12 = *((char *)v11 + 25);
    if (v10 >= v12)
      break;
LABEL_13:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_14;
  }
  if (v12 < v10)
  {
    ++v11;
    goto LABEL_13;
  }
  v20[0] = &off_24D933420;
  v21 = v20;
  turi::unity_sarray::transform_lambda((uint64_t)this, (uint64_t)v20, 0, 1, 0, a2);
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
LABEL_19:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  else if (v21)
  {
    v14 = 5;
    goto LABEL_19;
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v18, v19);
}

void sub_2181E1DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::unpack_dict(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  __n128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  __n128 v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 v68;
  unint64_t v69;
  uint64_t v70;
  turi::flexible_type_impl **v71;
  turi::flexible_type_impl *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  std::string::size_type size;
  std::string *v77;
  __n128 v78;
  _QWORD **v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  char v83;
  char v84;
  BOOL v85;
  BOOL v86;
  _QWORD *v87;
  _QWORD **v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  turi::sframe_reader *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  unsigned int v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  void *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int **v134;
  void *v135;
  BOOL v136;
  int v137;
  unint64_t *v139;
  unint64_t v140;
  char v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *exception;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  std::string *v150;
  void **v151;
  void **v152;
  uint64_t *v153;
  uint64_t v154[4];
  std::__shared_weak_count *v155;
  uint64_t *v156;
  _QWORD *v157;
  size_t v158;
  uint64_t *v159;
  _QWORD *v160;
  size_t v161;
  std::string v162;
  _QWORD **v163;
  _QWORD *v164;
  uint64_t v165;
  void **v166;
  _QWORD v167[4];
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  turi::sframe_reader *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t (**v178[2])(_QWORD);
  _QWORD *v179[3];
  _QWORD *v180[3];
  void **v181;
  uint64_t v182;
  std::string *v183;
  uint64_t v184;
  std::string::size_type v185;
  uint64_t v186;
  _BYTE v187[32];
  void *v188;
  char v189;
  uint64_t v190;
  void *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 __p;
  __int128 v196;
  __int128 v197;
  _OWORD v198[18];
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "unpack_dict", 2372, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12)
    {
      if (*((_BYTE *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[2] - 24) + 16));
        v13 = std::locale::use_facet((const std::locale *)v198, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)v198);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 112))(a1) != 5)
  {
    v144 = __cxa_allocate_exception(8uLL);
    *v144 = "unpack_dict is only applicable to SArray of dictionary type.";
    __cxa_throw(v144, MEMORY[0x24BEDB718], 0);
  }
  (*(void (**)(_QWORD *))(*a1 + 392))(a1);
  v147 = a4;
  v148 = a1;
  v15 = *a3;
  v16 = a3[1];
  v160 = 0;
  v161 = 0;
  v159 = (uint64_t *)&v160;
  v153 = v15;
  if (v16 != v15)
  {
    v17 = v15;
    do
    {
      *(_QWORD *)&v198[0] = 0;
      DWORD2(v198[0]) = 0;
      BYTE12(v198[0]) = 0;
      if (v17 != (uint64_t *)v198)
      {
        v18 = *v17;
        *(_QWORD *)((char *)v198 + 5) = *(uint64_t *)((char *)v17 + 5);
        *(_QWORD *)&v198[0] = v18;
        BYTE12(v198[0]) = *((_BYTE *)v17 + 12);
        v19 = BYTE12(v198[0]) > 9u || ((1 << SBYTE12(v198[0])) & 0x33C) == 0;
        if (!v19)
        {
          v20 = *(unint64_t **)&v198[0];
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
      }
      v181 = (void **)v198;
      *((_BYTE *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(&v159, (uint64_t)v198, v14, (uint64_t)&std::piecewise_construct, (void **)&v181)+ 48) = 7;
      switch(BYTE12(v198[0]))
      {
        case 2:
          v22 = *(unint64_t **)&v198[0];
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              if (*(char *)(*(_QWORD *)&v198[0] + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v198[0] + 8));
              v26 = v25;
              v27 = 0x1012C404EF22A49;
              goto LABEL_60;
            }
          }
          break;
        case 3:
          v39 = *(unint64_t **)&v198[0];
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              v43 = *(void **)(*(_QWORD *)&v198[0] + 8);
              if (v43)
              {
                *(_QWORD *)(*(_QWORD *)&v198[0] + 16) = v43;
                operator delete(v43);
              }
              v26 = v42;
              v27 = 0x1080C409938AC02;
              goto LABEL_60;
            }
          }
          break;
        case 4:
          v28 = *(unint64_t **)&v198[0];
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              v181 = (void **)(*(_QWORD *)&v198[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
              goto LABEL_53;
            }
          }
          break;
        case 5:
          v44 = *(unint64_t **)&v198[0];
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v31 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              v181 = (void **)(*(_QWORD *)&v198[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v181);
LABEL_53:
              v26 = v31;
              v27 = 0x1020C405E66F15BLL;
              goto LABEL_60;
            }
          }
          break;
        case 8:
          v47 = *(unint64_t **)&v198[0];
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            v50 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v198[0] + 16));
              v26 = v50;
              v38 = -235920773;
              goto LABEL_59;
            }
          }
          break;
        case 9:
          v32 = *(unint64_t **)&v198[0];
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            v35 = *(_QWORD *)&v198[0];
            if (*(_QWORD *)&v198[0])
            {
              v36 = *(void **)(*(_QWORD *)&v198[0] + 48);
              if (v36)
              {
                *(_QWORD *)(*(_QWORD *)&v198[0] + 56) = v36;
                operator delete(v36);
              }
              v37 = *(void **)(v35 + 24);
              if (v37)
              {
                *(_QWORD *)(v35 + 32) = v37;
                operator delete(v37);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
              v26 = v35;
              v38 = 2071181815;
LABEL_59:
              v27 = v38 | 0x1030C4000000000;
LABEL_60:
              MEMORY[0x219A19A08](v26, v27);
            }
          }
          break;
        default:
          break;
      }
      v17 += 2;
    }
    while (v17 != v16);
  }
  v52 = a1[3];
  v51 = (std::__shared_weak_count *)a1[4];
  v154[3] = v148[3];
  v155 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
  }
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100](v154, (uint64_t)&v159, v14);
  turi::query_eval::generic_aggregator<std::map<turi::flexible_type,turi::flex_type_enum>,turi::unity_sarray::unpack_dict(std::string const&,std::vector<turi::flexible_type> const&,turi::flexible_type const&)::$_1>::generic_aggregator((uint64_t)v178, v16 != v153, (uint64_t)v154, v55);
  v174 = v52;
  v175 = v51;
  if (v51)
  {
    v56 = (unint64_t *)&v51->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(&v174, v178, 2, &v176);
  v58 = v175;
  if (v175)
  {
    v59 = (unint64_t *)&v175->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v172 = v176;
  v173 = v177;
  if (v177)
  {
    v61 = (unint64_t *)&v177->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v196 = 0u;
  v197 = 0u;
  v194 = 0u;
  __p = 0u;
  v192 = 0u;
  v193 = 0u;
  BYTE11(v194) = 1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v197 = 0uLL;
  *((_QWORD *)&v196 + 1) = 0;
  turi::query_eval::planner::materialize((uint64_t)&v172, (uint64_t)&v192, (const turi::sframe *)v198);
  v181 = (void **)&v196 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v181);
  if (SBYTE7(v196) < 0)
    operator delete((void *)__p);
  v63 = (_QWORD *)v194;
  if ((__int128 *)v194 == (__int128 *)((char *)&v192 + 8))
  {
    v64 = 4;
    v63 = (_QWORD *)&v192 + 1;
    goto LABEL_82;
  }
  if ((_QWORD)v194)
  {
    v64 = 5;
LABEL_82:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = v173;
  if (v173)
  {
    v66 = (unint64_t *)&v173->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  turi::sframe::get_reader((turi::sframe *)v198, 1, &v171);
  (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v171 + 32))(&v166, v171, 0);
  std::map<turi::flexible_type,turi::flex_type_enum>::map[abi:ne180100]((uint64_t *)&v156, (uint64_t)v154, v68);
  v164 = 0;
  v165 = 0;
  v163 = &v164;
  v151 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v152 = (void **)*MEMORY[0x24BEDB7F0];
  v150 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v149 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    (*(void (**)(void ***__return_ptr, turi::sframe_reader *, _QWORD))(*(_QWORD *)v171 + 40))(&v181, v171, 0);
    if (v166 != v181 || v167[3] != v185)
    {
      v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
      v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
      std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
      goto LABEL_94;
    }
    v69 = v168;
    v70 = v186;
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
    std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    if (v69 != v70)
    {
LABEL_94:
      v71 = (turi::flexible_type_impl **)turi::sframe_iterator::operator*(&v166);
      v72 = *v71;
      switch(*((_BYTE *)*v71 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v181);
          std::ostream::operator<<();
          std::stringbuf::str();
          v181 = v152;
          *(void ***)((char *)&v181 + (_QWORD)*(v152 - 3)) = v151;
          v183 = v150;
          v73 = v149;
          goto LABEL_103;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v181);
          std::ostream::operator<<();
          std::stringbuf::str();
          v181 = v152;
          *(void ***)((char *)&v181 + (_QWORD)*(v152 - 3)) = v151;
          v73 = MEMORY[0x24BEDB848] + 16;
          v183 = v150;
LABEL_103:
          v184 = v73;
          if (v189 < 0)
            operator delete(v188);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v190);
          goto LABEL_110;
        case 2:
          v74 = *(_QWORD *)v72;
          if (*(char *)(*(_QWORD *)v72 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v162, *(const std::string::value_type **)(v74 + 8), *(_QWORD *)(v74 + 16));
          }
          else
          {
            v75 = *(_OWORD *)(v74 + 8);
            v162.__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 24);
            *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v75;
          }
          goto LABEL_110;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v181, (_QWORD *)(*(_QWORD *)v72 + 8));
          goto LABEL_110;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v181, (uint64_t *)(*(_QWORD *)v72 + 8));
          goto LABEL_110;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v181, (_QWORD *)(*(_QWORD *)v72 + 8));
          goto LABEL_110;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v72, &v162);
          goto LABEL_110;
        case 7:
          memset(&v162, 0, sizeof(v162));
          goto LABEL_110;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_110;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v181, (_QWORD *)(*(_QWORD *)v72 + 8));
LABEL_110:
          size = HIBYTE(v162.__r_.__value_.__r.__words[2]);
          v77 = &v162;
          if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            size = v162.__r_.__value_.__l.__size_;
            v77 = (std::string *)v162.__r_.__value_.__r.__words[0];
          }
          v181 = 0;
          v182 = 0;
          v183 = v77;
          v184 = 0;
          v185 = size;
          std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)&v163, v164);
          v164 = 0;
          v165 = 0;
          v163 = &v164;
          turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flex_type_enum>,std::insert_iterator<std::map<turi::flexible_type,turi::flex_type_enum>>>((uint64_t)&v181, (uint64_t)&v163, (uint64_t)&v164);
          v79 = v163;
          if (v163 != &v164)
          {
            do
            {
              v80 = std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::find<turi::flexible_type>((uint64_t)&v156, (uint64_t)(v79 + 4), v78);
              if (&v157 == v80)
              {
                v84 = *((_BYTE *)v79 + 48);
                v191 = v79 + 4;
                *((_BYTE *)std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(&v156, (uint64_t)(v79 + 4), v78, (uint64_t)&std::piecewise_construct, &v191)+ 48) = v84;
              }
              else
              {
                v81 = *((char *)v80 + 48);
                v82 = *((unsigned __int8 *)v79 + 48);
                if (v81 == 7)
                {
                  v83 = *((_BYTE *)v79 + 48);
                }
                else
                {
                  v83 = *((_BYTE *)v80 + 48);
                  if (v82 != 7)
                  {
                    if (*((_BYTE *)v80 + 48))
                      v85 = 0;
                    else
                      v85 = v82 == 1;
                    if (v85 || (*((_BYTE *)v80 + 48) == 1 ? (v86 = v82 == 0) : (v86 = 0), v86))
                    {
                      v83 = 1;
                    }
                    else
                    {
                      v83 = *((_BYTE *)v79 + 48);
                      if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v80 + 48) + v83])
                      {
                        if (turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * *((char *)v79 + 48) + v81])
                          v83 = *((_BYTE *)v80 + 48);
                        else
                          v83 = 2;
                      }
                    }
                  }
                }
                *((_BYTE *)v80 + 48) = v83;
              }
              v87 = v79[1];
              if (v87)
              {
                do
                {
                  v88 = (_QWORD **)v87;
                  v87 = (_QWORD *)*v87;
                }
                while (v87);
              }
              else
              {
                do
                {
                  v88 = (_QWORD **)v79[2];
                  v19 = *v88 == v79;
                  v79 = v88;
                }
                while (!v19);
              }
              v79 = v88;
            }
            while (v88 != &v164);
          }
          v90 = v167[0];
          v89 = v167[1];
          while (v90 != v89)
          {
            turi::sarray_iterator<turi::flexible_type>::operator++(v90);
            v90 += 48;
          }
          if (v168 + 1 < v169)
            v91 = v168 + 1;
          else
            v91 = v169;
          v168 = v91;
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v162.__r_.__value_.__l.__data_);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)&v163, v164);
  v181 = (void **)&v170;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v181);
  v181 = (void **)v167;
  std::vector<turi::sarray_iterator<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v181);
  v92 = v171;
  v171 = 0;
  if (v92)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v92 + 8))(v92);
  turi::sframe::~sframe((turi::sframe *)v198);
  v93 = v177;
  if (v177)
  {
    v94 = (unint64_t *)&v177->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v178[0] = (uint64_t (**)(_QWORD))off_24D9334A0;
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)v180, v180[1]);
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)v179, v179[1]);
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)&v159, v160);
  v96 = v157;
  v159 = v156;
  v160 = v157;
  v161 = v158;
  if (v158)
  {
    v157[2] = &v160;
    v156 = (uint64_t *)&v157;
    v157 = 0;
    v158 = 0;
    v96 = 0;
  }
  else
  {
    v159 = (uint64_t *)&v160;
  }
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)&v156, v96);
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)v154, (_QWORD *)v154[1]);
  v97 = v155;
  if (v155)
  {
    v98 = (unint64_t *)&v155->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (!v161)
  {
    v145 = __cxa_allocate_exception(8uLL);
    *v145 = "Nothing to unpack, SArray is empty";
    __cxa_throw(v145, MEMORY[0x24BEDB718], 0);
  }
  std::vector<turi::flex_type_enum>::vector(v198, v161);
  std::vector<turi::flexible_type>::vector(&v181, v161);
  v100 = v159;
  if (v159 != (uint64_t *)&v160)
  {
    v101 = 0;
    do
    {
      *(_QWORD *)&v192 = 0;
      DWORD2(v192) = 0;
      BYTE12(v192) = 0;
      if (v100 + 4 != (uint64_t *)&v192)
      {
        *(_QWORD *)((char *)&v192 + 5) = *(uint64_t *)((char *)v100 + 37);
        *(_QWORD *)&v192 = v100[4];
        BYTE12(v192) = *((_BYTE *)v100 + 44);
        if (BYTE12(v192) <= 9u && ((1 << SBYTE12(v192)) & 0x33C) != 0)
        {
          v103 = (unint64_t *)v192;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 + 1, v103));
        }
      }
      LOBYTE(v193) = *((_BYTE *)v100 + 48);
      v105 = &v181[2 * v101];
      if (&v192 != (__int128 *)v105)
      {
        switch(*((_BYTE *)v105 + 12))
        {
          case 2:
            v106 = (unint64_t *)*v105;
            do
            {
              v107 = __ldaxr(v106);
              v108 = v107 - 1;
            }
            while (__stlxr(v108, v106));
            if (!v108)
            {
              v109 = (void **)*v105;
              if (!*v105)
                goto LABEL_214;
              if (*((char *)v109 + 31) < 0)
                operator delete(v109[1]);
              v110 = v109;
              v111 = 0x1012C404EF22A49;
              goto LABEL_213;
            }
            break;
          case 3:
            v123 = (unint64_t *)*v105;
            do
            {
              v124 = __ldaxr(v123);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, v123));
            if (!v125)
            {
              v126 = *v105;
              if (!*v105)
                goto LABEL_214;
              v127 = (void *)v126[1];
              if (v127)
              {
                v126[2] = v127;
                operator delete(v127);
              }
              v110 = v126;
              v111 = 0x1080C409938AC02;
              goto LABEL_213;
            }
            break;
          case 4:
            v112 = (unint64_t *)*v105;
            do
            {
              v113 = __ldaxr(v112);
              v114 = v113 - 1;
            }
            while (__stlxr(v114, v112));
            if (!v114)
            {
              v115 = (char *)*v105;
              if (!*v105)
                goto LABEL_214;
              v166 = (void **)(v115 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v166);
              goto LABEL_206;
            }
            break;
          case 5:
            v128 = (unint64_t *)*v105;
            do
            {
              v129 = __ldaxr(v128);
              v130 = v129 - 1;
            }
            while (__stlxr(v130, v128));
            if (!v130)
            {
              v115 = (char *)*v105;
              if (!*v105)
                goto LABEL_214;
              v166 = (void **)(v115 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v166);
LABEL_206:
              v110 = v115;
              v111 = 0x1020C405E66F15BLL;
              goto LABEL_213;
            }
            break;
          case 8:
            v131 = (unint64_t *)*v105;
            do
            {
              v132 = __ldaxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            if (!v133)
            {
              v134 = (unsigned int **)*v105;
              if (!*v105)
                goto LABEL_214;
              boost::detail::shared_count::~shared_count(v134 + 2);
              v110 = v134;
              v122 = -235920773;
              goto LABEL_212;
            }
            break;
          case 9:
            v116 = (unint64_t *)*v105;
            do
            {
              v117 = __ldaxr(v116);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v116));
            if (!v118)
            {
              v119 = *v105;
              if (*v105)
              {
                v120 = (void *)v119[6];
                if (v120)
                {
                  v119[7] = v120;
                  operator delete(v120);
                }
                v121 = (void *)v119[3];
                if (v121)
                {
                  v119[4] = v121;
                  operator delete(v121);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v119 + 1));
                v110 = v119;
                v122 = 2071181815;
LABEL_212:
                v111 = v122 | 0x1030C4000000000;
LABEL_213:
                MEMORY[0x219A19A08](v110, v111);
              }
LABEL_214:
              *v105 = 0;
            }
            break;
          default:
            break;
        }
        v135 = (void *)v192;
        *(void **)((char *)v105 + 5) = *(void **)((char *)&v192 + 5);
        *v105 = v135;
        LODWORD(v135) = BYTE12(v192);
        *((_BYTE *)v105 + 12) = BYTE12(v192);
        v136 = v135 > 9;
        v137 = (1 << (char)v135) & 0x33C;
        if (!v136 && v137 != 0)
        {
          v139 = (unint64_t *)*v105;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 + 1, v139));
        }
      }
      v141 = v193;
      if (v193 == 7)
        v141 = 1;
      *(_BYTE *)(*(_QWORD *)&v198[0] + v101) = v141;
      std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair((uint64_t)&v192);
      v142 = (uint64_t *)v100[1];
      if (v142)
      {
        do
        {
          v143 = v142;
          v142 = (uint64_t *)*v142;
        }
        while (v142);
      }
      else
      {
        do
        {
          v143 = (uint64_t *)v100[2];
          v19 = *v143 == (_QWORD)v100;
          v100 = v143;
        }
        while (!v19);
      }
      ++v101;
      v100 = v143;
    }
    while (v143 != (uint64_t *)&v160);
  }
  (*(void (**)(_QWORD *, uint64_t, void ***, _OWORD *, uint64_t))(*v148 + 512))(v148, a2, &v181, v198, v147);
  *(_QWORD *)&v192 = &v181;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  if (*(_QWORD *)&v198[0])
  {
    *((_QWORD *)&v198[0] + 1) = *(_QWORD *)&v198[0];
    operator delete(*(void **)&v198[0]);
  }
  std::__tree<std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flex_type_enum>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flex_type_enum>>>::destroy((uint64_t)&v159, v160);
}

void sub_2181E2DB8(_Unwind_Exception *a1)
{
  std::locale::~locale((std::locale *)&STACK[0x340]);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::expand(uint64_t a1@<X0>, const void **a2@<X1>, turi::flexible_type_impl **a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  int *v9;
  file_logger *v10;
  file_logger *started;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  turi::flexible_type_impl *v15;
  std::vector<std::string>::size_type v16;
  turi::flexible_type_impl *v17;
  turi::flexible_type_impl *v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  std::string *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  char *v30;
  char v31;
  std::vector<std::string>::pointer end;
  std::string *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  std::string *v38;
  std::vector<std::string>::pointer v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  turi::flexible_type_impl *v48;
  turi::flexible_type_impl *v49;
  uint64_t v50;
  std::string::size_type v51;
  turi::flexible_type_impl *v52;
  unint64_t v53;
  __n128 v54;
  unsigned __int8 *v55;
  BOOL v56;
  unsigned int v57;
  _BOOL4 v58;
  unsigned int v59;
  std::string::size_type v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  std::__split_buffer<std::string>::pointer v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  std::string::__raw *v76;
  int64_t v77;
  std::string::size_type v78;
  std::string::size_type v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  std::string::__raw *v83;
  int64_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  BOOL v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v107;
  uint64_t v108;
  size_t v109;
  unint64_t *v110;
  _QWORD *v111;
  unint64_t v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  double v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  size_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  char v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  std::string::size_type v130;
  std::string::size_type v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  std::string::size_type v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  std::string::size_type v140;
  void *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  std::string::size_type v148;
  unsigned int v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  std::string::size_type v153;
  void *v154;
  void *v155;
  __n128 v156;
  BOOL v157;
  unsigned int v158;
  _BOOL4 v159;
  unsigned int v160;
  unsigned int v161;
  double v162;
  size_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  std::string::size_type v170;
  _QWORD *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  std::string *v177;
  std::__split_buffer<std::string>::pointer v178;
  uint64_t v179;
  int64_t v180;
  unint64_t v181;
  unint64_t v182;
  int64_t v183;
  uint64_t v184;
  uint64_t *v185;
  std::string::__raw *v186;
  int64_t v187;
  std::string::size_type v188;
  std::string::size_type v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  std::string::__raw *v193;
  int64_t v194;
  std::string::size_type v195;
  std::string::size_type v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  _QWORD *v210;
  unint64_t v211;
  double *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  double v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  size_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  char v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  std::string::size_type v229;
  std::string::size_type v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  std::string::size_type v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  std::string::size_type v239;
  void *v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  std::string::size_type v247;
  unsigned int v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  std::string::size_type v252;
  void *v253;
  void *v254;
  __n128 v255;
  BOOL v256;
  unsigned int v257;
  _BOOL4 v258;
  unsigned int v259;
  unsigned int v260;
  double v261;
  size_t v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  std::string::size_type v269;
  _QWORD *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  std::string *v276;
  std::__split_buffer<std::string>::pointer v277;
  uint64_t v278;
  int64_t v279;
  unint64_t v280;
  unint64_t v281;
  int64_t v282;
  uint64_t v283;
  uint64_t *v284;
  std::string::__raw *v285;
  int64_t v286;
  std::string::size_type v287;
  std::string::size_type v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  std::string::__raw *v292;
  int64_t v293;
  std::string::size_type v294;
  std::string::size_type v295;
  uint64_t v296;
  double v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  _QWORD *v309;
  unint64_t v310;
  double *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  double v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  size_t v319;
  int v320;
  int v321;
  int v322;
  int v323;
  char v324;
  unint64_t *v325;
  unint64_t v326;
  unint64_t v327;
  std::string::size_type v328;
  std::string::size_type v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  std::string::size_type v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  std::string::size_type v338;
  void *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t v345;
  std::string::size_type v346;
  unsigned int v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  std::string::size_type v351;
  void *v352;
  void *v353;
  __n128 v354;
  BOOL v355;
  std::string::size_type v356;
  int v357;
  unsigned int v358;
  _BOOL4 v359;
  unsigned int v360;
  unsigned int v361;
  double v362;
  size_t v363;
  unsigned int v364;
  unsigned int v365;
  uint64_t v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  std::string::size_type v370;
  _QWORD *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  std::string *v377;
  std::__split_buffer<std::string>::pointer v378;
  uint64_t v379;
  int64_t v380;
  unint64_t v381;
  unint64_t v382;
  int64_t v383;
  uint64_t v384;
  uint64_t *v385;
  std::string::__raw *v386;
  int64_t v387;
  std::string::size_type v388;
  std::string::size_type v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  std::string::__raw *v393;
  int64_t v394;
  std::string::size_type v395;
  std::string::size_type v396;
  uint64_t v397;
  double v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t *v409;
  _QWORD *v410;
  unint64_t v411;
  double *v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  double v416;
  uint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  size_t v420;
  int v421;
  int v422;
  int v423;
  int v424;
  char v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t v428;
  std::string::size_type v429;
  std::string::size_type v430;
  uint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t v434;
  std::string::size_type v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  std::string::size_type v439;
  void *v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  std::string::size_type v447;
  unsigned int v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  std::string::size_type v452;
  void *v453;
  void *v454;
  __n128 v455;
  BOOL v456;
  unsigned int v457;
  _BOOL4 v458;
  unsigned int v459;
  unsigned int v460;
  double v461;
  size_t v462;
  unsigned int v463;
  unsigned int v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  int v468;
  std::string::size_type v469;
  _QWORD *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  std::string *v476;
  std::__split_buffer<std::string>::pointer v477;
  uint64_t v478;
  int64_t v479;
  unint64_t v480;
  unint64_t v481;
  int64_t v482;
  uint64_t v483;
  uint64_t *v484;
  std::string::__raw *v485;
  int64_t v486;
  std::string::size_type v487;
  std::string::size_type v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t *v491;
  std::string::__raw *v492;
  int64_t v493;
  std::string::size_type v494;
  std::string::size_type v495;
  uint64_t v496;
  double v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t *v508;
  _QWORD *v509;
  unint64_t v510;
  double *v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  double v515;
  uint64_t v516;
  _QWORD *v517;
  _QWORD *v518;
  size_t v519;
  int v520;
  int v521;
  int v522;
  int v523;
  char v524;
  unint64_t *v525;
  unint64_t v526;
  unint64_t v527;
  std::string::size_type v528;
  std::string::size_type v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  unint64_t v533;
  std::string::size_type v534;
  unint64_t *v535;
  unint64_t v536;
  unint64_t v537;
  std::string::size_type v538;
  void *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  unint64_t v545;
  std::string::size_type v546;
  unsigned int v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t v550;
  std::string::size_type v551;
  void *v552;
  void *v553;
  __n128 v554;
  BOOL v555;
  unsigned int v556;
  _BOOL4 v557;
  unsigned int v558;
  unsigned int v559;
  double v560;
  size_t v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t v564;
  unsigned int v565;
  unsigned int v566;
  int v567;
  std::string::size_type v568;
  _QWORD *v569;
  char *v570;
  char *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  std::string *v575;
  std::__split_buffer<std::string>::pointer begin;
  uint64_t v577;
  int64_t v578;
  unint64_t v579;
  unint64_t v580;
  int64_t v581;
  uint64_t v582;
  uint64_t *v583;
  std::string::__raw *v584;
  int64_t v585;
  std::string::size_type v586;
  std::string::size_type v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  std::string::__raw *v591;
  int64_t v592;
  std::string::size_type v593;
  std::string::size_type v594;
  uint64_t v595;
  double v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t *v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t *v607;
  _QWORD *v608;
  unint64_t v609;
  double *v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t v613;
  double v614;
  uint64_t v615;
  _QWORD *v616;
  _QWORD *v617;
  size_t v618;
  int v619;
  int v620;
  int v621;
  int v622;
  char v623;
  unint64_t *v624;
  unint64_t v625;
  unint64_t v626;
  std::string::size_type v627;
  std::string::size_type v628;
  uint64_t v629;
  unint64_t *v630;
  unint64_t v631;
  unint64_t v632;
  std::string::size_type v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t v636;
  std::string::size_type v637;
  void *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t *v642;
  unint64_t v643;
  unint64_t v644;
  std::string::size_type v645;
  unsigned int v646;
  unint64_t *v647;
  unint64_t v648;
  unint64_t v649;
  std::string::size_type v650;
  void *v651;
  void *v652;
  __n128 v653;
  BOOL v654;
  unsigned int v655;
  _BOOL4 v656;
  unsigned int v657;
  unsigned int v658;
  double v659;
  size_t v660;
  unsigned int v661;
  unsigned int v662;
  uint64_t v663;
  unsigned int v664;
  unsigned int v665;
  int v666;
  std::string::size_type v667;
  _QWORD *v668;
  char *v669;
  char *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  std::string *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t *v677;
  std::__split_buffer<std::string>::pointer v678;
  unint64_t v679;
  std::string::size_type v680;
  std::string::size_type v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  std::__split_buffer<std::string>::pointer v685;
  std::string::size_type v686;
  std::string::size_type v687;
  uint64_t v688;
  double v689;
  unint64_t *v690;
  _QWORD *v691;
  unint64_t v692;
  double *v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  double v697;
  uint64_t v698;
  _QWORD *v699;
  _QWORD *v700;
  size_t v701;
  int v702;
  int v703;
  int v704;
  int v705;
  char v706;
  unint64_t *v707;
  unint64_t v708;
  unint64_t v709;
  std::string::size_type v710;
  _QWORD *v711;
  uint64_t v712;
  unint64_t *v713;
  unint64_t v714;
  unint64_t v715;
  std::string::size_type v716;
  unint64_t *v717;
  unint64_t v718;
  unint64_t v719;
  std::string::size_type v720;
  void *v721;
  unint64_t *v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t *v725;
  unint64_t v726;
  unint64_t v727;
  std::string::size_type v728;
  unsigned int v729;
  unint64_t *v730;
  unint64_t v731;
  unint64_t v732;
  __n128 v733;
  BOOL v734;
  unsigned int v735;
  _BOOL4 v736;
  unsigned int v737;
  unsigned int v738;
  double v739;
  size_t v740;
  unsigned int v741;
  unsigned int v742;
  uint64_t v743;
  unsigned int v744;
  unsigned int v745;
  int v746;
  std::string::size_type v747;
  _QWORD *v748;
  char *v749;
  char *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  std::string *v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t *v757;
  std::__split_buffer<std::string>::pointer v758;
  unint64_t v759;
  std::string::size_type v760;
  std::string::size_type v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t *v764;
  std::__split_buffer<std::string>::pointer v765;
  std::string::size_type v766;
  std::string::size_type v767;
  uint64_t v768;
  double v769;
  unint64_t *v770;
  _QWORD *v771;
  unint64_t v772;
  double *v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  double v777;
  uint64_t v778;
  _QWORD *v779;
  _QWORD *v780;
  size_t v781;
  int v782;
  int v783;
  int v784;
  int v785;
  char v786;
  unint64_t *v787;
  unint64_t v788;
  unint64_t v789;
  std::string::size_type v790;
  _QWORD *v791;
  uint64_t v792;
  unint64_t *v793;
  unint64_t v794;
  unint64_t v795;
  std::string::size_type v796;
  unint64_t *v797;
  unint64_t v798;
  unint64_t v799;
  std::string::size_type v800;
  void *v801;
  unint64_t *v802;
  unint64_t v803;
  unint64_t v804;
  unint64_t *v805;
  unint64_t v806;
  unint64_t v807;
  std::string::size_type v808;
  unsigned int v809;
  unint64_t *v810;
  unint64_t v811;
  unint64_t v812;
  __n128 v813;
  BOOL v814;
  unsigned int v815;
  _BOOL4 v816;
  unsigned int v817;
  unsigned int v818;
  double v819;
  size_t v820;
  unsigned int v821;
  unsigned int v822;
  uint64_t v823;
  unsigned int v824;
  unsigned int v825;
  int v826;
  std::string::size_type v827;
  _QWORD *v828;
  char *v829;
  char *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  std::string *v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t *v837;
  std::__split_buffer<std::string>::pointer v838;
  unint64_t v839;
  std::string::size_type v840;
  std::string::size_type v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t *v844;
  std::__split_buffer<std::string>::pointer v845;
  std::string::size_type v846;
  std::string::size_type v847;
  uint64_t v848;
  double v849;
  unint64_t *v850;
  _QWORD *v851;
  unint64_t v852;
  double *v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  double v857;
  uint64_t v858;
  _QWORD *v859;
  _QWORD *v860;
  size_t v861;
  int v862;
  int v863;
  int v864;
  int v865;
  char v866;
  unint64_t *v867;
  unint64_t v868;
  unint64_t v869;
  std::string::size_type v870;
  _QWORD *v871;
  uint64_t v872;
  unint64_t *v873;
  unint64_t v874;
  unint64_t v875;
  std::string::size_type v876;
  unint64_t *v877;
  unint64_t v878;
  unint64_t v879;
  std::string::size_type v880;
  void *v881;
  unint64_t *v882;
  unint64_t v883;
  unint64_t v884;
  unint64_t *v885;
  unint64_t v886;
  unint64_t v887;
  std::string::size_type v888;
  unsigned int v889;
  unint64_t *v890;
  unint64_t v891;
  unint64_t v892;
  __n128 v893;
  BOOL v894;
  unsigned int v895;
  _BOOL4 v896;
  unsigned int v897;
  unsigned int v898;
  double v899;
  size_t v900;
  unsigned int v901;
  unsigned int v902;
  uint64_t v903;
  unsigned int v904;
  unsigned int v905;
  int v906;
  std::string::size_type v907;
  _QWORD *v908;
  char *v909;
  char *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  std::string *first;
  uint64_t v915;
  unint64_t v916;
  uint64_t *v917;
  std::__split_buffer<std::string>::pointer v918;
  unint64_t v919;
  std::string::size_type v920;
  std::string::size_type v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t *v924;
  std::__split_buffer<std::string>::pointer v925;
  std::string::size_type v926;
  std::string::size_type v927;
  uint64_t v928;
  double v929;
  unint64_t *v930;
  _QWORD *v931;
  unint64_t v932;
  double *v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  double v937;
  uint64_t v938;
  _QWORD *v939;
  _QWORD *v940;
  size_t v941;
  int v942;
  int v943;
  int v944;
  int v945;
  char v946;
  unint64_t *v947;
  unint64_t v948;
  unint64_t v949;
  std::string::size_type v950;
  _QWORD *v951;
  uint64_t v952;
  unint64_t *v953;
  unint64_t v954;
  unint64_t v955;
  std::string::size_type v956;
  unint64_t *v957;
  unint64_t v958;
  unint64_t v959;
  std::string::size_type v960;
  void *v961;
  unint64_t *v962;
  unint64_t v963;
  unint64_t v964;
  unint64_t *v965;
  unint64_t v966;
  unint64_t v967;
  std::string::size_type v968;
  unsigned int v969;
  unint64_t *v970;
  unint64_t v971;
  unint64_t v972;
  __n128 v973;
  BOOL v974;
  unsigned int v975;
  _BOOL4 v976;
  unsigned int v977;
  unsigned int v978;
  double v979;
  size_t v980;
  unsigned int v981;
  unsigned int v982;
  uint64_t v983;
  unsigned int v984;
  unsigned int v985;
  int v986;
  std::string::size_type v987;
  _QWORD *v988;
  char *v989;
  char *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  std::string *v994;
  uint64_t v995;
  unint64_t v996;
  uint64_t *v997;
  std::__split_buffer<std::string>::pointer v998;
  unint64_t v999;
  std::string::size_type v1000;
  std::string::size_type v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t *v1004;
  std::__split_buffer<std::string>::pointer v1005;
  std::string::size_type v1006;
  std::string::size_type v1007;
  uint64_t v1008;
  double v1009;
  unint64_t *v1010;
  _QWORD *v1011;
  unint64_t v1012;
  double *v1013;
  uint64_t v1014;
  uint64_t v1015;
  unint64_t v1016;
  double v1017;
  uint64_t v1018;
  _QWORD *v1019;
  _QWORD *v1020;
  size_t v1021;
  int v1022;
  int v1023;
  int v1024;
  int v1025;
  char v1026;
  unint64_t *v1027;
  unint64_t v1028;
  unint64_t v1029;
  std::string::size_type v1030;
  _QWORD *v1031;
  uint64_t v1032;
  unint64_t *v1033;
  unint64_t v1034;
  unint64_t v1035;
  std::string::size_type v1036;
  unint64_t *v1037;
  unint64_t v1038;
  unint64_t v1039;
  std::string::size_type v1040;
  void *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  unint64_t v1044;
  unint64_t *v1045;
  unint64_t v1046;
  unint64_t v1047;
  std::string::size_type v1048;
  unsigned int v1049;
  unint64_t *v1050;
  unint64_t v1051;
  unint64_t v1052;
  std::__shared_weak_count *v1053;
  unint64_t *p_shared_owners;
  unint64_t v1055;
  char *v1056;
  _QWORD *v1057;
  uint64_t v1058;
  std::__shared_weak_count *v1059;
  unint64_t *v1060;
  unint64_t v1061;
  turi::unity_sframe *v1062;
  uint64_t v1063;
  unint64_t *v1064;
  unint64_t v1065;
  std::__shared_weak_count *v1066;
  unint64_t *v1067;
  unint64_t v1068;
  std::__shared_weak_count *size;
  unint64_t *v1070;
  unint64_t v1071;
  _QWORD *v1072;
  _QWORD *v1073;
  _QWORD *v1074;
  _QWORD *exception;
  uint64_t v1076;
  _OWORD *v1077;
  uint64_t v1078;
  uint64_t *v1079;
  std::string *v1080;
  std::string *v1081;
  std::string *v1082;
  __int128 v1084;
  void *v1085[2];
  uint64_t v1086;
  uint64_t v1087;
  std::__shared_weak_count *v1088;
  std::string v1089;
  std::vector<std::string> v1090;
  std::__split_buffer<std::string> v1091[2];
  void *__p;
  char v1093;
  _BYTE v1094[159];
  char v1095;
  uint64_t v1096;
  __int128 v1097;
  _BYTE v1098[24];
  _BYTE *v1099;
  std::string v1100;
  uint64_t v1101;

  v1101 = *MEMORY[0x24BDAC8D0];
  v9 = (int *)global_logger();
  if (v9[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v9))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v10 = (file_logger *)global_logger();
    started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "expand", 2485, 1);
    v12 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Function entry", 14);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13)
    {
      if (*((_BYTE *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(v13[2] - 24) + 16));
        v14 = std::locale::use_facet((const std::locale *)v1091, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)v1091);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) != 6)
  {
    v1072 = __cxa_allocate_exception(8uLL);
    *v1072 = "Cannot expand an SArray of type that is not datetime type";
    __cxa_throw(v1072, MEMORY[0x24BEDB718], 0);
  }
  v15 = a3[1];
  v16 = (v15 - *a3) >> 4;
  if (v16 != a4[1] - *a4)
  {
    v1073 = __cxa_allocate_exception(8uLL);
    *v1073 = "Expanded column names and types length do not match";
    __cxa_throw(v1073, MEMORY[0x24BEDB718], 0);
  }
  if (v15 == *a3)
  {
    v1074 = __cxa_allocate_exception(8uLL);
    *v1074 = "Please provide at least one column to expand datetime to";
    __cxa_throw(v1074, MEMORY[0x24BEDB718], 0);
  }
  memset(&v1090, 0, sizeof(v1090));
  std::vector<std::string>::reserve(&v1090, v16);
  v1078 = a1;
  v1079 = a4;
  v1077 = a5;
  v18 = *a3;
  v17 = a3[1];
  if (*a3 == v17)
  {
    memset(&v1089, 0, sizeof(v1089));
LABEL_1811:
    std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v1091, (uint64_t)&v1089);
    v1053 = *(std::__shared_weak_count **)(v1078 + 32);
    v1087 = *(_QWORD *)(v1078 + 24);
    v1088 = v1053;
    if (v1053)
    {
      p_shared_owners = (unint64_t *)&v1053->__shared_owners_;
      do
        v1055 = __ldxr(p_shared_owners);
      while (__stxr(v1055 + 1, p_shared_owners));
    }
    std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(v1085, (uint64_t)v1091);
    v1099 = 0;
    v1056 = (char *)operator new(0x20uLL);
    *(_QWORD *)v1056 = &off_24D933540;
    *(_OWORD *)(v1056 + 8) = *(_OWORD *)v1085;
    *((_QWORD *)v1056 + 3) = v1086;
    v1085[0] = 0;
    v1085[1] = 0;
    v1086 = 0;
    v1099 = v1056;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node(&v1087, (uint64_t)v1098, v1079, -1, &v1100);
    v1057 = v1099;
    if (v1099 == v1098)
    {
      v1058 = 4;
      v1057 = v1098;
    }
    else
    {
      if (!v1099)
      {
LABEL_1819:
        if (v1085[0])
        {
          v1085[1] = v1085[0];
          operator delete(v1085[0]);
        }
        v1059 = v1088;
        if (v1088)
        {
          v1060 = (unint64_t *)&v1088->__shared_owners_;
          do
            v1061 = __ldaxr(v1060);
          while (__stlxr(v1061 - 1, v1060));
          if (!v1061)
          {
            ((void (*)(std::__shared_weak_count *))v1059->__on_zero_shared)(v1059);
            std::__shared_weak_count::__release_weak(v1059);
          }
        }
        v1062 = (turi::unity_sframe *)operator new();
        turi::unity_sframe::unity_sframe(v1062);
        std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v1097, (uint64_t)v1062);
        v1063 = v1097;
        v1084 = *(_OWORD *)&v1100.__r_.__value_.__l.__data_;
        if (v1100.__r_.__value_.__l.__size_)
        {
          v1064 = (unint64_t *)(v1100.__r_.__value_.__l.__size_ + 8);
          do
            v1065 = __ldxr(v1064);
          while (__stxr(v1065 + 1, v1064));
        }
        turi::unity_sframe::construct_from_planner_node(v1063, (uint64_t *)&v1084, (uint64_t)&v1090);
        v1066 = (std::__shared_weak_count *)*((_QWORD *)&v1084 + 1);
        if (*((_QWORD *)&v1084 + 1))
        {
          v1067 = (unint64_t *)(*((_QWORD *)&v1084 + 1) + 8);
          do
            v1068 = __ldaxr(v1067);
          while (__stlxr(v1068 - 1, v1067));
          if (!v1068)
          {
            ((void (*)(std::__shared_weak_count *))v1066->__on_zero_shared)(v1066);
            std::__shared_weak_count::__release_weak(v1066);
          }
        }
        *v1077 = v1097;
        size = (std::__shared_weak_count *)v1100.__r_.__value_.__l.__size_;
        if (v1100.__r_.__value_.__l.__size_)
        {
          v1070 = (unint64_t *)(v1100.__r_.__value_.__l.__size_ + 8);
          do
            v1071 = __ldaxr(v1070);
          while (__stlxr(v1071 - 1, v1070));
          if (!v1071)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (v1091[0].__first_)
        {
          v1091[0].__begin_ = v1091[0].__first_;
          operator delete(v1091[0].__first_);
        }
        if (v1089.__r_.__value_.__r.__words[0])
        {
          v1089.__r_.__value_.__l.__size_ = v1089.__r_.__value_.__r.__words[0];
          operator delete(v1089.__r_.__value_.__l.__data_);
        }
        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)&v1090;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
        return;
      }
      v1058 = 5;
    }
    (*(void (**)(void))(*v1057 + 8 * v1058))();
    goto LABEL_1819;
  }
  v1081 = *(std::string **)(MEMORY[0x24BEDB7F0] + 64);
  v1082 = (std::string *)*MEMORY[0x24BEDB7F0];
  v1080 = *(std::string **)(MEMORY[0x24BEDB7F0] + 72);
  v1076 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    if (*((char *)a2 + 23) >= 0)
      v19 = *((unsigned __int8 *)a2 + 23);
    else
      v19 = (size_t)a2[1];
    if (v19)
    {
      std::string::basic_string[abi:ne180100]((uint64_t)&v1089, v19 + 1);
      if ((v1089.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v1089;
      else
        v20 = (std::string *)v1089.__r_.__value_.__r.__words[0];
      if (*((char *)a2 + 23) >= 0)
        v21 = a2;
      else
        v21 = *a2;
      memmove(v20, v21, v19);
      *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 46;
      switch(*((_BYTE *)v18 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v1091);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_35;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v1091);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_35:
          v1091[0].__first_ = v1082;
          *(std::__split_buffer<std::string>::pointer *)((char *)&v1091[0].__first_
                                                       + v1082[-1].__r_.__value_.__r.__words[0]) = v1081;
          v1091[0].__end_ = v1080;
          v1091[0].__end_cap_.__value_ = (std::string *)(MEMORY[0x24BEDB848] + 16);
          if (v1093 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v1094);
          goto LABEL_55;
        case 2:
          v23 = *(_QWORD *)v18;
          if (*(char *)(*(_QWORD *)v18 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v1100, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
          }
          else
          {
            v24 = *(_OWORD *)(v23 + 8);
            v1100.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 24);
            *(_OWORD *)&v1100.__r_.__value_.__l.__data_ = v24;
          }
          goto LABEL_55;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
          goto LABEL_55;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (uint64_t *)(*(_QWORD *)v18 + 8));
          goto LABEL_55;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
          goto LABEL_55;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v18, &v1100);
          goto LABEL_55;
        case 7:
          memset(&v1100, 0, sizeof(v1100));
          goto LABEL_55;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_55;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
LABEL_55:
          if ((v1100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v1100;
          else
            v27 = (std::string *)v1100.__r_.__value_.__r.__words[0];
          if ((v1100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = HIBYTE(v1100.__r_.__value_.__r.__words[2]);
          else
            v28 = v1100.__r_.__value_.__l.__size_;
          v29 = std::string::append(&v1089, (const std::string::value_type *)v27, v28);
          v30 = (char *)v29->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v1097 = v29->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v1097 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
          v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          end = v1090.__end_;
          if (v1090.__end_ >= v1090.__end_cap_.__value_)
          {
            v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1090.__end_ - (char *)v1090.__begin_) >> 3);
            v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3) > v35)
              v35 = 0x5555555555555556 * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3) >= 0x555555555555555)
              v36 = 0xAAAAAAAAAAAAAAALL;
            else
              v36 = v35;
            v1091[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v1090.__end_cap_;
            if (v36)
              v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v1090.__end_cap_, v36);
            else
              v37 = 0;
            v38 = v37 + v34;
            v1091[0].__first_ = v37;
            v1091[0].__begin_ = v38;
            v1091[0].__end_cap_.__value_ = &v37[v36];
            v38->__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
            v38->__r_.__value_.__l.__size_ = v1097;
            *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v1097 + 7);
            *((_BYTE *)&v38->__r_.__value_.__s + 23) = v31;
            v1091[0].__end_ = v38 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v1090, v1091);
            v33 = v1090.__end_;
            std::__split_buffer<std::string>::~__split_buffer(v1091);
          }
          else
          {
            v1090.__end_->__r_.__value_.__l.__data_ = v30;
            end->__r_.__value_.__l.__size_ = v1097;
            *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v1097 + 7);
            *((_BYTE *)&end->__r_.__value_.__s + 23) = v31;
            v33 = end + 1;
          }
          v1090.__end_ = v33;
          if (SHIBYTE(v1100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1089.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_90;
          goto LABEL_91;
        default:
          goto LABEL_1856;
      }
    }
    switch(*((_BYTE *)v18 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v1091);
        std::ostream::operator<<();
        std::stringbuf::str();
        v1091[0].__first_ = v1082;
        *(std::__split_buffer<std::string>::pointer *)((char *)&v1091[0].__first_
                                                     + v1082[-1].__r_.__value_.__r.__words[0]) = v1081;
        v1091[0].__end_ = v1080;
        v22 = (std::string *)v1076;
        goto LABEL_48;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v1091);
        std::ostream::operator<<();
        std::stringbuf::str();
        v1091[0].__first_ = v1082;
        *(std::__split_buffer<std::string>::pointer *)((char *)&v1091[0].__first_
                                                     + v1082[-1].__r_.__value_.__r.__words[0]) = v1081;
        v22 = (std::string *)(MEMORY[0x24BEDB848] + 16);
        v1091[0].__end_ = v1080;
LABEL_48:
        v1091[0].__end_cap_.__value_ = v22;
        if (v1093 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](v1094);
        goto LABEL_78;
      case 2:
        v25 = *(_QWORD *)v18;
        if (*(char *)(*(_QWORD *)v18 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v1089, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
        }
        else
        {
          v26 = *(_OWORD *)(v25 + 8);
          v1089.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 24);
          *(_OWORD *)&v1089.__r_.__value_.__l.__data_ = v26;
        }
        goto LABEL_78;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
        goto LABEL_78;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (uint64_t *)(*(_QWORD *)v18 + 8));
        goto LABEL_78;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
        goto LABEL_78;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v18, &v1089);
        goto LABEL_78;
      case 7:
        memset(&v1089, 0, sizeof(v1089));
        goto LABEL_78;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_78;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v1091, (_QWORD *)(*(_QWORD *)v18 + 8));
LABEL_78:
        v39 = v1090.__end_;
        if (v1090.__end_ >= v1090.__end_cap_.__value_)
        {
          v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1090.__end_ - (char *)v1090.__begin_) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3) > v42)
            v42 = 0x5555555555555556 * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1090.__end_cap_.__value_ - (char *)v1090.__begin_) >> 3) >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v42;
          v1091[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v1090.__end_cap_;
          if (v43)
            v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v1090.__end_cap_, v43);
          else
            v44 = 0;
          v45 = v44 + v41;
          v1091[0].__first_ = v44;
          v1091[0].__begin_ = v45;
          v1091[0].__end_cap_.__value_ = &v44[v43];
          v46 = *(_OWORD *)&v1089.__r_.__value_.__l.__data_;
          v45->__r_.__value_.__r.__words[2] = v1089.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
          memset(&v1089, 0, sizeof(v1089));
          v1091[0].__end_ = v45 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v1090, v1091);
          v47 = v1090.__end_;
          std::__split_buffer<std::string>::~__split_buffer(v1091);
          v1090.__end_ = v47;
          if (SHIBYTE(v1089.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
            operator delete(v1089.__r_.__value_.__l.__data_);
        }
        else
        {
          v40 = *(_OWORD *)&v1089.__r_.__value_.__l.__data_;
          v1090.__end_->__r_.__value_.__r.__words[2] = v1089.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          v1090.__end_ = v39 + 1;
        }
LABEL_91:
        v18 = (turi::flexible_type_impl *)((char *)v18 + 16);
        if (v18 != v17)
          continue;
        v49 = *a3;
        v48 = a3[1];
        memset(&v1089, 0, sizeof(v1089));
        v50 = v48 - v49;
        if (v48 == v49)
          goto LABEL_1811;
        std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](&v1089, v50 >> 4);
        v51 = v1089.__r_.__value_.__l.__size_;
        bzero((void *)v1089.__r_.__value_.__l.__size_, v50 >> 2);
        v1089.__r_.__value_.__l.__size_ = v51 + (v50 >> 2);
        v52 = *a3;
        if (a3[1] == *a3)
          goto LABEL_1811;
        v53 = 0;
        break;
      default:
        goto LABEL_1856;
    }
    break;
  }
  while (2)
  {
    v1100.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
    v1100.__r_.__value_.__s.__data_[12] = 0;
    std::string::basic_string[abi:ne180100]<0>(v1091, "year");
    turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
    if (SHIBYTE(v1091[0].__end_) < 0)
      operator delete(v1091[0].__first_);
    v55 = (unsigned __int8 *)v52 + 16 * v53;
    switch(v1100.__r_.__value_.__s.__data_[12])
    {
      case 0:
        switch(v55[12])
        {
          case 0u:
            v56 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
            goto LABEL_187;
          case 1u:
            v54.n128_u64[0] = *(_QWORD *)v55;
            v103 = v1100.__r_.__value_.__r.__words[0];
            goto LABEL_186;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_255;
          case 6u:
            v56 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8 && *((_DWORD *)v55 + 2) == 0;
            goto LABEL_187;
          default:
            goto LABEL_1856;
        }
      case 1:
        switch(v55[12])
        {
          case 0u:
            v54.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
            v103 = *(_QWORD *)v55;
LABEL_186:
            v56 = v54.n128_f64[0] == (double)v103;
            goto LABEL_187;
          case 1u:
            v54.n128_u64[0] = *(_QWORD *)v55;
            v58 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
            goto LABEL_212;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_255;
          case 6u:
            v54.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
            goto LABEL_192;
          default:
            goto LABEL_1856;
        }
      case 2:
        v99 = v55[12];
        v100 = v99 - 3 >= 7 && v99 >= 2;
        if (!v100)
          goto LABEL_137;
        if (v99 != 2)
          goto LABEL_1856;
        v108 = *(_QWORD *)v55;
        if (*(char *)(*(_QWORD *)v55 + 31) < 0)
          v109 = *(_QWORD *)(v108 + 16);
        else
          v109 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
        if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
          v118 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
        else
          v118 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
        if (v109 != v118)
          goto LABEL_137;
        v119 = (_QWORD *)(v108 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
          v119 = (_QWORD *)*v119;
        v120 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
        if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
          v120 = (_QWORD *)*v120;
        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
        {
          v56 = memcmp(v119, v120, v109) == 0;
LABEL_187:
          v58 = v56;
          goto LABEL_212;
        }
        if (v109)
        {
          v121 = v109 - 1;
          do
          {
            v123 = *(unsigned __int8 *)v119;
            v119 = (_QWORD *)((char *)v119 + 1);
            v122 = v123;
            v125 = *(unsigned __int8 *)v120;
            v120 = (_QWORD *)((char *)v120 + 1);
            v124 = v125;
            v100 = v121-- != 0;
            v126 = v100;
            v58 = v122 == v124;
          }
          while (v122 == v124 && (v126 & 1) != 0);
          goto LABEL_212;
        }
        goto LABEL_211;
      case 3:
        v101 = v55[12];
        if (v101 > 9)
          goto LABEL_1856;
        if (v101 == 3)
        {
          v110 = *(unint64_t **)(*(_QWORD *)v55 + 8);
          v111 = *(_QWORD **)(*(_QWORD *)v55 + 16);
          v112 = v111 - v110;
          v113 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
          if (v112 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v113) >> 3)
          {
            if (v111 == v110)
            {
LABEL_211:
              v58 = 1;
              goto LABEL_212;
            }
            if (v112 <= 1)
              v114 = 1;
            else
              v114 = v111 - v110;
            v54.n128_u64[0] = *v110;
            if (*(double *)v110 == *v113)
            {
              v115 = 1;
              do
              {
                v116 = v115;
                if (v114 == v115)
                  break;
                v54.n128_u64[0] = v110[v115];
                v117 = v113[v115++];
              }
              while (v54.n128_f64[0] == v117);
              v58 = v116 >= v112;
              goto LABEL_212;
            }
          }
LABEL_137:
          v58 = 0;
          goto LABEL_212;
        }
        v58 = 0;
LABEL_225:
        v137 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (v139)
          goto LABEL_260;
        v140 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_254;
        v141 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
        if (v141)
        {
          *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v141;
          operator delete(v141);
        }
        v131 = v140;
        v132 = 0x1080C409938AC02;
        goto LABEL_253;
      case 4:
        v57 = v55[12];
        if (v57 > 9)
          goto LABEL_1856;
        if (v57 == 4)
        {
          v107 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
          goto LABEL_181;
        }
        v58 = 0;
LABEL_220:
        v133 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        if (v135)
          goto LABEL_260;
        v136 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_254;
        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_237:
        v131 = v136;
        v132 = 0x1020C405E66F15BLL;
        goto LABEL_253;
      case 5:
        v104 = v55[12];
        if (v104 > 9)
          goto LABEL_1856;
        if (v104 == 5)
        {
          v107 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
          goto LABEL_181;
        }
        v58 = 0;
LABEL_232:
        v142 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v143 = __ldaxr(v142);
          v144 = v143 - 1;
        }
        while (__stlxr(v144, v142));
        if (v144)
          goto LABEL_260;
        v136 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_254;
        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
        goto LABEL_237;
      case 6:
        switch(v55[12])
        {
          case 0u:
            v56 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
               && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
            goto LABEL_187;
          case 1u:
            v54.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_192:
            v58 = v54.n128_f64[0] < 0.0000005;
            goto LABEL_212;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_255;
          case 6u:
            v56 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
               && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
            goto LABEL_187;
          default:
            goto LABEL_1856;
        }
      case 7:
        v102 = v55[12];
        if (v102 < 7 || v102 - 8 < 2)
          goto LABEL_255;
        if (v102 != 7)
          goto LABEL_1856;
        goto LABEL_261;
      case 8:
        v105 = v55[12];
        if (v105 >= 8 && v105 != 9)
        {
          if (v105 == 8)
          {
            v107 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_181:
            v58 = v107;
            goto LABEL_212;
          }
          goto LABEL_1856;
        }
        v58 = 0;
LABEL_238:
        v145 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v146 = __ldaxr(v145);
          v147 = v146 - 1;
        }
        while (__stlxr(v147, v145));
        if (v147)
        {
LABEL_260:
          if (v58)
            goto LABEL_261;
        }
        else
        {
          v148 = v1100.__r_.__value_.__r.__words[0];
          if (v1100.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
            v131 = v148;
            v149 = -235920773;
LABEL_252:
            v132 = v149 | 0x1030C4000000000;
LABEL_253:
            MEMORY[0x219A19A08](v131, v132, v54);
          }
LABEL_254:
          if (v58)
          {
LABEL_261:
            *(_DWORD *)(v1089.__r_.__value_.__r.__words[0] + 4 * v53) = 0;
            goto LABEL_1806;
          }
        }
LABEL_255:
        v1100.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
        v1100.__r_.__value_.__s.__data_[12] = 0;
        std::string::basic_string[abi:ne180100]<0>(v1091, "month");
        turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
        if (SHIBYTE(v1091[0].__end_) < 0)
          operator delete(v1091[0].__first_);
        switch(v1100.__r_.__value_.__s.__data_[12])
        {
          case 0:
            switch(v55[12])
            {
              case 0u:
                v157 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                goto LABEL_344;
              case 1u:
                v156.n128_u64[0] = *(_QWORD *)v55;
                v166 = v1100.__r_.__value_.__r.__words[0];
                goto LABEL_343;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_412;
              case 6u:
                v157 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                    && *((_DWORD *)v55 + 2) == 0;
                goto LABEL_344;
              default:
                goto LABEL_1856;
            }
          case 1:
            switch(v55[12])
            {
              case 0u:
                v156.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                v166 = *(_QWORD *)v55;
LABEL_343:
                v157 = v156.n128_f64[0] == (double)v166;
                goto LABEL_344;
              case 1u:
                v156.n128_u64[0] = *(_QWORD *)v55;
                v159 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                goto LABEL_369;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_412;
              case 6u:
                v156.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                goto LABEL_349;
              default:
                goto LABEL_1856;
            }
          case 2:
            v159 = 0;
            v161 = v55[12];
            if (v161 - 3 < 7 || v161 < 2)
              goto LABEL_369;
            if (v161 != 2)
              goto LABEL_1856;
            v162 = *(double *)v55;
            if (*(char *)(*(_QWORD *)v55 + 31) < 0)
              v163 = *(_QWORD *)(*(_QWORD *)&v162 + 16);
            else
              v163 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
            if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
              v217 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
            else
              v217 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
            if (v163 != v217)
              goto LABEL_266;
            v218 = (_QWORD *)(*(_QWORD *)&v162 + 8);
            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
              v218 = (_QWORD *)*v218;
            v219 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
            if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
              v219 = (_QWORD *)*v219;
            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
            {
              v157 = memcmp(v218, v219, v163) == 0;
LABEL_344:
              v159 = v157;
              goto LABEL_369;
            }
            if (v163)
            {
              v220 = v163 - 1;
              do
              {
                v222 = *(unsigned __int8 *)v218;
                v218 = (_QWORD *)((char *)v218 + 1);
                v221 = v222;
                v224 = *(unsigned __int8 *)v219;
                v219 = (_QWORD *)((char *)v219 + 1);
                v223 = v224;
                v100 = v220-- != 0;
                v225 = v100;
                v159 = v221 == v223;
              }
              while (v221 == v223 && (v225 & 1) != 0);
              goto LABEL_369;
            }
            goto LABEL_368;
          case 3:
            v164 = v55[12];
            if (v164 > 9)
              goto LABEL_1856;
            if (v164 == 3)
            {
              v209 = *(unint64_t **)(*(_QWORD *)v55 + 8);
              v210 = *(_QWORD **)(*(_QWORD *)v55 + 16);
              v211 = v210 - v209;
              v212 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
              if (v211 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v212) >> 3)
              {
                if (v210 == v209)
                {
LABEL_368:
                  v159 = 1;
                  goto LABEL_369;
                }
                if (v211 <= 1)
                  v213 = 1;
                else
                  v213 = v210 - v209;
                v156.n128_u64[0] = *v209;
                if (*(double *)v209 == *v212)
                {
                  v214 = 1;
                  do
                  {
                    v215 = v214;
                    if (v213 == v214)
                      break;
                    v156.n128_u64[0] = v209[v214];
                    v216 = v212[v214++];
                  }
                  while (v156.n128_f64[0] == v216);
                  v159 = v215 >= v211;
                  goto LABEL_369;
                }
              }
LABEL_266:
              v159 = 0;
              goto LABEL_369;
            }
            v159 = 0;
LABEL_382:
            v236 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
            do
            {
              v237 = __ldaxr(v236);
              v238 = v237 - 1;
            }
            while (__stlxr(v238, v236));
            if (v238)
              goto LABEL_417;
            v239 = v1100.__r_.__value_.__r.__words[0];
            if (!v1100.__r_.__value_.__r.__words[0])
              goto LABEL_411;
            v240 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
            if (v240)
            {
              *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v240;
              operator delete(v240);
            }
            v230 = v239;
            v231 = 0x1080C409938AC02;
            goto LABEL_410;
          case 4:
            v158 = v55[12];
            if (v158 > 9)
              goto LABEL_1856;
            if (v158 == 4)
            {
              v169 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
              goto LABEL_338;
            }
            v159 = 0;
LABEL_377:
            v232 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
            do
            {
              v233 = __ldaxr(v232);
              v234 = v233 - 1;
            }
            while (__stlxr(v234, v232));
            if (v234)
              goto LABEL_417;
            v235 = v1100.__r_.__value_.__r.__words[0];
            if (!v1100.__r_.__value_.__r.__words[0])
              goto LABEL_411;
            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_394:
            v230 = v235;
            v231 = 0x1020C405E66F15BLL;
            goto LABEL_410;
          case 5:
            v167 = v55[12];
            if (v167 > 9)
              goto LABEL_1856;
            if (v167 == 5)
            {
              v169 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
              goto LABEL_338;
            }
            v159 = 0;
LABEL_389:
            v241 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
            do
            {
              v242 = __ldaxr(v241);
              v243 = v242 - 1;
            }
            while (__stlxr(v243, v241));
            if (v243)
              goto LABEL_417;
            v235 = v1100.__r_.__value_.__r.__words[0];
            if (!v1100.__r_.__value_.__r.__words[0])
              goto LABEL_411;
            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
            goto LABEL_394;
          case 6:
            switch(v55[12])
            {
              case 0u:
                v157 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                    && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                goto LABEL_344;
              case 1u:
                v156.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_349:
                v159 = v156.n128_f64[0] < 0.0000005;
                goto LABEL_369;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_412;
              case 6u:
                v157 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                goto LABEL_344;
              default:
                goto LABEL_1856;
            }
          case 7:
            v165 = v55[12];
            if (v165 < 7 || v165 - 8 < 2)
              goto LABEL_412;
            if (v165 != 7)
              goto LABEL_1856;
            goto LABEL_418;
          case 8:
            v168 = v55[12];
            if (v168 >= 8 && v168 != 9)
            {
              if (v168 == 8)
              {
                v169 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_338:
                v159 = v169;
                goto LABEL_369;
              }
              goto LABEL_1856;
            }
            v159 = 0;
LABEL_395:
            v244 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
            do
            {
              v245 = __ldaxr(v244);
              v246 = v245 - 1;
            }
            while (__stlxr(v246, v244));
            if (v246)
            {
LABEL_417:
              if (v159)
                goto LABEL_418;
            }
            else
            {
              v247 = v1100.__r_.__value_.__r.__words[0];
              if (v1100.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
                v230 = v247;
                v248 = -235920773;
LABEL_409:
                v231 = v248 | 0x1030C4000000000;
LABEL_410:
                MEMORY[0x219A19A08](v230, v231, v156);
              }
LABEL_411:
              if (v159)
              {
LABEL_418:
                *(_DWORD *)(v1089.__r_.__value_.__r.__words[0] + 4 * v53) = 1;
                goto LABEL_1806;
              }
            }
LABEL_412:
            v1100.__r_.__value_.__r.__words[0] = 0;
            LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
            v1100.__r_.__value_.__s.__data_[12] = 0;
            std::string::basic_string[abi:ne180100]<0>(v1091, "day");
            turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
            if (SHIBYTE(v1091[0].__end_) < 0)
              operator delete(v1091[0].__first_);
            switch(v1100.__r_.__value_.__s.__data_[12])
            {
              case 0:
                switch(v55[12])
                {
                  case 0u:
                    v256 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                    goto LABEL_501;
                  case 1u:
                    v255.n128_u64[0] = *(_QWORD *)v55;
                    v265 = v1100.__r_.__value_.__r.__words[0];
                    goto LABEL_500;
                  case 2u:
                  case 3u:
                  case 4u:
                  case 5u:
                  case 7u:
                  case 8u:
                  case 9u:
                    goto LABEL_570;
                  case 6u:
                    v256 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                        && *((_DWORD *)v55 + 2) == 0;
                    goto LABEL_501;
                  default:
                    goto LABEL_1856;
                }
              case 1:
                switch(v55[12])
                {
                  case 0u:
                    v255.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                    v265 = *(_QWORD *)v55;
LABEL_500:
                    v256 = v255.n128_f64[0] == (double)v265;
                    goto LABEL_501;
                  case 1u:
                    v255.n128_u64[0] = *(_QWORD *)v55;
                    v258 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                    goto LABEL_527;
                  case 2u:
                  case 3u:
                  case 4u:
                  case 5u:
                  case 7u:
                  case 8u:
                  case 9u:
                    goto LABEL_570;
                  case 6u:
                    v255.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                    goto LABEL_506;
                  default:
                    goto LABEL_1856;
                }
              case 2:
                v258 = 0;
                v260 = v55[12];
                if (v260 - 3 < 7 || v260 < 2)
                  goto LABEL_527;
                if (v260 != 2)
                  goto LABEL_1856;
                v261 = *(double *)v55;
                if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                  v262 = *(_QWORD *)(*(_QWORD *)&v261 + 16);
                else
                  v262 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                  v316 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                else
                  v316 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                if (v262 != v316)
                  goto LABEL_423;
                v317 = (_QWORD *)(*(_QWORD *)&v261 + 8);
                if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                  v317 = (_QWORD *)*v317;
                v318 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                  v318 = (_QWORD *)*v318;
                if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                {
                  v256 = memcmp(v317, v318, v262) == 0;
LABEL_501:
                  v258 = v256;
                  goto LABEL_527;
                }
                if (v262)
                {
                  v319 = v262 - 1;
                  do
                  {
                    v321 = *(unsigned __int8 *)v317;
                    v317 = (_QWORD *)((char *)v317 + 1);
                    v320 = v321;
                    v323 = *(unsigned __int8 *)v318;
                    v318 = (_QWORD *)((char *)v318 + 1);
                    v322 = v323;
                    v100 = v319-- != 0;
                    v324 = v100;
                    v258 = v320 == v322;
                  }
                  while (v320 == v322 && (v324 & 1) != 0);
                  goto LABEL_527;
                }
                goto LABEL_526;
              case 3:
                v263 = v55[12];
                if (v263 > 9)
                  goto LABEL_1856;
                if (v263 == 3)
                {
                  v308 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                  v309 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                  v310 = v309 - v308;
                  v311 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                  if (v310 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v311) >> 3)
                  {
                    if (v309 == v308)
                    {
LABEL_526:
                      v258 = 1;
                      goto LABEL_527;
                    }
                    if (v310 <= 1)
                      v312 = 1;
                    else
                      v312 = v309 - v308;
                    v255.n128_u64[0] = *v308;
                    if (*(double *)v308 == *v311)
                    {
                      v313 = 1;
                      do
                      {
                        v314 = v313;
                        if (v312 == v313)
                          break;
                        v255.n128_u64[0] = v308[v313];
                        v315 = v311[v313++];
                      }
                      while (v255.n128_f64[0] == v315);
                      v258 = v314 >= v310;
                      goto LABEL_527;
                    }
                  }
LABEL_423:
                  v258 = 0;
                  goto LABEL_527;
                }
                v258 = 0;
LABEL_540:
                v335 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                do
                {
                  v336 = __ldaxr(v335);
                  v337 = v336 - 1;
                }
                while (__stlxr(v337, v335));
                if (v337)
                  goto LABEL_575;
                v338 = v1100.__r_.__value_.__r.__words[0];
                if (!v1100.__r_.__value_.__r.__words[0])
                  goto LABEL_569;
                v339 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                if (v339)
                {
                  *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v339;
                  operator delete(v339);
                }
                v329 = v338;
                v330 = 0x1080C409938AC02;
                goto LABEL_568;
              case 4:
                v257 = v55[12];
                if (v257 > 9)
                  goto LABEL_1856;
                if (v257 == 4)
                {
                  v268 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                  goto LABEL_495;
                }
                v258 = 0;
LABEL_535:
                v331 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                do
                {
                  v332 = __ldaxr(v331);
                  v333 = v332 - 1;
                }
                while (__stlxr(v333, v331));
                if (v333)
                  goto LABEL_575;
                v334 = v1100.__r_.__value_.__r.__words[0];
                if (!v1100.__r_.__value_.__r.__words[0])
                  goto LABEL_569;
                v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_552:
                v329 = v334;
                v330 = 0x1020C405E66F15BLL;
                goto LABEL_568;
              case 5:
                v266 = v55[12];
                if (v266 > 9)
                  goto LABEL_1856;
                if (v266 == 5)
                {
                  v268 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
                  goto LABEL_495;
                }
                v258 = 0;
LABEL_547:
                v340 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                do
                {
                  v341 = __ldaxr(v340);
                  v342 = v341 - 1;
                }
                while (__stlxr(v342, v340));
                if (v342)
                  goto LABEL_575;
                v334 = v1100.__r_.__value_.__r.__words[0];
                if (!v1100.__r_.__value_.__r.__words[0])
                  goto LABEL_569;
                v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                goto LABEL_552;
              case 6:
                switch(v55[12])
                {
                  case 0u:
                    v256 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                        && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                    goto LABEL_501;
                  case 1u:
                    v255.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_506:
                    v258 = v255.n128_f64[0] < 0.0000005;
                    goto LABEL_527;
                  case 2u:
                  case 3u:
                  case 4u:
                  case 5u:
                  case 7u:
                  case 8u:
                  case 9u:
                    goto LABEL_570;
                  case 6u:
                    v256 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                        && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                    goto LABEL_501;
                  default:
                    goto LABEL_1856;
                }
              case 7:
                v264 = v55[12];
                if (v264 < 7 || v264 - 8 < 2)
                  goto LABEL_570;
                if (v264 != 7)
                  goto LABEL_1856;
                goto LABEL_576;
              case 8:
                v267 = v55[12];
                if (v267 >= 8 && v267 != 9)
                {
                  if (v267 == 8)
                  {
                    v268 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_495:
                    v258 = v268;
                    goto LABEL_527;
                  }
                  goto LABEL_1856;
                }
                v258 = 0;
LABEL_553:
                v343 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                do
                {
                  v344 = __ldaxr(v343);
                  v345 = v344 - 1;
                }
                while (__stlxr(v345, v343));
                if (v345)
                {
LABEL_575:
                  if (v258)
                    goto LABEL_576;
                }
                else
                {
                  v346 = v1100.__r_.__value_.__r.__words[0];
                  if (v1100.__r_.__value_.__r.__words[0])
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
                    v329 = v346;
                    v347 = -235920773;
LABEL_567:
                    v330 = v347 | 0x1030C4000000000;
LABEL_568:
                    MEMORY[0x219A19A08](v329, v330, v255);
                  }
LABEL_569:
                  if (v258)
                  {
LABEL_576:
                    v356 = v1089.__r_.__value_.__r.__words[0];
                    v357 = 2;
LABEL_1805:
                    *(_DWORD *)(v356 + 4 * v53) = v357;
                    goto LABEL_1806;
                  }
                }
LABEL_570:
                v1100.__r_.__value_.__r.__words[0] = 0;
                LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                v1100.__r_.__value_.__s.__data_[12] = 0;
                std::string::basic_string[abi:ne180100]<0>(v1091, "hour");
                turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                if (SHIBYTE(v1091[0].__end_) < 0)
                  operator delete(v1091[0].__first_);
                switch(v1100.__r_.__value_.__s.__data_[12])
                {
                  case 0:
                    switch(v55[12])
                    {
                      case 0u:
                        v355 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                        goto LABEL_659;
                      case 1u:
                        v354.n128_u64[0] = *(_QWORD *)v55;
                        v366 = v1100.__r_.__value_.__r.__words[0];
                        goto LABEL_658;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_728;
                      case 6u:
                        v355 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                            && *((_DWORD *)v55 + 2) == 0;
                        goto LABEL_659;
                      default:
                        goto LABEL_1856;
                    }
                  case 1:
                    switch(v55[12])
                    {
                      case 0u:
                        v354.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                        v366 = *(_QWORD *)v55;
LABEL_658:
                        v355 = v354.n128_f64[0] == (double)v366;
                        goto LABEL_659;
                      case 1u:
                        v354.n128_u64[0] = *(_QWORD *)v55;
                        v359 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                        goto LABEL_685;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_728;
                      case 6u:
                        v354.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                        goto LABEL_664;
                      default:
                        goto LABEL_1856;
                    }
                  case 2:
                    v359 = 0;
                    v361 = v55[12];
                    if (v361 - 3 < 7 || v361 < 2)
                      goto LABEL_685;
                    if (v361 != 2)
                      goto LABEL_1856;
                    v362 = *(double *)v55;
                    if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                      v363 = *(_QWORD *)(*(_QWORD *)&v362 + 16);
                    else
                      v363 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                    if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                      v417 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                    else
                      v417 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                    if (v363 != v417)
                      goto LABEL_581;
                    v418 = (_QWORD *)(*(_QWORD *)&v362 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                      v418 = (_QWORD *)*v418;
                    v419 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                    if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                      v419 = (_QWORD *)*v419;
                    if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                    {
                      v355 = memcmp(v418, v419, v363) == 0;
LABEL_659:
                      v359 = v355;
                      goto LABEL_685;
                    }
                    if (v363)
                    {
                      v420 = v363 - 1;
                      do
                      {
                        v422 = *(unsigned __int8 *)v418;
                        v418 = (_QWORD *)((char *)v418 + 1);
                        v421 = v422;
                        v424 = *(unsigned __int8 *)v419;
                        v419 = (_QWORD *)((char *)v419 + 1);
                        v423 = v424;
                        v100 = v420-- != 0;
                        v425 = v100;
                        v359 = v421 == v423;
                      }
                      while (v421 == v423 && (v425 & 1) != 0);
                      goto LABEL_685;
                    }
                    goto LABEL_684;
                  case 3:
                    v364 = v55[12];
                    if (v364 > 9)
                      goto LABEL_1856;
                    if (v364 == 3)
                    {
                      v409 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                      v410 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                      v411 = v410 - v409;
                      v412 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                      if (v411 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v412) >> 3)
                      {
                        if (v410 == v409)
                        {
LABEL_684:
                          v359 = 1;
                          goto LABEL_685;
                        }
                        if (v411 <= 1)
                          v413 = 1;
                        else
                          v413 = v410 - v409;
                        v354.n128_u64[0] = *v409;
                        if (*(double *)v409 == *v412)
                        {
                          v414 = 1;
                          do
                          {
                            v415 = v414;
                            if (v413 == v414)
                              break;
                            v354.n128_u64[0] = v409[v414];
                            v416 = v412[v414++];
                          }
                          while (v354.n128_f64[0] == v416);
                          v359 = v415 >= v411;
                          goto LABEL_685;
                        }
                      }
LABEL_581:
                      v359 = 0;
                      goto LABEL_685;
                    }
                    v359 = 0;
LABEL_698:
                    v436 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                    do
                    {
                      v437 = __ldaxr(v436);
                      v438 = v437 - 1;
                    }
                    while (__stlxr(v438, v436));
                    if (v438)
                      goto LABEL_733;
                    v439 = v1100.__r_.__value_.__r.__words[0];
                    if (!v1100.__r_.__value_.__r.__words[0])
                      goto LABEL_727;
                    v440 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                    if (v440)
                    {
                      *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v440;
                      operator delete(v440);
                    }
                    v430 = v439;
                    v431 = 0x1080C409938AC02;
                    goto LABEL_726;
                  case 4:
                    v358 = v55[12];
                    if (v358 > 9)
                      goto LABEL_1856;
                    if (v358 == 4)
                    {
                      v369 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                      goto LABEL_653;
                    }
                    v359 = 0;
LABEL_693:
                    v432 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                    do
                    {
                      v433 = __ldaxr(v432);
                      v434 = v433 - 1;
                    }
                    while (__stlxr(v434, v432));
                    if (v434)
                      goto LABEL_733;
                    v435 = v1100.__r_.__value_.__r.__words[0];
                    if (!v1100.__r_.__value_.__r.__words[0])
                      goto LABEL_727;
                    v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                  + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_710:
                    v430 = v435;
                    v431 = 0x1020C405E66F15BLL;
                    goto LABEL_726;
                  case 5:
                    v367 = v55[12];
                    if (v367 > 9)
                      goto LABEL_1856;
                    if (v367 == 5)
                    {
                      v369 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
                      goto LABEL_653;
                    }
                    v359 = 0;
LABEL_705:
                    v441 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                    do
                    {
                      v442 = __ldaxr(v441);
                      v443 = v442 - 1;
                    }
                    while (__stlxr(v443, v441));
                    if (v443)
                      goto LABEL_733;
                    v435 = v1100.__r_.__value_.__r.__words[0];
                    if (!v1100.__r_.__value_.__r.__words[0])
                      goto LABEL_727;
                    v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                  + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                    goto LABEL_710;
                  case 6:
                    switch(v55[12])
                    {
                      case 0u:
                        v355 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                            && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                        goto LABEL_659;
                      case 1u:
                        v354.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_664:
                        v359 = v354.n128_f64[0] < 0.0000005;
                        goto LABEL_685;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_728;
                      case 6u:
                        v355 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                            && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                        goto LABEL_659;
                      default:
                        goto LABEL_1856;
                    }
                  case 7:
                    v365 = v55[12];
                    if (v365 < 7 || v365 - 8 < 2)
                      goto LABEL_728;
                    if (v365 != 7)
                      goto LABEL_1856;
                    goto LABEL_734;
                  case 8:
                    v368 = v55[12];
                    if (v368 >= 8 && v368 != 9)
                    {
                      if (v368 == 8)
                      {
                        v369 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_653:
                        v359 = v369;
                        goto LABEL_685;
                      }
                      goto LABEL_1856;
                    }
                    v359 = 0;
LABEL_711:
                    v444 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                    do
                    {
                      v445 = __ldaxr(v444);
                      v446 = v445 - 1;
                    }
                    while (__stlxr(v446, v444));
                    if (v446)
                    {
LABEL_733:
                      if (v359)
                        goto LABEL_734;
                    }
                    else
                    {
                      v447 = v1100.__r_.__value_.__r.__words[0];
                      if (v1100.__r_.__value_.__r.__words[0])
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0]
                                                                                   + 16));
                        v430 = v447;
                        v448 = -235920773;
LABEL_725:
                        v431 = v448 | 0x1030C4000000000;
LABEL_726:
                        MEMORY[0x219A19A08](v430, v431, v354);
                      }
LABEL_727:
                      if (v359)
                      {
LABEL_734:
                        v356 = v1089.__r_.__value_.__r.__words[0];
                        v357 = 3;
                        goto LABEL_1805;
                      }
                    }
LABEL_728:
                    v1100.__r_.__value_.__r.__words[0] = 0;
                    LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                    v1100.__r_.__value_.__s.__data_[12] = 0;
                    std::string::basic_string[abi:ne180100]<0>(v1091, "minute");
                    turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                    if (SHIBYTE(v1091[0].__end_) < 0)
                      operator delete(v1091[0].__first_);
                    switch(v1100.__r_.__value_.__s.__data_[12])
                    {
                      case 0:
                        switch(v55[12])
                        {
                          case 0u:
                            v456 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                            goto LABEL_817;
                          case 1u:
                            v455.n128_u64[0] = *(_QWORD *)v55;
                            v465 = v1100.__r_.__value_.__r.__words[0];
                            goto LABEL_816;
                          case 2u:
                          case 3u:
                          case 4u:
                          case 5u:
                          case 7u:
                          case 8u:
                          case 9u:
                            goto LABEL_886;
                          case 6u:
                            v456 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                && *((_DWORD *)v55 + 2) == 0;
                            goto LABEL_817;
                          default:
                            goto LABEL_1856;
                        }
                      case 1:
                        switch(v55[12])
                        {
                          case 0u:
                            v455.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                            v465 = *(_QWORD *)v55;
LABEL_816:
                            v456 = v455.n128_f64[0] == (double)v465;
                            goto LABEL_817;
                          case 1u:
                            v455.n128_u64[0] = *(_QWORD *)v55;
                            v458 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                            goto LABEL_843;
                          case 2u:
                          case 3u:
                          case 4u:
                          case 5u:
                          case 7u:
                          case 8u:
                          case 9u:
                            goto LABEL_886;
                          case 6u:
                            v455.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                            goto LABEL_822;
                          default:
                            goto LABEL_1856;
                        }
                      case 2:
                        v458 = 0;
                        v460 = v55[12];
                        if (v460 - 3 < 7 || v460 < 2)
                          goto LABEL_843;
                        if (v460 != 2)
                          goto LABEL_1856;
                        v461 = *(double *)v55;
                        if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                          v462 = *(_QWORD *)(*(_QWORD *)&v461 + 16);
                        else
                          v462 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                        if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                          v516 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                        else
                          v516 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                        if (v462 != v516)
                          goto LABEL_739;
                        v517 = (_QWORD *)(*(_QWORD *)&v461 + 8);
                        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                          v517 = (_QWORD *)*v517;
                        v518 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                        if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                          v518 = (_QWORD *)*v518;
                        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                        {
                          v456 = memcmp(v517, v518, v462) == 0;
LABEL_817:
                          v458 = v456;
                          goto LABEL_843;
                        }
                        if (v462)
                        {
                          v519 = v462 - 1;
                          do
                          {
                            v521 = *(unsigned __int8 *)v517;
                            v517 = (_QWORD *)((char *)v517 + 1);
                            v520 = v521;
                            v523 = *(unsigned __int8 *)v518;
                            v518 = (_QWORD *)((char *)v518 + 1);
                            v522 = v523;
                            v100 = v519-- != 0;
                            v524 = v100;
                            v458 = v520 == v522;
                          }
                          while (v520 == v522 && (v524 & 1) != 0);
                          goto LABEL_843;
                        }
                        goto LABEL_842;
                      case 3:
                        v463 = v55[12];
                        if (v463 > 9)
                          goto LABEL_1856;
                        if (v463 == 3)
                        {
                          v508 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                          v509 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                          v510 = v509 - v508;
                          v511 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                          if (v510 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v511) >> 3)
                          {
                            if (v509 == v508)
                            {
LABEL_842:
                              v458 = 1;
                              goto LABEL_843;
                            }
                            if (v510 <= 1)
                              v512 = 1;
                            else
                              v512 = v509 - v508;
                            v455.n128_u64[0] = *v508;
                            if (*(double *)v508 == *v511)
                            {
                              v513 = 1;
                              do
                              {
                                v514 = v513;
                                if (v512 == v513)
                                  break;
                                v455.n128_u64[0] = v508[v513];
                                v515 = v511[v513++];
                              }
                              while (v455.n128_f64[0] == v515);
                              v458 = v514 >= v510;
                              goto LABEL_843;
                            }
                          }
LABEL_739:
                          v458 = 0;
                          goto LABEL_843;
                        }
                        v458 = 0;
LABEL_856:
                        v535 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                        do
                        {
                          v536 = __ldaxr(v535);
                          v537 = v536 - 1;
                        }
                        while (__stlxr(v537, v535));
                        if (v537)
                          goto LABEL_891;
                        v538 = v1100.__r_.__value_.__r.__words[0];
                        if (!v1100.__r_.__value_.__r.__words[0])
                          goto LABEL_885;
                        v539 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                        if (v539)
                        {
                          *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v539;
                          operator delete(v539);
                        }
                        v529 = v538;
                        v530 = 0x1080C409938AC02;
                        goto LABEL_884;
                      case 4:
                        v457 = v55[12];
                        if (v457 > 9)
                          goto LABEL_1856;
                        if (v457 == 4)
                        {
                          v468 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                          goto LABEL_811;
                        }
                        v458 = 0;
LABEL_851:
                        v531 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                        do
                        {
                          v532 = __ldaxr(v531);
                          v533 = v532 - 1;
                        }
                        while (__stlxr(v533, v531));
                        if (v533)
                          goto LABEL_891;
                        v534 = v1100.__r_.__value_.__r.__words[0];
                        if (!v1100.__r_.__value_.__r.__words[0])
                          goto LABEL_885;
                        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                      + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_868:
                        v529 = v534;
                        v530 = 0x1020C405E66F15BLL;
                        goto LABEL_884;
                      case 5:
                        v466 = v55[12];
                        if (v466 > 9)
                          goto LABEL_1856;
                        if (v466 == 5)
                        {
                          v468 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
                          goto LABEL_811;
                        }
                        v458 = 0;
LABEL_863:
                        v540 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                        do
                        {
                          v541 = __ldaxr(v540);
                          v542 = v541 - 1;
                        }
                        while (__stlxr(v542, v540));
                        if (v542)
                          goto LABEL_891;
                        v534 = v1100.__r_.__value_.__r.__words[0];
                        if (!v1100.__r_.__value_.__r.__words[0])
                          goto LABEL_885;
                        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                      + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                        goto LABEL_868;
                      case 6:
                        switch(v55[12])
                        {
                          case 0u:
                            v456 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                            goto LABEL_817;
                          case 1u:
                            v455.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_822:
                            v458 = v455.n128_f64[0] < 0.0000005;
                            goto LABEL_843;
                          case 2u:
                          case 3u:
                          case 4u:
                          case 5u:
                          case 7u:
                          case 8u:
                          case 9u:
                            goto LABEL_886;
                          case 6u:
                            v456 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                            goto LABEL_817;
                          default:
                            goto LABEL_1856;
                        }
                      case 7:
                        v464 = v55[12];
                        if (v464 < 7 || v464 - 8 < 2)
                          goto LABEL_886;
                        if (v464 != 7)
                          goto LABEL_1856;
                        goto LABEL_892;
                      case 8:
                        v467 = v55[12];
                        if (v467 >= 8 && v467 != 9)
                        {
                          if (v467 == 8)
                          {
                            v468 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_811:
                            v458 = v468;
                            goto LABEL_843;
                          }
                          goto LABEL_1856;
                        }
                        v458 = 0;
LABEL_869:
                        v543 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                        do
                        {
                          v544 = __ldaxr(v543);
                          v545 = v544 - 1;
                        }
                        while (__stlxr(v545, v543));
                        if (v545)
                        {
LABEL_891:
                          if (v458)
                            goto LABEL_892;
                        }
                        else
                        {
                          v546 = v1100.__r_.__value_.__r.__words[0];
                          if (v1100.__r_.__value_.__r.__words[0])
                          {
                            boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0]
                                                                                       + 16));
                            v529 = v546;
                            v547 = -235920773;
LABEL_883:
                            v530 = v547 | 0x1030C4000000000;
LABEL_884:
                            MEMORY[0x219A19A08](v529, v530, v455);
                          }
LABEL_885:
                          if (v458)
                          {
LABEL_892:
                            v356 = v1089.__r_.__value_.__r.__words[0];
                            v357 = 4;
                            goto LABEL_1805;
                          }
                        }
LABEL_886:
                        v1100.__r_.__value_.__r.__words[0] = 0;
                        LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                        v1100.__r_.__value_.__s.__data_[12] = 0;
                        std::string::basic_string[abi:ne180100]<0>(v1091, "second");
                        turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                        if (SHIBYTE(v1091[0].__end_) < 0)
                          operator delete(v1091[0].__first_);
                        switch(v1100.__r_.__value_.__s.__data_[12])
                        {
                          case 0:
                            switch(v55[12])
                            {
                              case 0u:
                                v555 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                                goto LABEL_976;
                              case 1u:
                                v554.n128_u64[0] = *(_QWORD *)v55;
                                v564 = v1100.__r_.__value_.__r.__words[0];
                                goto LABEL_975;
                              case 2u:
                              case 3u:
                              case 4u:
                              case 5u:
                              case 7u:
                              case 8u:
                              case 9u:
                                goto LABEL_1048;
                              case 6u:
                                v555 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                    && *((_DWORD *)v55 + 2) == 0;
                                goto LABEL_976;
                              default:
                                goto LABEL_1856;
                            }
                          case 1:
                            switch(v55[12])
                            {
                              case 0u:
                                v554.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                                v564 = *(_QWORD *)v55;
LABEL_975:
                                v555 = v554.n128_f64[0] == (double)v564;
                                goto LABEL_976;
                              case 1u:
                                v554.n128_u64[0] = *(_QWORD *)v55;
                                v557 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                                goto LABEL_1005;
                              case 2u:
                              case 3u:
                              case 4u:
                              case 5u:
                              case 7u:
                              case 8u:
                              case 9u:
                                goto LABEL_1048;
                              case 6u:
                                v554.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                                goto LABEL_981;
                              default:
                                goto LABEL_1856;
                            }
                          case 2:
                            v557 = 0;
                            v559 = v55[12];
                            if (v559 - 3 < 7 || v559 < 2)
                              goto LABEL_1005;
                            if (v559 != 2)
                              goto LABEL_1856;
                            v560 = *(double *)v55;
                            if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                              v561 = *(_QWORD *)(*(_QWORD *)&v560 + 16);
                            else
                              v561 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                            if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                              v615 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                            else
                              v615 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                            if (v561 != v615)
                              goto LABEL_897;
                            v616 = (_QWORD *)(*(_QWORD *)&v560 + 8);
                            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                              v616 = (_QWORD *)*v616;
                            v617 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                            if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                              v617 = (_QWORD *)*v617;
                            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                            {
                              v555 = memcmp(v616, v617, v561) == 0;
LABEL_976:
                              v557 = v555;
                              goto LABEL_1005;
                            }
                            if (v561)
                            {
                              v618 = v561 - 1;
                              do
                              {
                                v620 = *(unsigned __int8 *)v616;
                                v616 = (_QWORD *)((char *)v616 + 1);
                                v619 = v620;
                                v622 = *(unsigned __int8 *)v617;
                                v617 = (_QWORD *)((char *)v617 + 1);
                                v621 = v622;
                                v100 = v618-- != 0;
                                v623 = v100;
                                v557 = v619 == v621;
                              }
                              while (v619 == v621 && (v623 & 1) != 0);
                              goto LABEL_1005;
                            }
                            goto LABEL_1004;
                          case 3:
                            v562 = v55[12];
                            if (v562 > 9)
                              goto LABEL_1856;
                            if (v562 == 3)
                            {
                              v607 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                              v608 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                              v609 = v608 - v607;
                              v610 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                              if (v609 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v610) >> 3)
                              {
                                if (v608 == v607)
                                {
LABEL_1004:
                                  v557 = 1;
                                  goto LABEL_1005;
                                }
                                if (v609 <= 1)
                                  v611 = 1;
                                else
                                  v611 = v608 - v607;
                                v554.n128_u64[0] = *v607;
                                if (*(double *)v607 == *v610)
                                {
                                  v612 = 1;
                                  do
                                  {
                                    v613 = v612;
                                    if (v611 == v612)
                                      break;
                                    v554.n128_u64[0] = v607[v612];
                                    v614 = v610[v612++];
                                  }
                                  while (v554.n128_f64[0] == v614);
                                  v557 = v613 >= v609;
                                  goto LABEL_1005;
                                }
                              }
LABEL_897:
                              v557 = 0;
                              goto LABEL_1005;
                            }
                            v557 = 0;
LABEL_1018:
                            v634 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                            do
                            {
                              v635 = __ldaxr(v634);
                              v636 = v635 - 1;
                            }
                            while (__stlxr(v636, v634));
                            if (v636)
                              goto LABEL_1053;
                            v637 = v1100.__r_.__value_.__r.__words[0];
                            if (!v1100.__r_.__value_.__r.__words[0])
                              goto LABEL_1047;
                            v638 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                            if (v638)
                            {
                              *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v638;
                              operator delete(v638);
                            }
                            v628 = v637;
                            v629 = 0x1080C409938AC02;
                            goto LABEL_1046;
                          case 4:
                            v556 = v55[12];
                            if (v556 > 9)
                              goto LABEL_1856;
                            if (v556 == 4)
                            {
                              v567 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                              goto LABEL_970;
                            }
                            v557 = 0;
LABEL_1013:
                            v630 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                            do
                            {
                              v631 = __ldaxr(v630);
                              v632 = v631 - 1;
                            }
                            while (__stlxr(v632, v630));
                            if (v632)
                              goto LABEL_1053;
                            v633 = v1100.__r_.__value_.__r.__words[0];
                            if (!v1100.__r_.__value_.__r.__words[0])
                              goto LABEL_1047;
                            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                          + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1030:
                            v628 = v633;
                            v629 = 0x1020C405E66F15BLL;
                            goto LABEL_1046;
                          case 5:
                            v565 = v55[12];
                            if (v565 > 9)
                              goto LABEL_1856;
                            if (v565 == 5)
                            {
                              v567 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
                              goto LABEL_970;
                            }
                            v557 = 0;
LABEL_1025:
                            v639 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                            do
                            {
                              v640 = __ldaxr(v639);
                              v641 = v640 - 1;
                            }
                            while (__stlxr(v641, v639));
                            if (v641)
                              goto LABEL_1053;
                            v633 = v1100.__r_.__value_.__r.__words[0];
                            if (!v1100.__r_.__value_.__r.__words[0])
                              goto LABEL_1047;
                            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                          + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                            goto LABEL_1030;
                          case 6:
                            switch(v55[12])
                            {
                              case 0u:
                                v555 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                    && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                                goto LABEL_976;
                              case 1u:
                                v554.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_981:
                                v557 = v554.n128_f64[0] < 0.0000005;
                                goto LABEL_1005;
                              case 2u:
                              case 3u:
                              case 4u:
                              case 5u:
                              case 7u:
                              case 8u:
                              case 9u:
                                goto LABEL_1048;
                              case 6u:
                                v555 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                    && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                                goto LABEL_976;
                              default:
                                goto LABEL_1856;
                            }
                          case 7:
                            v563 = v55[12];
                            if (v563 < 7 || v563 - 8 < 2)
                              goto LABEL_1048;
                            if (v563 != 7)
                              goto LABEL_1856;
                            goto LABEL_1054;
                          case 8:
                            v566 = v55[12];
                            if (v566 >= 8 && v566 != 9)
                            {
                              if (v566 == 8)
                              {
                                v567 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
LABEL_970:
                                v557 = v567;
                                goto LABEL_1005;
                              }
                              goto LABEL_1856;
                            }
                            v557 = 0;
LABEL_1031:
                            v642 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                            do
                            {
                              v643 = __ldaxr(v642);
                              v644 = v643 - 1;
                            }
                            while (__stlxr(v644, v642));
                            if (v644)
                            {
LABEL_1053:
                              if (v557)
                                goto LABEL_1054;
                            }
                            else
                            {
                              v645 = v1100.__r_.__value_.__r.__words[0];
                              if (v1100.__r_.__value_.__r.__words[0])
                              {
                                boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0]
                                                                                           + 16));
                                v628 = v645;
                                v646 = -235920773;
LABEL_1045:
                                v629 = v646 | 0x1030C4000000000;
LABEL_1046:
                                MEMORY[0x219A19A08](v628, v629, v554);
                              }
LABEL_1047:
                              if (v557)
                              {
LABEL_1054:
                                v356 = v1089.__r_.__value_.__r.__words[0];
                                v357 = 5;
                                goto LABEL_1805;
                              }
                            }
LABEL_1048:
                            v1100.__r_.__value_.__r.__words[0] = 0;
                            LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                            v1100.__r_.__value_.__s.__data_[12] = 0;
                            std::string::basic_string[abi:ne180100]<0>(v1091, "weekday");
                            turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                            if (SHIBYTE(v1091[0].__end_) < 0)
                              operator delete(v1091[0].__first_);
                            switch(v1100.__r_.__value_.__s.__data_[12])
                            {
                              case 0:
                                switch(v55[12])
                                {
                                  case 0u:
                                    v654 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                                    goto LABEL_1131;
                                  case 1u:
                                    v653.n128_u64[0] = *(_QWORD *)v55;
                                    v663 = v1100.__r_.__value_.__r.__words[0];
                                    goto LABEL_1130;
                                  case 2u:
                                  case 3u:
                                  case 4u:
                                  case 5u:
                                  case 7u:
                                  case 8u:
                                  case 9u:
                                    goto LABEL_1199;
                                  case 6u:
                                    v654 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                        && *((_DWORD *)v55 + 2) == 0;
                                    goto LABEL_1131;
                                  default:
                                    goto LABEL_1856;
                                }
                              case 1:
                                switch(v55[12])
                                {
                                  case 0u:
                                    v653.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                                    v663 = *(_QWORD *)v55;
LABEL_1130:
                                    v654 = v653.n128_f64[0] == (double)v663;
                                    goto LABEL_1131;
                                  case 1u:
                                    v653.n128_u64[0] = *(_QWORD *)v55;
                                    v656 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                                    goto LABEL_1160;
                                  case 2u:
                                  case 3u:
                                  case 4u:
                                  case 5u:
                                  case 7u:
                                  case 8u:
                                  case 9u:
                                    goto LABEL_1199;
                                  case 6u:
                                    v653.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                                    goto LABEL_1136;
                                  default:
                                    goto LABEL_1856;
                                }
                              case 2:
                                v656 = 0;
                                v658 = v55[12];
                                if (v658 - 3 < 7 || v658 < 2)
                                  goto LABEL_1160;
                                if (v658 != 2)
                                  goto LABEL_1856;
                                v659 = *(double *)v55;
                                if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                                  v660 = *(_QWORD *)(*(_QWORD *)&v659 + 16);
                                else
                                  v660 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                                if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                  v698 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                                else
                                  v698 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                                if (v660 != v698)
                                  goto LABEL_1059;
                                v699 = (_QWORD *)(*(_QWORD *)&v659 + 8);
                                if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                  v699 = (_QWORD *)*v699;
                                v700 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                                if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                                  v700 = (_QWORD *)*v700;
                                if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                {
                                  v654 = memcmp(v699, v700, v660) == 0;
LABEL_1131:
                                  v656 = v654;
                                  goto LABEL_1160;
                                }
                                if (v660)
                                {
                                  v701 = v660 - 1;
                                  do
                                  {
                                    v703 = *(unsigned __int8 *)v699;
                                    v699 = (_QWORD *)((char *)v699 + 1);
                                    v702 = v703;
                                    v705 = *(unsigned __int8 *)v700;
                                    v700 = (_QWORD *)((char *)v700 + 1);
                                    v704 = v705;
                                    v100 = v701-- != 0;
                                    v706 = v100;
                                    v656 = v702 == v704;
                                  }
                                  while (v702 == v704 && (v706 & 1) != 0);
                                  goto LABEL_1160;
                                }
                                goto LABEL_1159;
                              case 3:
                                v661 = v55[12];
                                if (v661 > 9)
                                  goto LABEL_1856;
                                if (v661 == 3)
                                {
                                  v690 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                                  v691 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                                  v692 = v691 - v690;
                                  v693 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                  if (v692 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16)
                                                       - (_QWORD)v693) >> 3)
                                  {
                                    if (v691 == v690)
                                    {
LABEL_1159:
                                      v656 = 1;
                                      goto LABEL_1160;
                                    }
                                    if (v692 <= 1)
                                      v694 = 1;
                                    else
                                      v694 = v691 - v690;
                                    v653.n128_u64[0] = *v690;
                                    if (*(double *)v690 == *v693)
                                    {
                                      v695 = 1;
                                      do
                                      {
                                        v696 = v695;
                                        if (v694 == v695)
                                          break;
                                        v653.n128_u64[0] = v690[v695];
                                        v697 = v693[v695++];
                                      }
                                      while (v653.n128_f64[0] == v697);
                                      v656 = v696 >= v692;
                                      goto LABEL_1160;
                                    }
                                  }
LABEL_1059:
                                  v656 = 0;
                                  goto LABEL_1160;
                                }
                                v656 = 0;
LABEL_1173:
                                v717 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                do
                                {
                                  v718 = __ldaxr(v717);
                                  v719 = v718 - 1;
                                }
                                while (__stlxr(v719, v717));
                                if (v719)
                                  goto LABEL_1204;
                                v720 = v1100.__r_.__value_.__r.__words[0];
                                if (!v1100.__r_.__value_.__r.__words[0])
                                  goto LABEL_1198;
                                v721 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                if (v721)
                                {
                                  *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v721;
                                  operator delete(v721);
                                }
                                v711 = (_QWORD *)v720;
                                v712 = 0x1080C409938AC02;
                                goto LABEL_1197;
                              case 4:
                                v655 = v55[12];
                                if (v655 > 9)
                                  goto LABEL_1856;
                                if (v655 == 4)
                                {
                                  v666 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                                  goto LABEL_1125;
                                }
                                v656 = 0;
LABEL_1168:
                                v713 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                do
                                {
                                  v714 = __ldaxr(v713);
                                  v715 = v714 - 1;
                                }
                                while (__stlxr(v715, v713));
                                if (v715)
                                  goto LABEL_1204;
                                v716 = v1100.__r_.__value_.__r.__words[0];
                                if (!v1100.__r_.__value_.__r.__words[0])
                                  goto LABEL_1198;
                                v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                              + 8);
                                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                                goto LABEL_1185;
                              case 5:
                                v664 = v55[12];
                                if (v664 > 9)
                                  goto LABEL_1856;
                                if (v664 == 5)
                                {
                                  v666 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
LABEL_1125:
                                  v656 = v666;
LABEL_1160:
                                  switch(v1100.__r_.__value_.__s.__data_[12])
                                  {
                                    case 2:
                                      v707 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                      do
                                      {
                                        v708 = __ldaxr(v707);
                                        v709 = v708 - 1;
                                      }
                                      while (__stlxr(v709, v707));
                                      if (v709)
                                        goto LABEL_1204;
                                      v710 = v1100.__r_.__value_.__r.__words[0];
                                      if (!v1100.__r_.__value_.__r.__words[0])
                                        goto LABEL_1198;
                                      if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                        operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                      v711 = (_QWORD *)v710;
                                      v712 = 0x1012C404EF22A49;
                                      goto LABEL_1197;
                                    case 3:
                                      goto LABEL_1173;
                                    case 4:
                                      goto LABEL_1168;
                                    case 5:
                                      goto LABEL_1180;
                                    case 8:
                                      goto LABEL_1186;
                                    case 9:
                                      v730 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                      do
                                      {
                                        v731 = __ldaxr(v730);
                                        v732 = v731 - 1;
                                      }
                                      while (__stlxr(v732, v730));
                                      if (v732)
                                        goto LABEL_1204;
                                      if (!v1100.__r_.__value_.__r.__words[0])
                                        goto LABEL_1198;
                                      v711 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1100.__r_.__value_.__l.__data_);
                                      v729 = 2071181815;
                                      goto LABEL_1196;
                                    default:
                                      goto LABEL_1204;
                                  }
                                }
                                v656 = 0;
LABEL_1180:
                                v722 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                do
                                {
                                  v723 = __ldaxr(v722);
                                  v724 = v723 - 1;
                                }
                                while (__stlxr(v724, v722));
                                if (v724)
                                  goto LABEL_1204;
                                v716 = v1100.__r_.__value_.__r.__words[0];
                                if (!v1100.__r_.__value_.__r.__words[0])
                                  goto LABEL_1198;
                                v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                              + 8);
                                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1185:
                                v711 = (_QWORD *)v716;
                                v712 = 0x1020C405E66F15BLL;
                                goto LABEL_1197;
                              case 6:
                                switch(v55[12])
                                {
                                  case 0u:
                                    v654 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                        && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                                    goto LABEL_1131;
                                  case 1u:
                                    v653.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1])/ 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_1136:
                                    v656 = v653.n128_f64[0] < 0.0000005;
                                    goto LABEL_1160;
                                  case 2u:
                                  case 3u:
                                  case 4u:
                                  case 5u:
                                  case 7u:
                                  case 8u:
                                  case 9u:
                                    goto LABEL_1199;
                                  case 6u:
                                    v654 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                        && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                                    goto LABEL_1131;
                                  default:
                                    goto LABEL_1856;
                                }
                              case 7:
                                v662 = v55[12];
                                if (v662 < 7 || v662 - 8 < 2)
                                  goto LABEL_1199;
                                if (v662 != 7)
                                  goto LABEL_1856;
                                goto LABEL_1205;
                              case 8:
                                v665 = v55[12];
                                if (v665 >= 8 && v665 != 9)
                                {
                                  if (v665 == 8)
                                  {
                                    v666 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
                                    goto LABEL_1125;
                                  }
                                  goto LABEL_1856;
                                }
                                v656 = 0;
LABEL_1186:
                                v725 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                do
                                {
                                  v726 = __ldaxr(v725);
                                  v727 = v726 - 1;
                                }
                                while (__stlxr(v727, v725));
                                if (v727)
                                {
LABEL_1204:
                                  if (v656)
                                    goto LABEL_1205;
                                }
                                else
                                {
                                  v728 = v1100.__r_.__value_.__r.__words[0];
                                  if (v1100.__r_.__value_.__r.__words[0])
                                  {
                                    boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0]
                                                                                               + 16));
                                    v711 = (_QWORD *)v728;
                                    v729 = -235920773;
LABEL_1196:
                                    v712 = v729 | 0x1030C4000000000;
LABEL_1197:
                                    MEMORY[0x219A19A08](v711, v712, v653);
                                  }
LABEL_1198:
                                  if (v656)
                                  {
LABEL_1205:
                                    v356 = v1089.__r_.__value_.__r.__words[0];
                                    v357 = 6;
                                    goto LABEL_1805;
                                  }
                                }
LABEL_1199:
                                v1100.__r_.__value_.__r.__words[0] = 0;
                                LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                                v1100.__r_.__value_.__s.__data_[12] = 0;
                                std::string::basic_string[abi:ne180100]<0>(v1091, "isoweekday");
                                turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                                if (SHIBYTE(v1091[0].__end_) < 0)
                                  operator delete(v1091[0].__first_);
                                switch(v1100.__r_.__value_.__s.__data_[12])
                                {
                                  case 0:
                                    switch(v55[12])
                                    {
                                      case 0u:
                                        v734 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                                        goto LABEL_1282;
                                      case 1u:
                                        v733.n128_u64[0] = *(_QWORD *)v55;
                                        v743 = v1100.__r_.__value_.__r.__words[0];
                                        goto LABEL_1281;
                                      case 2u:
                                      case 3u:
                                      case 4u:
                                      case 5u:
                                      case 7u:
                                      case 8u:
                                      case 9u:
                                        goto LABEL_1350;
                                      case 6u:
                                        v734 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                            && *((_DWORD *)v55 + 2) == 0;
                                        goto LABEL_1282;
                                      default:
                                        goto LABEL_1856;
                                    }
                                  case 1:
                                    switch(v55[12])
                                    {
                                      case 0u:
                                        v733.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                                        v743 = *(_QWORD *)v55;
LABEL_1281:
                                        v734 = v733.n128_f64[0] == (double)v743;
                                        goto LABEL_1282;
                                      case 1u:
                                        v733.n128_u64[0] = *(_QWORD *)v55;
                                        v736 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                                        goto LABEL_1311;
                                      case 2u:
                                      case 3u:
                                      case 4u:
                                      case 5u:
                                      case 7u:
                                      case 8u:
                                      case 9u:
                                        goto LABEL_1350;
                                      case 6u:
                                        v733.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                                        goto LABEL_1287;
                                      default:
                                        goto LABEL_1856;
                                    }
                                  case 2:
                                    v736 = 0;
                                    v738 = v55[12];
                                    if (v738 - 3 < 7 || v738 < 2)
                                      goto LABEL_1311;
                                    if (v738 != 2)
                                      goto LABEL_1856;
                                    v739 = *(double *)v55;
                                    if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                                      v740 = *(_QWORD *)(*(_QWORD *)&v739 + 16);
                                    else
                                      v740 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                                    if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                      v778 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                                    else
                                      v778 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                                    if (v740 != v778)
                                      goto LABEL_1210;
                                    v779 = (_QWORD *)(*(_QWORD *)&v739 + 8);
                                    if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                      v779 = (_QWORD *)*v779;
                                    v780 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                                    if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                                      v780 = (_QWORD *)*v780;
                                    if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                    {
                                      v734 = memcmp(v779, v780, v740) == 0;
LABEL_1282:
                                      v736 = v734;
                                      goto LABEL_1311;
                                    }
                                    if (v740)
                                    {
                                      v781 = v740 - 1;
                                      do
                                      {
                                        v783 = *(unsigned __int8 *)v779;
                                        v779 = (_QWORD *)((char *)v779 + 1);
                                        v782 = v783;
                                        v785 = *(unsigned __int8 *)v780;
                                        v780 = (_QWORD *)((char *)v780 + 1);
                                        v784 = v785;
                                        v100 = v781-- != 0;
                                        v786 = v100;
                                        v736 = v782 == v784;
                                      }
                                      while (v782 == v784 && (v786 & 1) != 0);
                                      goto LABEL_1311;
                                    }
                                    goto LABEL_1310;
                                  case 3:
                                    v741 = v55[12];
                                    if (v741 > 9)
                                      goto LABEL_1856;
                                    if (v741 == 3)
                                    {
                                      v770 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                                      v771 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                                      v772 = v771 - v770;
                                      v773 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                      if (v772 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16)
                                                           - (_QWORD)v773) >> 3)
                                      {
                                        if (v771 == v770)
                                        {
LABEL_1310:
                                          v736 = 1;
                                          goto LABEL_1311;
                                        }
                                        if (v772 <= 1)
                                          v774 = 1;
                                        else
                                          v774 = v771 - v770;
                                        v733.n128_u64[0] = *v770;
                                        if (*(double *)v770 == *v773)
                                        {
                                          v775 = 1;
                                          do
                                          {
                                            v776 = v775;
                                            if (v774 == v775)
                                              break;
                                            v733.n128_u64[0] = v770[v775];
                                            v777 = v773[v775++];
                                          }
                                          while (v733.n128_f64[0] == v777);
                                          v736 = v776 >= v772;
                                          goto LABEL_1311;
                                        }
                                      }
LABEL_1210:
                                      v736 = 0;
                                      goto LABEL_1311;
                                    }
                                    v736 = 0;
LABEL_1324:
                                    v797 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                    do
                                    {
                                      v798 = __ldaxr(v797);
                                      v799 = v798 - 1;
                                    }
                                    while (__stlxr(v799, v797));
                                    if (v799)
                                      goto LABEL_1355;
                                    v800 = v1100.__r_.__value_.__r.__words[0];
                                    if (!v1100.__r_.__value_.__r.__words[0])
                                      goto LABEL_1349;
                                    v801 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                    if (v801)
                                    {
                                      *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v801;
                                      operator delete(v801);
                                    }
                                    v791 = (_QWORD *)v800;
                                    v792 = 0x1080C409938AC02;
                                    goto LABEL_1348;
                                  case 4:
                                    v735 = v55[12];
                                    if (v735 > 9)
                                      goto LABEL_1856;
                                    if (v735 == 4)
                                    {
                                      v746 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                                      goto LABEL_1276;
                                    }
                                    v736 = 0;
LABEL_1319:
                                    v793 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                    do
                                    {
                                      v794 = __ldaxr(v793);
                                      v795 = v794 - 1;
                                    }
                                    while (__stlxr(v795, v793));
                                    if (v795)
                                      goto LABEL_1355;
                                    v796 = v1100.__r_.__value_.__r.__words[0];
                                    if (!v1100.__r_.__value_.__r.__words[0])
                                      goto LABEL_1349;
                                    v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                                  + 8);
                                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                                    goto LABEL_1336;
                                  case 5:
                                    v744 = v55[12];
                                    if (v744 > 9)
                                      goto LABEL_1856;
                                    if (v744 == 5)
                                    {
                                      v746 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
LABEL_1276:
                                      v736 = v746;
LABEL_1311:
                                      switch(v1100.__r_.__value_.__s.__data_[12])
                                      {
                                        case 2:
                                          v787 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                          do
                                          {
                                            v788 = __ldaxr(v787);
                                            v789 = v788 - 1;
                                          }
                                          while (__stlxr(v789, v787));
                                          if (v789)
                                            goto LABEL_1355;
                                          v790 = v1100.__r_.__value_.__r.__words[0];
                                          if (!v1100.__r_.__value_.__r.__words[0])
                                            goto LABEL_1349;
                                          if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                            operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                          v791 = (_QWORD *)v790;
                                          v792 = 0x1012C404EF22A49;
                                          goto LABEL_1348;
                                        case 3:
                                          goto LABEL_1324;
                                        case 4:
                                          goto LABEL_1319;
                                        case 5:
                                          goto LABEL_1331;
                                        case 8:
                                          goto LABEL_1337;
                                        case 9:
                                          v810 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                          do
                                          {
                                            v811 = __ldaxr(v810);
                                            v812 = v811 - 1;
                                          }
                                          while (__stlxr(v812, v810));
                                          if (v812)
                                            goto LABEL_1355;
                                          if (!v1100.__r_.__value_.__r.__words[0])
                                            goto LABEL_1349;
                                          v791 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1100.__r_.__value_.__l.__data_);
                                          v809 = 2071181815;
                                          goto LABEL_1347;
                                        default:
                                          goto LABEL_1355;
                                      }
                                    }
                                    v736 = 0;
LABEL_1331:
                                    v802 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                    do
                                    {
                                      v803 = __ldaxr(v802);
                                      v804 = v803 - 1;
                                    }
                                    while (__stlxr(v804, v802));
                                    if (v804)
                                      goto LABEL_1355;
                                    v796 = v1100.__r_.__value_.__r.__words[0];
                                    if (!v1100.__r_.__value_.__r.__words[0])
                                      goto LABEL_1349;
                                    v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0]
                                                                                                  + 8);
                                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1336:
                                    v791 = (_QWORD *)v796;
                                    v792 = 0x1020C405E66F15BLL;
                                    goto LABEL_1348;
                                  case 6:
                                    switch(v55[12])
                                    {
                                      case 0u:
                                        v734 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                            && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                                        goto LABEL_1282;
                                      case 1u:
                                        v733.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1])/ 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_1287:
                                        v736 = v733.n128_f64[0] < 0.0000005;
                                        goto LABEL_1311;
                                      case 2u:
                                      case 3u:
                                      case 4u:
                                      case 5u:
                                      case 7u:
                                      case 8u:
                                      case 9u:
                                        goto LABEL_1350;
                                      case 6u:
                                        v734 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                            && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                                        goto LABEL_1282;
                                      default:
                                        goto LABEL_1856;
                                    }
                                  case 7:
                                    v742 = v55[12];
                                    if (v742 < 7 || v742 - 8 < 2)
                                      goto LABEL_1350;
                                    if (v742 != 7)
                                      goto LABEL_1856;
                                    goto LABEL_1356;
                                  case 8:
                                    v745 = v55[12];
                                    if (v745 >= 8 && v745 != 9)
                                    {
                                      if (v745 == 8)
                                      {
                                        v746 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
                                        goto LABEL_1276;
                                      }
                                      goto LABEL_1856;
                                    }
                                    v736 = 0;
LABEL_1337:
                                    v805 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                    do
                                    {
                                      v806 = __ldaxr(v805);
                                      v807 = v806 - 1;
                                    }
                                    while (__stlxr(v807, v805));
                                    if (v807)
                                    {
LABEL_1355:
                                      if (v736)
                                        goto LABEL_1356;
                                    }
                                    else
                                    {
                                      v808 = v1100.__r_.__value_.__r.__words[0];
                                      if (v1100.__r_.__value_.__r.__words[0])
                                      {
                                        boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
                                        v791 = (_QWORD *)v808;
                                        v809 = -235920773;
LABEL_1347:
                                        v792 = v809 | 0x1030C4000000000;
LABEL_1348:
                                        MEMORY[0x219A19A08](v791, v792, v733);
                                      }
LABEL_1349:
                                      if (v736)
                                      {
LABEL_1356:
                                        v356 = v1089.__r_.__value_.__r.__words[0];
                                        v357 = 7;
                                        goto LABEL_1805;
                                      }
                                    }
LABEL_1350:
                                    v1100.__r_.__value_.__r.__words[0] = 0;
                                    LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                                    v1100.__r_.__value_.__s.__data_[12] = 0;
                                    std::string::basic_string[abi:ne180100]<0>(v1091, "tmweekday");
                                    turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                                    if (SHIBYTE(v1091[0].__end_) < 0)
                                      operator delete(v1091[0].__first_);
                                    switch(v1100.__r_.__value_.__s.__data_[12])
                                    {
                                      case 0:
                                        switch(v55[12])
                                        {
                                          case 0u:
                                            v814 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                                            goto LABEL_1433;
                                          case 1u:
                                            v813.n128_u64[0] = *(_QWORD *)v55;
                                            v823 = v1100.__r_.__value_.__r.__words[0];
                                            goto LABEL_1432;
                                          case 2u:
                                          case 3u:
                                          case 4u:
                                          case 5u:
                                          case 7u:
                                          case 8u:
                                          case 9u:
                                            goto LABEL_1501;
                                          case 6u:
                                            v814 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                                && *((_DWORD *)v55 + 2) == 0;
                                            goto LABEL_1433;
                                          default:
                                            goto LABEL_1856;
                                        }
                                      case 1:
                                        switch(v55[12])
                                        {
                                          case 0u:
                                            v813.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                                            v823 = *(_QWORD *)v55;
LABEL_1432:
                                            v814 = v813.n128_f64[0] == (double)v823;
                                            goto LABEL_1433;
                                          case 1u:
                                            v813.n128_u64[0] = *(_QWORD *)v55;
                                            v816 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                                            goto LABEL_1462;
                                          case 2u:
                                          case 3u:
                                          case 4u:
                                          case 5u:
                                          case 7u:
                                          case 8u:
                                          case 9u:
                                            goto LABEL_1501;
                                          case 6u:
                                            v813.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                                            goto LABEL_1438;
                                          default:
                                            goto LABEL_1856;
                                        }
                                      case 2:
                                        v816 = 0;
                                        v818 = v55[12];
                                        if (v818 - 3 < 7 || v818 < 2)
                                          goto LABEL_1462;
                                        if (v818 != 2)
                                          goto LABEL_1856;
                                        v819 = *(double *)v55;
                                        if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                                          v820 = *(_QWORD *)(*(_QWORD *)&v819 + 16);
                                        else
                                          v820 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                                        if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                          v858 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                                        else
                                          v858 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                                        if (v820 != v858)
                                          goto LABEL_1361;
                                        v859 = (_QWORD *)(*(_QWORD *)&v819 + 8);
                                        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                          v859 = (_QWORD *)*v859;
                                        v860 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                                        if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                                          v860 = (_QWORD *)*v860;
                                        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                        {
                                          v814 = memcmp(v859, v860, v820) == 0;
LABEL_1433:
                                          v816 = v814;
                                          goto LABEL_1462;
                                        }
                                        if (v820)
                                        {
                                          v861 = v820 - 1;
                                          do
                                          {
                                            v863 = *(unsigned __int8 *)v859;
                                            v859 = (_QWORD *)((char *)v859 + 1);
                                            v862 = v863;
                                            v865 = *(unsigned __int8 *)v860;
                                            v860 = (_QWORD *)((char *)v860 + 1);
                                            v864 = v865;
                                            v100 = v861-- != 0;
                                            v866 = v100;
                                            v816 = v862 == v864;
                                          }
                                          while (v862 == v864 && (v866 & 1) != 0);
                                          goto LABEL_1462;
                                        }
                                        goto LABEL_1461;
                                      case 3:
                                        v821 = v55[12];
                                        if (v821 > 9)
                                          goto LABEL_1856;
                                        if (v821 == 3)
                                        {
                                          v850 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                                          v851 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                                          v852 = v851 - v850;
                                          v853 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                          if (v852 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16)
                                                               - (_QWORD)v853) >> 3)
                                          {
                                            if (v851 == v850)
                                            {
LABEL_1461:
                                              v816 = 1;
                                              goto LABEL_1462;
                                            }
                                            if (v852 <= 1)
                                              v854 = 1;
                                            else
                                              v854 = v851 - v850;
                                            v813.n128_u64[0] = *v850;
                                            if (*(double *)v850 == *v853)
                                            {
                                              v855 = 1;
                                              do
                                              {
                                                v856 = v855;
                                                if (v854 == v855)
                                                  break;
                                                v813.n128_u64[0] = v850[v855];
                                                v857 = v853[v855++];
                                              }
                                              while (v813.n128_f64[0] == v857);
                                              v816 = v856 >= v852;
                                              goto LABEL_1462;
                                            }
                                          }
LABEL_1361:
                                          v816 = 0;
                                          goto LABEL_1462;
                                        }
                                        v816 = 0;
LABEL_1475:
                                        v877 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                        do
                                        {
                                          v878 = __ldaxr(v877);
                                          v879 = v878 - 1;
                                        }
                                        while (__stlxr(v879, v877));
                                        if (v879)
                                          goto LABEL_1506;
                                        v880 = v1100.__r_.__value_.__r.__words[0];
                                        if (!v1100.__r_.__value_.__r.__words[0])
                                          goto LABEL_1500;
                                        v881 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                        if (v881)
                                        {
                                          *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v881;
                                          operator delete(v881);
                                        }
                                        v871 = (_QWORD *)v880;
                                        v872 = 0x1080C409938AC02;
                                        goto LABEL_1499;
                                      case 4:
                                        v815 = v55[12];
                                        if (v815 > 9)
                                          goto LABEL_1856;
                                        if (v815 == 4)
                                        {
                                          v826 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                                          goto LABEL_1427;
                                        }
                                        v816 = 0;
LABEL_1470:
                                        v873 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                        do
                                        {
                                          v874 = __ldaxr(v873);
                                          v875 = v874 - 1;
                                        }
                                        while (__stlxr(v875, v873));
                                        if (v875)
                                          goto LABEL_1506;
                                        v876 = v1100.__r_.__value_.__r.__words[0];
                                        if (!v1100.__r_.__value_.__r.__words[0])
                                          goto LABEL_1500;
                                        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                                        goto LABEL_1487;
                                      case 5:
                                        v824 = v55[12];
                                        if (v824 > 9)
                                          goto LABEL_1856;
                                        if (v824 == 5)
                                        {
                                          v826 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
LABEL_1427:
                                          v816 = v826;
LABEL_1462:
                                          switch(v1100.__r_.__value_.__s.__data_[12])
                                          {
                                            case 2:
                                              v867 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                              do
                                              {
                                                v868 = __ldaxr(v867);
                                                v869 = v868 - 1;
                                              }
                                              while (__stlxr(v869, v867));
                                              if (v869)
                                                goto LABEL_1506;
                                              v870 = v1100.__r_.__value_.__r.__words[0];
                                              if (!v1100.__r_.__value_.__r.__words[0])
                                                goto LABEL_1500;
                                              if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                                operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                              v871 = (_QWORD *)v870;
                                              v872 = 0x1012C404EF22A49;
                                              goto LABEL_1499;
                                            case 3:
                                              goto LABEL_1475;
                                            case 4:
                                              goto LABEL_1470;
                                            case 5:
                                              goto LABEL_1482;
                                            case 8:
                                              goto LABEL_1488;
                                            case 9:
                                              v890 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                              do
                                              {
                                                v891 = __ldaxr(v890);
                                                v892 = v891 - 1;
                                              }
                                              while (__stlxr(v892, v890));
                                              if (v892)
                                                goto LABEL_1506;
                                              if (!v1100.__r_.__value_.__r.__words[0])
                                                goto LABEL_1500;
                                              v871 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1100.__r_.__value_.__l.__data_);
                                              v889 = 2071181815;
                                              goto LABEL_1498;
                                            default:
                                              goto LABEL_1506;
                                          }
                                        }
                                        v816 = 0;
LABEL_1482:
                                        v882 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                        do
                                        {
                                          v883 = __ldaxr(v882);
                                          v884 = v883 - 1;
                                        }
                                        while (__stlxr(v884, v882));
                                        if (v884)
                                          goto LABEL_1506;
                                        v876 = v1100.__r_.__value_.__r.__words[0];
                                        if (!v1100.__r_.__value_.__r.__words[0])
                                          goto LABEL_1500;
                                        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1487:
                                        v871 = (_QWORD *)v876;
                                        v872 = 0x1020C405E66F15BLL;
                                        goto LABEL_1499;
                                      case 6:
                                        switch(v55[12])
                                        {
                                          case 0u:
                                            v814 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                                && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                                            goto LABEL_1433;
                                          case 1u:
                                            v813.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1])/ 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_1438:
                                            v816 = v813.n128_f64[0] < 0.0000005;
                                            goto LABEL_1462;
                                          case 2u:
                                          case 3u:
                                          case 4u:
                                          case 5u:
                                          case 7u:
                                          case 8u:
                                          case 9u:
                                            goto LABEL_1501;
                                          case 6u:
                                            v814 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                                && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                                            goto LABEL_1433;
                                          default:
                                            goto LABEL_1856;
                                        }
                                      case 7:
                                        v822 = v55[12];
                                        if (v822 < 7 || v822 - 8 < 2)
                                          goto LABEL_1501;
                                        if (v822 != 7)
                                          goto LABEL_1856;
                                        goto LABEL_1507;
                                      case 8:
                                        v825 = v55[12];
                                        if (v825 >= 8 && v825 != 9)
                                        {
                                          if (v825 == 8)
                                          {
                                            v826 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
                                            goto LABEL_1427;
                                          }
                                          goto LABEL_1856;
                                        }
                                        v816 = 0;
LABEL_1488:
                                        v885 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                        do
                                        {
                                          v886 = __ldaxr(v885);
                                          v887 = v886 - 1;
                                        }
                                        while (__stlxr(v887, v885));
                                        if (v887)
                                        {
LABEL_1506:
                                          if (v816)
                                            goto LABEL_1507;
                                        }
                                        else
                                        {
                                          v888 = v1100.__r_.__value_.__r.__words[0];
                                          if (v1100.__r_.__value_.__r.__words[0])
                                          {
                                            boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
                                            v871 = (_QWORD *)v888;
                                            v889 = -235920773;
LABEL_1498:
                                            v872 = v889 | 0x1030C4000000000;
LABEL_1499:
                                            MEMORY[0x219A19A08](v871, v872, v813);
                                          }
LABEL_1500:
                                          if (v816)
                                          {
LABEL_1507:
                                            v356 = v1089.__r_.__value_.__r.__words[0];
                                            v357 = 8;
                                            goto LABEL_1805;
                                          }
                                        }
LABEL_1501:
                                        v1100.__r_.__value_.__r.__words[0] = 0;
                                        LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                                        v1100.__r_.__value_.__s.__data_[12] = 0;
                                        std::string::basic_string[abi:ne180100]<0>(v1091, "us");
                                        turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                                        if (SHIBYTE(v1091[0].__end_) < 0)
                                          operator delete(v1091[0].__first_);
                                        switch(v1100.__r_.__value_.__s.__data_[12])
                                        {
                                          case 0:
                                            switch(v55[12])
                                            {
                                              case 0u:
                                                v894 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
                                                goto LABEL_1584;
                                              case 1u:
                                                v893.n128_u64[0] = *(_QWORD *)v55;
                                                v903 = v1100.__r_.__value_.__r.__words[0];
                                                goto LABEL_1583;
                                              case 2u:
                                              case 3u:
                                              case 4u:
                                              case 5u:
                                              case 7u:
                                              case 8u:
                                              case 9u:
                                                goto LABEL_1652;
                                              case 6u:
                                                v894 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                                                    && *((_DWORD *)v55 + 2) == 0;
                                                goto LABEL_1584;
                                              default:
                                                goto LABEL_1856;
                                            }
                                          case 1:
                                            switch(v55[12])
                                            {
                                              case 0u:
                                                v893.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
                                                v903 = *(_QWORD *)v55;
LABEL_1583:
                                                v894 = v893.n128_f64[0] == (double)v903;
                                                goto LABEL_1584;
                                              case 1u:
                                                v893.n128_u64[0] = *(_QWORD *)v55;
                                                v896 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
                                                goto LABEL_1613;
                                              case 2u:
                                              case 3u:
                                              case 4u:
                                              case 5u:
                                              case 7u:
                                              case 8u:
                                              case 9u:
                                                goto LABEL_1652;
                                              case 6u:
                                                v893.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0+ (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
                                                goto LABEL_1589;
                                              default:
                                                goto LABEL_1856;
                                            }
                                          case 2:
                                            v896 = 0;
                                            v898 = v55[12];
                                            if (v898 - 3 < 7 || v898 < 2)
                                              goto LABEL_1613;
                                            if (v898 != 2)
                                              goto LABEL_1856;
                                            v899 = *(double *)v55;
                                            if (*(char *)(*(_QWORD *)v55 + 31) < 0)
                                              v900 = *(_QWORD *)(*(_QWORD *)&v899 + 16);
                                            else
                                              v900 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
                                            if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                              v938 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
                                            else
                                              v938 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
                                            if (v900 != v938)
                                              goto LABEL_1512;
                                            v939 = (_QWORD *)(*(_QWORD *)&v899 + 8);
                                            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                              v939 = (_QWORD *)*v939;
                                            v940 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
                                            if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
                                              v940 = (_QWORD *)*v940;
                                            if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
                                            {
                                              v894 = memcmp(v939, v940, v900) == 0;
LABEL_1584:
                                              v896 = v894;
                                              goto LABEL_1613;
                                            }
                                            if (v900)
                                            {
                                              v941 = v900 - 1;
                                              do
                                              {
                                                v943 = *(unsigned __int8 *)v939;
                                                v939 = (_QWORD *)((char *)v939 + 1);
                                                v942 = v943;
                                                v945 = *(unsigned __int8 *)v940;
                                                v940 = (_QWORD *)((char *)v940 + 1);
                                                v944 = v945;
                                                v100 = v941-- != 0;
                                                v946 = v100;
                                                v896 = v942 == v944;
                                              }
                                              while (v942 == v944 && (v946 & 1) != 0);
                                              goto LABEL_1613;
                                            }
                                            goto LABEL_1612;
                                          case 3:
                                            v901 = v55[12];
                                            if (v901 > 9)
                                              goto LABEL_1856;
                                            if (v901 == 3)
                                            {
                                              v930 = *(unint64_t **)(*(_QWORD *)v55 + 8);
                                              v931 = *(_QWORD **)(*(_QWORD *)v55 + 16);
                                              v932 = v931 - v930;
                                              v933 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                              if (v932 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16)
                                                                   - (_QWORD)v933) >> 3)
                                              {
                                                if (v931 == v930)
                                                {
LABEL_1612:
                                                  v896 = 1;
                                                  goto LABEL_1613;
                                                }
                                                if (v932 <= 1)
                                                  v934 = 1;
                                                else
                                                  v934 = v931 - v930;
                                                v893.n128_u64[0] = *v930;
                                                if (*(double *)v930 == *v933)
                                                {
                                                  v935 = 1;
                                                  do
                                                  {
                                                    v936 = v935;
                                                    if (v934 == v935)
                                                      break;
                                                    v893.n128_u64[0] = v930[v935];
                                                    v937 = v933[v935++];
                                                  }
                                                  while (v893.n128_f64[0] == v937);
                                                  v896 = v936 >= v932;
                                                  goto LABEL_1613;
                                                }
                                              }
LABEL_1512:
                                              v896 = 0;
                                              goto LABEL_1613;
                                            }
                                            v896 = 0;
LABEL_1626:
                                            v957 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                            do
                                            {
                                              v958 = __ldaxr(v957);
                                              v959 = v958 - 1;
                                            }
                                            while (__stlxr(v959, v957));
                                            if (v959)
                                              goto LABEL_1657;
                                            v960 = v1100.__r_.__value_.__r.__words[0];
                                            if (!v1100.__r_.__value_.__r.__words[0])
                                              goto LABEL_1651;
                                            v961 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
                                            if (v961)
                                            {
                                              *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v961;
                                              operator delete(v961);
                                            }
                                            v951 = (_QWORD *)v960;
                                            v952 = 0x1080C409938AC02;
                                            goto LABEL_1650;
                                          case 4:
                                            v895 = v55[12];
                                            if (v895 > 9)
                                              goto LABEL_1856;
                                            if (v895 == 4)
                                            {
                                              v906 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
                                              goto LABEL_1578;
                                            }
                                            v896 = 0;
LABEL_1621:
                                            v953 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                            do
                                            {
                                              v954 = __ldaxr(v953);
                                              v955 = v954 - 1;
                                            }
                                            while (__stlxr(v955, v953));
                                            if (v955)
                                              goto LABEL_1657;
                                            v956 = v1100.__r_.__value_.__r.__words[0];
                                            if (!v1100.__r_.__value_.__r.__words[0])
                                              goto LABEL_1651;
                                            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
                                            goto LABEL_1638;
                                          case 5:
                                            v904 = v55[12];
                                            if (v904 > 9)
                                              goto LABEL_1856;
                                            if (v904 == 5)
                                            {
                                              v906 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
LABEL_1578:
                                              v896 = v906;
LABEL_1613:
                                              switch(v1100.__r_.__value_.__s.__data_[12])
                                              {
                                                case 2:
                                                  v947 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                                  do
                                                  {
                                                    v948 = __ldaxr(v947);
                                                    v949 = v948 - 1;
                                                  }
                                                  while (__stlxr(v949, v947));
                                                  if (v949)
                                                    goto LABEL_1657;
                                                  v950 = v1100.__r_.__value_.__r.__words[0];
                                                  if (!v1100.__r_.__value_.__r.__words[0])
                                                    goto LABEL_1651;
                                                  if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                                    operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                                  v951 = (_QWORD *)v950;
                                                  v952 = 0x1012C404EF22A49;
                                                  goto LABEL_1650;
                                                case 3:
                                                  goto LABEL_1626;
                                                case 4:
                                                  goto LABEL_1621;
                                                case 5:
                                                  goto LABEL_1633;
                                                case 8:
                                                  goto LABEL_1639;
                                                case 9:
                                                  v970 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                                  do
                                                  {
                                                    v971 = __ldaxr(v970);
                                                    v972 = v971 - 1;
                                                  }
                                                  while (__stlxr(v972, v970));
                                                  if (v972)
                                                    goto LABEL_1657;
                                                  if (!v1100.__r_.__value_.__r.__words[0])
                                                    goto LABEL_1651;
                                                  v951 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1100.__r_.__value_.__l.__data_);
                                                  v969 = 2071181815;
                                                  goto LABEL_1649;
                                                default:
                                                  goto LABEL_1657;
                                              }
                                            }
                                            v896 = 0;
LABEL_1633:
                                            v962 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                            do
                                            {
                                              v963 = __ldaxr(v962);
                                              v964 = v963 - 1;
                                            }
                                            while (__stlxr(v964, v962));
                                            if (v964)
                                              goto LABEL_1657;
                                            v956 = v1100.__r_.__value_.__r.__words[0];
                                            if (!v1100.__r_.__value_.__r.__words[0])
                                              goto LABEL_1651;
                                            v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
                                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1638:
                                            v951 = (_QWORD *)v956;
                                            v952 = 0x1020C405E66F15BLL;
                                            goto LABEL_1650;
                                          case 6:
                                            switch(v55[12])
                                            {
                                              case 0u:
                                                v894 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                                                    && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
                                                goto LABEL_1584;
                                              case 1u:
                                                v893.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1])/ 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_1589:
                                                v896 = v893.n128_f64[0] < 0.0000005;
                                                goto LABEL_1613;
                                              case 2u:
                                              case 3u:
                                              case 4u:
                                              case 5u:
                                              case 7u:
                                              case 8u:
                                              case 9u:
                                                goto LABEL_1652;
                                              case 6u:
                                                v894 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                                                    && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
                                                goto LABEL_1584;
                                              default:
                                                goto LABEL_1856;
                                            }
                                          case 7:
                                            v902 = v55[12];
                                            if (v902 < 7 || v902 - 8 < 2)
                                              goto LABEL_1652;
                                            if (v902 != 7)
                                              goto LABEL_1856;
                                            goto LABEL_1658;
                                          case 8:
                                            v905 = v55[12];
                                            if (v905 >= 8 && v905 != 9)
                                            {
                                              if (v905 == 8)
                                              {
                                                v906 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
                                                goto LABEL_1578;
                                              }
                                              goto LABEL_1856;
                                            }
                                            v896 = 0;
LABEL_1639:
                                            v965 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                            do
                                            {
                                              v966 = __ldaxr(v965);
                                              v967 = v966 - 1;
                                            }
                                            while (__stlxr(v967, v965));
                                            if (v967)
                                            {
LABEL_1657:
                                              if (v896)
                                                goto LABEL_1658;
                                            }
                                            else
                                            {
                                              v968 = v1100.__r_.__value_.__r.__words[0];
                                              if (v1100.__r_.__value_.__r.__words[0])
                                              {
                                                boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
                                                v951 = (_QWORD *)v968;
                                                v969 = -235920773;
LABEL_1649:
                                                v952 = v969 | 0x1030C4000000000;
LABEL_1650:
                                                MEMORY[0x219A19A08](v951, v952, v893);
                                              }
LABEL_1651:
                                              if (v896)
                                              {
LABEL_1658:
                                                v356 = v1089.__r_.__value_.__r.__words[0];
                                                v357 = 9;
                                                goto LABEL_1805;
                                              }
                                            }
LABEL_1652:
                                            v1100.__r_.__value_.__r.__words[0] = 0;
                                            LODWORD(v1100.__r_.__value_.__r.__words[1]) = 0;
                                            v1100.__r_.__value_.__s.__data_[12] = 0;
                                            std::string::basic_string[abi:ne180100]<0>(v1091, "timezone");
                                            turi::flexible_type::operator=<std::string>((uint64_t *)&v1100, (__int128 *)v1091);
                                            if (SHIBYTE(v1091[0].__end_) < 0)
                                              operator delete(v1091[0].__first_);
                                            break;
                                          case 9:
                                            v897 = v55[12];
                                            if (v897 < 9)
                                              goto LABEL_1512;
                                            if (v897 != 9)
                                              goto LABEL_1856;
                                            v907 = v1100.__r_.__value_.__r.__words[0];
                                            v908 = *(_QWORD **)v55;
                                            if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                                              goto LABEL_1612;
                                            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v908 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_1512;
                                            v910 = (char *)v908[3];
                                            v909 = (char *)v908[4];
                                            v911 = v909 - v910;
                                            if (v909 == v910)
                                              goto LABEL_1612;
                                            if (!v908[1])
                                              goto LABEL_1612;
                                            v912 = 1;
                                            do
                                            {
                                              v913 = *(_QWORD *)v910;
                                              v910 += 8;
                                              v912 *= v913;
                                            }
                                            while (v910 != v909);
                                            if (!v912)
                                              goto LABEL_1612;
                                            v1096 = 0;
                                            std::vector<unsigned long>::vector(v1091, v911 >> 3, &v1096);
                                            do
                                            {
                                              first = v1091[0].__first_;
                                              if (v1091[0].__begin_ == v1091[0].__first_)
                                              {
                                                v923 = 0;
                                                v893.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v908[1] + 8 * v908[9]);
                                              }
                                              else
                                              {
                                                v915 = 0;
                                                v916 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                                                v917 = (uint64_t *)v908[6];
                                                if (v916 <= 1)
                                                  v916 = 1;
                                                v918 = v1091[0].__first_;
                                                v919 = v916;
                                                do
                                                {
                                                  v921 = v918->__r_.__value_.__r.__words[0];
                                                  v918 = (std::__split_buffer<std::string>::pointer)((char *)v918 + 8);
                                                  v920 = v921;
                                                  v922 = *v917++;
                                                  v915 += v922 * v920;
                                                  --v919;
                                                }
                                                while (v919);
                                                v923 = 0;
                                                v893.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v908[1] + 8 * (v908[9] + v915));
                                                v924 = *(uint64_t **)(v907 + 48);
                                                v925 = v1091[0].__first_;
                                                do
                                                {
                                                  v927 = v925->__r_.__value_.__r.__words[0];
                                                  v925 = (std::__split_buffer<std::string>::pointer)((char *)v925 + 8);
                                                  v926 = v927;
                                                  v928 = *v924++;
                                                  v923 += v928 * v926;
                                                  --v916;
                                                }
                                                while (v916);
                                              }
                                              v929 = *(double *)(**(_QWORD **)(v907 + 8)
                                                               + 8 * (*(_QWORD *)(v907 + 72) + v923));
                                              v896 = v893.n128_f64[0] == v929;
                                              if (v893.n128_f64[0] != v929)
                                                goto LABEL_1560;
                                            }
                                            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v908 + 1), (uint64_t *)v1091));
                                            first = v1091[0].__first_;
LABEL_1560:
                                            if (first)
                                            {
                                              v1091[0].__begin_ = first;
                                              operator delete(first);
                                            }
                                            goto LABEL_1613;
                                          default:
                                            goto LABEL_1856;
                                        }
                                        break;
                                      case 9:
                                        v817 = v55[12];
                                        if (v817 < 9)
                                          goto LABEL_1361;
                                        if (v817 != 9)
                                          goto LABEL_1856;
                                        v827 = v1100.__r_.__value_.__r.__words[0];
                                        v828 = *(_QWORD **)v55;
                                        if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                                          goto LABEL_1461;
                                        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v828 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_1361;
                                        v830 = (char *)v828[3];
                                        v829 = (char *)v828[4];
                                        v831 = v829 - v830;
                                        if (v829 == v830)
                                          goto LABEL_1461;
                                        if (!v828[1])
                                          goto LABEL_1461;
                                        v832 = 1;
                                        do
                                        {
                                          v833 = *(_QWORD *)v830;
                                          v830 += 8;
                                          v832 *= v833;
                                        }
                                        while (v830 != v829);
                                        if (!v832)
                                          goto LABEL_1461;
                                        v1096 = 0;
                                        std::vector<unsigned long>::vector(v1091, v831 >> 3, &v1096);
                                        do
                                        {
                                          v834 = v1091[0].__first_;
                                          if (v1091[0].__begin_ == v1091[0].__first_)
                                          {
                                            v843 = 0;
                                            v813.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v828[1] + 8 * v828[9]);
                                          }
                                          else
                                          {
                                            v835 = 0;
                                            v836 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                                            v837 = (uint64_t *)v828[6];
                                            if (v836 <= 1)
                                              v836 = 1;
                                            v838 = v1091[0].__first_;
                                            v839 = v836;
                                            do
                                            {
                                              v841 = v838->__r_.__value_.__r.__words[0];
                                              v838 = (std::__split_buffer<std::string>::pointer)((char *)v838 + 8);
                                              v840 = v841;
                                              v842 = *v837++;
                                              v835 += v842 * v840;
                                              --v839;
                                            }
                                            while (v839);
                                            v843 = 0;
                                            v813.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v828[1] + 8 * (v828[9] + v835));
                                            v844 = *(uint64_t **)(v827 + 48);
                                            v845 = v1091[0].__first_;
                                            do
                                            {
                                              v847 = v845->__r_.__value_.__r.__words[0];
                                              v845 = (std::__split_buffer<std::string>::pointer)((char *)v845 + 8);
                                              v846 = v847;
                                              v848 = *v844++;
                                              v843 += v848 * v846;
                                              --v836;
                                            }
                                            while (v836);
                                          }
                                          v849 = *(double *)(**(_QWORD **)(v827 + 8)
                                                           + 8 * (*(_QWORD *)(v827 + 72) + v843));
                                          v816 = v813.n128_f64[0] == v849;
                                          if (v813.n128_f64[0] != v849)
                                            goto LABEL_1409;
                                        }
                                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v828 + 1), (uint64_t *)v1091));
                                        v834 = v1091[0].__first_;
LABEL_1409:
                                        if (v834)
                                        {
                                          v1091[0].__begin_ = v834;
                                          operator delete(v834);
                                        }
                                        goto LABEL_1462;
                                      default:
                                        goto LABEL_1856;
                                    }
                                    break;
                                  case 9:
                                    v737 = v55[12];
                                    if (v737 < 9)
                                      goto LABEL_1210;
                                    if (v737 != 9)
                                      goto LABEL_1856;
                                    v747 = v1100.__r_.__value_.__r.__words[0];
                                    v748 = *(_QWORD **)v55;
                                    if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                                      goto LABEL_1310;
                                    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v748 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_1210;
                                    v750 = (char *)v748[3];
                                    v749 = (char *)v748[4];
                                    v751 = v749 - v750;
                                    if (v749 == v750)
                                      goto LABEL_1310;
                                    if (!v748[1])
                                      goto LABEL_1310;
                                    v752 = 1;
                                    do
                                    {
                                      v753 = *(_QWORD *)v750;
                                      v750 += 8;
                                      v752 *= v753;
                                    }
                                    while (v750 != v749);
                                    if (!v752)
                                      goto LABEL_1310;
                                    v1096 = 0;
                                    std::vector<unsigned long>::vector(v1091, v751 >> 3, &v1096);
                                    do
                                    {
                                      v754 = v1091[0].__first_;
                                      if (v1091[0].__begin_ == v1091[0].__first_)
                                      {
                                        v763 = 0;
                                        v733.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v748[1] + 8 * v748[9]);
                                      }
                                      else
                                      {
                                        v755 = 0;
                                        v756 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                                        v757 = (uint64_t *)v748[6];
                                        if (v756 <= 1)
                                          v756 = 1;
                                        v758 = v1091[0].__first_;
                                        v759 = v756;
                                        do
                                        {
                                          v761 = v758->__r_.__value_.__r.__words[0];
                                          v758 = (std::__split_buffer<std::string>::pointer)((char *)v758 + 8);
                                          v760 = v761;
                                          v762 = *v757++;
                                          v755 += v762 * v760;
                                          --v759;
                                        }
                                        while (v759);
                                        v763 = 0;
                                        v733.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v748[1] + 8 * (v748[9] + v755));
                                        v764 = *(uint64_t **)(v747 + 48);
                                        v765 = v1091[0].__first_;
                                        do
                                        {
                                          v767 = v765->__r_.__value_.__r.__words[0];
                                          v765 = (std::__split_buffer<std::string>::pointer)((char *)v765 + 8);
                                          v766 = v767;
                                          v768 = *v764++;
                                          v763 += v768 * v766;
                                          --v756;
                                        }
                                        while (v756);
                                      }
                                      v769 = *(double *)(**(_QWORD **)(v747 + 8) + 8 * (*(_QWORD *)(v747 + 72) + v763));
                                      v736 = v733.n128_f64[0] == v769;
                                      if (v733.n128_f64[0] != v769)
                                        goto LABEL_1258;
                                    }
                                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v748 + 1), (uint64_t *)v1091));
                                    v754 = v1091[0].__first_;
LABEL_1258:
                                    if (v754)
                                    {
                                      v1091[0].__begin_ = v754;
                                      operator delete(v754);
                                    }
                                    goto LABEL_1311;
                                  default:
                                    goto LABEL_1856;
                                }
                                break;
                              case 9:
                                v657 = v55[12];
                                if (v657 < 9)
                                  goto LABEL_1059;
                                if (v657 != 9)
                                  goto LABEL_1856;
                                v667 = v1100.__r_.__value_.__r.__words[0];
                                v668 = *(_QWORD **)v55;
                                if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                                  goto LABEL_1159;
                                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v668 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_1059;
                                v670 = (char *)v668[3];
                                v669 = (char *)v668[4];
                                v671 = v669 - v670;
                                if (v669 == v670)
                                  goto LABEL_1159;
                                if (!v668[1])
                                  goto LABEL_1159;
                                v672 = 1;
                                do
                                {
                                  v673 = *(_QWORD *)v670;
                                  v670 += 8;
                                  v672 *= v673;
                                }
                                while (v670 != v669);
                                if (!v672)
                                  goto LABEL_1159;
                                v1096 = 0;
                                std::vector<unsigned long>::vector(v1091, v671 >> 3, &v1096);
                                do
                                {
                                  v674 = v1091[0].__first_;
                                  if (v1091[0].__begin_ == v1091[0].__first_)
                                  {
                                    v683 = 0;
                                    v653.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v668[1] + 8 * v668[9]);
                                  }
                                  else
                                  {
                                    v675 = 0;
                                    v676 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                                    v677 = (uint64_t *)v668[6];
                                    if (v676 <= 1)
                                      v676 = 1;
                                    v678 = v1091[0].__first_;
                                    v679 = v676;
                                    do
                                    {
                                      v681 = v678->__r_.__value_.__r.__words[0];
                                      v678 = (std::__split_buffer<std::string>::pointer)((char *)v678 + 8);
                                      v680 = v681;
                                      v682 = *v677++;
                                      v675 += v682 * v680;
                                      --v679;
                                    }
                                    while (v679);
                                    v683 = 0;
                                    v653.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v668[1] + 8 * (v668[9] + v675));
                                    v684 = *(uint64_t **)(v667 + 48);
                                    v685 = v1091[0].__first_;
                                    do
                                    {
                                      v687 = v685->__r_.__value_.__r.__words[0];
                                      v685 = (std::__split_buffer<std::string>::pointer)((char *)v685 + 8);
                                      v686 = v687;
                                      v688 = *v684++;
                                      v683 += v688 * v686;
                                      --v676;
                                    }
                                    while (v676);
                                  }
                                  v689 = *(double *)(**(_QWORD **)(v667 + 8) + 8 * (*(_QWORD *)(v667 + 72) + v683));
                                  v656 = v653.n128_f64[0] == v689;
                                  if (v653.n128_f64[0] != v689)
                                    goto LABEL_1107;
                                }
                                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v668 + 1), (uint64_t *)v1091));
                                v674 = v1091[0].__first_;
LABEL_1107:
                                if (v674)
                                {
                                  v1091[0].__begin_ = v674;
                                  operator delete(v674);
                                }
                                goto LABEL_1160;
                              default:
                                goto LABEL_1856;
                            }
                            break;
                          case 9:
                            v558 = v55[12];
                            if (v558 < 9)
                              goto LABEL_897;
                            if (v558 != 9)
                              goto LABEL_1856;
                            v568 = v1100.__r_.__value_.__r.__words[0];
                            v569 = *(_QWORD **)v55;
                            if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                              goto LABEL_1004;
                            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v569 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_897;
                            v571 = (char *)v569[3];
                            v570 = (char *)v569[4];
                            v572 = v570 - v571;
                            if (v570 == v571)
                              goto LABEL_1004;
                            if (!v569[1])
                              goto LABEL_1004;
                            v573 = 1;
                            do
                            {
                              v574 = *(_QWORD *)v571;
                              v571 += 8;
                              v573 *= v574;
                            }
                            while (v571 != v570);
                            if (!v573)
                              goto LABEL_1004;
                            v1096 = 0;
                            std::vector<unsigned long>::vector(v1091, v572 >> 3, &v1096);
                            v575 = v1091[0].__first_;
                            begin = v1091[0].__begin_;
                            v577 = **(_QWORD **)(v568 + 8);
                            v578 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
                            v579 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                            v580 = v579 - 1;
                            if (v579 <= 1)
                              v581 = 1;
                            else
                              v581 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                            do
                            {
                              if (begin == v575)
                              {
                                v589 = 0;
                                v554.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v569[1] + 8 * v569[9]);
                              }
                              else
                              {
                                v582 = 0;
                                v583 = (uint64_t *)v569[6];
                                v584 = (std::string::__raw *)v575;
                                v585 = v581;
                                do
                                {
                                  v587 = v584->__words[0];
                                  v584 = (std::string::__raw *)((char *)v584 + 8);
                                  v586 = v587;
                                  v588 = *v583++;
                                  v582 += v588 * v586;
                                  --v585;
                                }
                                while (v585);
                                v589 = 0;
                                v554.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v569[1] + 8 * (v569[9] + v582));
                                v590 = *(uint64_t **)(v568 + 48);
                                v591 = (std::string::__raw *)v575;
                                v592 = v581;
                                do
                                {
                                  v594 = v591->__words[0];
                                  v591 = (std::string::__raw *)((char *)v591 + 8);
                                  v593 = v594;
                                  v595 = *v590++;
                                  v589 += v595 * v593;
                                  --v592;
                                }
                                while (v592);
                              }
                              v596 = *(double *)(v577 + 8 * (*(_QWORD *)(v568 + 72) + v589));
                              v557 = v554.n128_f64[0] == v596;
                              if (v554.n128_f64[0] != v596)
                                break;
                              v597 = v579;
                              v598 = v579 - 1;
                              if (v578 >= 1)
                              {
                                v599 = v569[3];
                                v600 = v575->__r_.__value_.__r.__words[v580] + 1;
                                v575->__r_.__value_.__r.__words[v580] = v600;
                                if (v600 >= *(_QWORD *)(v599 + 8 * v580))
                                {
                                  v601 = v599 - 16;
                                  v602 = v579;
                                  v603 = (unint64_t *)((char *)v575 + (v578 & 0xFFFFFFFFFFFFFFF8) - 16);
                                  while (1)
                                  {
                                    v604 = v602 - 1;
                                    v603[1] = 0;
                                    if ((uint64_t)(v602 - 1) <= 0)
                                      break;
                                    v605 = *v603 + 1;
                                    *v603-- = v605;
                                    v606 = *(_QWORD *)(v601 + 8 * v602--);
                                    if (v605 < v606)
                                    {
                                      v598 = v604 - 1;
                                      v597 = 1;
                                      goto LABEL_950;
                                    }
                                  }
                                  v557 = 1;
LABEL_1742:
                                  v1091[0].__begin_ = v575;
                                  operator delete(v575);
LABEL_1005:
                                  switch(v1100.__r_.__value_.__s.__data_[12])
                                  {
                                    case 2:
                                      v624 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                      do
                                      {
                                        v625 = __ldaxr(v624);
                                        v626 = v625 - 1;
                                      }
                                      while (__stlxr(v626, v624));
                                      if (v626)
                                        goto LABEL_1053;
                                      v627 = v1100.__r_.__value_.__r.__words[0];
                                      if (!v1100.__r_.__value_.__r.__words[0])
                                        goto LABEL_1047;
                                      if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                        operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                      v628 = v627;
                                      v629 = 0x1012C404EF22A49;
                                      goto LABEL_1046;
                                    case 3:
                                      goto LABEL_1018;
                                    case 4:
                                      goto LABEL_1013;
                                    case 5:
                                      goto LABEL_1025;
                                    case 8:
                                      goto LABEL_1031;
                                    case 9:
                                      v647 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                      do
                                      {
                                        v648 = __ldaxr(v647);
                                        v649 = v648 - 1;
                                      }
                                      while (__stlxr(v649, v647));
                                      if (v649)
                                        goto LABEL_1053;
                                      v650 = v1100.__r_.__value_.__r.__words[0];
                                      if (!v1100.__r_.__value_.__r.__words[0])
                                        goto LABEL_1047;
                                      v651 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                                      if (v651)
                                      {
                                        *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v651;
                                        operator delete(v651);
                                      }
                                      v652 = *(void **)(v650 + 24);
                                      if (v652)
                                      {
                                        *(_QWORD *)(v650 + 32) = v652;
                                        operator delete(v652);
                                      }
                                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v650 + 8);
                                      v628 = v650;
                                      v646 = 2071181815;
                                      goto LABEL_1045;
                                    default:
                                      goto LABEL_1053;
                                  }
                                }
                                v597 = 1;
                                v598 = v579 - 1;
                              }
LABEL_950:
                              ;
                            }
                            while ((v598 & 0x8000000000000000) == 0 && v597);
                            if (v575)
                              goto LABEL_1742;
                            goto LABEL_1005;
                          default:
                            goto LABEL_1856;
                        }
                        break;
                      case 9:
                        v459 = v55[12];
                        if (v459 < 9)
                          goto LABEL_739;
                        if (v459 != 9)
                          goto LABEL_1856;
                        v469 = v1100.__r_.__value_.__r.__words[0];
                        v470 = *(_QWORD **)v55;
                        if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                          goto LABEL_842;
                        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v470 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_739;
                        v472 = (char *)v470[3];
                        v471 = (char *)v470[4];
                        v473 = v471 - v472;
                        if (v471 == v472)
                          goto LABEL_842;
                        if (!v470[1])
                          goto LABEL_842;
                        v474 = 1;
                        do
                        {
                          v475 = *(_QWORD *)v472;
                          v472 += 8;
                          v474 *= v475;
                        }
                        while (v472 != v471);
                        if (!v474)
                          goto LABEL_842;
                        v1096 = 0;
                        std::vector<unsigned long>::vector(v1091, v473 >> 3, &v1096);
                        v476 = v1091[0].__first_;
                        v477 = v1091[0].__begin_;
                        v478 = **(_QWORD **)(v469 + 8);
                        v479 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
                        v480 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                        v481 = v480 - 1;
                        if (v480 <= 1)
                          v482 = 1;
                        else
                          v482 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                        while (1)
                        {
                          if (v477 == v476)
                          {
                            v490 = 0;
                            v455.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v470[1] + 8 * v470[9]);
                          }
                          else
                          {
                            v483 = 0;
                            v484 = (uint64_t *)v470[6];
                            v485 = (std::string::__raw *)v476;
                            v486 = v482;
                            do
                            {
                              v488 = v485->__words[0];
                              v485 = (std::string::__raw *)((char *)v485 + 8);
                              v487 = v488;
                              v489 = *v484++;
                              v483 += v489 * v487;
                              --v486;
                            }
                            while (v486);
                            v490 = 0;
                            v455.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v470[1] + 8 * (v470[9] + v483));
                            v491 = *(uint64_t **)(v469 + 48);
                            v492 = (std::string::__raw *)v476;
                            v493 = v482;
                            do
                            {
                              v495 = v492->__words[0];
                              v492 = (std::string::__raw *)((char *)v492 + 8);
                              v494 = v495;
                              v496 = *v491++;
                              v490 += v496 * v494;
                              --v493;
                            }
                            while (v493);
                          }
                          v497 = *(double *)(v478 + 8 * (*(_QWORD *)(v469 + 72) + v490));
                          v458 = v455.n128_f64[0] == v497;
                          if (v455.n128_f64[0] != v497)
                            goto LABEL_1591;
                          v498 = v480;
                          v499 = v480 - 1;
                          if (v479 >= 1)
                          {
                            v500 = v470[3];
                            v501 = v476->__r_.__value_.__r.__words[v481] + 1;
                            v476->__r_.__value_.__r.__words[v481] = v501;
                            if (v501 >= *(_QWORD *)(v500 + 8 * v481))
                            {
                              v502 = v500 - 16;
                              v503 = v480;
                              v504 = (unint64_t *)((char *)v476 + (v479 & 0xFFFFFFFFFFFFFFF8) - 16);
                              while (1)
                              {
                                v505 = v503 - 1;
                                v504[1] = 0;
                                if ((uint64_t)(v503 - 1) <= 0)
                                  break;
                                v506 = *v504 + 1;
                                *v504-- = v506;
                                v507 = *(_QWORD *)(v502 + 8 * v503--);
                                if (v506 < v507)
                                {
                                  v499 = v505 - 1;
                                  v498 = 1;
                                  goto LABEL_792;
                                }
                              }
                              v458 = 1;
LABEL_1591:
                              if (v476)
                              {
                                v1091[0].__begin_ = v476;
                                operator delete(v476);
                              }
LABEL_843:
                              switch(v1100.__r_.__value_.__s.__data_[12])
                              {
                                case 2:
                                  v525 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                  do
                                  {
                                    v526 = __ldaxr(v525);
                                    v527 = v526 - 1;
                                  }
                                  while (__stlxr(v527, v525));
                                  if (v527)
                                    goto LABEL_891;
                                  v528 = v1100.__r_.__value_.__r.__words[0];
                                  if (!v1100.__r_.__value_.__r.__words[0])
                                    goto LABEL_885;
                                  if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                    operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                                  v529 = v528;
                                  v530 = 0x1012C404EF22A49;
                                  goto LABEL_884;
                                case 3:
                                  goto LABEL_856;
                                case 4:
                                  goto LABEL_851;
                                case 5:
                                  goto LABEL_863;
                                case 8:
                                  goto LABEL_869;
                                case 9:
                                  v548 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                                  do
                                  {
                                    v549 = __ldaxr(v548);
                                    v550 = v549 - 1;
                                  }
                                  while (__stlxr(v550, v548));
                                  if (v550)
                                    goto LABEL_891;
                                  v551 = v1100.__r_.__value_.__r.__words[0];
                                  if (!v1100.__r_.__value_.__r.__words[0])
                                    goto LABEL_885;
                                  v552 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                                  if (v552)
                                  {
                                    *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v552;
                                    operator delete(v552);
                                  }
                                  v553 = *(void **)(v551 + 24);
                                  if (v553)
                                  {
                                    *(_QWORD *)(v551 + 32) = v553;
                                    operator delete(v553);
                                  }
                                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v551 + 8);
                                  v529 = v551;
                                  v547 = 2071181815;
                                  goto LABEL_883;
                                default:
                                  goto LABEL_891;
                              }
                            }
                            v498 = 1;
                            v499 = v480 - 1;
                          }
LABEL_792:
                          if ((v499 & 0x8000000000000000) != 0 || !v498)
                            goto LABEL_1591;
                        }
                      default:
                        goto LABEL_1856;
                    }
                    break;
                  case 9:
                    v360 = v55[12];
                    if (v360 < 9)
                      goto LABEL_581;
                    if (v360 != 9)
                      goto LABEL_1856;
                    v370 = v1100.__r_.__value_.__r.__words[0];
                    v371 = *(_QWORD **)v55;
                    if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                      goto LABEL_684;
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v371 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_581;
                    v373 = (char *)v371[3];
                    v372 = (char *)v371[4];
                    v374 = v372 - v373;
                    if (v372 == v373)
                      goto LABEL_684;
                    if (!v371[1])
                      goto LABEL_684;
                    v375 = 1;
                    do
                    {
                      v376 = *(_QWORD *)v373;
                      v373 += 8;
                      v375 *= v376;
                    }
                    while (v373 != v372);
                    if (!v375)
                      goto LABEL_684;
                    v1096 = 0;
                    std::vector<unsigned long>::vector(v1091, v374 >> 3, &v1096);
                    v377 = v1091[0].__first_;
                    v378 = v1091[0].__begin_;
                    v379 = **(_QWORD **)(v370 + 8);
                    v380 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
                    v381 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                    v382 = v381 - 1;
                    if (v381 <= 1)
                      v383 = 1;
                    else
                      v383 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                    while (1)
                    {
                      if (v378 == v377)
                      {
                        v391 = 0;
                        v354.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v371[1] + 8 * v371[9]);
                      }
                      else
                      {
                        v384 = 0;
                        v385 = (uint64_t *)v371[6];
                        v386 = (std::string::__raw *)v377;
                        v387 = v383;
                        do
                        {
                          v389 = v386->__words[0];
                          v386 = (std::string::__raw *)((char *)v386 + 8);
                          v388 = v389;
                          v390 = *v385++;
                          v384 += v390 * v388;
                          --v387;
                        }
                        while (v387);
                        v391 = 0;
                        v354.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v371[1] + 8 * (v371[9] + v384));
                        v392 = *(uint64_t **)(v370 + 48);
                        v393 = (std::string::__raw *)v377;
                        v394 = v383;
                        do
                        {
                          v396 = v393->__words[0];
                          v393 = (std::string::__raw *)((char *)v393 + 8);
                          v395 = v396;
                          v397 = *v392++;
                          v391 += v397 * v395;
                          --v394;
                        }
                        while (v394);
                      }
                      v398 = *(double *)(v379 + 8 * (*(_QWORD *)(v370 + 72) + v391));
                      v359 = v354.n128_f64[0] == v398;
                      if (v354.n128_f64[0] != v398)
                        goto LABEL_1440;
                      v399 = v381;
                      v400 = v381 - 1;
                      if (v380 >= 1)
                      {
                        v401 = v371[3];
                        v402 = v377->__r_.__value_.__r.__words[v382] + 1;
                        v377->__r_.__value_.__r.__words[v382] = v402;
                        if (v402 >= *(_QWORD *)(v401 + 8 * v382))
                        {
                          v403 = v401 - 16;
                          v404 = v381;
                          v405 = (unint64_t *)((char *)v377 + (v380 & 0xFFFFFFFFFFFFFFF8) - 16);
                          while (1)
                          {
                            v406 = v404 - 1;
                            v405[1] = 0;
                            if ((uint64_t)(v404 - 1) <= 0)
                              break;
                            v407 = *v405 + 1;
                            *v405-- = v407;
                            v408 = *(_QWORD *)(v403 + 8 * v404--);
                            if (v407 < v408)
                            {
                              v400 = v406 - 1;
                              v399 = 1;
                              goto LABEL_634;
                            }
                          }
                          v359 = 1;
LABEL_1440:
                          if (v377)
                          {
                            v1091[0].__begin_ = v377;
                            operator delete(v377);
                          }
LABEL_685:
                          switch(v1100.__r_.__value_.__s.__data_[12])
                          {
                            case 2:
                              v426 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                              do
                              {
                                v427 = __ldaxr(v426);
                                v428 = v427 - 1;
                              }
                              while (__stlxr(v428, v426));
                              if (v428)
                                goto LABEL_733;
                              v429 = v1100.__r_.__value_.__r.__words[0];
                              if (!v1100.__r_.__value_.__r.__words[0])
                                goto LABEL_727;
                              if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                                operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                              v430 = v429;
                              v431 = 0x1012C404EF22A49;
                              goto LABEL_726;
                            case 3:
                              goto LABEL_698;
                            case 4:
                              goto LABEL_693;
                            case 5:
                              goto LABEL_705;
                            case 8:
                              goto LABEL_711;
                            case 9:
                              v449 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                              do
                              {
                                v450 = __ldaxr(v449);
                                v451 = v450 - 1;
                              }
                              while (__stlxr(v451, v449));
                              if (v451)
                                goto LABEL_733;
                              v452 = v1100.__r_.__value_.__r.__words[0];
                              if (!v1100.__r_.__value_.__r.__words[0])
                                goto LABEL_727;
                              v453 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                              if (v453)
                              {
                                *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v453;
                                operator delete(v453);
                              }
                              v454 = *(void **)(v452 + 24);
                              if (v454)
                              {
                                *(_QWORD *)(v452 + 32) = v454;
                                operator delete(v454);
                              }
                              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v452 + 8);
                              v430 = v452;
                              v448 = 2071181815;
                              goto LABEL_725;
                            default:
                              goto LABEL_733;
                          }
                        }
                        v399 = 1;
                        v400 = v381 - 1;
                      }
LABEL_634:
                      if ((v400 & 0x8000000000000000) != 0 || !v399)
                        goto LABEL_1440;
                    }
                  default:
                    goto LABEL_1856;
                }
                break;
              case 9:
                v259 = v55[12];
                if (v259 < 9)
                  goto LABEL_423;
                if (v259 != 9)
                  goto LABEL_1856;
                v269 = v1100.__r_.__value_.__r.__words[0];
                v270 = *(_QWORD **)v55;
                if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
                  goto LABEL_526;
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v270 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_423;
                v272 = (char *)v270[3];
                v271 = (char *)v270[4];
                v273 = v271 - v272;
                if (v271 == v272)
                  goto LABEL_526;
                if (!v270[1])
                  goto LABEL_526;
                v274 = 1;
                do
                {
                  v275 = *(_QWORD *)v272;
                  v272 += 8;
                  v274 *= v275;
                }
                while (v272 != v271);
                if (!v274)
                  goto LABEL_526;
                v1096 = 0;
                std::vector<unsigned long>::vector(v1091, v273 >> 3, &v1096);
                v276 = v1091[0].__first_;
                v277 = v1091[0].__begin_;
                v278 = **(_QWORD **)(v269 + 8);
                v279 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
                v280 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                v281 = v280 - 1;
                if (v280 <= 1)
                  v282 = 1;
                else
                  v282 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
                while (1)
                {
                  if (v277 == v276)
                  {
                    v290 = 0;
                    v255.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v270[1] + 8 * v270[9]);
                  }
                  else
                  {
                    v283 = 0;
                    v284 = (uint64_t *)v270[6];
                    v285 = (std::string::__raw *)v276;
                    v286 = v282;
                    do
                    {
                      v288 = v285->__words[0];
                      v285 = (std::string::__raw *)((char *)v285 + 8);
                      v287 = v288;
                      v289 = *v284++;
                      v283 += v289 * v287;
                      --v286;
                    }
                    while (v286);
                    v290 = 0;
                    v255.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v270[1] + 8 * (v270[9] + v283));
                    v291 = *(uint64_t **)(v269 + 48);
                    v292 = (std::string::__raw *)v276;
                    v293 = v282;
                    do
                    {
                      v295 = v292->__words[0];
                      v292 = (std::string::__raw *)((char *)v292 + 8);
                      v294 = v295;
                      v296 = *v291++;
                      v290 += v296 * v294;
                      --v293;
                    }
                    while (v293);
                  }
                  v297 = *(double *)(v278 + 8 * (*(_QWORD *)(v269 + 72) + v290));
                  v258 = v255.n128_f64[0] == v297;
                  if (v255.n128_f64[0] != v297)
                    goto LABEL_1289;
                  v298 = v280;
                  v299 = v280 - 1;
                  if (v279 >= 1)
                  {
                    v300 = v270[3];
                    v301 = v276->__r_.__value_.__r.__words[v281] + 1;
                    v276->__r_.__value_.__r.__words[v281] = v301;
                    if (v301 >= *(_QWORD *)(v300 + 8 * v281))
                    {
                      v302 = v300 - 16;
                      v303 = v280;
                      v304 = (unint64_t *)((char *)v276 + (v279 & 0xFFFFFFFFFFFFFFF8) - 16);
                      while (1)
                      {
                        v305 = v303 - 1;
                        v304[1] = 0;
                        if ((uint64_t)(v303 - 1) <= 0)
                          break;
                        v306 = *v304 + 1;
                        *v304-- = v306;
                        v307 = *(_QWORD *)(v302 + 8 * v303--);
                        if (v306 < v307)
                        {
                          v299 = v305 - 1;
                          v298 = 1;
                          goto LABEL_476;
                        }
                      }
                      v258 = 1;
LABEL_1289:
                      if (v276)
                      {
                        v1091[0].__begin_ = v276;
                        operator delete(v276);
                      }
LABEL_527:
                      switch(v1100.__r_.__value_.__s.__data_[12])
                      {
                        case 2:
                          v325 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                          do
                          {
                            v326 = __ldaxr(v325);
                            v327 = v326 - 1;
                          }
                          while (__stlxr(v327, v325));
                          if (v327)
                            goto LABEL_575;
                          v328 = v1100.__r_.__value_.__r.__words[0];
                          if (!v1100.__r_.__value_.__r.__words[0])
                            goto LABEL_569;
                          if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                            operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                          v329 = v328;
                          v330 = 0x1012C404EF22A49;
                          goto LABEL_568;
                        case 3:
                          goto LABEL_540;
                        case 4:
                          goto LABEL_535;
                        case 5:
                          goto LABEL_547;
                        case 8:
                          goto LABEL_553;
                        case 9:
                          v348 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                          do
                          {
                            v349 = __ldaxr(v348);
                            v350 = v349 - 1;
                          }
                          while (__stlxr(v350, v348));
                          if (v350)
                            goto LABEL_575;
                          v351 = v1100.__r_.__value_.__r.__words[0];
                          if (!v1100.__r_.__value_.__r.__words[0])
                            goto LABEL_569;
                          v352 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                          if (v352)
                          {
                            *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v352;
                            operator delete(v352);
                          }
                          v353 = *(void **)(v351 + 24);
                          if (v353)
                          {
                            *(_QWORD *)(v351 + 32) = v353;
                            operator delete(v353);
                          }
                          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v351 + 8);
                          v329 = v351;
                          v347 = 2071181815;
                          goto LABEL_567;
                        default:
                          goto LABEL_575;
                      }
                    }
                    v298 = 1;
                    v299 = v280 - 1;
                  }
LABEL_476:
                  if ((v299 & 0x8000000000000000) != 0 || !v298)
                    goto LABEL_1289;
                }
              default:
                goto LABEL_1856;
            }
            break;
          case 9:
            v160 = v55[12];
            if (v160 < 9)
              goto LABEL_266;
            if (v160 != 9)
              goto LABEL_1856;
            v170 = v1100.__r_.__value_.__r.__words[0];
            v171 = *(_QWORD **)v55;
            if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
              goto LABEL_368;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v171 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_266;
            v173 = (char *)v171[3];
            v172 = (char *)v171[4];
            v174 = v172 - v173;
            if (v172 == v173)
              goto LABEL_368;
            if (!v171[1])
              goto LABEL_368;
            v175 = 1;
            do
            {
              v176 = *(_QWORD *)v173;
              v173 += 8;
              v175 *= v176;
            }
            while (v173 != v172);
            if (!v175)
              goto LABEL_368;
            v1096 = 0;
            std::vector<unsigned long>::vector(v1091, v174 >> 3, &v1096);
            v177 = v1091[0].__first_;
            v178 = v1091[0].__begin_;
            v179 = **(_QWORD **)(v170 + 8);
            v180 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
            v181 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
            v182 = v181 - 1;
            if (v181 <= 1)
              v183 = 1;
            else
              v183 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
            while (1)
            {
              if (v178 == v177)
              {
                v191 = 0;
                v156.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v171[1] + 8 * v171[9]);
              }
              else
              {
                v184 = 0;
                v185 = (uint64_t *)v171[6];
                v186 = (std::string::__raw *)v177;
                v187 = v183;
                do
                {
                  v189 = v186->__words[0];
                  v186 = (std::string::__raw *)((char *)v186 + 8);
                  v188 = v189;
                  v190 = *v185++;
                  v184 += v190 * v188;
                  --v187;
                }
                while (v187);
                v191 = 0;
                v156.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v171[1] + 8 * (v171[9] + v184));
                v192 = *(uint64_t **)(v170 + 48);
                v193 = (std::string::__raw *)v177;
                v194 = v183;
                do
                {
                  v196 = v193->__words[0];
                  v193 = (std::string::__raw *)((char *)v193 + 8);
                  v195 = v196;
                  v197 = *v192++;
                  v191 += v197 * v195;
                  --v194;
                }
                while (v194);
              }
              v198 = *(double *)(v179 + 8 * (*(_QWORD *)(v170 + 72) + v191));
              v159 = v156.n128_f64[0] == v198;
              if (v156.n128_f64[0] != v198)
                goto LABEL_1138;
              v199 = v181;
              v200 = v181 - 1;
              if (v180 >= 1)
              {
                v201 = v171[3];
                v202 = v177->__r_.__value_.__r.__words[v182] + 1;
                v177->__r_.__value_.__r.__words[v182] = v202;
                if (v202 >= *(_QWORD *)(v201 + 8 * v182))
                {
                  v203 = v201 - 16;
                  v204 = v181;
                  v205 = (unint64_t *)((char *)v177 + (v180 & 0xFFFFFFFFFFFFFFF8) - 16);
                  while (1)
                  {
                    v206 = v204 - 1;
                    v205[1] = 0;
                    if ((uint64_t)(v204 - 1) <= 0)
                      break;
                    v207 = *v205 + 1;
                    *v205-- = v207;
                    v208 = *(_QWORD *)(v203 + 8 * v204--);
                    if (v207 < v208)
                    {
                      v200 = v206 - 1;
                      v199 = 1;
                      goto LABEL_319;
                    }
                  }
                  v159 = 1;
LABEL_1138:
                  if (v177)
                  {
                    v1091[0].__begin_ = v177;
                    operator delete(v177);
                  }
LABEL_369:
                  switch(v1100.__r_.__value_.__s.__data_[12])
                  {
                    case 2:
                      v226 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                      do
                      {
                        v227 = __ldaxr(v226);
                        v228 = v227 - 1;
                      }
                      while (__stlxr(v228, v226));
                      if (v228)
                        goto LABEL_417;
                      v229 = v1100.__r_.__value_.__r.__words[0];
                      if (!v1100.__r_.__value_.__r.__words[0])
                        goto LABEL_411;
                      if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                        operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                      v230 = v229;
                      v231 = 0x1012C404EF22A49;
                      goto LABEL_410;
                    case 3:
                      goto LABEL_382;
                    case 4:
                      goto LABEL_377;
                    case 5:
                      goto LABEL_389;
                    case 8:
                      goto LABEL_395;
                    case 9:
                      v249 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                      do
                      {
                        v250 = __ldaxr(v249);
                        v251 = v250 - 1;
                      }
                      while (__stlxr(v251, v249));
                      if (v251)
                        goto LABEL_417;
                      v252 = v1100.__r_.__value_.__r.__words[0];
                      if (!v1100.__r_.__value_.__r.__words[0])
                        goto LABEL_411;
                      v253 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                      if (v253)
                      {
                        *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v253;
                        operator delete(v253);
                      }
                      v254 = *(void **)(v252 + 24);
                      if (v254)
                      {
                        *(_QWORD *)(v252 + 32) = v254;
                        operator delete(v254);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v252 + 8);
                      v230 = v252;
                      v248 = 2071181815;
                      goto LABEL_409;
                    default:
                      goto LABEL_417;
                  }
                }
                v199 = 1;
                v200 = v181 - 1;
              }
LABEL_319:
              if ((v200 & 0x8000000000000000) != 0 || !v199)
                goto LABEL_1138;
            }
          default:
            goto LABEL_1856;
        }
        break;
      case 9:
        v59 = v55[12];
        if (v59 < 9)
          goto LABEL_137;
        if (v59 != 9)
          goto LABEL_1856;
        v60 = v1100.__r_.__value_.__r.__words[0];
        v61 = *(_QWORD **)v55;
        if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
          goto LABEL_211;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v61 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_137;
        v63 = (char *)v61[3];
        v62 = (char *)v61[4];
        v64 = v62 - v63;
        if (v62 == v63)
          goto LABEL_211;
        if (!v61[1])
          goto LABEL_211;
        v65 = 1;
        do
        {
          v66 = *(_QWORD *)v63;
          v63 += 8;
          v65 *= v66;
        }
        while (v63 != v62);
        if (!v65)
          goto LABEL_211;
        v1096 = 0;
        std::vector<unsigned long>::vector(v1091, v64 >> 3, &v1096);
        v67 = v1091[0].__first_;
        v68 = v1091[0].__begin_;
        v69 = **(_QWORD **)(v60 + 8);
        v70 = (char *)v1091[0].__begin_ - (char *)v1091[0].__first_;
        v71 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
        v72 = v71 - 1;
        if (v71 <= 1)
          v73 = 1;
        else
          v73 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
        while (1)
        {
          if (v68 == v67)
          {
            v81 = 0;
            v54.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v61[1] + 8 * v61[9]);
          }
          else
          {
            v74 = 0;
            v75 = (uint64_t *)v61[6];
            v76 = (std::string::__raw *)v67;
            v77 = v73;
            do
            {
              v79 = v76->__words[0];
              v76 = (std::string::__raw *)((char *)v76 + 8);
              v78 = v79;
              v80 = *v75++;
              v74 += v80 * v78;
              --v77;
            }
            while (v77);
            v81 = 0;
            v54.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v61[1] + 8 * (v61[9] + v74));
            v82 = *(uint64_t **)(v60 + 48);
            v83 = (std::string::__raw *)v67;
            v84 = v73;
            do
            {
              v86 = v83->__words[0];
              v83 = (std::string::__raw *)((char *)v83 + 8);
              v85 = v86;
              v87 = *v82++;
              v81 += v87 * v85;
              --v84;
            }
            while (v84);
          }
          v88 = *(double *)(v69 + 8 * (*(_QWORD *)(v60 + 72) + v81));
          v58 = v54.n128_f64[0] == v88;
          if (v54.n128_f64[0] != v88)
            goto LABEL_983;
          v89 = v71;
          v90 = v71 - 1;
          if (v70 >= 1)
          {
            v91 = v61[3];
            v92 = v67->__r_.__value_.__r.__words[v72] + 1;
            v67->__r_.__value_.__r.__words[v72] = v92;
            if (v92 >= *(_QWORD *)(v91 + 8 * v72))
            {
              v93 = v91 - 16;
              v94 = v71;
              v95 = (unint64_t *)((char *)v67 + (v70 & 0xFFFFFFFFFFFFFFF8) - 16);
              while (1)
              {
                v96 = v94 - 1;
                v95[1] = 0;
                if ((uint64_t)(v94 - 1) <= 0)
                  break;
                v97 = *v95 + 1;
                *v95-- = v97;
                v98 = *(_QWORD *)(v93 + 8 * v94--);
                if (v97 < v98)
                {
                  v90 = v96 - 1;
                  v89 = 1;
                  goto LABEL_130;
                }
              }
              v58 = 1;
LABEL_983:
              if (v67)
              {
                v1091[0].__begin_ = v67;
                operator delete(v67);
              }
LABEL_212:
              switch(v1100.__r_.__value_.__s.__data_[12])
              {
                case 2:
                  v127 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                  do
                  {
                    v128 = __ldaxr(v127);
                    v129 = v128 - 1;
                  }
                  while (__stlxr(v129, v127));
                  if (v129)
                    goto LABEL_260;
                  v130 = v1100.__r_.__value_.__r.__words[0];
                  if (!v1100.__r_.__value_.__r.__words[0])
                    goto LABEL_254;
                  if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                    operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
                  v131 = v130;
                  v132 = 0x1012C404EF22A49;
                  goto LABEL_253;
                case 3:
                  goto LABEL_225;
                case 4:
                  goto LABEL_220;
                case 5:
                  goto LABEL_232;
                case 8:
                  goto LABEL_238;
                case 9:
                  v150 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
                  do
                  {
                    v151 = __ldaxr(v150);
                    v152 = v151 - 1;
                  }
                  while (__stlxr(v152, v150));
                  if (v152)
                    goto LABEL_260;
                  v153 = v1100.__r_.__value_.__r.__words[0];
                  if (!v1100.__r_.__value_.__r.__words[0])
                    goto LABEL_254;
                  v154 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 48);
                  if (v154)
                  {
                    *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 56) = v154;
                    operator delete(v154);
                  }
                  v155 = *(void **)(v153 + 24);
                  if (v155)
                  {
                    *(_QWORD *)(v153 + 32) = v155;
                    operator delete(v155);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v153 + 8);
                  v131 = v153;
                  v149 = 2071181815;
                  goto LABEL_252;
                default:
                  goto LABEL_260;
              }
            }
            v89 = 1;
            v90 = v71 - 1;
          }
LABEL_130:
          if ((v90 & 0x8000000000000000) != 0 || !v89)
            goto LABEL_983;
        }
      default:
        goto LABEL_1856;
    }
    switch(v1100.__r_.__value_.__s.__data_[12])
    {
      case 0:
        switch(v55[12])
        {
          case 0u:
            v974 = *(_QWORD *)v55 == v1100.__r_.__value_.__r.__words[0];
            goto LABEL_1735;
          case 1u:
            v973.n128_u64[0] = *(_QWORD *)v55;
            v983 = v1100.__r_.__value_.__r.__words[0];
            goto LABEL_1734;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_1806;
          case 6u:
            v974 = v1100.__r_.__value_.__r.__words[0] == (uint64_t)(*(_QWORD *)v55 << 8) >> 8
                && *((_DWORD *)v55 + 2) == 0;
            goto LABEL_1735;
          default:
            goto LABEL_1856;
        }
      case 1:
        switch(v55[12])
        {
          case 0u:
            v973.n128_u64[0] = v1100.__r_.__value_.__r.__words[0];
            v983 = *(_QWORD *)v55;
LABEL_1734:
            v974 = v973.n128_f64[0] == (double)v983;
            goto LABEL_1735;
          case 1u:
            v973.n128_u64[0] = *(_QWORD *)v55;
            v976 = *(double *)v55 == *(double *)&v1100.__r_.__value_.__l.__data_;
            goto LABEL_1763;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_1806;
          case 6u:
            v973.n128_f64[0] = vabdd_f64((double)*((int *)v55 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v55 << 8) >> 8), *(double *)&v1100.__r_.__value_.__l.__data_);
            goto LABEL_1740;
          default:
            goto LABEL_1856;
        }
      case 2:
        v976 = 0;
        v978 = v55[12];
        if (v978 - 3 < 7 || v978 < 2)
          goto LABEL_1763;
        if (v978 != 2)
          goto LABEL_1856;
        v979 = *(double *)v55;
        if (*(char *)(*(_QWORD *)v55 + 31) < 0)
          v980 = *(_QWORD *)(*(_QWORD *)&v979 + 16);
        else
          v980 = *(unsigned __int8 *)(*(_QWORD *)v55 + 31);
        if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
          v1018 = *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16);
        else
          v1018 = *(unsigned __int8 *)(v1100.__r_.__value_.__r.__words[0] + 31);
        if (v980 != v1018)
          goto LABEL_1663;
        v1019 = (_QWORD *)(*(_QWORD *)&v979 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
          v1019 = (_QWORD *)*v1019;
        v1020 = (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8);
        if ((*(_BYTE *)(v1100.__r_.__value_.__r.__words[0] + 31) & 0x80) != 0)
          v1020 = (_QWORD *)*v1020;
        if ((*(_BYTE *)(*(_QWORD *)v55 + 31) & 0x80) != 0)
        {
          v974 = memcmp(v1019, v1020, v980) == 0;
LABEL_1735:
          v976 = v974;
          goto LABEL_1763;
        }
        if (v980)
        {
          v1021 = v980 - 1;
          do
          {
            v1023 = *(unsigned __int8 *)v1019;
            v1019 = (_QWORD *)((char *)v1019 + 1);
            v1022 = v1023;
            v1025 = *(unsigned __int8 *)v1020;
            v1020 = (_QWORD *)((char *)v1020 + 1);
            v1024 = v1025;
            v100 = v1021-- != 0;
            v1026 = v100;
            v976 = v1022 == v1024;
          }
          while (v1022 == v1024 && (v1026 & 1) != 0);
          goto LABEL_1763;
        }
        goto LABEL_1762;
      case 3:
        v981 = v55[12];
        if (v981 > 9)
          goto LABEL_1856;
        if (v981 == 3)
        {
          v1010 = *(unint64_t **)(*(_QWORD *)v55 + 8);
          v1011 = *(_QWORD **)(*(_QWORD *)v55 + 16);
          v1012 = v1011 - v1010;
          v1013 = *(double **)(v1100.__r_.__value_.__r.__words[0] + 8);
          if (v1012 == (uint64_t)(*(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v1013) >> 3)
          {
            if (v1011 == v1010)
            {
LABEL_1762:
              v976 = 1;
              goto LABEL_1763;
            }
            if (v1012 <= 1)
              v1014 = 1;
            else
              v1014 = v1011 - v1010;
            v973.n128_u64[0] = *v1010;
            if (*(double *)v1010 == *v1013)
            {
              v1015 = 1;
              do
              {
                v1016 = v1015;
                if (v1014 == v1015)
                  break;
                v973.n128_u64[0] = v1010[v1015];
                v1017 = v1013[v1015++];
              }
              while (v973.n128_f64[0] == v1017);
              v976 = v1016 >= v1012;
              goto LABEL_1763;
            }
          }
LABEL_1663:
          v976 = 0;
          goto LABEL_1763;
        }
        v976 = 0;
LABEL_1776:
        v1037 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v1038 = __ldaxr(v1037);
          v1039 = v1038 - 1;
        }
        while (__stlxr(v1039, v1037));
        if (v1039)
          goto LABEL_1803;
        v1040 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_1801;
        v1041 = *(void **)(v1100.__r_.__value_.__r.__words[0] + 8);
        if (v1041)
        {
          *(_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 16) = v1041;
          operator delete(v1041);
        }
        v1031 = (_QWORD *)v1040;
        v1032 = 0x1080C409938AC02;
        goto LABEL_1800;
      case 4:
        v975 = v55[12];
        if (v975 > 9)
          goto LABEL_1856;
        if (v975 == 4)
        {
          v986 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t *)(*(_QWORD *)v55 + 8), (_QWORD *)(v1100.__r_.__value_.__r.__words[0] + 8));
          goto LABEL_1729;
        }
        v976 = 0;
LABEL_1771:
        v1033 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v1034 = __ldaxr(v1033);
          v1035 = v1034 - 1;
        }
        while (__stlxr(v1035, v1033));
        if (v1035)
          goto LABEL_1803;
        v1036 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_1801;
        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
        goto LABEL_1788;
      case 5:
        v984 = v55[12];
        if (v984 > 9)
          goto LABEL_1856;
        if (v984 == 5)
        {
          v986 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v1095, (uint64_t **)(*(_QWORD *)v55 + 8), (uint64_t **)(v1100.__r_.__value_.__r.__words[0] + 8));
LABEL_1729:
          v976 = v986;
LABEL_1763:
          switch(v1100.__r_.__value_.__s.__data_[12])
          {
            case 2:
              v1027 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
              do
              {
                v1028 = __ldaxr(v1027);
                v1029 = v1028 - 1;
              }
              while (__stlxr(v1029, v1027));
              if (v1029)
                goto LABEL_1803;
              v1030 = v1100.__r_.__value_.__r.__words[0];
              if (!v1100.__r_.__value_.__r.__words[0])
                goto LABEL_1801;
              if (*(char *)(v1100.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v1100.__r_.__value_.__r.__words[0] + 8));
              v1031 = (_QWORD *)v1030;
              v1032 = 0x1012C404EF22A49;
              goto LABEL_1800;
            case 3:
              goto LABEL_1776;
            case 4:
              goto LABEL_1771;
            case 5:
              goto LABEL_1783;
            case 8:
              goto LABEL_1789;
            case 9:
              v1050 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
              do
              {
                v1051 = __ldaxr(v1050);
                v1052 = v1051 - 1;
              }
              while (__stlxr(v1052, v1050));
              if (v1052)
                goto LABEL_1803;
              if (!v1100.__r_.__value_.__r.__words[0])
                goto LABEL_1801;
              v1031 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1100.__r_.__value_.__l.__data_);
              v1049 = 2071181815;
              goto LABEL_1799;
            default:
              goto LABEL_1803;
          }
        }
        v976 = 0;
LABEL_1783:
        v1042 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
        do
        {
          v1043 = __ldaxr(v1042);
          v1044 = v1043 - 1;
        }
        while (__stlxr(v1044, v1042));
        if (v1044)
          goto LABEL_1803;
        v1036 = v1100.__r_.__value_.__r.__words[0];
        if (!v1100.__r_.__value_.__r.__words[0])
          goto LABEL_1801;
        v1091[0].__first_ = (std::__split_buffer<std::string>::pointer)(v1100.__r_.__value_.__r.__words[0] + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v1091);
LABEL_1788:
        v1031 = (_QWORD *)v1036;
        v1032 = 0x1020C405E66F15BLL;
        goto LABEL_1800;
      case 6:
        switch(v55[12])
        {
          case 0u:
            v974 = *(_QWORD *)v55 == (uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8
                && LODWORD(v1100.__r_.__value_.__r.__words[1]) == 0;
            goto LABEL_1735;
          case 1u:
            v973.n128_f64[0] = vabdd_f64(*(double *)v55, (double)SLODWORD(v1100.__r_.__value_.__r.__words[1]) / 1000000.0+ (double)((uint64_t)(v1100.__r_.__value_.__r.__words[0] << 8) >> 8));
LABEL_1740:
            v976 = v973.n128_f64[0] < 0.0000005;
            goto LABEL_1763;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_1806;
          case 6u:
            v974 = ((v1100.__r_.__value_.__r.__words[0] ^ *(_QWORD *)v55) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v55 + 2) == LODWORD(v1100.__r_.__value_.__r.__words[1]);
            goto LABEL_1735;
          default:
            goto LABEL_1856;
        }
      case 7:
        v982 = v55[12];
        if (v982 < 7 || v982 - 8 < 2)
          goto LABEL_1806;
        if (v982 != 7)
          goto LABEL_1856;
        goto LABEL_1804;
      case 8:
        v985 = v55[12];
        if (v985 < 8 || v985 == 9)
        {
          v976 = 0;
LABEL_1789:
          v1045 = (unint64_t *)v1100.__r_.__value_.__r.__words[0];
          do
          {
            v1046 = __ldaxr(v1045);
            v1047 = v1046 - 1;
          }
          while (__stlxr(v1047, v1045));
          if (v1047)
          {
LABEL_1803:
            if (v976)
              goto LABEL_1804;
          }
          else
          {
            v1048 = v1100.__r_.__value_.__r.__words[0];
            if (v1100.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v1100.__r_.__value_.__r.__words[0] + 16));
              v1031 = (_QWORD *)v1048;
              v1049 = -235920773;
LABEL_1799:
              v1032 = v1049 | 0x1030C4000000000;
LABEL_1800:
              MEMORY[0x219A19A08](v1031, v1032, v973);
            }
LABEL_1801:
            if (v976)
            {
LABEL_1804:
              v356 = v1089.__r_.__value_.__r.__words[0];
              v357 = 10;
              goto LABEL_1805;
            }
          }
LABEL_1806:
          ++v53;
          v52 = *a3;
          if (v53 >= (a3[1] - *a3) >> 4)
            goto LABEL_1811;
          continue;
        }
        if (v985 == 8)
        {
          v986 = turi::image_type::operator==(*(_QWORD *)v55 + 8, v1100.__r_.__value_.__r.__words[0] + 8);
          goto LABEL_1729;
        }
LABEL_1856:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      case 9:
        v977 = v55[12];
        if (v977 < 9)
          goto LABEL_1663;
        if (v977 != 9)
          goto LABEL_1856;
        v987 = v1100.__r_.__value_.__r.__words[0];
        v988 = *(_QWORD **)v55;
        if (v1100.__r_.__value_.__r.__words[0] == *(_QWORD *)v55)
          goto LABEL_1762;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v988 + 1), v1100.__r_.__value_.__r.__words[0] + 8))goto LABEL_1663;
        v990 = (char *)v988[3];
        v989 = (char *)v988[4];
        v991 = v989 - v990;
        if (v989 == v990)
          goto LABEL_1762;
        if (!v988[1])
          goto LABEL_1762;
        v992 = 1;
        do
        {
          v993 = *(_QWORD *)v990;
          v990 += 8;
          v992 *= v993;
        }
        while (v990 != v989);
        if (!v992)
          goto LABEL_1762;
        v1096 = 0;
        std::vector<unsigned long>::vector(v1091, v991 >> 3, &v1096);
        do
        {
          v994 = v1091[0].__first_;
          if (v1091[0].__begin_ == v1091[0].__first_)
          {
            v1003 = 0;
            v973.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v988[1] + 8 * v988[9]);
          }
          else
          {
            v995 = 0;
            v996 = ((char *)v1091[0].__begin_ - (char *)v1091[0].__first_) >> 3;
            v997 = (uint64_t *)v988[6];
            if (v996 <= 1)
              v996 = 1;
            v998 = v1091[0].__first_;
            v999 = v996;
            do
            {
              v1001 = v998->__r_.__value_.__r.__words[0];
              v998 = (std::__split_buffer<std::string>::pointer)((char *)v998 + 8);
              v1000 = v1001;
              v1002 = *v997++;
              v995 += v1002 * v1000;
              --v999;
            }
            while (v999);
            v1003 = 0;
            v973.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v988[1] + 8 * (v988[9] + v995));
            v1004 = *(uint64_t **)(v987 + 48);
            v1005 = v1091[0].__first_;
            do
            {
              v1007 = v1005->__r_.__value_.__r.__words[0];
              v1005 = (std::__split_buffer<std::string>::pointer)((char *)v1005 + 8);
              v1006 = v1007;
              v1008 = *v1004++;
              v1003 += v1008 * v1006;
              --v996;
            }
            while (v996);
          }
          v1009 = *(double *)(**(_QWORD **)(v987 + 8) + 8 * (*(_QWORD *)(v987 + 72) + v1003));
          v976 = v973.n128_f64[0] == v1009;
          if (v973.n128_f64[0] != v1009)
            goto LABEL_1711;
        }
        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v988 + 1), (uint64_t *)v1091));
        v994 = v1091[0].__first_;
LABEL_1711:
        if (v994)
        {
          v1091[0].__begin_ = v994;
          operator delete(v994);
        }
        goto LABEL_1763;
      default:
        goto LABEL_1856;
    }
  }
}

void sub_2181E8BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char *a29,char *a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v72;

  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  switch(*(_BYTE *)(v44 - 132))
  {
    case 2:
      v46 = *(unint64_t **)(v44 - 144);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_47;
      v64 = *(_QWORD *)(v44 - 144);
      if (!v64)
        goto LABEL_47;
      if (*(char *)(v64 + 31) < 0)
        operator delete(*(void **)(v64 + 8));
      v65 = (_QWORD *)v64;
      v66 = 0x1012C404EF22A49;
      goto LABEL_46;
    case 3:
      v49 = *(unint64_t **)(v44 - 144);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_47;
      v67 = *(_QWORD **)(v44 - 144);
      if (!v67)
        goto LABEL_47;
      v68 = (void *)v67[1];
      if (v68)
      {
        v67[2] = v68;
        operator delete(v68);
      }
      v65 = v67;
      v66 = 0x1080C409938AC02;
      goto LABEL_46;
    case 4:
      v52 = *(unint64_t **)(v44 - 144);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_47;
      v69 = *(_QWORD **)(v44 - 144);
      if (!v69)
        goto LABEL_47;
      *(_QWORD *)(v44 - 192) = v69 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 192));
      goto LABEL_38;
    case 5:
      v55 = *(unint64_t **)(v44 - 144);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_47;
      v69 = *(_QWORD **)(v44 - 144);
      if (!v69)
        goto LABEL_47;
      *(_QWORD *)(v44 - 192) = v69 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 192));
LABEL_38:
      v65 = v69;
      v66 = 0x1020C405E66F15BLL;
      goto LABEL_46;
    case 8:
      v58 = *(unint64_t **)(v44 - 144);
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (v60)
        goto LABEL_47;
      v70 = *(_QWORD *)(v44 - 144);
      if (!v70)
        goto LABEL_47;
      boost::detail::shared_count::~shared_count((unsigned int **)(v70 + 16));
      v65 = (_QWORD *)v70;
      v71 = -235920773;
      goto LABEL_45;
    case 9:
      v61 = *(unint64_t **)(v44 - 144);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (v63)
        goto LABEL_47;
      v72 = *(_QWORD **)(v44 - 144);
      if (!v72)
        goto LABEL_47;
      v65 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72);
      v71 = 2071181815;
LABEL_45:
      v66 = v71 | 0x1030C4000000000;
LABEL_46:
      MEMORY[0x219A19A08](v65, v66);
LABEL_47:
      if (a29)
      {
        a30 = a29;
        operator delete(a29);
      }
      a29 = &a36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_47;
  }
}

_QWORD *std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type,std::allocator<turi::unity_sarray::expand(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&)::date_element_type>>::__vallocate[abi:ne180100](a1, v5 >> 2);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[4 * (v5 >> 2)];
  }
  return a1;
}

void sub_2181EA1DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t i;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  const void **v56[3];
  _BYTE v57[8];
  _QWORD *v58;
  uint64_t *v59[3];
  void **v60;
  char v61;
  int v62;
  _QWORD v63[2];
  void *__p[2];
  char v65;
  uint64_t v66;
  std::string v67;
  _QWORD v68[4];
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v10 = a3 + 1;
  std::vector<turi::flexible_type>::vector(v59, a3[1] - *a3);
  v11 = *a3;
  if (*v10 != *a3)
  {
    v12 = 0;
    do
    {
      v13 = *(char *)(v11 + v12);
      v14 = &v59[0][2 * v12];
      switch(*((_BYTE *)v14 + 12))
      {
        case 2:
          v15 = (unint64_t *)*v14;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            v18 = *v14;
            if (!*v14)
              goto LABEL_45;
            if (*(char *)(v18 + 31) < 0)
              operator delete(*(void **)(v18 + 8));
            v19 = (_QWORD *)v18;
            v20 = 0x1012C404EF22A49;
            goto LABEL_44;
          }
          break;
        case 3:
          v21 = (unint64_t *)*v14;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = *v14;
            if (!*v14)
              goto LABEL_45;
            v25 = *(void **)(v24 + 8);
            if (v25)
            {
              *(_QWORD *)(v24 + 16) = v25;
              operator delete(v25);
            }
            v19 = (_QWORD *)v24;
            v20 = 0x1080C409938AC02;
            goto LABEL_44;
          }
          break;
        case 4:
          v26 = (unint64_t *)*v14;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = *v14;
            if (!*v14)
              goto LABEL_45;
            v67.__r_.__value_.__r.__words[0] = v29 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
            goto LABEL_28;
          }
          break;
        case 5:
          v30 = (unint64_t *)*v14;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v29 = *v14;
            if (!*v14)
              goto LABEL_45;
            v67.__r_.__value_.__r.__words[0] = v29 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
LABEL_28:
            v19 = (_QWORD *)v29;
            v20 = 0x1020C405E66F15BLL;
            goto LABEL_44;
          }
          break;
        case 8:
          v33 = (unint64_t *)*v14;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = *v14;
            if (!*v14)
              goto LABEL_45;
            boost::detail::shared_count::~shared_count((unsigned int **)(v36 + 16));
            v19 = (_QWORD *)v36;
            v37 = -235920773;
            goto LABEL_43;
          }
          break;
        case 9:
          v38 = (unint64_t *)*v14;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = (_QWORD *)*v14;
            if (*v14)
            {
              v42 = (void *)v41[6];
              if (v42)
              {
                v41[7] = v42;
                operator delete(v42);
              }
              v43 = (void *)v41[3];
              if (v43)
              {
                v41[4] = v43;
                operator delete(v43);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v41 + 1));
              v19 = v41;
              v37 = 2071181815;
LABEL_43:
              v20 = v37 | 0x1030C4000000000;
LABEL_44:
              MEMORY[0x219A19A08](v19, v20);
            }
LABEL_45:
            *v14 = 0;
          }
          break;
        default:
          break;
      }
      *((_DWORD *)v14 + 2) = 0;
      *((_BYTE *)v14 + 12) = 0;
      *v14 = v13;
      ++v12;
      v11 = *a3;
    }
    while (v12 < a3[1] - *a3);
  }
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<turi::flexible_type> &,0>((uint64_t)&v67, "output_types", v59);
  std::string::basic_string[abi:ne180100]<0>(v68, "random_seed");
  v70 = 0;
  v69 = 0;
  v68[3] = a4;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v57, &v67, 2);
  turi::any::any<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>(&v55, a2);
  std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(__p, "function", &v55);
  std::map<std::string,turi::any>::map[abi:ne180100]((uint64_t)v56, (const void **)__p, 1);
  v45 = *a1;
  v44 = a1[1];
  v63[0] = v45;
  v63[1] = v44;
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v60 = (void **)&v52;
  v61 = 0;
  v48 = operator new(0x10uLL);
  v52 = v48;
  v54 = v48 + 2;
  *v48 = v45;
  v48[1] = v44;
  if (v44)
  {
    v49 = (unint64_t *)(v44 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v53 = v48 + 2;
  v62 = 10;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v62, (uint64_t)v57, v56, &v52, a5);
  v60 = (void **)&v52;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v60);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v63);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)v56, v56[1]);
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (v65 < 0)
    operator delete(__p[0]);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v57, v58);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v67 + i);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
}

void sub_2181EA640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t i;

  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a29);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a18, a19);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v29 - 176 + i);
  *(_QWORD *)(v29 - 176) = &a21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 176));
  _Unwind_Resume(a1);
}

void sub_2181EA6E0()
{
  JUMPOUT(0x2181EA6ACLL);
}

void sub_2181EA6E8()
{
  uint64_t v0;

  std::pair<std::string const,turi::flexible_type>::~pair(v0 - 176);
  JUMPOUT(0x2181EA6C8);
}

void sub_2181EA6F8()
{
  JUMPOUT(0x2181EA6C8);
}

void sub_2181EA700()
{
  JUMPOUT(0x2181EA6D8);
}

void turi::unity_sarray::unpack(_QWORD *a1@<X0>, const void **a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t *v17;
  std::vector<std::string>::size_type v18;
  uint64_t *v19;
  uint64_t *v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  char *v32;
  char v33;
  std::vector<std::string>::pointer end;
  std::string::size_type v35;
  std::string *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::locale::__imp *v40;
  uint64_t *v41;
  uint64_t v42;
  std::vector<std::string>::pointer v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::locale::__imp *v48;
  uint64_t *v49;
  __int128 v50;
  std::string *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  turi::unity_sframe *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *exception;
  uint64_t v85;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t *v89;
  std::locale::__imp *v90;
  std::locale::__imp *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::string v97;
  std::string v98;
  std::vector<std::string> v99;
  char v100[8];
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  _BYTE v104[13];
  _BYTE v105[24];
  _BYTE *v106;
  _QWORD v107[2];
  std::locale v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD v112[7];
  void *__p;
  char v114;
  _QWORD v115[22];

  v115[19] = *MEMORY[0x24BDAC8D0];
  v11 = (int *)global_logger();
  if (v11[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "unpack", 2607, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Function entry", 14);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v108, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v108);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1) - 6) <= 0xFCu)
  {
    v81 = __cxa_allocate_exception(8uLL);
    *v81 = "Cannot unpack an SArray of type that is not list/array/dict type";
    __cxa_throw(v81, MEMORY[0x24BEDB718], 0);
  }
  v17 = a3[1];
  v18 = ((char *)v17 - (char *)*a3) >> 4;
  if (v18 != a4[1] - *a4)
  {
    v82 = __cxa_allocate_exception(8uLL);
    *v82 = "unpacked column names and types length do not match";
    __cxa_throw(v82, MEMORY[0x24BEDB718], 0);
  }
  if (v17 == *a3)
  {
    v83 = __cxa_allocate_exception(8uLL);
    *v83 = "Please provide at least one column to unpack to";
    __cxa_throw(v83, MEMORY[0x24BEDB718], 0);
  }
  v88 = a1;
  v87 = a4;
  memset(&v99, 0, sizeof(v99));
  std::vector<std::string>::reserve(&v99, v18);
  v19 = *a3;
  v20 = a3[1];
  if (*a3 != v20)
  {
    v90 = *(std::locale::__imp **)(MEMORY[0x24BEDB7F0] + 64);
    v91 = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
    v89 = *(uint64_t **)(MEMORY[0x24BEDB7F0] + 72);
    v85 = MEMORY[0x24BEDB848] + 16;
    while (2)
    {
      if (*((char *)a2 + 23) >= 0)
        v21 = *((unsigned __int8 *)a2 + 23);
      else
        v21 = (size_t)a2[1];
      if (v21)
      {
        std::string::basic_string[abi:ne180100]((uint64_t)&v98, v21 + 1);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v98;
        else
          v22 = (std::string *)v98.__r_.__value_.__r.__words[0];
        if (*((char *)a2 + 23) >= 0)
          v23 = a2;
        else
          v23 = *a2;
        memmove(v22, v23, v21);
        *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 46;
        switch(*((_BYTE *)v19 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v108);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_35;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v108);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_35:
            v108.__locale_ = v91;
            *(std::locale::__imp **)((char *)&v108.__locale_ + *((_QWORD *)v91 - 3)) = v90;
            v110 = v89;
            v111 = MEMORY[0x24BEDB848] + 16;
            if (v114 < 0)
              operator delete(__p);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x219A198F4](v115);
            goto LABEL_55;
          case 2:
            v25 = *v19;
            if (*(char *)(*v19 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
            }
            else
            {
              v26 = *(_OWORD *)(v25 + 8);
              v97.__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 24);
              *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v26;
            }
            goto LABEL_55;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
            goto LABEL_55;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (uint64_t *)(*v19 + 8));
            goto LABEL_55;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
            goto LABEL_55;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v19, &v97);
            goto LABEL_55;
          case 7:
            memset(&v97, 0, sizeof(v97));
            goto LABEL_55;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_55;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
LABEL_55:
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &v97;
            else
              v29 = (std::string *)v97.__r_.__value_.__r.__words[0];
            if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
            else
              size = v97.__r_.__value_.__l.__size_;
            v31 = std::string::append(&v98, (const std::string::value_type *)v29, size);
            v32 = (char *)v31->__r_.__value_.__r.__words[0];
            v107[0] = v31->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v107 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
            v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            end = v99.__end_;
            if (v99.__end_ >= v99.__end_cap_.__value_)
            {
              v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_ - (char *)v99.__begin_) >> 3);
              v38 = v37 + 1;
              if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) > v38)
                v38 = 0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) >= 0x555555555555555)
                v39 = 0xAAAAAAAAAAAAAAALL;
              else
                v39 = v38;
              v112[0] = &v99.__end_cap_;
              if (v39)
                v40 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v99.__end_cap_, v39);
              else
                v40 = 0;
              v41 = (uint64_t *)((char *)v40 + 24 * v37);
              v108.__locale_ = v40;
              v109 = v41;
              v111 = (uint64_t)v40 + 24 * v39;
              v42 = v107[0];
              *v41 = (uint64_t)v32;
              v41[1] = v42;
              *(uint64_t *)((char *)v41 + 15) = *(_QWORD *)((char *)v107 + 7);
              *((_BYTE *)v41 + 23) = v33;
              v110 = v41 + 3;
              std::vector<std::string>::__swap_out_circular_buffer(&v99, (std::__split_buffer<std::string> *)&v108);
              v36 = v99.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&v108);
            }
            else
            {
              v35 = v107[0];
              v99.__end_->__r_.__value_.__l.__data_ = v32;
              end->__r_.__value_.__l.__size_ = v35;
              *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v107 + 7);
              *((_BYTE *)&end->__r_.__value_.__s + 23) = v33;
              v36 = end + 1;
            }
            v99.__end_ = v36;
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v97.__r_.__value_.__l.__data_);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_90;
            goto LABEL_91;
          default:
            goto LABEL_139;
        }
      }
      switch(*((_BYTE *)v19 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v108);
          std::ostream::operator<<();
          std::stringbuf::str();
          v108.__locale_ = v91;
          *(std::locale::__imp **)((char *)&v108.__locale_ + *((_QWORD *)v91 - 3)) = v90;
          v110 = v89;
          v24 = v85;
          goto LABEL_48;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v108);
          std::ostream::operator<<();
          std::stringbuf::str();
          v108.__locale_ = v91;
          *(std::locale::__imp **)((char *)&v108.__locale_ + *((_QWORD *)v91 - 3)) = v90;
          v24 = MEMORY[0x24BEDB848] + 16;
          v110 = v89;
LABEL_48:
          v111 = v24;
          if (v114 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](v115);
          goto LABEL_78;
        case 2:
          v27 = *v19;
          if (*(char *)(*v19 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v27 + 8), *(_QWORD *)(v27 + 16));
          }
          else
          {
            v28 = *(_OWORD *)(v27 + 8);
            v98.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 24);
            *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v28;
          }
          goto LABEL_78;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
          goto LABEL_78;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (uint64_t *)(*v19 + 8));
          goto LABEL_78;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
          goto LABEL_78;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v19, &v98);
          goto LABEL_78;
        case 7:
          memset(&v98, 0, sizeof(v98));
          goto LABEL_78;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_78;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v108, (_QWORD *)(*v19 + 8));
LABEL_78:
          v43 = v99.__end_;
          if (v99.__end_ >= v99.__end_cap_.__value_)
          {
            v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_ - (char *)v99.__begin_) >> 3);
            v46 = v45 + 1;
            if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) > v46)
              v46 = 0x5555555555555556 * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v99.__end_cap_.__value_ - (char *)v99.__begin_) >> 3) >= 0x555555555555555)
              v47 = 0xAAAAAAAAAAAAAAALL;
            else
              v47 = v46;
            v112[0] = &v99.__end_cap_;
            if (v47)
              v48 = (std::locale::__imp *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v99.__end_cap_, v47);
            else
              v48 = 0;
            v49 = (uint64_t *)((char *)v48 + 24 * v45);
            v108.__locale_ = v48;
            v109 = v49;
            v111 = (uint64_t)v48 + 24 * v47;
            v50 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
            v49[2] = v98.__r_.__value_.__r.__words[2];
            *(_OWORD *)v49 = v50;
            memset(&v98, 0, sizeof(v98));
            v110 = v49 + 3;
            std::vector<std::string>::__swap_out_circular_buffer(&v99, (std::__split_buffer<std::string> *)&v108);
            v51 = v99.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&v108);
            v99.__end_ = v51;
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(v98.__r_.__value_.__l.__data_);
          }
          else
          {
            v44 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
            v99.__end_->__r_.__value_.__r.__words[2] = v98.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
            v99.__end_ = v43 + 1;
          }
LABEL_91:
          v19 += 2;
          if (v19 == v20)
            break;
          continue;
        default:
LABEL_139:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      break;
    }
  }
  LOBYTE(v108.__locale_) = (*(uint64_t (**)(_QWORD *))(*v88 + 112))(v88);
  v110 = 0;
  v111 = 0;
  v109 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v109, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  memset(v112, 0, 13);
  if (v112 != (_QWORD *)a5)
  {
    *(_QWORD *)((char *)v112 + 5) = *(_QWORD *)(a5 + 5);
    v112[0] = *(_QWORD *)a5;
    BYTE4(v112[1]) = *(_BYTE *)(a5 + 12);
    if (BYTE4(v112[1]) <= 9u && ((1 << SBYTE4(v112[1])) & 0x33C) != 0)
    {
      v52 = (unint64_t *)v112[0];
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
    }
  }
  v54 = (std::__shared_weak_count *)v88[4];
  v95 = v88[3];
  v96 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldxr(p_shared_owners);
    while (__stxr(v56 + 1, p_shared_owners));
  }
  v100[0] = (char)v108.__locale_;
  v102 = 0;
  v103 = 0;
  v101 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v101, v109, v110, ((char *)v110 - (char *)v109) >> 4);
  *(_QWORD *)&v104[5] = *(_QWORD *)((char *)v112 + 5);
  *(_QWORD *)v104 = v112[0];
  v104[12] = BYTE4(v112[1]);
  if (BYTE4(v112[1]) <= 9u && ((1 << SBYTE4(v112[1])) & 0x33C) != 0)
  {
    v57 = *(unint64_t **)v104;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  v106 = 0;
  v59 = (char *)operator new(0x38uLL);
  *(_QWORD *)v59 = &off_24D9335D0;
  v59[8] = v100[0];
  *((_QWORD *)v59 + 3) = 0;
  *((_QWORD *)v59 + 4) = 0;
  *((_QWORD *)v59 + 2) = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)v59 + 2, v101, v102, ((char *)v102 - (char *)v101) >> 4);
  *((_QWORD *)v59 + 5) = *(_QWORD *)v104;
  *(_QWORD *)(v59 + 45) = *(_QWORD *)&v104[5];
  v60 = v104[12];
  v59[52] = v104[12];
  if (v60 <= 9 && ((1 << v60) & 0x33C) != 0)
  {
    v61 = (unint64_t *)*((_QWORD *)v59 + 5);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 + 1, v61));
  }
  v106 = v59;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::make_planner_node(&v95, (uint64_t)v105, v87, -1, &v98);
  v63 = v106;
  if (v106 == v105)
  {
    v64 = 4;
    v63 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_113;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_113:
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)v100);
  v65 = v96;
  if (v96)
  {
    v66 = (unint64_t *)&v96->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v68);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>((uint64_t *)&v97, (uint64_t)v68);
  v69 = v97.__r_.__value_.__r.__words[0];
  v94 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
  if (v98.__r_.__value_.__l.__size_)
  {
    v70 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  turi::unity_sframe::construct_from_planner_node(v69, (uint64_t *)&v94, (uint64_t)&v99);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v97.__r_.__value_.__l.__data_
                                                                                 + 144))(&v92, v97.__r_.__value_.__r.__words[0], 100);
  v75 = v93;
  if (v93)
  {
    v76 = (unint64_t *)&v93->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  *a6 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
  v78 = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
  if (v98.__r_.__value_.__l.__size_)
  {
    v79 = (unint64_t *)(v98.__r_.__value_.__l.__size_ + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0((uint64_t)&v108);
  v108.__locale_ = (std::locale::__imp *)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
}

void sub_2181EB37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::locale a55)
{
  std::locale::~locale(&a55);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::unpack(std::string const&,std::vector<turi::flexible_type> const&,std::vector<turi::flex_type_enum> const&,turi::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  v32 = (void **)(a1 + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
  return a1;
}

void turi::unity_sarray::begin_iterator(turi::unity_sarray *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *exception;
  uint64_t v17;
  __int128 v18;

  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "begin_iterator", 2685, 1);
    v5 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Function entry", 14);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(v6[2] - 24) + 16));
        v7 = std::locale::use_facet((const std::locale *)&v18, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale((std::locale *)&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::unity_sarray::get_underlying_sarray(this, &v18);
  if ((_QWORD)v18 && (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this))
  {
    turi::sarray<turi::flexible_type>::get_reader(v18, &v17);
    v8 = v17;
    v17 = 0;
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v17;
      v17 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v11 = operator new();
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), 0);
    std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 7, v11);
    v12 = operator new();
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), 0);
    std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 8, v12);
    *((_QWORD *)this + 5) = 1;
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2181EB998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  uint64_t v11;

  MEMORY[0x219A19A08](v11, 0x1022C400F6C8D84);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

_QWORD *turi::unity_sarray::subslice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  unint64_t v37;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  _QWORD *v100;
  _QWORD *result;
  uint64_t v102;
  void *v103;
  BOOL v104;
  void **v106;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v10 = *a2;
  v11 = *((unsigned __int8 *)a2 + 12);
  v12 = 1;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
    case 7:
      v13 = *(_QWORD *)a3;
      v14 = *(unsigned __int8 *)(a3 + 12);
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 7:
          v15 = *a4;
          switch(*((_BYTE *)a4 + 12))
          {
            case 2:
              do
                v16 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v16 + 1, (unint64_t *)v15));
              do
                v17 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v17 - 1, (unint64_t *)v15));
              if (v17 != 1 || v15 == 0)
                goto LABEL_77;
              if (*(char *)(v15 + 31) < 0)
                operator delete(*(void **)(v15 + 8));
              v19 = (_QWORD *)v15;
              v20 = 0x1012C404EF22A49;
              goto LABEL_76;
            case 3:
              do
                v40 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v40 + 1, (unint64_t *)v15));
              do
                v41 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v41 - 1, (unint64_t *)v15));
              if (v41 != 1 || v15 == 0)
                goto LABEL_77;
              v43 = *(void **)(v15 + 8);
              if (v43)
              {
                *(_QWORD *)(v15 + 16) = v43;
                operator delete(v43);
              }
              v19 = (_QWORD *)v15;
              v20 = 0x1080C409938AC02;
              goto LABEL_76;
            case 4:
              do
                v33 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v33 + 1, (unint64_t *)v15));
              do
                v34 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v34 - 1, (unint64_t *)v15));
              if (v34 != 1 || v15 == 0)
                goto LABEL_77;
              v106 = (void **)(v15 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
              goto LABEL_67;
            case 5:
              do
                v44 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v44 + 1, (unint64_t *)v15));
              do
                v45 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v45 - 1, (unint64_t *)v15));
              if (v45 != 1 || v15 == 0)
                goto LABEL_77;
              v106 = (void **)(v15 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_67:
              v19 = (_QWORD *)v15;
              v20 = 0x1020C405E66F15BLL;
              goto LABEL_76;
            case 8:
              do
                v47 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v47 + 1, (unint64_t *)v15));
              do
                v48 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v48 - 1, (unint64_t *)v15));
              if (v48 != 1 || v15 == 0)
                goto LABEL_77;
              boost::detail::shared_count::~shared_count((unsigned int **)(v15 + 16));
              v19 = (_QWORD *)v15;
              v39 = -235920773;
              goto LABEL_75;
            case 9:
              do
                v36 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v36 + 1, (unint64_t *)v15));
              do
                v37 = __ldaxr((unint64_t *)v15);
              while (__stlxr(v37 - 1, (unint64_t *)v15));
              if (v37 != 1 || v15 == 0)
                goto LABEL_77;
              v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v15);
              v39 = 2071181815;
LABEL_75:
              v20 = v39 | 0x1030C4000000000;
LABEL_76:
              MEMORY[0x219A19A08](v19, v20);
LABEL_77:
              v12 = 1;
              break;
            default:
              if (*((_BYTE *)a4 + 12))
                v104 = *((_BYTE *)a4 + 12) == 7;
              else
                v104 = 1;
              v12 = !v104;
              goto LABEL_78;
          }
          goto LABEL_78;
        case 2:
          do
            v30 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v30 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_79:
            v50 = __ldaxr((unint64_t *)v13);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, (unint64_t *)v13));
          if (v51)
            v52 = 1;
          else
            v52 = v13 == 0;
          if (v52)
            goto LABEL_122;
          if (*(char *)(v13 + 31) < 0)
            operator delete(*(void **)(v13 + 8));
          v53 = (_QWORD *)v13;
          v54 = 0x1012C404EF22A49;
          goto LABEL_121;
        case 3:
          do
            v31 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v31 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_113:
            v68 = __ldaxr((unint64_t *)v13);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, (unint64_t *)v13));
          if (v69)
            v70 = 1;
          else
            v70 = v13 == 0;
          if (v70)
            goto LABEL_122;
          v71 = *(void **)(v13 + 8);
          if (v71)
          {
            *(_QWORD *)(v13 + 16) = v71;
            operator delete(v71);
          }
          v53 = (_QWORD *)v13;
          v54 = 0x1080C409938AC02;
          goto LABEL_121;
        case 4:
          do
            v32 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v32 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_99:
            v62 = __ldaxr((unint64_t *)v13);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, (unint64_t *)v13));
          if (v63)
            v64 = 1;
          else
            v64 = v13 == 0;
          if (v64)
            goto LABEL_122;
          v106 = (void **)(v13 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
          goto LABEL_105;
        case 5:
          do
            v27 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v27 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_87:
            v55 = __ldaxr((unint64_t *)v13);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, (unint64_t *)v13));
          if (v56)
            v57 = 1;
          else
            v57 = v13 == 0;
          if (v57)
            goto LABEL_122;
          v106 = (void **)(v13 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_105:
          v53 = (_QWORD *)v13;
          v54 = 0x1020C405E66F15BLL;
          goto LABEL_121;
        case 8:
          do
            v28 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v28 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_106:
            v65 = __ldaxr((unint64_t *)v13);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, (unint64_t *)v13));
          if (v66)
            v67 = 1;
          else
            v67 = v13 == 0;
          if (v67)
            goto LABEL_122;
          boost::detail::shared_count::~shared_count((unsigned int **)(v13 + 16));
          v53 = (_QWORD *)v13;
          v61 = -235920773;
          goto LABEL_112;
        case 9:
          do
            v29 = __ldaxr((unint64_t *)v13);
          while (__stlxr(v29 + 1, (unint64_t *)v13));
          v12 = 1;
          do
          {
LABEL_93:
            v58 = __ldaxr((unint64_t *)v13);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, (unint64_t *)v13));
          if (v59)
            v60 = 1;
          else
            v60 = v13 == 0;
          if (v60)
            goto LABEL_122;
          v53 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
          v61 = 2071181815;
LABEL_112:
          v54 = v61 | 0x1030C4000000000;
LABEL_121:
          MEMORY[0x219A19A08](v53, v54);
          break;
        default:
LABEL_78:
          switch(v14)
          {
            case 2:
              goto LABEL_79;
            case 3:
              goto LABEL_113;
            case 4:
              goto LABEL_99;
            case 5:
              goto LABEL_87;
            case 8:
              goto LABEL_106;
            case 9:
              goto LABEL_93;
            default:
              goto LABEL_122;
          }
      }
      goto LABEL_122;
    case 2:
      do
        v24 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v24 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_123:
        v72 = __ldaxr((unint64_t *)v10);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, (unint64_t *)v10));
      if (v73)
        v74 = 1;
      else
        v74 = v10 == 0;
      if (v74)
        goto LABEL_167;
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      v75 = v10;
      v76 = 0x1012C404EF22A49;
      goto LABEL_189;
    case 3:
      do
        v25 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v25 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_161:
        v92 = __ldaxr((unint64_t *)v10);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, (unint64_t *)v10));
      if (v93)
        v94 = 1;
      else
        v94 = v10 == 0;
      if (v94)
        goto LABEL_167;
      v103 = *(void **)(v10 + 8);
      if (v103)
      {
        *(_QWORD *)(v10 + 16) = v103;
        operator delete(v103);
      }
      v75 = v10;
      v76 = 0x1080C409938AC02;
      goto LABEL_189;
    case 4:
      do
        v26 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v26 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_147:
        v86 = __ldaxr((unint64_t *)v10);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, (unint64_t *)v10));
      if (v87)
        v88 = 1;
      else
        v88 = v10 == 0;
      if (v88)
        goto LABEL_167;
      v106 = (void **)(v10 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v106);
      goto LABEL_153;
    case 5:
      do
        v21 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v21 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_131:
        v77 = __ldaxr((unint64_t *)v10);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, (unint64_t *)v10));
      if (v78)
        v79 = 1;
      else
        v79 = v10 == 0;
      if (v79)
        goto LABEL_167;
      v106 = (void **)(v10 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v106);
LABEL_153:
      v75 = v10;
      v76 = 0x1020C405E66F15BLL;
      goto LABEL_189;
    case 8:
      do
        v22 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v22 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_154:
        v89 = __ldaxr((unint64_t *)v10);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, (unint64_t *)v10));
      if (v90)
        v91 = 1;
      else
        v91 = v10 == 0;
      if (v91)
        goto LABEL_167;
      boost::detail::shared_count::~shared_count((unsigned int **)(v10 + 16));
      v75 = v10;
      v85 = -235920773;
      goto LABEL_160;
    case 9:
      do
        v23 = __ldaxr((unint64_t *)v10);
      while (__stlxr(v23 + 1, (unint64_t *)v10));
      v12 = 1;
      do
      {
LABEL_137:
        v80 = __ldaxr((unint64_t *)v10);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, (unint64_t *)v10));
      if (v81)
        v82 = 1;
      else
        v82 = v10 == 0;
      if (v82)
      {
LABEL_167:
        if (v12)
          goto LABEL_190;
      }
      else
      {
        v83 = *(void **)(v10 + 48);
        if (v83)
        {
          *(_QWORD *)(v10 + 56) = v83;
          operator delete(v83);
        }
        v84 = *(void **)(v10 + 24);
        if (v84)
        {
          *(_QWORD *)(v10 + 32) = v84;
          operator delete(v84);
        }
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10 + 8);
        v75 = v10;
        v85 = 2071181815;
LABEL_160:
        v76 = v85 | 0x1030C4000000000;
LABEL_189:
        MEMORY[0x219A19A08](v75, v76);
        if ((v12 & 1) != 0)
LABEL_190:
          turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_1::operator()();
      }
      if ((v9 - 5) <= 0xFCu)
        turi::unity_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)::$_2::operator()();
      if (*((_BYTE *)a2 + 12))
      {
        v95 = 0;
        v96 = 0;
      }
      else
      {
        v96 = *a2;
        v95 = 1;
      }
      if (*(_BYTE *)(a3 + 12))
      {
        v97 = 1;
      }
      else if (*(_QWORD *)a3 <= 1uLL)
      {
        v97 = 1;
      }
      else
      {
        v97 = *(_QWORD *)a3;
      }
      if (*((_BYTE *)a4 + 12))
      {
        v98 = 0;
        v99 = 0;
      }
      else
      {
        v98 = *a4;
        v99 = 1;
      }
      v100 = operator new(0x30uLL);
      *v100 = &off_24D933650;
      v100[1] = v96;
      *((_BYTE *)v100 + 16) = v95;
      v100[3] = v97;
      *((_BYTE *)v100 + 32) = v99;
      v100[5] = v98;
      v108 = v100;
      turi::unity_sarray::transform_lambda(a1, (uint64_t)v107, v9, 0, 0, a5);
      result = v108;
      if (v108 == v107)
      {
        v102 = 4;
        result = v107;
      }
      else
      {
        if (!v108)
          return result;
        v102 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v102))();
    default:
LABEL_122:
      switch(v11)
      {
        case 2:
          goto LABEL_123;
        case 3:
          goto LABEL_161;
        case 4:
          goto LABEL_147;
        case 5:
          goto LABEL_131;
        case 8:
          goto LABEL_154;
        case 9:
          goto LABEL_137;
        default:
          goto LABEL_167;
      }
  }
}

void sub_2181EC22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::unity_sarray::ternary_operator(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v90 = *a2;
  v91 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(std::__shared_weak_count **)(a3 + 8);
  v88 = *(_QWORD **)a3;
  v89 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 32);
  v86 = *(_QWORD *)(a1 + 24);
  v87 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(v6 + 24);
  v16 = *(std::__shared_weak_count **)(v6 + 32);
  v84 = v17;
  v85 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = turi::query_eval::planner::test_equal_length((uint64_t)&v79, &v86, &v84);
  v21 = v85;
  if (v85)
  {
    v22 = (unint64_t *)&v85->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v87;
  if (v87)
  {
    v25 = (unint64_t *)&v87->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (!v20)
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_0::operator()();
  v27 = *(std::__shared_weak_count **)(a1 + 32);
  v82 = *(_QWORD *)(a1 + 24);
  v83 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)v88[4];
  v80 = v88[3];
  v81 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = turi::query_eval::planner::test_equal_length((uint64_t)&v79, &v82, &v80);
  v34 = v81;
  if (v81)
  {
    v35 = (unint64_t *)&v81->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v83;
  if (v83)
  {
    v38 = (unint64_t *)&v83->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (!v33)
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_1::operator()();
  v40 = v90;
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 112))(v90);
  v42 = v88;
  if (v41 != (*(unsigned int (**)(_QWORD *))(*v88 + 112))(v88))
    turi::unity_sarray::ternary_operator(std::shared_ptr<turi::unity_sarray_base>,std::shared_ptr<turi::unity_sarray_base>)::$_2::operator()();
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v79);
  v43 = (_QWORD *)v79;
  v44 = *(std::__shared_weak_count **)(a1 + 32);
  v75 = *(_QWORD *)(a1 + 24);
  v76 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = *(std::__shared_weak_count **)(v40 + 32);
  v73 = *(_QWORD *)(v40 + 24);
  v74 = v47;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = (std::__shared_weak_count *)v42[4];
  v71 = v42[3];
  v72 = v50;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::make_planner_node(&v75, &v73, &v71, &v77);
  turi::unity_sarray::construct_from_planner_node(v43, &v77);
  v53 = v78;
  if (v78)
  {
    v54 = (unint64_t *)&v78->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v72;
  if (v72)
  {
    v57 = (unint64_t *)&v72->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v74;
  if (v74)
  {
    v60 = (unint64_t *)&v74->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v76;
  if (v76)
  {
    v63 = (unint64_t *)&v76->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  *a4 = v79;
  v65 = v89;
  if (v89)
  {
    v66 = (unint64_t *)&v89->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v91;
  if (v91)
  {
    v69 = (unint64_t *)&v91->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_2181EC6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v17 - 88);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v17 - 72);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::make_planner_node(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t i;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const void **v23;
  _QWORD *v24[2];
  _QWORD **v25;
  _QWORD *v26[2];
  void **v27;
  char v28;
  int v29;
  _QWORD v30[7];

  v30[6] = *MEMORY[0x24BDAC8D0];
  v26[0] = 0;
  v26[1] = 0;
  v24[1] = 0;
  v25 = v26;
  v23 = (const void **)v24;
  v24[0] = 0;
  v5 = a1[1];
  v30[0] = *a1;
  v30[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[1];
  v30[2] = *a2;
  v30[3] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a3[1];
  v30[4] = *a3;
  v30[5] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v27 = (void **)&v20;
  v28 = 0;
  v14 = operator new(0x30uLL);
  v15 = 0;
  v20 = v14;
  v21 = v14;
  v22 = v14 + 6;
  do
  {
    v16 = *(_OWORD *)&v30[2 * v15];
    *(_OWORD *)v14 = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    ++v15;
    v14 += 2;
  }
  while (v15 != 3);
  v21 = v14;
  v29 = 14;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v29, (uint64_t)&v25, &v23, &v20, a4);
  v27 = (void **)&v20;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v27);
  for (i = 4; i != -2; i -= 2)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v30[i]);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v23, v24[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v25, v26[0]);
}

void sub_2181EC8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  va_list va;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  _QWORD *v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD *);
  v15 = va_arg(va2, _QWORD);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  for (i = 32; i != -16; i -= 16)
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v5 - 88 + i);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v10);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v14);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::to_const@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  char *v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  unint64_t v93;
  BOOL v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  _QWORD *v103;
  unint64_t v104;
  BOOL v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t *v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  BOOL v122;
  _QWORD *v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  BOOL v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  void *v161;
  void *v162;
  _QWORD *v163;
  _QWORD *v164;
  unint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  double v169;
  _QWORD *v170;
  unint64_t v171;
  _QWORD *v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  void *v180;
  _QWORD *v181;
  unint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  void **v187;
  __int128 v188;
  void *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  __int128 v195;
  __int128 v196;
  unint64_t v197;
  BOOL v198;
  _QWORD *v199;
  unint64_t v200;
  int v201;
  _QWORD *v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  void **v214;
  __int128 v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  __int128 v221;
  __int128 v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  __int128 v235;
  __int128 v236;
  unint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  __int128 v246;
  __int128 v247;
  unint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  __int128 v256;
  __int128 v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  __int128 v268;
  __int128 v269;
  unint64_t v270;
  int v271;
  _QWORD *v272;
  unint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unsigned int *v281;
  unsigned int v282;
  __int128 v283;
  __int128 v284;
  unint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *p_shared_owners;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t result;
  unint64_t *v306;
  unint64_t v307;
  uint64_t (***v308)();
  uint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  void *v324;
  void *v325;
  unsigned int v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  void *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  void **v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t *v365;
  void **v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  _BYTE v380[32];
  _BYTE v381[32];
  uint64_t v382;
  void *v383;
  void *v384;
  uint64_t v385;
  void **v386;
  void **v387;
  uint64_t v388;
  __int128 v389;
  void *v390;
  _BYTE v391[13];
  uint64_t (**v392)();
  _BYTE v393[13];
  uint64_t (***v394)();
  _QWORD *v395[3];

  v9 = 0;
  v395[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  memset(v395, 0, 13);
  BYTE4(v395[1]) = a3;
  switch((int)a3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v9 = operator new();
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      goto LABEL_5;
    case 6:
      v9 = 0x1900000000000000;
      v395[0] = (_QWORD *)0x1900000000000000;
      LODWORD(v395[1]) = 0;
      break;
    case 8:
      v9 = operator new();
      *(_QWORD *)v9 = 0;
      a5 = 0.0;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 3;
      goto LABEL_5;
    case 9:
      v9 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v9);
LABEL_5:
      v395[0] = (_QWORD *)v9;
      *(_QWORD *)v9 = 1;
      break;
    default:
      break;
  }
  v10 = *(unsigned __int8 *)(a2 + 12);
  if (v10 == 7 || v10 == a3)
  {
    if (v395 != (_QWORD **)a2)
    {
      switch(BYTE4(v395[1]))
      {
        case 2:
          do
          {
            v12 = __ldaxr((unint64_t *)v9);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, (unint64_t *)v9));
          if (!v13)
          {
            v14 = v395[0];
            if (v395[0])
            {
              if (*((char *)v395[0] + 31) < 0)
                operator delete(*((void **)v395[0] + 1));
              v15 = v14;
              v16 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
          }
          break;
        case 3:
          do
          {
            v23 = __ldaxr((unint64_t *)v9);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, (unint64_t *)v9));
          if (!v24)
          {
            v25 = v395[0];
            if (v395[0])
            {
              v26 = (void *)v395[0][1];
              if (v26)
              {
                v395[0][2] = v26;
                operator delete(v26);
              }
              v15 = v25;
              v16 = 0x1080C409938AC02;
              goto LABEL_44;
            }
          }
          break;
        case 4:
          do
          {
            v17 = __ldaxr((unint64_t *)v9);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, (unint64_t *)v9));
          if (!v18)
          {
            v19 = v395[0];
            if (v395[0])
            {
              *(_QWORD *)v380 = v395[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
              goto LABEL_38;
            }
          }
          break;
        case 5:
          do
          {
            v27 = __ldaxr((unint64_t *)v9);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unint64_t *)v9));
          if (!v28)
          {
            v19 = v395[0];
            if (v395[0])
            {
              *(_QWORD *)v380 = v395[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
LABEL_38:
              v15 = v19;
              v16 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
          }
          break;
        case 8:
          do
          {
            v29 = __ldaxr((unint64_t *)v9);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unint64_t *)v9));
          if (!v30)
          {
            v31 = v395[0];
            if (v395[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v395[0] + 2);
              v15 = v31;
              v22 = -235920773;
              goto LABEL_43;
            }
          }
          break;
        case 9:
          do
          {
            v20 = __ldaxr((unint64_t *)v9);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, (unint64_t *)v9));
          if (!v21 && v395[0])
          {
            v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v395[0]);
            v22 = 2071181815;
LABEL_43:
            v16 = v22 | 0x1030C4000000000;
LABEL_44:
            MEMORY[0x219A19A08](v15, v16);
          }
          break;
        default:
          break;
      }
      *(_QWORD **)((char *)v395 + 5) = *(_QWORD **)(a2 + 5);
      v395[0] = *(_QWORD **)a2;
      BYTE4(v395[1]) = *(_BYTE *)(a2 + 12);
      switch(BYTE4(v395[1]))
      {
        case 2:
          v32 = v395[0];
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 3:
          v38 = v395[0];
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 + 1, v38));
          break;
        case 4:
          v34 = v395[0];
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 + 1, v34));
          break;
        case 5:
          v40 = v395[0];
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          break;
        case 8:
          v42 = v395[0];
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
          break;
        case 9:
          v36 = v395[0];
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          break;
        default:
          break;
      }
    }
  }
  else if (v395 != (_QWORD **)a2)
  {
    switch(*(_BYTE *)(a2 + 12))
    {
      case 0:
        switch(BYTE4(v395[1]))
        {
          case 0:
            v11 = *(_QWORD *)a2;
            goto LABEL_124;
          case 1:
            v169 = (double)*(uint64_t *)a2;
            goto LABEL_405;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v210 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v210, (uint64_t)v395[0]);
              v395[0] = v210;
              *v210 = 1;
              do
              {
                v211 = __ldaxr((unint64_t *)v9);
                v212 = v211 - 1;
              }
              while (__stlxr(v212, (unint64_t *)v9));
              if (!v212)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v213 = v395[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v380);
            std::ostream::operator<<();
            std::stringbuf::str();
            v214 = (void **)(v213 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v380);
            if (*((char *)v213 + 31) < 0)
              operator delete(*v214);
            v215 = v389;
            v213[3] = v390;
            *(_OWORD *)v214 = v215;
            goto LABEL_445;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v170 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v170, (uint64_t)v395[0]);
            v395[0] = v170;
            *v170 = 1;
            do
            {
              v171 = __ldaxr((unint64_t *)v9);
              v94 = --v171 == 0;
            }
            while (__stlxr(v171, (unint64_t *)v9));
            goto LABEL_280;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v272 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v272, (uint64_t)v395[0]);
            v395[0] = v272;
            *v272 = 1;
            do
            {
              v273 = __ldaxr((unint64_t *)v9);
              v127 = --v273 == 0;
            }
            while (__stlxr(v273, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v274 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v274, (uint64_t)v395[0]);
            v395[0] = v274;
            *v274 = 1;
            do
            {
              v275 = __ldaxr((unint64_t *)v9);
              v105 = --v275 == 0;
            }
            while (__stlxr(v275, (unint64_t *)v9));
            goto LABEL_431;
          case 6:
            v395[0] = (_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v395[1]) = 0;
            goto LABEL_445;
          case 7:
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v278 = operator new();
            v279 = v395[0];
            *(_QWORD *)v278 = *v395[0];
            *(_QWORD *)(v278 + 8) = v279[1];
            v280 = v279[2];
            *(_QWORD *)(v278 + 16) = v280;
            if (v280)
            {
              v281 = (unsigned int *)(v280 + 8);
              do
                v282 = __ldxr(v281);
              while (__stxr(v282 + 1, v281));
            }
            v283 = *(_OWORD *)(v279 + 3);
            v284 = *(_OWORD *)(v279 + 5);
            *(_OWORD *)(v278 + 56) = *(_OWORD *)(v279 + 7);
            *(_OWORD *)(v278 + 40) = v284;
            *(_OWORD *)(v278 + 24) = v283;
            v395[0] = (_QWORD *)v278;
            *(_QWORD *)v278 = 1;
            do
            {
              v285 = __ldaxr((unint64_t *)v9);
              v198 = --v285 == 0;
            }
            while (__stlxr(v285, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v202 = (_QWORD *)operator new();
            v203 = v395[0] + 1;
            *v202 = *v395[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v202 + 1, (uint64_t)v203);
            v395[0] = v202;
            *v202 = 1;
            do
            {
              v204 = __ldaxr((unint64_t *)v9);
              v122 = --v204 == 0;
            }
            while (__stlxr(v204, (unint64_t *)v9));
            goto LABEL_320;
          default:
            goto LABEL_572;
        }
      case 1:
        switch(BYTE4(v395[1]))
        {
          case 0:
            v11 = (uint64_t)*(double *)a2;
            goto LABEL_124;
          case 1:
            v169 = *(double *)a2;
            goto LABEL_405;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v183 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v183, (uint64_t)v395[0]);
              v395[0] = v183;
              *v183 = 1;
              do
              {
                v184 = __ldaxr((unint64_t *)v9);
                v185 = v184 - 1;
              }
              while (__stlxr(v185, (unint64_t *)v9));
              if (!v185)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v186 = v395[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v380);
            std::ostream::operator<<();
            std::stringbuf::str();
            v187 = (void **)(v186 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v380);
            if (*((char *)v186 + 31) < 0)
              operator delete(*v187);
            v188 = v389;
            v189 = v390;
            goto LABEL_514;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v123 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v123, (uint64_t)v395[0]);
            v395[0] = v123;
            *v123 = 1;
            do
            {
              v124 = __ldaxr((unint64_t *)v9);
              v94 = --v124 == 0;
            }
            while (__stlxr(v124, (unint64_t *)v9));
            goto LABEL_280;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v226 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v226, (uint64_t)v395[0]);
            v395[0] = v226;
            *v226 = 1;
            do
            {
              v227 = __ldaxr((unint64_t *)v9);
              v127 = --v227 == 0;
            }
            while (__stlxr(v227, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v249 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v249, (uint64_t)v395[0]);
            v395[0] = v249;
            *v249 = 1;
            do
            {
              v250 = __ldaxr((unint64_t *)v9);
              v105 = --v250 == 0;
            }
            while (__stlxr(v250, (unint64_t *)v9));
            goto LABEL_431;
          case 6:
            v201 = (int)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
            if (v201 >= 999999)
              v201 = 999999;
            if (v201 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v395[0] = (_QWORD *)(vcvtmd_s64_f64(*(double *)a2) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v395[1]) = v201;
            goto LABEL_445;
          case 7:
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v263 = operator new();
            v264 = v395[0];
            *(_QWORD *)v263 = *v395[0];
            *(_QWORD *)(v263 + 8) = v264[1];
            v265 = v264[2];
            *(_QWORD *)(v263 + 16) = v265;
            if (v265)
            {
              v266 = (unsigned int *)(v265 + 8);
              do
                v267 = __ldxr(v266);
              while (__stxr(v267 + 1, v266));
            }
            v268 = *(_OWORD *)(v264 + 3);
            v269 = *(_OWORD *)(v264 + 5);
            *(_OWORD *)(v263 + 56) = *(_OWORD *)(v264 + 7);
            *(_OWORD *)(v263 + 40) = v269;
            *(_OWORD *)(v263 + 24) = v268;
            v395[0] = (_QWORD *)v263;
            *(_QWORD *)v263 = 1;
            do
            {
              v270 = __ldaxr((unint64_t *)v9);
              v198 = --v270 == 0;
            }
            while (__stlxr(v270, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v163 = (_QWORD *)operator new();
            v164 = v395[0] + 1;
            *v163 = *v395[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v163 + 1, (uint64_t)v164);
            v395[0] = v163;
            *v163 = 1;
            do
            {
              v165 = __ldaxr((unint64_t *)v9);
              v122 = --v165 == 0;
            }
            while (__stlxr(v165, (unint64_t *)v9));
            goto LABEL_320;
          default:
            goto LABEL_572;
        }
      case 2:
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            v59 = *(_QWORD **)a2;
            if (*(_QWORD *)v9 != 1)
            {
              v60 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v60, (uint64_t)v395[0]);
              v395[0] = v60;
              *v60 = 1;
              do
              {
                v61 = __ldaxr((unint64_t *)v9);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, (unint64_t *)v9));
              if (!v62)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            if (*((char *)v59 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v380, (const std::string::value_type *)v59[1], v59[2]);
            }
            else
            {
              v63 = *(_OWORD *)(v59 + 1);
              *(_QWORD *)&v380[16] = v59[3];
              *(_OWORD *)v380 = v63;
            }
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v95 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v95, (uint64_t)v395[0]);
            v395[0] = v95;
            *v95 = 1;
            do
            {
              v96 = __ldaxr((unint64_t *)v9);
              v94 = --v96 == 0;
            }
            while (__stlxr(v96, (unint64_t *)v9));
            goto LABEL_280;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v224 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v224, (uint64_t)v395[0]);
            v395[0] = v224;
            *v224 = 1;
            do
            {
              v225 = __ldaxr((unint64_t *)v9);
              v127 = --v225 == 0;
            }
            while (__stlxr(v225, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v172 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v172, (uint64_t)v395[0]);
            v395[0] = v172;
            *v172 = 1;
            do
            {
              v173 = __ldaxr((unint64_t *)v9);
              v105 = --v173 == 0;
            }
            while (__stlxr(v173, (unint64_t *)v9));
            goto LABEL_431;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v230 = operator new();
            v231 = v395[0];
            *(_QWORD *)v230 = *v395[0];
            *(_QWORD *)(v230 + 8) = v231[1];
            v232 = v231[2];
            *(_QWORD *)(v230 + 16) = v232;
            if (v232)
            {
              v233 = (unsigned int *)(v232 + 8);
              do
                v234 = __ldxr(v233);
              while (__stxr(v234 + 1, v233));
            }
            v235 = *(_OWORD *)(v231 + 3);
            v236 = *(_OWORD *)(v231 + 5);
            *(_OWORD *)(v230 + 56) = *(_OWORD *)(v231 + 7);
            *(_OWORD *)(v230 + 40) = v236;
            *(_OWORD *)(v230 + 24) = v235;
            v395[0] = (_QWORD *)v230;
            *(_QWORD *)v230 = 1;
            do
            {
              v237 = __ldaxr((unint64_t *)v9);
              v198 = --v237 == 0;
            }
            while (__stlxr(v237, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v128 = (_QWORD *)operator new();
            v129 = v395[0] + 1;
            *v128 = *v395[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v128 + 1, (uint64_t)v129);
            v395[0] = v128;
            *v128 = 1;
            do
            {
              v130 = __ldaxr((unint64_t *)v9);
              v122 = --v130 == 0;
            }
            while (__stlxr(v130, (unint64_t *)v9));
            goto LABEL_320;
          default:
            goto LABEL_572;
        }
      case 3:
        v68 = *(_QWORD **)a2;
        v69 = (char *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v70 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v70, (uint64_t)v395[0]);
              v395[0] = v70;
              *v70 = 1;
              do
              {
                v71 = __ldaxr((unint64_t *)v9);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, (unint64_t *)v9));
              if (!v72)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v389, v69);
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v106 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v106, (uint64_t)v395[0]);
              v395[0] = v106;
              *v106 = 1;
              do
              {
                v107 = __ldaxr((unint64_t *)v9);
                v108 = v107 - 1;
              }
              while (__stlxr(v108, (unint64_t *)v9));
              if (!v108)
              {
                v109 = *(void **)(v9 + 8);
                if (v109)
                {
                  *(_QWORD *)(v9 + 16) = v109;
                  operator delete(v109);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            if (v395[0] == v68)
              goto LABEL_445;
            v77 = (char *)(v395[0] + 1);
            v110 = v68 + 2;
            goto LABEL_186;
          case 4:
            if (*(_QWORD *)v9 != 1)
            {
              v238 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v238, (uint64_t)v395[0]);
              v395[0] = v238;
              *v238 = 1;
              do
              {
                v239 = __ldaxr((unint64_t *)v9);
                v240 = v239 - 1;
              }
              while (__stlxr(v240, (unint64_t *)v9));
              if (!v240)
              {
                *(_QWORD *)v380 = v9 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v395[0] + 1, (_QWORD *)v68[1], (_QWORD *)v68[2], (uint64_t)(v68[2] - v68[1]) >> 3);
            goto LABEL_445;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v199 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v199, (uint64_t)v395[0]);
            v395[0] = v199;
            *v199 = 1;
            do
            {
              v200 = __ldaxr((unint64_t *)v9);
              v105 = --v200 == 0;
            }
            while (__stlxr(v200, (unint64_t *)v9));
            goto LABEL_431;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v251 = operator new();
            v252 = v395[0];
            *(_QWORD *)v251 = *v395[0];
            *(_QWORD *)(v251 + 8) = v252[1];
            v253 = v252[2];
            *(_QWORD *)(v251 + 16) = v253;
            if (v253)
            {
              v254 = (unsigned int *)(v253 + 8);
              do
                v255 = __ldxr(v254);
              while (__stxr(v255 + 1, v254));
            }
            v256 = *(_OWORD *)(v252 + 3);
            v257 = *(_OWORD *)(v252 + 5);
            *(_OWORD *)(v251 + 56) = *(_OWORD *)(v252 + 7);
            *(_OWORD *)(v251 + 40) = v257;
            *(_OWORD *)(v251 + 24) = v256;
            v395[0] = (_QWORD *)v251;
            *(_QWORD *)v251 = 1;
            do
            {
              v258 = __ldaxr((unint64_t *)v9);
              v198 = --v258 == 0;
            }
            while (__stlxr(v258, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v155 = (_QWORD *)operator new();
              v156 = v395[0] + 1;
              *v155 = *v395[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v155 + 1, (uint64_t)v156);
              v395[0] = v155;
              *v155 = 1;
              do
              {
                v157 = __ldaxr((unint64_t *)v9);
                v158 = v157 - 1;
              }
              while (__stlxr(v158, (unint64_t *)v9));
              if (!v158)
              {
                v159 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v159, 0x1030C407B73B9F7);
              }
            }
            v160 = v395[0];
            v389 = 0uLL;
            v390 = 0;
            v386 = 0;
            v387 = 0;
            v388 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v69, &v383);
            turi::flexible_type_impl::ndarray<double>::ndarray(v380, &v383, (uint64_t)&v389, (uint64_t)&v386, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v383);
            if (v386)
            {
              v387 = v386;
              operator delete(v386);
            }
            if ((_QWORD)v389)
            {
              *((_QWORD *)&v389 + 1) = v389;
              operator delete((void *)v389);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v160 + 1), (__int128 *)v380);
            v161 = (void *)v160[3];
            if (v161)
            {
              v160[4] = v161;
              operator delete(v161);
              v160[3] = 0;
              v160[4] = 0;
              v160[5] = 0;
            }
            v162 = (void *)v160[6];
            *(_OWORD *)(v160 + 3) = *(_OWORD *)&v380[16];
            v160[5] = *(_QWORD *)v381;
            *(_OWORD *)&v380[16] = 0uLL;
            *(_QWORD *)v381 = 0;
            if (v162)
            {
              v160[7] = v162;
              operator delete(v162);
              v160[6] = 0;
              v160[7] = 0;
              v160[8] = 0;
            }
            *((_OWORD *)v160 + 3) = *(_OWORD *)&v381[8];
            v160[8] = *(_QWORD *)&v381[24];
            memset(&v381[8], 0, 24);
            v160[9] = v382;
            goto LABEL_568;
          default:
            goto LABEL_572;
        }
      case 4:
        v50 = *(_QWORD **)a2;
        v51 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v52 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v52, (uint64_t)v395[0]);
              v395[0] = v52;
              *v52 = 1;
              do
              {
                v53 = __ldaxr((unint64_t *)v9);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, (unint64_t *)v9));
              if (!v54)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v389, v51);
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v82 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v82, (uint64_t)v395[0]);
              v395[0] = v82;
              *v82 = 1;
              do
              {
                v83 = __ldaxr((unint64_t *)v9);
                v84 = v83 - 1;
              }
              while (__stlxr(v84, (unint64_t *)v9));
              if (!v84)
              {
                v85 = *(void **)(v9 + 8);
                if (v85)
                {
                  *(_QWORD *)(v9 + 16) = v85;
                  operator delete(v85);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v380, v395[0] + 1, v51);
            goto LABEL_445;
          case 4:
            if (*(_QWORD *)v9 != 1)
            {
              v174 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v174, (uint64_t)v395[0]);
              v395[0] = v174;
              *v174 = 1;
              do
              {
                v175 = __ldaxr((unint64_t *)v9);
                v176 = v175 - 1;
              }
              while (__stlxr(v176, (unint64_t *)v9));
              if (!v176)
              {
                *(_QWORD *)v380 = v9 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            if (v395[0] != v50)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v395[0] + 1), (uint64_t *)v50[1], (uint64_t *)v50[2], (uint64_t)(v50[2] - v50[1]) >> 4);
            goto LABEL_445;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v131 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v131, (uint64_t)v395[0]);
            v395[0] = v131;
            *v131 = 1;
            do
            {
              v132 = __ldaxr((unint64_t *)v9);
              v105 = --v132 == 0;
            }
            while (__stlxr(v132, (unint64_t *)v9));
            goto LABEL_431;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v190 = operator new();
            v191 = v395[0];
            *(_QWORD *)v190 = *v395[0];
            *(_QWORD *)(v190 + 8) = v191[1];
            v192 = v191[2];
            *(_QWORD *)(v190 + 16) = v192;
            if (v192)
            {
              v193 = (unsigned int *)(v192 + 8);
              do
                v194 = __ldxr(v193);
              while (__stxr(v194 + 1, v193));
            }
            v195 = *(_OWORD *)(v191 + 3);
            v196 = *(_OWORD *)(v191 + 5);
            *(_OWORD *)(v190 + 56) = *(_OWORD *)(v191 + 7);
            *(_OWORD *)(v190 + 40) = v196;
            *(_OWORD *)(v190 + 24) = v195;
            v395[0] = (_QWORD *)v190;
            *(_QWORD *)v190 = 1;
            do
            {
              v197 = __ldaxr((unint64_t *)v9);
              v198 = --v197 == 0;
            }
            while (__stlxr(v197, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v111 = (_QWORD *)operator new();
              v112 = v395[0] + 1;
              *v111 = *v395[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v111 + 1, (uint64_t)v112);
              v395[0] = v111;
              *v111 = 1;
              do
              {
                v113 = __ldaxr((unint64_t *)v9);
                v114 = v113 - 1;
              }
              while (__stlxr(v114, (unint64_t *)v9));
              if (!v114)
              {
                v115 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v115, 0x1030C407B73B9F7);
              }
            }
            v116 = v395[0];
            v390 = 0;
            v389 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v389, (uint64_t *)v50[1], (uint64_t *)v50[2], (uint64_t)(v50[2] - v50[1]) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v389, v380);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v116 + 1), (__int128 *)v380);
            v117 = (void *)v116[3];
            if (v117)
            {
              v116[4] = v117;
              operator delete(v117);
              v116[3] = 0;
              v116[4] = 0;
              v116[5] = 0;
            }
            v118 = (void *)v116[6];
            *(_OWORD *)(v116 + 3) = *(_OWORD *)&v380[16];
            v116[5] = *(_QWORD *)v381;
            *(_OWORD *)&v380[16] = 0uLL;
            *(_QWORD *)v381 = 0;
            if (v118)
            {
              v116[7] = v118;
              operator delete(v118);
              v116[6] = 0;
              v116[7] = 0;
              v116[8] = 0;
            }
            *((_OWORD *)v116 + 3) = *(_OWORD *)&v381[8];
            v116[8] = *(_QWORD *)&v381[24];
            memset(&v381[8], 0, 24);
            v116[9] = v382;
            turi::flexible_type_impl::ndarray<double>::~ndarray(v380);
            v386 = (void **)&v389;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v386);
            goto LABEL_445;
          default:
            goto LABEL_572;
        }
      case 5:
        v55 = *(_QWORD **)a2;
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v56 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v56, (uint64_t)v395[0]);
              v395[0] = v56;
              *v56 = 1;
              do
              {
                v57 = __ldaxr((unint64_t *)v9);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, (unint64_t *)v9));
              if (!v58)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v389, v55 + 1);
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v92 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v92, (uint64_t)v395[0]);
            v395[0] = v92;
            *v92 = 1;
            do
            {
              v93 = __ldaxr((unint64_t *)v9);
              v94 = --v93 == 0;
            }
            while (__stlxr(v93, (unint64_t *)v9));
            goto LABEL_280;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v208 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v208, (uint64_t)v395[0]);
            v395[0] = v208;
            *v208 = 1;
            do
            {
              v209 = __ldaxr((unint64_t *)v9);
              v127 = --v209 == 0;
            }
            while (__stlxr(v209, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 != 1)
            {
              v166 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v166, (uint64_t)v395[0]);
              v395[0] = v166;
              *v166 = 1;
              do
              {
                v167 = __ldaxr((unint64_t *)v9);
                v168 = v167 - 1;
              }
              while (__stlxr(v168, (unint64_t *)v9));
              if (!v168)
              {
                *(_QWORD *)v380 = v9 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            if (v395[0] != v55)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v395[0] + 1, (uint64_t *)v55[1], (uint64_t *)v55[2], (uint64_t)(v55[2] - v55[1]) >> 5);
            goto LABEL_445;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v216 = operator new();
            v217 = v395[0];
            *(_QWORD *)v216 = *v395[0];
            *(_QWORD *)(v216 + 8) = v217[1];
            v218 = v217[2];
            *(_QWORD *)(v216 + 16) = v218;
            if (v218)
            {
              v219 = (unsigned int *)(v218 + 8);
              do
                v220 = __ldxr(v219);
              while (__stxr(v220 + 1, v219));
            }
            v221 = *(_OWORD *)(v217 + 3);
            v222 = *(_OWORD *)(v217 + 5);
            *(_OWORD *)(v216 + 56) = *(_OWORD *)(v217 + 7);
            *(_OWORD *)(v216 + 40) = v222;
            *(_OWORD *)(v216 + 24) = v221;
            v395[0] = (_QWORD *)v216;
            *(_QWORD *)v216 = 1;
            do
            {
              v223 = __ldaxr((unint64_t *)v9);
              v198 = --v223 == 0;
            }
            while (__stlxr(v223, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v119 = (_QWORD *)operator new();
            v120 = v395[0] + 1;
            *v119 = *v395[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v119 + 1, (uint64_t)v120);
            v395[0] = v119;
            *v119 = 1;
            do
            {
              v121 = __ldaxr((unint64_t *)v9);
              v122 = --v121 == 0;
            }
            while (__stlxr(v121, (unint64_t *)v9));
            goto LABEL_320;
          default:
            goto LABEL_572;
        }
      case 6:
        switch(BYTE4(v395[1]))
        {
          case 0:
            v11 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
LABEL_124:
            v395[0] = (_QWORD *)v11;
            goto LABEL_445;
          case 1:
            v169 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
LABEL_405:
            v395[0] = *(_QWORD **)&v169;
            goto LABEL_445;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v259 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v259, (uint64_t)v395[0]);
              v395[0] = v259;
              *v259 = 1;
              do
              {
                v260 = __ldaxr((unint64_t *)v9);
                v261 = v260 - 1;
              }
              while (__stlxr(v261, (unint64_t *)v9));
              if (!v261)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            v262 = *(_DWORD *)(a2 + 8);
            *(_QWORD *)&v389 = *(_QWORD *)a2;
            DWORD2(v389) = v262;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v389, (std::string *)v380);
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v177 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v177, (uint64_t)v395[0]);
            v395[0] = v177;
            *v177 = 1;
            do
            {
              v178 = __ldaxr((unint64_t *)v9);
              v94 = --v178 == 0;
            }
            while (__stlxr(v178, (unint64_t *)v9));
LABEL_280:
            if (!v94)
              goto LABEL_444;
            v179 = 0x1080C409938AC02;
            v180 = *(void **)(v9 + 8);
            if (v180)
            {
              *(_QWORD *)(v9 + 16) = v180;
              operator delete(v180);
            }
            goto LABEL_443;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v276 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v276, (uint64_t)v395[0]);
            v395[0] = v276;
            *v276 = 1;
            do
            {
              v277 = __ldaxr((unint64_t *)v9);
              v127 = --v277 == 0;
            }
            while (__stlxr(v277, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v286 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v286, (uint64_t)v395[0]);
            v395[0] = v286;
            *v286 = 1;
            do
            {
              v287 = __ldaxr((unint64_t *)v9);
              v105 = --v287 == 0;
            }
            while (__stlxr(v287, (unint64_t *)v9));
            goto LABEL_431;
          case 6:
            v271 = *(_DWORD *)(a2 + 8);
            v395[0] = *(_QWORD **)a2;
            LODWORD(v395[1]) = v271;
            goto LABEL_445;
          case 7:
            goto LABEL_444;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v288 = operator new();
            v289 = v395[0];
            *(_QWORD *)v288 = *v395[0];
            *(_QWORD *)(v288 + 8) = v289[1];
            v290 = v289[2];
            *(_QWORD *)(v288 + 16) = v290;
            if (v290)
            {
              v291 = (unsigned int *)(v290 + 8);
              do
                v292 = __ldxr(v291);
              while (__stxr(v292 + 1, v291));
            }
            v293 = *(_OWORD *)(v289 + 3);
            v294 = *(_OWORD *)(v289 + 5);
            *(_OWORD *)(v288 + 56) = *(_OWORD *)(v289 + 7);
            *(_OWORD *)(v288 + 40) = v294;
            *(_OWORD *)(v288 + 24) = v293;
            v395[0] = (_QWORD *)v288;
            *(_QWORD *)v288 = 1;
            do
            {
              v295 = __ldaxr((unint64_t *)v9);
              v198 = --v295 == 0;
            }
            while (__stlxr(v295, (unint64_t *)v9));
            goto LABEL_440;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v205 = (_QWORD *)operator new();
            v206 = v395[0] + 1;
            *v205 = *v395[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v205 + 1, (uint64_t)v206);
            v395[0] = v205;
            *v205 = 1;
            do
            {
              v207 = __ldaxr((unint64_t *)v9);
              v122 = --v207 == 0;
            }
            while (__stlxr(v207, (unint64_t *)v9));
LABEL_320:
            if (!v122)
              goto LABEL_444;
            v179 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
            goto LABEL_443;
          default:
            goto LABEL_572;
        }
      case 8:
        v64 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v65 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v65, (uint64_t)v395[0]);
              v395[0] = v65;
              *v65 = 1;
              do
              {
                v66 = __ldaxr((unint64_t *)v9);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, (unint64_t *)v9));
              if (!v67)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_511;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v97 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v97, (uint64_t)v395[0]);
              v395[0] = v97;
              *v97 = 1;
              do
              {
                v98 = __ldaxr((unint64_t *)v9);
                v99 = v98 - 1;
              }
              while (__stlxr(v99, (unint64_t *)v9));
              if (!v99)
              {
                v100 = *(void **)(v9 + 8);
                if (v100)
                {
                  *(_QWORD *)(v9 + 16) = v100;
                  operator delete(v100);
                }
                a5 = MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            v101 = v395[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v64, (double **)v380, *(unint64_t *)&a5);
            v102 = (void *)v101[1];
            if (v102)
            {
              v101[2] = v102;
              operator delete(v102);
              v101[1] = 0;
              v101[2] = 0;
              v101[3] = 0;
            }
            *(_OWORD *)(v101 + 1) = *(_OWORD *)v380;
            v101[3] = *(_QWORD *)&v380[16];
            goto LABEL_445;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v228 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v228, (uint64_t)v395[0]);
            v395[0] = v228;
            *v228 = 1;
            do
            {
              v229 = __ldaxr((unint64_t *)v9);
              v127 = --v229 == 0;
            }
            while (__stlxr(v229, (unint64_t *)v9));
            goto LABEL_418;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v181 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v181, (uint64_t)v395[0]);
            v395[0] = v181;
            *v181 = 1;
            do
            {
              v182 = __ldaxr((unint64_t *)v9);
              v105 = --v182 == 0;
            }
            while (__stlxr(v182, (unint64_t *)v9));
            goto LABEL_431;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v241 = operator new();
            v242 = v395[0];
            *(_QWORD *)v241 = *v395[0];
            *(_QWORD *)(v241 + 8) = v242[1];
            v243 = v242[2];
            *(_QWORD *)(v241 + 16) = v243;
            if (v243)
            {
              v244 = (unsigned int *)(v243 + 8);
              do
                v245 = __ldxr(v244);
              while (__stxr(v245 + 1, v244));
            }
            v246 = *(_OWORD *)(v242 + 3);
            v247 = *(_OWORD *)(v242 + 5);
            *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 7);
            *(_OWORD *)(v241 + 40) = v247;
            *(_OWORD *)(v241 + 24) = v246;
            v395[0] = (_QWORD *)v241;
            *(_QWORD *)v241 = 1;
            do
            {
              v248 = __ldaxr((unint64_t *)v9);
              v198 = --v248 == 0;
            }
            while (__stlxr(v248, (unint64_t *)v9));
LABEL_440:
            if (!v198)
              goto LABEL_444;
            v179 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
            goto LABEL_443;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v147 = (_QWORD *)operator new();
              v148 = v395[0] + 1;
              *v147 = *v395[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v147 + 1, (uint64_t)v148);
              v395[0] = v147;
              *v147 = 1;
              do
              {
                v149 = __ldaxr((unint64_t *)v9);
                v150 = v149 - 1;
              }
              while (__stlxr(v150, (unint64_t *)v9));
              if (!v150)
              {
                v151 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                a5 = MEMORY[0x219A19A08](v151, 0x1030C407B73B9F7);
              }
            }
            v152 = v395[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v64, v380, *(unint64_t *)&a5);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v152 + 1), (__int128 *)v380);
            v153 = (void *)v152[3];
            if (v153)
            {
              v152[4] = v153;
              operator delete(v153);
              v152[3] = 0;
              v152[4] = 0;
              v152[5] = 0;
            }
            v154 = (void *)v152[6];
            *(_OWORD *)(v152 + 3) = *(_OWORD *)&v380[16];
            v152[5] = *(_QWORD *)v381;
            *(_OWORD *)&v380[16] = 0uLL;
            *(_QWORD *)v381 = 0;
            if (v154)
            {
              v152[7] = v154;
              operator delete(v154);
              v152[6] = 0;
              v152[7] = 0;
              v152[8] = 0;
            }
            *((_OWORD *)v152 + 3) = *(_OWORD *)&v381[8];
            v152[8] = *(_QWORD *)&v381[24];
            memset(&v381[8], 0, 24);
            v152[9] = v382;
            goto LABEL_568;
          default:
            goto LABEL_572;
        }
      case 9:
        v44 = *(char **)a2;
        v45 = (uint64_t *)(*(_QWORD *)a2 + 8);
        switch(BYTE4(v395[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_444;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v46 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v46, (uint64_t)v395[0]);
              v395[0] = v46;
              *v46 = 1;
              do
              {
                v47 = __ldaxr((unint64_t *)v9);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, (unint64_t *)v9));
              if (!v48)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v49 = v395[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v389, v45);
LABEL_511:
            v187 = (void **)(v49 + 1);
            if (*((char *)v49 + 31) < 0)
              operator delete(*v187);
            v188 = *(_OWORD *)v380;
            v189 = *(void **)&v380[16];
LABEL_514:
            v187[2] = v189;
            *(_OWORD *)v187 = v188;
            goto LABEL_445;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v73 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v73, (uint64_t)v395[0]);
              v395[0] = v73;
              *v73 = 1;
              do
              {
                v74 = __ldaxr((unint64_t *)v9);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, (unint64_t *)v9));
              if (!v75)
              {
                v76 = *(void **)(v9 + 8);
                if (v76)
                {
                  *(_QWORD *)(v9 + 16) = v76;
                  operator delete(v76);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            v77 = (char *)(v395[0] + 1);
            if (*((_QWORD *)v44 + 9))
              goto LABEL_521;
            v79 = (uint64_t *)*((_QWORD *)v44 + 3);
            v78 = (uint64_t *)*((_QWORD *)v44 + 4);
            v80 = (_QWORD *)*((_QWORD *)v44 + 1);
            if (v78 == v79 || v80 == 0)
            {
              v339 = 0;
            }
            else
            {
              v339 = 1;
              do
              {
                v340 = *v79++;
                v339 *= v340;
              }
              while (v79 != v78);
            }
            if (v339 == (uint64_t)(v80[1] - *v80) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v45) == (uint64_t)(*(_QWORD *)(*v45 + 8)
                                                                                       - *(_QWORD *)*v45) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v45))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v69 = (char *)*v45;
              if (v77 != v69)
              {
                v110 = (uint64_t *)(v69 + 8);
LABEL_186:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77, *(char **)v69, *v110, (*v110 - *(_QWORD *)v69) >> 3);
              }
            }
            else
            {
LABEL_521:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v45))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full(v45))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(v380, (uint64_t)v45);
              }
              else
              {
                v389 = 0uLL;
                v390 = 0;
                v386 = 0;
                v387 = 0;
                v388 = 0;
                v383 = 0;
                v384 = 0;
                v385 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(v380, (uint64_t)&v389, (uint64_t)&v386, (uint64_t)&v383, 0);
                if (v383)
                {
                  v384 = v383;
                  operator delete(v383);
                }
                if (v386)
                {
                  v387 = v386;
                  operator delete(v386);
                }
                if ((_QWORD)v389)
                {
                  *((_QWORD *)&v389 + 1) = v389;
                  operator delete((void *)v389);
                }
                v382 = 0;
                if (v380 != v44 + 8)
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v380[16], *((char **)v44 + 3), *((_QWORD *)v44 + 4), (uint64_t)(*((_QWORD *)v44 + 4) - *((_QWORD *)v44 + 3)) >> 3);
                v342 = (uint64_t *)*((_QWORD *)v44 + 3);
                v341 = (uint64_t *)*((_QWORD *)v44 + 4);
                if (v341 == v342 || !*v45)
                {
                  v343 = 0;
                }
                else
                {
                  v343 = 1;
                  do
                  {
                    v344 = *v342++;
                    v343 *= v344;
                  }
                  while (v342 != v341);
                }
                std::vector<double>::resize(*(uint64_t *)v380, v343);
                std::vector<unsigned long>::resize((uint64_t)&v381[8], (uint64_t)(*((_QWORD *)v44 + 4) - *((_QWORD *)v44 + 3)) >> 3);
                if (*(_QWORD *)&v380[24] != *(_QWORD *)&v380[16]
                  && *(_QWORD *)(*(_QWORD *)v380 + 8) != **(_QWORD **)v380)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v389, (uint64_t)(*((_QWORD *)v44 + 7) - *((_QWORD *)v44 + 6)) >> 3);
                  v345 = *((_QWORD *)v44 + 6);
                  v346 = *((_QWORD *)v44 + 7);
                  v347 = (unint64_t *)v389;
                  v348 = v346 - v345;
                  if (v346 != v345)
                  {
                    v349 = 0;
                    v350 = v348 >> 3;
                    if (v350 <= 1)
                      v350 = 1;
                    v351 = (_QWORD *)(v389 + 8);
                    do
                    {
                      *(v351 - 1) = *(_QWORD *)(v345 + 8 * v349);
                      *v351 = v349++;
                      v351 += 2;
                    }
                    while (v350 != v349);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v389 + 1), *((unint64_t **)&v389 + 1), (uint64_t)v347, v347);
                  v352 = v389;
                  v353 = *(_QWORD *)&v381[8];
                  *(_QWORD *)(*(_QWORD *)&v381[8] + 8 * *(_QWORD *)(v389 + 8)) = 1;
                  v354 = *((_QWORD *)v44 + 7) - *((_QWORD *)v44 + 6);
                  if ((unint64_t)v354 >= 9)
                  {
                    v355 = v354 >> 3;
                    v356 = *(_QWORD *)&v380[16];
                    if (v355 <= 2)
                      v355 = 2;
                    v357 = (uint64_t *)(v352 + 24);
                    v358 = v355 - 1;
                    do
                    {
                      v359 = *(_QWORD *)(v356 + 8 * *(v357 - 2)) * *(_QWORD *)(v353 + 8 * *(v357 - 2));
                      v360 = *v357;
                      v357 += 2;
                      *(_QWORD *)(v353 + 8 * v360) = v359;
                      --v358;
                    }
                    while (v358);
                  }
                  v361 = (uint64_t)(*((_QWORD *)v44 + 4) - *((_QWORD *)v44 + 3)) >> 3;
                  v383 = 0;
                  std::vector<unsigned long>::vector(&v386, v361, &v383);
                  do
                  {
                    v362 = v386;
                    if (v387 == v386)
                    {
                      v371 = 0;
                      v372 = *(_QWORD *)(**((_QWORD **)v44 + 1) + 8 * *((_QWORD *)v44 + 9));
                      v373 = *(_QWORD **)v380;
                    }
                    else
                    {
                      v363 = 0;
                      v364 = v387 - v386;
                      v365 = (uint64_t *)*((_QWORD *)v44 + 6);
                      if (v364 <= 1)
                        v364 = 1;
                      v366 = v386;
                      v367 = v364;
                      do
                      {
                        v369 = (uint64_t)*v366++;
                        v368 = v369;
                        v370 = *v365++;
                        v363 += v370 * v368;
                        --v367;
                      }
                      while (v367);
                      v371 = 0;
                      v372 = *(_QWORD *)(**((_QWORD **)v44 + 1) + 8 * (*((_QWORD *)v44 + 9) + v363));
                      v373 = *(_QWORD **)v380;
                      v374 = *(uint64_t **)&v381[8];
                      do
                      {
                        v376 = (uint64_t)*v362++;
                        v375 = v376;
                        v377 = *v374++;
                        v371 += v377 * v375;
                        --v364;
                      }
                      while (v364);
                    }
                    *(_QWORD *)(*v373 + 8 * v371) = v372;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v45, (uint64_t *)&v386));
                  if (v386)
                  {
                    v387 = v386;
                    operator delete(v386);
                  }
                  if ((_QWORD)v389)
                  {
                    *((_QWORD *)&v389 + 1) = v389;
                    operator delete((void *)v389);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v380);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v380))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v77 != *(char **)v380)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77, **(char ***)v380, *(_QWORD *)(*(_QWORD *)v380 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v380 + 8) - **(_QWORD **)v380) >> 3);
LABEL_568:
              turi::flexible_type_impl::ndarray<double>::~ndarray(v380);
            }
            goto LABEL_445;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v125 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v125, (uint64_t)v395[0]);
            v395[0] = v125;
            *v125 = 1;
            do
            {
              v126 = __ldaxr((unint64_t *)v9);
              v127 = --v126 == 0;
            }
            while (__stlxr(v126, (unint64_t *)v9));
LABEL_418:
            if (!v127)
              goto LABEL_444;
            v179 = 0x1020C405E66F15BLL;
            *(_QWORD *)v380 = v9 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
            break;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_444;
            v103 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v103, (uint64_t)v395[0]);
            v395[0] = v103;
            *v103 = 1;
            do
            {
              v104 = __ldaxr((unint64_t *)v9);
              v105 = --v104 == 0;
            }
            while (__stlxr(v104, (unint64_t *)v9));
LABEL_431:
            if (!v105)
              goto LABEL_444;
            v179 = 0x1020C405E66F15BLL;
            *(_QWORD *)v380 = v9 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
            break;
          case 8:
            if (*(_QWORD *)v9 != 1)
            {
              v133 = operator new();
              v134 = v395[0];
              *(_QWORD *)v133 = *v395[0];
              *(_QWORD *)(v133 + 8) = v134[1];
              v135 = v134[2];
              *(_QWORD *)(v133 + 16) = v135;
              if (v135)
              {
                v136 = (unsigned int *)(v135 + 8);
                do
                  v137 = __ldxr(v136);
                while (__stxr(v137 + 1, v136));
              }
              v138 = *(_OWORD *)(v134 + 3);
              v139 = *(_OWORD *)(v134 + 5);
              *(_OWORD *)(v133 + 56) = *(_OWORD *)(v134 + 7);
              *(_OWORD *)(v133 + 40) = v139;
              *(_OWORD *)(v133 + 24) = v138;
              v395[0] = (_QWORD *)v133;
              *(_QWORD *)v133 = 1;
              do
              {
                v140 = __ldaxr((unint64_t *)v9);
                v141 = v140 - 1;
              }
              while (__stlxr(v141, (unint64_t *)v9));
              if (!v141)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
                MEMORY[0x219A19A08](v9, 0x1030C40F1F0227BLL);
              }
            }
            v142 = v395[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v45, (turi::image_type *)v380);
            v143 = *(_OWORD *)v380;
            *(_OWORD *)v380 = 0uLL;
            v144 = *(_OWORD *)(v142 + 1);
            *(_OWORD *)(v142 + 1) = v143;
            v389 = v144;
            boost::detail::shared_count::~shared_count((unsigned int **)&v389 + 1);
            v145 = *(_OWORD *)&v380[16];
            v146 = *(_OWORD *)v381;
            *(_OWORD *)(v142 + 7) = *(_OWORD *)&v381[16];
            *(_OWORD *)(v142 + 5) = v146;
            *(_OWORD *)(v142 + 3) = v145;
            boost::detail::shared_count::~shared_count((unsigned int **)&v380[8]);
            goto LABEL_445;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v86 = (_QWORD *)operator new();
              v87 = v395[0] + 1;
              *v86 = *v395[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v86 + 1, (uint64_t)v87);
              v395[0] = v86;
              *v86 = 1;
              do
              {
                v88 = __ldaxr((unint64_t *)v9);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, (unint64_t *)v9));
              if (!v89)
              {
                v90 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v90, 0x1030C407B73B9F7);
              }
            }
            v91 = (char *)v395[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v395[0] + 1, v45);
            if (v91 != v44)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v91 + 24, *((char **)v44 + 3), *((_QWORD *)v44 + 4), (uint64_t)(*((_QWORD *)v44 + 4) - *((_QWORD *)v44 + 3)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v91 + 48, *((char **)v44 + 6), *((_QWORD *)v44 + 7), (uint64_t)(*((_QWORD *)v44 + 7) - *((_QWORD *)v44 + 6)) >> 3);
            }
            *((_QWORD *)v91 + 9) = *((_QWORD *)v44 + 9);
            goto LABEL_445;
          default:
            goto LABEL_572;
        }
LABEL_443:
        MEMORY[0x219A19A08](v9, v179);
LABEL_444:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_572:
        result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
LABEL_445:
  v296 = *(std::__shared_weak_count **)(a1 + 32);
  v378 = *(_QWORD *)(a1 + 24);
  v379 = v296;
  if (v296)
  {
    p_shared_owners = (unint64_t *)&v296->__shared_owners_;
    do
      v298 = __ldxr(p_shared_owners);
    while (__stxr(v298 + 1, p_shared_owners));
  }
  v299 = turi::query_eval::infer_planner_node_length((uint64_t)&v378);
  v300 = v299;
  v301 = v379;
  if (!v379)
    goto LABEL_452;
  v302 = (unint64_t *)&v379->__shared_owners_;
  do
    v303 = __ldaxr(v302);
  while (__stlxr(v303 - 1, v302));
  if (!v303)
  {
    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
    std::__shared_weak_count::__release_weak(v301);
    if ((v300 & 0x8000000000000000) == 0)
      goto LABEL_453;
  }
  else
  {
LABEL_452:
    if ((v299 & 0x8000000000000000) == 0)
    {
LABEL_453:
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v380);
      result = (*(uint64_t (**)(_QWORD, _QWORD **, uint64_t, uint64_t))(**(_QWORD **)v380 + 40))(*(_QWORD *)v380, v395, v300, a3);
      *a4 = *(_OWORD *)v380;
      goto LABEL_467;
    }
  }
  *(_QWORD **)&v391[5] = *(_QWORD **)((char *)v395 + 5);
  *(_QWORD **)v391 = v395[0];
  v391[12] = BYTE4(v395[1]);
  if (BYTE4(v395[1]) <= 9u && ((1 << SBYTE4(v395[1])) & 0x33C) != 0)
  {
    v306 = *(unint64_t **)v391;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 + 1, v306));
  }
  *(_QWORD *)&v393[5] = *(_QWORD *)&v391[5];
  v392 = &off_24D9336D0;
  *(_QWORD *)v393 = *(_QWORD *)v391;
  v393[12] = v391[12];
  v391[12] = 0;
  v394 = &v392;
  turi::unity_sarray::transform_lambda(a1, (uint64_t)&v392, a3, 0, 0, a4);
  v308 = v394;
  if (v394 == &v392)
  {
    v309 = 4;
    v308 = &v392;
    goto LABEL_465;
  }
  if (v394)
  {
    v309 = 5;
LABEL_465:
    ((void (*)(uint64_t (***)()))(*v308)[v309])(v308);
  }
  result = turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0((uint64_t)v391);
LABEL_467:
  switch(BYTE4(v395[1]))
  {
    case 2:
      v310 = v395[0];
      do
      {
        v311 = __ldaxr(v310);
        v312 = v311 - 1;
      }
      while (__stlxr(v312, v310));
      if (!v312)
      {
        v313 = v395[0];
        if (v395[0])
        {
          if (*((char *)v395[0] + 31) < 0)
            operator delete(*((void **)v395[0] + 1));
          v314 = v313;
          v315 = 0x1012C404EF22A49;
          goto LABEL_508;
        }
      }
      break;
    case 3:
      v327 = v395[0];
      do
      {
        v328 = __ldaxr(v327);
        v329 = v328 - 1;
      }
      while (__stlxr(v329, v327));
      if (!v329)
      {
        v330 = v395[0];
        if (v395[0])
        {
          v331 = (void *)v395[0][1];
          if (v331)
          {
            v395[0][2] = v331;
            operator delete(v331);
          }
          v314 = v330;
          v315 = 0x1080C409938AC02;
          goto LABEL_508;
        }
      }
      break;
    case 4:
      v316 = v395[0];
      do
      {
        v317 = __ldaxr(v316);
        v318 = v317 - 1;
      }
      while (__stlxr(v318, v316));
      if (!v318)
      {
        v319 = v395[0];
        if (v395[0])
        {
          *(_QWORD *)v380 = v395[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
          goto LABEL_501;
        }
      }
      break;
    case 5:
      v332 = v395[0];
      do
      {
        v333 = __ldaxr(v332);
        v334 = v333 - 1;
      }
      while (__stlxr(v334, v332));
      if (!v334)
      {
        v319 = v395[0];
        if (v395[0])
        {
          *(_QWORD *)v380 = v395[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v380);
LABEL_501:
          v314 = v319;
          v315 = 0x1020C405E66F15BLL;
          goto LABEL_508;
        }
      }
      break;
    case 8:
      v335 = v395[0];
      do
      {
        v336 = __ldaxr(v335);
        v337 = v336 - 1;
      }
      while (__stlxr(v337, v335));
      if (!v337)
      {
        v338 = v395[0];
        if (v395[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v395[0] + 2);
          v314 = v338;
          v326 = -235920773;
          goto LABEL_507;
        }
      }
      break;
    case 9:
      v320 = v395[0];
      do
      {
        v321 = __ldaxr(v320);
        v322 = v321 - 1;
      }
      while (__stlxr(v322, v320));
      if (!v322)
      {
        v323 = v395[0];
        if (v395[0])
        {
          v324 = (void *)v395[0][6];
          if (v324)
          {
            v395[0][7] = v324;
            operator delete(v324);
          }
          v325 = (void *)v323[3];
          if (v325)
          {
            v323[4] = v325;
            operator delete(v325);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v323 + 1));
          v314 = v323;
          v326 = 2071181815;
LABEL_507:
          v315 = v326 | 0x1030C4000000000;
LABEL_508:
          result = MEMORY[0x219A19A08](v314, v315);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2181EF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  va_list va;

  va_start(va, a3);
  v5 = *(void **)(v3 - 208);
  if (v5)
  {
    *(_QWORD *)(v3 - 200) = v5;
    operator delete(v5);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  switch(*(_BYTE *)(v3 - 108))
  {
    case 2:
      v6 = *(unint64_t **)(v3 - 120);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (v8)
        goto LABEL_41;
      v9 = *(_QWORD *)(v3 - 120);
      if (!v9)
        goto LABEL_41;
      if (*(char *)(v9 + 31) < 0)
        operator delete(*(void **)(v9 + 8));
      v10 = (_QWORD *)v9;
      v11 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v21 = *(unint64_t **)(v3 - 120);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_41;
      v24 = *(_QWORD **)(v3 - 120);
      if (!v24)
        goto LABEL_41;
      v25 = (void *)v24[1];
      if (v25)
      {
        v24[2] = v25;
        operator delete(v25);
      }
      v10 = v24;
      v11 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v12 = *(unint64_t **)(v3 - 120);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (v14)
        goto LABEL_41;
      v15 = *(_QWORD **)(v3 - 120);
      if (!v15)
        goto LABEL_41;
      *(_QWORD *)(v3 - 176) = v15 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 176));
      goto LABEL_33;
    case 5:
      v26 = *(unint64_t **)(v3 - 120);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_41;
      v15 = *(_QWORD **)(v3 - 120);
      if (!v15)
        goto LABEL_41;
      *(_QWORD *)(v3 - 176) = v15 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 176));
LABEL_33:
      v10 = v15;
      v11 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v29 = *(unint64_t **)(v3 - 120);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_41;
      v32 = *(_QWORD *)(v3 - 120);
      if (!v32)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v32 + 16));
      v10 = (_QWORD *)v32;
      v20 = -235920773;
      goto LABEL_39;
    case 9:
      v16 = *(unint64_t **)(v3 - 120);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (v18)
        goto LABEL_41;
      v19 = *(_QWORD **)(v3 - 120);
      if (!v19)
        goto LABEL_41;
      v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v19);
      v20 = 2071181815;
LABEL_39:
      v11 = v20 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v10, v11);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

uint64_t turi::unity_sarray::to_const(turi::flexible_type const&,turi::flex_type_enum)::$_0::~$_0(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void turi::unity_sarray::iterator_get_next(turi::unity_sarray *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *exception;
  std::locale v31;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "iterator_get_next", 2863, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v31);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_QWORD *)this + 6) && (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this))
  {
    std::vector<turi::flexible_type>::reserve(a3, a2);
    v12 = (uint64_t *)((char *)this + 56);
    v13 = (_QWORD *)((char *)this + 64);
    while (1)
    {
      v14 = (_QWORD *)*v12;
      v15 = (_QWORD *)*v13;
      if (*(_QWORD *)*v12 == *(_QWORD *)*v13 && v14[1] == v15[1] && v14[4] == v15[4])
        break;
      v17 = (char *)(v14 + 2);
      v18 = a3[1];
      if (v18 >= a3[2])
      {
        v26 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a3, v17);
      }
      else
      {
        *(_QWORD *)v18 = 0;
        *(_DWORD *)(v18 + 8) = 0;
        *(_BYTE *)(v18 + 12) = 0;
        if ((char *)v18 != v17)
        {
          v19 = *(_QWORD *)v17;
          *(_QWORD *)(v18 + 5) = *(_QWORD *)((char *)v14 + 21);
          *(_QWORD *)v18 = v19;
          v20 = *((unsigned __int8 *)v14 + 28);
          *(_BYTE *)(v18 + 12) = v20;
          v21 = v20 > 9;
          v22 = (1 << v20) & 0x33C;
          if (!v21 && v22 != 0)
          {
            v24 = *(unint64_t **)v18;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
          }
        }
        v26 = v18 + 16;
      }
      a3[1] = v26;
      turi::sarray_iterator<turi::flexible_type>::operator++(*v12);
      v16 = (a3[1] - *a3) >> 4;
      if (v16 >= a2)
      {
LABEL_27:
        if (v16 >= a2)
          return;
        v27 = *((_QWORD *)this + 5);
        if (v27 >= (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6)))
          return;
        v28 = operator new();
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
        std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 7, v28);
        v29 = operator new();
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), *((_QWORD *)this + 5));
        std::unique_ptr<turi::sarray_iterator<turi::flexible_type>>::reset[abi:ne180100]((uint64_t *)this + 8, v29);
        ++*((_QWORD *)this + 5);
      }
    }
    v16 = (a3[1] - *a3) >> 4;
    goto LABEL_27;
  }
}

void sub_2181EFD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::materialize(turi::unity_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  turi::unity_sarray::get_underlying_sarray(this, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

unint64_t turi::unity_sarray::is_materialized(turi::unity_sarray *this)
{
  std::__shared_weak_count *v1;
  _QWORD *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t is_source_node;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int *v17;
  std::__shared_weak_count *v18;
  void **v19;
  _OWORD v20[2];
  __int128 v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v2 = (_QWORD *)((char *)this + 24);
  v15 = *((_QWORD *)this + 3);
  v16 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v20, 0, sizeof(v20));
  BYTE11(v21) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v23 + 1) = 0;
  v24 = 0uLL;
  turi::query_eval::optimization_engine::optimize_planner_graph(&v15, (uint64_t)v20, &v17);
  v19 = (void **)&v23 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  v5 = (_QWORD *)v21;
  if ((_OWORD *)v21 == (_OWORD *)((char *)v20 + 8))
  {
    v6 = 4;
    v5 = (_QWORD *)v20 + 1;
    goto LABEL_10;
  }
  if ((_QWORD)v21)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  is_source_node = turi::query_eval::is_source_node(&v17);
  if ((_DWORD)is_source_node)
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v2, (uint64_t *)&v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return is_source_node;
}

void sub_2181EFF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::get_content_identifier(turi::unity_sarray *this)
{
  turi::random *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  int v10;
  turi::cityhash_local *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  turi::random::generator *source;
  pthread_mutex_t *v20;
  unint64_t v21;
  __int128 v23;
  std::string v24;
  void *v25;
  char v26;
  void *__p;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31[4];

  v2 = (turi::random *)(*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 400))(this);
  if ((_DWORD)v2)
  {
    turi::unity_sarray::get_underlying_sarray(this, &v23);
    turi::index_file_information::index_file_information(&v24, (const turi::index_file_information *)(v23 + 8));
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v7 = v29;
    v6 = v30;
    v8 = 0xC6A4A7935BD1E995 * ((0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 3)) ^ 0xC3A5C85C97CB3127);
    for (i = 0xC6A4A7935BD1E995 * (v8 ^ (v8 >> 47)); v7 != v6; v7 += 24)
    {
      v10 = *(char *)(v7 + 23);
      if (v10 >= 0)
        v11 = (turi::cityhash_local *)v7;
      else
        v11 = *(turi::cityhash_local **)v7;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      v13 = turi::cityhash_local::CityHash64(v11, v12);
      v14 = 5
          * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * i) | ((0x87C37B91114253D5 * i) >> 31))) ^ 0x73A3916AE45D01E5, 27)+ 0x4231D716C8ADF0A2;
      i = (5
         * (__ROR8__((0x87C37B91114253D5 * ((0x93A2C9BF80000000 * v13) | ((0x4CF5AD432745937FLL * v13) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v14)+ 944331445) ^ v14;
    }
    v15 = (uint64_t *)__p;
    if (__p != v28)
    {
      do
      {
        v16 = *v15++;
        v17 = (0xC6A4A7935BD1E995 * (v16 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995
                                                                      * (v16 ^ 0xC3A5C85C97CB3127)) >> 47);
        v18 = 5
            * __ROR8__((0x4CF5AD432745937FLL * ((0x2284A7AA00000000 * i) | ((0x87C37B91114253D5 * i) >> 31))) ^ 0x73A3916AE45D01E5, 27);
        i = (5
           * (__ROR8__((0x87C37B91114253D5 * ((0x5F3637F580000000 * v17) | ((0x60004CFCBE6C6FEBLL * v17) >> 33))) ^ 0x73A3916AE45D01E5, 31)+ v18+ 0x4231D716C8ADF0A2)+ 944331445) ^ (v18 + 0x4231D716C8ADF0A2);
      }
      while (v15 != v28);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v31, v31[1]);
    *(_QWORD *)&v23 = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v26 < 0)
      operator delete(v25);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    source = turi::random::get_source(v2);
    v20 = (pthread_mutex_t *)((char *)source + 6288);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    v21 = 0x5DEECE66DLL * *((_QWORD *)source + 785) + 11;
    *((_QWORD *)source + 785) = v21 & 0xFFFFFFFFFFFFLL;
    i = (v21 >> 17) & 0x7FFFFFFF;
    pthread_mutex_unlock(v20);
  }
  return i;
}

void sub_2181F030C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::copy_range(turi::unity_sarray *this@<X0>, std::string::size_type a2@<X1>, unint64_t a3@<X2>, char *a4@<X3>, _OWORD *a5@<X8>)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t v16;
  turi::unity_sarray *v17;
  uint64_t v18;
  std::locale::__imp *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::locale::__imp *locale;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *exception;
  uint64_t v53[2];
  __int128 v54;
  __int128 v55;
  std::locale v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;

  v10 = (int *)global_logger();
  if (v10[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "copy_range", 2928, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v56, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v56);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (!a3)
    turi::unity_sarray::copy_range(unsigned long,unsigned long,unsigned long)::$_0::operator()();
  v16 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  if (v16 < (unint64_t)a4)
    a4 = (char *)v16;
  v17 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v17);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)&v59, (uint64_t)v17);
  if ((unint64_t)a4 <= a2)
  {
    v35 = v59;
    v56.__locale_ = 0;
    v57 = 0;
    v58 = 0;
    v36 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
    (*(void (**)(uint64_t, std::locale *, uint64_t))(*(_QWORD *)v35 + 32))(v35, &v56, v36);
    *(_QWORD *)&v55 = &v56;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    *a5 = v59;
    v59 = 0uLL;
    goto LABEL_53;
  }
  if (a3 == 1)
  {
    v19 = (std::locale::__imp *)*((_QWORD *)this + 3);
    v18 = *((_QWORD *)this + 4);
    v20 = (_QWORD *)((char *)this + 24);
    v56.__locale_ = v19;
    v57 = v18;
    if (v18)
    {
      v21 = (unint64_t *)(v18 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    turi::query_eval::planner::slice((unint64_t *)&v56, a2, a4, (uint64_t *)&v55);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v20, (uint64_t *)&v56);
    v23 = (_QWORD *)v59;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    v54 = v55;
    if (*((_QWORD *)&v55 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    turi::unity_sarray::construct_from_planner_node(v23, (uint64_t *)&v54);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *a5 = v59;
    v59 = 0uLL;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    if (*((_QWORD *)&v55 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)v57;
    if (v57)
    {
      v33 = (unint64_t *)(v57 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      goto LABEL_51;
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v56);
    turi::sarray<turi::flexible_type>::open_for_write((uint64_t)v56.__locale_, turi::SFRAME_DEFAULT_NUM_SEGMENTS, 0);
    locale = v56.__locale_;
    v38 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 112))(this);
    turi::sarray<turi::flexible_type>::set_type((uint64_t)locale, v38);
    turi::unity_sarray::get_underlying_sarray(this, &v55);
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(v55, v56.__locale_, a2, a3, (unint64_t)a4);
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v56.__locale_ + 40))(v56.__locale_);
    v39 = v59;
    v40 = (std::__shared_weak_count *)v57;
    v53[0] = (uint64_t)v56.__locale_;
    v53[1] = v57;
    if (v57)
    {
      v41 = (unint64_t *)(v57 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    turi::unity_sarray::construct_from_sarray(v39, v53);
    if (v40)
    {
      v43 = (unint64_t *)&v40->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    *a5 = v59;
    v59 = 0uLL;
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
    if (*((_QWORD *)&v55 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v32 = (std::__shared_weak_count *)v57;
    if (v57)
    {
      v48 = (unint64_t *)(v57 + 8);
      do
        v34 = __ldaxr(v48);
      while (__stlxr(v34 - 1, v48));
LABEL_51:
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
LABEL_53:
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_2181F07C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, char a19)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(uint64_t a1, std::locale::__imp *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  _QWORD *exception;
  std::locale v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v29 = a4;
  v30 = a3;
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "copy_range", 603, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Function entry", 14);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 248))
    v16 = *(_BYTE *)(a1 + 249) == 0;
  else
    v16 = 0;
  if (!v16)
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
  if (!*((_BYTE *)a2 + 248) || !*((_BYTE *)a2 + 249))
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  turi::sarray<turi::flexible_type>::get_reader(a1, &v28);
  v17 = turi::sarray_reader<turi::flexible_type>::size(v28);
  if (v17 >= a5)
    v18 = a5;
  else
    v18 = v17;
  if (v18 < a3)
    turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(void)#3}::operator()();
  v27 = (v18 + ~a3) / a4 + 1;
  v19 = (*(uint64_t (**)(std::locale::__imp *))(*(_QWORD *)a2 + 24))(a2);
  v22.__locale_ = a2;
  v23 = &v27;
  v24 = (uint64_t *)&v29;
  v25 = &v30;
  v26 = &v28;
  turi::parallel_for<void turi::copy_range<turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,void,void>(turi::sarray<turi::flexible_type> &,turi::sarray<turi::flexible_type> &,unsigned long,unsigned long,unsigned long)::{lambda(unsigned long)#1}>(0, v19, &v22);
  result = v28;
  v28 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2181F0ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::builtin_rolling_apply(turi::unity_sarray *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  int *v12;
  file_logger *v13;
  file_logger *started;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  turi::unity_sarray *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::locale::__imp *locale;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *exception;
  uint64_t v44[2];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::locale v52[2];

  v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "builtin_rolling_apply", 2991, 1);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15 && *((_BYTE *)v15 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Function entry", 14);
    v16 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(v52, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(v52);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v18 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v18);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>((uint64_t *)v52, (uint64_t)v18);
  turi::get_builtin_group_aggregator(a2, &v50);
  turi::unity_sarray::get_underlying_sarray(a1, &v49);
  v19 = v49;
  v45 = v50;
  v46 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  turi::rolling_aggregate::rolling_apply(v19, (std::locale::__imp *)&v45, a3, a4, a5, &v47);
  v22 = v46;
  if (v46)
  {
    v23 = (unint64_t *)&v46->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  locale = v52[0].__locale_;
  v26 = (std::__shared_weak_count *)v48;
  v44[0] = v47;
  v44[1] = v48;
  if (v48)
  {
    v27 = (unint64_t *)(v48 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  turi::unity_sarray::construct_from_sarray((uint64_t)locale, v44);
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *a6 = *(_OWORD *)&v52[0].__locale_;
  v52[0].__locale_ = 0;
  v52[1].__locale_ = 0;
  v31 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v32 = (unint64_t *)(v48 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v51;
  if (v51)
  {
    v38 = (unint64_t *)&v51->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)v52[1].__locale_;
  if (v52[1].__locale_)
  {
    v41 = (unint64_t *)((char *)v52[1].__locale_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2181F0E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, std::locale a19)
{
  std::locale::~locale(&a19);
  _Unwind_Resume(a1);
}

void sub_2181F0ED4()
{
  uint64_t v0;

  MEMORY[0x219A19A08](v0, 0x10A1C40FF9886D7);
  JUMPOUT(0x2181F0ECCLL);
}

void turi::unity_sarray::show(uint64_t a1, uint64_t a2, const turi::flexible_type *a3, const turi::flexible_type *a4, const turi::flexible_type *a5)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[47];

  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(a1, &v12);
  turi::gl_sarray::gl_sarray((uint64_t)v14, &v12);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  turi::gl_sarray::show((turi::gl_sarray *)v14, a2, a3, a4, a5);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v14);
}

void sub_2181F0FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::plot(turi::unity_sarray *this@<X0>, const turi::flexible_type *a2@<X1>, const turi::flexible_type *a3@<X2>, const turi::flexible_type *a4@<X3>, _OWORD *a5@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[40];

  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>((uint64_t)this, &v13);
  turi::gl_sarray::gl_sarray((uint64_t)v15, &v13);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  turi::gl_sarray::plot((turi::gl_sarray *)v15, a2, a3, a4, &v12);
  *a5 = v12;
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v15);
}

void sub_2181F1088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::builtin_cumulative_aggregate(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *exception;
  _BYTE v16[40];
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::locale v20;

  v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_interface/unity_sarray.cpp", "builtin_cumulative_aggregate", 3025, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v20);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  std::allocate_shared[abi:ne180100]<turi::unity_sarray,std::allocator<turi::unity_sarray>,turi::unity_sarray&,void>(a1, &v18);
  turi::gl_sarray::gl_sarray((uint64_t)&v20, &v18);
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  turi::gl_sarray::builtin_cumulative_aggregate((turi::gl_sarray *)&v20, a2, (turi::gl_sarray *)v16);
  turi::gl_sarray::get_proxy((uint64_t)v16, &v17);
  *a3 = v17;
  v17 = 0uLL;
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v16);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v20);
}

void sub_2181F128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, std::locale a20)
{
  std::locale::~locale(&a20);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::_head(turi::unity_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 120))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 544))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2181F1350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::unity_sarray::_tail(turi::unity_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 360))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 544))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_2181F13E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::to_vector(turi::unity_sarray *this)
{
  uint64_t v2;

  (*(void (**)(turi::unity_sarray *))(*(_QWORD *)this + 376))(this);
  v2 = (*(uint64_t (**)(turi::unity_sarray *))(*(_QWORD *)this + 96))(this);
  return (*(uint64_t (**)(turi::unity_sarray *, uint64_t))(*(_QWORD *)this + 384))(this, v2);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"val.get_type() == type || val.get_type() == flex_type_enum::UNDEFINED", 69);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 82, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::make_planner_node(turi::flexible_type const&,turi::flex_type_enum,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181F1540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],turi::flexible_type const&,0>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t **v5;
  unint64_t *v6;
  BOOL v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  result = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[3] = 0;
  v5 = (unint64_t **)(result + 3);
  *((_DWORD *)result + 8) = 0;
  *((_BYTE *)result + 36) = 0;
  if (result + 3 != (_QWORD *)a3)
  {
    v6 = *(unint64_t **)a3;
    *(_QWORD *)((char *)result + 29) = *(_QWORD *)(a3 + 5);
    *v5 = v6;
    LODWORD(v6) = *(unsigned __int8 *)(a3 + 12);
    *((_BYTE *)result + 36) = (_BYTE)v6;
    v7 = v6 > 9;
    v8 = (1 << (char)v6) & 0x33C;
    if (!v7 && v8 != 0)
    {
      v10 = *v5;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return result;
}

void sub_2181F17DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92D5C0;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), a2);
  *a1 = v4;
  return a1;
}

void sub_2181F18D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::pair<BOOL,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 8);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 8);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 8);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 8);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

_QWORD *turi::any::any<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92D4E8;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), a2);
  *a1 = v4;
  return a1;
}

void sub_2181F1DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::flex_type_enum>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<turi::flexible_type> &,0>(uint64_t a1, char *a2, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = *v6 + 8;
  if ((uint64_t **)v45 != a3)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v45, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_2181F2420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

_QWORD *turi::any::any<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D92D698;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), a2);
  *a1 = v4;
  return a1;
}

void sub_2181F26CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,void>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181F27E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6[5];
  double v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a1;
  v8 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  v7 = (double)(unint64_t)((a2 - a1) >> 4) / (double)v8;
  v6[0] = &v10;
  v6[1] = (uint64_t *)&v7;
  v6[2] = (uint64_t *)&v8;
  v6[3] = &v9;
  v6[4] = a3;
  turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v8, v6);
}

void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1}>(std::__wrap_iter<turi::flexible_type const*>)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2181F2A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *(double *)a1[1];
  v4 = **a1;
  if (*a1[2] - 1 == a2)
    v5 = *a1[3];
  else
    v5 = v4 + 16 * (uint64_t)(v3 * (double)(a2 + 1));
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, unint64_t))(*a1[4] + 32))(v13, a1[4], a2);
  for (i = v4 + 16 * (uint64_t)(v3 * (double)a2); i != v5; i += 16)
  {
    if (!v14)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 48))(v14, i);
  }
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_18;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_18:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2181F2C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186E2264 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186E2264 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<turi::flexible_type const*> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2181F2D58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::sarray<turi::flexible_type>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D91E608;
  a1[1] = 0;
  std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2181F2DB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::sarray<turi::flexible_type>::sarray(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2181F2E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2181F2F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v17;
  turi::index_file_information *v18;
  pthread_mutex_t *v19;
  void **v20;

  a17 = v17 + 256;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  turi::mutex::~mutex(v19);
  if (*(char *)(v17 + 175) < 0)
    operator delete(*v20);
  turi::index_file_information::~index_file_information(v18);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,std::string,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x130uLL);
  result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2181F3000(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<turi::sarray<turi::flexible_type>>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D91E608;
  a1[1] = 0;
  std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2181F3060(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::sarray<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray<turi::flexible_type>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v4;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  turi::sarray<turi::flexible_type>::sarray(a2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_2181F30C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_2181F3148(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D931890;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D931890;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator()(_QWORD *a1, uint64_t a2, turi::sframe_rows **a3)
{
  turi::sframe_rows *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  BOOL v14;

  v4 = *a3;
  if (!*((_BYTE *)*a3 + 24))
  {
    turi::sframe_rows::ensure_unique(*a3);
    if (!*((_BYTE *)v4 + 24))
      turi::sframe_rows::ensure_unique(v4);
  }
  if (*(_QWORD *)v4 == *((_QWORD *)v4 + 1))
    return 0;
  v5 = **(_QWORD ***)v4;
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(**(_QWORD **)v4 + 8) - *v5;
  if (!v6)
    return 0;
  v7 = 0;
  v8 = (v6 >> 4) - 1;
  do
  {
    v9 = *(_QWORD *)(a1[1] + 24);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, ***(_QWORD ***)v4 + v7);
    v10 = (uint64_t *)a1[2];
    v11 = *v10 + 1;
    *v10 = v11;
    v12 = a1[3];
    result = v11 == v12;
    v14 = v11 == v12 || v8-- == 0;
    v7 += 16;
  }
  while (!v14);
  return result;
}

uint64_t std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::head(unsigned long)::$_0,std::allocator<turi::unity_sarray::head(unsigned long)::$_0>,BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::target_type()
{
}

_QWORD *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D931910;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D931910;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_BYTE *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = &off_24D931910;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_2181F3414(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_24D931910;
  result = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t ****a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char **v21;
  char v22;
  int v23;
  _BYTE v24[13];
  unsigned int v25[20];
  int v26;
  _QWORD v27[10];

  v27[9] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v6 = ****a2;
  if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(v6 + 16 * (_QWORD)v5 + 12) == 7)
  {
    *(_QWORD *)(a3 + 5) = 0;
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 7;
  }
  else
  {
    v7 = (uint64_t *)(v6 + 16 * (_QWORD)v5);
    memset(v27, 0, 13);
    if (v27 == v7)
    {
      v15 = 0;
      v26 = 0;
      v16 = *v7;
      *(_QWORD *)&v24[5] = *(uint64_t *)((char *)v7 + 5);
      *(_QWORD *)v24 = v16;
      v24[12] = 0;
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)((char *)v27 + 5) = *(uint64_t *)((char *)v7 + 5);
      v27[0] = v8;
      BYTE4(v27[1]) = *((_BYTE *)v7 + 12);
      v9 = BYTE4(v27[1]);
      if (BYTE4(v27[1]) <= 9u && ((1 << SBYTE4(v27[1])) & 0x33C) != 0)
      {
        v11 = (unint64_t *)v27[0];
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v9 = BYTE4(v27[1]);
      }
      v26 = 0;
      *(_QWORD *)&v24[5] = *(_QWORD *)((char *)v27 + 5);
      *(_QWORD *)v24 = v27[0];
      v24[12] = v9;
      if (v9 > 9 || ((1 << v9) & 0x33C) == 0)
      {
        v15 = 0;
      }
      else
      {
        do
          v14 = __ldaxr(*(unint64_t **)v24);
        while (__stlxr(v14 + 1, *(unint64_t **)v24));
        v15 = v26;
      }
    }
    v23 = v15 ^ (v15 >> 31);
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v21 = &v18;
    v22 = 0;
    v18 = (char *)operator new(0x50uLL);
    v19 = (uint64_t)v18;
    v20 = v18 + 80;
    v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>((uint64_t)&v20, (uint64_t)&v23, (uint64_t)v25, (uint64_t)v18);
    v17 = *(_QWORD *)(a1 + 32);
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(unsigned int *__return_ptr, uint64_t, char **))(*(_QWORD *)v17 + 48))(v25, v17, &v18);
    turi::variant_converter<turi::flexible_type,void>::get((int *)v25, a3);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v25);
    v21 = &v18;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v23);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v26);
  }
}

void sub_2181F3710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26)
{
  uint64_t v26;

  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a26);
  a13 = (void **)&a10;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&a16);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_native(turi::function_closure_info const&,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v10 = (std::string *)(a4 + v7 + 8);
      v8 = a2 + v7 + 8;
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(a2 + v7), *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31), &v10, v8);
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7) ^ (*(int *)(a2 + v7) >> 31);
      v7 += 80;
    }
    while (v8 + 72 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2181F38A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24D931990;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24D931990;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_WORD *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  uint64_t v2;
  _WORD *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = &off_24D931990;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v3 + 4), v2);
  v3[20] = *(_WORD *)(a1 + 40);
  return v3;
}

void sub_2181F39E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_24D931990;
  result = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  return result;
}

_QWORD *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0,std::allocator<turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

uint64_t std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void turi::unity_sarray::transform_lambda(std::function<turi::flexible_type ()(turi::flexible_type const&)>,turi::flex_type_enum,BOOL,unsigned long long)::$_0::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v26;
  char **v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v52;
  unint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  void *v99;
  _QWORD *v100;
  unint64_t v101;
  unint64_t v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  double v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  BOOL v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  BOOL v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  unsigned int v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  void *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  void *v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  __int128 v214;
  __int128 v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int *v234;
  unsigned int v235;
  __int128 v236;
  __int128 v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  __int128 v244;
  __int128 v245;
  unint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  _QWORD *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  __int128 v256;
  __int128 v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  __int128 v266;
  __int128 v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  __int128 v276;
  __int128 v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  void *v293;
  void *v294;
  unsigned int v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  void *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void **v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t *v334;
  void **v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  _BYTE v349[32];
  uint64_t v350;
  void *v351;
  void *v352;
  uint64_t v353;
  void **v354;
  void **v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  _BYTE v359[13];
  uint64_t v360;

  v360 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 33))
  {
    v5 = *(unsigned __int8 *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8) + 12);
    if (v5 == 7)
    {
      *(_QWORD **)((char *)a3 + 5) = 0;
      *a3 = 0;
LABEL_9:
      *((_BYTE *)a3 + 12) = v5;
      return;
    }
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v359, v6, ****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8));
  LOBYTE(v5) = v359[12];
  if (v359[12] == 7 || (v8 = *(unsigned __int8 *)(a1 + 32), v359[12] == v8))
  {
    *(_QWORD **)((char *)a3 + 5) = *(_QWORD **)&v359[5];
    *a3 = *(_QWORD **)v359;
    goto LABEL_9;
  }
  v9 = 0;
  *(_QWORD **)((char *)a3 + 5) = 0;
  *a3 = 0;
  *((_BYTE *)a3 + 12) = v8;
  switch(v8)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v9 = operator new();
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      goto LABEL_14;
    case 6:
      v9 = 0x1900000000000000;
      *a3 = (_QWORD *)0x1900000000000000;
      *((_DWORD *)a3 + 2) = 0;
      break;
    case 8:
      v9 = operator new();
      *(_QWORD *)v9 = 0;
      v7 = 0.0;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      *(_OWORD *)(v9 + 40) = 0u;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 3;
      goto LABEL_14;
    case 9:
      v9 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v9);
LABEL_14:
      *a3 = (_QWORD *)v9;
      *(_QWORD *)v9 = 1;
      break;
    default:
      break;
  }
  if (v359 != (_BYTE *)a3)
  {
    switch(v359[12])
    {
      case 0:
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
            v10 = *(_QWORD *)v359;
            goto LABEL_72;
          case 1:
            v126 = (double)*(uint64_t *)v359;
            goto LABEL_299;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v119 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v119, (uint64_t)*a3);
              *a3 = v119;
              *v119 = 1;
              do
              {
                v120 = __ldaxr((unint64_t *)v9);
                v121 = v120 - 1;
              }
              while (__stlxr(v121, (unint64_t *)v9));
              if (!v121)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v122 = (uint64_t)*a3;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v347);
            std::ostream::operator<<();
            std::stringbuf::str();
            v123 = v122 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v347);
            if (*(char *)(v122 + 31) < 0)
              goto LABEL_217;
            goto LABEL_218;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v88 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v88, (uint64_t)*a3);
            *a3 = v88;
            *v88 = 1;
            do
            {
              v89 = __ldaxr((unint64_t *)v9);
              v54 = --v89 == 0;
            }
            while (__stlxr(v89, (unint64_t *)v9));
            goto LABEL_310;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v202 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v202, (uint64_t)*a3);
            *a3 = v202;
            *v202 = 1;
            do
            {
              v203 = __ldaxr((unint64_t *)v9);
              v150 = --v203 == 0;
            }
            while (__stlxr(v203, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v227 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v227, (uint64_t)*a3);
            *a3 = v227;
            *v227 = 1;
            do
            {
              v228 = __ldaxr((unint64_t *)v9);
              v80 = --v228 == 0;
            }
            while (__stlxr(v228, (unint64_t *)v9));
            goto LABEL_406;
          case 6:
            *a3 = (_QWORD *)(*(_QWORD *)v359 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            *((_DWORD *)a3 + 2) = 0;
            goto LABEL_433;
          case 7:
            goto LABEL_432;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v231 = operator new();
            v232 = (uint64_t)*a3;
            *(_QWORD *)v231 = **a3;
            *(_QWORD *)(v231 + 8) = *(_QWORD *)(v232 + 8);
            v233 = *(_QWORD *)(v232 + 16);
            *(_QWORD *)(v231 + 16) = v233;
            if (v233)
            {
              v234 = (unsigned int *)(v233 + 8);
              do
                v235 = __ldxr(v234);
              while (__stxr(v235 + 1, v234));
            }
            v236 = *(_OWORD *)(v232 + 24);
            v237 = *(_OWORD *)(v232 + 40);
            *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
            *(_OWORD *)(v231 + 40) = v237;
            *(_OWORD *)(v231 + 24) = v236;
            *a3 = (_QWORD *)v231;
            *(_QWORD *)v231 = 1;
            do
            {
              v238 = __ldaxr((unint64_t *)v9);
              v140 = --v238 == 0;
            }
            while (__stlxr(v238, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v111 = (_QWORD *)operator new();
            v112 = (uint64_t)(*a3 + 1);
            *v111 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v111 + 1, v112);
            *a3 = v111;
            *v111 = 1;
            do
            {
              v113 = __ldaxr((unint64_t *)v9);
              v77 = --v113 == 0;
            }
            while (__stlxr(v113, (unint64_t *)v9));
            goto LABEL_257;
          default:
            goto LABEL_538;
        }
      case 1:
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
            v10 = (uint64_t)*(double *)v359;
            goto LABEL_72;
          case 1:
            v126 = *(double *)v359;
            goto LABEL_299;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v155 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v155, (uint64_t)*a3);
              *a3 = v155;
              *v155 = 1;
              do
              {
                v156 = __ldaxr((unint64_t *)v9);
                v157 = v156 - 1;
              }
              while (__stlxr(v157, (unint64_t *)v9));
              if (!v157)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v158 = (uint64_t)*a3;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v347);
            std::ostream::operator<<();
            std::stringbuf::str();
            v123 = v158 + 8;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v347);
            if (*(char *)(v158 + 31) < 0)
LABEL_217:
              operator delete(*(void **)v123);
LABEL_218:
            v124 = v357;
            v125 = v358;
            goto LABEL_479;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v90 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v90, (uint64_t)*a3);
            *a3 = v90;
            *v90 = 1;
            do
            {
              v91 = __ldaxr((unint64_t *)v9);
              v54 = --v91 == 0;
            }
            while (__stlxr(v91, (unint64_t *)v9));
            goto LABEL_310;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v204 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v204, (uint64_t)*a3);
            *a3 = v204;
            *v204 = 1;
            do
            {
              v205 = __ldaxr((unint64_t *)v9);
              v150 = --v205 == 0;
            }
            while (__stlxr(v205, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v229 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v229, (uint64_t)*a3);
            *a3 = v229;
            *v229 = 1;
            do
            {
              v230 = __ldaxr((unint64_t *)v9);
              v80 = --v230 == 0;
            }
            while (__stlxr(v230, (unint64_t *)v9));
            goto LABEL_406;
          case 6:
            v159 = (int)((*(double *)v359 - (double)(uint64_t)floor(*(double *)v359)) * 1000000.0);
            if (v159 >= 999999)
              v159 = 999999;
            if (v159 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            *a3 = (_QWORD *)(vcvtmd_s64_f64(*(double *)v359) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            *((_DWORD *)a3 + 2) = v159;
            goto LABEL_433;
          case 7:
            goto LABEL_432;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v239 = operator new();
            v240 = (uint64_t)*a3;
            *(_QWORD *)v239 = **a3;
            *(_QWORD *)(v239 + 8) = *(_QWORD *)(v240 + 8);
            v241 = *(_QWORD *)(v240 + 16);
            *(_QWORD *)(v239 + 16) = v241;
            if (v241)
            {
              v242 = (unsigned int *)(v241 + 8);
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = *(_OWORD *)(v240 + 24);
            v245 = *(_OWORD *)(v240 + 40);
            *(_OWORD *)(v239 + 56) = *(_OWORD *)(v240 + 56);
            *(_OWORD *)(v239 + 40) = v245;
            *(_OWORD *)(v239 + 24) = v244;
            *a3 = (_QWORD *)v239;
            *(_QWORD *)v239 = 1;
            do
            {
              v246 = __ldaxr((unint64_t *)v9);
              v140 = --v246 == 0;
            }
            while (__stlxr(v246, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v114 = (_QWORD *)operator new();
            v115 = (uint64_t)(*a3 + 1);
            *v114 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, v115);
            *a3 = v114;
            *v114 = 1;
            do
            {
              v116 = __ldaxr((unint64_t *)v9);
              v77 = --v116 == 0;
            }
            while (__stlxr(v116, (unint64_t *)v9));
            goto LABEL_257;
          default:
            goto LABEL_538;
        }
      case 2:
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            v21 = *(_QWORD *)v359;
            if (*(_QWORD *)v9 != 1)
            {
              v22 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, (uint64_t)*a3);
              *a3 = v22;
              *v22 = 1;
              do
              {
                v23 = __ldaxr((unint64_t *)v9);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, (unint64_t *)v9));
              if (!v24)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            if (*(char *)(v21 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v347, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
            }
            else
            {
              v25 = *(_OWORD *)(v21 + 8);
              *(_QWORD *)&v348 = *(_QWORD *)(v21 + 24);
              v347 = v25;
            }
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v52 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v52, (uint64_t)*a3);
            *a3 = v52;
            *v52 = 1;
            do
            {
              v53 = __ldaxr((unint64_t *)v9);
              v54 = --v53 == 0;
            }
            while (__stlxr(v53, (unint64_t *)v9));
            goto LABEL_310;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v180 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v180, (uint64_t)*a3);
            *a3 = v180;
            *v180 = 1;
            do
            {
              v181 = __ldaxr((unint64_t *)v9);
              v150 = --v181 == 0;
            }
            while (__stlxr(v181, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v117 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v117, (uint64_t)*a3);
            *a3 = v117;
            *v117 = 1;
            do
            {
              v118 = __ldaxr((unint64_t *)v9);
              v80 = --v118 == 0;
            }
            while (__stlxr(v118, (unint64_t *)v9));
            goto LABEL_406;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v182 = operator new();
            v183 = (uint64_t)*a3;
            *(_QWORD *)v182 = **a3;
            *(_QWORD *)(v182 + 8) = *(_QWORD *)(v183 + 8);
            v184 = *(_QWORD *)(v183 + 16);
            *(_QWORD *)(v182 + 16) = v184;
            if (v184)
            {
              v185 = (unsigned int *)(v184 + 8);
              do
                v186 = __ldxr(v185);
              while (__stxr(v186 + 1, v185));
            }
            v187 = *(_OWORD *)(v183 + 24);
            v188 = *(_OWORD *)(v183 + 40);
            *(_OWORD *)(v182 + 56) = *(_OWORD *)(v183 + 56);
            *(_OWORD *)(v182 + 40) = v188;
            *(_OWORD *)(v182 + 24) = v187;
            *a3 = (_QWORD *)v182;
            *(_QWORD *)v182 = 1;
            do
            {
              v189 = __ldaxr((unint64_t *)v9);
              v140 = --v189 == 0;
            }
            while (__stlxr(v189, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v74 = (_QWORD *)operator new();
            v75 = (uint64_t)(*a3 + 1);
            *v74 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v74 + 1, v75);
            *a3 = v74;
            *v74 = 1;
            do
            {
              v76 = __ldaxr((unint64_t *)v9);
              v77 = --v76 == 0;
            }
            while (__stlxr(v76, (unint64_t *)v9));
            goto LABEL_257;
          default:
            goto LABEL_538;
        }
      case 3:
        v26 = *(_QWORD **)v359;
        v27 = (char **)(*(_QWORD *)v359 + 8);
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v28 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)*a3);
              *a3 = v28;
              *v28 = 1;
              do
              {
                v29 = __ldaxr((unint64_t *)v9);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, (unint64_t *)v9));
              if (!v30)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v357, v26 + 1);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v63 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v63, (uint64_t)*a3);
              *a3 = v63;
              *v63 = 1;
              do
              {
                v64 = __ldaxr((unint64_t *)v9);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, (unint64_t *)v9));
              if (!v65)
              {
                v66 = *(void **)(v9 + 8);
                if (v66)
                {
                  *(_QWORD *)(v9 + 16) = v66;
                  operator delete(v66);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            if (*a3 == v26)
              goto LABEL_433;
            v47 = (char *)(*a3 + 1);
            v67 = v26 + 2;
            goto LABEL_127;
          case 4:
            if (*(_QWORD *)v9 != 1)
            {
              v196 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v196, (uint64_t)*a3);
              *a3 = v196;
              *v196 = 1;
              do
              {
                v197 = __ldaxr((unint64_t *)v9);
                v198 = v197 - 1;
              }
              while (__stlxr(v198, (unint64_t *)v9));
              if (!v198)
              {
                *(_QWORD *)&v347 = v9 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)*a3 + 1, (_QWORD *)v26[1], (_QWORD *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 3);
            goto LABEL_433;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v144 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v144, (uint64_t)*a3);
            *a3 = v144;
            *v144 = 1;
            do
            {
              v145 = __ldaxr((unint64_t *)v9);
              v80 = --v145 == 0;
            }
            while (__stlxr(v145, (unint64_t *)v9));
            goto LABEL_406;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v209 = operator new();
            v210 = (uint64_t)*a3;
            *(_QWORD *)v209 = **a3;
            *(_QWORD *)(v209 + 8) = *(_QWORD *)(v210 + 8);
            v211 = *(_QWORD *)(v210 + 16);
            *(_QWORD *)(v209 + 16) = v211;
            if (v211)
            {
              v212 = (unsigned int *)(v211 + 8);
              do
                v213 = __ldxr(v212);
              while (__stxr(v213 + 1, v212));
            }
            v214 = *(_OWORD *)(v210 + 24);
            v215 = *(_OWORD *)(v210 + 40);
            *(_OWORD *)(v209 + 56) = *(_OWORD *)(v210 + 56);
            *(_OWORD *)(v209 + 40) = v215;
            *(_OWORD *)(v209 + 24) = v214;
            *a3 = (_QWORD *)v209;
            *(_QWORD *)v209 = 1;
            do
            {
              v216 = __ldaxr((unint64_t *)v9);
              v140 = --v216 == 0;
            }
            while (__stlxr(v216, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v92 = (_QWORD *)operator new();
              v93 = (uint64_t)(*a3 + 1);
              *v92 = **a3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v92 + 1, v93);
              *a3 = v92;
              *v92 = 1;
              do
              {
                v94 = __ldaxr((unint64_t *)v9);
                v95 = v94 - 1;
              }
              while (__stlxr(v95, (unint64_t *)v9));
              if (!v95)
              {
                v96 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v96, 0x1030C407B73B9F7);
              }
            }
            v97 = *a3;
            v357 = 0uLL;
            v358 = 0;
            v354 = 0;
            v355 = 0;
            v356 = 0;
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)(v26 + 1), &v351);
            turi::flexible_type_impl::ndarray<double>::ndarray(&v347, &v351, (uint64_t)&v357, (uint64_t)&v354, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v351);
            if (v354)
            {
              v355 = v354;
              operator delete(v354);
            }
            if ((_QWORD)v357)
            {
              *((_QWORD *)&v357 + 1) = v357;
              operator delete((void *)v357);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v97 + 1), &v347);
            v98 = (void *)v97[3];
            if (v98)
            {
              v97[4] = v98;
              operator delete(v98);
              v97[3] = 0;
              v97[4] = 0;
              v97[5] = 0;
            }
            v99 = (void *)v97[6];
            *(_OWORD *)(v97 + 3) = v348;
            v97[5] = *(_QWORD *)v349;
            v348 = 0uLL;
            *(_QWORD *)v349 = 0;
            if (v99)
              goto LABEL_291;
            goto LABEL_292;
          default:
            goto LABEL_538;
        }
      case 4:
        v11 = *(_QWORD *)v359;
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v12 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v12, (uint64_t)*a3);
              *a3 = v12;
              *v12 = 1;
              do
              {
                v13 = __ldaxr((unint64_t *)v9);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, (unint64_t *)v9));
              if (!v14)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v357, (uint64_t *)(v11 + 8));
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v39 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v39, (uint64_t)*a3);
              *a3 = v39;
              *v39 = 1;
              do
              {
                v40 = __ldaxr((unint64_t *)v9);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, (unint64_t *)v9));
              if (!v41)
              {
                v42 = *(void **)(v9 + 8);
                if (v42)
                {
                  *(_QWORD *)(v9 + 16) = v42;
                  operator delete(v42);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)&v347, *a3 + 1, (_QWORD *)(v11 + 8));
            goto LABEL_433;
          case 4:
            if (*(_QWORD *)v9 != 1)
            {
              v127 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v127, (uint64_t)*a3);
              *a3 = v127;
              *v127 = 1;
              do
              {
                v128 = __ldaxr((unint64_t *)v9);
                v129 = v128 - 1;
              }
              while (__stlxr(v129, (unint64_t *)v9));
              if (!v129)
              {
                *(_QWORD *)&v347 = v9 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            if (*a3 != (_QWORD *)v11)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(*a3 + 1), *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
            goto LABEL_433;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v78 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v78, (uint64_t)*a3);
            *a3 = v78;
            *v78 = 1;
            do
            {
              v79 = __ldaxr((unint64_t *)v9);
              v80 = --v79 == 0;
            }
            while (__stlxr(v79, (unint64_t *)v9));
            goto LABEL_406;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v132 = operator new();
            v133 = (uint64_t)*a3;
            *(_QWORD *)v132 = **a3;
            *(_QWORD *)(v132 + 8) = *(_QWORD *)(v133 + 8);
            v134 = *(_QWORD *)(v133 + 16);
            *(_QWORD *)(v132 + 16) = v134;
            if (v134)
            {
              v135 = (unsigned int *)(v134 + 8);
              do
                v136 = __ldxr(v135);
              while (__stxr(v136 + 1, v135));
            }
            v137 = *(_OWORD *)(v133 + 24);
            v138 = *(_OWORD *)(v133 + 40);
            *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
            *(_OWORD *)(v132 + 40) = v138;
            *(_OWORD *)(v132 + 24) = v137;
            *a3 = (_QWORD *)v132;
            *(_QWORD *)v132 = 1;
            do
            {
              v139 = __ldaxr((unint64_t *)v9);
              v140 = --v139 == 0;
            }
            while (__stlxr(v139, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v55 = (_QWORD *)operator new();
              v56 = (uint64_t)(*a3 + 1);
              *v55 = **a3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v55 + 1, v56);
              *a3 = v55;
              *v55 = 1;
              do
              {
                v57 = __ldaxr((unint64_t *)v9);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, (unint64_t *)v9));
              if (!v58)
              {
                v59 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v59, 0x1030C407B73B9F7);
              }
            }
            v60 = *a3;
            v358 = 0;
            v357 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v357, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v357, &v347);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v60 + 1), &v347);
            v61 = (void *)v60[3];
            if (v61)
            {
              v60[4] = v61;
              operator delete(v61);
              v60[3] = 0;
              v60[4] = 0;
              v60[5] = 0;
            }
            v62 = (void *)v60[6];
            *(_OWORD *)(v60 + 3) = v348;
            v60[5] = *(_QWORD *)v349;
            v348 = 0uLL;
            *(_QWORD *)v349 = 0;
            if (v62)
            {
              v60[7] = v62;
              operator delete(v62);
              v60[6] = 0;
              v60[7] = 0;
              v60[8] = 0;
            }
            *((_OWORD *)v60 + 3) = *(_OWORD *)&v349[8];
            v60[8] = *(_QWORD *)&v349[24];
            memset(&v349[8], 0, 24);
            v60[9] = v350;
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v347);
            v354 = (void **)&v357;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v354);
            goto LABEL_433;
          default:
            goto LABEL_538;
        }
      case 5:
        v31 = *(_QWORD *)v359;
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v32 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)*a3);
              *a3 = v32;
              *v32 = 1;
              do
              {
                v33 = __ldaxr((unint64_t *)v9);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, (unint64_t *)v9));
              if (!v34)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v357, (_QWORD *)(v31 + 8));
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v86 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v86, (uint64_t)*a3);
            *a3 = v86;
            *v86 = 1;
            do
            {
              v87 = __ldaxr((unint64_t *)v9);
              v54 = --v87 == 0;
            }
            while (__stlxr(v87, (unint64_t *)v9));
            goto LABEL_310;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v247 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, (uint64_t)*a3);
            *a3 = v247;
            *v247 = 1;
            do
            {
              v248 = __ldaxr((unint64_t *)v9);
              v150 = --v248 == 0;
            }
            while (__stlxr(v248, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 != 1)
            {
              v193 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v193, (uint64_t)*a3);
              *a3 = v193;
              *v193 = 1;
              do
              {
                v194 = __ldaxr((unint64_t *)v9);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, (unint64_t *)v9));
              if (!v195)
              {
                *(_QWORD *)&v347 = v9 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
                MEMORY[0x219A19A08](v9, 0x1020C405E66F15BLL);
              }
            }
            if (*a3 != (_QWORD *)v31)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)*a3 + 1, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(_QWORD *)(v31 + 16) - *(_QWORD *)(v31 + 8)) >> 5);
            goto LABEL_433;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v251 = operator new();
            v252 = (uint64_t)*a3;
            *(_QWORD *)v251 = **a3;
            *(_QWORD *)(v251 + 8) = *(_QWORD *)(v252 + 8);
            v253 = *(_QWORD *)(v252 + 16);
            *(_QWORD *)(v251 + 16) = v253;
            if (v253)
            {
              v254 = (unsigned int *)(v253 + 8);
              do
                v255 = __ldxr(v254);
              while (__stxr(v255 + 1, v254));
            }
            v256 = *(_OWORD *)(v252 + 24);
            v257 = *(_OWORD *)(v252 + 40);
            *(_OWORD *)(v251 + 56) = *(_OWORD *)(v252 + 56);
            *(_OWORD *)(v251 + 40) = v257;
            *(_OWORD *)(v251 + 24) = v256;
            *a3 = (_QWORD *)v251;
            *(_QWORD *)v251 = 1;
            do
            {
              v258 = __ldaxr((unint64_t *)v9);
              v140 = --v258 == 0;
            }
            while (__stlxr(v258, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v141 = (_QWORD *)operator new();
            v142 = (uint64_t)(*a3 + 1);
            *v141 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v141 + 1, v142);
            *a3 = v141;
            *v141 = 1;
            do
            {
              v143 = __ldaxr((unint64_t *)v9);
              v77 = --v143 == 0;
            }
            while (__stlxr(v143, (unint64_t *)v9));
            goto LABEL_257;
          default:
            goto LABEL_538;
        }
      case 6:
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
            v10 = (uint64_t)(*(_QWORD *)v359 << 8) >> 8;
            goto LABEL_72;
          case 1:
            v126 = (double)*(int *)&v359[8] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v359 << 8) >> 8);
LABEL_299:
            *(double *)a3 = v126;
            goto LABEL_433;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v199 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v199, (uint64_t)*a3);
              *a3 = v199;
              *v199 = 1;
              do
              {
                v200 = __ldaxr((unint64_t *)v9);
                v201 = v200 - 1;
              }
              while (__stlxr(v201, (unint64_t *)v9));
              if (!v201)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            *(_QWORD *)&v357 = *(_QWORD *)v359;
            DWORD2(v357) = *(_DWORD *)&v359[8];
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v357, (std::string *)&v347);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v130 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v130, (uint64_t)*a3);
            *a3 = v130;
            *v130 = 1;
            do
            {
              v131 = __ldaxr((unint64_t *)v9);
              v54 = --v131 == 0;
            }
            while (__stlxr(v131, (unint64_t *)v9));
            goto LABEL_310;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v249 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v249, (uint64_t)*a3);
            *a3 = v249;
            *v249 = 1;
            do
            {
              v250 = __ldaxr((unint64_t *)v9);
              v150 = --v250 == 0;
            }
            while (__stlxr(v250, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v259 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v259, (uint64_t)*a3);
            *a3 = v259;
            *v259 = 1;
            do
            {
              v260 = __ldaxr((unint64_t *)v9);
              v80 = --v260 == 0;
            }
            while (__stlxr(v260, (unint64_t *)v9));
            goto LABEL_406;
          case 6:
            v208 = *(_DWORD *)&v359[8];
            *a3 = *(_QWORD **)v359;
            *((_DWORD *)a3 + 2) = v208;
            goto LABEL_433;
          case 7:
            goto LABEL_432;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v261 = operator new();
            v262 = (uint64_t)*a3;
            *(_QWORD *)v261 = **a3;
            *(_QWORD *)(v261 + 8) = *(_QWORD *)(v262 + 8);
            v263 = *(_QWORD *)(v262 + 16);
            *(_QWORD *)(v261 + 16) = v263;
            if (v263)
            {
              v264 = (unsigned int *)(v263 + 8);
              do
                v265 = __ldxr(v264);
              while (__stxr(v265 + 1, v264));
            }
            v266 = *(_OWORD *)(v262 + 24);
            v267 = *(_OWORD *)(v262 + 40);
            *(_OWORD *)(v261 + 56) = *(_OWORD *)(v262 + 56);
            *(_OWORD *)(v261 + 40) = v267;
            *(_OWORD *)(v261 + 24) = v266;
            *a3 = (_QWORD *)v261;
            *(_QWORD *)v261 = 1;
            do
            {
              v268 = __ldaxr((unint64_t *)v9);
              v140 = --v268 == 0;
            }
            while (__stlxr(v268, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v151 = (_QWORD *)operator new();
            v152 = (uint64_t)(*a3 + 1);
            *v151 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v151 + 1, v152);
            *a3 = v151;
            *v151 = 1;
            do
            {
              v153 = __ldaxr((unint64_t *)v9);
              v77 = --v153 == 0;
            }
            while (__stlxr(v153, (unint64_t *)v9));
            goto LABEL_257;
          default:
            goto LABEL_538;
        }
      case 7:
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 6:
            goto LABEL_432;
          case 1:
            v10 = 0x7FF8000000000000;
LABEL_72:
            *a3 = (_QWORD *)v10;
            goto LABEL_433;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v81 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, (uint64_t)*a3);
              *a3 = v81;
              *v81 = 1;
              do
              {
                v82 = __ldaxr((unint64_t *)v9);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, (unint64_t *)v9));
              if (!v83)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v84 = (uint64_t)*a3;
            v85 = (uint64_t)(*a3 + 1);
            if (*(char *)(v84 + 31) < 0)
              operator delete(*(void **)v85);
            *(_QWORD *)v85 = 0;
            *(_QWORD *)(v85 + 8) = 0;
            *(_QWORD *)(v85 + 16) = 0;
            goto LABEL_433;
          case 3:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v190 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v190, (uint64_t)*a3);
            *a3 = v190;
            *v190 = 1;
            do
            {
              v191 = __ldaxr((unint64_t *)v9);
              v54 = --v191 == 0;
            }
            while (__stlxr(v191, (unint64_t *)v9));
LABEL_310:
            if (!v54)
              goto LABEL_432;
            v154 = 0x1080C409938AC02;
            v192 = *(void **)(v9 + 8);
            if (v192)
            {
              *(_QWORD *)(v9 + 16) = v192;
              operator delete(v192);
            }
            goto LABEL_431;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v206 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v206, (uint64_t)*a3);
            *a3 = v206;
            *v206 = 1;
            do
            {
              v207 = __ldaxr((unint64_t *)v9);
              v150 = --v207 == 0;
            }
            while (__stlxr(v207, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v146, (uint64_t)*a3);
            *a3 = v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v9);
              v80 = --v147 == 0;
            }
            while (__stlxr(v147, (unint64_t *)v9));
            goto LABEL_406;
          case 7:
            goto LABEL_433;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v217 = operator new();
            v218 = (uint64_t)*a3;
            *(_QWORD *)v217 = **a3;
            *(_QWORD *)(v217 + 8) = *(_QWORD *)(v218 + 8);
            v219 = *(_QWORD *)(v218 + 16);
            *(_QWORD *)(v217 + 16) = v219;
            if (v219)
            {
              v220 = (unsigned int *)(v219 + 8);
              do
                v221 = __ldxr(v220);
              while (__stxr(v221 + 1, v220));
            }
            v222 = *(_OWORD *)(v218 + 24);
            v223 = *(_OWORD *)(v218 + 40);
            *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 56);
            *(_OWORD *)(v217 + 40) = v223;
            *(_OWORD *)(v217 + 24) = v222;
            *a3 = (_QWORD *)v217;
            *(_QWORD *)v217 = 1;
            do
            {
              v224 = __ldaxr((unint64_t *)v9);
              v140 = --v224 == 0;
            }
            while (__stlxr(v224, (unint64_t *)v9));
            goto LABEL_428;
          case 9:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v108 = (_QWORD *)operator new();
            v109 = (uint64_t)(*a3 + 1);
            *v108 = **a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v108 + 1, v109);
            *a3 = v108;
            *v108 = 1;
            do
            {
              v110 = __ldaxr((unint64_t *)v9);
              v77 = --v110 == 0;
            }
            while (__stlxr(v110, (unint64_t *)v9));
LABEL_257:
            if (!v77)
              goto LABEL_432;
            v154 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
            goto LABEL_431;
          default:
            goto LABEL_538;
        }
      case 8:
        v35 = (uint64_t *)(*(_QWORD *)v359 + 8);
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v36 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v36, (uint64_t)*a3);
              *a3 = v36;
              *v36 = 1;
              do
              {
                v37 = __ldaxr((unint64_t *)v9);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, (unint64_t *)v9));
              if (!v38)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v100 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v100, (uint64_t)*a3);
              *a3 = v100;
              *v100 = 1;
              do
              {
                v101 = __ldaxr((unint64_t *)v9);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, (unint64_t *)v9));
              if (!v102)
              {
                v103 = *(void **)(v9 + 8);
                if (v103)
                {
                  *(_QWORD *)(v9 + 16) = v103;
                  operator delete(v103);
                }
                v7 = MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            v104 = *a3;
            turi::flexible_type_impl::get_vec_visitor::operator()(v35, (double **)&v347, *(unint64_t *)&v7);
            v105 = (void *)v104[1];
            if (v105)
            {
              v104[2] = v105;
              operator delete(v105);
              v104[1] = 0;
              v104[2] = 0;
              v104[3] = 0;
            }
            *(_OWORD *)(v104 + 1) = v347;
            v104[3] = v348;
            goto LABEL_433;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v269 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v269, (uint64_t)*a3);
            *a3 = v269;
            *v269 = 1;
            do
            {
              v270 = __ldaxr((unint64_t *)v9);
              v150 = --v270 == 0;
            }
            while (__stlxr(v270, (unint64_t *)v9));
            goto LABEL_419;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v225 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v225, (uint64_t)*a3);
            *a3 = v225;
            *v225 = 1;
            do
            {
              v226 = __ldaxr((unint64_t *)v9);
              v80 = --v226 == 0;
            }
            while (__stlxr(v226, (unint64_t *)v9));
            goto LABEL_406;
          case 8:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v271 = operator new();
            v272 = (uint64_t)*a3;
            *(_QWORD *)v271 = **a3;
            *(_QWORD *)(v271 + 8) = *(_QWORD *)(v272 + 8);
            v273 = *(_QWORD *)(v272 + 16);
            *(_QWORD *)(v271 + 16) = v273;
            if (v273)
            {
              v274 = (unsigned int *)(v273 + 8);
              do
                v275 = __ldxr(v274);
              while (__stxr(v275 + 1, v274));
            }
            v276 = *(_OWORD *)(v272 + 24);
            v277 = *(_OWORD *)(v272 + 40);
            *(_OWORD *)(v271 + 56) = *(_OWORD *)(v272 + 56);
            *(_OWORD *)(v271 + 40) = v277;
            *(_OWORD *)(v271 + 24) = v276;
            *a3 = (_QWORD *)v271;
            *(_QWORD *)v271 = 1;
            do
            {
              v278 = __ldaxr((unint64_t *)v9);
              v140 = --v278 == 0;
            }
            while (__stlxr(v278, (unint64_t *)v9));
LABEL_428:
            if (!v140)
              goto LABEL_432;
            v154 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v174 = (_QWORD *)operator new();
              v175 = (uint64_t)(*a3 + 1);
              *v174 = **a3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v174 + 1, v175);
              *a3 = v174;
              *v174 = 1;
              do
              {
                v176 = __ldaxr((unint64_t *)v9);
                v177 = v176 - 1;
              }
              while (__stlxr(v177, (unint64_t *)v9));
              if (!v177)
              {
                v178 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                v7 = MEMORY[0x219A19A08](v178, 0x1030C407B73B9F7);
              }
            }
            v97 = *a3;
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v35, &v347, *(unint64_t *)&v7);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v97 + 1), &v347);
            v179 = (void *)v97[3];
            if (v179)
            {
              v97[4] = v179;
              operator delete(v179);
              v97[3] = 0;
              v97[4] = 0;
              v97[5] = 0;
            }
            v99 = (void *)v97[6];
            *(_OWORD *)(v97 + 3) = v348;
            v97[5] = *(_QWORD *)v349;
            v348 = 0uLL;
            *(_QWORD *)v349 = 0;
            if (v99)
            {
LABEL_291:
              v97[7] = v99;
              operator delete(v99);
              v97[6] = 0;
              v97[7] = 0;
              v97[8] = 0;
            }
LABEL_292:
            *((_OWORD *)v97 + 3) = *(_OWORD *)&v349[8];
            v97[8] = *(_QWORD *)&v349[24];
            memset(&v349[8], 0, 24);
            v97[9] = v350;
            goto LABEL_533;
          default:
            goto LABEL_538;
        }
      case 9:
        v16 = *(_QWORD *)v359;
        v17 = *(_QWORD *)v359 + 8;
        switch(*((_BYTE *)a3 + 12))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_432;
          case 2:
            if (*(_QWORD *)v9 != 1)
            {
              v18 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v18, (uint64_t)*a3);
              *a3 = v18;
              *v18 = 1;
              do
              {
                v19 = __ldaxr((unint64_t *)v9);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, (unint64_t *)v9));
              if (!v20)
              {
                if (*(char *)(v9 + 31) < 0)
                  operator delete(*(void **)(v9 + 8));
                MEMORY[0x219A19A08](v9, 0x1012C404EF22A49);
              }
            }
            v15 = (uint64_t)*a3;
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v357, (_QWORD *)(v16 + 8));
LABEL_476:
            v123 = v15 + 8;
            if (*(char *)(v15 + 31) < 0)
              operator delete(*(void **)v123);
            v124 = v347;
            v125 = v348;
LABEL_479:
            *(_QWORD *)(v123 + 16) = v125;
            *(_OWORD *)v123 = v124;
            goto LABEL_433;
          case 3:
            if (*(_QWORD *)v9 != 1)
            {
              v43 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v43, (uint64_t)*a3);
              *a3 = v43;
              *v43 = 1;
              do
              {
                v44 = __ldaxr((unint64_t *)v9);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, (unint64_t *)v9));
              if (!v45)
              {
                v46 = *(void **)(v9 + 8);
                if (v46)
                {
                  *(_QWORD *)(v9 + 16) = v46;
                  operator delete(v46);
                }
                MEMORY[0x219A19A08](v9, 0x1080C409938AC02);
              }
            }
            v47 = (char *)(*a3 + 1);
            if (*(_QWORD *)(v16 + 72))
              goto LABEL_486;
            v49 = *(uint64_t **)(v16 + 24);
            v48 = *(uint64_t **)(v16 + 32);
            v50 = *(_QWORD **)(v16 + 8);
            if (v48 == v49 || v50 == 0)
            {
              v308 = 0;
            }
            else
            {
              v308 = 1;
              do
              {
                v309 = *v49++;
                v308 *= v309;
              }
              while (v49 != v48);
            }
            if (v308 == (uint64_t)(v50[1] - *v50) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index((_QWORD *)(v16 + 8)) == (uint64_t)(*(_QWORD *)(*(_QWORD *)v17 + 8) - **(_QWORD **)v17) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v16 + 8)))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v27 = *(char ***)v17;
              if (v47 != (char *)v27)
              {
                v67 = (uint64_t *)(v27 + 1);
LABEL_127:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, *v27, *v67, (*v67 - (uint64_t)*v27) >> 3);
              }
            }
            else
            {
LABEL_486:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid((_QWORD *)(v16 + 8)))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full((_QWORD *)(v16 + 8)))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(&v347, v16 + 8);
              }
              else
              {
                v357 = 0uLL;
                v358 = 0;
                v354 = 0;
                v355 = 0;
                v356 = 0;
                v351 = 0;
                v352 = 0;
                v353 = 0;
                turi::flexible_type_impl::ndarray<double>::ndarray(&v347, (uint64_t)&v357, (uint64_t)&v354, (uint64_t)&v351, 0);
                if (v351)
                {
                  v352 = v351;
                  operator delete(v351);
                }
                if (v354)
                {
                  v355 = v354;
                  operator delete(v354);
                }
                if ((_QWORD)v357)
                {
                  *((_QWORD *)&v357 + 1) = v357;
                  operator delete((void *)v357);
                }
                v350 = 0;
                if (&v347 != (__int128 *)(v16 + 8))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&v348, *(char **)(v16 + 24), *(_QWORD *)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
                v311 = *(uint64_t **)(v16 + 24);
                v310 = *(uint64_t **)(v16 + 32);
                if (v310 == v311 || !*(_QWORD *)v17)
                {
                  v312 = 0;
                }
                else
                {
                  v312 = 1;
                  do
                  {
                    v313 = *v311++;
                    v312 *= v313;
                  }
                  while (v311 != v310);
                }
                std::vector<double>::resize(v347, v312);
                std::vector<unsigned long>::resize((uint64_t)&v349[8], (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
                if (*((_QWORD *)&v348 + 1) != (_QWORD)v348 && *(_QWORD *)(v347 + 8) != *(_QWORD *)v347)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v357, (uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3);
                  v314 = *(_QWORD *)(v16 + 48);
                  v315 = *(_QWORD *)(v16 + 56);
                  v316 = (unint64_t *)v357;
                  v317 = v315 - v314;
                  if (v315 != v314)
                  {
                    v318 = 0;
                    v319 = v317 >> 3;
                    if (v319 <= 1)
                      v319 = 1;
                    v320 = (_QWORD *)(v357 + 8);
                    do
                    {
                      *(v320 - 1) = *(_QWORD *)(v314 + 8 * v318);
                      *v320 = v318++;
                      v320 += 2;
                    }
                    while (v319 != v318);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v357 + 1), *((unint64_t **)&v357 + 1), (uint64_t)v316, v316);
                  v321 = v357;
                  v322 = *(_QWORD *)&v349[8];
                  *(_QWORD *)(*(_QWORD *)&v349[8] + 8 * *(_QWORD *)(v357 + 8)) = 1;
                  v323 = *(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48);
                  if ((unint64_t)v323 >= 9)
                  {
                    v324 = v323 >> 3;
                    v325 = v348;
                    if (v324 <= 2)
                      v324 = 2;
                    v326 = (uint64_t *)(v321 + 24);
                    v327 = v324 - 1;
                    do
                    {
                      v328 = *(_QWORD *)(v325 + 8 * *(v326 - 2)) * *(_QWORD *)(v322 + 8 * *(v326 - 2));
                      v329 = *v326;
                      v326 += 2;
                      *(_QWORD *)(v322 + 8 * v329) = v328;
                      --v327;
                    }
                    while (v327);
                  }
                  v330 = (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3;
                  v351 = 0;
                  std::vector<unsigned long>::vector(&v354, v330, &v351);
                  do
                  {
                    v331 = v354;
                    if (v355 == v354)
                    {
                      v340 = 0;
                      v341 = *(_QWORD *)(**(_QWORD **)(v16 + 8) + 8 * *(_QWORD *)(v16 + 72));
                      v342 = (_QWORD *)v347;
                    }
                    else
                    {
                      v332 = 0;
                      v333 = v355 - v354;
                      v334 = *(uint64_t **)(v16 + 48);
                      if (v333 <= 1)
                        v333 = 1;
                      v335 = v354;
                      v336 = v333;
                      do
                      {
                        v338 = (uint64_t)*v335++;
                        v337 = v338;
                        v339 = *v334++;
                        v332 += v339 * v337;
                        --v336;
                      }
                      while (v336);
                      v340 = 0;
                      v341 = *(_QWORD *)(**(_QWORD **)(v16 + 8) + 8 * (*(_QWORD *)(v16 + 72) + v332));
                      v342 = (_QWORD *)v347;
                      v343 = *(uint64_t **)&v349[8];
                      do
                      {
                        v345 = (uint64_t)*v331++;
                        v344 = v345;
                        v346 = *v343++;
                        v340 += v346 * v344;
                        --v333;
                      }
                      while (v333);
                    }
                    *(_QWORD *)(*v342 + 8 * v340) = v341;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v16 + 8, (uint64_t *)&v354));
                  if (v354)
                  {
                    v355 = v354;
                    operator delete(v354);
                  }
                  if ((_QWORD)v357)
                  {
                    *((_QWORD *)&v357 + 1) = v357;
                    operator delete((void *)v357);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&v347);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(&v347))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v47 != (char *)v347)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v47, *(char **)v347, *(_QWORD *)(v347 + 8), (uint64_t)(*(_QWORD *)(v347 + 8) - *(_QWORD *)v347) >> 3);
LABEL_533:
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v347);
            }
            goto LABEL_433;
          case 4:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v148 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v148, (uint64_t)*a3);
            *a3 = v148;
            *v148 = 1;
            do
            {
              v149 = __ldaxr((unint64_t *)v9);
              v150 = --v149 == 0;
            }
            while (__stlxr(v149, (unint64_t *)v9));
LABEL_419:
            if (!v150)
              goto LABEL_432;
            v154 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v347 = v9 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
            break;
          case 5:
            if (*(_QWORD *)v9 == 1)
              goto LABEL_432;
            v106 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v106, (uint64_t)*a3);
            *a3 = v106;
            *v106 = 1;
            do
            {
              v107 = __ldaxr((unint64_t *)v9);
              v80 = --v107 == 0;
            }
            while (__stlxr(v107, (unint64_t *)v9));
LABEL_406:
            if (!v80)
              goto LABEL_432;
            v154 = 0x1020C405E66F15BLL;
            *(_QWORD *)&v347 = v9 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
            break;
          case 8:
            if (*(_QWORD *)v9 != 1)
            {
              v160 = operator new();
              v161 = (uint64_t)*a3;
              *(_QWORD *)v160 = **a3;
              *(_QWORD *)(v160 + 8) = *(_QWORD *)(v161 + 8);
              v162 = *(_QWORD *)(v161 + 16);
              *(_QWORD *)(v160 + 16) = v162;
              if (v162)
              {
                v163 = (unsigned int *)(v162 + 8);
                do
                  v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
              }
              v165 = *(_OWORD *)(v161 + 24);
              v166 = *(_OWORD *)(v161 + 40);
              *(_OWORD *)(v160 + 56) = *(_OWORD *)(v161 + 56);
              *(_OWORD *)(v160 + 40) = v166;
              *(_OWORD *)(v160 + 24) = v165;
              *a3 = (_QWORD *)v160;
              *(_QWORD *)v160 = 1;
              do
              {
                v167 = __ldaxr((unint64_t *)v9);
                v168 = v167 - 1;
              }
              while (__stlxr(v168, (unint64_t *)v9));
              if (!v168)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
                MEMORY[0x219A19A08](v9, 0x1030C40F1F0227BLL);
              }
            }
            v169 = (uint64_t)*a3;
            turi::flexible_type_impl::get_img_visitor::operator()(v16 + 8, (turi::image_type *)&v347);
            v170 = v347;
            v347 = 0uLL;
            v171 = *(_OWORD *)(v169 + 8);
            *(_OWORD *)(v169 + 8) = v170;
            v357 = v171;
            boost::detail::shared_count::~shared_count((unsigned int **)&v357 + 1);
            v172 = v348;
            v173 = *(_OWORD *)v349;
            *(_OWORD *)(v169 + 56) = *(_OWORD *)&v349[16];
            *(_OWORD *)(v169 + 40) = v173;
            *(_OWORD *)(v169 + 24) = v172;
            boost::detail::shared_count::~shared_count((unsigned int **)&v347 + 1);
            goto LABEL_433;
          case 9:
            if (*(_QWORD *)v9 != 1)
            {
              v68 = (_QWORD *)operator new();
              v69 = (uint64_t)(*a3 + 1);
              *v68 = **a3;
              turi::flexible_type_impl::ndarray<double>::ndarray(v68 + 1, v69);
              *a3 = v68;
              *v68 = 1;
              do
              {
                v70 = __ldaxr((unint64_t *)v9);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, (unint64_t *)v9));
              if (!v71)
              {
                v72 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v9);
                MEMORY[0x219A19A08](v72, 0x1030C407B73B9F7);
              }
            }
            v73 = (uint64_t)*a3;
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](*a3 + 1, (uint64_t *)(v16 + 8));
            if (v73 != v16)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v73 + 24), *(char **)(v16 + 24), *(_QWORD *)(v16 + 32), (uint64_t)(*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v73 + 48), *(char **)(v16 + 48), *(_QWORD *)(v16 + 56), (uint64_t)(*(_QWORD *)(v16 + 56) - *(_QWORD *)(v16 + 48)) >> 3);
            }
            *(_QWORD *)(v73 + 72) = *(_QWORD *)(v16 + 72);
            goto LABEL_433;
          default:
            goto LABEL_538;
        }
LABEL_431:
        MEMORY[0x219A19A08](v9, v154);
LABEL_432:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_538:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
LABEL_433:
  switch(v359[12])
  {
    case 2:
      v279 = *(unint64_t **)v359;
      do
      {
        v280 = __ldaxr(v279);
        v281 = v280 - 1;
      }
      while (__stlxr(v281, v279));
      if (!v281)
      {
        v282 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          if (*(char *)(*(_QWORD *)v359 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v359 + 8));
          v283 = v282;
          v284 = 0x1012C404EF22A49;
          goto LABEL_474;
        }
      }
      break;
    case 3:
      v296 = *(unint64_t **)v359;
      do
      {
        v297 = __ldaxr(v296);
        v298 = v297 - 1;
      }
      while (__stlxr(v298, v296));
      if (!v298)
      {
        v299 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          v300 = *(void **)(*(_QWORD *)v359 + 8);
          if (v300)
          {
            *(_QWORD *)(*(_QWORD *)v359 + 16) = v300;
            operator delete(v300);
          }
          v283 = v299;
          v284 = 0x1080C409938AC02;
          goto LABEL_474;
        }
      }
      break;
    case 4:
      v285 = *(unint64_t **)v359;
      do
      {
        v286 = __ldaxr(v285);
        v287 = v286 - 1;
      }
      while (__stlxr(v287, v285));
      if (!v287)
      {
        v288 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          *(_QWORD *)&v347 = *(_QWORD *)v359 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
          goto LABEL_467;
        }
      }
      break;
    case 5:
      v301 = *(unint64_t **)v359;
      do
      {
        v302 = __ldaxr(v301);
        v303 = v302 - 1;
      }
      while (__stlxr(v303, v301));
      if (!v303)
      {
        v288 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          *(_QWORD *)&v347 = *(_QWORD *)v359 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v347);
LABEL_467:
          v283 = v288;
          v284 = 0x1020C405E66F15BLL;
          goto LABEL_474;
        }
      }
      break;
    case 8:
      v304 = *(unint64_t **)v359;
      do
      {
        v305 = __ldaxr(v304);
        v306 = v305 - 1;
      }
      while (__stlxr(v306, v304));
      if (!v306)
      {
        v307 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v359 + 16));
          v283 = v307;
          v295 = -235920773;
          goto LABEL_473;
        }
      }
      break;
    case 9:
      v289 = *(unint64_t **)v359;
      do
      {
        v290 = __ldaxr(v289);
        v291 = v290 - 1;
      }
      while (__stlxr(v291, v289));
      if (!v291)
      {
        v292 = *(_QWORD *)v359;
        if (*(_QWORD *)v359)
        {
          v293 = *(void **)(*(_QWORD *)v359 + 48);
          if (v293)
          {
            *(_QWORD *)(*(_QWORD *)v359 + 56) = v293;
            operator delete(v293);
          }
          v294 = *(void **)(v292 + 24);
          if (v294)
          {
            *(_QWORD *)(v292 + 32) = v294;
            operator delete(v294);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v292 + 8);
          v283 = v292;
          v295 = 2071181815;
LABEL_473:
          v284 = v295 | 0x1030C4000000000;
LABEL_474:
          MEMORY[0x219A19A08](v283, v284);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2181F6510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t **v9;
  uint64_t v10;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v12 = *(void **)(v10 - 128);
  if (v12)
  {
    *(_QWORD *)(v10 - 120) = v12;
    operator delete(v12);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  switch(*((_BYTE *)v9 + 12))
  {
    case 2:
      v13 = *v9;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_42;
      v16 = *v9;
      if (!*v9)
        goto LABEL_41;
      if (*((char *)v16 + 31) < 0)
        operator delete((void *)v16[1]);
      v17 = v16;
      v18 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v27 = *v9;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_42;
      v30 = *v9;
      if (!*v9)
        goto LABEL_41;
      v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = (unint64_t)v31;
        operator delete(v31);
      }
      v17 = v30;
      v18 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v19 = *v9;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_42;
      v22 = *v9;
      if (!*v9)
        goto LABEL_41;
      *(_QWORD *)(v10 - 96) = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
      goto LABEL_33;
    case 5:
      v32 = *v9;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_42;
      v22 = *v9;
      if (!*v9)
        goto LABEL_41;
      *(_QWORD *)(v10 - 96) = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
LABEL_33:
      v17 = v22;
      v18 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v35 = *v9;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_42;
      v38 = *v9;
      if (!*v9)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
      v17 = v38;
      v26 = -235920773;
      goto LABEL_39;
    case 9:
      v23 = *v9;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_42;
      if (!*v9)
        goto LABEL_41;
      v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v9);
      v26 = 2071181815;
LABEL_39:
      v18 = v26 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v17, v18);
LABEL_41:
      *v9 = 0;
LABEL_42:
      *v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      *((_BYTE *)v9 + 12) = 0;
      switch(*(_BYTE *)(v10 - 76))
      {
        case 2:
          v39 = *(unint64_t **)(v10 - 88);
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (v41)
            goto LABEL_80;
          v42 = *(_QWORD *)(v10 - 88);
          if (!v42)
            goto LABEL_80;
          if (*(char *)(v42 + 31) < 0)
            operator delete(*(void **)(v42 + 8));
          v43 = (_QWORD *)v42;
          v44 = 0x1012C404EF22A49;
          goto LABEL_79;
        case 3:
          v54 = *(unint64_t **)(v10 - 88);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (v56)
            goto LABEL_80;
          v57 = *(_QWORD **)(v10 - 88);
          if (!v57)
            goto LABEL_80;
          v58 = (void *)v57[1];
          if (v58)
          {
            v57[2] = v58;
            operator delete(v58);
          }
          v43 = v57;
          v44 = 0x1080C409938AC02;
          goto LABEL_79;
        case 4:
          v45 = *(unint64_t **)(v10 - 88);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (v47)
            goto LABEL_80;
          v48 = *(_QWORD **)(v10 - 88);
          if (!v48)
            goto LABEL_80;
          *(_QWORD *)(v10 - 96) = v48 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
          goto LABEL_72;
        case 5:
          v59 = *(unint64_t **)(v10 - 88);
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61)
            goto LABEL_80;
          v48 = *(_QWORD **)(v10 - 88);
          if (!v48)
            goto LABEL_80;
          *(_QWORD *)(v10 - 96) = v48 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 96));
LABEL_72:
          v43 = v48;
          v44 = 0x1020C405E66F15BLL;
          goto LABEL_79;
        case 8:
          v62 = *(unint64_t **)(v10 - 88);
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (v64)
            goto LABEL_80;
          v65 = *(_QWORD *)(v10 - 88);
          if (!v65)
            goto LABEL_80;
          boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
          v43 = (_QWORD *)v65;
          v53 = -235920773;
          goto LABEL_78;
        case 9:
          v49 = *(unint64_t **)(v10 - 88);
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (v51)
            goto LABEL_80;
          v52 = *(_QWORD **)(v10 - 88);
          if (!v52)
            goto LABEL_80;
          v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52);
          v53 = 2071181815;
LABEL_78:
          v44 = v53 | 0x1030C4000000000;
LABEL_79:
          MEMORY[0x219A19A08](v43, v44);
LABEL_80:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_80;
      }
    default:
      goto LABEL_42;
  }
}

void std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D931A10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D931A10;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2::operator()(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2,std::allocator<turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2>,turi::flexible_type ()(turi::sframe_rows::row const&)>::target_type()
{
}

void turi::unity_sarray::vector_slice(unsigned long,unsigned long)::$_2::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  double *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t i;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  double *v61;
  double v62;
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::string *v67;
  __int128 v68;
  unint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  void *v80;
  unint64_t *v81;
  unsigned int v82;
  unint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  void *v113;
  void *v114;
  unint64_t *v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  double v140;
  BOOL v141;
  int v142;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  double *v150;
  double *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  double *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  double *v166;
  double *v167;
  uint64_t v168;
  double v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  double v173;
  char **v174;
  char *v175;
  double v176;
  uint64_t v177;
  double v178;
  double v179;
  double v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  __int128 v184;
  __int128 v185;
  float v186;
  unint64_t v187;
  double *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unsigned int **v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int **v200;
  char ***v201;
  uint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int **v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  __int128 v212;
  unsigned int **v213;
  char **v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  unint64_t v218;
  unsigned int **v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  __int128 v230;
  void *v231;
  unint64_t *v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t v235;
  void *v236;
  unint64_t *v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  void *v241;
  char *v242;
  unsigned int *v243;
  unsigned int *v244;
  unsigned int *v245;
  unint64_t *v247;
  _QWORD *v248;
  unint64_t v249;
  BOOL v250;
  unint64_t *v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t *v257;
  void *v258;
  void *v259;
  unint64_t *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t *v265;
  unint64_t *v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t *v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  BOOL v277;
  unint64_t *v278;
  _QWORD *v279;
  unint64_t v280;
  BOOL v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  unint64_t *v300;
  void *v301;
  void *v302;
  unint64_t *v303;
  _QWORD *v304;
  unint64_t v305;
  unint64_t v306;
  void *v307;
  unint64_t *v308;
  void *v309;
  _QWORD *v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  double v328;
  unint64_t *v329;
  _QWORD *v330;
  unint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  __int128 v341;
  __int128 v342;
  unint64_t v343;
  BOOL v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  _QWORD *v350;
  unint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  BOOL v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  unsigned int v359;
  uint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int *v370;
  unsigned int v371;
  __int128 v372;
  __int128 v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  unint64_t *v381;
  _QWORD *v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  _QWORD *v386;
  void *v387;
  _QWORD *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int *v393;
  unsigned int v394;
  __int128 v395;
  __int128 v396;
  unint64_t v397;
  _QWORD *v398;
  unint64_t v399;
  void *v400;
  uint64_t v401;
  unint64_t *v402;
  _QWORD *v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  _QWORD *v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  unint64_t v412;
  unint64_t v413;
  _QWORD *v414;
  unint64_t v415;
  _QWORD *v416;
  unint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int *v424;
  unsigned int v425;
  __int128 v426;
  __int128 v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int *v432;
  unsigned int v433;
  __int128 v434;
  __int128 v435;
  unint64_t v436;
  _QWORD *v437;
  unint64_t v438;
  _QWORD *v439;
  unint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int *v446;
  unsigned int v447;
  __int128 v448;
  __int128 v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int *v454;
  unsigned int v455;
  __int128 v456;
  __int128 v457;
  unint64_t v458;
  _QWORD *v459;
  unint64_t v460;
  _QWORD *v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int *v466;
  unsigned int v467;
  __int128 v468;
  __int128 v469;
  unint64_t v470;
  _QWORD *v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int *v476;
  unsigned int v477;
  __int128 v478;
  __int128 v479;
  unint64_t v480;
  _QWORD *v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int *v486;
  unsigned int v487;
  __int128 v488;
  __int128 v489;
  unint64_t v490;
  unint64_t *v491;
  unint64_t v492;
  unint64_t v493;
  unsigned int **v494;
  _QWORD *v495;
  uint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  unsigned int **v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  unsigned int v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  unsigned int **v508;
  unsigned int *v509;
  unint64_t *v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t *v513;
  unint64_t v514;
  unint64_t v515;
  unsigned int **v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  unsigned int *v520;
  unint64_t v521;
  uint64_t v522;
  unsigned int *v523;
  unsigned int *v524;
  unint64_t *v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  _QWORD *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  _QWORD *v534;
  uint64_t *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  unint64_t v542;
  unsigned int *v543;
  uint64_t *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  _QWORD *v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  std::runtime_error *exception;
  std::string *v557;
  __int128 v558;
  void *__p[2];
  void *v560[2];
  _BYTE v561[32];
  unint64_t v562;
  size_t __idx;
  size_t v564;
  uint64_t v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  std::string v570;
  double v571;
  int v572;
  char v573;
  uint64_t v574;

  v574 = *MEMORY[0x24BDAC8D0];
  v4 = (double *)(****(_QWORD ****)a2 + 16 * *(_QWORD *)(a2 + 8));
  if (*((_BYTE *)v4 + 12) == 7)
  {
    *a3 = 0.0;
    *((_DWORD *)a3 + 2) = 0;
    *((_BYTE *)a3 + 12) = 0;
    if (v4 != a3)
    {
      v5 = *(_QWORD **)v4;
      *(double *)((char *)a3 + 5) = *(double *)((char *)v4 + 5);
      *(_QWORD *)a3 = v5;
      LODWORD(v5) = *((unsigned __int8 *)v4 + 12);
      *((_BYTE *)a3 + 12) = (_BYTE)v5;
      switch((int)v5)
      {
        case 2:
          v6 = *(unint64_t **)a3;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          break;
        case 3:
          v28 = *(unint64_t **)a3;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          break;
        case 4:
          v24 = *(unint64_t **)a3;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 + 1, v24));
          break;
        case 5:
          v30 = *(unint64_t **)a3;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          break;
        case 8:
          v32 = *(unint64_t **)a3;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
          break;
        case 9:
          v26 = *(unint64_t **)a3;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 + 1, v26));
          break;
        default:
          return;
      }
    }
    return;
  }
  v9 = *(_QWORD *)a1;
  v10 = 1;
  switch(*((_BYTE *)v4 + 12))
  {
    case 3:
      v11 = (_QWORD *)(*(_QWORD *)v4 + 8);
      v12 = (_QWORD *)(*(_QWORD *)v4 + 16);
      v13 = 3;
      goto LABEL_11;
    case 4:
      v11 = (_QWORD *)(*(_QWORD *)v4 + 8);
      v12 = (_QWORD *)(*(_QWORD *)v4 + 16);
      v13 = 4;
      goto LABEL_11;
    case 5:
      v11 = (_QWORD *)(*(_QWORD *)v4 + 8);
      v12 = (_QWORD *)(*(_QWORD *)v4 + 16);
      v13 = 5;
LABEL_11:
      v10 = (uint64_t)(*v12 - *v11) >> v13;
      break;
    case 9:
      v22 = *(uint64_t **)(*(_QWORD *)v4 + 24);
      v21 = *(uint64_t **)(*(_QWORD *)v4 + 32);
      if (v21 == v22)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v10)
        {
          v10 = 1;
          do
          {
            v23 = *v22++;
            v10 *= v23;
          }
          while (v22 != v21);
        }
      }
      break;
    default:
      break;
  }
  *a3 = 0.0;
  *((_DWORD *)a3 + 2) = 0;
  *((_BYTE *)a3 + 12) = 0;
  if (v9 > v10)
  {
    if (a3 != (double *)&turi::FLEX_UNDEFINED)
    {
      *(_QWORD *)((char *)a3 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
      *(_QWORD *)a3 = turi::FLEX_UNDEFINED;
      v14 = byte_254FF281C;
      *((_BYTE *)a3 + 12) = byte_254FF281C;
      switch(v14)
      {
        case 2:
          v15 = *(unint64_t **)a3;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          break;
        case 3:
          v41 = *(unint64_t **)a3;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 + 1, v41));
          break;
        case 4:
          v37 = *(unint64_t **)a3;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
          break;
        case 5:
          v43 = *(unint64_t **)a3;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
          break;
        case 8:
          v45 = *(unint64_t **)a3;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
          break;
        case 9:
          v39 = *(unint64_t **)a3;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 + 1, v39));
          break;
        default:
          return;
      }
    }
    return;
  }
  v17 = *(unsigned __int8 *)(a1 + 8);
  *a3 = 0.0;
  *((_DWORD *)a3 + 2) = 0;
  if (v17 == 1)
  {
    *((_BYTE *)a3 + 12) = 1;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *((unsigned __int8 *)v4 + 12);
    switch(v19)
    {
      case 1:
        if (!v18)
          goto LABEL_47;
        break;
      case 9:
        v34 = *(_QWORD *)v4;
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v34 + 8));
        v20 = *(_QWORD **)(v34 + 8);
        v18 += *(_QWORD *)(v34 + 72);
        goto LABEL_45;
      case 3:
        v20 = (_QWORD *)(*(_QWORD *)v4 + 8);
LABEL_45:
        v4 = (double *)(*v20 + 8 * v18);
LABEL_47:
        turi::flexible_type::flexible_type<double>((uint64_t)&v571, v4);
        if (&v571 != a3)
        {
          switch(v573)
          {
            case 0:
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                  v36 = *(_QWORD *)&v571;
                  goto LABEL_326;
                case 1:
                  v328 = (double)*(uint64_t *)&v571;
                  goto LABEL_557;
                case 2:
                  v323 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v324 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v324, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v324;
                    *v324 = 1;
                    do
                    {
                      v325 = __ldaxr((unint64_t *)v323);
                      v326 = v325 - 1;
                    }
                    while (__stlxr(v326, (unint64_t *)v323));
                    if (!v326)
                    {
                      if (*(char *)(v323 + 31) < 0)
                        operator delete(*(void **)(v323 + 8));
                      MEMORY[0x219A19A08](v323, 0x1012C404EF22A49);
                    }
                  }
                  v327 = *(_QWORD *)a3;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  v229 = v327 + 8;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                  if (*(char *)(v327 + 31) < 0)
                    goto LABEL_474;
                  goto LABEL_475;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v290 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v290, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v290;
                  *v290 = 1;
                  do
                  {
                    v291 = __ldaxr(v247);
                    v250 = --v291 == 0;
                  }
                  while (__stlxr(v291, v247));
                  goto LABEL_568;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v414 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v414, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v414;
                  *v414 = 1;
                  do
                  {
                    v415 = __ldaxr(v278);
                    v354 = --v415 == 0;
                  }
                  while (__stlxr(v415, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v439 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v439, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v439;
                  *v439 = 1;
                  do
                  {
                    v440 = __ldaxr(v278);
                    v281 = --v440 == 0;
                  }
                  while (__stlxr(v440, v278));
                  goto LABEL_665;
                case 6:
                  *(_QWORD *)a3 = *(_QWORD *)&v571 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                  *((_DWORD *)a3 + 2) = 0;
                  goto LABEL_694;
                case 7:
                  goto LABEL_693;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v443 = operator new();
                  v444 = *(_QWORD *)a3;
                  *(_QWORD *)v443 = **(_QWORD **)a3;
                  *(_QWORD *)(v443 + 8) = *(_QWORD *)(v444 + 8);
                  v445 = *(_QWORD *)(v444 + 16);
                  *(_QWORD *)(v443 + 16) = v445;
                  if (v445)
                  {
                    v446 = (unsigned int *)(v445 + 8);
                    do
                      v447 = __ldxr(v446);
                    while (__stxr(v447 + 1, v446));
                  }
                  v448 = *(_OWORD *)(v444 + 24);
                  v449 = *(_OWORD *)(v444 + 40);
                  *(_OWORD *)(v443 + 56) = *(_OWORD *)(v444 + 56);
                  *(_OWORD *)(v443 + 40) = v449;
                  *(_OWORD *)(v443 + 24) = v448;
                  *(_QWORD *)a3 = v443;
                  *(_QWORD *)v443 = 1;
                  do
                  {
                    v450 = __ldaxr((unint64_t *)v335);
                    v344 = --v450 == 0;
                  }
                  while (__stlxr(v450, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v315 = (_QWORD *)operator new();
                  v316 = *(_QWORD *)a3 + 8;
                  *v315 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v315 + 1, v316);
                  *(_QWORD *)a3 = v315;
                  *v315 = 1;
                  do
                  {
                    v317 = __ldaxr(v273);
                    v277 = --v317 == 0;
                  }
                  while (__stlxr(v317, v273));
                  goto LABEL_515;
                default:
                  goto LABEL_798;
              }
            case 1:
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                  v36 = (uint64_t)v571;
                  goto LABEL_326;
                case 1:
                  v328 = v571;
                  goto LABEL_557;
                case 2:
                  v360 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v361 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v361, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v361;
                    *v361 = 1;
                    do
                    {
                      v362 = __ldaxr((unint64_t *)v360);
                      v363 = v362 - 1;
                    }
                    while (__stlxr(v363, (unint64_t *)v360));
                    if (!v363)
                    {
                      if (*(char *)(v360 + 31) < 0)
                        operator delete(*(void **)(v360 + 8));
                      MEMORY[0x219A19A08](v360, 0x1012C404EF22A49);
                    }
                  }
                  v364 = *(_QWORD *)a3;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  v229 = v364 + 8;
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
                  if (*(char *)(v364 + 31) < 0)
LABEL_474:
                    operator delete(*(void **)v229);
LABEL_475:
                  v230 = v566;
                  v231 = (void *)v567;
                  goto LABEL_476;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v292 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v292, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v292;
                  *v292 = 1;
                  do
                  {
                    v293 = __ldaxr(v247);
                    v250 = --v293 == 0;
                  }
                  while (__stlxr(v293, v247));
                  goto LABEL_568;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v416 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v416, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v416;
                  *v416 = 1;
                  do
                  {
                    v417 = __ldaxr(v278);
                    v354 = --v417 == 0;
                  }
                  while (__stlxr(v417, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v441 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v441, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v441;
                  *v441 = 1;
                  do
                  {
                    v442 = __ldaxr(v278);
                    v281 = --v442 == 0;
                  }
                  while (__stlxr(v442, v278));
                  goto LABEL_665;
                case 6:
                  v365 = (int)((v571 - (double)(uint64_t)floor(v571)) * 1000000.0);
                  if (v365 >= 999999)
                    v365 = 999999;
                  if (v365 >= 0xF4240)
                    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                  *(_QWORD *)a3 = vcvtmd_s64_f64(v571) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000;
                  *((_DWORD *)a3 + 2) = v365;
                  goto LABEL_694;
                case 7:
                  goto LABEL_693;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v451 = operator new();
                  v452 = *(_QWORD *)a3;
                  *(_QWORD *)v451 = **(_QWORD **)a3;
                  *(_QWORD *)(v451 + 8) = *(_QWORD *)(v452 + 8);
                  v453 = *(_QWORD *)(v452 + 16);
                  *(_QWORD *)(v451 + 16) = v453;
                  if (v453)
                  {
                    v454 = (unsigned int *)(v453 + 8);
                    do
                      v455 = __ldxr(v454);
                    while (__stxr(v455 + 1, v454));
                  }
                  v456 = *(_OWORD *)(v452 + 24);
                  v457 = *(_OWORD *)(v452 + 40);
                  *(_OWORD *)(v451 + 56) = *(_OWORD *)(v452 + 56);
                  *(_OWORD *)(v451 + 40) = v457;
                  *(_OWORD *)(v451 + 24) = v456;
                  *(_QWORD *)a3 = v451;
                  *(_QWORD *)v451 = 1;
                  do
                  {
                    v458 = __ldaxr((unint64_t *)v335);
                    v344 = --v458 == 0;
                  }
                  while (__stlxr(v458, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v318 = (_QWORD *)operator new();
                  v319 = *(_QWORD *)a3 + 8;
                  *v318 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v318 + 1, v319);
                  *(_QWORD *)a3 = v318;
                  *v318 = 1;
                  do
                  {
                    v320 = __ldaxr(v273);
                    v277 = --v320 == 0;
                  }
                  while (__stlxr(v320, v273));
                  goto LABEL_515;
                default:
                  goto LABEL_798;
              }
            case 2:
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v206 = *(unsigned int ***)&v571;
                  v207 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v208 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v208, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v208;
                    *v208 = 1;
                    do
                    {
                      v209 = __ldaxr((unint64_t *)v207);
                      v210 = v209 - 1;
                    }
                    while (__stlxr(v210, (unint64_t *)v207));
                    if (!v210)
                    {
                      if (*(char *)(v207 + 31) < 0)
                        operator delete(*(void **)(v207 + 8));
                      MEMORY[0x219A19A08](v207, 0x1012C404EF22A49);
                    }
                  }
                  v211 = *(_QWORD *)a3;
                  if (*((char *)v206 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v206[1], (std::string::size_type)v206[2]);
                  }
                  else
                  {
                    v212 = *(_OWORD *)(v206 + 1);
                    v560[0] = v206[3];
                    *(_OWORD *)__p = v212;
                  }
                  goto LABEL_734;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v248 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v248, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v248;
                  *v248 = 1;
                  do
                  {
                    v249 = __ldaxr(v247);
                    v250 = --v249 == 0;
                  }
                  while (__stlxr(v249, v247));
                  goto LABEL_568;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v388 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v388, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v388;
                  *v388 = 1;
                  do
                  {
                    v389 = __ldaxr(v278);
                    v354 = --v389 == 0;
                  }
                  while (__stlxr(v389, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v321 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v321, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v321;
                  *v321 = 1;
                  do
                  {
                    v322 = __ldaxr(v278);
                    v281 = --v322 == 0;
                  }
                  while (__stlxr(v322, v278));
                  goto LABEL_665;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v390 = operator new();
                  v391 = *(_QWORD *)a3;
                  *(_QWORD *)v390 = **(_QWORD **)a3;
                  *(_QWORD *)(v390 + 8) = *(_QWORD *)(v391 + 8);
                  v392 = *(_QWORD *)(v391 + 16);
                  *(_QWORD *)(v390 + 16) = v392;
                  if (v392)
                  {
                    v393 = (unsigned int *)(v392 + 8);
                    do
                      v394 = __ldxr(v393);
                    while (__stxr(v394 + 1, v393));
                  }
                  v395 = *(_OWORD *)(v391 + 24);
                  v396 = *(_OWORD *)(v391 + 40);
                  *(_OWORD *)(v390 + 56) = *(_OWORD *)(v391 + 56);
                  *(_OWORD *)(v390 + 40) = v396;
                  *(_OWORD *)(v390 + 24) = v395;
                  *(_QWORD *)a3 = v390;
                  *(_QWORD *)v390 = 1;
                  do
                  {
                    v397 = __ldaxr((unint64_t *)v335);
                    v344 = --v397 == 0;
                  }
                  while (__stlxr(v397, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v274 = (_QWORD *)operator new();
                  v275 = *(_QWORD *)a3 + 8;
                  *v274 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v274 + 1, v275);
                  *(_QWORD *)a3 = v274;
                  *v274 = 1;
                  do
                  {
                    v276 = __ldaxr(v273);
                    v277 = --v276 == 0;
                  }
                  while (__stlxr(v276, v273));
                  goto LABEL_515;
                default:
                  goto LABEL_798;
              }
            case 3:
              v213 = *(unsigned int ***)&v571;
              v214 = (char **)(*(_QWORD *)&v571 + 8);
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v215 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v216 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v216, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v216;
                    *v216 = 1;
                    do
                    {
                      v217 = __ldaxr((unint64_t *)v215);
                      v218 = v217 - 1;
                    }
                    while (__stlxr(v218, (unint64_t *)v215));
                    if (!v218)
                    {
                      if (*(char *)(v215 + 31) < 0)
                        operator delete(*(void **)(v215 + 8));
                      MEMORY[0x219A19A08](v215, 0x1012C404EF22A49);
                    }
                  }
                  v199 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v566, v213 + 1);
                  goto LABEL_336;
                case 3:
                  v260 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v261 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v261, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v261;
                    *v261 = 1;
                    do
                    {
                      v262 = __ldaxr(v260);
                      v263 = v262 - 1;
                    }
                    while (__stlxr(v263, v260));
                    if (!v263)
                    {
                      v264 = (void *)v260[1];
                      if (v264)
                      {
                        v260[2] = (unint64_t)v264;
                        operator delete(v264);
                      }
                      MEMORY[0x219A19A08](v260, 0x1080C409938AC02);
                    }
                  }
                  if (*(unsigned int ***)a3 == v213)
                    goto LABEL_694;
                  v242 = (char *)(*(_QWORD *)a3 + 8);
                  v265 = (uint64_t *)(v213 + 2);
                  goto LABEL_384;
                case 4:
                  v406 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v407 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v407, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v407;
                    *v407 = 1;
                    do
                    {
                      v408 = __ldaxr(v406);
                      v409 = v408 - 1;
                    }
                    while (__stlxr(v409, v406));
                    if (!v409)
                    {
                      __p[0] = v406 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      MEMORY[0x219A19A08](v406, 0x1020C405E66F15BLL);
                    }
                  }
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)(*(_QWORD *)a3 + 8), v213[1], v213[2], ((char *)v213[2] - (char *)v213[1]) >> 3);
                  goto LABEL_694;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v348 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v348, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v348;
                  *v348 = 1;
                  do
                  {
                    v349 = __ldaxr(v278);
                    v281 = --v349 == 0;
                  }
                  while (__stlxr(v349, v278));
                  goto LABEL_665;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v421 = operator new();
                  v422 = *(_QWORD *)a3;
                  *(_QWORD *)v421 = **(_QWORD **)a3;
                  *(_QWORD *)(v421 + 8) = *(_QWORD *)(v422 + 8);
                  v423 = *(_QWORD *)(v422 + 16);
                  *(_QWORD *)(v421 + 16) = v423;
                  if (v423)
                  {
                    v424 = (unsigned int *)(v423 + 8);
                    do
                      v425 = __ldxr(v424);
                    while (__stxr(v425 + 1, v424));
                  }
                  v426 = *(_OWORD *)(v422 + 24);
                  v427 = *(_OWORD *)(v422 + 40);
                  *(_OWORD *)(v421 + 56) = *(_OWORD *)(v422 + 56);
                  *(_OWORD *)(v421 + 40) = v427;
                  *(_OWORD *)(v421 + 24) = v426;
                  *(_QWORD *)a3 = v421;
                  *(_QWORD *)v421 = 1;
                  do
                  {
                    v428 = __ldaxr((unint64_t *)v335);
                    v344 = --v428 == 0;
                  }
                  while (__stlxr(v428, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v294 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v295 = (_QWORD *)operator new();
                    v296 = *(_QWORD *)a3 + 8;
                    *v295 = **(_QWORD **)a3;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v295 + 1, v296);
                    *(_QWORD *)a3 = v295;
                    *v295 = 1;
                    do
                    {
                      v297 = __ldaxr(v294);
                      v298 = v297 - 1;
                    }
                    while (__stlxr(v298, v294));
                    if (!v298)
                    {
                      v299 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v294);
                      MEMORY[0x219A19A08](v299, 0x1030C407B73B9F7);
                    }
                  }
                  v300 = *(unint64_t **)a3;
                  v566 = 0uLL;
                  *(_QWORD *)&v567 = 0;
                  memset(&v570, 0, sizeof(v570));
                  std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)(v213 + 1), &__idx);
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, &__idx, (uint64_t)&v566, (uint64_t)&v570, 0);
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__idx);
                  if (v570.__r_.__value_.__r.__words[0])
                  {
                    v570.__r_.__value_.__l.__size_ = v570.__r_.__value_.__r.__words[0];
                    operator delete(v570.__r_.__value_.__l.__data_);
                  }
                  if ((_QWORD)v566)
                  {
                    *((_QWORD *)&v566 + 1) = v566;
                    operator delete((void *)v566);
                  }
                  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v300 + 1), (__int128 *)__p);
                  v301 = (void *)v300[3];
                  if (v301)
                  {
                    v300[4] = (unint64_t)v301;
                    operator delete(v301);
                    v300[3] = 0;
                    v300[4] = 0;
                    v300[5] = 0;
                  }
                  v302 = (void *)v300[6];
                  *(_OWORD *)(v300 + 3) = *(_OWORD *)v560;
                  v300[5] = *(_QWORD *)v561;
                  v560[0] = 0;
                  v560[1] = 0;
                  *(_QWORD *)v561 = 0;
                  if (v302)
                    goto LABEL_549;
                  goto LABEL_550;
                default:
                  goto LABEL_798;
              }
            case 4:
              v193 = *(unsigned int ***)&v571;
              v194 = (uint64_t *)(*(_QWORD *)&v571 + 8);
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v195 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v196 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v196, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v196;
                    *v196 = 1;
                    do
                    {
                      v197 = __ldaxr((unint64_t *)v195);
                      v198 = v197 - 1;
                    }
                    while (__stlxr(v198, (unint64_t *)v195));
                    if (!v198)
                    {
                      if (*(char *)(v195 + 31) < 0)
                        operator delete(*(void **)(v195 + 8));
                      MEMORY[0x219A19A08](v195, 0x1012C404EF22A49);
                    }
                  }
                  v199 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v566, v194);
                  goto LABEL_336;
                case 3:
                  v232 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v233 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v233, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v233;
                    *v233 = 1;
                    do
                    {
                      v234 = __ldaxr(v232);
                      v235 = v234 - 1;
                    }
                    while (__stlxr(v235, v232));
                    if (!v235)
                    {
                      v236 = (void *)v232[1];
                      if (v236)
                      {
                        v232[2] = (unint64_t)v236;
                        operator delete(v236);
                      }
                      MEMORY[0x219A19A08](v232, 0x1080C409938AC02);
                    }
                  }
                  turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)a3 + 8), v194);
                  goto LABEL_694;
                case 4:
                  v329 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v330 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v330, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v330;
                    *v330 = 1;
                    do
                    {
                      v331 = __ldaxr(v329);
                      v332 = v331 - 1;
                    }
                    while (__stlxr(v332, v329));
                    if (!v332)
                    {
                      __p[0] = v329 + 1;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      MEMORY[0x219A19A08](v329, 0x1020C405E66F15BLL);
                    }
                  }
                  if (*(unsigned int ***)a3 != v193)
                    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(*(_QWORD *)a3 + 8, (uint64_t *)v193[1], (uint64_t *)v193[2], ((char *)v193[2] - (char *)v193[1]) >> 4);
                  goto LABEL_694;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v279 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v279, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v279;
                  *v279 = 1;
                  do
                  {
                    v280 = __ldaxr(v278);
                    v281 = --v280 == 0;
                  }
                  while (__stlxr(v280, v278));
                  goto LABEL_665;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v336 = operator new();
                  v337 = *(_QWORD *)a3;
                  *(_QWORD *)v336 = **(_QWORD **)a3;
                  *(_QWORD *)(v336 + 8) = *(_QWORD *)(v337 + 8);
                  v338 = *(_QWORD *)(v337 + 16);
                  *(_QWORD *)(v336 + 16) = v338;
                  if (v338)
                  {
                    v339 = (unsigned int *)(v338 + 8);
                    do
                      v340 = __ldxr(v339);
                    while (__stxr(v340 + 1, v339));
                  }
                  v341 = *(_OWORD *)(v337 + 24);
                  v342 = *(_OWORD *)(v337 + 40);
                  *(_OWORD *)(v336 + 56) = *(_OWORD *)(v337 + 56);
                  *(_OWORD *)(v336 + 40) = v342;
                  *(_OWORD *)(v336 + 24) = v341;
                  *(_QWORD *)a3 = v336;
                  *(_QWORD *)v336 = 1;
                  do
                  {
                    v343 = __ldaxr((unint64_t *)v335);
                    v344 = --v343 == 0;
                  }
                  while (__stlxr(v343, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v251 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v252 = (_QWORD *)operator new();
                    v253 = *(_QWORD *)a3 + 8;
                    *v252 = **(_QWORD **)a3;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v252 + 1, v253);
                    *(_QWORD *)a3 = v252;
                    *v252 = 1;
                    do
                    {
                      v254 = __ldaxr(v251);
                      v255 = v254 - 1;
                    }
                    while (__stlxr(v255, v251));
                    if (!v255)
                    {
                      v256 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v251);
                      MEMORY[0x219A19A08](v256, 0x1030C407B73B9F7);
                    }
                  }
                  v257 = *(unint64_t **)a3;
                  *(_QWORD *)&v567 = 0;
                  v566 = 0uLL;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v566, (uint64_t *)v193[1], (uint64_t *)v193[2], ((char *)v193[2] - (char *)v193[1]) >> 4);
                  turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v566, __p);
                  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v257 + 1), (__int128 *)__p);
                  v258 = (void *)v257[3];
                  if (v258)
                  {
                    v257[4] = (unint64_t)v258;
                    operator delete(v258);
                    v257[3] = 0;
                    v257[4] = 0;
                    v257[5] = 0;
                  }
                  v259 = (void *)v257[6];
                  *(_OWORD *)(v257 + 3) = *(_OWORD *)v560;
                  v257[5] = *(_QWORD *)v561;
                  v560[0] = 0;
                  v560[1] = 0;
                  *(_QWORD *)v561 = 0;
                  if (v259)
                  {
                    v257[7] = (unint64_t)v259;
                    operator delete(v259);
                    v257[6] = 0;
                    v257[7] = 0;
                    v257[8] = 0;
                  }
                  *((_OWORD *)v257 + 3) = *(_OWORD *)&v561[8];
                  v257[8] = *(_QWORD *)&v561[24];
                  memset(&v561[8], 0, 24);
                  v257[9] = v562;
                  turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
                  v570.__r_.__value_.__r.__words[0] = (std::string::size_type)&v566;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v570);
                  goto LABEL_694;
                default:
                  goto LABEL_798;
              }
            case 5:
              v219 = *(unsigned int ***)&v571;
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v220 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v221 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v221, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v221;
                    *v221 = 1;
                    do
                    {
                      v222 = __ldaxr((unint64_t *)v220);
                      v223 = v222 - 1;
                    }
                    while (__stlxr(v223, (unint64_t *)v220));
                    if (!v223)
                    {
                      if (*(char *)(v220 + 31) < 0)
                        operator delete(*(void **)(v220 + 8));
                      MEMORY[0x219A19A08](v220, 0x1012C404EF22A49);
                    }
                  }
                  v211 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v566, v219 + 1);
                  goto LABEL_734;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v288 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v288, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v288;
                  *v288 = 1;
                  do
                  {
                    v289 = __ldaxr(v247);
                    v250 = --v289 == 0;
                  }
                  while (__stlxr(v289, v247));
                  goto LABEL_568;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v459 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v459, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v459;
                  *v459 = 1;
                  do
                  {
                    v460 = __ldaxr(v278);
                    v354 = --v460 == 0;
                  }
                  while (__stlxr(v460, v278));
                  goto LABEL_678;
                case 5:
                  v402 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v403 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v403, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v403;
                    *v403 = 1;
                    do
                    {
                      v404 = __ldaxr(v402);
                      v405 = v404 - 1;
                    }
                    while (__stlxr(v405, v402));
                    if (!v405)
                    {
                      __p[0] = v402 + 1;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                      MEMORY[0x219A19A08](v402, 0x1020C405E66F15BLL);
                    }
                  }
                  if (*(unsigned int ***)a3 != v219)
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(*(_QWORD *)a3 + 8), (uint64_t *)v219[1], (uint64_t *)v219[2], ((char *)v219[2] - (char *)v219[1]) >> 5);
                  goto LABEL_694;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v463 = operator new();
                  v464 = *(_QWORD *)a3;
                  *(_QWORD *)v463 = **(_QWORD **)a3;
                  *(_QWORD *)(v463 + 8) = *(_QWORD *)(v464 + 8);
                  v465 = *(_QWORD *)(v464 + 16);
                  *(_QWORD *)(v463 + 16) = v465;
                  if (v465)
                  {
                    v466 = (unsigned int *)(v465 + 8);
                    do
                      v467 = __ldxr(v466);
                    while (__stxr(v467 + 1, v466));
                  }
                  v468 = *(_OWORD *)(v464 + 24);
                  v469 = *(_OWORD *)(v464 + 40);
                  *(_OWORD *)(v463 + 56) = *(_OWORD *)(v464 + 56);
                  *(_OWORD *)(v463 + 40) = v469;
                  *(_OWORD *)(v463 + 24) = v468;
                  *(_QWORD *)a3 = v463;
                  *(_QWORD *)v463 = 1;
                  do
                  {
                    v470 = __ldaxr((unint64_t *)v335);
                    v344 = --v470 == 0;
                  }
                  while (__stlxr(v470, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v345 = (_QWORD *)operator new();
                  v346 = *(_QWORD *)a3 + 8;
                  *v345 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v345 + 1, v346);
                  *(_QWORD *)a3 = v345;
                  *v345 = 1;
                  do
                  {
                    v347 = __ldaxr(v273);
                    v277 = --v347 == 0;
                  }
                  while (__stlxr(v347, v273));
                  goto LABEL_515;
                default:
                  goto LABEL_798;
              }
            case 6:
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                  v36 = (uint64_t)(*(_QWORD *)&v571 << 8) >> 8;
                  goto LABEL_326;
                case 1:
                  v328 = (double)v572 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v571 << 8) >> 8);
LABEL_557:
                  *a3 = v328;
                  goto LABEL_694;
                case 2:
                  v410 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v411 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v411, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v411;
                    *v411 = 1;
                    do
                    {
                      v412 = __ldaxr((unint64_t *)v410);
                      v413 = v412 - 1;
                    }
                    while (__stlxr(v413, (unint64_t *)v410));
                    if (!v413)
                    {
                      if (*(char *)(v410 + 31) < 0)
                        operator delete(*(void **)(v410 + 8));
                      MEMORY[0x219A19A08](v410, 0x1012C404EF22A49);
                    }
                  }
                  v211 = *(_QWORD *)a3;
                  *(double *)&v566 = v571;
                  DWORD2(v566) = v572;
                  turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v566, (std::string *)__p);
LABEL_734:
                  v229 = v211 + 8;
                  if (*(char *)(v211 + 31) < 0)
                    goto LABEL_337;
                  goto LABEL_338;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v333 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v333, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v333;
                  *v333 = 1;
                  do
                  {
                    v334 = __ldaxr(v247);
                    v250 = --v334 == 0;
                  }
                  while (__stlxr(v334, v247));
                  goto LABEL_568;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v461 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v461, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v461;
                  *v461 = 1;
                  do
                  {
                    v462 = __ldaxr(v278);
                    v354 = --v462 == 0;
                  }
                  while (__stlxr(v462, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v471 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v471, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v471;
                  *v471 = 1;
                  do
                  {
                    v472 = __ldaxr(v278);
                    v281 = --v472 == 0;
                  }
                  while (__stlxr(v472, v278));
                  goto LABEL_665;
                case 6:
                  v420 = v572;
                  *a3 = v571;
                  *((_DWORD *)a3 + 2) = v420;
                  goto LABEL_694;
                case 7:
                  goto LABEL_693;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v473 = operator new();
                  v474 = *(_QWORD *)a3;
                  *(_QWORD *)v473 = **(_QWORD **)a3;
                  *(_QWORD *)(v473 + 8) = *(_QWORD *)(v474 + 8);
                  v475 = *(_QWORD *)(v474 + 16);
                  *(_QWORD *)(v473 + 16) = v475;
                  if (v475)
                  {
                    v476 = (unsigned int *)(v475 + 8);
                    do
                      v477 = __ldxr(v476);
                    while (__stxr(v477 + 1, v476));
                  }
                  v478 = *(_OWORD *)(v474 + 24);
                  v479 = *(_OWORD *)(v474 + 40);
                  *(_OWORD *)(v473 + 56) = *(_OWORD *)(v474 + 56);
                  *(_OWORD *)(v473 + 40) = v479;
                  *(_OWORD *)(v473 + 24) = v478;
                  *(_QWORD *)a3 = v473;
                  *(_QWORD *)v473 = 1;
                  do
                  {
                    v480 = __ldaxr((unint64_t *)v335);
                    v344 = --v480 == 0;
                  }
                  while (__stlxr(v480, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v355 = (_QWORD *)operator new();
                  v356 = *(_QWORD *)a3 + 8;
                  *v355 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v355 + 1, v356);
                  *(_QWORD *)a3 = v355;
                  *v355 = 1;
                  do
                  {
                    v357 = __ldaxr(v273);
                    v277 = --v357 == 0;
                  }
                  while (__stlxr(v357, v273));
                  goto LABEL_515;
                default:
                  goto LABEL_798;
              }
            case 7:
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 6:
                  goto LABEL_693;
                case 1:
                  v36 = 0x7FF8000000000000;
LABEL_326:
                  *(_QWORD *)a3 = v36;
                  goto LABEL_694;
                case 2:
                  v282 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v283 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v283, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v283;
                    *v283 = 1;
                    do
                    {
                      v284 = __ldaxr((unint64_t *)v282);
                      v285 = v284 - 1;
                    }
                    while (__stlxr(v285, (unint64_t *)v282));
                    if (!v285)
                    {
                      if (*(char *)(v282 + 31) < 0)
                        operator delete(*(void **)(v282 + 8));
                      MEMORY[0x219A19A08](v282, 0x1012C404EF22A49);
                    }
                  }
                  v286 = *(_QWORD *)a3;
                  v287 = *(_QWORD *)a3 + 8;
                  if (*(char *)(v286 + 31) < 0)
                    operator delete(*(void **)v287);
                  *(_QWORD *)v287 = 0;
                  *(_QWORD *)(v287 + 8) = 0;
                  *(_QWORD *)(v287 + 16) = 0;
                  goto LABEL_694;
                case 3:
                  v247 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v398 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v398, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v398;
                  *v398 = 1;
                  do
                  {
                    v399 = __ldaxr(v247);
                    v250 = --v399 == 0;
                  }
                  while (__stlxr(v399, v247));
LABEL_568:
                  if (!v250)
                    goto LABEL_693;
                  v400 = (void *)v247[1];
                  if (v400)
                  {
                    v247[2] = (unint64_t)v400;
                    operator delete(v400);
                  }
                  v358 = v247;
                  v401 = 0x1080C409938AC02;
                  goto LABEL_692;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v418 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v418, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v418;
                  *v418 = 1;
                  do
                  {
                    v419 = __ldaxr(v278);
                    v354 = --v419 == 0;
                  }
                  while (__stlxr(v419, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v350 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v350, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v350;
                  *v350 = 1;
                  do
                  {
                    v351 = __ldaxr(v278);
                    v281 = --v351 == 0;
                  }
                  while (__stlxr(v351, v278));
                  goto LABEL_665;
                case 7:
                  goto LABEL_694;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v429 = operator new();
                  v430 = *(_QWORD *)a3;
                  *(_QWORD *)v429 = **(_QWORD **)a3;
                  *(_QWORD *)(v429 + 8) = *(_QWORD *)(v430 + 8);
                  v431 = *(_QWORD *)(v430 + 16);
                  *(_QWORD *)(v429 + 16) = v431;
                  if (v431)
                  {
                    v432 = (unsigned int *)(v431 + 8);
                    do
                      v433 = __ldxr(v432);
                    while (__stxr(v433 + 1, v432));
                  }
                  v434 = *(_OWORD *)(v430 + 24);
                  v435 = *(_OWORD *)(v430 + 40);
                  *(_OWORD *)(v429 + 56) = *(_OWORD *)(v430 + 56);
                  *(_OWORD *)(v429 + 40) = v435;
                  *(_OWORD *)(v429 + 24) = v434;
                  *(_QWORD *)a3 = v429;
                  *(_QWORD *)v429 = 1;
                  do
                  {
                    v436 = __ldaxr((unint64_t *)v335);
                    v344 = --v436 == 0;
                  }
                  while (__stlxr(v436, (unint64_t *)v335));
                  goto LABEL_688;
                case 9:
                  v273 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v312 = (_QWORD *)operator new();
                  v313 = *(_QWORD *)a3 + 8;
                  *v312 = **(_QWORD **)a3;
                  turi::flexible_type_impl::ndarray<double>::ndarray(v312 + 1, v313);
                  *(_QWORD *)a3 = v312;
                  *v312 = 1;
                  do
                  {
                    v314 = __ldaxr(v273);
                    v277 = --v314 == 0;
                  }
                  while (__stlxr(v314, v273));
LABEL_515:
                  if (!v277)
                    goto LABEL_693;
                  v358 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v273);
                  v359 = 2071181815;
                  goto LABEL_691;
                default:
                  goto LABEL_798;
              }
            case 8:
              v224 = (uint64_t *)(*(_QWORD *)&v571 + 8);
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v225 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v226 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v226, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v226;
                    *v226 = 1;
                    do
                    {
                      v227 = __ldaxr((unint64_t *)v225);
                      v228 = v227 - 1;
                    }
                    while (__stlxr(v228, (unint64_t *)v225));
                    if (!v228)
                    {
                      if (*(char *)(v225 + 31) < 0)
                        operator delete(*(void **)(v225 + 8));
                      MEMORY[0x219A19A08](v225, 0x1012C404EF22A49);
                    }
                  }
                  v199 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_336;
                case 3:
                  v303 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v304 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v304, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v304;
                    *v304 = 1;
                    do
                    {
                      v305 = __ldaxr(v303);
                      v306 = v305 - 1;
                    }
                    while (__stlxr(v306, v303));
                    if (!v306)
                    {
                      v307 = (void *)v303[1];
                      if (v307)
                      {
                        v303[2] = (unint64_t)v307;
                        operator delete(v307);
                      }
                      v35 = MEMORY[0x219A19A08](v303, 0x1080C409938AC02);
                    }
                  }
                  v308 = *(unint64_t **)a3;
                  turi::flexible_type_impl::get_vec_visitor::operator()(v224, (double **)__p, *(unint64_t *)&v35);
                  v309 = (void *)v308[1];
                  if (v309)
                  {
                    v308[2] = (unint64_t)v309;
                    operator delete(v309);
                    v308[1] = 0;
                    v308[2] = 0;
                    v308[3] = 0;
                  }
                  *(_OWORD *)(v308 + 1) = *(_OWORD *)__p;
                  v308[3] = (unint64_t)v560[0];
                  goto LABEL_694;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v481 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v481, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v481;
                  *v481 = 1;
                  do
                  {
                    v482 = __ldaxr(v278);
                    v354 = --v482 == 0;
                  }
                  while (__stlxr(v482, v278));
                  goto LABEL_678;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v437 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v437, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v437;
                  *v437 = 1;
                  do
                  {
                    v438 = __ldaxr(v278);
                    v281 = --v438 == 0;
                  }
                  while (__stlxr(v438, v278));
                  goto LABEL_665;
                case 8:
                  v335 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v483 = operator new();
                  v484 = *(_QWORD *)a3;
                  *(_QWORD *)v483 = **(_QWORD **)a3;
                  *(_QWORD *)(v483 + 8) = *(_QWORD *)(v484 + 8);
                  v485 = *(_QWORD *)(v484 + 16);
                  *(_QWORD *)(v483 + 16) = v485;
                  if (v485)
                  {
                    v486 = (unsigned int *)(v485 + 8);
                    do
                      v487 = __ldxr(v486);
                    while (__stxr(v487 + 1, v486));
                  }
                  v488 = *(_OWORD *)(v484 + 24);
                  v489 = *(_OWORD *)(v484 + 40);
                  *(_OWORD *)(v483 + 56) = *(_OWORD *)(v484 + 56);
                  *(_OWORD *)(v483 + 40) = v489;
                  *(_OWORD *)(v483 + 24) = v488;
                  *(_QWORD *)a3 = v483;
                  *(_QWORD *)v483 = 1;
                  do
                  {
                    v490 = __ldaxr((unint64_t *)v335);
                    v344 = --v490 == 0;
                  }
                  while (__stlxr(v490, (unint64_t *)v335));
LABEL_688:
                  if (!v344)
                    goto LABEL_693;
                  boost::detail::shared_count::~shared_count((unsigned int **)(v335 + 16));
                  v358 = (_QWORD *)v335;
                  v359 = -235920773;
LABEL_691:
                  v401 = v359 | 0x1030C4000000000;
                  goto LABEL_692;
                case 9:
                  v381 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v382 = (_QWORD *)operator new();
                    v383 = *(_QWORD *)a3 + 8;
                    *v382 = **(_QWORD **)a3;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v382 + 1, v383);
                    *(_QWORD *)a3 = v382;
                    *v382 = 1;
                    do
                    {
                      v384 = __ldaxr(v381);
                      v385 = v384 - 1;
                    }
                    while (__stlxr(v385, v381));
                    if (!v385)
                    {
                      v386 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v381);
                      v35 = MEMORY[0x219A19A08](v386, 0x1030C407B73B9F7);
                    }
                  }
                  v300 = *(unint64_t **)a3;
                  turi::flexible_type_impl::get_ndvec_visitor::operator()(v224, __p, *(unint64_t *)&v35);
                  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v300 + 1), (__int128 *)__p);
                  v387 = (void *)v300[3];
                  if (v387)
                  {
                    v300[4] = (unint64_t)v387;
                    operator delete(v387);
                    v300[3] = 0;
                    v300[4] = 0;
                    v300[5] = 0;
                  }
                  v302 = (void *)v300[6];
                  *(_OWORD *)(v300 + 3) = *(_OWORD *)v560;
                  v300[5] = *(_QWORD *)v561;
                  v560[0] = 0;
                  v560[1] = 0;
                  *(_QWORD *)v561 = 0;
                  if (v302)
                  {
LABEL_549:
                    v300[7] = (unint64_t)v302;
                    operator delete(v302);
                    v300[6] = 0;
                    v300[7] = 0;
                    v300[8] = 0;
                  }
LABEL_550:
                  *((_OWORD *)v300 + 3) = *(_OWORD *)&v561[8];
                  v300[8] = *(_QWORD *)&v561[24];
                  memset(&v561[8], 0, 24);
                  v300[9] = v562;
                  goto LABEL_789;
                default:
                  goto LABEL_798;
              }
            case 9:
              v200 = *(unsigned int ***)&v571;
              v201 = (char ***)(*(_QWORD *)&v571 + 8);
              switch(*((_BYTE *)a3 + 12))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_693;
                case 2:
                  v202 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v203 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v203, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v203;
                    *v203 = 1;
                    do
                    {
                      v204 = __ldaxr((unint64_t *)v202);
                      v205 = v204 - 1;
                    }
                    while (__stlxr(v205, (unint64_t *)v202));
                    if (!v205)
                    {
                      if (*(char *)(v202 + 31) < 0)
                        operator delete(*(void **)(v202 + 8));
                      MEMORY[0x219A19A08](v202, 0x1012C404EF22A49);
                    }
                  }
                  v199 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v566, v200 + 1);
LABEL_336:
                  v229 = v199 + 8;
                  if (*(char *)(v199 + 31) < 0)
LABEL_337:
                    operator delete(*(void **)v229);
LABEL_338:
                  v230 = *(_OWORD *)__p;
                  v231 = v560[0];
LABEL_476:
                  *(_QWORD *)(v229 + 16) = v231;
                  *(_OWORD *)v229 = v230;
                  goto LABEL_694;
                case 3:
                  v237 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v238 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v238, *(_QWORD *)a3);
                    *(_QWORD *)a3 = v238;
                    *v238 = 1;
                    do
                    {
                      v239 = __ldaxr(v237);
                      v240 = v239 - 1;
                    }
                    while (__stlxr(v240, v237));
                    if (!v240)
                    {
                      v241 = (void *)v237[1];
                      if (v241)
                      {
                        v237[2] = (unint64_t)v241;
                        operator delete(v241);
                      }
                      MEMORY[0x219A19A08](v237, 0x1080C409938AC02);
                    }
                  }
                  v242 = (char *)(*(_QWORD *)a3 + 8);
                  if (v200[9])
                    goto LABEL_742;
                  v244 = v200[3];
                  v243 = v200[4];
                  v245 = v200[1];
                  if (v243 == v244 || v245 == 0)
                  {
                    v517 = 0;
                  }
                  else
                  {
                    v517 = 1;
                    do
                    {
                      v518 = *(_QWORD *)v244;
                      v244 += 2;
                      v517 *= v518;
                    }
                    while (v244 != v243);
                  }
                  if (v517 == (uint64_t)(*((_QWORD *)v245 + 1) - *(_QWORD *)v245) >> 3
                    && turi::flexible_type_impl::ndarray<double>::last_index(v200 + 1) == ((*v201)[1] - **v201) >> 3)
                  {
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(v200 + 1))
                      turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                    v214 = *v201;
                    if (v242 != (char *)v214)
                    {
                      v265 = (uint64_t *)(v214 + 1);
LABEL_384:
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v242, *v214, *v265, (*v265 - (uint64_t)*v214) >> 3);
                    }
                  }
                  else
                  {
LABEL_742:
                    if (!turi::flexible_type_impl::ndarray<double>::is_valid(v200 + 1))
                      turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                    if (turi::flexible_type_impl::ndarray<double>::is_full(v200 + 1))
                    {
                      turi::flexible_type_impl::ndarray<double>::ndarray(__p, (uint64_t)(v200 + 1));
                    }
                    else
                    {
                      v566 = 0uLL;
                      *(_QWORD *)&v567 = 0;
                      memset(&v570, 0, sizeof(v570));
                      __idx = 0;
                      v564 = 0;
                      v565 = 0;
                      turi::flexible_type_impl::ndarray<double>::ndarray(__p, (uint64_t)&v566, (uint64_t)&v570, (uint64_t)&__idx, 0);
                      if (__idx)
                      {
                        v564 = __idx;
                        operator delete((void *)__idx);
                      }
                      if (v570.__r_.__value_.__r.__words[0])
                      {
                        v570.__r_.__value_.__l.__size_ = v570.__r_.__value_.__r.__words[0];
                        operator delete(v570.__r_.__value_.__l.__data_);
                      }
                      if ((_QWORD)v566)
                      {
                        *((_QWORD *)&v566 + 1) = v566;
                        operator delete((void *)v566);
                      }
                      v562 = 0;
                      if (__p != (void **)(v200 + 1))
                        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v560, (char *)v200[3], (uint64_t)v200[4], ((char *)v200[4] - (char *)v200[3]) >> 3);
                      v520 = v200[3];
                      v519 = v200[4];
                      if (v519 == v520 || !*v201)
                      {
                        v521 = 0;
                      }
                      else
                      {
                        v521 = 1;
                        do
                        {
                          v522 = *(_QWORD *)v520;
                          v520 += 2;
                          v521 *= v522;
                        }
                        while (v520 != v519);
                      }
                      std::vector<double>::resize((uint64_t)__p[0], v521);
                      std::vector<unsigned long>::resize((uint64_t)&v561[8], ((char *)v200[4] - (char *)v200[3]) >> 3);
                      if (v560[1] != v560[0] && *((_QWORD *)__p[0] + 1) != *(_QWORD *)__p[0])
                      {
                        std::vector<std::pair<unsigned long,unsigned long>>::vector(&v566, ((char *)v200[7] - (char *)v200[6]) >> 3);
                        v523 = v200[6];
                        v524 = v200[7];
                        v525 = (unint64_t *)v566;
                        v526 = (char *)v524 - (char *)v523;
                        if (v524 != v523)
                        {
                          v527 = 0;
                          v528 = v526 >> 3;
                          if (v528 <= 1)
                            v528 = 1;
                          v529 = (_QWORD *)(v566 + 8);
                          do
                          {
                            *(v529 - 1) = *(_QWORD *)&v523[2 * v527];
                            *v529 = v527++;
                            v529 += 2;
                          }
                          while (v528 != v527);
                        }
                        std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v566 + 1), *((unint64_t **)&v566 + 1), (uint64_t)v525, v525);
                        v530 = v566;
                        v531 = *(_QWORD *)&v561[8];
                        *(_QWORD *)(*(_QWORD *)&v561[8] + 8 * *(_QWORD *)(v566 + 8)) = 1;
                        v532 = (char *)v200[7] - (char *)v200[6];
                        if ((unint64_t)v532 >= 9)
                        {
                          v533 = v532 >> 3;
                          v534 = v560[0];
                          if (v533 <= 2)
                            v533 = 2;
                          v535 = (uint64_t *)(v530 + 24);
                          v536 = v533 - 1;
                          do
                          {
                            v537 = v534[*(v535 - 2)] * *(_QWORD *)(v531 + 8 * *(v535 - 2));
                            v538 = *v535;
                            v535 += 2;
                            *(_QWORD *)(v531 + 8 * v538) = v537;
                            --v536;
                          }
                          while (v536);
                        }
                        v539 = ((char *)v200[4] - (char *)v200[3]) >> 3;
                        __idx = 0;
                        std::vector<unsigned long>::vector(&v570, v539, &__idx);
                        do
                        {
                          v540 = (uint64_t *)v570.__r_.__value_.__r.__words[0];
                          if (v570.__r_.__value_.__l.__size_ == v570.__r_.__value_.__r.__words[0])
                          {
                            v549 = 0;
                            v550 = *(_QWORD *)(*(_QWORD *)v200[1] + 8 * (_QWORD)v200[9]);
                            v551 = __p[0];
                          }
                          else
                          {
                            v541 = 0;
                            v542 = (uint64_t)(v570.__r_.__value_.__l.__size_ - v570.__r_.__value_.__r.__words[0]) >> 3;
                            v543 = v200[6];
                            if (v542 <= 1)
                              v542 = 1;
                            v544 = (uint64_t *)v570.__r_.__value_.__r.__words[0];
                            v545 = v542;
                            do
                            {
                              v547 = *v544++;
                              v546 = v547;
                              v548 = *(_QWORD *)v543;
                              v543 += 2;
                              v541 += v548 * v546;
                              --v545;
                            }
                            while (v545);
                            v549 = 0;
                            v550 = *(_QWORD *)(*(_QWORD *)v200[1] + 8 * ((_QWORD)v200[9] + v541));
                            v551 = __p[0];
                            v552 = *(uint64_t **)&v561[8];
                            do
                            {
                              v554 = *v540++;
                              v553 = v554;
                              v555 = *v552++;
                              v549 += v555 * v553;
                              --v542;
                            }
                            while (v542);
                          }
                          *(_QWORD *)(*v551 + 8 * v549) = v550;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v200 + 1), (uint64_t *)&v570));
                        if (v570.__r_.__value_.__r.__words[0])
                        {
                          v570.__r_.__value_.__l.__size_ = v570.__r_.__value_.__r.__words[0];
                          operator delete(v570.__r_.__value_.__l.__data_);
                        }
                        if ((_QWORD)v566)
                        {
                          *((_QWORD *)&v566 + 1) = v566;
                          operator delete((void *)v566);
                        }
                      }
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)__p);
                    if (!turi::flexible_type_impl::ndarray<double>::is_full(__p))
                      turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                    if (v242 != __p[0])
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v242, *(char **)__p[0], *((_QWORD *)__p[0] + 1), (uint64_t)(*((_QWORD *)__p[0] + 1) - *(_QWORD *)__p[0]) >> 3);
LABEL_789:
                    turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
                  }
                  goto LABEL_694;
                case 4:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v352 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v352, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v352;
                  *v352 = 1;
                  do
                  {
                    v353 = __ldaxr(v278);
                    v354 = --v353 == 0;
                  }
                  while (__stlxr(v353, v278));
LABEL_678:
                  if (!v354)
                    goto LABEL_693;
                  __p[0] = v278 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  break;
                case 5:
                  v278 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 == 1)
                    goto LABEL_693;
                  v310 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v310, *(_QWORD *)a3);
                  *(_QWORD *)a3 = v310;
                  *v310 = 1;
                  do
                  {
                    v311 = __ldaxr(v278);
                    v281 = --v311 == 0;
                  }
                  while (__stlxr(v311, v278));
LABEL_665:
                  if (!v281)
                    goto LABEL_693;
                  __p[0] = v278 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  break;
                case 8:
                  v366 = *(_QWORD *)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v367 = operator new();
                    v368 = *(_QWORD *)a3;
                    *(_QWORD *)v367 = **(_QWORD **)a3;
                    *(_QWORD *)(v367 + 8) = *(_QWORD *)(v368 + 8);
                    v369 = *(_QWORD *)(v368 + 16);
                    *(_QWORD *)(v367 + 16) = v369;
                    if (v369)
                    {
                      v370 = (unsigned int *)(v369 + 8);
                      do
                        v371 = __ldxr(v370);
                      while (__stxr(v371 + 1, v370));
                    }
                    v372 = *(_OWORD *)(v368 + 24);
                    v373 = *(_OWORD *)(v368 + 40);
                    *(_OWORD *)(v367 + 56) = *(_OWORD *)(v368 + 56);
                    *(_OWORD *)(v367 + 40) = v373;
                    *(_OWORD *)(v367 + 24) = v372;
                    *(_QWORD *)a3 = v367;
                    *(_QWORD *)v367 = 1;
                    do
                    {
                      v374 = __ldaxr((unint64_t *)v366);
                      v375 = v374 - 1;
                    }
                    while (__stlxr(v375, (unint64_t *)v366));
                    if (!v375)
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)(v366 + 16));
                      MEMORY[0x219A19A08](v366, 0x1030C40F1F0227BLL);
                    }
                  }
                  v376 = *(_QWORD *)a3;
                  turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)(v200 + 1), (turi::image_type *)__p);
                  v377 = *(_OWORD *)__p;
                  __p[0] = 0;
                  __p[1] = 0;
                  v378 = *(_OWORD *)(v376 + 8);
                  *(_OWORD *)(v376 + 8) = v377;
                  v566 = v378;
                  boost::detail::shared_count::~shared_count((unsigned int **)&v566 + 1);
                  v379 = *(_OWORD *)v560;
                  v380 = *(_OWORD *)v561;
                  *(_OWORD *)(v376 + 56) = *(_OWORD *)&v561[16];
                  *(_OWORD *)(v376 + 40) = v380;
                  *(_OWORD *)(v376 + 24) = v379;
                  boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                  goto LABEL_694;
                case 9:
                  v266 = *(unint64_t **)a3;
                  if (**(_QWORD **)a3 != 1)
                  {
                    v267 = (_QWORD *)operator new();
                    v268 = *(_QWORD *)a3 + 8;
                    *v267 = **(_QWORD **)a3;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v267 + 1, v268);
                    *(_QWORD *)a3 = v267;
                    *v267 = 1;
                    do
                    {
                      v269 = __ldaxr(v266);
                      v270 = v269 - 1;
                    }
                    while (__stlxr(v270, v266));
                    if (!v270)
                    {
                      v271 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v266);
                      MEMORY[0x219A19A08](v271, 0x1030C407B73B9F7);
                    }
                  }
                  v272 = *(_QWORD *)a3;
                  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a3 + 8), (uint64_t *)v200 + 1);
                  if ((unsigned int **)v272 != v200)
                  {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v272 + 24), (char *)v200[3], (uint64_t)v200[4], ((char *)v200[4] - (char *)v200[3]) >> 3);
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v272 + 48), (char *)v200[6], (uint64_t)v200[7], ((char *)v200[7] - (char *)v200[6]) >> 3);
                  }
                  *(_QWORD *)(v272 + 72) = v200[9];
                  goto LABEL_694;
                default:
                  goto LABEL_798;
              }
              v358 = v278;
              v401 = 0x1020C405E66F15BLL;
LABEL_692:
              MEMORY[0x219A19A08](v358, v401);
LABEL_693:
              turi::flexible_type_fail(0);
              break;
            default:
LABEL_798:
              turi::flexible_type_fail(0);
              goto LABEL_800;
          }
        }
LABEL_694:
        switch(v573)
        {
          case 2:
            v491 = *(unint64_t **)&v571;
            do
            {
              v492 = __ldaxr(v491);
              v493 = v492 - 1;
            }
            while (__stlxr(v493, v491));
            if (!v493)
            {
              v494 = *(unsigned int ***)&v571;
              if (v571 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v571 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v571 + 8));
                v495 = v494;
                v496 = 0x1012C404EF22A49;
                goto LABEL_731;
              }
            }
            break;
          case 3:
            v505 = *(unint64_t **)&v571;
            do
            {
              v506 = __ldaxr(v505);
              v507 = v506 - 1;
            }
            while (__stlxr(v507, v505));
            if (!v507)
            {
              v508 = *(unsigned int ***)&v571;
              if (v571 != 0.0)
              {
                v509 = *(unsigned int **)(*(_QWORD *)&v571 + 8);
                if (v509)
                {
                  *(_QWORD *)(*(_QWORD *)&v571 + 16) = v509;
                  operator delete(v509);
                }
                v495 = v508;
                v496 = 0x1080C409938AC02;
                goto LABEL_731;
              }
            }
            break;
          case 4:
            v497 = *(unint64_t **)&v571;
            do
            {
              v498 = __ldaxr(v497);
              v499 = v498 - 1;
            }
            while (__stlxr(v499, v497));
            if (!v499)
            {
              v500 = *(unsigned int ***)&v571;
              if (v571 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v571 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_724;
              }
            }
            break;
          case 5:
            v510 = *(unint64_t **)&v571;
            do
            {
              v511 = __ldaxr(v510);
              v512 = v511 - 1;
            }
            while (__stlxr(v512, v510));
            if (!v512)
            {
              v500 = *(unsigned int ***)&v571;
              if (v571 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v571 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_724:
                v495 = v500;
                v496 = 0x1020C405E66F15BLL;
                goto LABEL_731;
              }
            }
            break;
          case 8:
            v513 = *(unint64_t **)&v571;
            do
            {
              v514 = __ldaxr(v513);
              v515 = v514 - 1;
            }
            while (__stlxr(v515, v513));
            if (!v515)
            {
              v516 = *(unsigned int ***)&v571;
              if (v571 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v571 + 16));
                v495 = v516;
                v504 = -235920773;
                goto LABEL_730;
              }
            }
            break;
          case 9:
            v501 = *(unint64_t **)&v571;
            do
            {
              v502 = __ldaxr(v501);
              v503 = v502 - 1;
            }
            while (__stlxr(v503, v501));
            if (!v503 && v571 != 0.0)
            {
              v495 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v571);
              v504 = 2071181815;
LABEL_730:
              v496 = v504 | 0x1030C4000000000;
LABEL_731:
              MEMORY[0x219A19A08](v495, v496);
            }
            break;
          default:
            return;
        }
        return;
    }
    turi::flexible_type_fail(0);
LABEL_800:
    __break(1u);
  }
  else
  {
    *((_BYTE *)a3 + 12) = v17;
    switch(v17)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        v47 = operator new();
        *(_QWORD *)v47 = 0;
        *(_QWORD *)(v47 + 16) = 0;
        *(_QWORD *)(v47 + 24) = 0;
        *(_QWORD *)(v47 + 8) = 0;
        goto LABEL_70;
      case 6:
        *a3 = 2.87284835e-188;
        *((_DWORD *)a3 + 2) = 0;
        break;
      case 8:
        v47 = operator new();
        *(_QWORD *)v47 = 0;
        *(_OWORD *)(v47 + 8) = 0u;
        *(_OWORD *)(v47 + 24) = 0u;
        *(_OWORD *)(v47 + 40) = 0u;
        *(_QWORD *)(v47 + 56) = 0;
        *(_QWORD *)(v47 + 64) = 3;
LABEL_70:
        *(_QWORD *)a3 = v47;
        *(_QWORD *)v47 = 1;
        break;
      case 9:
        v48 = (_QWORD *)operator new();
        std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>(v48);
        *(_QWORD *)a3 = v48;
        *v48 = 1;
        break;
      default:
        break;
    }
    for (i = *(_QWORD *)(a1 + 16); i < *(_QWORD *)a1; ++i)
    {
      if (*(_BYTE *)(a1 + 24) == 3)
      {
        v50 = *((unsigned __int8 *)v4 + 12);
        if (v50 == 1)
        {
          v61 = v4;
          if (i)
          {
LABEL_790:
            turi::flexible_type_fail(0);
            goto LABEL_800;
          }
        }
        else
        {
          if (v50 == 9)
          {
            v60 = *(_QWORD *)v4;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)v4 + 8));
            v51 = *(_QWORD **)(v60 + 8);
            v52 = *(_QWORD *)(v60 + 72) + i;
          }
          else
          {
            if (v50 != 3)
              goto LABEL_790;
            v51 = (_QWORD *)(*(_QWORD *)v4 + 8);
            v52 = i;
          }
          v61 = (double *)(*v51 + 8 * v52);
        }
        v62 = *v61;
        v63 = *((unsigned __int8 *)a3 + 12);
        switch(*((_BYTE *)a3 + 12))
        {
          case 2:
            v64 = *(_QWORD *)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v65 = (_QWORD *)operator new();
            v66 = *(_QWORD *)a3;
            *v65 = **(_QWORD **)a3;
            v67 = (std::string *)(v65 + 1);
            if (*(char *)(v66 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)(v66 + 8), *(_QWORD *)(v66 + 16));
            }
            else
            {
              v68 = *(_OWORD *)(v66 + 8);
              v65[3] = *(_QWORD *)(v66 + 24);
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
            }
            *(_QWORD *)a3 = v65;
            *v65 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v64);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, (unint64_t *)v64));
            if (v148)
              goto LABEL_194;
            if (*(char *)(v64 + 31) < 0)
              operator delete(*(void **)(v64 + 8));
            v115 = (unint64_t *)v64;
            v122 = 0x1012C404EF22A49;
            goto LABEL_193;
          case 3:
            v83 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_198;
            v117 = (_QWORD *)operator new();
            v118 = *(_QWORD *)a3;
            *v117 = **(_QWORD **)a3;
            v117[2] = 0;
            v117[3] = 0;
            v117[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v117 + 1, *(const void **)(v118 + 8), *(_QWORD *)(v118 + 16), (uint64_t)(*(_QWORD *)(v118 + 16) - *(_QWORD *)(v118 + 8)) >> 3);
            *(_QWORD *)a3 = v117;
            *v117 = 1;
            do
            {
              v119 = __ldaxr(v83);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, v83));
            if (v120)
              goto LABEL_194;
            v121 = (void *)v83[1];
            if (v121)
            {
              v83[2] = (unint64_t)v121;
              operator delete(v121);
            }
            v115 = v83;
            v122 = 0x1080C409938AC02;
            goto LABEL_193;
          case 4:
            v83 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_209;
            v104 = (_QWORD *)operator new();
            v105 = *(_QWORD *)a3;
            *v104 = **(_QWORD **)a3;
            v104[2] = 0;
            v104[3] = 0;
            v104[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v104 + 1, *(uint64_t **)(v105 + 8), *(uint64_t **)(v105 + 16), (uint64_t)(*(_QWORD *)(v105 + 16) - *(_QWORD *)(v105 + 8)) >> 4);
            *(_QWORD *)a3 = v104;
            *v104 = 1;
            do
            {
              v106 = __ldaxr(v83);
              v107 = v106 - 1;
            }
            while (__stlxr(v107, v83));
            if (v107)
              goto LABEL_194;
            __p[0] = v83 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_150;
          case 5:
            v83 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v123 = (_QWORD *)operator new();
            v124 = *(_QWORD *)a3;
            *v123 = **(_QWORD **)a3;
            v123[2] = 0;
            v123[3] = 0;
            v123[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v123 + 1, *(uint64_t **)(v124 + 8), *(uint64_t **)(v124 + 16), (uint64_t)(*(_QWORD *)(v124 + 16) - *(_QWORD *)(v124 + 8)) >> 5);
            *(_QWORD *)a3 = v123;
            *v123 = 1;
            do
            {
              v125 = __ldaxr(v83);
              v126 = v125 - 1;
            }
            while (__stlxr(v126, v83));
            if (v126)
              goto LABEL_194;
            __p[0] = v83 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_150:
            v115 = v83;
            v122 = 0x1020C405E66F15BLL;
            goto LABEL_193;
          case 8:
            v127 = *(_QWORD *)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v128 = operator new();
            v129 = *(_QWORD *)a3;
            *(_QWORD *)v128 = **(_QWORD **)a3;
            *(_QWORD *)(v128 + 8) = *(_QWORD *)(v129 + 8);
            v130 = *(_QWORD *)(v129 + 16);
            *(_QWORD *)(v128 + 16) = v130;
            if (v130)
            {
              v131 = (unsigned int *)(v130 + 8);
              do
                v132 = __ldxr(v131);
              while (__stxr(v132 + 1, v131));
            }
            v133 = *(_OWORD *)(v129 + 24);
            v134 = *(_OWORD *)(v129 + 40);
            *(_OWORD *)(v128 + 56) = *(_OWORD *)(v129 + 56);
            *(_OWORD *)(v128 + 40) = v134;
            *(_OWORD *)(v128 + 24) = v133;
            *(_QWORD *)a3 = v128;
            *(_QWORD *)v128 = 1;
            do
            {
              v135 = __ldaxr((unint64_t *)v127);
              v136 = v135 - 1;
            }
            while (__stlxr(v136, (unint64_t *)v127));
            if (v136)
              goto LABEL_194;
            boost::detail::shared_count::~shared_count((unsigned int **)(v127 + 16));
            v115 = (unint64_t *)v127;
            v116 = -235920773;
            goto LABEL_159;
          case 9:
            v108 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v109 = (_QWORD *)operator new();
            v110 = *(_QWORD *)a3 + 8;
            *v109 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v109 + 1, v110);
            *(_QWORD *)a3 = v109;
            *v109 = 1;
            do
            {
              v111 = __ldaxr(v108);
              v112 = v111 - 1;
            }
            while (__stlxr(v112, v108));
            if (v112)
              goto LABEL_194;
            v113 = (void *)v108[6];
            if (v113)
            {
              v108[7] = (unint64_t)v113;
              operator delete(v113);
            }
            v114 = (void *)v108[3];
            if (v114)
            {
              v108[4] = (unint64_t)v114;
              operator delete(v114);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v108 + 1));
            v115 = v108;
            v116 = 2071181815;
LABEL_159:
            v122 = v116 | 0x1030C4000000000;
LABEL_193:
            MEMORY[0x219A19A08](v115, v122);
LABEL_194:
            v63 = *((unsigned __int8 *)a3 + 12);
LABEL_195:
            if (v63 == 4)
            {
              v83 = *(unint64_t **)a3;
LABEL_209:
              v157 = v83[3];
              v158 = v83[2];
              if (v158 >= v157)
              {
                v160 = v83[1];
                v161 = (uint64_t)(v158 - v160) >> 4;
                v162 = v161 + 1;
                if ((unint64_t)(v161 + 1) >> 60)
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                v163 = v157 - v160;
                if (v163 >> 3 > v162)
                  v162 = v163 >> 3;
                if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0)
                  v164 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v164 = v162;
                *(_QWORD *)v561 = v83 + 3;
                if (v164)
                  v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(v83 + 3), v164);
                else
                  v165 = 0;
                v166 = (double *)&v165[16 * v161];
                __p[0] = v165;
                __p[1] = v166;
                v560[1] = &v165[16 * v164];
                *v166 = v62;
                *((_DWORD *)v166 + 2) = 0;
                *((_BYTE *)v166 + 12) = 1;
                v560[0] = v166 + 2;
                std::vector<turi::flexible_type>::__swap_out_circular_buffer((uint64_t *)v83 + 1, __p);
                v159 = (double *)v83[2];
                std::__split_buffer<turi::flexible_type>::~__split_buffer(__p);
              }
              else
              {
                *(double *)v158 = v62;
                *(_DWORD *)(v158 + 8) = 0;
                *(_BYTE *)(v158 + 12) = 1;
                v159 = (double *)(v158 + 16);
                v83[2] = v158 + 16;
              }
              goto LABEL_270;
            }
            if (v63 != 3)
              goto LABEL_207;
            v83 = *(unint64_t **)a3;
LABEL_198:
            v149 = v83[3];
            v150 = (double *)v83[2];
            if ((unint64_t)v150 < v149)
            {
LABEL_255:
              *v150 = v62;
              v188 = v150 + 1;
              v83[2] = (unint64_t)v188;
              v159 = v188;
              goto LABEL_270;
            }
            v151 = (double *)v83[1];
            v152 = v150 - v151;
            if ((unint64_t)(v152 + 1) >> 61)
LABEL_793:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v153 = v149 - (_QWORD)v151;
            v154 = (uint64_t)(v149 - (_QWORD)v151) >> 2;
            if (v154 <= v152 + 1)
              v154 = v152 + 1;
            if (v153 >= 0x7FFFFFFFFFFFFFF8)
              v155 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v155 = v154;
            if (v155)
            {
              v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v83 + 3), v155);
              v151 = (double *)v83[1];
              v150 = (double *)v83[2];
            }
            else
            {
              v156 = 0;
            }
            v167 = (double *)&v156[8 * v152];
            *v167 = v62;
            v159 = v167 + 1;
            while (v150 != v151)
            {
              v168 = *((_QWORD *)v150-- - 1);
              *((_QWORD *)v167-- - 1) = v168;
            }
            break;
          default:
            goto LABEL_195;
        }
      }
      else
      {
        v53 = *(_QWORD *)(*(_QWORD *)v4 + 8) + 16 * i;
        v54 = *((unsigned __int8 *)a3 + 12);
        switch(*((_BYTE *)a3 + 12))
        {
          case 2:
            v55 = *(_QWORD *)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v56 = (_QWORD *)operator new();
            v57 = *(_QWORD *)a3;
            *v56 = **(_QWORD **)a3;
            v58 = (std::string *)(v56 + 1);
            if (*(char *)(v57 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)(v57 + 8), *(_QWORD *)(v57 + 16));
            }
            else
            {
              v59 = *(_OWORD *)(v57 + 8);
              v56[3] = *(_QWORD *)(v57 + 24);
              *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
            }
            *(_QWORD *)a3 = v56;
            *v56 = 1;
            do
            {
              v137 = __ldaxr((unint64_t *)v55);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, (unint64_t *)v55));
            if (v138)
              goto LABEL_168;
            if (*(char *)(v55 + 31) < 0)
              operator delete(*(void **)(v55 + 8));
            v81 = (unint64_t *)v55;
            v89 = 0x1012C404EF22A49;
            goto LABEL_167;
          case 3:
            v83 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_172;
            v84 = (_QWORD *)operator new();
            v85 = *(_QWORD *)a3;
            *v84 = **(_QWORD **)a3;
            v84[2] = 0;
            v84[3] = 0;
            v84[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v84 + 1, *(const void **)(v85 + 8), *(_QWORD *)(v85 + 16), (uint64_t)(*(_QWORD *)(v85 + 16) - *(_QWORD *)(v85 + 8)) >> 3);
            *(_QWORD *)a3 = v84;
            *v84 = 1;
            do
            {
              v86 = __ldaxr(v83);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v83));
            if (v87)
              goto LABEL_168;
            v88 = (void *)v83[1];
            if (v88)
            {
              v83[2] = (unint64_t)v88;
              operator delete(v88);
            }
            v81 = v83;
            v89 = 0x1080C409938AC02;
            goto LABEL_167;
          case 4:
            v69 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_175;
            v70 = (_QWORD *)operator new();
            v71 = *(_QWORD *)a3;
            *v70 = **(_QWORD **)a3;
            v70[2] = 0;
            v70[3] = 0;
            v70[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v70 + 1, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 4);
            *(_QWORD *)a3 = v70;
            *v70 = 1;
            do
            {
              v72 = __ldaxr(v69);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v69));
            if (v73)
              goto LABEL_168;
            __p[0] = v69 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_114;
          case 5:
            v69 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v90 = (_QWORD *)operator new();
            v91 = *(_QWORD *)a3;
            *v90 = **(_QWORD **)a3;
            v90[2] = 0;
            v90[3] = 0;
            v90[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v90 + 1, *(uint64_t **)(v91 + 8), *(uint64_t **)(v91 + 16), (uint64_t)(*(_QWORD *)(v91 + 16) - *(_QWORD *)(v91 + 8)) >> 5);
            *(_QWORD *)a3 = v90;
            *v90 = 1;
            do
            {
              v92 = __ldaxr(v69);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v69));
            if (v93)
              goto LABEL_168;
            __p[0] = v69 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_114:
            v81 = v69;
            v89 = 0x1020C405E66F15BLL;
            goto LABEL_167;
          case 8:
            v94 = *(_QWORD *)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v95 = operator new();
            v96 = *(_QWORD *)a3;
            *(_QWORD *)v95 = **(_QWORD **)a3;
            *(_QWORD *)(v95 + 8) = *(_QWORD *)(v96 + 8);
            v97 = *(_QWORD *)(v96 + 16);
            *(_QWORD *)(v95 + 16) = v97;
            if (v97)
            {
              v98 = (unsigned int *)(v97 + 8);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            v100 = *(_OWORD *)(v96 + 24);
            v101 = *(_OWORD *)(v96 + 40);
            *(_OWORD *)(v95 + 56) = *(_OWORD *)(v96 + 56);
            *(_OWORD *)(v95 + 40) = v101;
            *(_OWORD *)(v95 + 24) = v100;
            *(_QWORD *)a3 = v95;
            *(_QWORD *)v95 = 1;
            do
            {
              v102 = __ldaxr((unint64_t *)v94);
              v103 = v102 - 1;
            }
            while (__stlxr(v103, (unint64_t *)v94));
            if (v103)
              goto LABEL_168;
            boost::detail::shared_count::~shared_count((unsigned int **)(v94 + 16));
            v81 = (unint64_t *)v94;
            v82 = -235920773;
            goto LABEL_123;
          case 9:
            v74 = *(unint64_t **)a3;
            if (**(_QWORD **)a3 == 1)
              goto LABEL_207;
            v75 = (_QWORD *)operator new();
            v76 = *(_QWORD *)a3 + 8;
            *v75 = **(_QWORD **)a3;
            turi::flexible_type_impl::ndarray<double>::ndarray(v75 + 1, v76);
            *(_QWORD *)a3 = v75;
            *v75 = 1;
            do
            {
              v77 = __ldaxr(v74);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v74));
            if (v78)
              goto LABEL_168;
            v79 = (void *)v74[6];
            if (v79)
            {
              v74[7] = (unint64_t)v79;
              operator delete(v79);
            }
            v80 = (void *)v74[3];
            if (v80)
            {
              v74[4] = (unint64_t)v80;
              operator delete(v80);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v74 + 1));
            v81 = v74;
            v82 = 2071181815;
LABEL_123:
            v89 = v82 | 0x1030C4000000000;
LABEL_167:
            MEMORY[0x219A19A08](v81, v89);
LABEL_168:
            v54 = *((unsigned __int8 *)a3 + 12);
LABEL_169:
            if (v54 == 4)
            {
              v69 = *(unint64_t **)a3;
LABEL_175:
              v139 = v69[2];
              if (v139 >= v69[3])
              {
                v146 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)v69 + 1, (char *)v53);
              }
              else
              {
                *(_QWORD *)v139 = 0;
                *(_DWORD *)(v139 + 8) = 0;
                *(_BYTE *)(v139 + 12) = 0;
                if (v139 != v53)
                {
                  v140 = *(double *)v53;
                  *(_QWORD *)(v139 + 5) = *(_QWORD *)(v53 + 5);
                  *(double *)v139 = v140;
                  LODWORD(v140) = *(unsigned __int8 *)(v53 + 12);
                  *(_BYTE *)(v139 + 12) = LOBYTE(v140);
                  v141 = LODWORD(v140) > 9;
                  v142 = (1 << SLOBYTE(v140)) & 0x33C;
                  if (!v141 && v142 != 0)
                  {
                    v144 = *(unint64_t **)v139;
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 + 1, v144));
                  }
                }
                v146 = v139 + 16;
                v69[2] = v139 + 16;
              }
              v69[2] = v146;
              continue;
            }
            if (v54 != 3)
            {
LABEL_207:
              turi::flexible_type_fail(0);
              continue;
            }
            v83 = *(unint64_t **)a3;
LABEL_172:
            v62 = 0.0;
            switch(*(_BYTE *)(v53 + 12))
            {
              case 0:
                v62 = (double)*(uint64_t *)v53;
                goto LABEL_254;
              case 1:
                v62 = *(double *)v53;
                goto LABEL_254;
              case 2:
                v173 = *(double *)v53;
                v174 = (char **)(*(_QWORD *)v53 + 8);
                __idx = 0;
                v175 = (char *)v174;
                if (*(char *)(*(_QWORD *)&v173 + 31) < 0)
                  v175 = *v174;
                std::string::basic_string[abi:ne180100]<0>(__p, v175);
                v176 = std::stod((const std::string *)__p, &__idx);
                if (SHIBYTE(v560[0]) < 0)
                  operator delete(__p[0]);
                if (*(char *)(*(_QWORD *)&v173 + 31) < 0)
                  v177 = *(_QWORD *)(*(_QWORD *)&v173 + 16);
                else
                  v177 = *(unsigned __int8 *)(*(_QWORD *)&v173 + 31);
                if (__idx != v177)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v557 = std::string::append(&v570, " cannot be interpreted as a float");
                  v558 = *(_OWORD *)&v557->__r_.__value_.__l.__data_;
                  v560[0] = (void *)v557->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = v558;
                  v557->__r_.__value_.__l.__size_ = 0;
                  v557->__r_.__value_.__r.__words[2] = 0;
                  v557->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, (const std::string *)__p);
                  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                v186 = v176;
                v62 = v186;
                goto LABEL_254;
              case 3:
                v169 = *(double *)v53;
                __p[1] = 0;
                v560[0] = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v169 + 8), *(_QWORD *)(*(_QWORD *)&v169 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v169 + 16) - *(_QWORD *)(*(_QWORD *)&v169 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_254;
              case 4:
                v178 = *(double *)v53;
                __p[1] = 0;
                v560[0] = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v178 + 8), *(uint64_t **)(*(_QWORD *)&v178 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v178 + 16) - *(_QWORD *)(*(_QWORD *)&v178 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v570.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v570);
                goto LABEL_254;
              case 5:
                v179 = *(double *)v53;
                __p[1] = 0;
                v560[0] = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v179 + 8), *(uint64_t **)(*(_QWORD *)&v179 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v179 + 16) - *(_QWORD *)(*(_QWORD *)&v179 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v570.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v570);
                goto LABEL_254;
              case 6:
                v62 = (double)*(int *)(v53 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v53 << 8) >> 8);
                goto LABEL_254;
              case 7:
                goto LABEL_254;
              case 8:
                v180 = *(double *)v53;
                v181 = *(_QWORD *)(*(_QWORD *)v53 + 16);
                *(_QWORD *)&v566 = *(_QWORD *)(*(_QWORD *)v53 + 8);
                *((_QWORD *)&v566 + 1) = v181;
                if (v181)
                {
                  v182 = (unsigned int *)(v181 + 8);
                  do
                    v183 = __ldxr(v182);
                  while (__stxr(v183 + 1, v182));
                }
                v184 = *(_OWORD *)(*(_QWORD *)&v180 + 24);
                v185 = *(_OWORD *)(*(_QWORD *)&v180 + 56);
                v568 = *(_OWORD *)(*(_QWORD *)&v180 + 40);
                v569 = v185;
                v567 = v184;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((unsigned int **)&v566 + 1);
                goto LABEL_254;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v53 + 8);
                turi::flexible_type_fail(0);
                if (*(_QWORD *)&v561[8])
                {
                  *(_QWORD *)&v561[16] = *(_QWORD *)&v561[8];
                  operator delete(*(void **)&v561[8]);
                }
                if (v560[0])
                {
                  v560[1] = v560[0];
                  operator delete(v560[0]);
                }
                v170 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v171 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
LABEL_254:
                v187 = v83[3];
                v150 = (double *)v83[2];
                if ((unint64_t)v150 < v187)
                  goto LABEL_255;
                v151 = (double *)v83[1];
                v189 = v150 - v151;
                if ((unint64_t)(v189 + 1) >> 61)
                  goto LABEL_793;
                v190 = v187 - (_QWORD)v151;
                v191 = (uint64_t)(v187 - (_QWORD)v151) >> 2;
                if (v191 <= v189 + 1)
                  v191 = v189 + 1;
                if (v190 >= 0x7FFFFFFFFFFFFFF8)
                  v155 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v155 = v191;
                if (v155)
                {
                  v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v83 + 3), v155);
                  v151 = (double *)v83[1];
                  v150 = (double *)v83[2];
                }
                else
                {
                  v156 = 0;
                }
                v167 = (double *)&v156[8 * v189];
                *v167 = v62;
                v159 = v167 + 1;
                while (v150 != v151)
                {
                  v192 = *((_QWORD *)v150-- - 1);
                  *((_QWORD *)v167-- - 1) = v192;
                }
                break;
              default:
                goto LABEL_790;
            }
            break;
          default:
            goto LABEL_169;
        }
      }
      v83[1] = (unint64_t)v167;
      v83[2] = (unint64_t)v159;
      v83[3] = (unint64_t)&v156[8 * v155];
      if (v151)
        operator delete(v151);
LABEL_270:
      v83[2] = (unint64_t)v159;
    }
  }
}

void sub_2181FA63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  unint64_t **v16;
  uint64_t v17;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;

  v19 = *(void **)(v17 - 224);
  if (v19)
  {
    *(_QWORD *)(v17 - 216) = v19;
    operator delete(v19);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&__p);
  switch(*(_BYTE *)(v17 - 116))
  {
    case 2:
      v20 = *(unint64_t **)(v17 - 128);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        break;
      v23 = *(_QWORD *)(v17 - 128);
      if (!v23)
        break;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      v34 = *(unint64_t **)(v17 - 128);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        break;
      v37 = *(_QWORD **)(v17 - 128);
      if (!v37)
        break;
      v38 = (void *)v37[1];
      if (v38)
      {
        v37[2] = v38;
        operator delete(v38);
      }
      v24 = v37;
      v25 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      v26 = *(unint64_t **)(v17 - 128);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        break;
      v29 = *(_QWORD **)(v17 - 128);
      if (!v29)
        break;
      *(_QWORD *)(v17 - 136) = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 5:
      v39 = *(unint64_t **)(v17 - 128);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        break;
      v42 = *(_QWORD *)(v17 - 128);
      if (!v42)
        goto LABEL_40;
      *(_QWORD *)(v17 - 136) = v42 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 136));
      v43 = v42;
      v44 = 0x1020C405E66F15BLL;
      goto LABEL_39;
    case 8:
      v45 = *(unint64_t **)(v17 - 128);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        break;
      v48 = *(_QWORD *)(v17 - 128);
      if (!v48)
        goto LABEL_40;
      boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
      v43 = v48;
      v44 = 0x1030C40F1F0227BLL;
LABEL_39:
      MEMORY[0x219A19A08](v43, v44);
LABEL_40:
      *(_QWORD *)(v17 - 128) = 0;
      break;
    case 9:
      v30 = *(unint64_t **)(v17 - 128);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        break;
      v33 = *(_QWORD **)(v17 - 128);
      if (!v33)
        break;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v25 = 0x1030C407B73B9F7;
LABEL_28:
      MEMORY[0x219A19A08](v24, v25);
      break;
    default:
      break;
  }
  switch(*((_BYTE *)v16 + 12))
  {
    case 2:
      v49 = *v16;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_80;
      v52 = *v16;
      if (!*v16)
        goto LABEL_79;
      if (*((char *)v52 + 31) < 0)
        operator delete((void *)v52[1]);
      v53 = v52;
      v54 = 0x1012C404EF22A49;
      goto LABEL_78;
    case 3:
      v63 = *v16;
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (v65)
        goto LABEL_80;
      v66 = *v16;
      if (!*v16)
        goto LABEL_79;
      v67 = (void *)v66[1];
      if (v67)
      {
        v66[2] = (unint64_t)v67;
        operator delete(v67);
      }
      v53 = v66;
      v54 = 0x1080C409938AC02;
      goto LABEL_78;
    case 4:
      v55 = *v16;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
        goto LABEL_80;
      v58 = *v16;
      if (!*v16)
        goto LABEL_79;
      *(_QWORD *)(v17 - 128) = v58 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
      goto LABEL_71;
    case 5:
      v68 = *v16;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_80;
      v58 = *v16;
      if (!*v16)
        goto LABEL_79;
      *(_QWORD *)(v17 - 128) = v58 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 128));
LABEL_71:
      v53 = v58;
      v54 = 0x1020C405E66F15BLL;
      goto LABEL_78;
    case 8:
      v71 = *v16;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (v73)
        goto LABEL_80;
      v74 = *v16;
      if (!*v16)
        goto LABEL_79;
      boost::detail::shared_count::~shared_count((unsigned int **)v74 + 2);
      v53 = v74;
      v62 = -235920773;
      goto LABEL_77;
    case 9:
      v59 = *v16;
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_80;
      if (!*v16)
        goto LABEL_79;
      v53 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v16);
      v62 = 2071181815;
LABEL_77:
      v54 = v62 | 0x1030C4000000000;
LABEL_78:
      MEMORY[0x219A19A08](v53, v54);
LABEL_79:
      *v16 = 0;
LABEL_80:
      *v16 = 0;
      *((_DWORD *)v16 + 2) = 0;
      *((_BYTE *)v16 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_80;
  }
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D931A90;
  return result;
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D931A90;
}

void std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;
  double v4;

  v2 = 1;
  switch(a1[12])
  {
    case 0:
      v4 = *(double *)a1;
      goto LABEL_9;
    case 1:
      v3 = *(double *)a1 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        v4 = *(double *)(*(_QWORD *)a1 + 16);
      else
        *(_QWORD *)&v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
LABEL_9:
      v3 = *(_QWORD *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 8) == *(_QWORD *)(*(_QWORD *)a1 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 64) == 3;
LABEL_10:
      v2 = v3;
LABEL_13:
      *(_BYTE *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 8) = 0;
      *(_QWORD *)a2 = v2 ^ 1u;
      return;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

uint64_t std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2,std::allocator<turi::unity_sarray::logical_filter(std::shared_ptr<turi::unity_sarray_base>)::$_2>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::swap(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2181FB018(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D931B10;
  return result;
}

void std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D931B10;
}

uint64_t std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::operator()(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(a3, a4, a1);
}

uint64_t std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>,std::allocator<std::less<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target_type()
{
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(uint64_t a1, uint64_t a2, __n128 a3)
{
  BOOL v3;
  uint64_t result;
  double *v5;
  double *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  double v12;
  double v13;
  BOOL v14;
  uint64_t v15;
  char v16;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
          v3 = *(_QWORD *)a1 < *(_QWORD *)a2;
          goto LABEL_26;
        case 1:
          v12 = *(double *)a1;
          v13 = (double)*(uint64_t *)a2;
          goto LABEL_36;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v11 = *(_QWORD *)a2 <= (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          return !v11;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
          v11 = *(double *)a2 <= (double)*(uint64_t *)a1;
          return !v11;
        case 1:
          v12 = *(double *)a1;
          v13 = *(double *)a2;
LABEL_36:
          v14 = v12 < v13;
          goto LABEL_38;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v14 = (double)*(int *)(a1 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8) < *(double *)a2;
LABEL_38:
          result = v14;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 2:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 2:
          return std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)a1 + 8), (_BYTE *)(*(_QWORD *)a2 + 8)) >> 31;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 3:
          v5 = *(double **)(*(_QWORD *)a1 + 8);
          v6 = *(double **)(*(_QWORD *)a2 + 8);
          v7 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v6) >> 3;
          v8 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v5) >> 3;
          if (*(double **)(*(_QWORD *)a1 + 16) == v5)
            return v8 < v7;
          if (v8 <= 1)
            v9 = 1;
          else
            v9 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v5) >> 3;
          v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v6) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 4:
          return turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v16, (uint64_t *)(*(_QWORD *)a1 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 6:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
          v3 = *(_QWORD *)a1 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
          goto LABEL_26;
        case 1:
          v11 = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) <= *(double *)a1;
          return !v11;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v15 = (uint64_t)(*(_QWORD *)a1 << 8) >> 8;
          if (v15 < (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            return 1;
          if (v15 != (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
            return 0;
          v3 = *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
LABEL_26:
          result = v3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 7:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 8:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 9:
      switch(*(_BYTE *)(a1 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::apply_binary_op_ff();
      }
LABEL_30:
      turi::flexible_type_fail(0);
      return 0;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (!v10 || *v5 > *v6)
      return 0;
    if (*v5 < *v6)
      break;
    --v10;
    ++v5;
    ++v6;
    if (!--v9)
      return v8 < v7;
  }
  return 1;
}

void std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24D931BB8;
  return result;
}

void std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24D931BB8;
}

uint64_t std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::operator()(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator<(a3, a4, a1) ^ 1;
}

uint64_t std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_0>,BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>::target_type()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::vector<boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  void **v10;

  v1 = *a1;
  v2 = (void **)**a1;
  if (!v2)
    return;
  v4 = (void **)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_11;
  v6 = v4 - 3;
  do
  {
    v7 = v6 - 4;
    v10 = v6;
    std::vector<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::allocator<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type>>::__destroy_vector::operator()[abi:ne180100](&v10);
    v8 = (void **)*(v6 - 1);
    if (v6 - 4 == v8)
    {
      v8 = v6 - 4;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_9;
      v9 = 5;
    }
    (*((void (**)(void))*v8 + v9))();
LABEL_9:
    v6 -= 7;
  }
  while (v7 != v2);
  v5 = **a1;
LABEL_11:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::heap::detail::heap_base<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>,false,unsigned long,false> &,std::__wrap_iter<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[13];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    v9 = v4 >> 1;
    v10 = (uint64_t *)(v6 + 32 * (v4 >> 1));
    v11 = (uint64_t *)(a2 - 32);
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 48))(v7, v10, a2 - 32);
    if ((_DWORD)result)
    {
      v12 = *v11;
      *(_QWORD *)&v15[5] = *(uint64_t *)((char *)v11 + 5);
      *(_QWORD *)v15 = v12;
      v15[12] = *(_BYTE *)(a2 - 20);
      *(_BYTE *)(a2 - 20) = 0;
      v16 = *(_OWORD *)(a2 - 16);
      do
      {
        v13 = (uint64_t)v10;
        turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=((uint64_t)v11, v10);
        if (!v9)
          break;
        v14 = *(_QWORD *)(a3 + 24);
        if (!v14)
          std::__throw_bad_function_call[abi:ne180100]();
        v9 = (v9 - 1) >> 1;
        v10 = (uint64_t *)(v6 + 32 * v9);
        v11 = (uint64_t *)v13;
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v14 + 48))(v14, v10, v15) & 1) != 0);
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(v13, (uint64_t *)v15);
      return turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v15);
    }
  }
  return result;
}

void sub_2181FB730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void **v35;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 12))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v35);
          goto LABEL_27;
        }
        break;
      case 5:
        v19 = *(unint64_t **)a1;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          v35 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v35);
LABEL_27:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[6];
            if (v31)
            {
              v30[7] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[3];
            if (v32)
            {
              v30[4] = (unint64_t)v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v8, v9);
          }
LABEL_44:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v33 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1::operator()(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v20[13];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];
  _QWORD v24[2];
  _BYTE v25[13];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)**a1 + 32))(v24);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)**a1 + 40))(v23, **a1, a2);
  v4 = 0;
  while (v24[0] != v23[0] || v24[1] != v23[1] || v26 != v23[4])
  {
    if (v25[12] != 7)
    {
      if (v25[12] == 1)
      {
        v5 = (_QWORD *)(*a1[1] + 56 * a2);
        *(_QWORD *)&v20[5] = *(_QWORD *)&v25[5];
        *(_QWORD *)v20 = *(_QWORD *)v25;
        v20[12] = 1;
      }
      else
      {
        v5 = (_QWORD *)(*a1[1] + 56 * a2);
        *(_QWORD *)&v20[5] = *(_QWORD *)&v25[5];
        *(_QWORD *)v20 = *(_QWORD *)v25;
        v20[12] = v25[12];
        switch(v25[12])
        {
          case 2:
            v7 = *(unint64_t **)v20;
            do
              v8 = __ldaxr(v7);
            while (__stlxr(v8 + 1, v7));
            break;
          case 3:
            v9 = *(unint64_t **)v20;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
            break;
          case 4:
            v11 = *(unint64_t **)v20;
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 + 1, v11));
            break;
          case 5:
            v13 = *(unint64_t **)v20;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
            break;
          case 8:
            v15 = *(unint64_t **)v20;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
            break;
          case 9:
            v17 = *(unint64_t **)v20;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
            break;
          default:
            break;
        }
      }
      v21 = a2;
      v22 = v4;
      boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::push(v5, (uint64_t)v20);
      turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type::~pqueue_value_type((uint64_t)v20);
      v6 = *a1[1];
      if (*a1[2] < (unint64_t)((uint64_t)(*(_QWORD *)(v6 + 56 * a2 + 40) - *(_QWORD *)(v6 + 56 * a2 + 32)) >> 5))
        boost::heap::priority_queue<turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type,boost::heap::compare<std::function<BOOL ()(turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&,turi::unity_sarray::topk_index(unsigned long,BOOL)::pqueue_value_type const&)>>,boost::parameter::void_,boost::parameter::void_,boost::parameter::void_>::pop(v6 + 56 * a2);
    }
    ++v4;
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v24);
  }
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v23);
  return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v24);
}

void sub_2181FBBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1 < *(_QWORD *)(result + 16))
  {
    v2 = result;
    do
      result = turi::unity_sarray::topk_index(unsigned long,BOOL)::$_1::operator()(*(_QWORD ***)v2, v1++);
    while (v1 < *(_QWORD *)(v2 + 16));
  }
  return result;
}

_QWORD *turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *result;
  uint64_t v100;
  void **v101;
  _QWORD v102[2];
  _QWORD v103[3];
  _QWORD *v104;
  _BYTE v105[24];
  _BYTE *v106;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(***(_QWORD ***)a1 + 32))(v103);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8), a2);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * a2);
      if (v5 >= (*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24 * a2 + 8) - v7) >> 3)
        break;
      if (*(_QWORD *)(v7 + 8 * v5) == v6)
      {
        BYTE4(v102[1]) = 0;
        LODWORD(v102[1]) = 0;
        v102[0] = 1;
        if (!v106)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v106 + 48))(v106, v102);
        switch(BYTE4(v102[1]))
        {
          case 2:
            v8 = (unint64_t *)v102[0];
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              v11 = v102[0];
              if (v102[0])
              {
                if (*(char *)(v102[0] + 31) < 0)
                  operator delete(*(void **)(v102[0] + 8));
                v12 = v11;
                v13 = 0x1012C404EF22A49;
                goto LABEL_83;
              }
            }
            break;
          case 3:
            v42 = (unint64_t *)v102[0];
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v45 = v102[0];
              if (v102[0])
              {
                v46 = *(void **)(v102[0] + 8);
                if (v46)
                {
                  *(_QWORD *)(v102[0] + 16) = v46;
                  operator delete(v46);
                }
                v12 = v45;
                v13 = 0x1080C409938AC02;
                goto LABEL_83;
              }
            }
            break;
          case 4:
            v20 = (unint64_t *)v102[0];
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v23 = v102[0];
              if (v102[0])
              {
                v101 = (void **)(v102[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
                goto LABEL_70;
              }
            }
            break;
          case 5:
            v52 = (unint64_t *)v102[0];
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v23 = v102[0];
              if (v102[0])
              {
                v101 = (void **)(v102[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_70:
                v12 = v23;
                v13 = 0x1020C405E66F15BLL;
                goto LABEL_83;
              }
            }
            break;
          case 8:
            v58 = (unint64_t *)v102[0];
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              v61 = v102[0];
              if (v102[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v102[0] + 16));
                v12 = v61;
                v34 = -235920773;
                goto LABEL_82;
              }
            }
            break;
          case 9:
            v28 = (unint64_t *)v102[0];
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = v102[0];
              if (v102[0])
              {
                v32 = *(void **)(v102[0] + 48);
                if (v32)
                {
                  *(_QWORD *)(v102[0] + 56) = v32;
                  operator delete(v32);
                }
                v33 = *(void **)(v31 + 24);
                if (v33)
                {
                  *(_QWORD *)(v31 + 32) = v33;
                  operator delete(v33);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31 + 8);
                v12 = v31;
                v34 = 2071181815;
LABEL_82:
                v13 = v34 | 0x1030C4000000000;
LABEL_83:
                MEMORY[0x219A19A08](v12, v13);
              }
            }
            break;
          default:
            break;
        }
        ++v5;
      }
      else
      {
        memset(v102, 0, 13);
        if (!v106)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v106 + 48))(v106, v102);
        switch(BYTE4(v102[1]))
        {
          case 2:
            v14 = (unint64_t *)v102[0];
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = v102[0];
              if (v102[0])
              {
                if (*(char *)(v102[0] + 31) < 0)
                  operator delete(*(void **)(v102[0] + 8));
                v18 = v17;
                v19 = 0x1012C404EF22A49;
                goto LABEL_91;
              }
            }
            break;
          case 3:
            v47 = (unint64_t *)v102[0];
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = v102[0];
              if (v102[0])
              {
                v51 = *(void **)(v102[0] + 8);
                if (v51)
                {
                  *(_QWORD *)(v102[0] + 16) = v51;
                  operator delete(v51);
                }
                v18 = v50;
                v19 = 0x1080C409938AC02;
                goto LABEL_91;
              }
            }
            break;
          case 4:
            v24 = (unint64_t *)v102[0];
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v102[0];
              if (v102[0])
              {
                v101 = (void **)(v102[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
                goto LABEL_76;
              }
            }
            break;
          case 5:
            v55 = (unint64_t *)v102[0];
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              v27 = v102[0];
              if (v102[0])
              {
                v101 = (void **)(v102[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_76:
                v18 = v27;
                v19 = 0x1020C405E66F15BLL;
                goto LABEL_91;
              }
            }
            break;
          case 8:
            v62 = (unint64_t *)v102[0];
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              v65 = v102[0];
              if (v102[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v102[0] + 16));
                v18 = v65;
                v41 = -235920773;
                goto LABEL_90;
              }
            }
            break;
          case 9:
            v35 = (unint64_t *)v102[0];
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v38 = v102[0];
              if (v102[0])
              {
                v39 = *(void **)(v102[0] + 48);
                if (v39)
                {
                  *(_QWORD *)(v102[0] + 56) = v39;
                  operator delete(v39);
                }
                v40 = *(void **)(v38 + 24);
                if (v40)
                {
                  *(_QWORD *)(v38 + 32) = v40;
                  operator delete(v40);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v38 + 8);
                v18 = v38;
                v41 = 2071181815;
LABEL_90:
                v19 = v41 | 0x1030C4000000000;
LABEL_91:
                MEMORY[0x219A19A08](v18, v19);
              }
            }
            break;
          default:
            break;
        }
      }
      if (++v6 == v4)
        goto LABEL_140;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6 < v4)
  {
    do
    {
      memset(v102, 0, 13);
      if (!v106)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v106 + 48))(v106, v102);
      switch(BYTE4(v102[1]))
      {
        case 2:
          v66 = (unint64_t *)v102[0];
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v69 = v102[0];
            if (v102[0])
            {
              if (*(char *)(v102[0] + 31) < 0)
                operator delete(*(void **)(v102[0] + 8));
              v70 = v69;
              v71 = 0x1012C404EF22A49;
              goto LABEL_138;
            }
          }
          break;
        case 3:
          v83 = (unint64_t *)v102[0];
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = v102[0];
            if (v102[0])
            {
              v87 = *(void **)(v102[0] + 8);
              if (v87)
              {
                *(_QWORD *)(v102[0] + 16) = v87;
                operator delete(v87);
              }
              v70 = v86;
              v71 = 0x1080C409938AC02;
              goto LABEL_138;
            }
          }
          break;
        case 4:
          v72 = (unint64_t *)v102[0];
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = v102[0];
            if (v102[0])
            {
              v101 = (void **)(v102[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v101);
              goto LABEL_131;
            }
          }
          break;
        case 5:
          v88 = (unint64_t *)v102[0];
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (!v90)
          {
            v75 = v102[0];
            if (v102[0])
            {
              v101 = (void **)(v102[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v101);
LABEL_131:
              v70 = v75;
              v71 = 0x1020C405E66F15BLL;
              goto LABEL_138;
            }
          }
          break;
        case 8:
          v91 = (unint64_t *)v102[0];
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = v102[0];
            if (v102[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v102[0] + 16));
              v70 = v94;
              v82 = -235920773;
              goto LABEL_137;
            }
          }
          break;
        case 9:
          v76 = (unint64_t *)v102[0];
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            v79 = v102[0];
            if (v102[0])
            {
              v80 = *(void **)(v102[0] + 48);
              if (v80)
              {
                *(_QWORD *)(v102[0] + 56) = v80;
                operator delete(v80);
              }
              v81 = *(void **)(v79 + 24);
              if (v81)
              {
                *(_QWORD *)(v79 + 32) = v81;
                operator delete(v81);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v79 + 8);
              v70 = v79;
              v82 = 2071181815;
LABEL_137:
              v71 = v82 | 0x1030C4000000000;
LABEL_138:
              MEMORY[0x219A19A08](v70, v71);
            }
          }
          break;
        default:
          break;
      }
      ++v6;
    }
    while (v6 != v4);
  }
LABEL_140:
  v95 = v108;
  if (v108 == v107)
  {
    v96 = 4;
    v95 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_145;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_145:
  v97 = v106;
  if (v106 == v105)
  {
    v98 = 4;
    v97 = v105;
  }
  else
  {
    if (!v106)
      goto LABEL_150;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_150:
  result = v104;
  if (v104 == v103)
  {
    v100 = 4;
    result = v103;
  }
  else
  {
    if (!v104)
      return result;
    v100 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v100))();
}

void sub_2181FC470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_12unity_sarray10topk_indexEmbE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2>(unsigned long,unsigned long,turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::unity_sarray::topk_index(unsigned long,BOOL)::$_2::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::make_planner_node(uint64_t *a1@<X0>, uint64_t (***a2)(_QWORD)@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const void **v27[3];
  char v28[8];
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void **v32;
  char v33;
  int v34;
  _QWORD v35[2];
  const void *v36[2];
  char v37;
  uint64_t v38;
  std::string v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = (**a2)(a2);
  std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(&v30, v7);
  std::string::basic_string[abi:ne180100]<0>(&v39, "output_type");
  v42 = 0;
  v41 = 0;
  v40 = a3;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v28, &v39, 1);
  v8 = (_QWORD *)operator new();
  v10 = v30;
  v9 = v31;
  *v8 = &unk_24D92D710;
  v8[1] = v10;
  v8[2] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v26 = v8;
  std::pair<std::string const,turi::any>::pair[abi:ne180100]<char const(&)[7],turi::any,0>(v36, "aggregator", (uint64_t *)&v26);
  std::map<std::string,turi::any>::map[abi:ne180100]((uint64_t)v27, v36, 1);
  v14 = *a1;
  v13 = a1[1];
  v35[0] = v14;
  v35[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v32 = (void **)&v23;
  v33 = 0;
  v17 = operator new(0x10uLL);
  v23 = v17;
  v25 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)(v13 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v24 = v17 + 2;
  v34 = 13;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v34, (uint64_t)v28, v27, &v23, a4);
  v32 = (void **)&v23;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v35);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)v27, v27[1]);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v37 < 0)
    operator delete((void *)v36[0]);
  if (v26)
    (*(void (**)(_QWORD *))(*v26 + 8))(v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v28, v29);
  std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v39);
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_2181FCAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD *);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v7 - 128);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v11);
  std::pair<std::string const,turi::any>::~pair(v7 - 112);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 8))(a7);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v16);
  std::pair<std::string const,turi::flexible_type>::~pair(v7 - 80);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2181FCB78()
{
  JUMPOUT(0x2181FCB60);
}

void sub_2181FCB80()
{
  JUMPOUT(0x2181FCB68);
}

void sub_2181FCB88()
{
  JUMPOUT(0x2181FCB70);
}

_QWORD *turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::new_instance(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  *result = off_24D931C78;
  v3 = *(_QWORD *)(a1 + 16);
  result[2] = v3;
  result[3] = v3;
  return result;
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::add_element_simple(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 12) == 7)
    ++*(_QWORD *)(result + 24);
  return result;
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::emit@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 __p;
  char v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1, &__p);
  if (v5 < 0)
    operator delete((void *)__p);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v2;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_2181FCCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FCE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FCFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FD148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FD2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<unsigned long,turi::unity_sarray::num_missing(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FD448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::new_instance(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = operator new();
  *(_QWORD *)result = off_24D931D18;
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 12) = v3;
  *(_DWORD *)(result + 16) = v3;
  return result;
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::add_element_simple(uint64_t result, _BYTE *a2)
{
  int v2;
  BOOL v3;
  double v4;
  int v5;
  void *exception;

  v2 = 1;
  switch(a2[12])
  {
    case 0:
      v4 = *(double *)a2;
      goto LABEL_9;
    case 1:
      v3 = *(double *)a2 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        v4 = *(double *)(*(_QWORD *)a2 + 16);
      else
        *(_QWORD *)&v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
LABEL_9:
      v3 = *(_QWORD *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 64) == 3;
LABEL_10:
      v2 = v3;
LABEL_13:
      v5 = *(_DWORD *)(result + 16) & (v2 ^ 1);
      *(_DWORD *)(result + 16) = v5;
      if (!v5)
      {
        exception = __cxa_allocate_exception(1uLL);
      }
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::emit@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 __p;
  char v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1, &__p);
  if (v5 < 0)
    operator delete((void *)__p);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v2;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_2181FD6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FD834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FD9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FDB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FDCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::all(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FDE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::new_instance(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = operator new();
  *(_QWORD *)result = off_24D931DB8;
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(result + 12) = v3;
  *(_DWORD *)(result + 16) = v3;
  return result;
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::add_element_simple(uint64_t result, _BYTE *a2)
{
  int v2;
  BOOL v3;
  double v4;
  int v5;
  void *exception;

  v2 = 1;
  switch(a2[12])
  {
    case 0:
      v4 = *(double *)a2;
      goto LABEL_9;
    case 1:
      v3 = *(double *)a2 == 0.0;
      goto LABEL_10;
    case 2:
      if (*(char *)(*(_QWORD *)a2 + 31) < 0)
        v4 = *(double *)(*(_QWORD *)a2 + 16);
      else
        *(_QWORD *)&v4 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
LABEL_9:
      v3 = *(_QWORD *)&v4 == 0;
      goto LABEL_10;
    case 3:
    case 4:
    case 5:
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 16);
      goto LABEL_10;
    case 7:
      goto LABEL_13;
    case 8:
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 64) == 3;
LABEL_10:
      v2 = v3;
LABEL_13:
      v5 = *(_DWORD *)(result + 16) | v2 ^ 1;
      *(_DWORD *)(result + 16) = v5;
      if (v5 == 1)
      {
        exception = __cxa_allocate_exception(1uLL);
      }
      return result;
    default:
      turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::emit@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 __p;
  char v5;
  _QWORD v6[13];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  std::ostream::write();
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a1, &__p);
  if (v5 < 0)
    operator delete((void *)__p);
  v6[0] = *MEMORY[0x24BEDB7F0];
  v2 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[2] = v2;
  v6[3] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_2181FE0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FE224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FE3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FE524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FE6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<int,turi::unity_sarray::any(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FE824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t **v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)result = off_24D931E58;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  v3 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    v4 = *(unint64_t **)a3;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a3 + 5);
    *v3 = v4;
    v5 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 28) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v6 = *v3;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  *(_QWORD *)(result + 32) = 0;
  v8 = (unint64_t **)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  if (result + 32 != a3)
  {
    v9 = *(unint64_t **)a3;
    *(_QWORD *)(result + 37) = *(_QWORD *)(a3 + 5);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 44) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v8;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  return result;
}

uint64_t turi::unity_sarray::max(void)::$_0::operator()(uint64_t result, uint64_t a2, uint64_t a3, __n128 a4)
{
  unsigned int v4;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  unsigned int v17;
  unint64_t *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void **v66;

  v4 = *(unsigned __int8 *)(a2 + 12);
  if (v4 == 7)
    return result;
  v7 = *(unsigned __int8 *)(a3 + 12);
  if (v7 == 7)
  {
    v8 = *(uint64_t **)result;
    if (*(_QWORD *)result == a3)
    {
LABEL_53:
      if (v4 >= 0xA)
        turi::apply_binary_op_ff();
      return turi::flexible_type_fail(0);
    }
    v9 = *v8;
    *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v8 + 5);
    *(_QWORD *)a3 = v9;
    v7 = *((unsigned __int8 *)v8 + 12);
    *(_BYTE *)(a3 + 12) = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v11 = *(unint64_t **)a3;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      v7 = *(unsigned __int8 *)(a3 + 12);
    }
  }
  switch(v7)
  {
    case 0u:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          if (a2 == a3)
            return result;
          v13 = *(_QWORD *)a2;
          v14 = *(unint64_t **)a3;
          goto LABEL_64;
        case 1:
          if (a2 == a3)
            return result;
          a4.n128_u64[0] = *(_QWORD *)a2;
          v25 = (double)*(uint64_t *)a3;
          goto LABEL_68;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          if (a2 == a3)
            return result;
          v14 = *(unint64_t **)a3;
          v13 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
LABEL_64:
          if (v13 <= (uint64_t)v14)
            return result;
          goto LABEL_78;
        default:
          turi::apply_binary_op_ff();
      }
    case 1u:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          if (a2 == a3)
            return result;
          a4.n128_u64[0] = *(_QWORD *)a3;
          if (*(double *)a3 >= (double)*(uint64_t *)a2)
            return result;
          goto LABEL_78;
        case 1:
          if (a2 == a3)
            return result;
          a4.n128_u64[0] = *(_QWORD *)a2;
          v25 = *(double *)a3;
LABEL_68:
          if (a4.n128_f64[0] <= v25)
            return result;
          goto LABEL_78;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          if (a2 == a3)
            return result;
          a4.n128_f64[0] = (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          if (a4.n128_f64[0] <= *(double *)a3)
            return result;
          goto LABEL_78;
        default:
          turi::apply_binary_op_ff();
      }
    case 2u:
      v15 = *(unsigned __int8 *)(a2 + 12);
      if (v15 - 3 < 7 || v15 < 2)
        return turi::flexible_type_fail(0);
      if (v15 != 2)
        turi::apply_binary_op_ff();
      result = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_43;
    case 3u:
      v17 = *(unsigned __int8 *)(a2 + 12);
      if (v17 > 9)
        turi::apply_binary_op_ff();
      if (v17 != 3)
        return turi::flexible_type_fail(0);
      v18 = *(unint64_t **)(*(_QWORD *)a2 + 8);
      v19 = *(double **)(*(_QWORD *)a3 + 8);
      v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
      v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
      if (*(unint64_t **)(*(_QWORD *)a2 + 16) == v18)
        goto LABEL_37;
      if (v21 <= 1)
        v22 = 1;
      else
        v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v18) >> 3;
      v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
      break;
    case 4u:
      v24 = *(unsigned __int8 *)(a2 + 12);
      if (v24 > 9)
        turi::apply_binary_op_ff();
      if (v24 != 4)
        return turi::flexible_type_fail(0);
      result = turi::flexible_type_impl::gt_operator::operator()(a4, (uint64_t)&v66, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
LABEL_43:
      if (a2 == a3 || (result & 1) == 0)
        return result;
      goto LABEL_78;
    case 5u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
        turi::apply_binary_op_ff();
      return turi::flexible_type_fail(0);
    case 6u:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          if (a2 == a3 || (uint64_t)(*(_QWORD *)a3 << 8) >> 8 >= *(_QWORD *)a2)
            return result;
          goto LABEL_78;
        case 1:
          if (a2 == a3)
            return result;
          a4.n128_f64[0] = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
          if (a4.n128_f64[0] >= *(double *)a2)
            return result;
          goto LABEL_78;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          return turi::flexible_type_fail(0);
        case 6:
          v26 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
          if (v26 > (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
            goto LABEL_77;
          if (v26 != (uint64_t)(*(_QWORD *)a3 << 8) >> 8 || a2 == a3 || *(_DWORD *)(a2 + 8) <= *(_DWORD *)(a3 + 8))
            return result;
          goto LABEL_78;
        default:
          turi::apply_binary_op_ff();
      }
    case 7u:
      v4 = *(unsigned __int8 *)(a2 + 12);
      goto LABEL_53;
    case 8u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
        turi::apply_binary_op_ff();
      return turi::flexible_type_fail(0);
    case 9u:
      if (*(unsigned __int8 *)(a2 + 12) >= 0xAu)
        turi::apply_binary_op_ff();
      return turi::flexible_type_fail(0);
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (!v23 || (a4.n128_u64[0] = *v18, *(double *)v18 > *v19))
    {
LABEL_77:
      if (a2 == a3)
        return result;
      goto LABEL_78;
    }
    if (*(double *)v18 < *v19)
      return result;
    --v23;
    ++v19;
    ++v18;
    --v22;
  }
  while (v22);
LABEL_37:
  if (a2 == a3 || v21 <= v20)
    return result;
LABEL_78:
  switch(*(_BYTE *)(a3 + 12))
  {
    case 2:
      v27 = *(unint64_t **)a3;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_116;
        if (*((char *)v30 + 31) < 0)
          operator delete((void *)v30[1]);
        v31 = v30;
        v32 = 0x1012C404EF22A49;
        goto LABEL_115;
      }
      break;
    case 3:
      v33 = *(unint64_t **)a3;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(unint64_t **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_116;
        v37 = (void *)v36[1];
        if (v37)
        {
          v36[2] = (unint64_t)v37;
          operator delete(v37);
        }
        v31 = v36;
        v32 = 0x1080C409938AC02;
        goto LABEL_115;
      }
      break;
    case 4:
      v38 = *(unint64_t **)a3;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = *(unint64_t **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_116;
        v66 = (void **)(v41 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
        goto LABEL_103;
      }
      break;
    case 5:
      v42 = *(unint64_t **)a3;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v41 = *(unint64_t **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_116;
        v66 = (void **)(v41 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
LABEL_103:
        v31 = v41;
        v32 = 0x1020C405E66F15BLL;
        goto LABEL_115;
      }
      break;
    case 8:
      v45 = *(unint64_t **)a3;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = *(unint64_t **)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_116;
        boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
        v31 = v48;
        v49 = -235920773;
        goto LABEL_114;
      }
      break;
    case 9:
      v50 = *(unint64_t **)a3;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        result = *(_QWORD *)a3;
        if (*(_QWORD *)a3)
        {
          v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
          v49 = 2071181815;
LABEL_114:
          v32 = v49 | 0x1030C4000000000;
LABEL_115:
          result = MEMORY[0x219A19A08](v31, v32, a4);
        }
LABEL_116:
        *(_QWORD *)a3 = 0;
      }
      break;
    default:
      break;
  }
  v53 = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 5) = *(_QWORD *)(a2 + 5);
  *(_QWORD *)a3 = v53;
  LODWORD(v53) = *(unsigned __int8 *)(a2 + 12);
  *(_BYTE *)(a3 + 12) = v53;
  switch((int)v53)
  {
    case 2:
      v54 = *(unint64_t **)a3;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      break;
    case 3:
      v56 = *(unint64_t **)a3;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 + 1, v56));
      break;
    case 4:
      v58 = *(unint64_t **)a3;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
      break;
    case 5:
      v60 = *(unint64_t **)a3;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 + 1, v60));
      break;
    case 8:
      v62 = *(unint64_t **)a3;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
      break;
    case 9:
      v64 = *(unint64_t **)a3;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
      break;
    default:
      return result;
  }
  return result;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void **v61;

  *(_QWORD *)a1 = off_24D931E58;
  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v31 = *(unint64_t **)(a1 + 16);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(a1 + 16);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)(a1 + 16);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(_QWORD **)(a1 + 16);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)(a1 + 16);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)(a1 + 16);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)(a1 + 16);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(_QWORD *)(a1 + 16);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)(a1 + 16);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(a1 + 16);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::new_instance(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::generic_aggregator(v2, *(_QWORD *)(a1 + 8), a1 + 16);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::add_element_simple(uint64_t a1, uint64_t a2, __n128 a3)
{
  return turi::unity_sarray::max(void)::$_0::operator()(a1 + 8, a2, a1 + 32, a3);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v8, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_2181FF504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FF680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FF800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FF980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::max(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2181FFC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t **v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)result = off_24D931EF8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  v3 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a3)
  {
    v4 = *(unint64_t **)a3;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a3 + 5);
    *v3 = v4;
    v5 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 28) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v6 = *v3;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  *(_QWORD *)(result + 32) = 0;
  v8 = (unint64_t **)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  if (result + 32 != a3)
  {
    v9 = *(unint64_t **)a3;
    *(_QWORD *)(result + 37) = *(_QWORD *)(a3 + 5);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a3 + 12);
    *(_BYTE *)(result + 44) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v8;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  return result;
}

uint64_t turi::unity_sarray::min(void)::$_0::operator()(uint64_t result, uint64_t *a2, unsigned __int8 *a3, __n128 a4)
{
  unsigned int v4;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  unint64_t *v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void **v66;

  v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 != 7)
  {
    v7 = a3[12];
    if (v7 != 7)
    {
LABEL_11:
      switch(v7)
      {
        case 0u:
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3)
                return result;
              v13 = *a2;
              v14 = *(_QWORD *)a3;
              goto LABEL_65;
            case 1:
              if (a2 == (uint64_t *)a3)
                return result;
              a4.n128_u64[0] = *a2;
              v25 = (double)*(uint64_t *)a3;
              goto LABEL_69;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (a2 == (uint64_t *)a3)
                return result;
              v14 = *(_QWORD *)a3;
              v13 = *a2 << 8 >> 8;
LABEL_65:
              if (v13 >= v14)
                return result;
              goto LABEL_83;
            default:
              turi::apply_binary_op_ff();
          }
        case 1u:
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3)
                return result;
              a4.n128_u64[0] = *(_QWORD *)a3;
              if (*(double *)a3 <= (double)*a2)
                return result;
              goto LABEL_83;
            case 1:
              if (a2 == (uint64_t *)a3)
                return result;
              a4.n128_u64[0] = *a2;
              v25 = *(double *)a3;
LABEL_69:
              if (a4.n128_f64[0] >= v25)
                return result;
              goto LABEL_83;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (a2 == (uint64_t *)a3)
                return result;
              a4.n128_f64[0] = (double)*((int *)a2 + 2) / 1000000.0 + (double)(*a2 << 8 >> 8);
              if (a4.n128_f64[0] >= *(double *)a3)
                return result;
              goto LABEL_83;
            default:
              turi::apply_binary_op_ff();
          }
        case 2u:
          v15 = *((unsigned __int8 *)a2 + 12);
          if (v15 - 3 < 7 || v15 < 2)
            return turi::flexible_type_fail(0);
          if (v15 != 2)
            turi::apply_binary_op_ff();
          result = std::string::compare[abi:ne180100]((const void **)(*a2 + 8), (_BYTE *)(*(_QWORD *)a3 + 8));
          if (a2 == (uint64_t *)a3 || (result & 0x80000000) == 0)
            return result;
          goto LABEL_83;
        case 3u:
          v17 = *((unsigned __int8 *)a2 + 12);
          if (v17 > 9)
            turi::apply_binary_op_ff();
          if (v17 != 3)
            return turi::flexible_type_fail(0);
          v18 = *(unint64_t **)(*a2 + 8);
          v19 = *(double **)(*(_QWORD *)a3 + 8);
          v20 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
          v21 = (uint64_t)(*(_QWORD *)(*a2 + 16) - (_QWORD)v18) >> 3;
          if (*(unint64_t **)(*a2 + 16) == v18)
            goto LABEL_39;
          if (v21 <= 1)
            v22 = 1;
          else
            v22 = (uint64_t)(*(_QWORD *)(*a2 + 16) - (_QWORD)v18) >> 3;
          v23 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v19) >> 3;
          break;
        case 4u:
          v24 = *((unsigned __int8 *)a2 + 12);
          if (v24 > 9)
            turi::apply_binary_op_ff();
          if (v24 != 4)
            return turi::flexible_type_fail(0);
          result = turi::flexible_type_impl::lt_operator::operator()(a4, (uint64_t)&v66, (uint64_t *)(*a2 + 8), (_QWORD *)(*(_QWORD *)a3 + 8));
          if (a2 == (uint64_t *)a3 || (result & 1) == 0)
            return result;
          goto LABEL_83;
        case 5u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 6u:
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              if (a2 == (uint64_t *)a3 || (uint64_t)(*(_QWORD *)a3 << 8) >> 8 <= *a2)
                return result;
              goto LABEL_83;
            case 1:
              if (a2 == (uint64_t *)a3)
                return result;
              a4.n128_f64[0] = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
              if (a4.n128_f64[0] <= *(double *)a2)
                return result;
              goto LABEL_83;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              v26 = *a2 << 8 >> 8;
              if (v26 < (uint64_t)(*(_QWORD *)a3 << 8) >> 8)
                goto LABEL_78;
              if (v26 == (uint64_t)(*(_QWORD *)a3 << 8) >> 8
                && a2 != (uint64_t *)a3
                && *((_DWORD *)a2 + 2) < *((_DWORD *)a3 + 2))
              {
                goto LABEL_83;
              }
              return result;
            default:
              turi::apply_binary_op_ff();
          }
        case 7u:
          v4 = *((unsigned __int8 *)a2 + 12);
          goto LABEL_54;
        case 8u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        case 9u:
          if (*((unsigned __int8 *)a2 + 12) >= 0xAu)
            turi::apply_binary_op_ff();
          return turi::flexible_type_fail(0);
        default:
          turi::apply_binary_op_ff();
      }
      while (1)
      {
        if (!v23)
          return result;
        a4.n128_u64[0] = *v18;
        if (*(double *)v18 > *v19)
          return result;
        if (*(double *)v18 < *v19)
          break;
        --v23;
        ++v18;
        ++v19;
        if (!--v22)
        {
LABEL_39:
          if (a2 == (uint64_t *)a3 || v21 >= v20)
            return result;
          goto LABEL_83;
        }
      }
LABEL_78:
      if (a2 == (uint64_t *)a3)
        return result;
LABEL_83:
      switch(a3[12])
      {
        case 2u:
          v27 = *(unint64_t **)a3;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = *(_QWORD *)a3;
            if (!*(_QWORD *)a3)
              goto LABEL_121;
            if (*(char *)(v30 + 31) < 0)
              operator delete(*(void **)(v30 + 8));
            v31 = (_QWORD *)v30;
            v32 = 0x1012C404EF22A49;
            goto LABEL_120;
          }
          break;
        case 3u:
          v33 = *(unint64_t **)a3;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = *(_QWORD **)a3;
            if (!*(_QWORD *)a3)
              goto LABEL_121;
            v37 = (void *)v36[1];
            if (v37)
            {
              v36[2] = v37;
              operator delete(v37);
            }
            v31 = v36;
            v32 = 0x1080C409938AC02;
            goto LABEL_120;
          }
          break;
        case 4u:
          v38 = *(unint64_t **)a3;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = *(_QWORD *)a3;
            if (!*(_QWORD *)a3)
              goto LABEL_121;
            v66 = (void **)(v41 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v66);
            goto LABEL_108;
          }
          break;
        case 5u:
          v42 = *(unint64_t **)a3;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v41 = *(_QWORD *)a3;
            if (!*(_QWORD *)a3)
              goto LABEL_121;
            v66 = (void **)(v41 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v66);
LABEL_108:
            v31 = (_QWORD *)v41;
            v32 = 0x1020C405E66F15BLL;
            goto LABEL_120;
          }
          break;
        case 8u:
          v45 = *(unint64_t **)a3;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            v48 = *(_QWORD *)a3;
            if (!*(_QWORD *)a3)
              goto LABEL_121;
            boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
            v31 = (_QWORD *)v48;
            v49 = -235920773;
            goto LABEL_119;
          }
          break;
        case 9u:
          v50 = *(unint64_t **)a3;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            result = *(_QWORD *)a3;
            if (*(_QWORD *)a3)
            {
              v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)result);
              v49 = 2071181815;
LABEL_119:
              v32 = v49 | 0x1030C4000000000;
LABEL_120:
              result = MEMORY[0x219A19A08](v31, v32, a4);
            }
LABEL_121:
            *(_QWORD *)a3 = 0;
          }
          break;
        default:
          break;
      }
      v53 = *a2;
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)a3 = v53;
      LODWORD(v53) = *((unsigned __int8 *)a2 + 12);
      a3[12] = v53;
      switch((int)v53)
      {
        case 2:
          v54 = *(unint64_t **)a3;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
          break;
        case 3:
          v56 = *(unint64_t **)a3;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 + 1, v56));
          break;
        case 4:
          v58 = *(unint64_t **)a3;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 + 1, v58));
          break;
        case 5:
          v60 = *(unint64_t **)a3;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
          break;
        case 8:
          v62 = *(unint64_t **)a3;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
          break;
        case 9:
          v64 = *(unint64_t **)a3;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 + 1, v64));
          break;
        default:
          return result;
      }
      return result;
    }
    v8 = *(uint64_t **)result;
    if (*(unsigned __int8 **)result != a3)
    {
      v9 = *v8;
      *(_QWORD *)(a3 + 5) = *(uint64_t *)((char *)v8 + 5);
      *(_QWORD *)a3 = v9;
      v7 = *((unsigned __int8 *)v8 + 12);
      a3[12] = v7;
      if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
      {
        v11 = *(unint64_t **)a3;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v7 = a3[12];
      }
      goto LABEL_11;
    }
LABEL_54:
    if (v4 >= 0xA)
      turi::apply_binary_op_ff();
    return turi::flexible_type_fail(0);
  }
  return result;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void **v61;

  *(_QWORD *)a1 = off_24D931EF8;
  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v31 = *(unint64_t **)(a1 + 16);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(a1 + 16);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)(a1 + 16);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(_QWORD **)(a1 + 16);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)(a1 + 16);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)(a1 + 16);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)(a1 + 16);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(_QWORD *)(a1 + 16);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)(a1 + 16);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(a1 + 16);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::new_instance(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::generic_aggregator(v2, *(_QWORD *)(a1 + 8), a1 + 16);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::add_element_simple(uint64_t a1, uint64_t *a2, __n128 a3)
{
  return turi::unity_sarray::min(void)::$_0::operator()(a1 + 8, a2, (unsigned __int8 *)(a1 + 32), a3);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v8, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_21820096C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218200AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218200C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218200DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218200F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::min(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182010E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::generic_aggregator(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)result = off_24D931F98;
  *(_QWORD *)(result + 16) = 0;
  v2 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a2)
  {
    v3 = *(unint64_t **)a2;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a2 + 5);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(result + 28) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  *(_QWORD *)(result + 32) = 0;
  v9 = (unint64_t **)(result + 32);
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  if (result + 32 != a2)
  {
    v10 = *(unint64_t **)a2;
    *(_QWORD *)(result + 37) = *(_QWORD *)(a2 + 5);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(result + 44) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
    {
      v12 = *v9;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  return result;
}

void turi::unity_sarray::sum(void)::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  double v32;
  unint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  void **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  double *v77;
  uint64_t v78;
  double v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  BOOL v114;
  unint64_t *v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  void *v119;
  double *v120;
  uint64_t v121;
  unint64_t v122;
  double v123;
  double v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  double v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  double v169;
  unint64_t *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  double *v176;
  uint64_t v177;
  unint64_t v178;
  double *v179;
  double v180;
  _QWORD *v181;
  unint64_t v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  __int128 v190;
  __int128 v191;
  unint64_t v192;
  BOOL v193;
  unint64_t *v194;
  _QWORD *v195;
  unint64_t v196;
  BOOL v197;
  _QWORD *v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  __int128 v219;
  __int128 v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  _QWORD *v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  __int128 v235;
  __int128 v236;
  unint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  __int128 v253;
  __int128 v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  __int128 v277;
  __int128 v278;
  unint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _QWORD *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  unsigned int v290;
  __int128 v291;
  __int128 v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  void *v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int *v302;
  unsigned int v303;
  __int128 v304;
  __int128 v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  unint64_t v316;
  uint64_t v317;
  void **v318;
  void **v319;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v4 = *a2 + *(_QWORD *)a1;
          goto LABEL_16;
        case 1:
          v124 = *(double *)a2 + (double)*(uint64_t *)a1;
          goto LABEL_257;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v203 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v203, *a2);
          *a2 = (uint64_t)v203;
          *v203 = 1;
          do
          {
            v204 = __ldaxr((unint64_t *)v5);
            v8 = --v204 == 0;
          }
          while (__stlxr(v204, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v115 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v116 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v116, *a2);
            *a2 = (uint64_t)v116;
            *v116 = 1;
            do
            {
              v117 = __ldaxr(v115);
              v118 = v117 - 1;
            }
            while (__stlxr(v118, v115));
            if (!v118)
            {
              v119 = (void *)v115[1];
              if (v119)
              {
                v115[2] = (unint64_t)v119;
                operator delete(v119);
              }
              MEMORY[0x219A19A08](v115, 0x1080C409938AC02);
            }
          }
          v120 = *(double **)(*a2 + 8);
          v121 = *(_QWORD *)(*a2 + 16) - (_QWORD)v120;
          if (v121)
          {
            v122 = v121 >> 3;
            v123 = (double)*(uint64_t *)a1;
            if (v122 <= 1)
              v122 = 1;
            do
            {
              *v120 = *v120 + v123;
              ++v120;
              --v122;
            }
            while (v122);
          }
          return;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v246 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v246, *a2);
          *a2 = (uint64_t)v246;
          *v246 = 1;
          do
          {
            v247 = __ldaxr((unint64_t *)v111);
            v183 = --v247 == 0;
          }
          while (__stlxr(v247, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v260 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v260, *a2);
          *a2 = (uint64_t)v260;
          *v260 = 1;
          do
          {
            v261 = __ldaxr((unint64_t *)v111);
            v114 = --v261 == 0;
          }
          while (__stlxr(v261, (unint64_t *)v111));
          goto LABEL_322;
        case 6:
          *a2 = *a2 & 0xFF00000000000000 | (*a2 + *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_390;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v272 = operator new();
          v273 = *a2;
          *(_QWORD *)v272 = *(_QWORD *)*a2;
          *(_QWORD *)(v272 + 8) = *(_QWORD *)(v273 + 8);
          v274 = *(_QWORD *)(v273 + 16);
          *(_QWORD *)(v272 + 16) = v274;
          if (v274)
          {
            v275 = (unsigned int *)(v274 + 8);
            do
              v276 = __ldxr(v275);
            while (__stxr(v276 + 1, v275));
          }
          v277 = *(_OWORD *)(v273 + 24);
          v278 = *(_OWORD *)(v273 + 40);
          *(_OWORD *)(v272 + 56) = *(_OWORD *)(v273 + 56);
          *(_OWORD *)(v272 + 40) = v278;
          *(_OWORD *)(v272 + 24) = v277;
          *a2 = v272;
          *(_QWORD *)v272 = 1;
          do
          {
            v279 = __ldaxr((unint64_t *)v184);
            v193 = --v279 == 0;
          }
          while (__stlxr(v279, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v133 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v134 = (_QWORD *)operator new();
            v135 = *a2 + 8;
            *v134 = *(_QWORD *)*a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v134 + 1, v135);
            *a2 = (uint64_t)v134;
            *v134 = 1;
            do
            {
              v136 = __ldaxr(v133);
              v137 = v136 - 1;
            }
            while (__stlxr(v137, v133));
            if (!v137)
            {
              v138 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v133);
              MEMORY[0x219A19A08](v138, 0x1030C407B73B9F7);
            }
          }
          v139 = (uint64_t *)*a2;
          v141 = *(uint64_t **)(*a2 + 24);
          v140 = *(uint64_t **)(*a2 + 32);
          if (v140 == v141)
            return;
          if (!v139[1])
            return;
          v142 = (double)*(uint64_t *)a1;
          v143 = 1;
          do
          {
            v144 = *v141++;
            v143 *= v144;
          }
          while (v141 != v140);
          if (!v143)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v139 + 1);
          v145 = (v139[4] - v139[3]) >> 3;
          v317 = 0;
          std::vector<unsigned long>::vector(&v318, v145, &v317);
          v46 = v318;
          v146 = v319;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v147 = 0;
        v148 = (char *)v146 - (char *)v46;
        if (v148)
        {
          v149 = v148 >> 3;
          v150 = (uint64_t *)v139[6];
          if (v149 <= 1)
            v149 = 1;
          do
          {
            v152 = (uint64_t)*v46++;
            v151 = v152;
            v153 = *v150++;
            v147 += v153 * v151;
            --v149;
          }
          while (v149);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v139 + 1);
        *(double *)(*(_QWORD *)v139[1] + 8 * (v139[9] + v147)) = *(double *)(*(_QWORD *)v139[1] + 8 * (v139[9] + v147))
                                                               + v142;
        v46 = v318;
        v146 = v319;
        v154 = v319 - v318;
        v155 = v154 - 1;
        if ((char *)v319 - (char *)v318 < 1)
          goto LABEL_175;
        v156 = v139[3];
        v157 = (char *)v318[v155] + 1;
        v318[v155] = v157;
        if ((unint64_t)v157 < *(_QWORD *)(v156 + 8 * v155))
        {
LABEL_174:
          v154 = 1;
LABEL_175:
          if (v155 < 0 || !v154)
            goto LABEL_177;
          continue;
        }
        break;
      }
      v158 = (unint64_t *)&v46[v154 - 2];
      v159 = v156 - 16;
      while (1)
      {
        v160 = v154 - 1;
        v158[1] = 0;
        if (v154 - 1 <= 0)
          goto LABEL_178;
        v161 = *v158 + 1;
        *v158-- = v161;
        v162 = *(_QWORD *)(v159 + 8 * v154--);
        if (v161 < v162)
        {
          v155 = v160 - 1;
          goto LABEL_174;
        }
      }
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v4 = (uint64_t)(*(double *)a1 + (double)*a2);
LABEL_16:
          *a2 = v4;
          return;
        case 1:
          v124 = *(double *)a1 + *(double *)a2;
LABEL_257:
          *(double *)a2 = v124;
          return;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v163 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v163, *a2);
          *a2 = (uint64_t)v163;
          *v163 = 1;
          do
          {
            v164 = __ldaxr((unint64_t *)v5);
            v8 = --v164 == 0;
          }
          while (__stlxr(v164, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v72 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v73 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v73, *a2);
            *a2 = (uint64_t)v73;
            *v73 = 1;
            do
            {
              v74 = __ldaxr(v72);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v72));
            if (!v75)
            {
              v76 = (void *)v72[1];
              if (v76)
              {
                v72[2] = (unint64_t)v76;
                operator delete(v76);
              }
              MEMORY[0x219A19A08](v72, 0x1080C409938AC02);
            }
          }
          v77 = *(double **)(*a2 + 8);
          v78 = *(_QWORD *)(*a2 + 16) - (_QWORD)v77;
          if (v78)
          {
            v79 = *(double *)a1;
            v80 = v78 >> 3;
            if (v80 <= 1)
              v80 = 1;
            do
            {
              *v77 = v79 + *v77;
              ++v77;
              --v80;
            }
            while (v80);
          }
          return;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v226 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v226, *a2);
          *a2 = (uint64_t)v226;
          *v226 = 1;
          do
          {
            v227 = __ldaxr((unint64_t *)v111);
            v183 = --v227 == 0;
          }
          while (__stlxr(v227, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v228, *a2);
          *a2 = (uint64_t)v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr((unint64_t *)v111);
            v114 = --v229 == 0;
          }
          while (__stlxr(v229, (unint64_t *)v111));
          goto LABEL_322;
        case 6:
          v165 = (*(double *)a1 - (double)(uint64_t)floor(*(double *)a1)) * 1000000.0;
          v166 = *a2;
          v167 = *a2 + vcvtmd_s64_f64(*(double *)a1);
          *a2 = *a2 & 0xFF00000000000000 | v167 & 0xFFFFFFFFFFFFFFLL;
          v168 = (uint64_t)v165 + *((int *)a2 + 2);
          if (v168 >= 1000000)
          {
            *a2 = (v167 + 1) & 0xFFFFFFFFFFFFFFLL | v166 & 0xFF00000000000000;
            LODWORD(v168) = v168 - 1000000;
          }
          if (v168 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a2 + 2) = v168;
          return;
        case 7:
          goto LABEL_390;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v230 = operator new();
          v231 = *a2;
          *(_QWORD *)v230 = *(_QWORD *)*a2;
          *(_QWORD *)(v230 + 8) = *(_QWORD *)(v231 + 8);
          v232 = *(_QWORD *)(v231 + 16);
          *(_QWORD *)(v230 + 16) = v232;
          if (v232)
          {
            v233 = (unsigned int *)(v232 + 8);
            do
              v234 = __ldxr(v233);
            while (__stxr(v234 + 1, v233));
          }
          v235 = *(_OWORD *)(v231 + 24);
          v236 = *(_OWORD *)(v231 + 40);
          *(_OWORD *)(v230 + 56) = *(_OWORD *)(v231 + 56);
          *(_OWORD *)(v230 + 40) = v236;
          *(_OWORD *)(v230 + 24) = v235;
          *a2 = v230;
          *(_QWORD *)v230 = 1;
          do
          {
            v237 = __ldaxr((unint64_t *)v184);
            v193 = --v237 == 0;
          }
          while (__stlxr(v237, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v81 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v82 = (_QWORD *)operator new();
            v83 = *a2 + 8;
            *v82 = *(_QWORD *)*a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v82 + 1, v83);
            *a2 = (uint64_t)v82;
            *v82 = 1;
            do
            {
              v84 = __ldaxr(v81);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v81));
            if (!v85)
            {
              v86 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
              MEMORY[0x219A19A08](v86, 0x1030C407B73B9F7);
            }
          }
          v87 = (uint64_t *)*a2;
          v89 = *(uint64_t **)(*a2 + 24);
          v88 = *(uint64_t **)(*a2 + 32);
          if (v88 == v89)
            return;
          if (!v87[1])
            return;
          v90 = *(double *)a1;
          v91 = 1;
          do
          {
            v92 = *v89++;
            v91 *= v92;
          }
          while (v89 != v88);
          if (!v91)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v87 + 1);
          v93 = (v87[4] - v87[3]) >> 3;
          v317 = 0;
          std::vector<unsigned long>::vector(&v318, v93, &v317);
          v46 = v318;
          v94 = v319;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v95 = 0;
        v96 = (char *)v94 - (char *)v46;
        if (v96)
        {
          v97 = v96 >> 3;
          v98 = (uint64_t *)v87[6];
          if (v97 <= 1)
            v97 = 1;
          do
          {
            v100 = (uint64_t)*v46++;
            v99 = v100;
            v101 = *v98++;
            v95 += v101 * v99;
            --v97;
          }
          while (v97);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v87 + 1);
        *(double *)(*(_QWORD *)v87[1] + 8 * (v87[9] + v95)) = v90 + *(double *)(*(_QWORD *)v87[1] + 8 * (v87[9] + v95));
        v46 = v318;
        v94 = v319;
        v102 = v319 - v318;
        v103 = v102 - 1;
        if ((char *)v319 - (char *)v318 < 1)
          goto LABEL_121;
        v104 = v87[3];
        v105 = (char *)v318[v103] + 1;
        v318[v103] = v105;
        if ((unint64_t)v105 < *(_QWORD *)(v104 + 8 * v103))
        {
LABEL_120:
          v102 = 1;
LABEL_121:
          if (v103 < 0 || !v102)
            goto LABEL_177;
          continue;
        }
        break;
      }
      v106 = (unint64_t *)&v46[v102 - 2];
      v107 = v104 - 16;
      while (1)
      {
        v108 = v102 - 1;
        v106[1] = 0;
        if (v102 - 1 <= 0)
          goto LABEL_178;
        v109 = *v106 + 1;
        *v106-- = v109;
        v110 = *(_QWORD *)(v107 + 8 * v102--);
        if (v109 < v110)
        {
          v103 = v108 - 1;
          goto LABEL_120;
        }
      }
    case 2:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v11 = *(double *)a1;
          v12 = *a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v13 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v13, *a2);
            *a2 = (uint64_t)v13;
            *v13 = 1;
            do
            {
              v14 = __ldaxr((unint64_t *)v12);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, (unint64_t *)v12));
            if (!v15)
            {
              if (*(char *)(v12 + 31) < 0)
                operator delete(*(void **)(v12 + 8));
              MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
            }
          }
          v16 = *(char *)(*(_QWORD *)&v11 + 31);
          if (v16 >= 0)
            v17 = (const std::string::value_type *)(*(_QWORD *)&v11 + 8);
          else
            v17 = *(const std::string::value_type **)(*(_QWORD *)&v11 + 8);
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(*(_QWORD *)&v11 + 31);
          else
            v18 = *(_QWORD *)(*(_QWORD *)&v11 + 16);
          std::string::append((std::string *)(*a2 + 8), v17, v18);
          return;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v238 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v238, *a2);
          *a2 = (uint64_t)v238;
          *v238 = 1;
          do
          {
            v239 = __ldaxr(v194);
            v197 = --v239 == 0;
          }
          while (__stlxr(v239, v194));
          goto LABEL_354;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v244 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v244, *a2);
          *a2 = (uint64_t)v244;
          *v244 = 1;
          do
          {
            v245 = __ldaxr((unint64_t *)v111);
            v183 = --v245 == 0;
          }
          while (__stlxr(v245, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v198 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v198, *a2);
          *a2 = (uint64_t)v198;
          *v198 = 1;
          do
          {
            v199 = __ldaxr((unint64_t *)v111);
            v114 = --v199 == 0;
          }
          while (__stlxr(v199, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v248 = operator new();
          v249 = *a2;
          *(_QWORD *)v248 = *(_QWORD *)*a2;
          *(_QWORD *)(v248 + 8) = *(_QWORD *)(v249 + 8);
          v250 = *(_QWORD *)(v249 + 16);
          *(_QWORD *)(v248 + 16) = v250;
          if (v250)
          {
            v251 = (unsigned int *)(v250 + 8);
            do
              v252 = __ldxr(v251);
            while (__stxr(v252 + 1, v251));
          }
          v253 = *(_OWORD *)(v249 + 24);
          v254 = *(_OWORD *)(v249 + 40);
          *(_OWORD *)(v248 + 56) = *(_OWORD *)(v249 + 56);
          *(_OWORD *)(v248 + 40) = v254;
          *(_OWORD *)(v248 + 24) = v253;
          *a2 = v248;
          *(_QWORD *)v248 = 1;
          do
          {
            v255 = __ldaxr((unint64_t *)v184);
            v193 = --v255 == 0;
          }
          while (__stlxr(v255, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v125 = (_QWORD *)operator new();
          v126 = *a2 + 8;
          *v125 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v125 + 1, v126);
          *a2 = (uint64_t)v125;
          *v125 = 1;
          do
          {
            v127 = __ldaxr(v27);
            v31 = --v127 == 0;
          }
          while (__stlxr(v127, v27));
          goto LABEL_253;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v6 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v6, *a2);
          *a2 = (uint64_t)v6;
          *v6 = 1;
          do
          {
            v7 = __ldaxr((unint64_t *)v5);
            v8 = --v7 == 0;
          }
          while (__stlxr(v7, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v169 = *(double *)a1;
          v170 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v171 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v171, *a2);
            *a2 = (uint64_t)v171;
            *v171 = 1;
            do
            {
              v172 = __ldaxr(v170);
              v173 = v172 - 1;
            }
            while (__stlxr(v173, v170));
            if (!v173)
            {
              v174 = (void *)v170[1];
              if (v174)
              {
                v170[2] = (unint64_t)v174;
                operator delete(v174);
              }
              MEMORY[0x219A19A08](v170, 0x1080C409938AC02);
            }
          }
          v175 = *a2;
          turi::flexible_type_fail(*(_QWORD *)(v175 + 16) - *(_QWORD *)(v175 + 8) == *(_QWORD *)(*(_QWORD *)&v169 + 16)
                                                                                   - *(_QWORD *)(*(_QWORD *)&v169 + 8));
          v176 = *(double **)(v175 + 8);
          v177 = *(_QWORD *)(v175 + 16) - (_QWORD)v176;
          if (v177)
          {
            v178 = v177 >> 3;
            v179 = *(double **)(*(_QWORD *)&v169 + 8);
            if (v178 <= 1)
              v178 = 1;
            do
            {
              v180 = *v179++;
              *v176 = v180 + *v176;
              ++v176;
              --v178;
            }
            while (v178);
          }
          return;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v181 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v181, *a2);
          *a2 = (uint64_t)v181;
          *v181 = 1;
          do
          {
            v182 = __ldaxr((unint64_t *)v111);
            v183 = --v182 == 0;
          }
          while (__stlxr(v182, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v112 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v112, *a2);
          *a2 = (uint64_t)v112;
          *v112 = 1;
          do
          {
            v113 = __ldaxr((unint64_t *)v111);
            v114 = --v113 == 0;
          }
          while (__stlxr(v113, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v185 = operator new();
          v186 = *a2;
          *(_QWORD *)v185 = *(_QWORD *)*a2;
          *(_QWORD *)(v185 + 8) = *(_QWORD *)(v186 + 8);
          v187 = *(_QWORD *)(v186 + 16);
          *(_QWORD *)(v185 + 16) = v187;
          if (v187)
          {
            v188 = (unsigned int *)(v187 + 8);
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          v190 = *(_OWORD *)(v186 + 24);
          v191 = *(_OWORD *)(v186 + 40);
          *(_OWORD *)(v185 + 56) = *(_OWORD *)(v186 + 56);
          *(_OWORD *)(v185 + 40) = v191;
          *(_OWORD *)(v185 + 24) = v190;
          *a2 = v185;
          *(_QWORD *)v185 = 1;
          do
          {
            v192 = __ldaxr((unint64_t *)v184);
            v193 = --v192 == 0;
          }
          while (__stlxr(v192, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v28 = (_QWORD *)operator new();
          v29 = *a2 + 8;
          *v28 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v28 + 1, v29);
          *a2 = (uint64_t)v28;
          *v28 = 1;
          do
          {
            v30 = __ldaxr(v27);
            v31 = --v30 == 0;
          }
          while (__stlxr(v30, v27));
          goto LABEL_253;
        default:
          turi::apply_binary_op_ff();
      }
    case 4:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v21 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, *a2);
          *a2 = (uint64_t)v21;
          *v21 = 1;
          do
          {
            v22 = __ldaxr((unint64_t *)v5);
            v8 = --v22 == 0;
          }
          while (__stlxr(v22, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v280 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v280, *a2);
          *a2 = (uint64_t)v280;
          *v280 = 1;
          do
          {
            v281 = __ldaxr(v194);
            v197 = --v281 == 0;
          }
          while (__stlxr(v281, v194));
          goto LABEL_354;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v282 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v282, *a2);
          *a2 = (uint64_t)v282;
          *v282 = 1;
          do
          {
            v283 = __ldaxr((unint64_t *)v111);
            v183 = --v283 == 0;
          }
          while (__stlxr(v283, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v242 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v242, *a2);
          *a2 = (uint64_t)v242;
          *v242 = 1;
          do
          {
            v243 = __ldaxr((unint64_t *)v111);
            v114 = --v243 == 0;
          }
          while (__stlxr(v243, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v286 = operator new();
          v287 = *a2;
          *(_QWORD *)v286 = *(_QWORD *)*a2;
          *(_QWORD *)(v286 + 8) = *(_QWORD *)(v287 + 8);
          v288 = *(_QWORD *)(v287 + 16);
          *(_QWORD *)(v286 + 16) = v288;
          if (v288)
          {
            v289 = (unsigned int *)(v288 + 8);
            do
              v290 = __ldxr(v289);
            while (__stxr(v290 + 1, v289));
          }
          v291 = *(_OWORD *)(v287 + 24);
          v292 = *(_OWORD *)(v287 + 40);
          *(_OWORD *)(v286 + 56) = *(_OWORD *)(v287 + 56);
          *(_OWORD *)(v286 + 40) = v292;
          *(_OWORD *)(v286 + 24) = v291;
          *a2 = v286;
          *(_QWORD *)v286 = 1;
          do
          {
            v293 = __ldaxr((unint64_t *)v184);
            v193 = --v293 == 0;
          }
          while (__stlxr(v293, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v200 = (_QWORD *)operator new();
          v201 = *a2 + 8;
          *v200 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v200 + 1, v201);
          *a2 = (uint64_t)v200;
          *v200 = 1;
          do
          {
            v202 = __ldaxr(v27);
            v31 = --v202 == 0;
          }
          while (__stlxr(v202, v27));
          goto LABEL_253;
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v23 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v23, *a2);
          *a2 = (uint64_t)v23;
          *v23 = 1;
          do
          {
            v24 = __ldaxr((unint64_t *)v5);
            v8 = --v24 == 0;
          }
          while (__stlxr(v24, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v284 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v284, *a2);
          *a2 = (uint64_t)v284;
          *v284 = 1;
          do
          {
            v285 = __ldaxr(v194);
            v197 = --v285 == 0;
          }
          while (__stlxr(v285, v194));
          goto LABEL_354;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v297 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v297, *a2);
          *a2 = (uint64_t)v297;
          *v297 = 1;
          do
          {
            v298 = __ldaxr((unint64_t *)v111);
            v183 = --v298 == 0;
          }
          while (__stlxr(v298, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v258 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v258, *a2);
          *a2 = (uint64_t)v258;
          *v258 = 1;
          do
          {
            v259 = __ldaxr((unint64_t *)v111);
            v114 = --v259 == 0;
          }
          while (__stlxr(v259, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v299 = operator new();
          v300 = *a2;
          *(_QWORD *)v299 = *(_QWORD *)*a2;
          *(_QWORD *)(v299 + 8) = *(_QWORD *)(v300 + 8);
          v301 = *(_QWORD *)(v300 + 16);
          *(_QWORD *)(v299 + 16) = v301;
          if (v301)
          {
            v302 = (unsigned int *)(v301 + 8);
            do
              v303 = __ldxr(v302);
            while (__stxr(v303 + 1, v302));
          }
          v304 = *(_OWORD *)(v300 + 24);
          v305 = *(_OWORD *)(v300 + 40);
          *(_OWORD *)(v299 + 56) = *(_OWORD *)(v300 + 56);
          *(_OWORD *)(v299 + 40) = v305;
          *(_OWORD *)(v299 + 24) = v304;
          *a2 = v299;
          *(_QWORD *)v299 = 1;
          do
          {
            v306 = __ldaxr((unint64_t *)v184);
            v193 = --v306 == 0;
          }
          while (__stlxr(v306, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v211 = (_QWORD *)operator new();
          v212 = *a2 + 8;
          *v211 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v211 + 1, v212);
          *a2 = (uint64_t)v211;
          *v211 = 1;
          do
          {
            v213 = __ldaxr(v27);
            v31 = --v213 == 0;
          }
          while (__stlxr(v213, v27));
          goto LABEL_253;
        default:
          turi::apply_binary_op_ff();
      }
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v19 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v19, *a2);
          *a2 = (uint64_t)v19;
          *v19 = 1;
          do
          {
            v20 = __ldaxr((unint64_t *)v5);
            v8 = --v20 == 0;
          }
          while (__stlxr(v20, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v240 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v240, *a2);
          *a2 = (uint64_t)v240;
          *v240 = 1;
          do
          {
            v241 = __ldaxr(v194);
            v197 = --v241 == 0;
          }
          while (__stlxr(v241, v194));
          goto LABEL_354;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v256 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v256, *a2);
          *a2 = (uint64_t)v256;
          *v256 = 1;
          do
          {
            v257 = __ldaxr((unint64_t *)v111);
            v183 = --v257 == 0;
          }
          while (__stlxr(v257, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v209 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v209, *a2);
          *a2 = (uint64_t)v209;
          *v209 = 1;
          do
          {
            v210 = __ldaxr((unint64_t *)v111);
            v114 = --v210 == 0;
          }
          while (__stlxr(v210, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v262 = operator new();
          v263 = *a2;
          *(_QWORD *)v262 = *(_QWORD *)*a2;
          *(_QWORD *)(v262 + 8) = *(_QWORD *)(v263 + 8);
          v264 = *(_QWORD *)(v263 + 16);
          *(_QWORD *)(v262 + 16) = v264;
          if (v264)
          {
            v265 = (unsigned int *)(v264 + 8);
            do
              v266 = __ldxr(v265);
            while (__stxr(v266 + 1, v265));
          }
          v267 = *(_OWORD *)(v263 + 24);
          v268 = *(_OWORD *)(v263 + 40);
          *(_OWORD *)(v262 + 56) = *(_OWORD *)(v263 + 56);
          *(_OWORD *)(v262 + 40) = v268;
          *(_OWORD *)(v262 + 24) = v267;
          *a2 = v262;
          *(_QWORD *)v262 = 1;
          do
          {
            v269 = __ldaxr((unint64_t *)v184);
            v193 = --v269 == 0;
          }
          while (__stlxr(v269, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v130 = (_QWORD *)operator new();
          v131 = *a2 + 8;
          *v130 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v130 + 1, v131);
          *a2 = (uint64_t)v130;
          *v130 = 1;
          do
          {
            v132 = __ldaxr(v27);
            v31 = --v132 == 0;
          }
          while (__stlxr(v132, v27));
          goto LABEL_253;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      return;
    case 8:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v25 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v25, *a2);
          *a2 = (uint64_t)v25;
          *v25 = 1;
          do
          {
            v26 = __ldaxr((unint64_t *)v5);
            v8 = --v26 == 0;
          }
          while (__stlxr(v26, (unint64_t *)v5));
          goto LABEL_225;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v294 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v294, *a2);
          *a2 = (uint64_t)v294;
          *v294 = 1;
          do
          {
            v295 = __ldaxr(v194);
            v197 = --v295 == 0;
          }
          while (__stlxr(v295, v194));
          goto LABEL_354;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v307, *a2);
          *a2 = (uint64_t)v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v111);
            v183 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v111));
          goto LABEL_373;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v270 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v270, *a2);
          *a2 = (uint64_t)v270;
          *v270 = 1;
          do
          {
            v271 = __ldaxr((unint64_t *)v111);
            v114 = --v271 == 0;
          }
          while (__stlxr(v271, (unint64_t *)v111));
          goto LABEL_322;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v309 = operator new();
          v310 = *a2;
          *(_QWORD *)v309 = *(_QWORD *)*a2;
          *(_QWORD *)(v309 + 8) = *(_QWORD *)(v310 + 8);
          v311 = *(_QWORD *)(v310 + 16);
          *(_QWORD *)(v309 + 16) = v311;
          if (v311)
          {
            v312 = (unsigned int *)(v311 + 8);
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
          }
          v314 = *(_OWORD *)(v310 + 24);
          v315 = *(_OWORD *)(v310 + 40);
          *(_OWORD *)(v309 + 56) = *(_OWORD *)(v310 + 56);
          *(_OWORD *)(v309 + 40) = v315;
          *(_OWORD *)(v309 + 24) = v314;
          *a2 = v309;
          *(_QWORD *)v309 = 1;
          do
          {
            v316 = __ldaxr((unint64_t *)v184);
            v193 = --v316 == 0;
          }
          while (__stlxr(v316, (unint64_t *)v184));
          goto LABEL_385;
        case 9:
          v27 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v222 = (_QWORD *)operator new();
          v223 = *a2 + 8;
          *v222 = *(_QWORD *)*a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v222 + 1, v223);
          *a2 = (uint64_t)v222;
          *v222 = 1;
          do
          {
            v224 = __ldaxr(v27);
            v31 = --v224 == 0;
          }
          while (__stlxr(v224, v27));
LABEL_253:
          if (!v31)
            goto LABEL_390;
          v205 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v27);
          v225 = 2071181815;
          goto LABEL_388;
        default:
          turi::apply_binary_op_ff();
      }
    case 9:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_390;
        case 2:
          v5 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v9 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v9, *a2);
          *a2 = (uint64_t)v9;
          *v9 = 1;
          do
          {
            v10 = __ldaxr((unint64_t *)v5);
            v8 = --v10 == 0;
          }
          while (__stlxr(v10, (unint64_t *)v5));
LABEL_225:
          if (!v8)
            goto LABEL_390;
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v205 = (_QWORD *)v5;
          v206 = 0x1012C404EF22A49;
          goto LABEL_389;
        case 3:
          v194 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v195 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v195, *a2);
          *a2 = (uint64_t)v195;
          *v195 = 1;
          do
          {
            v196 = __ldaxr(v194);
            v197 = --v196 == 0;
          }
          while (__stlxr(v196, v194));
LABEL_354:
          if (!v197)
            goto LABEL_390;
          v296 = (void *)v194[1];
          if (v296)
          {
            v194[2] = (unint64_t)v296;
            operator delete(v296);
          }
          v205 = v194;
          v206 = 0x1080C409938AC02;
          goto LABEL_389;
        case 4:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v207 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a2);
          *a2 = (uint64_t)v207;
          *v207 = 1;
          do
          {
            v208 = __ldaxr((unint64_t *)v111);
            v183 = --v208 == 0;
          }
          while (__stlxr(v208, (unint64_t *)v111));
LABEL_373:
          if (!v183)
            goto LABEL_377;
          v318 = (void **)(v111 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v318);
          goto LABEL_376;
        case 5:
          v111 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_377;
          v128 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v128, *a2);
          *a2 = (uint64_t)v128;
          *v128 = 1;
          do
          {
            v129 = __ldaxr((unint64_t *)v111);
            v114 = --v129 == 0;
          }
          while (__stlxr(v129, (unint64_t *)v111));
LABEL_322:
          if (!v114)
            goto LABEL_377;
          v318 = (void **)(v111 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v318);
LABEL_376:
          MEMORY[0x219A19A08](v111, 0x1020C405E66F15BLL);
LABEL_377:
          turi::flexible_type_fail(0);
          return;
        case 8:
          v184 = *a2;
          if (*(_QWORD *)*a2 == 1)
            goto LABEL_390;
          v214 = operator new();
          v215 = *a2;
          *(_QWORD *)v214 = *(_QWORD *)*a2;
          *(_QWORD *)(v214 + 8) = *(_QWORD *)(v215 + 8);
          v216 = *(_QWORD *)(v215 + 16);
          *(_QWORD *)(v214 + 16) = v216;
          if (v216)
          {
            v217 = (unsigned int *)(v216 + 8);
            do
              v218 = __ldxr(v217);
            while (__stxr(v218 + 1, v217));
          }
          v219 = *(_OWORD *)(v215 + 24);
          v220 = *(_OWORD *)(v215 + 40);
          *(_OWORD *)(v214 + 56) = *(_OWORD *)(v215 + 56);
          *(_OWORD *)(v214 + 40) = v220;
          *(_OWORD *)(v214 + 24) = v219;
          *a2 = v214;
          *(_QWORD *)v214 = 1;
          do
          {
            v221 = __ldaxr((unint64_t *)v184);
            v193 = --v221 == 0;
          }
          while (__stlxr(v221, (unint64_t *)v184));
LABEL_385:
          if (!v193)
            goto LABEL_390;
          boost::detail::shared_count::~shared_count((unsigned int **)(v184 + 16));
          v205 = (_QWORD *)v184;
          v225 = -235920773;
LABEL_388:
          v206 = v225 | 0x1030C4000000000;
LABEL_389:
          MEMORY[0x219A19A08](v205, v206);
LABEL_390:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v32 = *(double *)a1;
          v33 = (unint64_t *)*a2;
          if (*(_QWORD *)*a2 != 1)
          {
            v34 = (_QWORD *)operator new();
            v35 = *a2 + 8;
            *v34 = *(_QWORD *)*a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v34 + 1, v35);
            *a2 = (uint64_t)v34;
            *v34 = 1;
            do
            {
              v36 = __ldaxr(v33);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v33));
            if (!v37)
            {
              v38 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
              MEMORY[0x219A19A08](v38, 0x1030C407B73B9F7);
            }
          }
          v39 = *a2;
          v40 = (uint64_t *)(*a2 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v40, *(_QWORD *)&v32 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v42 = *(uint64_t **)(v39 + 24);
          v41 = *(uint64_t **)(v39 + 32);
          if (v41 == v42)
            return;
          if (!*v40)
            return;
          v43 = 1;
          do
          {
            v44 = *v42++;
            v43 *= v44;
          }
          while (v42 != v41);
          if (!v43)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
          v45 = (uint64_t)(*(_QWORD *)(v39 + 32) - *(_QWORD *)(v39 + 24)) >> 3;
          v317 = 0;
          std::vector<unsigned long>::vector(&v318, v45, &v317);
          v46 = v318;
          v47 = v319;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    v48 = (char *)v47 - (char *)v46;
    if (v48)
    {
      v49 = 0;
      v50 = v48 >> 3;
      v51 = *(uint64_t **)(*(_QWORD *)&v32 + 48);
      if (v50 <= 1)
        v50 = 1;
      v52 = v46;
      v53 = v50;
      do
      {
        v55 = (uint64_t)*v52++;
        v54 = v55;
        v56 = *v51++;
        v49 += v56 * v54;
        --v53;
      }
      while (v53);
      v57 = 0;
      v58 = *(double *)(**(_QWORD **)(*(_QWORD *)&v32 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v32 + 72) + v49));
      v59 = *(uint64_t **)(v39 + 48);
      do
      {
        v61 = (uint64_t)*v46++;
        v60 = v61;
        v62 = *v59++;
        v57 += v62 * v60;
        --v50;
      }
      while (v50);
    }
    else
    {
      v57 = 0;
      v58 = *(double *)(**(_QWORD **)(*(_QWORD *)&v32 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v32 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
    *(double *)(**(_QWORD **)(v39 + 8) + 8 * (*(_QWORD *)(v39 + 72) + v57)) = v58
                                                                            + *(double *)(**(_QWORD **)(v39 + 8)
                                                                                        + 8
                                                                                        * (*(_QWORD *)(v39 + 72) + v57));
    v46 = v318;
    v47 = v319;
    v63 = v319 - v318;
    v64 = v63 - 1;
    if ((char *)v319 - (char *)v318 >= 1)
    {
      v65 = *(_QWORD *)(v39 + 24);
      v66 = (char *)v318[v64] + 1;
      v318[v64] = v66;
      if ((unint64_t)v66 >= *(_QWORD *)(v65 + 8 * v64))
      {
        v67 = (unint64_t *)&v46[v63 - 2];
        v68 = v65 - 16;
        while (1)
        {
          v69 = v63 - 1;
          v67[1] = 0;
          if (v63 - 1 <= 0)
            goto LABEL_178;
          v70 = *v67 + 1;
          *v67-- = v70;
          v71 = *(_QWORD *)(v68 + 8 * v63--);
          if (v70 < v71)
          {
            v64 = v69 - 1;
            break;
          }
        }
      }
      v63 = 1;
    }
  }
  while ((v64 & 0x8000000000000000) == 0 && v63);
LABEL_177:
  if (!v46)
    return;
LABEL_178:
  v319 = v46;
  operator delete(v46);
}

void sub_21820303C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_218203168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x218203160);
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void **v61;

  *(_QWORD *)a1 = off_24D931F98;
  switch(*(_BYTE *)(a1 + 44))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 32);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 32);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 32);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 32);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 32);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 32);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 32);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 32);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 32);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 32);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v31 = *(unint64_t **)(a1 + 16);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(a1 + 16);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          v35 = (_QWORD *)v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)(a1 + 16);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(_QWORD **)(a1 + 16);
        if (v40)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)(a1 + 16);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)(a1 + 16);
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(_QWORD *)(a1 + 16);
        if (v45)
        {
          v61 = (void **)(v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = (_QWORD *)v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)(a1 + 16);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(_QWORD *)(a1 + 16);
        if (v52)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
          v35 = (_QWORD *)v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)(a1 + 16);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(a1 + 16);
        if (v57)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::new_instance(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::generic_aggregator(v2, a1 + 16);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::add_element_simple(uint64_t a1, uint64_t a2)
{
  turi::unity_sarray::sum(void)::$_0::operator()(a2, (uint64_t *)(a1 + 32));
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)&v8, (uint64_t *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_2182036A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(uint64_t a1)
{
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::~generic_aggregator(a1);
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218203824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2182039A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218203B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218203CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<turi::flexible_type,turi::unity_sarray::sum(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218203E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::generic_aggregator(uint64_t result, uint64_t a2, char *a3)
{
  unint64_t **v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  unint64_t **v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)result = off_24D932038;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 16) = *a3;
  *(_QWORD *)(result + 24) = 0;
  v3 = (unint64_t **)(result + 24);
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 0;
  if ((char *)(result + 16) != a3)
  {
    v4 = (unint64_t *)*((_QWORD *)a3 + 1);
    *(_QWORD *)(result + 29) = *(_QWORD *)(a3 + 13);
    *v3 = v4;
    v5 = a3[20];
    *(_BYTE *)(result + 36) = v5;
    if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
    {
      v6 = *v3;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v8 = *a3;
  *(_QWORD *)(result + 48) = 0;
  v9 = (unint64_t **)(result + 48);
  *(_BYTE *)(result + 40) = v8;
  *(_DWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 60) = 0;
  if ((char *)(result + 40) != a3)
  {
    v10 = (unint64_t *)*((_QWORD *)a3 + 1);
    *(_QWORD *)(result + 53) = *(_QWORD *)(a3 + 13);
    *v9 = v10;
    v11 = a3[20];
    *(_BYTE *)(result + 60) = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0)
    {
      v12 = *v9;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  return result;
}

void turi::unity_sarray::sum(void)::$_2::operator()(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void **v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  void **v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  BOOL v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  double *v108;
  uint64_t v109;
  unint64_t v110;
  double v111;
  unint64_t *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  double *v117;
  uint64_t v118;
  double v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t *v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  unint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t *v191;
  _QWORD *v192;
  unint64_t v193;
  BOOL v194;
  double v195;
  _QWORD *v196;
  unint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  __int128 v205;
  __int128 v206;
  unint64_t v207;
  BOOL v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  double v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  unsigned int v253;
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  double *v264;
  uint64_t v265;
  unint64_t v266;
  double *v267;
  double v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int *v286;
  unsigned int v287;
  __int128 v288;
  __int128 v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int *v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  __int128 v318;
  __int128 v319;
  unint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  _QWORD *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  __int128 v332;
  __int128 v333;
  unint64_t v334;
  _QWORD *v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  __int128 v345;
  __int128 v346;
  unint64_t v347;
  _QWORD *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int *v353;
  unsigned int v354;
  __int128 v355;
  __int128 v356;
  unint64_t v357;
  uint64_t v358;
  void **v359;
  void **v360;

  if (!*(_BYTE *)a3)
  {
    std::pair<BOOL,turi::flexible_type>::operator=[abi:ne180100]((_BYTE *)a3, (_BYTE *)a2);
    return;
  }
  if (*(_BYTE *)a2)
  {
    v6 = (uint64_t *)(a3 + 8);
    v7 = *(unsigned __int8 *)(a3 + 20);
    if (v7 == 9)
    {
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*v6 + 8, *(_QWORD *)(a2 + 8) + 8))
        goto LABEL_21;
      v7 = *(unsigned __int8 *)(a3 + 20);
    }
    v8 = 1;
    switch(v7)
    {
      case 3:
        v9 = (_QWORD *)(*v6 + 8);
        v10 = (_QWORD *)(*v6 + 16);
        v11 = 3;
        goto LABEL_11;
      case 4:
        v9 = (_QWORD *)(*v6 + 8);
        v10 = (_QWORD *)(*v6 + 16);
        v11 = 4;
        goto LABEL_11;
      case 5:
        v9 = (_QWORD *)(*v6 + 8);
        v10 = (_QWORD *)(*v6 + 16);
        v11 = 5;
LABEL_11:
        v8 = (uint64_t)(*v10 - *v9) >> v11;
        break;
      case 9:
        v21 = *(uint64_t **)(*v6 + 24);
        v20 = *(uint64_t **)(*v6 + 32);
        if (v20 == v21)
        {
          v8 = 0;
        }
        else
        {
          v8 = *(_QWORD *)(*v6 + 8);
          if (v8)
          {
            v8 = 1;
            do
            {
              v22 = *v21++;
              v8 *= v22;
            }
            while (v21 != v20);
          }
        }
        break;
      default:
        break;
    }
    v12 = 1;
    switch(*(_BYTE *)(a2 + 20))
    {
      case 3:
        v13 = *(_QWORD *)(a2 + 8);
        v14 = (_QWORD *)(v13 + 8);
        v15 = (_QWORD *)(v13 + 16);
        v16 = 3;
        goto LABEL_16;
      case 4:
        v18 = *(_QWORD *)(a2 + 8);
        v14 = (_QWORD *)(v18 + 8);
        v15 = (_QWORD *)(v18 + 16);
        v16 = 4;
        goto LABEL_16;
      case 5:
        v17 = *(_QWORD *)(a2 + 8);
        v14 = (_QWORD *)(v17 + 8);
        v15 = (_QWORD *)(v17 + 16);
        v16 = 5;
LABEL_16:
        v12 = (uint64_t)(*v15 - *v14) >> v16;
        break;
      case 9:
        v23 = *(_QWORD **)(a2 + 8);
        v25 = (uint64_t *)v23[3];
        v24 = (uint64_t *)v23[4];
        if (v24 == v25)
        {
          v12 = 0;
        }
        else
        {
          v12 = v23[1];
          if (v12)
          {
            v12 = 1;
            do
            {
              v26 = *v25++;
              v12 *= v26;
            }
            while (v25 != v24);
          }
        }
        break;
      default:
        break;
    }
    if (v8 == v12)
    {
      switch(*(_BYTE *)(a2 + 20))
      {
        case 0:
          switch(v7)
          {
            case 0:
              v19 = *v6 + *(_QWORD *)(a2 + 8);
              goto LABEL_72;
            case 1:
              v195 = *(double *)v6 + (double)*(uint64_t *)(a2 + 8);
              goto LABEL_297;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v218 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v218, *v6);
              *v6 = (uint64_t)v218;
              *v218 = 1;
              do
              {
                v219 = __ldaxr((unint64_t *)v27);
                v30 = --v219 == 0;
              }
              while (__stlxr(v219, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v103 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v104 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v104, *v6);
                *v6 = (uint64_t)v104;
                *v104 = 1;
                do
                {
                  v105 = __ldaxr(v103);
                  v106 = v105 - 1;
                }
                while (__stlxr(v106, v103));
                if (!v106)
                {
                  v107 = (void *)v103[1];
                  if (v107)
                  {
                    v103[2] = (unint64_t)v107;
                    operator delete(v107);
                  }
                  MEMORY[0x219A19A08](v103, 0x1080C409938AC02);
                }
              }
              v108 = *(double **)(*v6 + 8);
              v109 = *(_QWORD *)(*v6 + 16) - (_QWORD)v108;
              if (v109)
              {
                v110 = v109 >> 3;
                v111 = (double)*(uint64_t *)(a2 + 8);
                if (v110 <= 1)
                  v110 = 1;
                do
                {
                  *v108 = *v108 + v111;
                  ++v108;
                  --v110;
                }
                while (v110);
              }
              return;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v275 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v275, *v6);
              *v6 = (uint64_t)v275;
              *v275 = 1;
              do
              {
                v276 = __ldaxr((unint64_t *)v99);
                v198 = --v276 == 0;
              }
              while (__stlxr(v276, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v301 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v301, *v6);
              *v6 = (uint64_t)v301;
              *v301 = 1;
              do
              {
                v302 = __ldaxr((unint64_t *)v99);
                v102 = --v302 == 0;
              }
              while (__stlxr(v302, (unint64_t *)v99));
              goto LABEL_374;
            case 6:
              *v6 = *v6 & 0xFF00000000000000 | (*v6 + *(_QWORD *)(a2 + 8)) & 0xFFFFFFFFFFFFFFLL;
              return;
            case 7:
              goto LABEL_448;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v305 = operator new();
              v306 = *v6;
              *(_QWORD *)v305 = *(_QWORD *)*v6;
              *(_QWORD *)(v305 + 8) = *(_QWORD *)(v306 + 8);
              v307 = *(_QWORD *)(v306 + 16);
              *(_QWORD *)(v305 + 16) = v307;
              if (v307)
              {
                v308 = (unsigned int *)(v307 + 8);
                do
                  v309 = __ldxr(v308);
                while (__stxr(v309 + 1, v308));
              }
              v310 = *(_OWORD *)(v306 + 24);
              v311 = *(_OWORD *)(v306 + 40);
              *(_OWORD *)(v305 + 56) = *(_OWORD *)(v306 + 56);
              *(_OWORD *)(v305 + 40) = v311;
              *(_OWORD *)(v305 + 24) = v310;
              *v6 = v305;
              *(_QWORD *)v305 = 1;
              do
              {
                v312 = __ldaxr((unint64_t *)v199);
                v208 = --v312 == 0;
              }
              while (__stlxr(v312, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v129 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v130 = (_QWORD *)operator new();
                v131 = *v6 + 8;
                *v130 = *(_QWORD *)*v6;
                turi::flexible_type_impl::ndarray<double>::ndarray(v130 + 1, v131);
                *v6 = (uint64_t)v130;
                *v130 = 1;
                do
                {
                  v132 = __ldaxr(v129);
                  v133 = v132 - 1;
                }
                while (__stlxr(v133, v129));
                if (!v133)
                {
                  v134 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v129);
                  MEMORY[0x219A19A08](v134, 0x1030C407B73B9F7);
                }
              }
              v135 = (uint64_t *)*v6;
              v137 = *(uint64_t **)(*v6 + 24);
              v136 = *(uint64_t **)(*v6 + 32);
              if (v136 == v137)
                return;
              if (!v135[1])
                return;
              v138 = (double)*(uint64_t *)(a2 + 8);
              v139 = 1;
              do
              {
                v140 = *v137++;
                v139 *= v140;
              }
              while (v137 != v136);
              if (!v139)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v135 + 1);
              v141 = (v135[4] - v135[3]) >> 3;
              v358 = 0;
              std::vector<unsigned long>::vector(&v359, v141, &v358);
              v70 = v359;
              v142 = v360;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          while (2)
          {
            v143 = 0;
            v144 = (char *)v142 - (char *)v70;
            if (v144)
            {
              v145 = v144 >> 3;
              v146 = (uint64_t *)v135[6];
              if (v145 <= 1)
                v145 = 1;
              do
              {
                v148 = (uint64_t)*v70++;
                v147 = v148;
                v149 = *v146++;
                v143 += v149 * v147;
                --v145;
              }
              while (v145);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v135 + 1);
            *(double *)(*(_QWORD *)v135[1] + 8 * (v135[9] + v143)) = *(double *)(*(_QWORD *)v135[1]
                                                                               + 8 * (v135[9] + v143))
                                                                   + v138;
            v70 = v359;
            v142 = v360;
            v150 = v360 - v359;
            v151 = v150 - 1;
            if ((char *)v360 - (char *)v359 < 1)
              goto LABEL_189;
            v152 = v135[3];
            v153 = (char *)v359[v151] + 1;
            v359[v151] = v153;
            if ((unint64_t)v153 < *(_QWORD *)(v152 + 8 * v151))
            {
LABEL_188:
              v150 = 1;
LABEL_189:
              if (v151 < 0 || !v150)
                goto LABEL_216;
              continue;
            }
            break;
          }
          v154 = (unint64_t *)&v70[v150 - 2];
          v155 = v152 - 16;
          while (1)
          {
            v156 = v150 - 1;
            v154[1] = 0;
            if (v150 - 1 <= 0)
              goto LABEL_217;
            v157 = *v154 + 1;
            *v154-- = v157;
            v158 = *(_QWORD *)(v155 + 8 * v150--);
            if (v157 < v158)
            {
              v151 = v156 - 1;
              goto LABEL_188;
            }
          }
        case 1:
          switch(v7)
          {
            case 0:
              v19 = (uint64_t)(*(double *)(a2 + 8) + (double)*v6);
LABEL_72:
              *v6 = v19;
              return;
            case 1:
              v195 = *(double *)(a2 + 8) + *(double *)v6;
LABEL_297:
              *(double *)v6 = v195;
              return;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v222 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v222, *v6);
              *v6 = (uint64_t)v222;
              *v222 = 1;
              do
              {
                v223 = __ldaxr((unint64_t *)v27);
                v30 = --v223 == 0;
              }
              while (__stlxr(v223, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v112 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v113 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v113, *v6);
                *v6 = (uint64_t)v113;
                *v113 = 1;
                do
                {
                  v114 = __ldaxr(v112);
                  v115 = v114 - 1;
                }
                while (__stlxr(v115, v112));
                if (!v115)
                {
                  v116 = (void *)v112[1];
                  if (v116)
                  {
                    v112[2] = (unint64_t)v116;
                    operator delete(v116);
                  }
                  MEMORY[0x219A19A08](v112, 0x1080C409938AC02);
                }
              }
              v117 = *(double **)(*v6 + 8);
              v118 = *(_QWORD *)(*v6 + 16) - (_QWORD)v117;
              if (v118)
              {
                v119 = *(double *)(a2 + 8);
                v120 = v118 >> 3;
                if (v120 <= 1)
                  v120 = 1;
                do
                {
                  *v117 = v119 + *v117;
                  ++v117;
                  --v120;
                }
                while (v120);
              }
              return;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v279 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v279, *v6);
              *v6 = (uint64_t)v279;
              *v279 = 1;
              do
              {
                v280 = __ldaxr((unint64_t *)v99);
                v198 = --v280 == 0;
              }
              while (__stlxr(v280, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v303 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v303, *v6);
              *v6 = (uint64_t)v303;
              *v303 = 1;
              do
              {
                v304 = __ldaxr((unint64_t *)v99);
                v102 = --v304 == 0;
              }
              while (__stlxr(v304, (unint64_t *)v99));
              goto LABEL_374;
            case 6:
              v237 = *(double *)(a2 + 8);
              v238 = *(_QWORD *)(a3 + 8);
              v239 = v238 + vcvtmd_s64_f64(v237);
              *(_QWORD *)(a3 + 8) = v238 & 0xFF00000000000000 | v239 & 0xFFFFFFFFFFFFFFLL;
              v240 = (uint64_t)((v237 - (double)(uint64_t)floor(v237)) * 1000000.0) + *(int *)(a3 + 16);
              if (v240 >= 1000000)
              {
                *v6 = (v239 + 1) & 0xFFFFFFFFFFFFFFLL | v238 & 0xFF00000000000000;
                LODWORD(v240) = v240 - 1000000;
              }
              if (v240 >= 0xF4240)
                turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
              *(_DWORD *)(a3 + 16) = v240;
              return;
            case 7:
              goto LABEL_448;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v313 = operator new();
              v314 = *v6;
              *(_QWORD *)v313 = *(_QWORD *)*v6;
              *(_QWORD *)(v313 + 8) = *(_QWORD *)(v314 + 8);
              v315 = *(_QWORD *)(v314 + 16);
              *(_QWORD *)(v313 + 16) = v315;
              if (v315)
              {
                v316 = (unsigned int *)(v315 + 8);
                do
                  v317 = __ldxr(v316);
                while (__stxr(v317 + 1, v316));
              }
              v318 = *(_OWORD *)(v314 + 24);
              v319 = *(_OWORD *)(v314 + 40);
              *(_OWORD *)(v313 + 56) = *(_OWORD *)(v314 + 56);
              *(_OWORD *)(v313 + 40) = v319;
              *(_OWORD *)(v313 + 24) = v318;
              *v6 = v313;
              *(_QWORD *)v313 = 1;
              do
              {
                v320 = __ldaxr((unint64_t *)v199);
                v208 = --v320 == 0;
              }
              while (__stlxr(v320, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v159 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v160 = (_QWORD *)operator new();
                v161 = *v6 + 8;
                *v160 = *(_QWORD *)*v6;
                turi::flexible_type_impl::ndarray<double>::ndarray(v160 + 1, v161);
                *v6 = (uint64_t)v160;
                *v160 = 1;
                do
                {
                  v162 = __ldaxr(v159);
                  v163 = v162 - 1;
                }
                while (__stlxr(v163, v159));
                if (!v163)
                {
                  v164 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v159);
                  MEMORY[0x219A19A08](v164, 0x1030C407B73B9F7);
                }
              }
              v165 = (uint64_t *)*v6;
              v167 = *(uint64_t **)(*v6 + 24);
              v166 = *(uint64_t **)(*v6 + 32);
              if (v166 == v167)
                return;
              if (!v165[1])
                return;
              v168 = *(double *)(a2 + 8);
              v169 = 1;
              do
              {
                v170 = *v167++;
                v169 *= v170;
              }
              while (v167 != v166);
              if (!v169)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v165 + 1);
              v171 = (v165[4] - v165[3]) >> 3;
              v358 = 0;
              std::vector<unsigned long>::vector(&v359, v171, &v358);
              v70 = v359;
              v172 = v360;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          while (2)
          {
            v173 = 0;
            v174 = (char *)v172 - (char *)v70;
            if (v174)
            {
              v175 = v174 >> 3;
              v176 = (uint64_t *)v165[6];
              if (v175 <= 1)
                v175 = 1;
              do
              {
                v178 = (uint64_t)*v70++;
                v177 = v178;
                v179 = *v176++;
                v173 += v179 * v177;
                --v175;
              }
              while (v175);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v165 + 1);
            *(double *)(*(_QWORD *)v165[1] + 8 * (v165[9] + v173)) = v168
                                                                   + *(double *)(*(_QWORD *)v165[1]
                                                                               + 8 * (v165[9] + v173));
            v70 = v359;
            v172 = v360;
            v180 = v360 - v359;
            v181 = v180 - 1;
            if ((char *)v360 - (char *)v359 < 1)
              goto LABEL_214;
            v182 = v165[3];
            v183 = (char *)v359[v181] + 1;
            v359[v181] = v183;
            if ((unint64_t)v183 < *(_QWORD *)(v182 + 8 * v181))
            {
LABEL_213:
              v180 = 1;
LABEL_214:
              if (v181 < 0 || !v180)
                goto LABEL_216;
              continue;
            }
            break;
          }
          v184 = (unint64_t *)&v70[v180 - 2];
          v185 = v182 - 16;
          while (1)
          {
            v186 = v180 - 1;
            v184[1] = 0;
            if (v180 - 1 <= 0)
              goto LABEL_217;
            v187 = *v184 + 1;
            *v184-- = v187;
            v188 = *(_QWORD *)(v185 + 8 * v180--);
            if (v187 < v188)
            {
              v181 = v186 - 1;
              goto LABEL_213;
            }
          }
        case 2:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v33 = *(_QWORD *)(a2 + 8);
              v34 = *v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v35 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v35, *v6);
                *v6 = (uint64_t)v35;
                *v35 = 1;
                do
                {
                  v36 = __ldaxr((unint64_t *)v34);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, (unint64_t *)v34));
                if (!v37)
                {
                  if (*(char *)(v34 + 31) < 0)
                    operator delete(*(void **)(v34 + 8));
                  MEMORY[0x219A19A08](v34, 0x1012C404EF22A49);
                }
              }
              v38 = *(char *)(v33 + 31);
              if (v38 >= 0)
                v39 = (const std::string::value_type *)(v33 + 8);
              else
                v39 = *(const std::string::value_type **)(v33 + 8);
              if (v38 >= 0)
                v40 = *(unsigned __int8 *)(v33 + 31);
              else
                v40 = *(_QWORD *)(v33 + 16);
              std::string::append((std::string *)(*v6 + 8), v39, v40);
              return;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v245 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v245, *v6);
              *v6 = (uint64_t)v245;
              *v245 = 1;
              do
              {
                v246 = __ldaxr(v191);
                v194 = --v246 == 0;
              }
              while (__stlxr(v246, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v247 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v247, *v6);
              *v6 = (uint64_t)v247;
              *v247 = 1;
              do
              {
                v248 = __ldaxr((unint64_t *)v99);
                v198 = --v248 == 0;
              }
              while (__stlxr(v248, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v189 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v189, *v6);
              *v6 = (uint64_t)v189;
              *v189 = 1;
              do
              {
                v190 = __ldaxr((unint64_t *)v99);
                v102 = --v190 == 0;
              }
              while (__stlxr(v190, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v249 = operator new();
              v250 = *v6;
              *(_QWORD *)v249 = *(_QWORD *)*v6;
              *(_QWORD *)(v249 + 8) = *(_QWORD *)(v250 + 8);
              v251 = *(_QWORD *)(v250 + 16);
              *(_QWORD *)(v249 + 16) = v251;
              if (v251)
              {
                v252 = (unsigned int *)(v251 + 8);
                do
                  v253 = __ldxr(v252);
                while (__stxr(v253 + 1, v252));
              }
              v254 = *(_OWORD *)(v250 + 24);
              v255 = *(_OWORD *)(v250 + 40);
              *(_OWORD *)(v249 + 56) = *(_OWORD *)(v250 + 56);
              *(_OWORD *)(v249 + 40) = v255;
              *(_OWORD *)(v249 + 24) = v254;
              *v6 = v249;
              *(_QWORD *)v249 = 1;
              do
              {
                v256 = __ldaxr((unint64_t *)v199);
                v208 = --v256 == 0;
              }
              while (__stlxr(v256, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v96 = (_QWORD *)operator new();
              v97 = *v6 + 8;
              *v96 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v96 + 1, v97);
              *v6 = (uint64_t)v96;
              *v96 = 1;
              do
              {
                v98 = __ldaxr(v51);
                v55 = --v98 == 0;
              }
              while (__stlxr(v98, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 3:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v41 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v41, *v6);
              *v6 = (uint64_t)v41;
              *v41 = 1;
              do
              {
                v42 = __ldaxr((unint64_t *)v27);
                v30 = --v42 == 0;
              }
              while (__stlxr(v42, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v257 = *(_QWORD *)(a2 + 8);
              v258 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v259 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v259, *v6);
                *v6 = (uint64_t)v259;
                *v259 = 1;
                do
                {
                  v260 = __ldaxr(v258);
                  v261 = v260 - 1;
                }
                while (__stlxr(v261, v258));
                if (!v261)
                {
                  v262 = (void *)v258[1];
                  if (v262)
                  {
                    v258[2] = (unint64_t)v262;
                    operator delete(v262);
                  }
                  MEMORY[0x219A19A08](v258, 0x1080C409938AC02);
                }
              }
              v263 = *v6;
              turi::flexible_type_fail(*(_QWORD *)(*v6 + 16) - *(_QWORD *)(*v6 + 8) == *(_QWORD *)(v257 + 16)
                                                                                     - *(_QWORD *)(v257 + 8));
              v264 = *(double **)(v263 + 8);
              v265 = *(_QWORD *)(v263 + 16) - (_QWORD)v264;
              if (v265)
              {
                v266 = v265 >> 3;
                v267 = *(double **)(v257 + 8);
                if (v266 <= 1)
                  v266 = 1;
                do
                {
                  v268 = *v267++;
                  *v264 = v268 + *v264;
                  ++v264;
                  --v266;
                }
                while (v266);
              }
              return;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v273 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v273, *v6);
              *v6 = (uint64_t)v273;
              *v273 = 1;
              do
              {
                v274 = __ldaxr((unint64_t *)v99);
                v198 = --v274 == 0;
              }
              while (__stlxr(v274, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v214 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v214, *v6);
              *v6 = (uint64_t)v214;
              *v214 = 1;
              do
              {
                v215 = __ldaxr((unint64_t *)v99);
                v102 = --v215 == 0;
              }
              while (__stlxr(v215, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v283 = operator new();
              v284 = *v6;
              *(_QWORD *)v283 = *(_QWORD *)*v6;
              *(_QWORD *)(v283 + 8) = *(_QWORD *)(v284 + 8);
              v285 = *(_QWORD *)(v284 + 16);
              *(_QWORD *)(v283 + 16) = v285;
              if (v285)
              {
                v286 = (unsigned int *)(v285 + 8);
                do
                  v287 = __ldxr(v286);
                while (__stxr(v287 + 1, v286));
              }
              v288 = *(_OWORD *)(v284 + 24);
              v289 = *(_OWORD *)(v284 + 40);
              *(_OWORD *)(v283 + 56) = *(_OWORD *)(v284 + 56);
              *(_OWORD *)(v283 + 40) = v289;
              *(_OWORD *)(v283 + 24) = v288;
              *v6 = v283;
              *(_QWORD *)v283 = 1;
              do
              {
                v290 = __ldaxr((unint64_t *)v199);
                v208 = --v290 == 0;
              }
              while (__stlxr(v290, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v121 = (_QWORD *)operator new();
              v122 = *v6 + 8;
              *v121 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v121 + 1, v122);
              *v6 = (uint64_t)v121;
              *v121 = 1;
              do
              {
                v123 = __ldaxr(v51);
                v55 = --v123 == 0;
              }
              while (__stlxr(v123, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 4:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v28 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, *v6);
              *v6 = (uint64_t)v28;
              *v28 = 1;
              do
              {
                v29 = __ldaxr((unint64_t *)v27);
                v30 = --v29 == 0;
              }
              while (__stlxr(v29, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v192 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v192, *v6);
              *v6 = (uint64_t)v192;
              *v192 = 1;
              do
              {
                v193 = __ldaxr(v191);
                v194 = --v193 == 0;
              }
              while (__stlxr(v193, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v196 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v196, *v6);
              *v6 = (uint64_t)v196;
              *v196 = 1;
              do
              {
                v197 = __ldaxr((unint64_t *)v99);
                v198 = --v197 == 0;
              }
              while (__stlxr(v197, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v100 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v100, *v6);
              *v6 = (uint64_t)v100;
              *v100 = 1;
              do
              {
                v101 = __ldaxr((unint64_t *)v99);
                v102 = --v101 == 0;
              }
              while (__stlxr(v101, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v200 = operator new();
              v201 = *v6;
              *(_QWORD *)v200 = *(_QWORD *)*v6;
              *(_QWORD *)(v200 + 8) = *(_QWORD *)(v201 + 8);
              v202 = *(_QWORD *)(v201 + 16);
              *(_QWORD *)(v200 + 16) = v202;
              if (v202)
              {
                v203 = (unsigned int *)(v202 + 8);
                do
                  v204 = __ldxr(v203);
                while (__stxr(v204 + 1, v203));
              }
              v205 = *(_OWORD *)(v201 + 24);
              v206 = *(_OWORD *)(v201 + 40);
              *(_OWORD *)(v200 + 56) = *(_OWORD *)(v201 + 56);
              *(_OWORD *)(v200 + 40) = v206;
              *(_OWORD *)(v200 + 24) = v205;
              *v6 = v200;
              *(_QWORD *)v200 = 1;
              do
              {
                v207 = __ldaxr((unint64_t *)v199);
                v208 = --v207 == 0;
              }
              while (__stlxr(v207, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v52 = (_QWORD *)operator new();
              v53 = *v6 + 8;
              *v52 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v52 + 1, v53);
              *v6 = (uint64_t)v52;
              *v52 = 1;
              do
              {
                v54 = __ldaxr(v51);
                v55 = --v54 == 0;
              }
              while (__stlxr(v54, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 5:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v45 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v45, *v6);
              *v6 = (uint64_t)v45;
              *v45 = 1;
              do
              {
                v46 = __ldaxr((unint64_t *)v27);
                v30 = --v46 == 0;
              }
              while (__stlxr(v46, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v321 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v321, *v6);
              *v6 = (uint64_t)v321;
              *v321 = 1;
              do
              {
                v322 = __ldaxr(v191);
                v194 = --v322 == 0;
              }
              while (__stlxr(v322, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v323 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *v6);
              *v6 = (uint64_t)v323;
              *v323 = 1;
              do
              {
                v324 = __ldaxr((unint64_t *)v99);
                v198 = --v324 == 0;
              }
              while (__stlxr(v324, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v271 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v271, *v6);
              *v6 = (uint64_t)v271;
              *v271 = 1;
              do
              {
                v272 = __ldaxr((unint64_t *)v99);
                v102 = --v272 == 0;
              }
              while (__stlxr(v272, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v327 = operator new();
              v328 = *v6;
              *(_QWORD *)v327 = *(_QWORD *)*v6;
              *(_QWORD *)(v327 + 8) = *(_QWORD *)(v328 + 8);
              v329 = *(_QWORD *)(v328 + 16);
              *(_QWORD *)(v327 + 16) = v329;
              if (v329)
              {
                v330 = (unsigned int *)(v329 + 8);
                do
                  v331 = __ldxr(v330);
                while (__stxr(v331 + 1, v330));
              }
              v332 = *(_OWORD *)(v328 + 24);
              v333 = *(_OWORD *)(v328 + 40);
              *(_OWORD *)(v327 + 56) = *(_OWORD *)(v328 + 56);
              *(_OWORD *)(v327 + 40) = v333;
              *(_OWORD *)(v327 + 24) = v332;
              *v6 = v327;
              *(_QWORD *)v327 = 1;
              do
              {
                v334 = __ldaxr((unint64_t *)v199);
                v208 = --v334 == 0;
              }
              while (__stlxr(v334, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v211 = (_QWORD *)operator new();
              v212 = *v6 + 8;
              *v211 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v211 + 1, v212);
              *v6 = (uint64_t)v211;
              *v211 = 1;
              do
              {
                v213 = __ldaxr(v51);
                v55 = --v213 == 0;
              }
              while (__stlxr(v213, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 6:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v47 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v47, *v6);
              *v6 = (uint64_t)v47;
              *v47 = 1;
              do
              {
                v48 = __ldaxr((unint64_t *)v27);
                v30 = --v48 == 0;
              }
              while (__stlxr(v48, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v325 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v325, *v6);
              *v6 = (uint64_t)v325;
              *v325 = 1;
              do
              {
                v326 = __ldaxr(v191);
                v194 = --v326 == 0;
              }
              while (__stlxr(v326, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v335 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v335, *v6);
              *v6 = (uint64_t)v335;
              *v335 = 1;
              do
              {
                v336 = __ldaxr((unint64_t *)v99);
                v198 = --v336 == 0;
              }
              while (__stlxr(v336, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v281 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v281, *v6);
              *v6 = (uint64_t)v281;
              *v281 = 1;
              do
              {
                v282 = __ldaxr((unint64_t *)v99);
                v102 = --v282 == 0;
              }
              while (__stlxr(v282, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v340 = operator new();
              v341 = *v6;
              *(_QWORD *)v340 = *(_QWORD *)*v6;
              *(_QWORD *)(v340 + 8) = *(_QWORD *)(v341 + 8);
              v342 = *(_QWORD *)(v341 + 16);
              *(_QWORD *)(v340 + 16) = v342;
              if (v342)
              {
                v343 = (unsigned int *)(v342 + 8);
                do
                  v344 = __ldxr(v343);
                while (__stxr(v344 + 1, v343));
              }
              v345 = *(_OWORD *)(v341 + 24);
              v346 = *(_OWORD *)(v341 + 40);
              *(_OWORD *)(v340 + 56) = *(_OWORD *)(v341 + 56);
              *(_OWORD *)(v340 + 40) = v346;
              *(_OWORD *)(v340 + 24) = v345;
              *v6 = v340;
              *(_QWORD *)v340 = 1;
              do
              {
                v347 = __ldaxr((unint64_t *)v199);
                v208 = --v347 == 0;
              }
              while (__stlxr(v347, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v226 = (_QWORD *)operator new();
              v227 = *v6 + 8;
              *v226 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v226 + 1, v227);
              *v6 = (uint64_t)v226;
              *v226 = 1;
              do
              {
                v228 = __ldaxr(v51);
                v55 = --v228 == 0;
              }
              while (__stlxr(v228, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 7:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v43 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v43, *v6);
              *v6 = (uint64_t)v43;
              *v43 = 1;
              do
              {
                v44 = __ldaxr((unint64_t *)v27);
                v30 = --v44 == 0;
              }
              while (__stlxr(v44, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v269 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v269, *v6);
              *v6 = (uint64_t)v269;
              *v269 = 1;
              do
              {
                v270 = __ldaxr(v191);
                v194 = --v270 == 0;
              }
              while (__stlxr(v270, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v277 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v277, *v6);
              *v6 = (uint64_t)v277;
              *v277 = 1;
              do
              {
                v278 = __ldaxr((unint64_t *)v99);
                v198 = --v278 == 0;
              }
              while (__stlxr(v278, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v216 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v216, *v6);
              *v6 = (uint64_t)v216;
              *v216 = 1;
              do
              {
                v217 = __ldaxr((unint64_t *)v99);
                v102 = --v217 == 0;
              }
              while (__stlxr(v217, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v291 = operator new();
              v292 = *v6;
              *(_QWORD *)v291 = *(_QWORD *)*v6;
              *(_QWORD *)(v291 + 8) = *(_QWORD *)(v292 + 8);
              v293 = *(_QWORD *)(v292 + 16);
              *(_QWORD *)(v291 + 16) = v293;
              if (v293)
              {
                v294 = (unsigned int *)(v293 + 8);
                do
                  v295 = __ldxr(v294);
                while (__stxr(v295 + 1, v294));
              }
              v296 = *(_OWORD *)(v292 + 24);
              v297 = *(_OWORD *)(v292 + 40);
              *(_OWORD *)(v291 + 56) = *(_OWORD *)(v292 + 56);
              *(_OWORD *)(v291 + 40) = v297;
              *(_OWORD *)(v291 + 24) = v296;
              *v6 = v291;
              *(_QWORD *)v291 = 1;
              do
              {
                v298 = __ldaxr((unint64_t *)v199);
                v208 = --v298 == 0;
              }
              while (__stlxr(v298, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v126 = (_QWORD *)operator new();
              v127 = *v6 + 8;
              *v126 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v126 + 1, v127);
              *v6 = (uint64_t)v126;
              *v126 = 1;
              do
              {
                v128 = __ldaxr(v51);
                v55 = --v128 == 0;
              }
              while (__stlxr(v128, v51));
              goto LABEL_289;
            default:
              turi::apply_binary_op_ff();
          }
        case 8:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v49 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v49, *v6);
              *v6 = (uint64_t)v49;
              *v49 = 1;
              do
              {
                v50 = __ldaxr((unint64_t *)v27);
                v30 = --v50 == 0;
              }
              while (__stlxr(v50, (unint64_t *)v27));
              goto LABEL_265;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v337 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v337, *v6);
              *v6 = (uint64_t)v337;
              *v337 = 1;
              do
              {
                v338 = __ldaxr(v191);
                v194 = --v338 == 0;
              }
              while (__stlxr(v338, v191));
              goto LABEL_417;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v348 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v348, *v6);
              *v6 = (uint64_t)v348;
              *v348 = 1;
              do
              {
                v349 = __ldaxr((unint64_t *)v99);
                v198 = --v349 == 0;
              }
              while (__stlxr(v349, (unint64_t *)v99));
              goto LABEL_432;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v299 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v299, *v6);
              *v6 = (uint64_t)v299;
              *v299 = 1;
              do
              {
                v300 = __ldaxr((unint64_t *)v99);
                v102 = --v300 == 0;
              }
              while (__stlxr(v300, (unint64_t *)v99));
              goto LABEL_374;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v350 = operator new();
              v351 = *v6;
              *(_QWORD *)v350 = *(_QWORD *)*v6;
              *(_QWORD *)(v350 + 8) = *(_QWORD *)(v351 + 8);
              v352 = *(_QWORD *)(v351 + 16);
              *(_QWORD *)(v350 + 16) = v352;
              if (v352)
              {
                v353 = (unsigned int *)(v352 + 8);
                do
                  v354 = __ldxr(v353);
                while (__stxr(v354 + 1, v353));
              }
              v355 = *(_OWORD *)(v351 + 24);
              v356 = *(_OWORD *)(v351 + 40);
              *(_OWORD *)(v350 + 56) = *(_OWORD *)(v351 + 56);
              *(_OWORD *)(v350 + 40) = v356;
              *(_OWORD *)(v350 + 24) = v355;
              *v6 = v350;
              *(_QWORD *)v350 = 1;
              do
              {
                v357 = __ldaxr((unint64_t *)v199);
                v208 = --v357 == 0;
              }
              while (__stlxr(v357, (unint64_t *)v199));
              goto LABEL_443;
            case 9:
              v51 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v241 = (_QWORD *)operator new();
              v242 = *v6 + 8;
              *v241 = *(_QWORD *)*v6;
              turi::flexible_type_impl::ndarray<double>::ndarray(v241 + 1, v242);
              *v6 = (uint64_t)v241;
              *v241 = 1;
              do
              {
                v243 = __ldaxr(v51);
                v55 = --v243 == 0;
              }
              while (__stlxr(v243, v51));
LABEL_289:
              if (!v55)
                goto LABEL_448;
              v224 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v51);
              v244 = 2071181815;
              goto LABEL_446;
            default:
              turi::apply_binary_op_ff();
          }
        case 9:
          switch(v7)
          {
            case 0:
            case 1:
            case 6:
            case 7:
              goto LABEL_448;
            case 2:
              v27 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v31 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v31, *v6);
              *v6 = (uint64_t)v31;
              *v31 = 1;
              do
              {
                v32 = __ldaxr((unint64_t *)v27);
                v30 = --v32 == 0;
              }
              while (__stlxr(v32, (unint64_t *)v27));
LABEL_265:
              if (!v30)
                goto LABEL_448;
              if (*(char *)(v27 + 31) < 0)
                operator delete(*(void **)(v27 + 8));
              v224 = (_QWORD *)v27;
              v225 = 0x1012C404EF22A49;
              goto LABEL_447;
            case 3:
              v191 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v209 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v209, *v6);
              *v6 = (uint64_t)v209;
              *v209 = 1;
              do
              {
                v210 = __ldaxr(v191);
                v194 = --v210 == 0;
              }
              while (__stlxr(v210, v191));
LABEL_417:
              if (!v194)
                goto LABEL_448;
              v339 = (void *)v191[1];
              if (v339)
              {
                v191[2] = (unint64_t)v339;
                operator delete(v339);
              }
              v224 = v191;
              v225 = 0x1080C409938AC02;
              goto LABEL_447;
            case 4:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v220 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v220, *v6);
              *v6 = (uint64_t)v220;
              *v220 = 1;
              do
              {
                v221 = __ldaxr((unint64_t *)v99);
                v198 = --v221 == 0;
              }
              while (__stlxr(v221, (unint64_t *)v99));
LABEL_432:
              if (!v198)
                goto LABEL_436;
              v359 = (void **)(v99 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v359);
              goto LABEL_435;
            case 5:
              v99 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_436;
              v124 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v124, *v6);
              *v6 = (uint64_t)v124;
              *v124 = 1;
              do
              {
                v125 = __ldaxr((unint64_t *)v99);
                v102 = --v125 == 0;
              }
              while (__stlxr(v125, (unint64_t *)v99));
LABEL_374:
              if (!v102)
                goto LABEL_436;
              v359 = (void **)(v99 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v359);
LABEL_435:
              MEMORY[0x219A19A08](v99, 0x1020C405E66F15BLL);
LABEL_436:
              turi::flexible_type_fail(0);
              return;
            case 8:
              v199 = *v6;
              if (*(_QWORD *)*v6 == 1)
                goto LABEL_448;
              v229 = operator new();
              v230 = *v6;
              *(_QWORD *)v229 = *(_QWORD *)*v6;
              *(_QWORD *)(v229 + 8) = *(_QWORD *)(v230 + 8);
              v231 = *(_QWORD *)(v230 + 16);
              *(_QWORD *)(v229 + 16) = v231;
              if (v231)
              {
                v232 = (unsigned int *)(v231 + 8);
                do
                  v233 = __ldxr(v232);
                while (__stxr(v233 + 1, v232));
              }
              v234 = *(_OWORD *)(v230 + 24);
              v235 = *(_OWORD *)(v230 + 40);
              *(_OWORD *)(v229 + 56) = *(_OWORD *)(v230 + 56);
              *(_OWORD *)(v229 + 40) = v235;
              *(_OWORD *)(v229 + 24) = v234;
              *v6 = v229;
              *(_QWORD *)v229 = 1;
              do
              {
                v236 = __ldaxr((unint64_t *)v199);
                v208 = --v236 == 0;
              }
              while (__stlxr(v236, (unint64_t *)v199));
LABEL_443:
              if (!v208)
                goto LABEL_448;
              boost::detail::shared_count::~shared_count((unsigned int **)(v199 + 16));
              v224 = (_QWORD *)v199;
              v244 = -235920773;
LABEL_446:
              v225 = v244 | 0x1030C4000000000;
LABEL_447:
              MEMORY[0x219A19A08](v224, v225);
LABEL_448:
              turi::flexible_type_fail(0);
              return;
            case 9:
              v56 = *(_QWORD *)(a2 + 8);
              v57 = (unint64_t *)*v6;
              if (*(_QWORD *)*v6 != 1)
              {
                v58 = (_QWORD *)operator new();
                v59 = *v6 + 8;
                *v58 = *(_QWORD *)*v6;
                turi::flexible_type_impl::ndarray<double>::ndarray(v58 + 1, v59);
                *v6 = (uint64_t)v58;
                *v58 = 1;
                do
                {
                  v60 = __ldaxr(v57);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v57));
                if (!v61)
                {
                  v62 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v57);
                  MEMORY[0x219A19A08](v62, 0x1030C407B73B9F7);
                }
              }
              v63 = *v6;
              v64 = (uint64_t *)(*v6 + 8);
              if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v64, v56 + 8))
                turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
              v66 = *(uint64_t **)(v63 + 24);
              v65 = *(uint64_t **)(v63 + 32);
              if (v65 == v66)
                return;
              if (!*v64)
                return;
              v67 = 1;
              do
              {
                v68 = *v66++;
                v67 *= v68;
              }
              while (v66 != v65);
              if (!v67)
                return;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v64);
              v69 = (uint64_t)(*(_QWORD *)(v63 + 32) - *(_QWORD *)(v63 + 24)) >> 3;
              v358 = 0;
              std::vector<unsigned long>::vector(&v359, v69, &v358);
              v70 = v359;
              v71 = v360;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return;
        default:
          turi::apply_binary_op_ff();
      }
      do
      {
        v72 = (char *)v71 - (char *)v70;
        if (v72)
        {
          v73 = 0;
          v74 = v72 >> 3;
          v75 = *(uint64_t **)(v56 + 48);
          if (v74 <= 1)
            v74 = 1;
          v76 = v70;
          v77 = v74;
          do
          {
            v79 = (uint64_t)*v76++;
            v78 = v79;
            v80 = *v75++;
            v73 += v80 * v78;
            --v77;
          }
          while (v77);
          v81 = 0;
          v82 = *(double *)(**(_QWORD **)(v56 + 8) + 8 * (*(_QWORD *)(v56 + 72) + v73));
          v83 = *(uint64_t **)(v63 + 48);
          do
          {
            v85 = (uint64_t)*v70++;
            v84 = v85;
            v86 = *v83++;
            v81 += v86 * v84;
            --v74;
          }
          while (v74);
        }
        else
        {
          v81 = 0;
          v82 = *(double *)(**(_QWORD **)(v56 + 8) + 8 * *(_QWORD *)(v56 + 72));
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v64);
        *(double *)(**(_QWORD **)(v63 + 8) + 8 * (*(_QWORD *)(v63 + 72) + v81)) = v82
                                                                                + *(double *)(**(_QWORD **)(v63 + 8)
                                                                                            + 8
                                                                                            * (*(_QWORD *)(v63 + 72)
                                                                                             + v81));
        v70 = v359;
        v71 = v360;
        v87 = v360 - v359;
        v88 = v87 - 1;
        if ((char *)v360 - (char *)v359 >= 1)
        {
          v89 = *(_QWORD *)(v63 + 24);
          v90 = (char *)v359[v88] + 1;
          v359[v88] = v90;
          if ((unint64_t)v90 >= *(_QWORD *)(v89 + 8 * v88))
          {
            v91 = (unint64_t *)&v70[v87 - 2];
            v92 = v89 - 16;
            while (1)
            {
              v93 = v87 - 1;
              v91[1] = 0;
              if (v87 - 1 <= 0)
                goto LABEL_217;
              v94 = *v91 + 1;
              *v91-- = v94;
              v95 = *(_QWORD *)(v92 + 8 * v87--);
              if (v94 < v95)
              {
                v88 = v93 - 1;
                break;
              }
            }
          }
          v87 = 1;
        }
      }
      while ((v88 & 0x8000000000000000) == 0 && v87);
LABEL_216:
      if (!v70)
        return;
LABEL_217:
      v360 = v70;
      operator delete(v70);
      return;
    }
LABEL_21:
    **a1 = 1;
  }
}

void sub_2182061C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_218206300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x2182062F8);
}

_QWORD *turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::~generic_aggregator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24D932038;
  v2 = (uint64_t)(a1 + 2);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)(a1 + 5));
  std::pair<BOOL,turi::flexible_type>::~pair(v2);
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::new_instance(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::generic_aggregator(v2, *(_QWORD *)(a1 + 8), (char *)(a1 + 16));
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::add_element_simple(uint64_t a1, _BYTE *a2)
{
  turi::unity_sarray::sum(void)::$_1::operator()((_BYTE **)(a1 + 8), a2, a1 + 40);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine()
{
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec((uint64_t)&v8, a1 + 40);
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_2182064A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type()
{
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name()
{
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save()
{
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load()
{
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::~generic_aggregator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_24D932038;
  v1 = (uint64_t)(a1 + 2);
  std::pair<BOOL,turi::flexible_type>::~pair((uint64_t)(a1 + 5));
  std::pair<BOOL,turi::flexible_type>::~pair(v1);
  JUMPOUT(0x219A19A08);
}

void turi::unity_sarray::sum(void)::$_1::operator()(_BYTE **a1, _BYTE *a2, uint64_t a3)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  BOOL v66;
  _QWORD *v67;
  unint64_t v68;
  double v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  double v92;
  unint64_t *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void **v106;
  void **v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  void **v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  BOOL v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  double *v144;
  uint64_t v145;
  unint64_t v146;
  double v147;
  unint64_t *v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  double *v153;
  uint64_t v154;
  double v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  unint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t *v203;
  double v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void **v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  unint64_t *v227;
  _QWORD *v228;
  unint64_t v229;
  BOOL v230;
  double v231;
  _QWORD *v232;
  unint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  __int128 v241;
  __int128 v242;
  unint64_t v243;
  BOOL v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  unint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int *v268;
  unsigned int v269;
  __int128 v270;
  __int128 v271;
  unint64_t v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  unsigned int v280;
  _QWORD *v281;
  unint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  __int128 v290;
  __int128 v291;
  unint64_t v292;
  double v293;
  unint64_t *v294;
  _QWORD *v295;
  unint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  double *v300;
  uint64_t v301;
  unint64_t v302;
  double *v303;
  double v304;
  _QWORD *v305;
  unint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  _QWORD *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  __int128 v318;
  __int128 v319;
  unint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  _QWORD *v325;
  unint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  __int128 v334;
  __int128 v335;
  unint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  _QWORD *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  __int128 v346;
  __int128 v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  unint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  _QWORD *v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  _QWORD *v371;
  unint64_t v372;
  void *v373;
  _QWORD *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int *v379;
  unsigned int v380;
  __int128 v381;
  __int128 v382;
  unint64_t v383;
  _QWORD *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int *v389;
  unsigned int v390;
  __int128 v391;
  __int128 v392;
  unint64_t v393;
  uint64_t v394;
  void **v395;
  void **v396;

  if (a2[12] == 7)
    return;
  if (!*(_BYTE *)a3)
  {
    *(_BYTE *)a3 = 1;
    v12 = (unint64_t **)(a3 + 8);
    if ((_BYTE *)(a3 + 8) != a2)
    {
      switch(*(_BYTE *)(a3 + 20))
      {
        case 2:
          v13 = *v12;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = *v12;
            if (!*v12)
              goto LABEL_73;
            if (*((char *)v16 + 31) < 0)
              operator delete((void *)v16[1]);
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_72;
          }
          break;
        case 3:
          v38 = *v12;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = *v12;
            if (!*v12)
              goto LABEL_73;
            v42 = (void *)v41[1];
            if (v42)
            {
              v41[2] = (unint64_t)v42;
              operator delete(v42);
            }
            v17 = v41;
            v18 = 0x1080C409938AC02;
            goto LABEL_72;
          }
          break;
        case 4:
          v30 = *v12;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = *v12;
            if (!*v12)
              goto LABEL_73;
            v395 = (void **)(v33 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v395);
            goto LABEL_65;
          }
          break;
        case 5:
          v43 = *v12;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            v33 = *v12;
            if (!*v12)
              goto LABEL_73;
            v395 = (void **)(v33 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v395);
LABEL_65:
            v17 = v33;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_72;
          }
          break;
        case 8:
          v46 = *v12;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = *v12;
            if (!*v12)
              goto LABEL_73;
            boost::detail::shared_count::~shared_count((unsigned int **)v49 + 2);
            v17 = v49;
            v37 = -235920773;
            goto LABEL_71;
          }
          break;
        case 9:
          v34 = *v12;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            if (*v12)
            {
              v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
              v37 = 2071181815;
LABEL_71:
              v18 = v37 | 0x1030C4000000000;
LABEL_72:
              MEMORY[0x219A19A08](v17, v18);
            }
LABEL_73:
            *v12 = 0;
          }
          break;
        default:
          break;
      }
      v50 = *(unint64_t **)a2;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)(a2 + 5);
      *v12 = v50;
      LODWORD(v50) = a2[12];
      *(_BYTE *)(a3 + 20) = (_BYTE)v50;
      switch((int)v50)
      {
        case 2:
          v51 = *v12;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          break;
        case 3:
          v57 = *v12;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
          break;
        case 4:
          v53 = *v12;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          break;
        case 5:
          v59 = *v12;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          break;
        case 8:
          v61 = *v12;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 + 1, v61));
          break;
        case 9:
          v55 = *v12;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 + 1, v55));
          break;
        default:
          return;
      }
    }
    return;
  }
  v6 = (uint64_t *)(a3 + 8);
  v7 = *(unsigned __int8 *)(a3 + 20);
  if (v7 == 9)
  {
    if (!turi::flexible_type_impl::ndarray<double>::same_shape(*v6 + 8, *(_QWORD *)a2 + 8))
    {
LABEL_29:
      **a1 = 1;
      return;
    }
    v7 = *(unsigned __int8 *)(a3 + 20);
  }
  v8 = 1;
  switch(v7)
  {
    case 3:
      v9 = (_QWORD *)(*v6 + 8);
      v10 = (_QWORD *)(*v6 + 16);
      v11 = 3;
      goto LABEL_19;
    case 4:
      v9 = (_QWORD *)(*v6 + 8);
      v10 = (_QWORD *)(*v6 + 16);
      v11 = 4;
      goto LABEL_19;
    case 5:
      v9 = (_QWORD *)(*v6 + 8);
      v10 = (_QWORD *)(*v6 + 16);
      v11 = 5;
LABEL_19:
      v8 = (uint64_t)(*v10 - *v9) >> v11;
      break;
    case 9:
      v25 = *(uint64_t **)(*v6 + 24);
      v24 = *(uint64_t **)(*v6 + 32);
      if (v24 == v25)
      {
        v8 = 0;
      }
      else
      {
        v8 = *(_QWORD *)(*v6 + 8);
        if (v8)
        {
          v8 = 1;
          do
          {
            v26 = *v25++;
            v8 *= v26;
          }
          while (v25 != v24);
        }
      }
      break;
    default:
      break;
  }
  v19 = 1;
  switch(a2[12])
  {
    case 3:
      v20 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v21 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v22 = 3;
      goto LABEL_24;
    case 4:
      v20 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v21 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v22 = 4;
      goto LABEL_24;
    case 5:
      v20 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v21 = (_QWORD *)(*(_QWORD *)a2 + 16);
      v22 = 5;
LABEL_24:
      v19 = (uint64_t)(*v21 - *v20) >> v22;
      break;
    case 9:
      v28 = *(uint64_t **)(*(_QWORD *)a2 + 24);
      v27 = *(uint64_t **)(*(_QWORD *)a2 + 32);
      if (v27 == v28)
      {
        v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)a2 + 8);
        if (v19)
        {
          v19 = 1;
          do
          {
            v29 = *v28++;
            v19 *= v29;
          }
          while (v28 != v27);
        }
      }
      break;
    default:
      break;
  }
  if (v8 != v19)
    goto LABEL_29;
  switch(a2[12])
  {
    case 0:
      switch(v7)
      {
        case 0:
          v23 = *v6 + *(_QWORD *)a2;
          goto LABEL_130;
        case 1:
          v231 = *(double *)v6 + (double)*(uint64_t *)a2;
          goto LABEL_351;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v252 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v252, *v6);
          *v6 = (uint64_t)v252;
          *v252 = 1;
          do
          {
            v253 = __ldaxr((unint64_t *)v63);
            v66 = --v253 == 0;
          }
          while (__stlxr(v253, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v139 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v140 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v140, *v6);
            *v6 = (uint64_t)v140;
            *v140 = 1;
            do
            {
              v141 = __ldaxr(v139);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v139));
            if (!v142)
            {
              v143 = (void *)v139[1];
              if (v143)
              {
                v139[2] = (unint64_t)v143;
                operator delete(v143);
              }
              MEMORY[0x219A19A08](v139, 0x1080C409938AC02);
            }
          }
          v144 = *(double **)(*v6 + 8);
          v145 = *(_QWORD *)(*v6 + 16) - (_QWORD)v144;
          if (v145)
          {
            v146 = v145 >> 3;
            v147 = (double)*(uint64_t *)a2;
            if (v146 <= 1)
              v146 = 1;
            do
            {
              *v144 = *v144 + v147;
              ++v144;
              --v146;
            }
            while (v146);
          }
          return;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v311 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v311, *v6);
          *v6 = (uint64_t)v311;
          *v311 = 1;
          do
          {
            v312 = __ldaxr((unint64_t *)v135);
            v234 = --v312 == 0;
          }
          while (__stlxr(v312, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v327 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v327, *v6);
          *v6 = (uint64_t)v327;
          *v327 = 1;
          do
          {
            v328 = __ldaxr((unint64_t *)v135);
            v138 = --v328 == 0;
          }
          while (__stlxr(v328, (unint64_t *)v135));
          goto LABEL_432;
        case 6:
          *v6 = *v6 & 0xFF00000000000000 | (*v6 + *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL;
          return;
        case 7:
          goto LABEL_506;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v341 = operator new();
          v342 = *v6;
          *(_QWORD *)v341 = *(_QWORD *)*v6;
          *(_QWORD *)(v341 + 8) = *(_QWORD *)(v342 + 8);
          v343 = *(_QWORD *)(v342 + 16);
          *(_QWORD *)(v341 + 16) = v343;
          if (v343)
          {
            v344 = (unsigned int *)(v343 + 8);
            do
              v345 = __ldxr(v344);
            while (__stxr(v345 + 1, v344));
          }
          v346 = *(_OWORD *)(v342 + 24);
          v347 = *(_OWORD *)(v342 + 40);
          *(_OWORD *)(v341 + 56) = *(_OWORD *)(v342 + 56);
          *(_OWORD *)(v341 + 40) = v347;
          *(_OWORD *)(v341 + 24) = v346;
          *v6 = v341;
          *(_QWORD *)v341 = 1;
          do
          {
            v348 = __ldaxr((unint64_t *)v235);
            v244 = --v348 == 0;
          }
          while (__stlxr(v348, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v165 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v166 = (_QWORD *)operator new();
            v167 = *v6 + 8;
            *v166 = *(_QWORD *)*v6;
            turi::flexible_type_impl::ndarray<double>::ndarray(v166 + 1, v167);
            *v6 = (uint64_t)v166;
            *v166 = 1;
            do
            {
              v168 = __ldaxr(v165);
              v169 = v168 - 1;
            }
            while (__stlxr(v169, v165));
            if (!v169)
            {
              v170 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v165);
              MEMORY[0x219A19A08](v170, 0x1030C407B73B9F7);
            }
          }
          v171 = (uint64_t *)*v6;
          v173 = *(uint64_t **)(*v6 + 24);
          v172 = *(uint64_t **)(*v6 + 32);
          if (v172 == v173)
            return;
          if (!v171[1])
            return;
          v174 = (double)*(uint64_t *)a2;
          v175 = 1;
          do
          {
            v176 = *v173++;
            v175 *= v176;
          }
          while (v173 != v172);
          if (!v175)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v171 + 1);
          v177 = (v171[4] - v171[3]) >> 3;
          v394 = 0;
          std::vector<unsigned long>::vector(&v395, v177, &v394);
          v106 = v395;
          v178 = v396;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v179 = 0;
        v180 = (char *)v178 - (char *)v106;
        if (v180)
        {
          v181 = v180 >> 3;
          v182 = (uint64_t *)v171[6];
          if (v181 <= 1)
            v181 = 1;
          do
          {
            v184 = (uint64_t)*v106++;
            v183 = v184;
            v185 = *v182++;
            v179 += v185 * v183;
            --v181;
          }
          while (v181);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v171 + 1);
        *(double *)(*(_QWORD *)v171[1] + 8 * (v171[9] + v179)) = *(double *)(*(_QWORD *)v171[1] + 8 * (v171[9] + v179))
                                                               + v174;
        v106 = v395;
        v178 = v396;
        v186 = v396 - v395;
        v187 = v186 - 1;
        if ((char *)v396 - (char *)v395 < 1)
          goto LABEL_247;
        v188 = v171[3];
        v189 = (char *)v395[v187] + 1;
        v395[v187] = v189;
        if ((unint64_t)v189 < *(_QWORD *)(v188 + 8 * v187))
        {
LABEL_246:
          v186 = 1;
LABEL_247:
          if (v187 < 0 || !v186)
            goto LABEL_274;
          continue;
        }
        break;
      }
      v190 = (unint64_t *)&v106[v186 - 2];
      v191 = v188 - 16;
      while (1)
      {
        v192 = v186 - 1;
        v190[1] = 0;
        if (v186 - 1 <= 0)
          goto LABEL_275;
        v193 = *v190 + 1;
        *v190-- = v193;
        v194 = *(_QWORD *)(v191 + 8 * v186--);
        if (v193 < v194)
        {
          v187 = v192 - 1;
          goto LABEL_246;
        }
      }
    case 1:
      switch(v7)
      {
        case 0:
          v23 = (uint64_t)(*(double *)a2 + (double)*v6);
LABEL_130:
          *v6 = v23;
          return;
        case 1:
          v231 = *(double *)a2 + *(double *)v6;
LABEL_351:
          *(double *)v6 = v231;
          return;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v258 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v258, *v6);
          *v6 = (uint64_t)v258;
          *v258 = 1;
          do
          {
            v259 = __ldaxr((unint64_t *)v63);
            v66 = --v259 == 0;
          }
          while (__stlxr(v259, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v148 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v149 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v149, *v6);
            *v6 = (uint64_t)v149;
            *v149 = 1;
            do
            {
              v150 = __ldaxr(v148);
              v151 = v150 - 1;
            }
            while (__stlxr(v151, v148));
            if (!v151)
            {
              v152 = (void *)v148[1];
              if (v152)
              {
                v148[2] = (unint64_t)v152;
                operator delete(v152);
              }
              MEMORY[0x219A19A08](v148, 0x1080C409938AC02);
            }
          }
          v153 = *(double **)(*v6 + 8);
          v154 = *(_QWORD *)(*v6 + 16) - (_QWORD)v153;
          if (v154)
          {
            v155 = *(double *)a2;
            v156 = v154 >> 3;
            if (v156 <= 1)
              v156 = 1;
            do
            {
              *v153 = v155 + *v153;
              ++v153;
              --v156;
            }
            while (v156);
          }
          return;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v323 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, *v6);
          *v6 = (uint64_t)v323;
          *v323 = 1;
          do
          {
            v324 = __ldaxr((unint64_t *)v135);
            v234 = --v324 == 0;
          }
          while (__stlxr(v324, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v337 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v337, *v6);
          *v6 = (uint64_t)v337;
          *v337 = 1;
          do
          {
            v338 = __ldaxr((unint64_t *)v135);
            v138 = --v338 == 0;
          }
          while (__stlxr(v338, (unint64_t *)v135));
          goto LABEL_432;
        case 6:
          v273 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
          v274 = *(_QWORD *)(a3 + 8);
          v275 = v274 + vcvtmd_s64_f64(*(double *)a2);
          *(_QWORD *)(a3 + 8) = v274 & 0xFF00000000000000 | v275 & 0xFFFFFFFFFFFFFFLL;
          v276 = (uint64_t)v273 + *(int *)(a3 + 16);
          if (v276 >= 1000000)
          {
            *v6 = (v275 + 1) & 0xFFFFFFFFFFFFFFLL | v274 & 0xFF00000000000000;
            LODWORD(v276) = v276 - 1000000;
          }
          if (v276 >= 0xF4240)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *(_DWORD *)(a3 + 16) = v276;
          return;
        case 7:
          goto LABEL_506;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v349 = operator new();
          v350 = *v6;
          *(_QWORD *)v349 = *(_QWORD *)*v6;
          *(_QWORD *)(v349 + 8) = *(_QWORD *)(v350 + 8);
          v351 = *(_QWORD *)(v350 + 16);
          *(_QWORD *)(v349 + 16) = v351;
          if (v351)
          {
            v352 = (unsigned int *)(v351 + 8);
            do
              v353 = __ldxr(v352);
            while (__stxr(v353 + 1, v352));
          }
          v354 = *(_OWORD *)(v350 + 24);
          v355 = *(_OWORD *)(v350 + 40);
          *(_OWORD *)(v349 + 56) = *(_OWORD *)(v350 + 56);
          *(_OWORD *)(v349 + 40) = v355;
          *(_OWORD *)(v349 + 24) = v354;
          *v6 = v349;
          *(_QWORD *)v349 = 1;
          do
          {
            v356 = __ldaxr((unint64_t *)v235);
            v244 = --v356 == 0;
          }
          while (__stlxr(v356, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v195 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v196 = (_QWORD *)operator new();
            v197 = *v6 + 8;
            *v196 = *(_QWORD *)*v6;
            turi::flexible_type_impl::ndarray<double>::ndarray(v196 + 1, v197);
            *v6 = (uint64_t)v196;
            *v196 = 1;
            do
            {
              v198 = __ldaxr(v195);
              v199 = v198 - 1;
            }
            while (__stlxr(v199, v195));
            if (!v199)
            {
              v200 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v195);
              MEMORY[0x219A19A08](v200, 0x1030C407B73B9F7);
            }
          }
          v201 = (uint64_t *)*v6;
          v203 = *(uint64_t **)(*v6 + 24);
          v202 = *(uint64_t **)(*v6 + 32);
          if (v202 == v203)
            return;
          if (!v201[1])
            return;
          v204 = *(double *)a2;
          v205 = 1;
          do
          {
            v206 = *v203++;
            v205 *= v206;
          }
          while (v203 != v202);
          if (!v205)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v201 + 1);
          v207 = (v201[4] - v201[3]) >> 3;
          v394 = 0;
          std::vector<unsigned long>::vector(&v395, v207, &v394);
          v106 = v395;
          v208 = v396;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      while (2)
      {
        v209 = 0;
        v210 = (char *)v208 - (char *)v106;
        if (v210)
        {
          v211 = v210 >> 3;
          v212 = (uint64_t *)v201[6];
          if (v211 <= 1)
            v211 = 1;
          do
          {
            v214 = (uint64_t)*v106++;
            v213 = v214;
            v215 = *v212++;
            v209 += v215 * v213;
            --v211;
          }
          while (v211);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v201 + 1);
        *(double *)(*(_QWORD *)v201[1] + 8 * (v201[9] + v209)) = v204
                                                               + *(double *)(*(_QWORD *)v201[1] + 8 * (v201[9] + v209));
        v106 = v395;
        v208 = v396;
        v216 = v396 - v395;
        v217 = v216 - 1;
        if ((char *)v396 - (char *)v395 < 1)
          goto LABEL_272;
        v218 = v201[3];
        v219 = (char *)v395[v217] + 1;
        v395[v217] = v219;
        if ((unint64_t)v219 < *(_QWORD *)(v218 + 8 * v217))
        {
LABEL_271:
          v216 = 1;
LABEL_272:
          if (v217 < 0 || !v216)
            goto LABEL_274;
          continue;
        }
        break;
      }
      v220 = (unint64_t *)&v106[v216 - 2];
      v221 = v218 - 16;
      while (1)
      {
        v222 = v216 - 1;
        v220[1] = 0;
        if (v216 - 1 <= 0)
          goto LABEL_275;
        v223 = *v220 + 1;
        *v220-- = v223;
        v224 = *(_QWORD *)(v221 + 8 * v216--);
        if (v223 < v224)
        {
          v217 = v222 - 1;
          goto LABEL_271;
        }
      }
    case 2:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v69 = *(double *)a2;
          v70 = *v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v71 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v71, *v6);
            *v6 = (uint64_t)v71;
            *v71 = 1;
            do
            {
              v72 = __ldaxr((unint64_t *)v70);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, (unint64_t *)v70));
            if (!v73)
            {
              if (*(char *)(v70 + 31) < 0)
                operator delete(*(void **)(v70 + 8));
              MEMORY[0x219A19A08](v70, 0x1012C404EF22A49);
            }
          }
          v74 = *(char *)(*(_QWORD *)&v69 + 31);
          if (v74 >= 0)
            v75 = (const std::string::value_type *)(*(_QWORD *)&v69 + 8);
          else
            v75 = *(const std::string::value_type **)(*(_QWORD *)&v69 + 8);
          if (v74 >= 0)
            v76 = *(unsigned __int8 *)(*(_QWORD *)&v69 + 31);
          else
            v76 = *(_QWORD *)(*(_QWORD *)&v69 + 16);
          std::string::append((std::string *)(*v6 + 8), v75, v76);
          return;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v281 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v281, *v6);
          *v6 = (uint64_t)v281;
          *v281 = 1;
          do
          {
            v282 = __ldaxr(v227);
            v230 = --v282 == 0;
          }
          while (__stlxr(v282, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v283 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v283, *v6);
          *v6 = (uint64_t)v283;
          *v283 = 1;
          do
          {
            v284 = __ldaxr((unint64_t *)v135);
            v234 = --v284 == 0;
          }
          while (__stlxr(v284, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v225 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v225, *v6);
          *v6 = (uint64_t)v225;
          *v225 = 1;
          do
          {
            v226 = __ldaxr((unint64_t *)v135);
            v138 = --v226 == 0;
          }
          while (__stlxr(v226, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v285 = operator new();
          v286 = *v6;
          *(_QWORD *)v285 = *(_QWORD *)*v6;
          *(_QWORD *)(v285 + 8) = *(_QWORD *)(v286 + 8);
          v287 = *(_QWORD *)(v286 + 16);
          *(_QWORD *)(v285 + 16) = v287;
          if (v287)
          {
            v288 = (unsigned int *)(v287 + 8);
            do
              v289 = __ldxr(v288);
            while (__stxr(v289 + 1, v288));
          }
          v290 = *(_OWORD *)(v286 + 24);
          v291 = *(_OWORD *)(v286 + 40);
          *(_OWORD *)(v285 + 56) = *(_OWORD *)(v286 + 56);
          *(_OWORD *)(v285 + 40) = v291;
          *(_OWORD *)(v285 + 24) = v290;
          *v6 = v285;
          *(_QWORD *)v285 = 1;
          do
          {
            v292 = __ldaxr((unint64_t *)v235);
            v244 = --v292 == 0;
          }
          while (__stlxr(v292, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v132 = (_QWORD *)operator new();
          v133 = *v6 + 8;
          *v132 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v132 + 1, v133);
          *v6 = (uint64_t)v132;
          *v132 = 1;
          do
          {
            v134 = __ldaxr(v87);
            v91 = --v134 == 0;
          }
          while (__stlxr(v134, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v77 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v77, *v6);
          *v6 = (uint64_t)v77;
          *v77 = 1;
          do
          {
            v78 = __ldaxr((unint64_t *)v63);
            v66 = --v78 == 0;
          }
          while (__stlxr(v78, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v293 = *(double *)a2;
          v294 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v295 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v295, *v6);
            *v6 = (uint64_t)v295;
            *v295 = 1;
            do
            {
              v296 = __ldaxr(v294);
              v297 = v296 - 1;
            }
            while (__stlxr(v297, v294));
            if (!v297)
            {
              v298 = (void *)v294[1];
              if (v298)
              {
                v294[2] = (unint64_t)v298;
                operator delete(v298);
              }
              MEMORY[0x219A19A08](v294, 0x1080C409938AC02);
            }
          }
          v299 = *v6;
          turi::flexible_type_fail(*(_QWORD *)(*v6 + 16) - *(_QWORD *)(*v6 + 8) == *(_QWORD *)(*(_QWORD *)&v293 + 16)
                                                                                 - *(_QWORD *)(*(_QWORD *)&v293 + 8));
          v300 = *(double **)(v299 + 8);
          v301 = *(_QWORD *)(v299 + 16) - (_QWORD)v300;
          if (v301)
          {
            v302 = v301 >> 3;
            v303 = *(double **)(*(_QWORD *)&v293 + 8);
            if (v302 <= 1)
              v302 = 1;
            do
            {
              v304 = *v303++;
              *v300 = v304 + *v300;
              ++v300;
              --v302;
            }
            while (v302);
          }
          return;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v309 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v309, *v6);
          *v6 = (uint64_t)v309;
          *v309 = 1;
          do
          {
            v310 = __ldaxr((unint64_t *)v135);
            v234 = --v310 == 0;
          }
          while (__stlxr(v310, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v247 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v247, *v6);
          *v6 = (uint64_t)v247;
          *v247 = 1;
          do
          {
            v248 = __ldaxr((unint64_t *)v135);
            v138 = --v248 == 0;
          }
          while (__stlxr(v248, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v313 = operator new();
          v314 = *v6;
          *(_QWORD *)v313 = *(_QWORD *)*v6;
          *(_QWORD *)(v313 + 8) = *(_QWORD *)(v314 + 8);
          v315 = *(_QWORD *)(v314 + 16);
          *(_QWORD *)(v313 + 16) = v315;
          if (v315)
          {
            v316 = (unsigned int *)(v315 + 8);
            do
              v317 = __ldxr(v316);
            while (__stxr(v317 + 1, v316));
          }
          v318 = *(_OWORD *)(v314 + 24);
          v319 = *(_OWORD *)(v314 + 40);
          *(_OWORD *)(v313 + 56) = *(_OWORD *)(v314 + 56);
          *(_OWORD *)(v313 + 40) = v319;
          *(_OWORD *)(v313 + 24) = v318;
          *v6 = v313;
          *(_QWORD *)v313 = 1;
          do
          {
            v320 = __ldaxr((unint64_t *)v235);
            v244 = --v320 == 0;
          }
          while (__stlxr(v320, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v157 = (_QWORD *)operator new();
          v158 = *v6 + 8;
          *v157 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v157 + 1, v158);
          *v6 = (uint64_t)v157;
          *v157 = 1;
          do
          {
            v159 = __ldaxr(v87);
            v91 = --v159 == 0;
          }
          while (__stlxr(v159, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 4:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v64 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v64, *v6);
          *v6 = (uint64_t)v64;
          *v64 = 1;
          do
          {
            v65 = __ldaxr((unint64_t *)v63);
            v66 = --v65 == 0;
          }
          while (__stlxr(v65, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v228 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v228, *v6);
          *v6 = (uint64_t)v228;
          *v228 = 1;
          do
          {
            v229 = __ldaxr(v227);
            v230 = --v229 == 0;
          }
          while (__stlxr(v229, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v232 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v232, *v6);
          *v6 = (uint64_t)v232;
          *v232 = 1;
          do
          {
            v233 = __ldaxr((unint64_t *)v135);
            v234 = --v233 == 0;
          }
          while (__stlxr(v233, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v136 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v136, *v6);
          *v6 = (uint64_t)v136;
          *v136 = 1;
          do
          {
            v137 = __ldaxr((unint64_t *)v135);
            v138 = --v137 == 0;
          }
          while (__stlxr(v137, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v236 = operator new();
          v237 = *v6;
          *(_QWORD *)v236 = *(_QWORD *)*v6;
          *(_QWORD *)(v236 + 8) = *(_QWORD *)(v237 + 8);
          v238 = *(_QWORD *)(v237 + 16);
          *(_QWORD *)(v236 + 16) = v238;
          if (v238)
          {
            v239 = (unsigned int *)(v238 + 8);
            do
              v240 = __ldxr(v239);
            while (__stxr(v240 + 1, v239));
          }
          v241 = *(_OWORD *)(v237 + 24);
          v242 = *(_OWORD *)(v237 + 40);
          *(_OWORD *)(v236 + 56) = *(_OWORD *)(v237 + 56);
          *(_OWORD *)(v236 + 40) = v242;
          *(_OWORD *)(v236 + 24) = v241;
          *v6 = v236;
          *(_QWORD *)v236 = 1;
          do
          {
            v243 = __ldaxr((unint64_t *)v235);
            v244 = --v243 == 0;
          }
          while (__stlxr(v243, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v88 = (_QWORD *)operator new();
          v89 = *v6 + 8;
          *v88 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v88 + 1, v89);
          *v6 = (uint64_t)v88;
          *v88 = 1;
          do
          {
            v90 = __ldaxr(v87);
            v91 = --v90 == 0;
          }
          while (__stlxr(v90, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v81 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v81, *v6);
          *v6 = (uint64_t)v81;
          *v81 = 1;
          do
          {
            v82 = __ldaxr((unint64_t *)v63);
            v66 = --v82 == 0;
          }
          while (__stlxr(v82, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v357 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v357, *v6);
          *v6 = (uint64_t)v357;
          *v357 = 1;
          do
          {
            v358 = __ldaxr(v227);
            v230 = --v358 == 0;
          }
          while (__stlxr(v358, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v359 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v359, *v6);
          *v6 = (uint64_t)v359;
          *v359 = 1;
          do
          {
            v360 = __ldaxr((unint64_t *)v135);
            v234 = --v360 == 0;
          }
          while (__stlxr(v360, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v307 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v307, *v6);
          *v6 = (uint64_t)v307;
          *v307 = 1;
          do
          {
            v308 = __ldaxr((unint64_t *)v135);
            v138 = --v308 == 0;
          }
          while (__stlxr(v308, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v363 = operator new();
          v364 = *v6;
          *(_QWORD *)v363 = *(_QWORD *)*v6;
          *(_QWORD *)(v363 + 8) = *(_QWORD *)(v364 + 8);
          v365 = *(_QWORD *)(v364 + 16);
          *(_QWORD *)(v363 + 16) = v365;
          if (v365)
          {
            v366 = (unsigned int *)(v365 + 8);
            do
              v367 = __ldxr(v366);
            while (__stxr(v367 + 1, v366));
          }
          v368 = *(_OWORD *)(v364 + 24);
          v369 = *(_OWORD *)(v364 + 40);
          *(_OWORD *)(v363 + 56) = *(_OWORD *)(v364 + 56);
          *(_OWORD *)(v363 + 40) = v369;
          *(_OWORD *)(v363 + 24) = v368;
          *v6 = v363;
          *(_QWORD *)v363 = 1;
          do
          {
            v370 = __ldaxr((unint64_t *)v235);
            v244 = --v370 == 0;
          }
          while (__stlxr(v370, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v249 = (_QWORD *)operator new();
          v250 = *v6 + 8;
          *v249 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v249 + 1, v250);
          *v6 = (uint64_t)v249;
          *v249 = 1;
          do
          {
            v251 = __ldaxr(v87);
            v91 = --v251 == 0;
          }
          while (__stlxr(v251, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 6:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v83 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v83, *v6);
          *v6 = (uint64_t)v83;
          *v83 = 1;
          do
          {
            v84 = __ldaxr((unint64_t *)v63);
            v66 = --v84 == 0;
          }
          while (__stlxr(v84, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v361 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v361, *v6);
          *v6 = (uint64_t)v361;
          *v361 = 1;
          do
          {
            v362 = __ldaxr(v227);
            v230 = --v362 == 0;
          }
          while (__stlxr(v362, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v374 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v374, *v6);
          *v6 = (uint64_t)v374;
          *v374 = 1;
          do
          {
            v375 = __ldaxr((unint64_t *)v135);
            v234 = --v375 == 0;
          }
          while (__stlxr(v375, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v325 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v325, *v6);
          *v6 = (uint64_t)v325;
          *v325 = 1;
          do
          {
            v326 = __ldaxr((unint64_t *)v135);
            v138 = --v326 == 0;
          }
          while (__stlxr(v326, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v376 = operator new();
          v377 = *v6;
          *(_QWORD *)v376 = *(_QWORD *)*v6;
          *(_QWORD *)(v376 + 8) = *(_QWORD *)(v377 + 8);
          v378 = *(_QWORD *)(v377 + 16);
          *(_QWORD *)(v376 + 16) = v378;
          if (v378)
          {
            v379 = (unsigned int *)(v378 + 8);
            do
              v380 = __ldxr(v379);
            while (__stxr(v380 + 1, v379));
          }
          v381 = *(_OWORD *)(v377 + 24);
          v382 = *(_OWORD *)(v377 + 40);
          *(_OWORD *)(v376 + 56) = *(_OWORD *)(v377 + 56);
          *(_OWORD *)(v376 + 40) = v382;
          *(_OWORD *)(v376 + 24) = v381;
          *v6 = v376;
          *(_QWORD *)v376 = 1;
          do
          {
            v383 = __ldaxr((unint64_t *)v235);
            v244 = --v383 == 0;
          }
          while (__stlxr(v383, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v262 = (_QWORD *)operator new();
          v263 = *v6 + 8;
          *v262 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v262 + 1, v263);
          *v6 = (uint64_t)v262;
          *v262 = 1;
          do
          {
            v264 = __ldaxr(v87);
            v91 = --v264 == 0;
          }
          while (__stlxr(v264, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v79 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v79, *v6);
          *v6 = (uint64_t)v79;
          *v79 = 1;
          do
          {
            v80 = __ldaxr((unint64_t *)v63);
            v66 = --v80 == 0;
          }
          while (__stlxr(v80, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v305 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v305, *v6);
          *v6 = (uint64_t)v305;
          *v305 = 1;
          do
          {
            v306 = __ldaxr(v227);
            v230 = --v306 == 0;
          }
          while (__stlxr(v306, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v321 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v321, *v6);
          *v6 = (uint64_t)v321;
          *v321 = 1;
          do
          {
            v322 = __ldaxr((unint64_t *)v135);
            v234 = --v322 == 0;
          }
          while (__stlxr(v322, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v256 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v256, *v6);
          *v6 = (uint64_t)v256;
          *v256 = 1;
          do
          {
            v257 = __ldaxr((unint64_t *)v135);
            v138 = --v257 == 0;
          }
          while (__stlxr(v257, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v329 = operator new();
          v330 = *v6;
          *(_QWORD *)v329 = *(_QWORD *)*v6;
          *(_QWORD *)(v329 + 8) = *(_QWORD *)(v330 + 8);
          v331 = *(_QWORD *)(v330 + 16);
          *(_QWORD *)(v329 + 16) = v331;
          if (v331)
          {
            v332 = (unsigned int *)(v331 + 8);
            do
              v333 = __ldxr(v332);
            while (__stxr(v333 + 1, v332));
          }
          v334 = *(_OWORD *)(v330 + 24);
          v335 = *(_OWORD *)(v330 + 40);
          *(_OWORD *)(v329 + 56) = *(_OWORD *)(v330 + 56);
          *(_OWORD *)(v329 + 40) = v335;
          *(_OWORD *)(v329 + 24) = v334;
          *v6 = v329;
          *(_QWORD *)v329 = 1;
          do
          {
            v336 = __ldaxr((unint64_t *)v235);
            v244 = --v336 == 0;
          }
          while (__stlxr(v336, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v162 = (_QWORD *)operator new();
          v163 = *v6 + 8;
          *v162 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v162 + 1, v163);
          *v6 = (uint64_t)v162;
          *v162 = 1;
          do
          {
            v164 = __ldaxr(v87);
            v91 = --v164 == 0;
          }
          while (__stlxr(v164, v87));
          goto LABEL_347;
        default:
          turi::apply_binary_op_ff();
      }
    case 8:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v85 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v85, *v6);
          *v6 = (uint64_t)v85;
          *v85 = 1;
          do
          {
            v86 = __ldaxr((unint64_t *)v63);
            v66 = --v86 == 0;
          }
          while (__stlxr(v86, (unint64_t *)v63));
          goto LABEL_323;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v371 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v371, *v6);
          *v6 = (uint64_t)v371;
          *v371 = 1;
          do
          {
            v372 = __ldaxr(v227);
            v230 = --v372 == 0;
          }
          while (__stlxr(v372, v227));
          goto LABEL_471;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v384 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v384, *v6);
          *v6 = (uint64_t)v384;
          *v384 = 1;
          do
          {
            v385 = __ldaxr((unint64_t *)v135);
            v234 = --v385 == 0;
          }
          while (__stlxr(v385, (unint64_t *)v135));
          goto LABEL_490;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v339 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v339, *v6);
          *v6 = (uint64_t)v339;
          *v339 = 1;
          do
          {
            v340 = __ldaxr((unint64_t *)v135);
            v138 = --v340 == 0;
          }
          while (__stlxr(v340, (unint64_t *)v135));
          goto LABEL_432;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v386 = operator new();
          v387 = *v6;
          *(_QWORD *)v386 = *(_QWORD *)*v6;
          *(_QWORD *)(v386 + 8) = *(_QWORD *)(v387 + 8);
          v388 = *(_QWORD *)(v387 + 16);
          *(_QWORD *)(v386 + 16) = v388;
          if (v388)
          {
            v389 = (unsigned int *)(v388 + 8);
            do
              v390 = __ldxr(v389);
            while (__stxr(v390 + 1, v389));
          }
          v391 = *(_OWORD *)(v387 + 24);
          v392 = *(_OWORD *)(v387 + 40);
          *(_OWORD *)(v386 + 56) = *(_OWORD *)(v387 + 56);
          *(_OWORD *)(v386 + 40) = v392;
          *(_OWORD *)(v386 + 24) = v391;
          *v6 = v386;
          *(_QWORD *)v386 = 1;
          do
          {
            v393 = __ldaxr((unint64_t *)v235);
            v244 = --v393 == 0;
          }
          while (__stlxr(v393, (unint64_t *)v235));
          goto LABEL_501;
        case 9:
          v87 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v277 = (_QWORD *)operator new();
          v278 = *v6 + 8;
          *v277 = *(_QWORD *)*v6;
          turi::flexible_type_impl::ndarray<double>::ndarray(v277 + 1, v278);
          *v6 = (uint64_t)v277;
          *v277 = 1;
          do
          {
            v279 = __ldaxr(v87);
            v91 = --v279 == 0;
          }
          while (__stlxr(v279, v87));
LABEL_347:
          if (!v91)
            goto LABEL_506;
          v260 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v87);
          v280 = 2071181815;
          goto LABEL_504;
        default:
          turi::apply_binary_op_ff();
      }
    case 9:
      switch(v7)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_506;
        case 2:
          v63 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v67 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v67, *v6);
          *v6 = (uint64_t)v67;
          *v67 = 1;
          do
          {
            v68 = __ldaxr((unint64_t *)v63);
            v66 = --v68 == 0;
          }
          while (__stlxr(v68, (unint64_t *)v63));
LABEL_323:
          if (!v66)
            goto LABEL_506;
          if (*(char *)(v63 + 31) < 0)
            operator delete(*(void **)(v63 + 8));
          v260 = (_QWORD *)v63;
          v261 = 0x1012C404EF22A49;
          goto LABEL_505;
        case 3:
          v227 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v245 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v245, *v6);
          *v6 = (uint64_t)v245;
          *v245 = 1;
          do
          {
            v246 = __ldaxr(v227);
            v230 = --v246 == 0;
          }
          while (__stlxr(v246, v227));
LABEL_471:
          if (!v230)
            goto LABEL_506;
          v373 = (void *)v227[1];
          if (v373)
          {
            v227[2] = (unint64_t)v373;
            operator delete(v373);
          }
          v260 = v227;
          v261 = 0x1080C409938AC02;
          goto LABEL_505;
        case 4:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v254 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v254, *v6);
          *v6 = (uint64_t)v254;
          *v254 = 1;
          do
          {
            v255 = __ldaxr((unint64_t *)v135);
            v234 = --v255 == 0;
          }
          while (__stlxr(v255, (unint64_t *)v135));
LABEL_490:
          if (!v234)
            goto LABEL_494;
          v395 = (void **)(v135 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v395);
          goto LABEL_493;
        case 5:
          v135 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_494;
          v160 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v160, *v6);
          *v6 = (uint64_t)v160;
          *v160 = 1;
          do
          {
            v161 = __ldaxr((unint64_t *)v135);
            v138 = --v161 == 0;
          }
          while (__stlxr(v161, (unint64_t *)v135));
LABEL_432:
          if (!v138)
            goto LABEL_494;
          v395 = (void **)(v135 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v395);
LABEL_493:
          MEMORY[0x219A19A08](v135, 0x1020C405E66F15BLL);
LABEL_494:
          turi::flexible_type_fail(0);
          return;
        case 8:
          v235 = *v6;
          if (*(_QWORD *)*v6 == 1)
            goto LABEL_506;
          v265 = operator new();
          v266 = *v6;
          *(_QWORD *)v265 = *(_QWORD *)*v6;
          *(_QWORD *)(v265 + 8) = *(_QWORD *)(v266 + 8);
          v267 = *(_QWORD *)(v266 + 16);
          *(_QWORD *)(v265 + 16) = v267;
          if (v267)
          {
            v268 = (unsigned int *)(v267 + 8);
            do
              v269 = __ldxr(v268);
            while (__stxr(v269 + 1, v268));
          }
          v270 = *(_OWORD *)(v266 + 24);
          v271 = *(_OWORD *)(v266 + 40);
          *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
          *(_OWORD *)(v265 + 40) = v271;
          *(_OWORD *)(v265 + 24) = v270;
          *v6 = v265;
          *(_QWORD *)v265 = 1;
          do
          {
            v272 = __ldaxr((unint64_t *)v235);
            v244 = --v272 == 0;
          }
          while (__stlxr(v272, (unint64_t *)v235));
LABEL_501:
          if (!v244)
            goto LABEL_506;
          boost::detail::shared_count::~shared_count((unsigned int **)(v235 + 16));
          v260 = (_QWORD *)v235;
          v280 = -235920773;
LABEL_504:
          v261 = v280 | 0x1030C4000000000;
LABEL_505:
          MEMORY[0x219A19A08](v260, v261);
LABEL_506:
          turi::flexible_type_fail(0);
          return;
        case 9:
          v92 = *(double *)a2;
          v93 = (unint64_t *)*v6;
          if (*(_QWORD *)*v6 != 1)
          {
            v94 = (_QWORD *)operator new();
            v95 = *v6 + 8;
            *v94 = *(_QWORD *)*v6;
            turi::flexible_type_impl::ndarray<double>::ndarray(v94 + 1, v95);
            *v6 = (uint64_t)v94;
            *v94 = 1;
            do
            {
              v96 = __ldaxr(v93);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v93));
            if (!v97)
            {
              v98 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v93);
              MEMORY[0x219A19A08](v98, 0x1030C407B73B9F7);
            }
          }
          v99 = *v6;
          v100 = (uint64_t *)(*v6 + 8);
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v100, *(_QWORD *)&v92 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v102 = *(uint64_t **)(v99 + 24);
          v101 = *(uint64_t **)(v99 + 32);
          if (v101 == v102)
            return;
          if (!*v100)
            return;
          v103 = 1;
          do
          {
            v104 = *v102++;
            v103 *= v104;
          }
          while (v102 != v101);
          if (!v103)
            return;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v100);
          v105 = (uint64_t)(*(_QWORD *)(v99 + 32) - *(_QWORD *)(v99 + 24)) >> 3;
          v394 = 0;
          std::vector<unsigned long>::vector(&v395, v105, &v394);
          v106 = v395;
          v107 = v396;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    v108 = (char *)v107 - (char *)v106;
    if (v108)
    {
      v109 = 0;
      v110 = v108 >> 3;
      v111 = *(uint64_t **)(*(_QWORD *)&v92 + 48);
      if (v110 <= 1)
        v110 = 1;
      v112 = v106;
      v113 = v110;
      do
      {
        v115 = (uint64_t)*v112++;
        v114 = v115;
        v116 = *v111++;
        v109 += v116 * v114;
        --v113;
      }
      while (v113);
      v117 = 0;
      v118 = *(double *)(**(_QWORD **)(*(_QWORD *)&v92 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v92 + 72) + v109));
      v119 = *(uint64_t **)(v99 + 48);
      do
      {
        v121 = (uint64_t)*v106++;
        v120 = v121;
        v122 = *v119++;
        v117 += v122 * v120;
        --v110;
      }
      while (v110);
    }
    else
    {
      v117 = 0;
      v118 = *(double *)(**(_QWORD **)(*(_QWORD *)&v92 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v92 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v100);
    *(double *)(**(_QWORD **)(v99 + 8) + 8 * (*(_QWORD *)(v99 + 72) + v117)) = v118
                                                                             + *(double *)(**(_QWORD **)(v99 + 8)
                                                                                         + 8
                                                                                         * (*(_QWORD *)(v99 + 72) + v117));
    v106 = v395;
    v107 = v396;
    v123 = v396 - v395;
    v124 = v123 - 1;
    if ((char *)v396 - (char *)v395 >= 1)
    {
      v125 = *(_QWORD *)(v99 + 24);
      v126 = (char *)v395[v124] + 1;
      v395[v124] = v126;
      if ((unint64_t)v126 >= *(_QWORD *)(v125 + 8 * v124))
      {
        v127 = (unint64_t *)&v106[v123 - 2];
        v128 = v125 - 16;
        while (1)
        {
          v129 = v123 - 1;
          v127[1] = 0;
          if (v123 - 1 <= 0)
            goto LABEL_275;
          v130 = *v127 + 1;
          *v127-- = v130;
          v131 = *(_QWORD *)(v128 + 8 * v123--);
          if (v130 < v131)
          {
            v124 = v129 - 1;
            break;
          }
        }
      }
      v123 = 1;
    }
  }
  while ((v124 & 0x8000000000000000) == 0 && v123);
LABEL_274:
  if (!v106)
    return;
LABEL_275:
  v396 = v106;
  operator delete(v106);
}

void sub_2182089E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_218208B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x218208B20);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218208C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::serialize_impl<turi::oarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  BOOL v9;
  std::vector<char>::size_type v10;

  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 1 > v4)
    {
      v6 = 2 * v4 + 2;
      *(_QWORD *)(a1 + 40) = v6;
      v7 = *(_QWORD **)(a1 + 16);
      if (v7)
      {
        v5 = (_BYTE *)*v7;
        v8 = v7[1] - *v7;
        v9 = v6 >= v8;
        v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v10);
          v5 = **(_BYTE ***)(a1 + 16);
        }
        else if (!v9)
        {
          v7[1] = &v5[v6];
        }
      }
      else
      {
        v5 = malloc_type_realloc(*(void **)(a1 + 24), v6, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v5;
    }
    else
    {
      v5 = *(_BYTE **)(a1 + 24);
    }
    v5[(*(_QWORD *)(a1 + 32))++] = *(_BYTE *)a2;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, (uint64_t *)(a2 + 8));
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218208E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218209010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218209190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<BOOL,turi::flexible_type>,turi::unity_sarray::sum(void)::$_1>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218209310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<BOOL,turi::flexible_type>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a1 + 2);
  if (v4)
    *(_BYTE *)a2 = *(_BYTE *)(v4 + (*((_QWORD *)a1 + 3))++);
  else
    std::istream::read();
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (_QWORD **)(a2 + 8));
}

_BYTE *std::pair<BOOL,turi::flexible_type>::operator=[abi:ne180100](_BYTE *a1, _BYTE *a2)
{
  uint64_t *v3;
  _BYTE *v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  v3 = (uint64_t *)(a2 + 8);
  *a1 = *a2;
  v4 = a1 + 8;
  if (a2 != a1)
  {
    switch(a1[20])
    {
      case 2:
        v6 = *(unint64_t **)v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *(unint64_t **)v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *(unint64_t **)v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *(unint64_t **)v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *(unint64_t **)v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *(unint64_t **)v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)v4;
          if (*(_QWORD *)v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *(_QWORD *)v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v3;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v3 + 5);
    *(_QWORD *)v4 = v35;
    LODWORD(v35) = a2[20];
    a1[20] = v35;
    v36 = v35 > 9;
    v37 = (1 << v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *(unint64_t **)v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  return a1;
}

__n128 turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::new_instance(__n128 *a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new();
  v2->n128_u64[0] = (unint64_t)off_24D9320D8;
  result = a1[1];
  v2[1] = result;
  v2[2] = result;
  return result;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::add_element_simple(uint64_t a1, int *a2)
{
  double v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  float v21;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  void *__p[2];
  void *v26[2];
  __int128 v27;
  __int128 v28;
  std::string v29;
  size_t __idx;

  if (*((_BYTE *)a2 + 12) != 7)
  {
    ++*(_QWORD *)(a1 + 40);
    v3 = 0.0;
    switch(*((_BYTE *)a2 + 12))
    {
      case 0:
        v3 = (double)*(uint64_t *)a2;
        break;
      case 1:
        v3 = *(double *)a2;
        break;
      case 2:
        v8 = *(_QWORD *)a2;
        v9 = (char **)(*(_QWORD *)a2 + 8);
        __idx = 0;
        v10 = (char *)v9;
        if (*(char *)(v8 + 31) < 0)
          v10 = *v9;
        std::string::basic_string[abi:ne180100]<0>(__p, v10);
        v11 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v26[0]) < 0)
          operator delete(__p[0]);
        if (*(char *)(v8 + 31) < 0)
          v12 = *(_QWORD *)(v8 + 16);
        else
          v12 = *(unsigned __int8 *)(v8 + 31);
        if (__idx != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v23 = std::string::append(&v29, " cannot be interpreted as a float");
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v26[0] = (void *)v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v21 = v11;
        v3 = v21;
        break;
      case 3:
        v4 = *(_QWORD *)a2;
        __p[1] = 0;
        v26[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4:
        v13 = *(_QWORD *)a2;
        __p[1] = 0;
        v26[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        break;
      case 5:
        v14 = *(_QWORD *)a2;
        __p[1] = 0;
        v26[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
        break;
      case 6:
        v3 = (double)a2[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
        break;
      case 7:
        break;
      case 8:
        v15 = *(_QWORD *)a2;
        v16 = *(unsigned int **)(*(_QWORD *)a2 + 16);
        __p[0] = *(void **)(*(_QWORD *)a2 + 8);
        __p[1] = v16;
        if (v16)
        {
          v17 = v16 + 2;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = *(_OWORD *)(v15 + 24);
        v20 = *(_OWORD *)(v15 + 56);
        v27 = *(_OWORD *)(v15 + 40);
        v28 = v20;
        *(_OWORD *)v26 = v19;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v27 + 1))
        {
          *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
          operator delete(*((void **)&v27 + 1));
        }
        if (v26[0])
        {
          v26[1] = v26[0];
          operator delete(v26[0]);
        }
        v5 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v6 = (unint64_t *)((char *)__p[1] + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        break;
      default:
        turi::apply_binary_op_ff();
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) + (v3 - *(double *)(a1 + 32)) / (double)*(unint64_t *)(a1 + 40);
  }
}

void sub_2182099D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine()
{
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec((uint64_t)&v8, (_QWORD *)(a1 + 32));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_218209BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type()
{
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name()
{
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save()
{
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load()
{
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::~generic_aggregator()
{
  JUMPOUT(0x219A19A08);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 55, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218209D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<double,unsigned long>,false,void>::exec(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *result;
  unint64_t v8;
  size_t v9;
  char **v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;

  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v4)
    {
      v9 = 2 * v4 + 16;
      *(_QWORD *)(a1 + 40) = v9;
      v10 = *(char ***)(a1 + 16);
      if (v10)
      {
        v5 = *v10;
        v11 = v10[1] - *v10;
        v12 = v9 >= v11;
        v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v13);
          v5 = **(char ***)(a1 + 16);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        v5 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v9, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v5;
    }
    else
    {
      v5 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v5[*(_QWORD *)(a1 + 32)] = *a2;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v6 = a2 + 1;
  if (*(_QWORD *)a1)
    return (char *)std::ostream::write();
  v8 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + 8 > v8)
  {
    v14 = 2 * v8 + 16;
    *(_QWORD *)(a1 + 40) = v14;
    v15 = *(char ***)(a1 + 16);
    if (v15)
    {
      result = *v15;
      v16 = v15[1] - *v15;
      v17 = v14 >= v16;
      v18 = v14 - v16;
      if (v18 != 0 && v17)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
        result = **(char ***)(a1 + 16);
      }
      else if (!v17)
      {
        v15[1] = &result[v14];
      }
    }
    else
    {
      result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = result;
  }
  else
  {
    result = *(char **)(a1 + 24);
  }
  *(_QWORD *)&result[*(_QWORD *)(a1 + 32)] = *v6;
  *(_QWORD *)(a1 + 32) += 8;
  return result;
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 59, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::support_type(turi::flex_type_enum)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21820A028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::name(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21820A1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save(turi::oarchive &)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 65, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::save(turi::oarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21820A328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/util/aggregates.hpp", "operator()", 70, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::query_eval::generic_aggregator<std::pair<double,unsigned long>,turi::unity_sarray::mean(void)::$_0>::load(turi::iarchive &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21820A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<double,unsigned long>,false,void>::exec(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    *a2 = *(_QWORD *)(v4 + *(_QWORD *)(result + 24));
    *(_QWORD *)(result + 24) += 8;
  }
  else
  {
    result = std::istream::read();
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    return std::istream::read();
  a2[1] = *(_QWORD *)(v5 + *(_QWORD *)(v3 + 24));
  *(_QWORD *)(v3 + 24) += 8;
  return result;
}

uint64_t turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::generic_aggregator(uint64_t result, uint64_t a2)
{
  unint64_t **v2;
  unint64_t *v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t **v10;
  unint64_t *v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)result = off_24D932178;
  *(_QWORD *)(result + 16) = 0;
  v2 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (result + 16 != a2)
  {
    v3 = *(unint64_t **)a2;
    *(_QWORD *)(result + 21) = *(_QWORD *)(a2 + 5);
    *v2 = v3;
    LODWORD(v3) = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(result + 28) = (_BYTE)v3;
    v4 = v3 > 9;
    v5 = (1 << (char)v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *v2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 40) = 0;
  v10 = (unint64_t **)(result + 40);
  *(_QWORD *)(result + 32) = v9;
  *(_DWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 52) = 0;
  if (result + 40 != a2)
  {
    v11 = *(unint64_t **)a2;
    *(_QWORD *)(result + 45) = *(_QWORD *)(a2 + 5);
    *v10 = v11;
    v12 = *(unsigned __int8 *)(a2 + 12);
    *(_BYTE *)(result + 52) = v12;
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
    {
      v13 = *v10;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 16);
  return result;
}

void turi::unity_sarray::mean(void)::$_3::operator()(double *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int **v60;
  _QWORD *v61;
  BOOL v62;
  int v63;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  BOOL v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  BOOL v80;
  double v81;
  unint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  _QWORD *v87;
  double *v88;
  uint64_t v89;
  unint64_t v90;
  double *v91;
  double v92;
  _QWORD *v93;
  unint64_t v94;
  double v95;
  unint64_t *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void **v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  void **v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  BOOL v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  void *v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t *v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  unint64_t v224;
  _QWORD *v225;
  unint64_t v226;
  BOOL v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unsigned int *v232;
  unsigned int v233;
  __int128 v234;
  __int128 v235;
  unint64_t v236;
  BOOL v237;
  _QWORD *v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  _QWORD *v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  unint64_t v249;
  double v250;
  _QWORD *v251;
  unint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned int v259;
  __int128 v260;
  __int128 v261;
  unint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  unsigned int v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  unint64_t *v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  void *v285;
  double *v286;
  uint64_t v287;
  unint64_t v288;
  double v289;
  unint64_t *v290;
  _QWORD *v291;
  unint64_t v292;
  unint64_t v293;
  void *v294;
  double *v295;
  uint64_t v296;
  double v297;
  unint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  __int128 v308;
  __int128 v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  unsigned int *v314;
  unsigned int v315;
  __int128 v316;
  __int128 v317;
  unint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  _QWORD *v321;
  unint64_t v322;
  _QWORD *v323;
  unint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  unsigned int *v328;
  unsigned int v329;
  __int128 v330;
  __int128 v331;
  unint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  unsigned int *v336;
  unsigned int v337;
  __int128 v338;
  __int128 v339;
  unint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  unsigned int *v346;
  unsigned int v347;
  __int128 v348;
  __int128 v349;
  unint64_t v350;
  _QWORD *v351;
  unint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int v357;
  __int128 v358;
  __int128 v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  unsigned int *v366;
  unsigned int v367;
  __int128 v368;
  __int128 v369;
  unint64_t v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  double v374;
  double v375;
  uint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  double v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  unsigned int v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  double v388;
  void *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  double v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t *v400;
  _QWORD *v401;
  unint64_t v402;
  BOOL v403;
  _QWORD *v404;
  unint64_t v405;
  _QWORD *v406;
  unint64_t v407;
  _QWORD *v408;
  unint64_t v409;
  _QWORD *v410;
  unint64_t v411;
  _QWORD *v412;
  unint64_t v413;
  _QWORD *v414;
  unint64_t v415;
  _QWORD *v416;
  unint64_t v417;
  unint64_t *v418;
  _QWORD *v419;
  unint64_t v420;
  BOOL v421;
  _QWORD *v422;
  unint64_t v423;
  _QWORD *v424;
  unint64_t v425;
  unint64_t *v426;
  _QWORD *v427;
  _QWORD *v428;
  unint64_t v429;
  BOOL v430;
  double v431;
  unint64_t *v432;
  _QWORD *v433;
  unint64_t v434;
  unint64_t v435;
  void *v436;
  _QWORD *v437;
  double *v438;
  uint64_t v439;
  unint64_t v440;
  double *v441;
  double v442;
  _QWORD *v443;
  unint64_t v444;
  double v445;
  unint64_t *v446;
  _QWORD *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  void **v459;
  void **v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t *v464;
  void **v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  double v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  unint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  _QWORD *v485;
  _QWORD *v486;
  unint64_t v487;
  _QWORD *v488;
  _QWORD *v489;
  unint64_t v490;
  BOOL v491;
  _QWORD *v492;
  unint64_t v493;
  _QWORD *v494;
  unint64_t v495;
  _QWORD *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  _QWORD *v500;
  unint64_t v501;
  _QWORD *v502;
  _QWORD *v503;
  unint64_t v504;
  _QWORD *v505;
  unint64_t v506;
  void *v507;
  _QWORD *v508;
  unint64_t v509;
  _QWORD *v510;
  _QWORD *v511;
  unint64_t v512;
  unint64_t *v513;
  _QWORD *v514;
  _QWORD *v515;
  unint64_t v516;
  unint64_t v517;
  _QWORD *v518;
  uint64_t *v519;
  uint64_t *v520;
  uint64_t *v521;
  double v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  void **v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char *v537;
  unint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t *v543;
  _QWORD *v544;
  _QWORD *v545;
  unint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  uint64_t *v549;
  uint64_t *v550;
  uint64_t *v551;
  double v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  void **v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  char *v567;
  unint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  _QWORD *v573;
  unint64_t v574;
  _QWORD *v575;
  unint64_t v576;
  BOOL v577;
  _QWORD *v578;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  unsigned int *v582;
  unsigned int v583;
  __int128 v584;
  __int128 v585;
  unint64_t v586;
  BOOL v587;
  _QWORD *v588;
  _QWORD *v589;
  unint64_t v590;
  _QWORD *v591;
  unint64_t v592;
  _QWORD *v593;
  unint64_t v594;
  _QWORD *v595;
  unint64_t v596;
  _QWORD *v597;
  _QWORD *v598;
  unint64_t v599;
  double v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  unint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  unsigned int *v608;
  unsigned int v609;
  __int128 v610;
  __int128 v611;
  unint64_t v612;
  _QWORD *v613;
  _QWORD *v614;
  unint64_t v615;
  unsigned int v616;
  _QWORD *v617;
  unint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  uint64_t v621;
  unsigned int *v622;
  unsigned int v623;
  __int128 v624;
  __int128 v625;
  unint64_t v626;
  _QWORD *v627;
  unint64_t v628;
  _QWORD *v629;
  unint64_t v630;
  unint64_t *v631;
  _QWORD *v632;
  unint64_t v633;
  unint64_t v634;
  void *v635;
  double *v636;
  uint64_t v637;
  unint64_t v638;
  double v639;
  unint64_t *v640;
  _QWORD *v641;
  unint64_t v642;
  unint64_t v643;
  void *v644;
  double *v645;
  uint64_t v646;
  double v647;
  unint64_t v648;
  _QWORD *v649;
  unint64_t v650;
  _QWORD *v651;
  unint64_t v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  unsigned int *v656;
  unsigned int v657;
  __int128 v658;
  __int128 v659;
  unint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  uint64_t v663;
  unsigned int *v664;
  unsigned int v665;
  __int128 v666;
  __int128 v667;
  unint64_t v668;
  _QWORD *v669;
  unint64_t v670;
  _QWORD *v671;
  unint64_t v672;
  _QWORD *v673;
  unint64_t v674;
  uint64_t v675;
  _QWORD *v676;
  uint64_t v677;
  unsigned int *v678;
  unsigned int v679;
  __int128 v680;
  __int128 v681;
  unint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  uint64_t v685;
  unsigned int *v686;
  unsigned int v687;
  __int128 v688;
  __int128 v689;
  unint64_t v690;
  _QWORD *v691;
  unint64_t v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  unsigned int *v696;
  unsigned int v697;
  __int128 v698;
  __int128 v699;
  unint64_t v700;
  _QWORD *v701;
  unint64_t v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  unsigned int *v706;
  unsigned int v707;
  __int128 v708;
  __int128 v709;
  unint64_t v710;
  _QWORD *v711;
  unint64_t v712;
  uint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  unsigned int *v716;
  unsigned int v717;
  __int128 v718;
  __int128 v719;
  unint64_t v720;
  unint64_t *v721;
  unint64_t v722;
  unint64_t v723;
  double v724;
  double v725;
  uint64_t v726;
  unint64_t *v727;
  unint64_t v728;
  unint64_t v729;
  double v730;
  unint64_t *v731;
  unint64_t v732;
  unint64_t v733;
  unsigned int v734;
  unint64_t *v735;
  unint64_t v736;
  unint64_t v737;
  double v738;
  void *v739;
  unint64_t *v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t *v743;
  unint64_t v744;
  unint64_t v745;
  double v746;
  unint64_t *v748;
  unint64_t v749;
  char *v750;
  double v751;
  _QWORD *v752;
  unint64_t v753;
  BOOL v754;
  _QWORD *v755;
  unint64_t v756;
  _QWORD *v757;
  double v758;
  _QWORD *v759;
  unint64_t v760;
  unint64_t v761;
  int v762;
  const std::string::value_type *v763;
  std::string::size_type v764;
  _QWORD *v765;
  unint64_t v766;
  _QWORD *v767;
  unint64_t v768;
  _QWORD *v769;
  unint64_t v770;
  _QWORD *v771;
  unint64_t v772;
  _QWORD *v773;
  unint64_t v774;
  double v775;
  _QWORD *v776;
  unint64_t v777;
  BOOL v778;
  _QWORD *v779;
  unint64_t v780;
  _QWORD *v781;
  unint64_t v782;
  unint64_t *v783;
  _QWORD *v784;
  uint64_t v785;
  unint64_t v786;
  BOOL v787;
  _QWORD *v788;
  unint64_t *v789;
  _QWORD *v790;
  unint64_t v791;
  unint64_t v792;
  void *v793;
  double v794;
  double *v795;
  uint64_t v796;
  unint64_t v797;
  double *v798;
  double v799;
  _QWORD *v800;
  unint64_t v801;
  _QWORD *v802;
  unint64_t *v803;
  _QWORD *v804;
  uint64_t v805;
  unint64_t v806;
  unint64_t v807;
  _QWORD *v808;
  double v809;
  uint64_t *v810;
  uint64_t *v811;
  uint64_t *v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  void **v816;
  void **v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t *v821;
  void **v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  double v828;
  uint64_t *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  char *v836;
  unint64_t *v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  unint64_t v841;
  _QWORD *v842;
  uint64_t v843;
  unint64_t v844;
  double v845;
  _QWORD *v846;
  unint64_t v847;
  BOOL v848;
  _QWORD *v849;
  unint64_t v850;
  unint64_t *v851;
  _QWORD *v852;
  unint64_t v853;
  unint64_t v854;
  void *v855;
  double *v856;
  uint64_t v857;
  unint64_t v858;
  double v859;
  unint64_t *v860;
  _QWORD *v861;
  unint64_t v862;
  unint64_t v863;
  void *v864;
  double *v865;
  uint64_t v866;
  _QWORD *v867;
  unint64_t v868;
  _QWORD *v869;
  unint64_t v870;
  _QWORD *v871;
  uint64_t v872;
  unint64_t v873;
  _QWORD *v874;
  unint64_t v875;
  void *v876;
  double v877;
  uint64_t v878;
  _QWORD *v879;
  unint64_t v880;
  _QWORD *v881;
  uint64_t v882;
  unint64_t v883;
  unint64_t *v884;
  _QWORD *v885;
  uint64_t v886;
  unint64_t v887;
  unint64_t v888;
  _QWORD *v889;
  double v890;
  uint64_t *v891;
  uint64_t *v892;
  double v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  void **v897;
  uint64_t v898;
  uint64_t v899;
  unint64_t v900;
  uint64_t *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  char *v908;
  unint64_t *v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  unint64_t v913;
  unint64_t *v914;
  _QWORD *v915;
  uint64_t v916;
  unint64_t v917;
  unint64_t v918;
  _QWORD *v919;
  double v920;
  uint64_t *v921;
  uint64_t *v922;
  _QWORD *v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  void **v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t v930;
  uint64_t *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  char *v938;
  unint64_t *v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  _QWORD *v944;
  unint64_t v945;
  double v946;
  _QWORD *v947;
  unint64_t v948;
  BOOL v949;
  double v950;
  uint64_t v951;
  double v952;
  uint64_t v953;
  unsigned int *v954;
  unsigned int v955;
  __int128 v956;
  __int128 v957;
  unint64_t v958;
  BOOL v959;
  _QWORD *v960;
  uint64_t v961;
  unint64_t v962;
  _QWORD *v963;
  unint64_t v964;
  _QWORD *v965;
  unint64_t v966;
  _QWORD *v967;
  unint64_t v968;
  _QWORD *v969;
  uint64_t v970;
  unint64_t v971;
  _QWORD *v972;
  unint64_t v973;
  _QWORD *v974;
  unint64_t v975;
  unint64_t v976;
  double v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  double v981;
  uint64_t v982;
  unsigned int *v983;
  unsigned int v984;
  __int128 v985;
  __int128 v986;
  unint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  unint64_t v990;
  unsigned int v991;
  _QWORD *v992;
  unint64_t v993;
  uint64_t v994;
  double v995;
  uint64_t v996;
  unsigned int *v997;
  unsigned int v998;
  __int128 v999;
  __int128 v1000;
  unint64_t v1001;
  _QWORD *v1002;
  unint64_t v1003;
  _QWORD *v1004;
  unint64_t v1005;
  _QWORD *v1006;
  unint64_t v1007;
  _QWORD *v1008;
  unint64_t v1009;
  _QWORD *v1010;
  unint64_t v1011;
  _QWORD *v1012;
  unint64_t v1013;
  uint64_t v1014;
  double v1015;
  uint64_t v1016;
  unsigned int *v1017;
  unsigned int v1018;
  __int128 v1019;
  __int128 v1020;
  unint64_t v1021;
  uint64_t v1022;
  double v1023;
  uint64_t v1024;
  unsigned int *v1025;
  unsigned int v1026;
  __int128 v1027;
  __int128 v1028;
  unint64_t v1029;
  _QWORD *v1030;
  unint64_t v1031;
  _QWORD *v1032;
  unint64_t v1033;
  _QWORD *v1034;
  unint64_t v1035;
  uint64_t v1036;
  double v1037;
  uint64_t v1038;
  unsigned int *v1039;
  unsigned int v1040;
  __int128 v1041;
  __int128 v1042;
  unint64_t v1043;
  uint64_t v1044;
  double v1045;
  uint64_t v1046;
  unsigned int *v1047;
  unsigned int v1048;
  __int128 v1049;
  __int128 v1050;
  unint64_t v1051;
  _QWORD *v1052;
  unint64_t v1053;
  uint64_t v1054;
  double v1055;
  uint64_t v1056;
  unsigned int *v1057;
  unsigned int v1058;
  __int128 v1059;
  __int128 v1060;
  unint64_t v1061;
  _QWORD *v1062;
  unint64_t v1063;
  uint64_t v1064;
  double v1065;
  uint64_t v1066;
  unsigned int *v1067;
  unsigned int v1068;
  __int128 v1069;
  __int128 v1070;
  unint64_t v1071;
  _QWORD *v1072;
  unint64_t v1073;
  uint64_t v1074;
  double v1075;
  uint64_t v1076;
  unsigned int *v1077;
  unsigned int v1078;
  __int128 v1079;
  __int128 v1080;
  unint64_t v1081;
  unint64_t *v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t *v1085;
  _QWORD *v1086;
  uint64_t v1087;
  unint64_t *v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t *v1091;
  unint64_t *v1092;
  unint64_t v1093;
  unint64_t v1094;
  unsigned int v1095;
  unint64_t *v1096;
  unint64_t v1097;
  unint64_t v1098;
  unint64_t *v1099;
  void *v1100;
  unint64_t *v1101;
  unint64_t v1102;
  unint64_t v1103;
  unint64_t *v1104;
  unint64_t v1105;
  unint64_t v1106;
  unsigned int **v1107;
  unint64_t *v1108;
  unint64_t v1109;
  unint64_t v1110;
  _QWORD *v1111;
  _QWORD *v1112;
  uint64_t v1113;
  unint64_t *v1114;
  unint64_t v1115;
  unint64_t v1116;
  _QWORD *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  unint64_t v1120;
  unsigned int v1121;
  unint64_t *v1122;
  unint64_t v1123;
  unint64_t v1124;
  _QWORD *v1125;
  void *v1126;
  unint64_t *v1127;
  unint64_t v1128;
  unint64_t v1129;
  unint64_t *v1130;
  unint64_t v1131;
  unint64_t v1132;
  _QWORD *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  unint64_t v1136;
  _QWORD *v1137;
  _QWORD *v1138;
  uint64_t v1139;
  unint64_t *v1140;
  unint64_t v1141;
  unint64_t v1142;
  _QWORD *v1143;
  unint64_t *v1144;
  unint64_t v1145;
  unint64_t v1146;
  unsigned int v1147;
  unint64_t *v1148;
  unint64_t v1149;
  unint64_t v1150;
  _QWORD *v1151;
  void *v1152;
  unint64_t *v1153;
  unint64_t v1154;
  unint64_t v1155;
  unint64_t *v1156;
  unint64_t v1157;
  unint64_t v1158;
  _QWORD *v1159;
  unint64_t *v1160;
  unint64_t v1161;
  unint64_t v1162;
  unint64_t *v1163;
  _QWORD *v1164;
  uint64_t v1165;
  unint64_t *v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  unint64_t v1172;
  unsigned int v1173;
  unint64_t *v1174;
  unint64_t v1175;
  unint64_t v1176;
  unint64_t *v1177;
  void *v1178;
  unint64_t *v1179;
  unint64_t v1180;
  unint64_t v1181;
  unint64_t *v1182;
  unint64_t v1183;
  unint64_t v1184;
  unsigned int **v1185;
  double v1186;
  double v1187;
  uint64_t v1188;
  void **v1189;
  void **v1190;
  uint64_t v1191;
  _QWORD *v1192[2];
  _QWORD *v1193[2];
  double v1194[2];
  double v1195;
  int v1196;
  char v1197;
  uint64_t v1198;

  v1198 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    if (!v5)
      return;
    v6 = *((unsigned __int8 *)a2 + 12);
    if (v6 == 9)
    {
      if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)a2 + 8, *(_QWORD *)a1 + 8))
        turi::unity_sarray::mean(void)::$_3::operator() const(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long>&)::{lambda(void)#2}::operator()();
      v4 = *((_QWORD *)a2 + 2);
      v5 = *((_QWORD *)a1 + 2);
    }
    else if (v6 == 3)
    {
      v7 = 1;
      switch(*((_BYTE *)a1 + 12))
      {
        case 3:
          v8 = (_QWORD *)(*(_QWORD *)a1 + 8);
          v9 = (_QWORD *)(*(_QWORD *)a1 + 16);
          v10 = 3;
          goto LABEL_21;
        case 4:
          v8 = (_QWORD *)(*(_QWORD *)a1 + 8);
          v9 = (_QWORD *)(*(_QWORD *)a1 + 16);
          v10 = 4;
          goto LABEL_21;
        case 5:
          v8 = (_QWORD *)(*(_QWORD *)a1 + 8);
          v9 = (_QWORD *)(*(_QWORD *)a1 + 16);
          v10 = 5;
LABEL_21:
          v7 = (uint64_t)(*v9 - *v8) >> v10;
          break;
        case 9:
          v39 = *(uint64_t **)(*(_QWORD *)a1 + 24);
          v38 = *(uint64_t **)(*(_QWORD *)a1 + 32);
          if (v38 == v39)
          {
            v7 = 0;
          }
          else
          {
            v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
            if (v7)
            {
              v7 = 1;
              do
              {
                v40 = *v39++;
                v7 *= v40;
              }
              while (v39 != v38);
            }
          }
          break;
        default:
          break;
      }
      if (v7 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8)) >> 3)
        turi::unity_sarray::mean(void)::$_3::operator() const(std::pair<turi::flexible_type,unsigned long> const&,std::pair<turi::flexible_type,unsigned long>&)::{lambda(void)#1}::operator()();
    }
    v1187 = (double)v4 / (double)(v5 + v4);
    v1195 = 0.0;
    v1196 = 0;
    v1197 = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v1195, &v1187);
    memset(v1193, 0, 13);
    if (v1193 != (_QWORD **)a2)
    {
      *(_QWORD **)((char *)v1193 + 5) = *(_QWORD **)((char *)a2 + 5);
      v1193[0] = *(_QWORD **)a2;
      BYTE4(v1193[1]) = *((_BYTE *)a2 + 12);
      if (BYTE4(v1193[1]) <= 9u && ((1 << SBYTE4(v1193[1])) & 0x33C) != 0)
      {
        v17 = v1193[0];
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
    }
    switch(v1197)
    {
      case 0:
        switch(BYTE4(v1193[1]))
        {
          case 0:
            v19 = (uint64_t)v1193[0] * *(_QWORD *)&v1195;
            goto LABEL_58;
          case 1:
            v250 = *(double *)v1193 * (double)*(uint64_t *)&v1195;
            goto LABEL_317;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v144 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v144, (uint64_t)v1193[0]);
            v1193[0] = v144;
            *v144 = 1;
            do
            {
              v145 = __ldaxr(v20);
              v23 = --v145 == 0;
            }
            while (__stlxr(v145, v20));
            goto LABEL_200;
          case 3:
            v281 = v1193[0];
            if (*v1193[0] != 1)
            {
              v282 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v282, (uint64_t)v1193[0]);
              v1193[0] = v282;
              *v282 = 1;
              do
              {
                v283 = __ldaxr(v281);
                v284 = v283 - 1;
              }
              while (__stlxr(v284, v281));
              if (!v284)
              {
                v285 = (void *)v281[1];
                if (v285)
                {
                  v281[2] = (unint64_t)v285;
                  operator delete(v285);
                }
                MEMORY[0x219A19A08](v281, 0x1080C409938AC02);
              }
            }
            v286 = (double *)v1193[0][1];
            v287 = v1193[0][2] - (_QWORD)v286;
            if (v287)
            {
              v288 = v287 >> 3;
              v289 = (double)*(uint64_t *)&v1195;
              if (v288 <= 1)
                v288 = 1;
              do
              {
                *v286 = *v286 * v289;
                ++v286;
                --v288;
              }
              while (v288);
            }
            goto LABEL_473;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v321 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v321, (uint64_t)v1193[0]);
            v1193[0] = v321;
            *v321 = 1;
            do
            {
              v322 = __ldaxr(v138);
              v227 = --v322 == 0;
            }
            while (__stlxr(v322, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v251 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v251, (uint64_t)v1193[0]);
            v1193[0] = v251;
            *v251 = 1;
            do
            {
              v252 = __ldaxr(v138);
              v141 = --v252 == 0;
            }
            while (__stlxr(v252, v138));
            goto LABEL_407;
          case 6:
          case 7:
            goto LABEL_472;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v325 = operator new();
            v326 = v1193[0];
            *(_QWORD *)v325 = *v1193[0];
            *(_QWORD *)(v325 + 8) = v326[1];
            v327 = v326[2];
            *(_QWORD *)(v325 + 16) = v327;
            if (v327)
            {
              v328 = (unsigned int *)(v327 + 8);
              do
                v329 = __ldxr(v328);
              while (__stxr(v329 + 1, v328));
            }
            v330 = *(_OWORD *)(v326 + 3);
            v331 = *(_OWORD *)(v326 + 5);
            *(_OWORD *)(v325 + 56) = *(_OWORD *)(v326 + 7);
            *(_OWORD *)(v325 + 40) = v331;
            *(_OWORD *)(v325 + 24) = v330;
            v1193[0] = (_QWORD *)v325;
            *(_QWORD *)v325 = 1;
            do
            {
              v332 = __ldaxr(v228);
              v237 = --v332 == 0;
            }
            while (__stlxr(v332, v228));
            goto LABEL_467;
          case 9:
            v163 = v1193[0];
            if (*v1193[0] != 1)
            {
              v164 = (_QWORD *)operator new();
              v165 = v1193[0] + 1;
              *v164 = *v1193[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v164 + 1, (uint64_t)v165);
              v1193[0] = v164;
              *v164 = 1;
              do
              {
                v166 = __ldaxr(v163);
                v167 = v166 - 1;
              }
              while (__stlxr(v167, v163));
              if (!v167)
              {
                v168 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v163);
                MEMORY[0x219A19A08](v168, 0x1030C407B73B9F7);
              }
            }
            v169 = v1193[0];
            v171 = (uint64_t *)v1193[0][3];
            v170 = (uint64_t *)v1193[0][4];
            if (v170 == v171)
              goto LABEL_473;
            if (!v1193[0][1])
              goto LABEL_473;
            v172 = (double)*(uint64_t *)&v1195;
            v173 = 1;
            do
            {
              v174 = *v171++;
              v173 *= v174;
            }
            while (v171 != v170);
            if (!v173)
              goto LABEL_473;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v1193[0] + 1);
            v175 = (v169[4] - v169[3]) >> 3;
            v1191 = 0;
            std::vector<unsigned long>::vector(&v1189, v175, &v1191);
            v109 = v1189;
            v176 = v1190;
            break;
          default:
            goto LABEL_1541;
        }
        do
        {
          v177 = 0;
          v178 = (char *)v176 - (char *)v109;
          if (v178)
          {
            v179 = v178 >> 3;
            v180 = (uint64_t *)v169[6];
            if (v179 <= 1)
              v179 = 1;
            do
            {
              v182 = (uint64_t)*v109++;
              v181 = v182;
              v183 = *v180++;
              v177 += v183 * v181;
              --v179;
            }
            while (v179);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v169 + 1);
          *(double *)(*(_QWORD *)v169[1] + 8 * (v169[9] + v177)) = *(double *)(*(_QWORD *)v169[1] + 8 * (v169[9] + v177))
                                                                 * v172;
          v109 = v1189;
          v176 = v1190;
          v184 = v1190 - v1189;
          v185 = v184 - 1;
          if ((char *)v1190 - (char *)v1189 >= 1)
          {
            v186 = v169[3];
            v187 = (char *)v1189[v185] + 1;
            v1189[v185] = v187;
            if ((unint64_t)v187 >= *(_QWORD *)(v186 + 8 * v185))
            {
              v188 = (unint64_t *)&v109[v184 - 2];
              v189 = v186 - 16;
              do
              {
                v190 = v184 - 1;
                v188[1] = 0;
                if (v184 - 1 <= 0)
                  goto LABEL_279;
                v191 = *v188 + 1;
                *v188-- = v191;
                v192 = *(_QWORD *)(v189 + 8 * v184--);
              }
              while (v191 >= v192);
              v185 = v190 - 1;
            }
            v184 = 1;
          }
        }
        while ((v185 & 0x8000000000000000) == 0 && v184);
        goto LABEL_278;
      case 1:
        switch(BYTE4(v1193[1]))
        {
          case 0:
            v19 = (uint64_t)(v1195 * (double)(uint64_t)v1193[0]);
LABEL_58:
            v1193[0] = (_QWORD *)v19;
            goto LABEL_473;
          case 1:
            v250 = v1195 * *(double *)v1193;
LABEL_317:
            v1193[0] = *(_QWORD **)&v250;
            goto LABEL_473;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v146, (uint64_t)v1193[0]);
            v1193[0] = v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr(v20);
              v23 = --v147 == 0;
            }
            while (__stlxr(v147, v20));
            goto LABEL_200;
          case 3:
            v290 = v1193[0];
            if (*v1193[0] != 1)
            {
              v291 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v291, (uint64_t)v1193[0]);
              v1193[0] = v291;
              *v291 = 1;
              do
              {
                v292 = __ldaxr(v290);
                v293 = v292 - 1;
              }
              while (__stlxr(v293, v290));
              if (!v293)
              {
                v294 = (void *)v290[1];
                if (v294)
                {
                  v290[2] = (unint64_t)v294;
                  operator delete(v294);
                }
                MEMORY[0x219A19A08](v290, 0x1080C409938AC02);
              }
            }
            v295 = (double *)v1193[0][1];
            v296 = v1193[0][2] - (_QWORD)v295;
            if (v296)
            {
              v297 = v1195;
              v298 = v296 >> 3;
              if (v298 <= 1)
                v298 = 1;
              do
              {
                *v295 = v297 * *v295;
                ++v295;
                --v298;
              }
              while (v298);
            }
            goto LABEL_473;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v323 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v323, (uint64_t)v1193[0]);
            v1193[0] = v323;
            *v323 = 1;
            do
            {
              v324 = __ldaxr(v138);
              v227 = --v324 == 0;
            }
            while (__stlxr(v324, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v253 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v253, (uint64_t)v1193[0]);
            v1193[0] = v253;
            *v253 = 1;
            do
            {
              v254 = __ldaxr(v138);
              v141 = --v254 == 0;
            }
            while (__stlxr(v254, v138));
            goto LABEL_407;
          case 6:
          case 7:
            goto LABEL_472;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v333 = operator new();
            v334 = v1193[0];
            *(_QWORD *)v333 = *v1193[0];
            *(_QWORD *)(v333 + 8) = v334[1];
            v335 = v334[2];
            *(_QWORD *)(v333 + 16) = v335;
            if (v335)
            {
              v336 = (unsigned int *)(v335 + 8);
              do
                v337 = __ldxr(v336);
              while (__stxr(v337 + 1, v336));
            }
            v338 = *(_OWORD *)(v334 + 3);
            v339 = *(_OWORD *)(v334 + 5);
            *(_OWORD *)(v333 + 56) = *(_OWORD *)(v334 + 7);
            *(_OWORD *)(v333 + 40) = v339;
            *(_OWORD *)(v333 + 24) = v338;
            v1193[0] = (_QWORD *)v333;
            *(_QWORD *)v333 = 1;
            do
            {
              v340 = __ldaxr(v228);
              v237 = --v340 == 0;
            }
            while (__stlxr(v340, v228));
            goto LABEL_467;
          case 9:
            v193 = v1193[0];
            if (*v1193[0] != 1)
            {
              v194 = (_QWORD *)operator new();
              v195 = v1193[0] + 1;
              *v194 = *v1193[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v194 + 1, (uint64_t)v195);
              v1193[0] = v194;
              *v194 = 1;
              do
              {
                v196 = __ldaxr(v193);
                v197 = v196 - 1;
              }
              while (__stlxr(v197, v193));
              if (!v197)
              {
                v198 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v193);
                MEMORY[0x219A19A08](v198, 0x1030C407B73B9F7);
              }
            }
            v199 = v1193[0];
            v201 = (uint64_t *)v1193[0][3];
            v200 = (uint64_t *)v1193[0][4];
            if (v200 == v201)
              goto LABEL_473;
            if (!v1193[0][1])
              goto LABEL_473;
            v202 = v1195;
            v203 = 1;
            do
            {
              v204 = *v201++;
              v203 *= v204;
            }
            while (v201 != v200);
            if (!v203)
              goto LABEL_473;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v1193[0] + 1);
            v205 = (v199[4] - v199[3]) >> 3;
            v1191 = 0;
            std::vector<unsigned long>::vector(&v1189, v205, &v1191);
            v109 = v1189;
            v206 = v1190;
            break;
          default:
            goto LABEL_1541;
        }
        do
        {
          v207 = 0;
          v208 = (char *)v206 - (char *)v109;
          if (v208)
          {
            v209 = v208 >> 3;
            v210 = (uint64_t *)v199[6];
            if (v209 <= 1)
              v209 = 1;
            do
            {
              v212 = (uint64_t)*v109++;
              v211 = v212;
              v213 = *v210++;
              v207 += v213 * v211;
              --v209;
            }
            while (v209);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v199 + 1);
          *(double *)(*(_QWORD *)v199[1] + 8 * (v199[9] + v207)) = v202
                                                                 * *(double *)(*(_QWORD *)v199[1] + 8 * (v199[9] + v207));
          v109 = v1189;
          v206 = v1190;
          v214 = v1190 - v1189;
          v215 = v214 - 1;
          if ((char *)v1190 - (char *)v1189 >= 1)
          {
            v216 = v199[3];
            v217 = (char *)v1189[v215] + 1;
            v1189[v215] = v217;
            if ((unint64_t)v217 >= *(_QWORD *)(v216 + 8 * v215))
            {
              v218 = (unint64_t *)&v109[v214 - 2];
              v219 = v216 - 16;
              do
              {
                v220 = v214 - 1;
                v218[1] = 0;
                if (v214 - 1 <= 0)
                  goto LABEL_278;
                v221 = *v218 + 1;
                *v218-- = v221;
                v222 = *(_QWORD *)(v219 + 8 * v214--);
              }
              while (v221 >= v222);
              v215 = v220 - 1;
            }
            v214 = 1;
          }
        }
        while ((v215 & 0x8000000000000000) == 0 && v214);
        goto LABEL_278;
      case 2:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v26 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)v1193[0]);
            v1193[0] = v26;
            *v26 = 1;
            do
            {
              v27 = __ldaxr(v20);
              v23 = --v27 == 0;
            }
            while (__stlxr(v27, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v74 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v74, (uint64_t)v1193[0]);
            v1193[0] = v74;
            *v74 = 1;
            do
            {
              v75 = __ldaxr(v68);
              v71 = --v75 == 0;
            }
            while (__stlxr(v75, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v267 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v267, (uint64_t)v1193[0]);
            v1193[0] = v267;
            *v267 = 1;
            do
            {
              v268 = __ldaxr(v138);
              v227 = --v268 == 0;
            }
            while (__stlxr(v268, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v223 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v223, (uint64_t)v1193[0]);
            v1193[0] = v223;
            *v223 = 1;
            do
            {
              v224 = __ldaxr(v138);
              v141 = --v224 == 0;
            }
            while (__stlxr(v224, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v269 = operator new();
            v270 = v1193[0];
            *(_QWORD *)v269 = *v1193[0];
            *(_QWORD *)(v269 + 8) = v270[1];
            v271 = v270[2];
            *(_QWORD *)(v269 + 16) = v271;
            if (v271)
            {
              v272 = (unsigned int *)(v271 + 8);
              do
                v273 = __ldxr(v272);
              while (__stxr(v273 + 1, v272));
            }
            v274 = *(_OWORD *)(v270 + 3);
            v275 = *(_OWORD *)(v270 + 5);
            *(_OWORD *)(v269 + 56) = *(_OWORD *)(v270 + 7);
            *(_OWORD *)(v269 + 40) = v275;
            *(_OWORD *)(v269 + 24) = v274;
            v1193[0] = (_QWORD *)v269;
            *(_QWORD *)v269 = 1;
            do
            {
              v276 = __ldaxr(v228);
              v237 = --v276 == 0;
            }
            while (__stlxr(v276, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v135 = (_QWORD *)operator new();
            v136 = v1193[0] + 1;
            *v135 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v135 + 1, (uint64_t)v136);
            v1193[0] = v135;
            *v135 = 1;
            do
            {
              v137 = __ldaxr(v76);
              v80 = --v137 == 0;
            }
            while (__stlxr(v137, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 3:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v28 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v28, (uint64_t)v1193[0]);
            v1193[0] = v28;
            *v28 = 1;
            do
            {
              v29 = __ldaxr(v20);
              v23 = --v29 == 0;
            }
            while (__stlxr(v29, v20));
            goto LABEL_200;
          case 3:
            v81 = v1195;
            v82 = v1193[0];
            if (*v1193[0] != 1)
            {
              v83 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v83, (uint64_t)v1193[0]);
              v1193[0] = v83;
              *v83 = 1;
              do
              {
                v84 = __ldaxr(v82);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v82));
              if (!v85)
              {
                v86 = (void *)v82[1];
                if (v86)
                {
                  v82[2] = (unint64_t)v86;
                  operator delete(v86);
                }
                MEMORY[0x219A19A08](v82, 0x1080C409938AC02);
              }
            }
            v87 = v1193[0];
            turi::flexible_type_fail(v1193[0][2] - v1193[0][1] == *(_QWORD *)(*(_QWORD *)&v81 + 16)
                                                                - *(_QWORD *)(*(_QWORD *)&v81 + 8));
            v88 = (double *)v87[1];
            v89 = v87[2] - (_QWORD)v88;
            if (v89)
            {
              v90 = v89 >> 3;
              v91 = *(double **)(*(_QWORD *)&v81 + 8);
              if (v90 <= 1)
                v90 = 1;
              do
              {
                v92 = *v91++;
                *v88 = v92 * *v88;
                ++v88;
                --v90;
              }
              while (v90);
            }
            goto LABEL_473;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v279 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v279, (uint64_t)v1193[0]);
            v1193[0] = v279;
            *v279 = 1;
            do
            {
              v280 = __ldaxr(v138);
              v227 = --v280 == 0;
            }
            while (__stlxr(v280, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v241 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v241, (uint64_t)v1193[0]);
            v1193[0] = v241;
            *v241 = 1;
            do
            {
              v242 = __ldaxr(v138);
              v141 = --v242 == 0;
            }
            while (__stlxr(v242, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v303 = operator new();
            v304 = v1193[0];
            *(_QWORD *)v303 = *v1193[0];
            *(_QWORD *)(v303 + 8) = v304[1];
            v305 = v304[2];
            *(_QWORD *)(v303 + 16) = v305;
            if (v305)
            {
              v306 = (unsigned int *)(v305 + 8);
              do
                v307 = __ldxr(v306);
              while (__stxr(v307 + 1, v306));
            }
            v308 = *(_OWORD *)(v304 + 3);
            v309 = *(_OWORD *)(v304 + 5);
            *(_OWORD *)(v303 + 56) = *(_OWORD *)(v304 + 7);
            *(_OWORD *)(v303 + 40) = v309;
            *(_OWORD *)(v303 + 24) = v308;
            v1193[0] = (_QWORD *)v303;
            *(_QWORD *)v303 = 1;
            do
            {
              v310 = __ldaxr(v228);
              v237 = --v310 == 0;
            }
            while (__stlxr(v310, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v152 = (_QWORD *)operator new();
            v153 = v1193[0] + 1;
            *v152 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v152 + 1, (uint64_t)v153);
            v1193[0] = v152;
            *v152 = 1;
            do
            {
              v154 = __ldaxr(v76);
              v80 = --v154 == 0;
            }
            while (__stlxr(v154, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 4:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v21 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v21, (uint64_t)v1193[0]);
            v1193[0] = v21;
            *v21 = 1;
            do
            {
              v22 = __ldaxr(v20);
              v23 = --v22 == 0;
            }
            while (__stlxr(v22, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v69 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v69, (uint64_t)v1193[0]);
            v1193[0] = v69;
            *v69 = 1;
            do
            {
              v70 = __ldaxr(v68);
              v71 = --v70 == 0;
            }
            while (__stlxr(v70, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v225 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v225, (uint64_t)v1193[0]);
            v1193[0] = v225;
            *v225 = 1;
            do
            {
              v226 = __ldaxr(v138);
              v227 = --v226 == 0;
            }
            while (__stlxr(v226, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v139 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v139, (uint64_t)v1193[0]);
            v1193[0] = v139;
            *v139 = 1;
            do
            {
              v140 = __ldaxr(v138);
              v141 = --v140 == 0;
            }
            while (__stlxr(v140, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v229 = operator new();
            v230 = v1193[0];
            *(_QWORD *)v229 = *v1193[0];
            *(_QWORD *)(v229 + 8) = v230[1];
            v231 = v230[2];
            *(_QWORD *)(v229 + 16) = v231;
            if (v231)
            {
              v232 = (unsigned int *)(v231 + 8);
              do
                v233 = __ldxr(v232);
              while (__stxr(v233 + 1, v232));
            }
            v234 = *(_OWORD *)(v230 + 3);
            v235 = *(_OWORD *)(v230 + 5);
            *(_OWORD *)(v229 + 56) = *(_OWORD *)(v230 + 7);
            *(_OWORD *)(v229 + 40) = v235;
            *(_OWORD *)(v229 + 24) = v234;
            v1193[0] = (_QWORD *)v229;
            *(_QWORD *)v229 = 1;
            do
            {
              v236 = __ldaxr(v228);
              v237 = --v236 == 0;
            }
            while (__stlxr(v236, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v77 = (_QWORD *)operator new();
            v78 = v1193[0] + 1;
            *v77 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v77 + 1, (uint64_t)v78);
            v1193[0] = v77;
            *v77 = 1;
            do
            {
              v79 = __ldaxr(v76);
              v80 = --v79 == 0;
            }
            while (__stlxr(v79, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 5:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v32 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)v1193[0]);
            v1193[0] = v32;
            *v32 = 1;
            do
            {
              v33 = __ldaxr(v20);
              v23 = --v33 == 0;
            }
            while (__stlxr(v33, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v142 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v142, (uint64_t)v1193[0]);
            v1193[0] = v142;
            *v142 = 1;
            do
            {
              v143 = __ldaxr(v68);
              v71 = --v143 == 0;
            }
            while (__stlxr(v143, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v341 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v341, (uint64_t)v1193[0]);
            v1193[0] = v341;
            *v341 = 1;
            do
            {
              v342 = __ldaxr(v138);
              v227 = --v342 == 0;
            }
            while (__stlxr(v342, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v277 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v277, (uint64_t)v1193[0]);
            v1193[0] = v277;
            *v277 = 1;
            do
            {
              v278 = __ldaxr(v138);
              v141 = --v278 == 0;
            }
            while (__stlxr(v278, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v343 = operator new();
            v344 = v1193[0];
            *(_QWORD *)v343 = *v1193[0];
            *(_QWORD *)(v343 + 8) = v344[1];
            v345 = v344[2];
            *(_QWORD *)(v343 + 16) = v345;
            if (v345)
            {
              v346 = (unsigned int *)(v345 + 8);
              do
                v347 = __ldxr(v346);
              while (__stxr(v347 + 1, v346));
            }
            v348 = *(_OWORD *)(v344 + 3);
            v349 = *(_OWORD *)(v344 + 5);
            *(_OWORD *)(v343 + 56) = *(_OWORD *)(v344 + 7);
            *(_OWORD *)(v343 + 40) = v349;
            *(_OWORD *)(v343 + 24) = v348;
            v1193[0] = (_QWORD *)v343;
            *(_QWORD *)v343 = 1;
            do
            {
              v350 = __ldaxr(v228);
              v237 = --v350 == 0;
            }
            while (__stlxr(v350, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v238 = (_QWORD *)operator new();
            v239 = v1193[0] + 1;
            *v238 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v238 + 1, (uint64_t)v239);
            v1193[0] = v238;
            *v238 = 1;
            do
            {
              v240 = __ldaxr(v76);
              v80 = --v240 == 0;
            }
            while (__stlxr(v240, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 6:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v34 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v34, (uint64_t)v1193[0]);
            v1193[0] = v34;
            *v34 = 1;
            do
            {
              v35 = __ldaxr(v20);
              v23 = --v35 == 0;
            }
            while (__stlxr(v35, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v150 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v150, (uint64_t)v1193[0]);
            v1193[0] = v150;
            *v150 = 1;
            do
            {
              v151 = __ldaxr(v68);
              v71 = --v151 == 0;
            }
            while (__stlxr(v151, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v351 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v351, (uint64_t)v1193[0]);
            v1193[0] = v351;
            *v351 = 1;
            do
            {
              v352 = __ldaxr(v138);
              v227 = --v352 == 0;
            }
            while (__stlxr(v352, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v301 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v301, (uint64_t)v1193[0]);
            v1193[0] = v301;
            *v301 = 1;
            do
            {
              v302 = __ldaxr(v138);
              v141 = --v302 == 0;
            }
            while (__stlxr(v302, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v353 = operator new();
            v354 = v1193[0];
            *(_QWORD *)v353 = *v1193[0];
            *(_QWORD *)(v353 + 8) = v354[1];
            v355 = v354[2];
            *(_QWORD *)(v353 + 16) = v355;
            if (v355)
            {
              v356 = (unsigned int *)(v355 + 8);
              do
                v357 = __ldxr(v356);
              while (__stxr(v357 + 1, v356));
            }
            v358 = *(_OWORD *)(v354 + 3);
            v359 = *(_OWORD *)(v354 + 5);
            *(_OWORD *)(v353 + 56) = *(_OWORD *)(v354 + 7);
            *(_OWORD *)(v353 + 40) = v359;
            *(_OWORD *)(v353 + 24) = v358;
            v1193[0] = (_QWORD *)v353;
            *(_QWORD *)v353 = 1;
            do
            {
              v360 = __ldaxr(v228);
              v237 = --v360 == 0;
            }
            while (__stlxr(v360, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v247 = (_QWORD *)operator new();
            v248 = v1193[0] + 1;
            *v247 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v247 + 1, (uint64_t)v248);
            v1193[0] = v247;
            *v247 = 1;
            do
            {
              v249 = __ldaxr(v76);
              v80 = --v249 == 0;
            }
            while (__stlxr(v249, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 7:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v30 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v30, (uint64_t)v1193[0]);
            v1193[0] = v30;
            *v30 = 1;
            do
            {
              v31 = __ldaxr(v20);
              v23 = --v31 == 0;
            }
            while (__stlxr(v31, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v93 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v93, (uint64_t)v1193[0]);
            v1193[0] = v93;
            *v93 = 1;
            do
            {
              v94 = __ldaxr(v68);
              v71 = --v94 == 0;
            }
            while (__stlxr(v94, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v299 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v299, (uint64_t)v1193[0]);
            v1193[0] = v299;
            *v299 = 1;
            do
            {
              v300 = __ldaxr(v138);
              v227 = --v300 == 0;
            }
            while (__stlxr(v300, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v243 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v243, (uint64_t)v1193[0]);
            v1193[0] = v243;
            *v243 = 1;
            do
            {
              v244 = __ldaxr(v138);
              v141 = --v244 == 0;
            }
            while (__stlxr(v244, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v311 = operator new();
            v312 = v1193[0];
            *(_QWORD *)v311 = *v1193[0];
            *(_QWORD *)(v311 + 8) = v312[1];
            v313 = v312[2];
            *(_QWORD *)(v311 + 16) = v313;
            if (v313)
            {
              v314 = (unsigned int *)(v313 + 8);
              do
                v315 = __ldxr(v314);
              while (__stxr(v315 + 1, v314));
            }
            v316 = *(_OWORD *)(v312 + 3);
            v317 = *(_OWORD *)(v312 + 5);
            *(_OWORD *)(v311 + 56) = *(_OWORD *)(v312 + 7);
            *(_OWORD *)(v311 + 40) = v317;
            *(_OWORD *)(v311 + 24) = v316;
            v1193[0] = (_QWORD *)v311;
            *(_QWORD *)v311 = 1;
            do
            {
              v318 = __ldaxr(v228);
              v237 = --v318 == 0;
            }
            while (__stlxr(v318, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v160 = (_QWORD *)operator new();
            v161 = v1193[0] + 1;
            *v160 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v160 + 1, (uint64_t)v161);
            v1193[0] = v160;
            *v160 = 1;
            do
            {
              v162 = __ldaxr(v76);
              v80 = --v162 == 0;
            }
            while (__stlxr(v162, v76));
            goto LABEL_336;
          default:
            goto LABEL_1541;
        }
      case 8:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v36 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v36, (uint64_t)v1193[0]);
            v1193[0] = v36;
            *v36 = 1;
            do
            {
              v37 = __ldaxr(v20);
              v23 = --v37 == 0;
            }
            while (__stlxr(v37, v20));
            goto LABEL_200;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v155 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v155, (uint64_t)v1193[0]);
            v1193[0] = v155;
            *v155 = 1;
            do
            {
              v156 = __ldaxr(v68);
              v71 = --v156 == 0;
            }
            while (__stlxr(v156, v68));
            goto LABEL_216;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v361 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v361, (uint64_t)v1193[0]);
            v1193[0] = v361;
            *v361 = 1;
            do
            {
              v362 = __ldaxr(v138);
              v227 = --v362 == 0;
            }
            while (__stlxr(v362, v138));
            goto LABEL_457;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v319 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v319, (uint64_t)v1193[0]);
            v1193[0] = v319;
            *v319 = 1;
            do
            {
              v320 = __ldaxr(v138);
              v141 = --v320 == 0;
            }
            while (__stlxr(v320, v138));
            goto LABEL_407;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v363 = operator new();
            v364 = v1193[0];
            *(_QWORD *)v363 = *v1193[0];
            *(_QWORD *)(v363 + 8) = v364[1];
            v365 = v364[2];
            *(_QWORD *)(v363 + 16) = v365;
            if (v365)
            {
              v366 = (unsigned int *)(v365 + 8);
              do
                v367 = __ldxr(v366);
              while (__stxr(v367 + 1, v366));
            }
            v368 = *(_OWORD *)(v364 + 3);
            v369 = *(_OWORD *)(v364 + 5);
            *(_OWORD *)(v363 + 56) = *(_OWORD *)(v364 + 7);
            *(_OWORD *)(v363 + 40) = v369;
            *(_OWORD *)(v363 + 24) = v368;
            v1193[0] = (_QWORD *)v363;
            *(_QWORD *)v363 = 1;
            do
            {
              v370 = __ldaxr(v228);
              v237 = --v370 == 0;
            }
            while (__stlxr(v370, v228));
            goto LABEL_467;
          case 9:
            v76 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v263 = (_QWORD *)operator new();
            v264 = v1193[0] + 1;
            *v263 = *v1193[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v263 + 1, (uint64_t)v264);
            v1193[0] = v263;
            *v263 = 1;
            do
            {
              v265 = __ldaxr(v76);
              v80 = --v265 == 0;
            }
            while (__stlxr(v265, v76));
LABEL_336:
            if (!v80)
              goto LABEL_472;
            v148 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v76);
            v266 = 2071181815;
            goto LABEL_470;
          default:
            goto LABEL_1541;
        }
      case 9:
        switch(BYTE4(v1193[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_472;
          case 2:
            v20 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v24 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, (uint64_t)v1193[0]);
            v1193[0] = v24;
            *v24 = 1;
            do
            {
              v25 = __ldaxr(v20);
              v23 = --v25 == 0;
            }
            while (__stlxr(v25, v20));
LABEL_200:
            if (!v23)
              goto LABEL_472;
            if (*((char *)v20 + 31) < 0)
              operator delete((void *)v20[1]);
            v148 = v20;
            v149 = 0x1012C404EF22A49;
            goto LABEL_471;
          case 3:
            v68 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v72 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v72, (uint64_t)v1193[0]);
            v1193[0] = v72;
            *v72 = 1;
            do
            {
              v73 = __ldaxr(v68);
              v71 = --v73 == 0;
            }
            while (__stlxr(v73, v68));
LABEL_216:
            if (!v71)
              goto LABEL_472;
            v157 = (void *)v68[1];
            if (v157)
            {
              v68[2] = (unint64_t)v157;
              operator delete(v157);
            }
            v148 = v68;
            v149 = 0x1080C409938AC02;
            goto LABEL_471;
          case 4:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v245 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v245, (uint64_t)v1193[0]);
            v1193[0] = v245;
            *v245 = 1;
            do
            {
              v246 = __ldaxr(v138);
              v227 = --v246 == 0;
            }
            while (__stlxr(v246, v138));
LABEL_457:
            if (!v227)
              goto LABEL_472;
            v1189 = (void **)(v138 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
            goto LABEL_460;
          case 5:
            v138 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v158 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v158, (uint64_t)v1193[0]);
            v1193[0] = v158;
            *v158 = 1;
            do
            {
              v159 = __ldaxr(v138);
              v141 = --v159 == 0;
            }
            while (__stlxr(v159, v138));
LABEL_407:
            if (!v141)
              goto LABEL_472;
            v1189 = (void **)(v138 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_460:
            v148 = v138;
            v149 = 0x1020C405E66F15BLL;
            goto LABEL_471;
          case 8:
            v228 = v1193[0];
            if (*v1193[0] == 1)
              goto LABEL_472;
            v255 = operator new();
            v256 = v1193[0];
            *(_QWORD *)v255 = *v1193[0];
            *(_QWORD *)(v255 + 8) = v256[1];
            v257 = v256[2];
            *(_QWORD *)(v255 + 16) = v257;
            if (v257)
            {
              v258 = (unsigned int *)(v257 + 8);
              do
                v259 = __ldxr(v258);
              while (__stxr(v259 + 1, v258));
            }
            v260 = *(_OWORD *)(v256 + 3);
            v261 = *(_OWORD *)(v256 + 5);
            *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 7);
            *(_OWORD *)(v255 + 40) = v261;
            *(_OWORD *)(v255 + 24) = v260;
            v1193[0] = (_QWORD *)v255;
            *(_QWORD *)v255 = 1;
            do
            {
              v262 = __ldaxr(v228);
              v237 = --v262 == 0;
            }
            while (__stlxr(v262, v228));
LABEL_467:
            if (!v237)
              goto LABEL_472;
            boost::detail::shared_count::~shared_count((unsigned int **)v228 + 2);
            v148 = v228;
            v266 = -235920773;
LABEL_470:
            v149 = v266 | 0x1030C4000000000;
LABEL_471:
            MEMORY[0x219A19A08](v148, v149);
LABEL_472:
            turi::flexible_type_fail(0);
            goto LABEL_473;
          case 9:
            v95 = v1195;
            v96 = v1193[0];
            if (*v1193[0] != 1)
            {
              v97 = (_QWORD *)operator new();
              v98 = v1193[0] + 1;
              *v97 = *v1193[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v97 + 1, (uint64_t)v98);
              v1193[0] = v97;
              *v97 = 1;
              do
              {
                v99 = __ldaxr(v96);
                v100 = v99 - 1;
              }
              while (__stlxr(v100, v96));
              if (!v100)
              {
                v101 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v96);
                MEMORY[0x219A19A08](v101, 0x1030C407B73B9F7);
              }
            }
            v102 = v1193[0];
            v103 = v1193[0] + 1;
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v1193[0] + 1), *(_QWORD *)&v95 + 8))
              turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            v105 = (uint64_t *)v102[3];
            v104 = (uint64_t *)v102[4];
            if (v104 == v105)
              goto LABEL_473;
            if (!*v103)
              goto LABEL_473;
            v106 = 1;
            do
            {
              v107 = *v105++;
              v106 *= v107;
            }
            while (v105 != v104);
            if (!v106)
              goto LABEL_473;
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v103);
            v108 = (uint64_t)(v102[4] - v102[3]) >> 3;
            v1191 = 0;
            std::vector<unsigned long>::vector(&v1189, v108, &v1191);
            v109 = v1189;
            v110 = v1190;
            break;
          default:
            goto LABEL_1541;
        }
        break;
      default:
LABEL_1541:
        turi::flexible_type_fail(0);
LABEL_1544:
        __break(1u);
        return;
    }
    while (1)
    {
      v111 = (char *)v110 - (char *)v109;
      if (v111)
      {
        v112 = 0;
        v113 = v111 >> 3;
        v114 = *(uint64_t **)(*(_QWORD *)&v95 + 48);
        if (v113 <= 1)
          v113 = 1;
        v115 = v109;
        v116 = v113;
        do
        {
          v118 = (uint64_t)*v115++;
          v117 = v118;
          v119 = *v114++;
          v112 += v119 * v117;
          --v116;
        }
        while (v116);
        v120 = 0;
        v121 = *(double *)(**(_QWORD **)(*(_QWORD *)&v95 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v95 + 72) + v112));
        v122 = (uint64_t *)v102[6];
        do
        {
          v124 = (uint64_t)*v109++;
          v123 = v124;
          v125 = *v122++;
          v120 += v125 * v123;
          --v113;
        }
        while (v113);
      }
      else
      {
        v120 = 0;
        v121 = *(double *)(**(_QWORD **)(*(_QWORD *)&v95 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v95 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v103);
      *(double *)(*(_QWORD *)v102[1] + 8 * (v102[9] + v120)) = v121
                                                             * *(double *)(*(_QWORD *)v102[1] + 8 * (v102[9] + v120));
      v109 = v1189;
      v110 = v1190;
      v126 = v1190 - v1189;
      v127 = v126 - 1;
      if ((char *)v1190 - (char *)v1189 >= 1)
      {
        v128 = v102[3];
        v129 = (char *)v1189[v127] + 1;
        v1189[v127] = v129;
        if ((unint64_t)v129 >= *(_QWORD *)(v128 + 8 * v127))
        {
          v130 = (unint64_t *)&v109[v126 - 2];
          v131 = v128 - 16;
          do
          {
            v132 = v126 - 1;
            v130[1] = 0;
            if (v126 - 1 <= 0)
              goto LABEL_278;
            v133 = *v130 + 1;
            *v130-- = v133;
            v134 = *(_QWORD *)(v131 + 8 * v126--);
          }
          while (v133 >= v134);
          v127 = v132 - 1;
        }
        v126 = 1;
      }
      if (v127 < 0 || !v126)
      {
LABEL_278:
        if (v109)
        {
LABEL_279:
          v1190 = v109;
          operator delete(v109);
        }
LABEL_473:
        switch(v1197)
        {
          case 2:
            v371 = *(unint64_t **)&v1195;
            do
            {
              v372 = __ldaxr(v371);
              v373 = v372 - 1;
            }
            while (__stlxr(v373, v371));
            if (!v373)
            {
              v374 = v1195;
              if (v1195 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v1195 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v1195 + 8));
                v375 = v374;
                v376 = 0x1012C404EF22A49;
                goto LABEL_510;
              }
            }
            break;
          case 3:
            v385 = *(unint64_t **)&v1195;
            do
            {
              v386 = __ldaxr(v385);
              v387 = v386 - 1;
            }
            while (__stlxr(v387, v385));
            if (!v387)
            {
              v388 = v1195;
              if (v1195 != 0.0)
              {
                v389 = *(void **)(*(_QWORD *)&v1195 + 8);
                if (v389)
                {
                  *(_QWORD *)(*(_QWORD *)&v1195 + 16) = v389;
                  operator delete(v389);
                }
                v375 = v388;
                v376 = 0x1080C409938AC02;
                goto LABEL_510;
              }
            }
            break;
          case 4:
            v377 = *(unint64_t **)&v1195;
            do
            {
              v378 = __ldaxr(v377);
              v379 = v378 - 1;
            }
            while (__stlxr(v379, v377));
            if (!v379)
            {
              v380 = v1195;
              if (v1195 != 0.0)
              {
                v1189 = (void **)(*(_QWORD *)&v1195 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                goto LABEL_503;
              }
            }
            break;
          case 5:
            v390 = *(unint64_t **)&v1195;
            do
            {
              v391 = __ldaxr(v390);
              v392 = v391 - 1;
            }
            while (__stlxr(v392, v390));
            if (!v392)
            {
              v380 = v1195;
              if (v1195 != 0.0)
              {
                v1189 = (void **)(*(_QWORD *)&v1195 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_503:
                v375 = v380;
                v376 = 0x1020C405E66F15BLL;
                goto LABEL_510;
              }
            }
            break;
          case 8:
            v393 = *(unint64_t **)&v1195;
            do
            {
              v394 = __ldaxr(v393);
              v395 = v394 - 1;
            }
            while (__stlxr(v395, v393));
            if (!v395)
            {
              v396 = v1195;
              if (v1195 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v1195 + 16));
                v375 = v396;
                v384 = -235920773;
                goto LABEL_509;
              }
            }
            break;
          case 9:
            v381 = *(unint64_t **)&v1195;
            do
            {
              v382 = __ldaxr(v381);
              v383 = v382 - 1;
            }
            while (__stlxr(v383, v381));
            if (!v383 && v1195 != 0.0)
            {
              v375 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v1195));
              v384 = 2071181815;
LABEL_509:
              v376 = v384 | 0x1030C4000000000;
LABEL_510:
              MEMORY[0x219A19A08](*(_QWORD *)&v375, v376);
            }
            break;
          default:
            break;
        }
        v1186 = (double)*((unint64_t *)a1 + 2)
              / (double)(unint64_t)(*((_QWORD *)a2 + 2) + *((_QWORD *)a1 + 2));
        v1195 = 0.0;
        v1196 = 0;
        v1197 = 0;
        turi::flexible_type::operator=<double>((uint64_t)&v1195, &v1186);
        memset(v1192, 0, 13);
        if (v1192 != (_QWORD **)a1)
        {
          *(_QWORD **)((char *)v1192 + 5) = *(_QWORD **)((char *)a1 + 5);
          v1192[0] = *(_QWORD **)a1;
          BYTE4(v1192[1]) = *((_BYTE *)a1 + 12);
          if (BYTE4(v1192[1]) <= 9u && ((1 << SBYTE4(v1192[1])) & 0x33C) != 0)
          {
            v397 = v1192[0];
            do
              v398 = __ldaxr(v397);
            while (__stlxr(v398 + 1, v397));
          }
        }
        switch(v1197)
        {
          case 0:
            switch(BYTE4(v1192[1]))
            {
              case 0:
                v399 = (uint64_t)v1192[0] * *(_QWORD *)&v1195;
                goto LABEL_546;
              case 1:
                v600 = *(double *)v1192 * (double)*(uint64_t *)&v1195;
                goto LABEL_761;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v494 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v494, (uint64_t)v1192[0]);
                v1192[0] = v494;
                *v494 = 1;
                do
                {
                  v495 = __ldaxr(v400);
                  v403 = --v495 == 0;
                }
                while (__stlxr(v495, v400));
                goto LABEL_644;
              case 3:
                v631 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v632 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v632, (uint64_t)v1192[0]);
                  v1192[0] = v632;
                  *v632 = 1;
                  do
                  {
                    v633 = __ldaxr(v631);
                    v634 = v633 - 1;
                  }
                  while (__stlxr(v634, v631));
                  if (!v634)
                  {
                    v635 = (void *)v631[1];
                    if (v635)
                    {
                      v631[2] = (unint64_t)v635;
                      operator delete(v635);
                    }
                    MEMORY[0x219A19A08](v631, 0x1080C409938AC02);
                  }
                }
                v636 = (double *)v1192[0][1];
                v637 = v1192[0][2] - (_QWORD)v636;
                if (v637)
                {
                  v638 = v637 >> 3;
                  v639 = (double)*(uint64_t *)&v1195;
                  if (v638 <= 1)
                    v638 = 1;
                  do
                  {
                    *v636 = *v636 * v639;
                    ++v636;
                    --v638;
                  }
                  while (v638);
                }
                goto LABEL_917;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v671 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v671, (uint64_t)v1192[0]);
                v1192[0] = v671;
                *v671 = 1;
                do
                {
                  v672 = __ldaxr(v488);
                  v577 = --v672 == 0;
                }
                while (__stlxr(v672, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v601 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v601, (uint64_t)v1192[0]);
                v1192[0] = v601;
                *v601 = 1;
                do
                {
                  v602 = __ldaxr(v488);
                  v491 = --v602 == 0;
                }
                while (__stlxr(v602, v488));
                goto LABEL_851;
              case 6:
              case 7:
                goto LABEL_916;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v675 = operator new();
                v676 = v1192[0];
                *(_QWORD *)v675 = *v1192[0];
                *(_QWORD *)(v675 + 8) = v676[1];
                v677 = v676[2];
                *(_QWORD *)(v675 + 16) = v677;
                if (v677)
                {
                  v678 = (unsigned int *)(v677 + 8);
                  do
                    v679 = __ldxr(v678);
                  while (__stxr(v679 + 1, v678));
                }
                v680 = *(_OWORD *)(v676 + 3);
                v681 = *(_OWORD *)(v676 + 5);
                *(_OWORD *)(v675 + 56) = *(_OWORD *)(v676 + 7);
                *(_OWORD *)(v675 + 40) = v681;
                *(_OWORD *)(v675 + 24) = v680;
                v1192[0] = (_QWORD *)v675;
                *(_QWORD *)v675 = 1;
                do
                {
                  v682 = __ldaxr(v578);
                  v587 = --v682 == 0;
                }
                while (__stlxr(v682, v578));
                goto LABEL_911;
              case 9:
                v513 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v514 = (_QWORD *)operator new();
                  v515 = v1192[0] + 1;
                  *v514 = *v1192[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v514 + 1, (uint64_t)v515);
                  v1192[0] = v514;
                  *v514 = 1;
                  do
                  {
                    v516 = __ldaxr(v513);
                    v517 = v516 - 1;
                  }
                  while (__stlxr(v517, v513));
                  if (!v517)
                  {
                    v518 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v513);
                    MEMORY[0x219A19A08](v518, 0x1030C407B73B9F7);
                  }
                }
                v519 = v1192[0];
                v521 = (uint64_t *)v1192[0][3];
                v520 = (uint64_t *)v1192[0][4];
                if (v520 == v521)
                  goto LABEL_917;
                if (!v1192[0][1])
                  goto LABEL_917;
                v522 = (double)*(uint64_t *)&v1195;
                v523 = 1;
                do
                {
                  v524 = *v521++;
                  v523 *= v524;
                }
                while (v521 != v520);
                if (!v523)
                  goto LABEL_917;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1192[0] + 1);
                v525 = (v519[4] - v519[3]) >> 3;
                v1188 = 0;
                std::vector<unsigned long>::vector(&v1189, v525, &v1188);
                v459 = v1189;
                v526 = v1190;
                break;
              default:
                goto LABEL_1542;
            }
            do
            {
              v527 = 0;
              v528 = (char *)v526 - (char *)v459;
              if (v528)
              {
                v529 = v528 >> 3;
                v530 = (uint64_t *)v519[6];
                if (v529 <= 1)
                  v529 = 1;
                do
                {
                  v532 = (uint64_t)*v459++;
                  v531 = v532;
                  v533 = *v530++;
                  v527 += v533 * v531;
                  --v529;
                }
                while (v529);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v519 + 1);
              *(double *)(*(_QWORD *)v519[1] + 8 * (v519[9] + v527)) = *(double *)(*(_QWORD *)v519[1]
                                                                                 + 8 * (v519[9] + v527))
                                                                     * v522;
              v459 = v1189;
              v526 = v1190;
              v534 = v1190 - v1189;
              v535 = v534 - 1;
              if ((char *)v1190 - (char *)v1189 >= 1)
              {
                v536 = v519[3];
                v537 = (char *)v1189[v535] + 1;
                v1189[v535] = v537;
                if ((unint64_t)v537 >= *(_QWORD *)(v536 + 8 * v535))
                {
                  v538 = (unint64_t *)&v459[v534 - 2];
                  v539 = v536 - 16;
                  do
                  {
                    v540 = v534 - 1;
                    v538[1] = 0;
                    if (v534 - 1 <= 0)
                      goto LABEL_723;
                    v541 = *v538 + 1;
                    *v538-- = v541;
                    v542 = *(_QWORD *)(v539 + 8 * v534--);
                  }
                  while (v541 >= v542);
                  v535 = v540 - 1;
                }
                v534 = 1;
              }
            }
            while ((v535 & 0x8000000000000000) == 0 && v534);
            goto LABEL_722;
          case 1:
            switch(BYTE4(v1192[1]))
            {
              case 0:
                v399 = (uint64_t)(v1195 * (double)(uint64_t)v1192[0]);
LABEL_546:
                v1192[0] = (_QWORD *)v399;
                goto LABEL_917;
              case 1:
                v600 = v1195 * *(double *)v1192;
LABEL_761:
                v1192[0] = *(_QWORD **)&v600;
                goto LABEL_917;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v496 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v496, (uint64_t)v1192[0]);
                v1192[0] = v496;
                *v496 = 1;
                do
                {
                  v497 = __ldaxr(v400);
                  v403 = --v497 == 0;
                }
                while (__stlxr(v497, v400));
                goto LABEL_644;
              case 3:
                v640 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v641 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v641, (uint64_t)v1192[0]);
                  v1192[0] = v641;
                  *v641 = 1;
                  do
                  {
                    v642 = __ldaxr(v640);
                    v643 = v642 - 1;
                  }
                  while (__stlxr(v643, v640));
                  if (!v643)
                  {
                    v644 = (void *)v640[1];
                    if (v644)
                    {
                      v640[2] = (unint64_t)v644;
                      operator delete(v644);
                    }
                    MEMORY[0x219A19A08](v640, 0x1080C409938AC02);
                  }
                }
                v645 = (double *)v1192[0][1];
                v646 = v1192[0][2] - (_QWORD)v645;
                if (v646)
                {
                  v647 = v1195;
                  v648 = v646 >> 3;
                  if (v648 <= 1)
                    v648 = 1;
                  do
                  {
                    *v645 = v647 * *v645;
                    ++v645;
                    --v648;
                  }
                  while (v648);
                }
                goto LABEL_917;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v673 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v673, (uint64_t)v1192[0]);
                v1192[0] = v673;
                *v673 = 1;
                do
                {
                  v674 = __ldaxr(v488);
                  v577 = --v674 == 0;
                }
                while (__stlxr(v674, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v603 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v603, (uint64_t)v1192[0]);
                v1192[0] = v603;
                *v603 = 1;
                do
                {
                  v604 = __ldaxr(v488);
                  v491 = --v604 == 0;
                }
                while (__stlxr(v604, v488));
                goto LABEL_851;
              case 6:
              case 7:
                goto LABEL_916;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v683 = operator new();
                v684 = v1192[0];
                *(_QWORD *)v683 = *v1192[0];
                *(_QWORD *)(v683 + 8) = v684[1];
                v685 = v684[2];
                *(_QWORD *)(v683 + 16) = v685;
                if (v685)
                {
                  v686 = (unsigned int *)(v685 + 8);
                  do
                    v687 = __ldxr(v686);
                  while (__stxr(v687 + 1, v686));
                }
                v688 = *(_OWORD *)(v684 + 3);
                v689 = *(_OWORD *)(v684 + 5);
                *(_OWORD *)(v683 + 56) = *(_OWORD *)(v684 + 7);
                *(_OWORD *)(v683 + 40) = v689;
                *(_OWORD *)(v683 + 24) = v688;
                v1192[0] = (_QWORD *)v683;
                *(_QWORD *)v683 = 1;
                do
                {
                  v690 = __ldaxr(v578);
                  v587 = --v690 == 0;
                }
                while (__stlxr(v690, v578));
                goto LABEL_911;
              case 9:
                v543 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v544 = (_QWORD *)operator new();
                  v545 = v1192[0] + 1;
                  *v544 = *v1192[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v544 + 1, (uint64_t)v545);
                  v1192[0] = v544;
                  *v544 = 1;
                  do
                  {
                    v546 = __ldaxr(v543);
                    v547 = v546 - 1;
                  }
                  while (__stlxr(v547, v543));
                  if (!v547)
                  {
                    v548 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v543);
                    MEMORY[0x219A19A08](v548, 0x1030C407B73B9F7);
                  }
                }
                v549 = v1192[0];
                v551 = (uint64_t *)v1192[0][3];
                v550 = (uint64_t *)v1192[0][4];
                if (v550 == v551)
                  goto LABEL_917;
                if (!v1192[0][1])
                  goto LABEL_917;
                v552 = v1195;
                v553 = 1;
                do
                {
                  v554 = *v551++;
                  v553 *= v554;
                }
                while (v551 != v550);
                if (!v553)
                  goto LABEL_917;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v1192[0] + 1);
                v555 = (v549[4] - v549[3]) >> 3;
                v1188 = 0;
                std::vector<unsigned long>::vector(&v1189, v555, &v1188);
                v459 = v1189;
                v556 = v1190;
                break;
              default:
                goto LABEL_1542;
            }
            do
            {
              v557 = 0;
              v558 = (char *)v556 - (char *)v459;
              if (v558)
              {
                v559 = v558 >> 3;
                v560 = (uint64_t *)v549[6];
                if (v559 <= 1)
                  v559 = 1;
                do
                {
                  v562 = (uint64_t)*v459++;
                  v561 = v562;
                  v563 = *v560++;
                  v557 += v563 * v561;
                  --v559;
                }
                while (v559);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v549 + 1);
              *(double *)(*(_QWORD *)v549[1] + 8 * (v549[9] + v557)) = v552
                                                                     * *(double *)(*(_QWORD *)v549[1]
                                                                                 + 8 * (v549[9] + v557));
              v459 = v1189;
              v556 = v1190;
              v564 = v1190 - v1189;
              v565 = v564 - 1;
              if ((char *)v1190 - (char *)v1189 >= 1)
              {
                v566 = v549[3];
                v567 = (char *)v1189[v565] + 1;
                v1189[v565] = v567;
                if ((unint64_t)v567 >= *(_QWORD *)(v566 + 8 * v565))
                {
                  v568 = (unint64_t *)&v459[v564 - 2];
                  v569 = v566 - 16;
                  do
                  {
                    v570 = v564 - 1;
                    v568[1] = 0;
                    if (v564 - 1 <= 0)
                      goto LABEL_722;
                    v571 = *v568 + 1;
                    *v568-- = v571;
                    v572 = *(_QWORD *)(v569 + 8 * v564--);
                  }
                  while (v571 >= v572);
                  v565 = v570 - 1;
                }
                v564 = 1;
              }
            }
            while ((v565 & 0x8000000000000000) == 0 && v564);
            goto LABEL_722;
          case 2:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v406 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v406, (uint64_t)v1192[0]);
                v1192[0] = v406;
                *v406 = 1;
                do
                {
                  v407 = __ldaxr(v400);
                  v403 = --v407 == 0;
                }
                while (__stlxr(v407, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v424 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v424, (uint64_t)v1192[0]);
                v1192[0] = v424;
                *v424 = 1;
                do
                {
                  v425 = __ldaxr(v418);
                  v421 = --v425 == 0;
                }
                while (__stlxr(v425, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v617 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v617, (uint64_t)v1192[0]);
                v1192[0] = v617;
                *v617 = 1;
                do
                {
                  v618 = __ldaxr(v488);
                  v577 = --v618 == 0;
                }
                while (__stlxr(v618, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v573 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v573, (uint64_t)v1192[0]);
                v1192[0] = v573;
                *v573 = 1;
                do
                {
                  v574 = __ldaxr(v488);
                  v491 = --v574 == 0;
                }
                while (__stlxr(v574, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v619 = operator new();
                v620 = v1192[0];
                *(_QWORD *)v619 = *v1192[0];
                *(_QWORD *)(v619 + 8) = v620[1];
                v621 = v620[2];
                *(_QWORD *)(v619 + 16) = v621;
                if (v621)
                {
                  v622 = (unsigned int *)(v621 + 8);
                  do
                    v623 = __ldxr(v622);
                  while (__stxr(v623 + 1, v622));
                }
                v624 = *(_OWORD *)(v620 + 3);
                v625 = *(_OWORD *)(v620 + 5);
                *(_OWORD *)(v619 + 56) = *(_OWORD *)(v620 + 7);
                *(_OWORD *)(v619 + 40) = v625;
                *(_OWORD *)(v619 + 24) = v624;
                v1192[0] = (_QWORD *)v619;
                *(_QWORD *)v619 = 1;
                do
                {
                  v626 = __ldaxr(v578);
                  v587 = --v626 == 0;
                }
                while (__stlxr(v626, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v485 = (_QWORD *)operator new();
                v486 = v1192[0] + 1;
                *v485 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v485 + 1, (uint64_t)v486);
                v1192[0] = v485;
                *v485 = 1;
                do
                {
                  v487 = __ldaxr(v426);
                  v430 = --v487 == 0;
                }
                while (__stlxr(v487, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 3:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v408 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v408, (uint64_t)v1192[0]);
                v1192[0] = v408;
                *v408 = 1;
                do
                {
                  v409 = __ldaxr(v400);
                  v403 = --v409 == 0;
                }
                while (__stlxr(v409, v400));
                goto LABEL_644;
              case 3:
                v431 = v1195;
                v432 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v433 = (_QWORD *)operator new();
                  std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v433, (uint64_t)v1192[0]);
                  v1192[0] = v433;
                  *v433 = 1;
                  do
                  {
                    v434 = __ldaxr(v432);
                    v435 = v434 - 1;
                  }
                  while (__stlxr(v435, v432));
                  if (!v435)
                  {
                    v436 = (void *)v432[1];
                    if (v436)
                    {
                      v432[2] = (unint64_t)v436;
                      operator delete(v436);
                    }
                    MEMORY[0x219A19A08](v432, 0x1080C409938AC02);
                  }
                }
                v437 = v1192[0];
                turi::flexible_type_fail(v1192[0][2] - v1192[0][1] == *(_QWORD *)(*(_QWORD *)&v431 + 16)
                                                                    - *(_QWORD *)(*(_QWORD *)&v431 + 8));
                v438 = (double *)v437[1];
                v439 = v437[2] - (_QWORD)v438;
                if (v439)
                {
                  v440 = v439 >> 3;
                  v441 = *(double **)(*(_QWORD *)&v431 + 8);
                  if (v440 <= 1)
                    v440 = 1;
                  do
                  {
                    v442 = *v441++;
                    *v438 = v442 * *v438;
                    ++v438;
                    --v440;
                  }
                  while (v440);
                }
                goto LABEL_917;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v629 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v629, (uint64_t)v1192[0]);
                v1192[0] = v629;
                *v629 = 1;
                do
                {
                  v630 = __ldaxr(v488);
                  v577 = --v630 == 0;
                }
                while (__stlxr(v630, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v591 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v591, (uint64_t)v1192[0]);
                v1192[0] = v591;
                *v591 = 1;
                do
                {
                  v592 = __ldaxr(v488);
                  v491 = --v592 == 0;
                }
                while (__stlxr(v592, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v653 = operator new();
                v654 = v1192[0];
                *(_QWORD *)v653 = *v1192[0];
                *(_QWORD *)(v653 + 8) = v654[1];
                v655 = v654[2];
                *(_QWORD *)(v653 + 16) = v655;
                if (v655)
                {
                  v656 = (unsigned int *)(v655 + 8);
                  do
                    v657 = __ldxr(v656);
                  while (__stxr(v657 + 1, v656));
                }
                v658 = *(_OWORD *)(v654 + 3);
                v659 = *(_OWORD *)(v654 + 5);
                *(_OWORD *)(v653 + 56) = *(_OWORD *)(v654 + 7);
                *(_OWORD *)(v653 + 40) = v659;
                *(_OWORD *)(v653 + 24) = v658;
                v1192[0] = (_QWORD *)v653;
                *(_QWORD *)v653 = 1;
                do
                {
                  v660 = __ldaxr(v578);
                  v587 = --v660 == 0;
                }
                while (__stlxr(v660, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v502 = (_QWORD *)operator new();
                v503 = v1192[0] + 1;
                *v502 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v502 + 1, (uint64_t)v503);
                v1192[0] = v502;
                *v502 = 1;
                do
                {
                  v504 = __ldaxr(v426);
                  v430 = --v504 == 0;
                }
                while (__stlxr(v504, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 4:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v401 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v401, (uint64_t)v1192[0]);
                v1192[0] = v401;
                *v401 = 1;
                do
                {
                  v402 = __ldaxr(v400);
                  v403 = --v402 == 0;
                }
                while (__stlxr(v402, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v419 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v419, (uint64_t)v1192[0]);
                v1192[0] = v419;
                *v419 = 1;
                do
                {
                  v420 = __ldaxr(v418);
                  v421 = --v420 == 0;
                }
                while (__stlxr(v420, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v575 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v575, (uint64_t)v1192[0]);
                v1192[0] = v575;
                *v575 = 1;
                do
                {
                  v576 = __ldaxr(v488);
                  v577 = --v576 == 0;
                }
                while (__stlxr(v576, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v489 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v489, (uint64_t)v1192[0]);
                v1192[0] = v489;
                *v489 = 1;
                do
                {
                  v490 = __ldaxr(v488);
                  v491 = --v490 == 0;
                }
                while (__stlxr(v490, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v579 = operator new();
                v580 = v1192[0];
                *(_QWORD *)v579 = *v1192[0];
                *(_QWORD *)(v579 + 8) = v580[1];
                v581 = v580[2];
                *(_QWORD *)(v579 + 16) = v581;
                if (v581)
                {
                  v582 = (unsigned int *)(v581 + 8);
                  do
                    v583 = __ldxr(v582);
                  while (__stxr(v583 + 1, v582));
                }
                v584 = *(_OWORD *)(v580 + 3);
                v585 = *(_OWORD *)(v580 + 5);
                *(_OWORD *)(v579 + 56) = *(_OWORD *)(v580 + 7);
                *(_OWORD *)(v579 + 40) = v585;
                *(_OWORD *)(v579 + 24) = v584;
                v1192[0] = (_QWORD *)v579;
                *(_QWORD *)v579 = 1;
                do
                {
                  v586 = __ldaxr(v578);
                  v587 = --v586 == 0;
                }
                while (__stlxr(v586, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v427 = (_QWORD *)operator new();
                v428 = v1192[0] + 1;
                *v427 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v427 + 1, (uint64_t)v428);
                v1192[0] = v427;
                *v427 = 1;
                do
                {
                  v429 = __ldaxr(v426);
                  v430 = --v429 == 0;
                }
                while (__stlxr(v429, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 5:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v412 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v412, (uint64_t)v1192[0]);
                v1192[0] = v412;
                *v412 = 1;
                do
                {
                  v413 = __ldaxr(v400);
                  v403 = --v413 == 0;
                }
                while (__stlxr(v413, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v492 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v492, (uint64_t)v1192[0]);
                v1192[0] = v492;
                *v492 = 1;
                do
                {
                  v493 = __ldaxr(v418);
                  v421 = --v493 == 0;
                }
                while (__stlxr(v493, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v691 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v691, (uint64_t)v1192[0]);
                v1192[0] = v691;
                *v691 = 1;
                do
                {
                  v692 = __ldaxr(v488);
                  v577 = --v692 == 0;
                }
                while (__stlxr(v692, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v627 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v627, (uint64_t)v1192[0]);
                v1192[0] = v627;
                *v627 = 1;
                do
                {
                  v628 = __ldaxr(v488);
                  v491 = --v628 == 0;
                }
                while (__stlxr(v628, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v693 = operator new();
                v694 = v1192[0];
                *(_QWORD *)v693 = *v1192[0];
                *(_QWORD *)(v693 + 8) = v694[1];
                v695 = v694[2];
                *(_QWORD *)(v693 + 16) = v695;
                if (v695)
                {
                  v696 = (unsigned int *)(v695 + 8);
                  do
                    v697 = __ldxr(v696);
                  while (__stxr(v697 + 1, v696));
                }
                v698 = *(_OWORD *)(v694 + 3);
                v699 = *(_OWORD *)(v694 + 5);
                *(_OWORD *)(v693 + 56) = *(_OWORD *)(v694 + 7);
                *(_OWORD *)(v693 + 40) = v699;
                *(_OWORD *)(v693 + 24) = v698;
                v1192[0] = (_QWORD *)v693;
                *(_QWORD *)v693 = 1;
                do
                {
                  v700 = __ldaxr(v578);
                  v587 = --v700 == 0;
                }
                while (__stlxr(v700, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v588 = (_QWORD *)operator new();
                v589 = v1192[0] + 1;
                *v588 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v588 + 1, (uint64_t)v589);
                v1192[0] = v588;
                *v588 = 1;
                do
                {
                  v590 = __ldaxr(v426);
                  v430 = --v590 == 0;
                }
                while (__stlxr(v590, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 6:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v414 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v414, (uint64_t)v1192[0]);
                v1192[0] = v414;
                *v414 = 1;
                do
                {
                  v415 = __ldaxr(v400);
                  v403 = --v415 == 0;
                }
                while (__stlxr(v415, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v500 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v500, (uint64_t)v1192[0]);
                v1192[0] = v500;
                *v500 = 1;
                do
                {
                  v501 = __ldaxr(v418);
                  v421 = --v501 == 0;
                }
                while (__stlxr(v501, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v701 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v701, (uint64_t)v1192[0]);
                v1192[0] = v701;
                *v701 = 1;
                do
                {
                  v702 = __ldaxr(v488);
                  v577 = --v702 == 0;
                }
                while (__stlxr(v702, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v651 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v651, (uint64_t)v1192[0]);
                v1192[0] = v651;
                *v651 = 1;
                do
                {
                  v652 = __ldaxr(v488);
                  v491 = --v652 == 0;
                }
                while (__stlxr(v652, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v703 = operator new();
                v704 = v1192[0];
                *(_QWORD *)v703 = *v1192[0];
                *(_QWORD *)(v703 + 8) = v704[1];
                v705 = v704[2];
                *(_QWORD *)(v703 + 16) = v705;
                if (v705)
                {
                  v706 = (unsigned int *)(v705 + 8);
                  do
                    v707 = __ldxr(v706);
                  while (__stxr(v707 + 1, v706));
                }
                v708 = *(_OWORD *)(v704 + 3);
                v709 = *(_OWORD *)(v704 + 5);
                *(_OWORD *)(v703 + 56) = *(_OWORD *)(v704 + 7);
                *(_OWORD *)(v703 + 40) = v709;
                *(_OWORD *)(v703 + 24) = v708;
                v1192[0] = (_QWORD *)v703;
                *(_QWORD *)v703 = 1;
                do
                {
                  v710 = __ldaxr(v578);
                  v587 = --v710 == 0;
                }
                while (__stlxr(v710, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v597 = (_QWORD *)operator new();
                v598 = v1192[0] + 1;
                *v597 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v597 + 1, (uint64_t)v598);
                v1192[0] = v597;
                *v597 = 1;
                do
                {
                  v599 = __ldaxr(v426);
                  v430 = --v599 == 0;
                }
                while (__stlxr(v599, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 7:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v410 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v410, (uint64_t)v1192[0]);
                v1192[0] = v410;
                *v410 = 1;
                do
                {
                  v411 = __ldaxr(v400);
                  v403 = --v411 == 0;
                }
                while (__stlxr(v411, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v443 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v443, (uint64_t)v1192[0]);
                v1192[0] = v443;
                *v443 = 1;
                do
                {
                  v444 = __ldaxr(v418);
                  v421 = --v444 == 0;
                }
                while (__stlxr(v444, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v649 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v649, (uint64_t)v1192[0]);
                v1192[0] = v649;
                *v649 = 1;
                do
                {
                  v650 = __ldaxr(v488);
                  v577 = --v650 == 0;
                }
                while (__stlxr(v650, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v593 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v593, (uint64_t)v1192[0]);
                v1192[0] = v593;
                *v593 = 1;
                do
                {
                  v594 = __ldaxr(v488);
                  v491 = --v594 == 0;
                }
                while (__stlxr(v594, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v661 = operator new();
                v662 = v1192[0];
                *(_QWORD *)v661 = *v1192[0];
                *(_QWORD *)(v661 + 8) = v662[1];
                v663 = v662[2];
                *(_QWORD *)(v661 + 16) = v663;
                if (v663)
                {
                  v664 = (unsigned int *)(v663 + 8);
                  do
                    v665 = __ldxr(v664);
                  while (__stxr(v665 + 1, v664));
                }
                v666 = *(_OWORD *)(v662 + 3);
                v667 = *(_OWORD *)(v662 + 5);
                *(_OWORD *)(v661 + 56) = *(_OWORD *)(v662 + 7);
                *(_OWORD *)(v661 + 40) = v667;
                *(_OWORD *)(v661 + 24) = v666;
                v1192[0] = (_QWORD *)v661;
                *(_QWORD *)v661 = 1;
                do
                {
                  v668 = __ldaxr(v578);
                  v587 = --v668 == 0;
                }
                while (__stlxr(v668, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v510 = (_QWORD *)operator new();
                v511 = v1192[0] + 1;
                *v510 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v510 + 1, (uint64_t)v511);
                v1192[0] = v510;
                *v510 = 1;
                do
                {
                  v512 = __ldaxr(v426);
                  v430 = --v512 == 0;
                }
                while (__stlxr(v512, v426));
                goto LABEL_780;
              default:
                goto LABEL_1542;
            }
          case 8:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v416 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v416, (uint64_t)v1192[0]);
                v1192[0] = v416;
                *v416 = 1;
                do
                {
                  v417 = __ldaxr(v400);
                  v403 = --v417 == 0;
                }
                while (__stlxr(v417, v400));
                goto LABEL_644;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v505 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v505, (uint64_t)v1192[0]);
                v1192[0] = v505;
                *v505 = 1;
                do
                {
                  v506 = __ldaxr(v418);
                  v421 = --v506 == 0;
                }
                while (__stlxr(v506, v418));
                goto LABEL_660;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v711 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v711, (uint64_t)v1192[0]);
                v1192[0] = v711;
                *v711 = 1;
                do
                {
                  v712 = __ldaxr(v488);
                  v577 = --v712 == 0;
                }
                while (__stlxr(v712, v488));
                goto LABEL_901;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v669 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v669, (uint64_t)v1192[0]);
                v1192[0] = v669;
                *v669 = 1;
                do
                {
                  v670 = __ldaxr(v488);
                  v491 = --v670 == 0;
                }
                while (__stlxr(v670, v488));
                goto LABEL_851;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v713 = operator new();
                v714 = v1192[0];
                *(_QWORD *)v713 = *v1192[0];
                *(_QWORD *)(v713 + 8) = v714[1];
                v715 = v714[2];
                *(_QWORD *)(v713 + 16) = v715;
                if (v715)
                {
                  v716 = (unsigned int *)(v715 + 8);
                  do
                    v717 = __ldxr(v716);
                  while (__stxr(v717 + 1, v716));
                }
                v718 = *(_OWORD *)(v714 + 3);
                v719 = *(_OWORD *)(v714 + 5);
                *(_OWORD *)(v713 + 56) = *(_OWORD *)(v714 + 7);
                *(_OWORD *)(v713 + 40) = v719;
                *(_OWORD *)(v713 + 24) = v718;
                v1192[0] = (_QWORD *)v713;
                *(_QWORD *)v713 = 1;
                do
                {
                  v720 = __ldaxr(v578);
                  v587 = --v720 == 0;
                }
                while (__stlxr(v720, v578));
                goto LABEL_911;
              case 9:
                v426 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v613 = (_QWORD *)operator new();
                v614 = v1192[0] + 1;
                *v613 = *v1192[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v613 + 1, (uint64_t)v614);
                v1192[0] = v613;
                *v613 = 1;
                do
                {
                  v615 = __ldaxr(v426);
                  v430 = --v615 == 0;
                }
                while (__stlxr(v615, v426));
LABEL_780:
                if (!v430)
                  goto LABEL_916;
                v498 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v426);
                v616 = 2071181815;
                goto LABEL_914;
              default:
                goto LABEL_1542;
            }
          case 9:
            switch(BYTE4(v1192[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_916;
              case 2:
                v400 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v404 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v404, (uint64_t)v1192[0]);
                v1192[0] = v404;
                *v404 = 1;
                do
                {
                  v405 = __ldaxr(v400);
                  v403 = --v405 == 0;
                }
                while (__stlxr(v405, v400));
LABEL_644:
                if (!v403)
                  goto LABEL_916;
                if (*((char *)v400 + 31) < 0)
                  operator delete((void *)v400[1]);
                v498 = v400;
                v499 = 0x1012C404EF22A49;
                goto LABEL_915;
              case 3:
                v418 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v422 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v422, (uint64_t)v1192[0]);
                v1192[0] = v422;
                *v422 = 1;
                do
                {
                  v423 = __ldaxr(v418);
                  v421 = --v423 == 0;
                }
                while (__stlxr(v423, v418));
LABEL_660:
                if (!v421)
                  goto LABEL_916;
                v507 = (void *)v418[1];
                if (v507)
                {
                  v418[2] = (unint64_t)v507;
                  operator delete(v507);
                }
                v498 = v418;
                v499 = 0x1080C409938AC02;
                goto LABEL_915;
              case 4:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v595 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v595, (uint64_t)v1192[0]);
                v1192[0] = v595;
                *v595 = 1;
                do
                {
                  v596 = __ldaxr(v488);
                  v577 = --v596 == 0;
                }
                while (__stlxr(v596, v488));
LABEL_901:
                if (!v577)
                  goto LABEL_916;
                v1189 = (void **)(v488 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                goto LABEL_904;
              case 5:
                v488 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v508 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v508, (uint64_t)v1192[0]);
                v1192[0] = v508;
                *v508 = 1;
                do
                {
                  v509 = __ldaxr(v488);
                  v491 = --v509 == 0;
                }
                while (__stlxr(v509, v488));
LABEL_851:
                if (!v491)
                  goto LABEL_916;
                v1189 = (void **)(v488 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_904:
                v498 = v488;
                v499 = 0x1020C405E66F15BLL;
                goto LABEL_915;
              case 8:
                v578 = v1192[0];
                if (*v1192[0] == 1)
                  goto LABEL_916;
                v605 = operator new();
                v606 = v1192[0];
                *(_QWORD *)v605 = *v1192[0];
                *(_QWORD *)(v605 + 8) = v606[1];
                v607 = v606[2];
                *(_QWORD *)(v605 + 16) = v607;
                if (v607)
                {
                  v608 = (unsigned int *)(v607 + 8);
                  do
                    v609 = __ldxr(v608);
                  while (__stxr(v609 + 1, v608));
                }
                v610 = *(_OWORD *)(v606 + 3);
                v611 = *(_OWORD *)(v606 + 5);
                *(_OWORD *)(v605 + 56) = *(_OWORD *)(v606 + 7);
                *(_OWORD *)(v605 + 40) = v611;
                *(_OWORD *)(v605 + 24) = v610;
                v1192[0] = (_QWORD *)v605;
                *(_QWORD *)v605 = 1;
                do
                {
                  v612 = __ldaxr(v578);
                  v587 = --v612 == 0;
                }
                while (__stlxr(v612, v578));
LABEL_911:
                if (!v587)
                  goto LABEL_916;
                boost::detail::shared_count::~shared_count((unsigned int **)v578 + 2);
                v498 = v578;
                v616 = -235920773;
LABEL_914:
                v499 = v616 | 0x1030C4000000000;
LABEL_915:
                MEMORY[0x219A19A08](v498, v499);
LABEL_916:
                turi::flexible_type_fail(0);
                goto LABEL_917;
              case 9:
                v445 = v1195;
                v446 = v1192[0];
                if (*v1192[0] != 1)
                {
                  v447 = (_QWORD *)operator new();
                  v448 = v1192[0] + 1;
                  *v447 = *v1192[0];
                  turi::flexible_type_impl::ndarray<double>::ndarray(v447 + 1, (uint64_t)v448);
                  v1192[0] = v447;
                  *v447 = 1;
                  do
                  {
                    v449 = __ldaxr(v446);
                    v450 = v449 - 1;
                  }
                  while (__stlxr(v450, v446));
                  if (!v450)
                  {
                    v451 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v446);
                    MEMORY[0x219A19A08](v451, 0x1030C407B73B9F7);
                  }
                }
                v452 = v1192[0];
                v453 = v1192[0] + 1;
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v1192[0] + 1), *(_QWORD *)&v445 + 8))
                  turi::flexible_type_impl::ndarray<double>::operator*=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                v455 = (uint64_t *)v452[3];
                v454 = (uint64_t *)v452[4];
                if (v454 == v455)
                  goto LABEL_917;
                if (!*v453)
                  goto LABEL_917;
                v456 = 1;
                do
                {
                  v457 = *v455++;
                  v456 *= v457;
                }
                while (v455 != v454);
                if (!v456)
                  goto LABEL_917;
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v453);
                v458 = (uint64_t)(v452[4] - v452[3]) >> 3;
                v1188 = 0;
                std::vector<unsigned long>::vector(&v1189, v458, &v1188);
                v459 = v1189;
                v460 = v1190;
                break;
              default:
                goto LABEL_1542;
            }
            break;
          default:
LABEL_1542:
            turi::flexible_type_fail(0);
            goto LABEL_1544;
        }
        while (1)
        {
          v461 = (char *)v460 - (char *)v459;
          if (v461)
          {
            v462 = 0;
            v463 = v461 >> 3;
            v464 = *(uint64_t **)(*(_QWORD *)&v445 + 48);
            if (v463 <= 1)
              v463 = 1;
            v465 = v459;
            v466 = v463;
            do
            {
              v468 = (uint64_t)*v465++;
              v467 = v468;
              v469 = *v464++;
              v462 += v469 * v467;
              --v466;
            }
            while (v466);
            v470 = 0;
            v471 = *(double *)(**(_QWORD **)(*(_QWORD *)&v445 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v445 + 72) + v462));
            v472 = (uint64_t *)v452[6];
            do
            {
              v474 = (uint64_t)*v459++;
              v473 = v474;
              v475 = *v472++;
              v470 += v475 * v473;
              --v463;
            }
            while (v463);
          }
          else
          {
            v470 = 0;
            v471 = *(double *)(**(_QWORD **)(*(_QWORD *)&v445 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v445 + 72));
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v453);
          *(double *)(*(_QWORD *)v452[1] + 8 * (v452[9] + v470)) = v471
                                                                 * *(double *)(*(_QWORD *)v452[1] + 8 * (v452[9] + v470));
          v459 = v1189;
          v460 = v1190;
          v476 = v1190 - v1189;
          v477 = v476 - 1;
          if ((char *)v1190 - (char *)v1189 >= 1)
          {
            v478 = v452[3];
            v479 = (char *)v1189[v477] + 1;
            v1189[v477] = v479;
            if ((unint64_t)v479 >= *(_QWORD *)(v478 + 8 * v477))
            {
              v480 = (unint64_t *)&v459[v476 - 2];
              v481 = v478 - 16;
              do
              {
                v482 = v476 - 1;
                v480[1] = 0;
                if (v476 - 1 <= 0)
                  goto LABEL_722;
                v483 = *v480 + 1;
                *v480-- = v483;
                v484 = *(_QWORD *)(v481 + 8 * v476--);
              }
              while (v483 >= v484);
              v477 = v482 - 1;
            }
            v476 = 1;
          }
          if (v477 < 0 || !v476)
          {
LABEL_722:
            if (v459)
            {
LABEL_723:
              v1190 = v459;
              operator delete(v459);
            }
LABEL_917:
            switch(v1197)
            {
              case 2:
                v721 = *(unint64_t **)&v1195;
                do
                {
                  v722 = __ldaxr(v721);
                  v723 = v722 - 1;
                }
                while (__stlxr(v723, v721));
                if (!v723)
                {
                  v724 = v1195;
                  if (v1195 != 0.0)
                  {
                    if (*(char *)(*(_QWORD *)&v1195 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v1195 + 8));
                    v725 = v724;
                    v726 = 0x1012C404EF22A49;
                    goto LABEL_954;
                  }
                }
                break;
              case 3:
                v735 = *(unint64_t **)&v1195;
                do
                {
                  v736 = __ldaxr(v735);
                  v737 = v736 - 1;
                }
                while (__stlxr(v737, v735));
                if (!v737)
                {
                  v738 = v1195;
                  if (v1195 != 0.0)
                  {
                    v739 = *(void **)(*(_QWORD *)&v1195 + 8);
                    if (v739)
                    {
                      *(_QWORD *)(*(_QWORD *)&v1195 + 16) = v739;
                      operator delete(v739);
                    }
                    v725 = v738;
                    v726 = 0x1080C409938AC02;
                    goto LABEL_954;
                  }
                }
                break;
              case 4:
                v727 = *(unint64_t **)&v1195;
                do
                {
                  v728 = __ldaxr(v727);
                  v729 = v728 - 1;
                }
                while (__stlxr(v729, v727));
                if (!v729)
                {
                  v730 = v1195;
                  if (v1195 != 0.0)
                  {
                    v1189 = (void **)(*(_QWORD *)&v1195 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                    goto LABEL_947;
                  }
                }
                break;
              case 5:
                v740 = *(unint64_t **)&v1195;
                do
                {
                  v741 = __ldaxr(v740);
                  v742 = v741 - 1;
                }
                while (__stlxr(v742, v740));
                if (!v742)
                {
                  v730 = v1195;
                  if (v1195 != 0.0)
                  {
                    v1189 = (void **)(*(_QWORD *)&v1195 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_947:
                    v725 = v730;
                    v726 = 0x1020C405E66F15BLL;
                    goto LABEL_954;
                  }
                }
                break;
              case 8:
                v743 = *(unint64_t **)&v1195;
                do
                {
                  v744 = __ldaxr(v743);
                  v745 = v744 - 1;
                }
                while (__stlxr(v745, v743));
                if (!v745)
                {
                  v746 = v1195;
                  if (v1195 != 0.0)
                  {
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v1195 + 16));
                    v725 = v746;
                    v734 = -235920773;
                    goto LABEL_953;
                  }
                }
                break;
              case 9:
                v731 = *(unint64_t **)&v1195;
                do
                {
                  v732 = __ldaxr(v731);
                  v733 = v732 - 1;
                }
                while (__stlxr(v733, v731));
                if (!v733 && v1195 != 0.0)
                {
                  v725 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v1195));
                  v734 = 2071181815;
LABEL_953:
                  v726 = v734 | 0x1030C4000000000;
LABEL_954:
                  MEMORY[0x219A19A08](*(_QWORD *)&v725, v726);
                }
                break;
              default:
                break;
            }
            *(double *)((char *)v1194 + 5) = *(double *)((char *)v1193 + 5);
            v1194[0] = *(double *)v1193;
            BYTE4(v1194[1]) = BYTE4(v1193[1]);
            if (BYTE4(v1193[1]) <= 9u && ((1 << SBYTE4(v1193[1])) & 0x33C) != 0)
            {
              v748 = *(unint64_t **)&v1194[0];
              do
                v749 = __ldaxr(v748);
              while (__stlxr(v749 + 1, v748));
            }
            switch(BYTE4(v1192[1]))
            {
              case 0:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                    v750 = (char *)v1192[0] + *(_QWORD *)&v1194[0];
                    goto LABEL_1001;
                  case 1:
                    v946 = v1194[0] + (double)(uint64_t)v1192[0];
                    goto LABEL_1258;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v972 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v972, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v972;
                    *v972 = 1;
                    do
                    {
                      v973 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v973 == 0;
                    }
                    while (__stlxr(v973, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v851 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v852 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v852, *(uint64_t *)&v1194[0]);
                      *(_QWORD *)&v1194[0] = v852;
                      *v852 = 1;
                      do
                      {
                        v853 = __ldaxr(v851);
                        v854 = v853 - 1;
                      }
                      while (__stlxr(v854, v851));
                      if (!v854)
                      {
                        v855 = (void *)v851[1];
                        if (v855)
                        {
                          v851[2] = (unint64_t)v855;
                          operator delete(v855);
                        }
                        MEMORY[0x219A19A08](v851, 0x1080C409938AC02);
                      }
                    }
                    v856 = *(double **)(*(_QWORD *)&v1194[0] + 8);
                    v857 = *(_QWORD *)(*(_QWORD *)&v1194[0] + 16) - (_QWORD)v856;
                    if (v857)
                    {
                      v858 = v857 >> 3;
                      v859 = (double)(uint64_t)v1192[0];
                      if (v858 <= 1)
                        v858 = 1;
                      do
                      {
                        *v856 = *v856 + v859;
                        ++v856;
                        --v858;
                      }
                      while (v858);
                    }
                    goto LABEL_1377;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1006 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1006, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1006;
                    *v1006 = 1;
                    do
                    {
                      v1007 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1007 == 0;
                    }
                    while (__stlxr(v1007, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1032 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1032, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1032;
                    *v1032 = 1;
                    do
                    {
                      v1033 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v1033 == 0;
                    }
                    while (__stlxr(v1033, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 6:
                    *(_QWORD *)&v1194[0] = *(_QWORD *)&v1194[0] & 0xFF00000000000000 | ((unint64_t)v1192[0]
                                                                                        + *(_QWORD *)&v1194[0]) & 0xFFFFFFFFFFFFFFLL;
                    goto LABEL_1377;
                  case 7:
                    goto LABEL_1376;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1036 = operator new();
                    v1037 = v1194[0];
                    *(_QWORD *)v1036 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1036 + 8) = *(_QWORD *)(*(_QWORD *)&v1037 + 8);
                    v1038 = *(_QWORD *)(*(_QWORD *)&v1037 + 16);
                    *(_QWORD *)(v1036 + 16) = v1038;
                    if (v1038)
                    {
                      v1039 = (unsigned int *)(v1038 + 8);
                      do
                        v1040 = __ldxr(v1039);
                      while (__stxr(v1040 + 1, v1039));
                    }
                    v1041 = *(_OWORD *)(*(_QWORD *)&v1037 + 24);
                    v1042 = *(_OWORD *)(*(_QWORD *)&v1037 + 40);
                    *(_OWORD *)(v1036 + 56) = *(_OWORD *)(*(_QWORD *)&v1037 + 56);
                    *(_OWORD *)(v1036 + 40) = v1042;
                    *(_OWORD *)(v1036 + 24) = v1041;
                    *(_QWORD *)&v1194[0] = v1036;
                    *(_QWORD *)v1036 = 1;
                    do
                    {
                      v1043 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1043 == 0;
                    }
                    while (__stlxr(v1043, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v884 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v885 = (_QWORD *)operator new();
                      v886 = *(_QWORD *)&v1194[0] + 8;
                      *v885 = **(_QWORD **)&v1194[0];
                      turi::flexible_type_impl::ndarray<double>::ndarray(v885 + 1, v886);
                      *(_QWORD *)&v1194[0] = v885;
                      *v885 = 1;
                      do
                      {
                        v887 = __ldaxr(v884);
                        v888 = v887 - 1;
                      }
                      while (__stlxr(v888, v884));
                      if (!v888)
                      {
                        v889 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v884);
                        MEMORY[0x219A19A08](v889, 0x1030C407B73B9F7);
                      }
                    }
                    v890 = v1194[0];
                    v892 = *(uint64_t **)(*(_QWORD *)&v1194[0] + 24);
                    v891 = *(uint64_t **)(*(_QWORD *)&v1194[0] + 32);
                    if (v891 == v892)
                      goto LABEL_1377;
                    if (!*(_QWORD *)(*(_QWORD *)&v1194[0] + 8))
                      goto LABEL_1377;
                    v893 = (double)(uint64_t)v1192[0];
                    v894 = 1;
                    do
                    {
                      v895 = *v892++;
                      v894 *= v895;
                    }
                    while (v892 != v891);
                    if (!v894)
                      goto LABEL_1377;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v1194[0] + 8));
                    v896 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v890 + 32) - *(_QWORD *)(*(_QWORD *)&v890 + 24)) >> 3;
                    v1191 = 0;
                    std::vector<unsigned long>::vector(&v1189, v896, &v1191);
                    v816 = v1189;
                    v897 = v1190;
                    break;
                  default:
                    goto LABEL_1542;
                }
                while (2)
                {
                  v898 = 0;
                  v899 = (char *)v897 - (char *)v816;
                  if (v899)
                  {
                    v900 = v899 >> 3;
                    v901 = *(uint64_t **)(*(_QWORD *)&v890 + 48);
                    if (v900 <= 1)
                      v900 = 1;
                    do
                    {
                      v903 = (uint64_t)*v816++;
                      v902 = v903;
                      v904 = *v901++;
                      v898 += v904 * v902;
                      --v900;
                    }
                    while (v900);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v890 + 8));
                  *(double *)(**(_QWORD **)(*(_QWORD *)&v890 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v890 + 72) + v898)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v890 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v890 + 72) + v898)) + v893;
                  v816 = v1189;
                  v897 = v1190;
                  v905 = v1190 - v1189;
                  v906 = v905 - 1;
                  if ((char *)v1190 - (char *)v1189 < 1)
                    goto LABEL_1162;
                  v907 = *(_QWORD *)(*(_QWORD *)&v890 + 24);
                  v908 = (char *)v1189[v906] + 1;
                  v1189[v906] = v908;
                  if ((unint64_t)v908 < *(_QWORD *)(v907 + 8 * v906))
                  {
LABEL_1161:
                    v905 = 1;
LABEL_1162:
                    if (v906 < 0 || !v905)
                      goto LABEL_1189;
                    continue;
                  }
                  break;
                }
                v909 = (unint64_t *)&v816[v905 - 2];
                v910 = v907 - 16;
                while (1)
                {
                  v911 = v905 - 1;
                  v909[1] = 0;
                  if (v905 - 1 <= 0)
                    goto LABEL_1190;
                  v912 = *v909 + 1;
                  *v909-- = v912;
                  v913 = *(_QWORD *)(v910 + 8 * v905--);
                  if (v912 < v913)
                  {
                    v906 = v911 - 1;
                    goto LABEL_1161;
                  }
                }
              case 1:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                    v750 = (char *)(uint64_t)(*(double *)v1192 + (double)*(uint64_t *)&v1194[0]);
LABEL_1001:
                    *(_QWORD *)&v1194[0] = v750;
                    goto LABEL_1377;
                  case 1:
                    v946 = *(double *)v1192 + v1194[0];
LABEL_1258:
                    v1194[0] = v946;
                    goto LABEL_1377;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v974 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v974, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v974;
                    *v974 = 1;
                    do
                    {
                      v975 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v975 == 0;
                    }
                    while (__stlxr(v975, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v860 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v861 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v861, *(uint64_t *)&v1194[0]);
                      *(_QWORD *)&v1194[0] = v861;
                      *v861 = 1;
                      do
                      {
                        v862 = __ldaxr(v860);
                        v863 = v862 - 1;
                      }
                      while (__stlxr(v863, v860));
                      if (!v863)
                      {
                        v864 = (void *)v860[1];
                        if (v864)
                        {
                          v860[2] = (unint64_t)v864;
                          operator delete(v864);
                        }
                        MEMORY[0x219A19A08](v860, 0x1080C409938AC02);
                      }
                    }
                    v865 = *(double **)(*(_QWORD *)&v1194[0] + 8);
                    v866 = *(_QWORD *)(*(_QWORD *)&v1194[0] + 16) - (_QWORD)v865;
                    if (v866)
                    {
                      v867 = v1192[0];
                      v868 = v866 >> 3;
                      if (v868 <= 1)
                        v868 = 1;
                      do
                      {
                        *v865 = *(double *)&v867 + *v865;
                        ++v865;
                        --v868;
                      }
                      while (v868);
                    }
                    goto LABEL_1377;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1008 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1008, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1008;
                    *v1008 = 1;
                    do
                    {
                      v1009 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1009 == 0;
                    }
                    while (__stlxr(v1009, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1034 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1034, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1034;
                    *v1034 = 1;
                    do
                    {
                      v1035 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v1035 == 0;
                    }
                    while (__stlxr(v1035, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 6:
                    v976 = vcvtmd_s64_f64(*(double *)v1192);
                    v977 = v1194[0];
                    v978 = *(_QWORD *)&v1194[0] + v976;
                    *(_QWORD *)&v1194[0] = *(_QWORD *)&v1194[0] & 0xFF00000000000000 | (*(_QWORD *)&v1194[0] + v976) & 0xFFFFFFFFFFFFFFLL;
                    v979 = (uint64_t)((*(double *)v1192 - (double)(uint64_t)floor(*(double *)v1192)) * 1000000.0)
                         + SLODWORD(v1194[1]);
                    if (v979 >= 1000000)
                    {
                      *(_QWORD *)&v1194[0] = (v978 + 1) & 0xFFFFFFFFFFFFFFLL | *(_QWORD *)&v977 & 0xFF00000000000000;
                      LODWORD(v979) = v979 - 1000000;
                    }
                    if (v979 >= 0xF4240)
                      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                    LODWORD(v1194[1]) = v979;
                    goto LABEL_1377;
                  case 7:
                    goto LABEL_1376;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1044 = operator new();
                    v1045 = v1194[0];
                    *(_QWORD *)v1044 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1044 + 8) = *(_QWORD *)(*(_QWORD *)&v1045 + 8);
                    v1046 = *(_QWORD *)(*(_QWORD *)&v1045 + 16);
                    *(_QWORD *)(v1044 + 16) = v1046;
                    if (v1046)
                    {
                      v1047 = (unsigned int *)(v1046 + 8);
                      do
                        v1048 = __ldxr(v1047);
                      while (__stxr(v1048 + 1, v1047));
                    }
                    v1049 = *(_OWORD *)(*(_QWORD *)&v1045 + 24);
                    v1050 = *(_OWORD *)(*(_QWORD *)&v1045 + 40);
                    *(_OWORD *)(v1044 + 56) = *(_OWORD *)(*(_QWORD *)&v1045 + 56);
                    *(_OWORD *)(v1044 + 40) = v1050;
                    *(_OWORD *)(v1044 + 24) = v1049;
                    *(_QWORD *)&v1194[0] = v1044;
                    *(_QWORD *)v1044 = 1;
                    do
                    {
                      v1051 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1051 == 0;
                    }
                    while (__stlxr(v1051, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v914 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v915 = (_QWORD *)operator new();
                      v916 = *(_QWORD *)&v1194[0] + 8;
                      *v915 = **(_QWORD **)&v1194[0];
                      turi::flexible_type_impl::ndarray<double>::ndarray(v915 + 1, v916);
                      *(_QWORD *)&v1194[0] = v915;
                      *v915 = 1;
                      do
                      {
                        v917 = __ldaxr(v914);
                        v918 = v917 - 1;
                      }
                      while (__stlxr(v918, v914));
                      if (!v918)
                      {
                        v919 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v914);
                        MEMORY[0x219A19A08](v919, 0x1030C407B73B9F7);
                      }
                    }
                    v920 = v1194[0];
                    v922 = *(uint64_t **)(*(_QWORD *)&v1194[0] + 24);
                    v921 = *(uint64_t **)(*(_QWORD *)&v1194[0] + 32);
                    if (v921 == v922)
                      goto LABEL_1377;
                    if (!*(_QWORD *)(*(_QWORD *)&v1194[0] + 8))
                      goto LABEL_1377;
                    v923 = v1192[0];
                    v924 = 1;
                    do
                    {
                      v925 = *v922++;
                      v924 *= v925;
                    }
                    while (v922 != v921);
                    if (!v924)
                      goto LABEL_1377;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v1194[0] + 8));
                    v926 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v920 + 32) - *(_QWORD *)(*(_QWORD *)&v920 + 24)) >> 3;
                    v1191 = 0;
                    std::vector<unsigned long>::vector(&v1189, v926, &v1191);
                    v816 = v1189;
                    v927 = v1190;
                    break;
                  default:
                    goto LABEL_1542;
                }
                while (2)
                {
                  v928 = 0;
                  v929 = (char *)v927 - (char *)v816;
                  if (v929)
                  {
                    v930 = v929 >> 3;
                    v931 = *(uint64_t **)(*(_QWORD *)&v920 + 48);
                    if (v930 <= 1)
                      v930 = 1;
                    do
                    {
                      v933 = (uint64_t)*v816++;
                      v932 = v933;
                      v934 = *v931++;
                      v928 += v934 * v932;
                      --v930;
                    }
                    while (v930);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v920 + 8));
                  *(double *)(**(_QWORD **)(*(_QWORD *)&v920 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v920 + 72) + v928)) = *(double *)&v923 + *(double *)(**(_QWORD **)(*(_QWORD *)&v920 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v920 + 72) + v928));
                  v816 = v1189;
                  v927 = v1190;
                  v935 = v1190 - v1189;
                  v936 = v935 - 1;
                  if ((char *)v1190 - (char *)v1189 < 1)
                    goto LABEL_1187;
                  v937 = *(_QWORD *)(*(_QWORD *)&v920 + 24);
                  v938 = (char *)v1189[v936] + 1;
                  v1189[v936] = v938;
                  if ((unint64_t)v938 < *(_QWORD *)(v937 + 8 * v936))
                  {
LABEL_1186:
                    v935 = 1;
LABEL_1187:
                    if (v936 < 0 || !v935)
                      goto LABEL_1189;
                    continue;
                  }
                  break;
                }
                v939 = (unint64_t *)&v816[v935 - 2];
                v940 = v937 - 16;
                while (1)
                {
                  v941 = v935 - 1;
                  v939[1] = 0;
                  if (v935 - 1 <= 0)
                    goto LABEL_1189;
                  v942 = *v939 + 1;
                  *v939-- = v942;
                  v943 = *(_QWORD *)(v940 + 8 * v935--);
                  if (v942 < v943)
                  {
                    v936 = v941 - 1;
                    goto LABEL_1186;
                  }
                }
              case 2:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v757 = v1192[0];
                    v758 = v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v759 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v759, *(uint64_t *)&v1194[0]);
                      *(_QWORD *)&v1194[0] = v759;
                      *v759 = 1;
                      do
                      {
                        v760 = __ldaxr(*(unint64_t **)&v758);
                        v761 = v760 - 1;
                      }
                      while (__stlxr(v761, *(unint64_t **)&v758));
                      if (!v761)
                      {
                        if (*(char *)(*(_QWORD *)&v758 + 31) < 0)
                          operator delete(*(void **)(*(_QWORD *)&v758 + 8));
                        MEMORY[0x219A19A08](*(_QWORD *)&v758, 0x1012C404EF22A49);
                      }
                    }
                    v762 = *((char *)v757 + 31);
                    if (v762 >= 0)
                      v763 = (const std::string::value_type *)(v757 + 1);
                    else
                      v763 = (const std::string::value_type *)v757[1];
                    if (v762 >= 0)
                      v764 = *((unsigned __int8 *)v757 + 31);
                    else
                      v764 = v757[2];
                    std::string::append((std::string *)(*(_QWORD *)&v1194[0] + 8), v763, v764);
                    goto LABEL_1377;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v781 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v781, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v781;
                    *v781 = 1;
                    do
                    {
                      v782 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v782 == 0;
                    }
                    while (__stlxr(v782, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v992 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v992, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v992;
                    *v992 = 1;
                    do
                    {
                      v993 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v993 == 0;
                    }
                    while (__stlxr(v993, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v944 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v944, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v944;
                    *v944 = 1;
                    do
                    {
                      v945 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v945 == 0;
                    }
                    while (__stlxr(v945, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v994 = operator new();
                    v995 = v1194[0];
                    *(_QWORD *)v994 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v994 + 8) = *(_QWORD *)(*(_QWORD *)&v995 + 8);
                    v996 = *(_QWORD *)(*(_QWORD *)&v995 + 16);
                    *(_QWORD *)(v994 + 16) = v996;
                    if (v996)
                    {
                      v997 = (unsigned int *)(v996 + 8);
                      do
                        v998 = __ldxr(v997);
                      while (__stxr(v998 + 1, v997));
                    }
                    v999 = *(_OWORD *)(*(_QWORD *)&v995 + 24);
                    v1000 = *(_OWORD *)(*(_QWORD *)&v995 + 40);
                    *(_OWORD *)(v994 + 56) = *(_OWORD *)(*(_QWORD *)&v995 + 56);
                    *(_OWORD *)(v994 + 40) = v1000;
                    *(_OWORD *)(v994 + 24) = v999;
                    *(_QWORD *)&v1194[0] = v994;
                    *(_QWORD *)v994 = 1;
                    do
                    {
                      v1001 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1001 == 0;
                    }
                    while (__stlxr(v1001, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v842 = (_QWORD *)operator new();
                    v843 = *(_QWORD *)&v1194[0] + 8;
                    *v842 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v842 + 1, v843);
                    *(_QWORD *)&v1194[0] = v842;
                    *v842 = 1;
                    do
                    {
                      v844 = __ldaxr(v783);
                      v787 = --v844 == 0;
                    }
                    while (__stlxr(v844, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 3:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v765 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v765, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v765;
                    *v765 = 1;
                    do
                    {
                      v766 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v766 == 0;
                    }
                    while (__stlxr(v766, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v788 = v1192[0];
                    v789 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v790 = (_QWORD *)operator new();
                      std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v790, *(uint64_t *)&v1194[0]);
                      *(_QWORD *)&v1194[0] = v790;
                      *v790 = 1;
                      do
                      {
                        v791 = __ldaxr(v789);
                        v792 = v791 - 1;
                      }
                      while (__stlxr(v792, v789));
                      if (!v792)
                      {
                        v793 = (void *)v789[1];
                        if (v793)
                        {
                          v789[2] = (unint64_t)v793;
                          operator delete(v793);
                        }
                        MEMORY[0x219A19A08](v789, 0x1080C409938AC02);
                      }
                    }
                    v794 = v1194[0];
                    turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v1194[0] + 16)
                                           - *(_QWORD *)(*(_QWORD *)&v1194[0] + 8) == v788[2] - v788[1]);
                    v795 = *(double **)(*(_QWORD *)&v794 + 8);
                    v796 = *(_QWORD *)(*(_QWORD *)&v794 + 16) - (_QWORD)v795;
                    if (v796)
                    {
                      v797 = v796 >> 3;
                      v798 = (double *)v788[1];
                      if (v797 <= 1)
                        v797 = 1;
                      do
                      {
                        v799 = *v798++;
                        *v795 = v799 + *v795;
                        ++v795;
                        --v797;
                      }
                      while (v797);
                    }
                    goto LABEL_1377;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1004 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1004, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1004;
                    *v1004 = 1;
                    do
                    {
                      v1005 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1005 == 0;
                    }
                    while (__stlxr(v1005, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v963 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v963, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v963;
                    *v963 = 1;
                    do
                    {
                      v964 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v964 == 0;
                    }
                    while (__stlxr(v964, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1014 = operator new();
                    v1015 = v1194[0];
                    *(_QWORD *)v1014 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1014 + 8) = *(_QWORD *)(*(_QWORD *)&v1015 + 8);
                    v1016 = *(_QWORD *)(*(_QWORD *)&v1015 + 16);
                    *(_QWORD *)(v1014 + 16) = v1016;
                    if (v1016)
                    {
                      v1017 = (unsigned int *)(v1016 + 8);
                      do
                        v1018 = __ldxr(v1017);
                      while (__stxr(v1018 + 1, v1017));
                    }
                    v1019 = *(_OWORD *)(*(_QWORD *)&v1015 + 24);
                    v1020 = *(_OWORD *)(*(_QWORD *)&v1015 + 40);
                    *(_OWORD *)(v1014 + 56) = *(_OWORD *)(*(_QWORD *)&v1015 + 56);
                    *(_OWORD *)(v1014 + 40) = v1020;
                    *(_OWORD *)(v1014 + 24) = v1019;
                    *(_QWORD *)&v1194[0] = v1014;
                    *(_QWORD *)v1014 = 1;
                    do
                    {
                      v1021 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1021 == 0;
                    }
                    while (__stlxr(v1021, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v871 = (_QWORD *)operator new();
                    v872 = *(_QWORD *)&v1194[0] + 8;
                    *v871 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v871 + 1, v872);
                    *(_QWORD *)&v1194[0] = v871;
                    *v871 = 1;
                    do
                    {
                      v873 = __ldaxr(v783);
                      v787 = --v873 == 0;
                    }
                    while (__stlxr(v873, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 4:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v752 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v752, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v752;
                    *v752 = 1;
                    do
                    {
                      v753 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v753 == 0;
                    }
                    while (__stlxr(v753, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v776 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v776, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v776;
                    *v776 = 1;
                    do
                    {
                      v777 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v777 == 0;
                    }
                    while (__stlxr(v777, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v947 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v947, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v947;
                    *v947 = 1;
                    do
                    {
                      v948 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v948 == 0;
                    }
                    while (__stlxr(v948, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v846 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v846, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v846;
                    *v846 = 1;
                    do
                    {
                      v847 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v847 == 0;
                    }
                    while (__stlxr(v847, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v951 = operator new();
                    v952 = v1194[0];
                    *(_QWORD *)v951 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v951 + 8) = *(_QWORD *)(*(_QWORD *)&v952 + 8);
                    v953 = *(_QWORD *)(*(_QWORD *)&v952 + 16);
                    *(_QWORD *)(v951 + 16) = v953;
                    if (v953)
                    {
                      v954 = (unsigned int *)(v953 + 8);
                      do
                        v955 = __ldxr(v954);
                      while (__stxr(v955 + 1, v954));
                    }
                    v956 = *(_OWORD *)(*(_QWORD *)&v952 + 24);
                    v957 = *(_OWORD *)(*(_QWORD *)&v952 + 40);
                    *(_OWORD *)(v951 + 56) = *(_OWORD *)(*(_QWORD *)&v952 + 56);
                    *(_OWORD *)(v951 + 40) = v957;
                    *(_OWORD *)(v951 + 24) = v956;
                    *(_QWORD *)&v1194[0] = v951;
                    *(_QWORD *)v951 = 1;
                    do
                    {
                      v958 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v958 == 0;
                    }
                    while (__stlxr(v958, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v784 = (_QWORD *)operator new();
                    v785 = *(_QWORD *)&v1194[0] + 8;
                    *v784 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v784 + 1, v785);
                    *(_QWORD *)&v1194[0] = v784;
                    *v784 = 1;
                    do
                    {
                      v786 = __ldaxr(v783);
                      v787 = --v786 == 0;
                    }
                    while (__stlxr(v786, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 5:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v769 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v769, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v769;
                    *v769 = 1;
                    do
                    {
                      v770 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v770 == 0;
                    }
                    while (__stlxr(v770, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v849 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v849, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v849;
                    *v849 = 1;
                    do
                    {
                      v850 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v850 == 0;
                    }
                    while (__stlxr(v850, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1052 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1052, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1052;
                    *v1052 = 1;
                    do
                    {
                      v1053 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1053 == 0;
                    }
                    while (__stlxr(v1053, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1002 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1002, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1002;
                    *v1002 = 1;
                    do
                    {
                      v1003 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v1003 == 0;
                    }
                    while (__stlxr(v1003, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1054 = operator new();
                    v1055 = v1194[0];
                    *(_QWORD *)v1054 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1054 + 8) = *(_QWORD *)(*(_QWORD *)&v1055 + 8);
                    v1056 = *(_QWORD *)(*(_QWORD *)&v1055 + 16);
                    *(_QWORD *)(v1054 + 16) = v1056;
                    if (v1056)
                    {
                      v1057 = (unsigned int *)(v1056 + 8);
                      do
                        v1058 = __ldxr(v1057);
                      while (__stxr(v1058 + 1, v1057));
                    }
                    v1059 = *(_OWORD *)(*(_QWORD *)&v1055 + 24);
                    v1060 = *(_OWORD *)(*(_QWORD *)&v1055 + 40);
                    *(_OWORD *)(v1054 + 56) = *(_OWORD *)(*(_QWORD *)&v1055 + 56);
                    *(_OWORD *)(v1054 + 40) = v1060;
                    *(_OWORD *)(v1054 + 24) = v1059;
                    *(_QWORD *)&v1194[0] = v1054;
                    *(_QWORD *)v1054 = 1;
                    do
                    {
                      v1061 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1061 == 0;
                    }
                    while (__stlxr(v1061, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v960 = (_QWORD *)operator new();
                    v961 = *(_QWORD *)&v1194[0] + 8;
                    *v960 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v960 + 1, v961);
                    *(_QWORD *)&v1194[0] = v960;
                    *v960 = 1;
                    do
                    {
                      v962 = __ldaxr(v783);
                      v787 = --v962 == 0;
                    }
                    while (__stlxr(v962, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 6:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v771 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v771, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v771;
                    *v771 = 1;
                    do
                    {
                      v772 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v772 == 0;
                    }
                    while (__stlxr(v772, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v869 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v869, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v869;
                    *v869 = 1;
                    do
                    {
                      v870 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v870 == 0;
                    }
                    while (__stlxr(v870, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1062 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1062, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1062;
                    *v1062 = 1;
                    do
                    {
                      v1063 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1063 == 0;
                    }
                    while (__stlxr(v1063, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1012 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1012, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1012;
                    *v1012 = 1;
                    do
                    {
                      v1013 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v1013 == 0;
                    }
                    while (__stlxr(v1013, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1064 = operator new();
                    v1065 = v1194[0];
                    *(_QWORD *)v1064 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1064 + 8) = *(_QWORD *)(*(_QWORD *)&v1065 + 8);
                    v1066 = *(_QWORD *)(*(_QWORD *)&v1065 + 16);
                    *(_QWORD *)(v1064 + 16) = v1066;
                    if (v1066)
                    {
                      v1067 = (unsigned int *)(v1066 + 8);
                      do
                        v1068 = __ldxr(v1067);
                      while (__stxr(v1068 + 1, v1067));
                    }
                    v1069 = *(_OWORD *)(*(_QWORD *)&v1065 + 24);
                    v1070 = *(_OWORD *)(*(_QWORD *)&v1065 + 40);
                    *(_OWORD *)(v1064 + 56) = *(_OWORD *)(*(_QWORD *)&v1065 + 56);
                    *(_OWORD *)(v1064 + 40) = v1070;
                    *(_OWORD *)(v1064 + 24) = v1069;
                    *(_QWORD *)&v1194[0] = v1064;
                    *(_QWORD *)v1064 = 1;
                    do
                    {
                      v1071 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1071 == 0;
                    }
                    while (__stlxr(v1071, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v969 = (_QWORD *)operator new();
                    v970 = *(_QWORD *)&v1194[0] + 8;
                    *v969 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v969 + 1, v970);
                    *(_QWORD *)&v1194[0] = v969;
                    *v969 = 1;
                    do
                    {
                      v971 = __ldaxr(v783);
                      v787 = --v971 == 0;
                    }
                    while (__stlxr(v971, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 7:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v767 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v767, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v767;
                    *v767 = 1;
                    do
                    {
                      v768 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v768 == 0;
                    }
                    while (__stlxr(v768, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v800 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v800, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v800;
                    *v800 = 1;
                    do
                    {
                      v801 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v801 == 0;
                    }
                    while (__stlxr(v801, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1010 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1010, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1010;
                    *v1010 = 1;
                    do
                    {
                      v1011 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1011 == 0;
                    }
                    while (__stlxr(v1011, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v965 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v965, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v965;
                    *v965 = 1;
                    do
                    {
                      v966 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v966 == 0;
                    }
                    while (__stlxr(v966, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1022 = operator new();
                    v1023 = v1194[0];
                    *(_QWORD *)v1022 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1022 + 8) = *(_QWORD *)(*(_QWORD *)&v1023 + 8);
                    v1024 = *(_QWORD *)(*(_QWORD *)&v1023 + 16);
                    *(_QWORD *)(v1022 + 16) = v1024;
                    if (v1024)
                    {
                      v1025 = (unsigned int *)(v1024 + 8);
                      do
                        v1026 = __ldxr(v1025);
                      while (__stxr(v1026 + 1, v1025));
                    }
                    v1027 = *(_OWORD *)(*(_QWORD *)&v1023 + 24);
                    v1028 = *(_OWORD *)(*(_QWORD *)&v1023 + 40);
                    *(_OWORD *)(v1022 + 56) = *(_OWORD *)(*(_QWORD *)&v1023 + 56);
                    *(_OWORD *)(v1022 + 40) = v1028;
                    *(_OWORD *)(v1022 + 24) = v1027;
                    *(_QWORD *)&v1194[0] = v1022;
                    *(_QWORD *)v1022 = 1;
                    do
                    {
                      v1029 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1029 == 0;
                    }
                    while (__stlxr(v1029, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v881 = (_QWORD *)operator new();
                    v882 = *(_QWORD *)&v1194[0] + 8;
                    *v881 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v881 + 1, v882);
                    *(_QWORD *)&v1194[0] = v881;
                    *v881 = 1;
                    do
                    {
                      v883 = __ldaxr(v783);
                      v787 = --v883 == 0;
                    }
                    while (__stlxr(v883, v783));
                    goto LABEL_1254;
                  default:
                    goto LABEL_1542;
                }
              case 8:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v773 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v773, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v773;
                    *v773 = 1;
                    do
                    {
                      v774 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v774 == 0;
                    }
                    while (__stlxr(v774, *(unint64_t **)&v751));
                    goto LABEL_1234;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v874 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v874, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v874;
                    *v874 = 1;
                    do
                    {
                      v875 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v875 == 0;
                    }
                    while (__stlxr(v875, *(unint64_t **)&v775));
                    goto LABEL_1127;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1072 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v1072, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1072;
                    *v1072 = 1;
                    do
                    {
                      v1073 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v1073 == 0;
                    }
                    while (__stlxr(v1073, *(unint64_t **)&v845));
                    goto LABEL_1361;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1030 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v1030, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v1030;
                    *v1030 = 1;
                    do
                    {
                      v1031 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v1031 == 0;
                    }
                    while (__stlxr(v1031, *(unint64_t **)&v845));
                    goto LABEL_1319;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v1074 = operator new();
                    v1075 = v1194[0];
                    *(_QWORD *)v1074 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v1074 + 8) = *(_QWORD *)(*(_QWORD *)&v1075 + 8);
                    v1076 = *(_QWORD *)(*(_QWORD *)&v1075 + 16);
                    *(_QWORD *)(v1074 + 16) = v1076;
                    if (v1076)
                    {
                      v1077 = (unsigned int *)(v1076 + 8);
                      do
                        v1078 = __ldxr(v1077);
                      while (__stxr(v1078 + 1, v1077));
                    }
                    v1079 = *(_OWORD *)(*(_QWORD *)&v1075 + 24);
                    v1080 = *(_OWORD *)(*(_QWORD *)&v1075 + 40);
                    *(_OWORD *)(v1074 + 56) = *(_OWORD *)(*(_QWORD *)&v1075 + 56);
                    *(_OWORD *)(v1074 + 40) = v1080;
                    *(_OWORD *)(v1074 + 24) = v1079;
                    *(_QWORD *)&v1194[0] = v1074;
                    *(_QWORD *)v1074 = 1;
                    do
                    {
                      v1081 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v1081 == 0;
                    }
                    while (__stlxr(v1081, *(unint64_t **)&v950));
                    goto LABEL_1371;
                  case 9:
                    v783 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v988 = (_QWORD *)operator new();
                    v989 = *(_QWORD *)&v1194[0] + 8;
                    *v988 = **(_QWORD **)&v1194[0];
                    turi::flexible_type_impl::ndarray<double>::ndarray(v988 + 1, v989);
                    *(_QWORD *)&v1194[0] = v988;
                    *v988 = 1;
                    do
                    {
                      v990 = __ldaxr(v783);
                      v787 = --v990 == 0;
                    }
                    while (__stlxr(v990, v783));
LABEL_1254:
                    if (!v787)
                      goto LABEL_1376;
                    v877 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v783));
                    v991 = 2071181815;
                    goto LABEL_1374;
                  default:
                    goto LABEL_1542;
                }
              case 9:
                switch(BYTE4(v1194[1]))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_1376;
                  case 2:
                    v751 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v755 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v755, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v755;
                    *v755 = 1;
                    do
                    {
                      v756 = __ldaxr(*(unint64_t **)&v751);
                      v754 = --v756 == 0;
                    }
                    while (__stlxr(v756, *(unint64_t **)&v751));
LABEL_1234:
                    if (!v754)
                      goto LABEL_1376;
                    if (*(char *)(*(_QWORD *)&v751 + 31) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v751 + 8));
                    v877 = v751;
                    v878 = 0x1012C404EF22A49;
                    goto LABEL_1375;
                  case 3:
                    v775 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v779 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v779, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v779;
                    *v779 = 1;
                    do
                    {
                      v780 = __ldaxr(*(unint64_t **)&v775);
                      v778 = --v780 == 0;
                    }
                    while (__stlxr(v780, *(unint64_t **)&v775));
LABEL_1127:
                    if (!v778)
                      goto LABEL_1376;
                    v876 = *(void **)(*(_QWORD *)&v775 + 8);
                    if (v876)
                    {
                      *(_QWORD *)(*(_QWORD *)&v775 + 16) = v876;
                      operator delete(v876);
                    }
                    v877 = v775;
                    v878 = 0x1080C409938AC02;
                    goto LABEL_1375;
                  case 4:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v967 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v967, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v967;
                    *v967 = 1;
                    do
                    {
                      v968 = __ldaxr(*(unint64_t **)&v845);
                      v949 = --v968 == 0;
                    }
                    while (__stlxr(v968, *(unint64_t **)&v845));
LABEL_1361:
                    if (!v949)
                      goto LABEL_1376;
                    v1189 = (void **)(*(_QWORD *)&v845 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                    goto LABEL_1364;
                  case 5:
                    v845 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v879 = (_QWORD *)operator new();
                    std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v879, *(uint64_t *)&v1194[0]);
                    *(_QWORD *)&v1194[0] = v879;
                    *v879 = 1;
                    do
                    {
                      v880 = __ldaxr(*(unint64_t **)&v845);
                      v848 = --v880 == 0;
                    }
                    while (__stlxr(v880, *(unint64_t **)&v845));
LABEL_1319:
                    if (!v848)
                      goto LABEL_1376;
                    v1189 = (void **)(*(_QWORD *)&v845 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_1364:
                    v877 = v845;
                    v878 = 0x1020C405E66F15BLL;
                    goto LABEL_1375;
                  case 8:
                    v950 = v1194[0];
                    if (**(_QWORD **)&v1194[0] == 1)
                      goto LABEL_1376;
                    v980 = operator new();
                    v981 = v1194[0];
                    *(_QWORD *)v980 = **(_QWORD **)&v1194[0];
                    *(_QWORD *)(v980 + 8) = *(_QWORD *)(*(_QWORD *)&v981 + 8);
                    v982 = *(_QWORD *)(*(_QWORD *)&v981 + 16);
                    *(_QWORD *)(v980 + 16) = v982;
                    if (v982)
                    {
                      v983 = (unsigned int *)(v982 + 8);
                      do
                        v984 = __ldxr(v983);
                      while (__stxr(v984 + 1, v983));
                    }
                    v985 = *(_OWORD *)(*(_QWORD *)&v981 + 24);
                    v986 = *(_OWORD *)(*(_QWORD *)&v981 + 40);
                    *(_OWORD *)(v980 + 56) = *(_OWORD *)(*(_QWORD *)&v981 + 56);
                    *(_OWORD *)(v980 + 40) = v986;
                    *(_OWORD *)(v980 + 24) = v985;
                    *(_QWORD *)&v1194[0] = v980;
                    *(_QWORD *)v980 = 1;
                    do
                    {
                      v987 = __ldaxr(*(unint64_t **)&v950);
                      v959 = --v987 == 0;
                    }
                    while (__stlxr(v987, *(unint64_t **)&v950));
LABEL_1371:
                    if (!v959)
                      goto LABEL_1376;
                    boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v950 + 16));
                    v877 = v950;
                    v991 = -235920773;
LABEL_1374:
                    v878 = v991 | 0x1030C4000000000;
LABEL_1375:
                    MEMORY[0x219A19A08](*(_QWORD *)&v877, v878);
LABEL_1376:
                    turi::flexible_type_fail(0);
                    goto LABEL_1377;
                  case 9:
                    v802 = v1192[0];
                    v803 = *(unint64_t **)&v1194[0];
                    if (**(_QWORD **)&v1194[0] != 1)
                    {
                      v804 = (_QWORD *)operator new();
                      v805 = *(_QWORD *)&v1194[0] + 8;
                      *v804 = **(_QWORD **)&v1194[0];
                      turi::flexible_type_impl::ndarray<double>::ndarray(v804 + 1, v805);
                      *(_QWORD *)&v1194[0] = v804;
                      *v804 = 1;
                      do
                      {
                        v806 = __ldaxr(v803);
                        v807 = v806 - 1;
                      }
                      while (__stlxr(v807, v803));
                      if (!v807)
                      {
                        v808 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v803);
                        MEMORY[0x219A19A08](v808, 0x1030C407B73B9F7);
                      }
                    }
                    v809 = v1194[0];
                    v810 = (uint64_t *)(*(_QWORD *)&v1194[0] + 8);
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v1194[0] + 8, (uint64_t)(v802 + 1)))
                      turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    v812 = *(uint64_t **)(*(_QWORD *)&v809 + 24);
                    v811 = *(uint64_t **)(*(_QWORD *)&v809 + 32);
                    if (v811 == v812)
                      goto LABEL_1377;
                    if (!*v810)
                      goto LABEL_1377;
                    v813 = 1;
                    do
                    {
                      v814 = *v812++;
                      v813 *= v814;
                    }
                    while (v812 != v811);
                    if (!v813)
                      goto LABEL_1377;
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v810);
                    v815 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v809 + 32) - *(_QWORD *)(*(_QWORD *)&v809 + 24)) >> 3;
                    v1191 = 0;
                    std::vector<unsigned long>::vector(&v1189, v815, &v1191);
                    v816 = v1189;
                    v817 = v1190;
                    break;
                  default:
                    goto LABEL_1542;
                }
                break;
              default:
                goto LABEL_1542;
            }
            while (1)
            {
              v818 = (char *)v817 - (char *)v816;
              if (v818)
              {
                v819 = 0;
                v820 = v818 >> 3;
                v821 = (uint64_t *)v802[6];
                if (v820 <= 1)
                  v820 = 1;
                v822 = v816;
                v823 = v820;
                do
                {
                  v825 = (uint64_t)*v822++;
                  v824 = v825;
                  v826 = *v821++;
                  v819 += v826 * v824;
                  --v823;
                }
                while (v823);
                v827 = 0;
                v828 = *(double *)(*(_QWORD *)v802[1] + 8 * (v802[9] + v819));
                v829 = *(uint64_t **)(*(_QWORD *)&v809 + 48);
                do
                {
                  v831 = (uint64_t)*v816++;
                  v830 = v831;
                  v832 = *v829++;
                  v827 += v832 * v830;
                  --v820;
                }
                while (v820);
              }
              else
              {
                v827 = 0;
                v828 = *(double *)(*(_QWORD *)v802[1] + 8 * v802[9]);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v810);
              *(double *)(**(_QWORD **)(*(_QWORD *)&v809 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v809 + 72) + v827)) = v828 + *(double *)(**(_QWORD **)(*(_QWORD *)&v809 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v809 + 72) + v827));
              v816 = v1189;
              v817 = v1190;
              v833 = v1190 - v1189;
              v834 = v833 - 1;
              if ((char *)v1190 - (char *)v1189 >= 1)
              {
                v835 = *(_QWORD *)(*(_QWORD *)&v809 + 24);
                v836 = (char *)v1189[v834] + 1;
                v1189[v834] = v836;
                if ((unint64_t)v836 >= *(_QWORD *)(v835 + 8 * v834))
                {
                  v837 = (unint64_t *)&v816[v833 - 2];
                  v838 = v835 - 16;
                  while (1)
                  {
                    v839 = v833 - 1;
                    v837[1] = 0;
                    if (v833 - 1 <= 0)
                      break;
                    v840 = *v837 + 1;
                    *v837-- = v840;
                    v841 = *(_QWORD *)(v838 + 8 * v833--);
                    if (v840 < v841)
                    {
                      v834 = v839 - 1;
                      goto LABEL_1076;
                    }
                  }
LABEL_1189:
                  if (v816)
                  {
LABEL_1190:
                    v1190 = v816;
                    operator delete(v816);
                  }
LABEL_1377:
                  if (v1194 == a2)
                  {
                    switch(BYTE4(v1194[1]))
                    {
                      case 2:
                        v1160 = *(unint64_t **)a2;
                        do
                        {
                          v1161 = __ldaxr(v1160);
                          v1162 = v1161 - 1;
                        }
                        while (__stlxr(v1162, v1160));
                        if (!v1162)
                        {
                          v1163 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1535;
                          if (*((char *)v1163 + 31) < 0)
                            operator delete((void *)v1163[1]);
                          v1164 = v1163;
                          v1165 = 0x1012C404EF22A49;
                          goto LABEL_1534;
                        }
                        break;
                      case 3:
                        v1174 = *(unint64_t **)a2;
                        do
                        {
                          v1175 = __ldaxr(v1174);
                          v1176 = v1175 - 1;
                        }
                        while (__stlxr(v1176, v1174));
                        if (!v1176)
                        {
                          v1177 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1535;
                          v1178 = (void *)v1177[1];
                          if (v1178)
                          {
                            v1177[2] = (unint64_t)v1178;
                            operator delete(v1178);
                          }
                          v1164 = v1177;
                          v1165 = 0x1080C409938AC02;
                          goto LABEL_1534;
                        }
                        break;
                      case 4:
                        v1166 = *(unint64_t **)a2;
                        do
                        {
                          v1167 = __ldaxr(v1166);
                          v1168 = v1167 - 1;
                        }
                        while (__stlxr(v1168, v1166));
                        if (!v1168)
                        {
                          v1169 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1535;
                          v1189 = (void **)(v1169 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                          goto LABEL_1527;
                        }
                        break;
                      case 5:
                        v1179 = *(unint64_t **)a2;
                        do
                        {
                          v1180 = __ldaxr(v1179);
                          v1181 = v1180 - 1;
                        }
                        while (__stlxr(v1181, v1179));
                        if (!v1181)
                        {
                          v1169 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1535;
                          v1189 = (void **)(v1169 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_1527:
                          v1164 = v1169;
                          v1165 = 0x1020C405E66F15BLL;
                          goto LABEL_1534;
                        }
                        break;
                      case 8:
                        v1182 = *(unint64_t **)a2;
                        do
                        {
                          v1183 = __ldaxr(v1182);
                          v1184 = v1183 - 1;
                        }
                        while (__stlxr(v1184, v1182));
                        if (!v1184)
                        {
                          v1185 = *(unsigned int ***)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1535;
                          boost::detail::shared_count::~shared_count(v1185 + 2);
                          v1164 = v1185;
                          v1173 = -235920773;
                          goto LABEL_1533;
                        }
                        break;
                      case 9:
                        v1170 = *(unint64_t **)a2;
                        do
                        {
                          v1171 = __ldaxr(v1170);
                          v1172 = v1171 - 1;
                        }
                        while (__stlxr(v1172, v1170));
                        if (!v1172)
                        {
                          if (*(_QWORD *)a2)
                          {
                            v1164 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2);
                            v1173 = 2071181815;
LABEL_1533:
                            v1165 = v1173 | 0x1030C4000000000;
LABEL_1534:
                            MEMORY[0x219A19A08](v1164, v1165);
                          }
LABEL_1535:
                          *a2 = 0.0;
                        }
                        break;
                      default:
                        break;
                    }
                  }
                  else
                  {
                    switch(*((_BYTE *)a2 + 12))
                    {
                      case 2:
                        v1082 = *(unint64_t **)a2;
                        do
                        {
                          v1083 = __ldaxr(v1082);
                          v1084 = v1083 - 1;
                        }
                        while (__stlxr(v1084, v1082));
                        if (!v1084)
                        {
                          v1085 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1416;
                          if (*((char *)v1085 + 31) < 0)
                            operator delete((void *)v1085[1]);
                          v1086 = v1085;
                          v1087 = 0x1012C404EF22A49;
                          goto LABEL_1415;
                        }
                        break;
                      case 3:
                        v1096 = *(unint64_t **)a2;
                        do
                        {
                          v1097 = __ldaxr(v1096);
                          v1098 = v1097 - 1;
                        }
                        while (__stlxr(v1098, v1096));
                        if (!v1098)
                        {
                          v1099 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1416;
                          v1100 = (void *)v1099[1];
                          if (v1100)
                          {
                            v1099[2] = (unint64_t)v1100;
                            operator delete(v1100);
                          }
                          v1086 = v1099;
                          v1087 = 0x1080C409938AC02;
                          goto LABEL_1415;
                        }
                        break;
                      case 4:
                        v1088 = *(unint64_t **)a2;
                        do
                        {
                          v1089 = __ldaxr(v1088);
                          v1090 = v1089 - 1;
                        }
                        while (__stlxr(v1090, v1088));
                        if (!v1090)
                        {
                          v1091 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1416;
                          v1189 = (void **)(v1091 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                          goto LABEL_1408;
                        }
                        break;
                      case 5:
                        v1101 = *(unint64_t **)a2;
                        do
                        {
                          v1102 = __ldaxr(v1101);
                          v1103 = v1102 - 1;
                        }
                        while (__stlxr(v1103, v1101));
                        if (!v1103)
                        {
                          v1091 = *(unint64_t **)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1416;
                          v1189 = (void **)(v1091 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_1408:
                          v1086 = v1091;
                          v1087 = 0x1020C405E66F15BLL;
                          goto LABEL_1415;
                        }
                        break;
                      case 8:
                        v1104 = *(unint64_t **)a2;
                        do
                        {
                          v1105 = __ldaxr(v1104);
                          v1106 = v1105 - 1;
                        }
                        while (__stlxr(v1106, v1104));
                        if (!v1106)
                        {
                          v1107 = *(unsigned int ***)a2;
                          if (!*(_QWORD *)a2)
                            goto LABEL_1416;
                          boost::detail::shared_count::~shared_count(v1107 + 2);
                          v1086 = v1107;
                          v1095 = -235920773;
                          goto LABEL_1414;
                        }
                        break;
                      case 9:
                        v1092 = *(unint64_t **)a2;
                        do
                        {
                          v1093 = __ldaxr(v1092);
                          v1094 = v1093 - 1;
                        }
                        while (__stlxr(v1094, v1092));
                        if (!v1094)
                        {
                          if (*(_QWORD *)a2)
                          {
                            v1086 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2);
                            v1095 = 2071181815;
LABEL_1414:
                            v1087 = v1095 | 0x1030C4000000000;
LABEL_1415:
                            MEMORY[0x219A19A08](v1086, v1087);
                          }
LABEL_1416:
                          *a2 = 0.0;
                        }
                        break;
                      default:
                        break;
                    }
                    *(double *)((char *)a2 + 5) = *(double *)((char *)v1194 + 5);
                    *a2 = v1194[0];
                    *((_BYTE *)a2 + 12) = BYTE4(v1194[1]);
                    BYTE4(v1194[1]) = 0;
                  }
                  memset(v1194, 0, 13);
                  switch(BYTE4(v1192[1]))
                  {
                    case 2:
                      v1108 = v1192[0];
                      do
                      {
                        v1109 = __ldaxr(v1108);
                        v1110 = v1109 - 1;
                      }
                      while (__stlxr(v1110, v1108));
                      if (!v1110)
                      {
                        v1111 = v1192[0];
                        if (v1192[0])
                        {
                          if (*((char *)v1192[0] + 31) < 0)
                            operator delete(*((void **)v1192[0] + 1));
                          v1112 = v1111;
                          v1113 = 0x1012C404EF22A49;
                          goto LABEL_1455;
                        }
                      }
                      break;
                    case 3:
                      v1122 = v1192[0];
                      do
                      {
                        v1123 = __ldaxr(v1122);
                        v1124 = v1123 - 1;
                      }
                      while (__stlxr(v1124, v1122));
                      if (!v1124)
                      {
                        v1125 = v1192[0];
                        if (v1192[0])
                        {
                          v1126 = (void *)v1192[0][1];
                          if (v1126)
                          {
                            v1192[0][2] = v1126;
                            operator delete(v1126);
                          }
                          v1112 = v1125;
                          v1113 = 0x1080C409938AC02;
                          goto LABEL_1455;
                        }
                      }
                      break;
                    case 4:
                      v1114 = v1192[0];
                      do
                      {
                        v1115 = __ldaxr(v1114);
                        v1116 = v1115 - 1;
                      }
                      while (__stlxr(v1116, v1114));
                      if (!v1116)
                      {
                        v1117 = v1192[0];
                        if (v1192[0])
                        {
                          v1189 = (void **)(v1192[0] + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                          goto LABEL_1448;
                        }
                      }
                      break;
                    case 5:
                      v1127 = v1192[0];
                      do
                      {
                        v1128 = __ldaxr(v1127);
                        v1129 = v1128 - 1;
                      }
                      while (__stlxr(v1129, v1127));
                      if (!v1129)
                      {
                        v1117 = v1192[0];
                        if (v1192[0])
                        {
                          v1189 = (void **)(v1192[0] + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_1448:
                          v1112 = v1117;
                          v1113 = 0x1020C405E66F15BLL;
                          goto LABEL_1455;
                        }
                      }
                      break;
                    case 8:
                      v1130 = v1192[0];
                      do
                      {
                        v1131 = __ldaxr(v1130);
                        v1132 = v1131 - 1;
                      }
                      while (__stlxr(v1132, v1130));
                      if (!v1132)
                      {
                        v1133 = v1192[0];
                        if (v1192[0])
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)v1192[0] + 2);
                          v1112 = v1133;
                          v1121 = -235920773;
                          goto LABEL_1454;
                        }
                      }
                      break;
                    case 9:
                      v1118 = v1192[0];
                      do
                      {
                        v1119 = __ldaxr(v1118);
                        v1120 = v1119 - 1;
                      }
                      while (__stlxr(v1120, v1118));
                      if (!v1120 && v1192[0])
                      {
                        v1112 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1192[0]);
                        v1121 = 2071181815;
LABEL_1454:
                        v1113 = v1121 | 0x1030C4000000000;
LABEL_1455:
                        MEMORY[0x219A19A08](v1112, v1113);
                      }
                      break;
                    default:
                      break;
                  }
                  switch(BYTE4(v1193[1]))
                  {
                    case 2:
                      v1134 = v1193[0];
                      do
                      {
                        v1135 = __ldaxr(v1134);
                        v1136 = v1135 - 1;
                      }
                      while (__stlxr(v1136, v1134));
                      if (!v1136)
                      {
                        v1137 = v1193[0];
                        if (v1193[0])
                        {
                          if (*((char *)v1193[0] + 31) < 0)
                            operator delete(*((void **)v1193[0] + 1));
                          v1138 = v1137;
                          v1139 = 0x1012C404EF22A49;
                          goto LABEL_1493;
                        }
                      }
                      break;
                    case 3:
                      v1148 = v1193[0];
                      do
                      {
                        v1149 = __ldaxr(v1148);
                        v1150 = v1149 - 1;
                      }
                      while (__stlxr(v1150, v1148));
                      if (!v1150)
                      {
                        v1151 = v1193[0];
                        if (v1193[0])
                        {
                          v1152 = (void *)v1193[0][1];
                          if (v1152)
                          {
                            v1193[0][2] = v1152;
                            operator delete(v1152);
                          }
                          v1138 = v1151;
                          v1139 = 0x1080C409938AC02;
                          goto LABEL_1493;
                        }
                      }
                      break;
                    case 4:
                      v1140 = v1193[0];
                      do
                      {
                        v1141 = __ldaxr(v1140);
                        v1142 = v1141 - 1;
                      }
                      while (__stlxr(v1142, v1140));
                      if (!v1142)
                      {
                        v1143 = v1193[0];
                        if (v1193[0])
                        {
                          v1189 = (void **)(v1193[0] + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
                          goto LABEL_1486;
                        }
                      }
                      break;
                    case 5:
                      v1153 = v1193[0];
                      do
                      {
                        v1154 = __ldaxr(v1153);
                        v1155 = v1154 - 1;
                      }
                      while (__stlxr(v1155, v1153));
                      if (!v1155)
                      {
                        v1143 = v1193[0];
                        if (v1193[0])
                        {
                          v1189 = (void **)(v1193[0] + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_1486:
                          v1138 = v1143;
                          v1139 = 0x1020C405E66F15BLL;
                          goto LABEL_1493;
                        }
                      }
                      break;
                    case 8:
                      v1156 = v1193[0];
                      do
                      {
                        v1157 = __ldaxr(v1156);
                        v1158 = v1157 - 1;
                      }
                      while (__stlxr(v1158, v1156));
                      if (!v1158)
                      {
                        v1159 = v1193[0];
                        if (v1193[0])
                        {
                          boost::detail::shared_count::~shared_count((unsigned int **)v1193[0] + 2);
                          v1138 = v1159;
                          v1147 = -235920773;
                          goto LABEL_1492;
                        }
                      }
                      break;
                    case 9:
                      v1144 = v1193[0];
                      do
                      {
                        v1145 = __ldaxr(v1144);
                        v1146 = v1145 - 1;
                      }
                      while (__stlxr(v1146, v1144));
                      if (!v1146 && v1193[0])
                      {
                        v1138 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1193[0]);
                        v1147 = 2071181815;
LABEL_1492:
                        v1139 = v1147 | 0x1030C4000000000;
LABEL_1493:
                        MEMORY[0x219A19A08](v1138, v1139);
                      }
                      break;
                    default:
                      break;
                  }
                  v67 = (_QWORD *)(*((_QWORD *)a2 + 2) + *((_QWORD *)a1 + 2));
LABEL_1495:
                  *((_QWORD *)a2 + 2) = v67;
                  return;
                }
LABEL_1076:
                v833 = 1;
              }
              if (v834 < 0 || !v833)
                goto LABEL_1189;
            }
          }
        }
      }
    }
  }
  if (v5)
  {
    if (a1 != a2)
    {
      switch(*((_BYTE *)a2 + 12))
      {
        case 2:
          v11 = *(unint64_t **)a2;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = *(unint64_t **)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_109;
            if (*((char *)v14 + 31) < 0)
              operator delete((void *)v14[1]);
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_108;
          }
          break;
        case 3:
          v49 = *(unint64_t **)a2;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            v52 = *(unint64_t **)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_109;
            v53 = (void *)v52[1];
            if (v53)
            {
              v52[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v15 = v52;
            v16 = 0x1080C409938AC02;
            goto LABEL_108;
          }
          break;
        case 4:
          v41 = *(unint64_t **)a2;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v44 = *(unint64_t **)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_109;
            v1189 = (void **)(v44 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1189);
            goto LABEL_101;
          }
          break;
        case 5:
          v54 = *(unint64_t **)a2;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v44 = *(unint64_t **)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_109;
            v1189 = (void **)(v44 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1189);
LABEL_101:
            v15 = v44;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_108;
          }
          break;
        case 8:
          v57 = *(unint64_t **)a2;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *(unsigned int ***)a2;
            if (!*(_QWORD *)a2)
              goto LABEL_109;
            boost::detail::shared_count::~shared_count(v60 + 2);
            v15 = v60;
            v48 = -235920773;
            goto LABEL_107;
          }
          break;
        case 9:
          v45 = *(unint64_t **)a2;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            if (*(_QWORD *)a2)
            {
              v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2);
              v48 = 2071181815;
LABEL_107:
              v16 = v48 | 0x1030C4000000000;
LABEL_108:
              MEMORY[0x219A19A08](v15, v16);
            }
LABEL_109:
            *a2 = 0.0;
          }
          break;
        default:
          break;
      }
      v61 = *(_QWORD **)a1;
      *(double *)((char *)a2 + 5) = *(double *)((char *)a1 + 5);
      *(_QWORD *)a2 = v61;
      LODWORD(v61) = *((unsigned __int8 *)a1 + 12);
      *((_BYTE *)a2 + 12) = (_BYTE)v61;
      v62 = v61 > 9;
      v63 = (1 << (char)v61) & 0x33C;
      if (!v62 && v63 != 0)
      {
        v65 = *(unint64_t **)a2;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 + 1, v65));
      }
    }
    v67 = (_QWORD *)*((_QWORD *)a1 + 2);
    goto LABEL_1495;
  }
}

void sub_218211360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21,uint64_t a22,int a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int v103;
  void *v104;

  MEMORY[0x219A19A08](v24, 0x1020C405E66F15BLL);
  switch(a24)
  {
    case 2:
      v27 = (unint64_t *)a22;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_39;
      v30 = a22;
      if (!a22)
        goto LABEL_39;
      if (*(char *)(a22 + 31) < 0)
        operator delete(*(void **)(a22 + 8));
      v31 = (_QWORD *)v30;
      v32 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v41 = (unint64_t *)a22;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_39;
      v44 = a22;
      if (!a22)
        goto LABEL_39;
      v45 = *(void **)(a22 + 8);
      if (v45)
      {
        *(_QWORD *)(a22 + 16) = v45;
        operator delete(v45);
      }
      v31 = (_QWORD *)v44;
      v32 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v33 = (unint64_t *)a22;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_39;
      v36 = a22;
      if (!a22)
        goto LABEL_39;
      *(_QWORD *)(v25 - 88) = a22 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
      goto LABEL_31;
    case 5:
      v46 = (unint64_t *)a22;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (v48)
        goto LABEL_39;
      v36 = a22;
      if (!a22)
        goto LABEL_39;
      *(_QWORD *)(v25 - 88) = a22 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
LABEL_31:
      v31 = (_QWORD *)v36;
      v32 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v49 = (unint64_t *)a22;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_39;
      v52 = a22;
      if (!a22)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a22 + 16));
      v31 = (_QWORD *)v52;
      v40 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = (unint64_t *)a22;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39 || !a22)
        goto LABEL_39;
      v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a22);
      v40 = 2071181815;
LABEL_37:
      v32 = v40 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v31, v32);
LABEL_39:
      a22 = 0;
      a23 = 0;
      a24 = 0;
      switch(a18)
      {
        case 2:
          v53 = (unint64_t *)a16;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (v55)
            goto LABEL_77;
          v56 = a16;
          if (!a16)
            goto LABEL_77;
          if (*(char *)(a16 + 31) < 0)
            operator delete(*(void **)(a16 + 8));
          v57 = (_QWORD *)v56;
          v58 = 0x1012C404EF22A49;
          goto LABEL_76;
        case 3:
          v67 = (unint64_t *)a16;
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (v69)
            goto LABEL_77;
          v70 = a16;
          if (!a16)
            goto LABEL_77;
          v71 = *(void **)(a16 + 8);
          if (v71)
          {
            *(_QWORD *)(a16 + 16) = v71;
            operator delete(v71);
          }
          v57 = (_QWORD *)v70;
          v58 = 0x1080C409938AC02;
          goto LABEL_76;
        case 4:
          v59 = (unint64_t *)a16;
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61)
            goto LABEL_77;
          v62 = a16;
          if (!a16)
            goto LABEL_77;
          *(_QWORD *)(v25 - 88) = a16 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
          goto LABEL_69;
        case 5:
          v72 = (unint64_t *)a16;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (v74)
            goto LABEL_77;
          v62 = a16;
          if (!a16)
            goto LABEL_77;
          *(_QWORD *)(v25 - 88) = a16 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
LABEL_69:
          v57 = (_QWORD *)v62;
          v58 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        case 8:
          v75 = (unint64_t *)a16;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (v77)
            goto LABEL_77;
          v78 = a16;
          if (!a16)
            goto LABEL_77;
          boost::detail::shared_count::~shared_count((unsigned int **)(a16 + 16));
          v57 = (_QWORD *)v78;
          v66 = -235920773;
          goto LABEL_75;
        case 9:
          v63 = (unint64_t *)a16;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (v65 || !a16)
            goto LABEL_77;
          v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a16);
          v66 = 2071181815;
LABEL_75:
          v58 = v66 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v57, v58);
LABEL_77:
          a16 = 0;
          a17 = 0;
          switch(a21)
          {
            case 2:
              v79 = (unint64_t *)a19;
              do
              {
                v80 = __ldaxr(v79);
                v81 = v80 - 1;
              }
              while (__stlxr(v81, v79));
              if (v81)
                goto LABEL_121;
              v82 = a19;
              if (!a19)
                goto LABEL_121;
              if (*(char *)(a19 + 31) < 0)
                operator delete(*(void **)(a19 + 8));
              v101 = (_QWORD *)v82;
              v102 = 0x1012C404EF22A49;
              goto LABEL_120;
            case 3:
              v90 = (unint64_t *)a19;
              do
              {
                v91 = __ldaxr(v90);
                v92 = v91 - 1;
              }
              while (__stlxr(v92, v90));
              if (v92)
                goto LABEL_121;
              v93 = a19;
              if (!a19)
                goto LABEL_121;
              v104 = *(void **)(a19 + 8);
              if (v104)
              {
                *(_QWORD *)(a19 + 16) = v104;
                operator delete(v104);
              }
              v101 = (_QWORD *)v93;
              v102 = 0x1080C409938AC02;
              goto LABEL_120;
            case 4:
              v83 = (unint64_t *)a19;
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (v85)
                goto LABEL_121;
              v86 = a19;
              if (!a19)
                goto LABEL_121;
              a16 = a19 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
              goto LABEL_117;
            case 5:
              v94 = (unint64_t *)a19;
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (v96)
                goto LABEL_121;
              v86 = a19;
              if (!a19)
                goto LABEL_121;
              a16 = a19 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_117:
              v101 = (_QWORD *)v86;
              v102 = 0x1020C405E66F15BLL;
              goto LABEL_120;
            case 8:
              v97 = (unint64_t *)a19;
              do
              {
                v98 = __ldaxr(v97);
                v99 = v98 - 1;
              }
              while (__stlxr(v99, v97));
              if (v99)
                goto LABEL_121;
              v100 = a19;
              if (!a19)
                goto LABEL_121;
              boost::detail::shared_count::~shared_count((unsigned int **)(a19 + 16));
              v101 = (_QWORD *)v100;
              v103 = -235920773;
              goto LABEL_119;
            case 9:
              v87 = (unint64_t *)a19;
              do
              {
                v88 = __ldaxr(v87);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v87));
              if (v89 || !a19)
                goto LABEL_121;
              v101 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a19);
              v103 = 2071181815;
LABEL_119:
              v102 = v103 | 0x1030C4000000000;
LABEL_120:
              MEMORY[0x219A19A08](v101, v102);
LABEL_121:
              _Unwind_Resume(a1);
              return;
            default:
              goto LABEL_121;
          }
        default:
          goto LABEL_77;
      }
    default:
      goto LABEL_39;
  }
}

_QWORD *turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::~generic_aggregator(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24D932178;
  v2 = (uint64_t)(a1 + 2);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)(a1 + 5));
  std::pair<turi::flexible_type,unsigned long>::~pair(v2);
  return a1;
}

uint64_t turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::new_instance(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::generic_aggregator(v2, a1 + 16);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::add_element_simple(uint64_t a1, _QWORD **a2)
{
  turi::unity_sarray::mean(void)::$_2::operator()(a2, (_QWORD **)(a1 + 40));
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine()
{
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::combine(turi::group_aggregate_value const&)::{lambda(void)#1}::operator()();
}

uint64_t turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::emit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 __p;
  char v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v8 = v13;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec((uint64_t)&v8, (uint64_t *)(a1 + 40));
  std::stringbuf::str();
  turi::flexible_type::flexible_type<std::string>(a2, &__p);
  if (v7 < 0)
    operator delete((void *)__p);
  v12[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v4;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_218212548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type()
{
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::support_type(turi::flex_type_enum)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name()
{
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::name(void)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save()
{
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::save(turi::oarchive &)const::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load()
{
  turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::load(turi::iarchive &)::{lambda(void)#1}::operator()();
}

void turi::query_eval::generic_aggregator<std::pair<turi::flexible_type,unsigned long>,turi::unity_sarray::mean(void)::$_2>::~generic_aggregator(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_24D932178;
  v1 = (uint64_t)(a1 + 2);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)(a1 + 5));
  std::pair<turi::flexible_type,unsigned long>::~pair(v1);
  JUMPOUT(0x219A19A08);
}

void turi::unity_sarray::mean(void)::$_2::operator()(_QWORD **a1, _QWORD **a2)
{
  int v2;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  BOOL v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  BOOL v86;
  double v87;
  unint64_t *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  _QWORD *v93;
  double *v94;
  uint64_t v95;
  unint64_t v96;
  double *v97;
  double v98;
  _QWORD *v99;
  unint64_t v100;
  double v101;
  unint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void **v115;
  void **v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  void **v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  BOOL v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  void *v154;
  double *v155;
  uint64_t v156;
  unint64_t v157;
  double v158;
  unint64_t *v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  void *v163;
  double *v164;
  uint64_t v165;
  double v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  _QWORD *v173;
  unint64_t v174;
  void *v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t *v183;
  _QWORD *v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void **v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t *v213;
  _QWORD *v214;
  _QWORD *v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  double v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void **v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  unint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  double v245;
  _QWORD *v246;
  unint64_t v247;
  BOOL v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unsigned int *v253;
  unsigned int v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  BOOL v258;
  _QWORD *v259;
  _QWORD *v260;
  unint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  _QWORD *v264;
  unint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  unsigned int v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  unsigned int *v283;
  unsigned int v284;
  __int128 v285;
  __int128 v286;
  unint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  unint64_t v290;
  unsigned int v291;
  _QWORD *v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  unsigned int *v297;
  unsigned int v298;
  __int128 v299;
  __int128 v300;
  unint64_t v301;
  _QWORD *v302;
  unint64_t v303;
  _QWORD *v304;
  unint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  _QWORD *v308;
  unint64_t v309;
  _QWORD *v310;
  unint64_t v311;
  _QWORD *v312;
  unint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  unsigned int *v317;
  unsigned int v318;
  __int128 v319;
  __int128 v320;
  unint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  unsigned int *v325;
  unsigned int v326;
  __int128 v327;
  __int128 v328;
  unint64_t v329;
  _QWORD *v330;
  unint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unsigned int *v339;
  unsigned int v340;
  __int128 v341;
  __int128 v342;
  unint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int v348;
  __int128 v349;
  __int128 v350;
  unint64_t v351;
  _QWORD *v352;
  unint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  unsigned int *v357;
  unsigned int v358;
  __int128 v359;
  __int128 v360;
  unint64_t v361;
  _QWORD *v362;
  unint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  unsigned int *v367;
  unsigned int v368;
  __int128 v369;
  __int128 v370;
  unint64_t v371;
  _QWORD *v372;
  unint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unsigned int *v377;
  unsigned int v378;
  __int128 v379;
  __int128 v380;
  unint64_t v381;
  uint64_t v382;
  int v383;
  unint64_t v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  double v390;
  double v391;
  uint64_t v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  double v396;
  unint64_t *v397;
  unint64_t v398;
  unint64_t v399;
  unsigned int v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t v403;
  double v404;
  void *v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  double v412;
  unint64_t v413;
  double v414;
  _QWORD *v415;
  unint64_t v416;
  unint64_t v417;
  double v418;
  uint64_t v419;
  double v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  double v424;
  uint64_t v425;
  double v426;
  _QWORD *v427;
  unint64_t v428;
  unint64_t v429;
  int v430;
  const std::string::value_type *v431;
  std::string::size_type v432;
  double v433;
  _QWORD *v434;
  unint64_t v435;
  unint64_t v436;
  double v437;
  uint64_t v438;
  double v439;
  _QWORD *v440;
  unint64_t v441;
  BOOL v442;
  double v443;
  _QWORD *v444;
  unint64_t v445;
  unint64_t v446;
  double v447;
  uint64_t v448;
  _QWORD *v449;
  unint64_t v450;
  double v451;
  _QWORD *v452;
  unint64_t v453;
  unint64_t v454;
  double v455;
  uint64_t v456;
  unint64_t *v457;
  _QWORD *v458;
  unint64_t v459;
  unint64_t v460;
  void *v461;
  double *v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t *v465;
  _QWORD *v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  _QWORD *v470;
  uint64_t *v471;
  uint64_t *v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  void **v477;
  void **v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  unint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  double v495;
  _QWORD *v496;
  unint64_t v497;
  unint64_t v498;
  double v499;
  uint64_t v500;
  double v501;
  double v502;
  _QWORD *v503;
  unint64_t v504;
  unint64_t v505;
  _QWORD *v506;
  unint64_t v507;
  unint64_t v508;
  double v509;
  uint64_t v510;
  double v511;
  uint64_t v512;
  unsigned int *v513;
  unsigned int v514;
  __int128 v515;
  __int128 v516;
  unint64_t v517;
  unint64_t v518;
  double v519;
  double v520;
  double v521;
  double v522;
  unint64_t *v523;
  _QWORD *v524;
  unint64_t v525;
  unint64_t v526;
  void *v527;
  unint64_t *v528;
  _QWORD *v529;
  unint64_t v530;
  unint64_t v531;
  void *v532;
  unint64_t *v533;
  _QWORD *v534;
  unint64_t v535;
  unint64_t v536;
  void *v537;
  double v538;
  uint64_t v539;
  unint64_t *v540;
  _QWORD *v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unsigned int v545;
  unint64_t *v546;
  _QWORD *v547;
  unint64_t v548;
  unint64_t v549;
  void *v550;
  double v551;
  double *v552;
  uint64_t v553;
  unint64_t v554;
  double *v555;
  double v556;
  unint64_t *v557;
  _QWORD *v558;
  unint64_t v559;
  BOOL v560;
  unint64_t *v561;
  _QWORD *v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  _QWORD *v566;
  double v567;
  uint64_t *v568;
  uint64_t *v569;
  uint64_t *v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  void **v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  uint64_t *v578;
  void **v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  double v585;
  uint64_t *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  char *v593;
  unint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  unint64_t *v599;
  _QWORD *v600;
  uint64_t v601;
  unint64_t v602;
  unint64_t v603;
  unsigned int v604;
  double v605;
  _QWORD *v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t *v609;
  _QWORD *v610;
  unint64_t v611;
  unint64_t v612;
  void *v613;
  unint64_t *v614;
  _QWORD *v615;
  unint64_t v616;
  unint64_t v617;
  void *v618;
  double *v619;
  uint64_t v620;
  unint64_t v621;
  _QWORD *v622;
  unint64_t v623;
  void *v624;
  double v625;
  uint64_t v626;
  unint64_t *v627;
  _QWORD *v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unsigned int v632;
  unint64_t *v633;
  _QWORD *v634;
  unint64_t v635;
  unint64_t v636;
  void *v637;
  double v638;
  _QWORD *v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t *v642;
  _QWORD *v643;
  uint64_t v644;
  unint64_t v645;
  BOOL v646;
  unint64_t *v647;
  _QWORD *v648;
  uint64_t v649;
  unint64_t v650;
  unint64_t v651;
  _QWORD *v652;
  uint64_t *v653;
  uint64_t *v654;
  uint64_t *v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  void **v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  char *v670;
  unint64_t *v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  unint64_t v675;
  double v676;
  _QWORD *v677;
  unint64_t v678;
  unint64_t v679;
  _QWORD *v680;
  unint64_t v681;
  unint64_t v682;
  double v683;
  uint64_t v684;
  double v685;
  uint64_t v686;
  unsigned int *v687;
  unsigned int v688;
  __int128 v689;
  __int128 v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  BOOL v695;
  unint64_t *v696;
  _QWORD *v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unsigned int v701;
  double v702;
  _QWORD *v703;
  unint64_t v704;
  unint64_t v705;
  double v706;
  _QWORD *v707;
  unint64_t v708;
  BOOL v709;
  _QWORD *v710;
  unint64_t v711;
  unint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  unint64_t v715;
  unsigned int v716;
  _QWORD *v717;
  unint64_t v718;
  double v719;
  unint64_t v720;
  uint64_t v721;
  double v722;
  uint64_t v723;
  double v724;
  uint64_t v725;
  unsigned int *v726;
  unsigned int v727;
  __int128 v728;
  __int128 v729;
  unint64_t v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  BOOL v734;
  _QWORD *v735;
  unsigned int v736;
  unint64_t *v737;
  _QWORD *v738;
  uint64_t v739;
  unint64_t v740;
  unint64_t v741;
  unsigned int v742;
  _QWORD *v743;
  unint64_t v744;
  unint64_t v745;
  double v746;
  uint64_t v747;
  double v748;
  uint64_t v749;
  unsigned int *v750;
  unsigned int v751;
  __int128 v752;
  __int128 v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  BOOL v758;
  uint64_t v759;
  double v760;
  _QWORD *v761;
  unint64_t v762;
  unint64_t v763;
  _QWORD *v764;
  unint64_t v765;
  unint64_t v766;
  _QWORD *v767;
  unint64_t v768;
  BOOL v769;
  _QWORD *v770;
  unint64_t v771;
  _QWORD *v772;
  unint64_t v773;
  double v774;
  uint64_t v775;
  double v776;
  uint64_t v777;
  unsigned int *v778;
  unsigned int v779;
  __int128 v780;
  __int128 v781;
  unint64_t v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v785;
  BOOL v786;
  void *v787;
  double v788;
  uint64_t v789;
  double v790;
  uint64_t v791;
  unsigned int *v792;
  unsigned int v793;
  __int128 v794;
  __int128 v795;
  unint64_t v796;
  BOOL v797;
  double v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t v801;
  _QWORD *v802;
  unint64_t v803;
  uint64_t v804;
  double v805;
  uint64_t v806;
  unsigned int *v807;
  unsigned int v808;
  __int128 v809;
  __int128 v810;
  unint64_t v811;
  _QWORD *v812;
  unint64_t v813;
  unint64_t v814;
  double v815;
  uint64_t v816;
  double v817;
  uint64_t v818;
  unsigned int *v819;
  unsigned int v820;
  __int128 v821;
  __int128 v822;
  unint64_t v823;
  unint64_t v824;
  unint64_t v825;
  unint64_t v826;
  BOOL v827;
  _QWORD *v828;
  unint64_t v829;
  uint64_t v830;
  double v831;
  uint64_t v832;
  unsigned int *v833;
  unsigned int v834;
  __int128 v835;
  __int128 v836;
  unint64_t v837;
  _QWORD *v838;
  unint64_t v839;
  unint64_t v840;
  double v841;
  uint64_t v842;
  double v843;
  uint64_t v844;
  unsigned int *v845;
  unsigned int v846;
  __int128 v847;
  __int128 v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  BOOL v853;
  unint64_t *v854;
  unint64_t v855;
  unint64_t v856;
  _QWORD *v857;
  _QWORD *v858;
  uint64_t v859;
  unint64_t *v860;
  unint64_t v861;
  unint64_t v862;
  _QWORD *v863;
  unint64_t *v864;
  unint64_t v865;
  unint64_t v866;
  unsigned int v867;
  unint64_t *v868;
  unint64_t v869;
  unint64_t v870;
  _QWORD *v871;
  void *v872;
  unint64_t *v873;
  unint64_t v874;
  unint64_t v875;
  unint64_t *v876;
  unint64_t v877;
  unint64_t v878;
  _QWORD *v879;
  unint64_t v880;
  unint64_t v881;
  void *v882;
  unint64_t v883;
  unint64_t v884;
  void *v885;
  unint64_t v886;
  unint64_t v887;
  void *v888;
  unint64_t v889;
  unint64_t v890;
  _QWORD *v891;
  unint64_t v892;
  unint64_t v893;
  void *v894;
  double *v895;
  uint64_t v896;
  unint64_t v897;
  double *v898;
  double v899;
  unint64_t v900;
  unint64_t v901;
  void *v902;
  unint64_t v903;
  unint64_t v904;
  unint64_t v905;
  unint64_t v906;
  _QWORD *v907;
  uint64_t *v908;
  uint64_t *v909;
  uint64_t v910;
  uint64_t v911;
  unint64_t v912;
  void **v913;
  void **v914;
  uint64_t v915;
  uint64_t v916;
  unint64_t v917;
  uint64_t *v918;
  void **v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  double v925;
  uint64_t *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  char *v933;
  unint64_t *v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  unint64_t v942;
  _QWORD *v943;
  unint64_t v944;
  unint64_t v945;
  unint64_t v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  void *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  void *v955;
  unint64_t v956;
  unint64_t v957;
  _QWORD *v958;
  unint64_t v959;
  unint64_t v960;
  unint64_t v961;
  unint64_t v962;
  void *v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  _QWORD *v968;
  unint64_t v969;
  unint64_t v970;
  unint64_t v971;
  unint64_t v972;
  _QWORD *v973;
  uint64_t *v974;
  uint64_t *v975;
  double v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  void **v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  char *v991;
  unint64_t *v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  unint64_t v996;
  unint64_t v997;
  unint64_t v998;
  _QWORD *v999;
  uint64_t *v1000;
  uint64_t *v1001;
  double v1002;
  uint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  void **v1006;
  uint64_t v1007;
  uint64_t v1008;
  unint64_t v1009;
  uint64_t *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  char *v1017;
  unint64_t *v1018;
  uint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  unint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  unint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  uint64_t v1031;
  unsigned int *v1032;
  unsigned int v1033;
  __int128 v1034;
  __int128 v1035;
  unint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  unint64_t v1039;
  _QWORD *v1040;
  unint64_t v1041;
  unint64_t v1042;
  unint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  unint64_t v1046;
  unint64_t v1047;
  unint64_t v1048;
  _QWORD *v1049;
  unint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  uint64_t v1054;
  unsigned int *v1055;
  unsigned int v1056;
  __int128 v1057;
  __int128 v1058;
  unint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  unint64_t v1062;
  _QWORD *v1063;
  unint64_t v1064;
  unint64_t v1065;
  void *v1066;
  double *v1067;
  uint64_t v1068;
  unint64_t v1069;
  double v1070;
  unint64_t v1071;
  unint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  unsigned int *v1078;
  unsigned int v1079;
  __int128 v1080;
  __int128 v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  void *v1090;
  double *v1091;
  uint64_t v1092;
  double v1093;
  unint64_t v1094;
  unint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  unsigned int *v1100;
  unsigned int v1101;
  __int128 v1102;
  __int128 v1103;
  unint64_t v1104;
  unint64_t v1105;
  uint64_t v1106;
  unsigned int *v1107;
  unsigned int v1108;
  __int128 v1109;
  __int128 v1110;
  unint64_t v1111;
  unint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  unint64_t v1115;
  unint64_t v1116;
  unint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  unsigned int *v1120;
  unsigned int v1121;
  __int128 v1122;
  __int128 v1123;
  unint64_t v1124;
  unint64_t v1125;
  uint64_t v1126;
  unsigned int *v1127;
  unsigned int v1128;
  __int128 v1129;
  __int128 v1130;
  unint64_t v1131;
  unint64_t v1132;
  unint64_t v1133;
  unint64_t v1134;
  uint64_t v1135;
  unsigned int *v1136;
  unsigned int v1137;
  __int128 v1138;
  __int128 v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  unsigned int *v1145;
  unsigned int v1146;
  __int128 v1147;
  __int128 v1148;
  unint64_t v1149;
  unint64_t v1150;
  unint64_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  unsigned int *v1154;
  unsigned int v1155;
  __int128 v1156;
  __int128 v1157;
  unint64_t v1158;
  unint64_t v1159;
  double v1160;
  uint64_t v1161;
  void **v1162;
  void **v1163;
  uint64_t v1164;
  _QWORD *v1165[2];
  double v1166;
  int v1167;
  char v1168;
  uint64_t v1169;

  v1169 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a1 + 12);
  if (v2 == 7)
    return;
  v5 = a2[2];
  if (!v5)
  {
    a2[2] = (_QWORD *)1;
    if (a1 != a2)
    {
      switch(*((_BYTE *)a2 + 12))
      {
        case 2:
          v11 = *a2;
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            v14 = *a2;
            if (!*a2)
              goto LABEL_110;
            if (*((char *)v14 + 31) < 0)
              operator delete((void *)v14[1]);
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_109;
          }
          break;
        case 3:
          v49 = *a2;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (!v51)
          {
            v52 = *a2;
            if (!*a2)
              goto LABEL_110;
            v53 = (void *)v52[1];
            if (v53)
            {
              v52[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v15 = v52;
            v16 = 0x1080C409938AC02;
            goto LABEL_109;
          }
          break;
        case 4:
          v41 = *a2;
          do
          {
            v42 = __ldaxr(v41);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, v41));
          if (!v43)
          {
            v44 = *a2;
            if (!*a2)
              goto LABEL_110;
            v1162 = (void **)(v44 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
            goto LABEL_102;
          }
          break;
        case 5:
          v54 = *a2;
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v44 = *a2;
            if (!*a2)
              goto LABEL_110;
            v1162 = (void **)(v44 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_102:
            v15 = v44;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_109;
          }
          break;
        case 8:
          v57 = *a2;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *a2;
            if (!*a2)
              goto LABEL_110;
            boost::detail::shared_count::~shared_count((unsigned int **)v60 + 2);
            v15 = v60;
            v48 = -235920773;
            goto LABEL_108;
          }
          break;
        case 9:
          v45 = *a2;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            if (*a2)
            {
              v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a2);
              v48 = 2071181815;
LABEL_108:
              v16 = v48 | 0x1030C4000000000;
LABEL_109:
              MEMORY[0x219A19A08](v15, v16);
            }
LABEL_110:
            *a2 = 0;
          }
          break;
        default:
          break;
      }
      v61 = *a1;
      *(_QWORD **)((char *)a2 + 5) = *(_QWORD **)((char *)a1 + 5);
      *a2 = v61;
      LODWORD(v61) = *((unsigned __int8 *)a1 + 12);
      *((_BYTE *)a2 + 12) = (_BYTE)v61;
      switch((int)v61)
      {
        case 2:
          v62 = *a2;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
          break;
        case 3:
          v68 = *a2;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 + 1, v68));
          break;
        case 4:
          v64 = *a2;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 + 1, v64));
          break;
        case 5:
          v70 = *a2;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 + 1, v70));
          break;
        case 8:
          v72 = *a2;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 + 1, v72));
          break;
        case 9:
          v66 = *a2;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 + 1, v66));
          break;
        default:
          return;
      }
    }
    return;
  }
  if (v2 == 3)
  {
    v6 = *((unsigned __int8 *)a2 + 12);
    v7 = 1;
    switch(*((_BYTE *)a2 + 12))
    {
      case 3:
        v8 = *a2 + 1;
        v9 = *a2 + 2;
        v10 = 3;
        goto LABEL_19;
      case 4:
        v8 = *a2 + 1;
        v9 = *a2 + 2;
        v10 = 4;
        goto LABEL_19;
      case 5:
        v8 = *a2 + 1;
        v9 = *a2 + 2;
        v10 = 5;
LABEL_19:
        v7 = (uint64_t)(*v9 - *v8) >> v10;
        break;
      case 9:
        v21 = (uint64_t *)(*a2)[3];
        v20 = (uint64_t *)(*a2)[4];
        if (v20 == v21)
        {
          v7 = 0;
        }
        else
        {
          v7 = (*a2)[1];
          if (v7)
          {
            v7 = 1;
            do
            {
              v22 = *v21++;
              v7 *= v22;
            }
            while (v21 != v20);
          }
        }
        break;
      default:
        break;
    }
    if ((uint64_t)((*a1)[2] - (*a1)[1]) >> 3 != v7)
      turi::unity_sarray::mean(void)::$_2::operator() const(turi::flexible_type const&,std::pair<turi::flexible_type,unsigned long> &)::{lambda(void)#1}::operator()();
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 12);
  }
  if (v6 == 9)
  {
    if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(*a2 + 1), (uint64_t)(*a1 + 1)))
      turi::unity_sarray::mean(void)::$_2::operator() const(turi::flexible_type const&,std::pair<turi::flexible_type,unsigned long> &)::{lambda(void)#2}::operator()();
    v5 = a2[2];
  }
  a2[2] = (_QWORD *)((char *)v5 + 1);
  memset(v1165, 0, 13);
  if (v1165 != a1)
  {
    *(_QWORD **)((char *)v1165 + 5) = *(_QWORD **)((char *)a1 + 5);
    v1165[0] = *a1;
    BYTE4(v1165[1]) = *((_BYTE *)a1 + 12);
    if (BYTE4(v1165[1]) <= 9u && ((1 << SBYTE4(v1165[1])) & 0x33C) != 0)
    {
      v17 = v1165[0];
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
  }
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      switch(BYTE4(v1165[1]))
      {
        case 0:
          v19 = (_QWORD *)((char *)v1165[0] - (char *)*a2);
          goto LABEL_64;
        case 1:
          v245 = (double)(uint64_t)*a2;
          goto LABEL_372;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v271 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v271, (uint64_t)v1165[0]);
          v1165[0] = v271;
          *v271 = 1;
          do
          {
            v272 = __ldaxr(v23);
            v26 = --v272 == 0;
          }
          while (__stlxr(v272, v23));
          goto LABEL_348;
        case 3:
          v150 = v1165[0];
          if (*v1165[0] != 1)
          {
            v151 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v151, (uint64_t)v1165[0]);
            v1165[0] = v151;
            *v151 = 1;
            do
            {
              v152 = __ldaxr(v150);
              v153 = v152 - 1;
            }
            while (__stlxr(v153, v150));
            if (!v153)
            {
              v154 = (void *)v150[1];
              if (v154)
              {
                v150[2] = (unint64_t)v154;
                operator delete(v154);
              }
              MEMORY[0x219A19A08](v150, 0x1080C409938AC02);
            }
          }
          v155 = (double *)v1165[0][1];
          v156 = v1165[0][2] - (_QWORD)v155;
          if (v156)
          {
            v157 = v156 >> 3;
            v158 = (double)(uint64_t)*a2;
            if (v157 <= 1)
              v157 = 1;
            do
            {
              *v155 = *v155 - v158;
              ++v155;
              --v157;
            }
            while (v157);
          }
          goto LABEL_491;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v306 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v306, (uint64_t)v1165[0]);
          v1165[0] = v306;
          *v306 = 1;
          do
          {
            v307 = __ldaxr(v144);
            v248 = --v307 == 0;
          }
          while (__stlxr(v307, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v332 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v332, (uint64_t)v1165[0]);
          v1165[0] = v332;
          *v332 = 1;
          do
          {
            v333 = __ldaxr(v144);
            v147 = --v333 == 0;
          }
          while (__stlxr(v333, v144));
          goto LABEL_433;
        case 6:
          v1165[0] = (_QWORD *)((unint64_t)v1165[0] & 0xFF00000000000000 | ((char *)v1165[0] - (char *)*a2) & 0xFFFFFFFFFFFFFFLL);
          goto LABEL_491;
        case 7:
          goto LABEL_490;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v336 = operator new();
          v337 = v1165[0];
          *(_QWORD *)v336 = *v1165[0];
          *(_QWORD *)(v336 + 8) = v337[1];
          v338 = v337[2];
          *(_QWORD *)(v336 + 16) = v338;
          if (v338)
          {
            v339 = (unsigned int *)(v338 + 8);
            do
              v340 = __ldxr(v339);
            while (__stxr(v340 + 1, v339));
          }
          v341 = *(_OWORD *)(v337 + 3);
          v342 = *(_OWORD *)(v337 + 5);
          *(_OWORD *)(v336 + 56) = *(_OWORD *)(v337 + 7);
          *(_OWORD *)(v336 + 40) = v342;
          *(_OWORD *)(v336 + 24) = v341;
          v1165[0] = (_QWORD *)v336;
          *(_QWORD *)v336 = 1;
          do
          {
            v343 = __ldaxr(v249);
            v258 = --v343 == 0;
          }
          while (__stlxr(v343, v249));
          goto LABEL_485;
        case 9:
          v183 = v1165[0];
          if (*v1165[0] != 1)
          {
            v184 = (_QWORD *)operator new();
            v185 = v1165[0] + 1;
            *v184 = *v1165[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v184 + 1, (uint64_t)v185);
            v1165[0] = v184;
            *v184 = 1;
            do
            {
              v186 = __ldaxr(v183);
              v187 = v186 - 1;
            }
            while (__stlxr(v187, v183));
            if (!v187)
            {
              v188 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v183);
              MEMORY[0x219A19A08](v188, 0x1030C407B73B9F7);
            }
          }
          v189 = v1165[0];
          v191 = (uint64_t *)v1165[0][3];
          v190 = (uint64_t *)v1165[0][4];
          if (v190 == v191)
            goto LABEL_491;
          if (!v1165[0][1])
            goto LABEL_491;
          v192 = (double)(uint64_t)*a2;
          v193 = 1;
          do
          {
            v194 = *v191++;
            v193 *= v194;
          }
          while (v191 != v190);
          if (!v193)
            goto LABEL_491;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v1165[0] + 1);
          v195 = (v189[4] - v189[3]) >> 3;
          v1164 = 0;
          std::vector<unsigned long>::vector(&v1162, v195, &v1164);
          v115 = v1162;
          v196 = v1163;
          break;
        default:
          goto LABEL_1705;
      }
      while (2)
      {
        v197 = 0;
        v198 = (char *)v196 - (char *)v115;
        if (v198)
        {
          v199 = v198 >> 3;
          v200 = (uint64_t *)v189[6];
          if (v199 <= 1)
            v199 = 1;
          do
          {
            v202 = (uint64_t)*v115++;
            v201 = v202;
            v203 = *v200++;
            v197 += v203 * v201;
            --v199;
          }
          while (v199);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v189 + 1);
        *(double *)(*(_QWORD *)v189[1] + 8 * (v189[9] + v197)) = *(double *)(*(_QWORD *)v189[1] + 8 * (v189[9] + v197))
                                                               - v192;
        v115 = v1162;
        v196 = v1163;
        v204 = v1163 - v1162;
        v205 = v204 - 1;
        if ((char *)v1163 - (char *)v1162 < 1)
          goto LABEL_276;
        v206 = v189[3];
        v207 = (char *)v1162[v205] + 1;
        v1162[v205] = v207;
        if ((unint64_t)v207 < *(_QWORD *)(v206 + 8 * v205))
        {
LABEL_275:
          v204 = 1;
LABEL_276:
          if (v205 < 0 || !v204)
            goto LABEL_303;
          continue;
        }
        break;
      }
      v208 = (unint64_t *)&v115[v204 - 2];
      v209 = v206 - 16;
      while (1)
      {
        v210 = v204 - 1;
        v208[1] = 0;
        if (v204 - 1 <= 0)
          goto LABEL_304;
        v211 = *v208 + 1;
        *v208-- = v211;
        v212 = *(_QWORD *)(v209 + 8 * v204--);
        if (v211 < v212)
        {
          v205 = v210 - 1;
          goto LABEL_275;
        }
      }
    case 1:
      switch(BYTE4(v1165[1]))
      {
        case 0:
          v19 = (_QWORD *)(uint64_t)((double)(uint64_t)v1165[0] - *(double *)a2);
LABEL_64:
          v1165[0] = v19;
          goto LABEL_491;
        case 1:
          v245 = *(double *)a2;
LABEL_372:
          *(double *)v1165 = *(double *)v1165 - v245;
          goto LABEL_491;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v273 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v273, (uint64_t)v1165[0]);
          v1165[0] = v273;
          *v273 = 1;
          do
          {
            v274 = __ldaxr(v23);
            v26 = --v274 == 0;
          }
          while (__stlxr(v274, v23));
          goto LABEL_348;
        case 3:
          v159 = v1165[0];
          if (*v1165[0] != 1)
          {
            v160 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v160, (uint64_t)v1165[0]);
            v1165[0] = v160;
            *v160 = 1;
            do
            {
              v161 = __ldaxr(v159);
              v162 = v161 - 1;
            }
            while (__stlxr(v162, v159));
            if (!v162)
            {
              v163 = (void *)v159[1];
              if (v163)
              {
                v159[2] = (unint64_t)v163;
                operator delete(v163);
              }
              MEMORY[0x219A19A08](v159, 0x1080C409938AC02);
            }
          }
          v164 = (double *)v1165[0][1];
          v165 = v1165[0][2] - (_QWORD)v164;
          if (v165)
          {
            v166 = *(double *)a2;
            v167 = v165 >> 3;
            if (v167 <= 1)
              v167 = 1;
            do
            {
              *v164 = *v164 - v166;
              ++v164;
              --v167;
            }
            while (v167);
          }
          goto LABEL_491;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v308 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v308, (uint64_t)v1165[0]);
          v1165[0] = v308;
          *v308 = 1;
          do
          {
            v309 = __ldaxr(v144);
            v248 = --v309 == 0;
          }
          while (__stlxr(v309, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v334 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v334, (uint64_t)v1165[0]);
          v1165[0] = v334;
          *v334 = 1;
          do
          {
            v335 = __ldaxr(v144);
            v147 = --v335 == 0;
          }
          while (__stlxr(v335, v144));
          goto LABEL_433;
        case 6:
          v275 = vcvtmd_s64_f64(*(double *)a2);
          v276 = (uint64_t)((*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0);
          v277 = (unint64_t)v1165[0];
          v278 = (char *)v1165[0] - v275;
          v1165[0] = (_QWORD *)((unint64_t)v1165[0] & 0xFF00000000000000 | ((unint64_t)v1165[0] - v275) & 0xFFFFFFFFFFFFFFLL);
          v279 = LODWORD(v1165[1]) - v276;
          if (SLODWORD(v1165[1]) - v276 < 0)
          {
            v1165[0] = (_QWORD *)((unint64_t)(v278 - 1) & 0xFFFFFFFFFFFFFFLL | v277 & 0xFF00000000000000);
            v279 += 1000000;
          }
          if (v279 > 0xF423F)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          LODWORD(v1165[1]) = v279;
          goto LABEL_491;
        case 7:
          goto LABEL_490;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v344 = operator new();
          v345 = v1165[0];
          *(_QWORD *)v344 = *v1165[0];
          *(_QWORD *)(v344 + 8) = v345[1];
          v346 = v345[2];
          *(_QWORD *)(v344 + 16) = v346;
          if (v346)
          {
            v347 = (unsigned int *)(v346 + 8);
            do
              v348 = __ldxr(v347);
            while (__stxr(v348 + 1, v347));
          }
          v349 = *(_OWORD *)(v345 + 3);
          v350 = *(_OWORD *)(v345 + 5);
          *(_OWORD *)(v344 + 56) = *(_OWORD *)(v345 + 7);
          *(_OWORD *)(v344 + 40) = v350;
          *(_OWORD *)(v344 + 24) = v349;
          v1165[0] = (_QWORD *)v344;
          *(_QWORD *)v344 = 1;
          do
          {
            v351 = __ldaxr(v249);
            v258 = --v351 == 0;
          }
          while (__stlxr(v351, v249));
          goto LABEL_485;
        case 9:
          v213 = v1165[0];
          if (*v1165[0] != 1)
          {
            v214 = (_QWORD *)operator new();
            v215 = v1165[0] + 1;
            *v214 = *v1165[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v214 + 1, (uint64_t)v215);
            v1165[0] = v214;
            *v214 = 1;
            do
            {
              v216 = __ldaxr(v213);
              v217 = v216 - 1;
            }
            while (__stlxr(v217, v213));
            if (!v217)
            {
              v218 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v213);
              MEMORY[0x219A19A08](v218, 0x1030C407B73B9F7);
            }
          }
          v219 = v1165[0];
          v221 = (uint64_t *)v1165[0][3];
          v220 = (uint64_t *)v1165[0][4];
          if (v220 == v221)
            goto LABEL_491;
          if (!v1165[0][1])
            goto LABEL_491;
          v222 = *(double *)a2;
          v223 = 1;
          do
          {
            v224 = *v221++;
            v223 *= v224;
          }
          while (v221 != v220);
          if (!v223)
            goto LABEL_491;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v1165[0] + 1);
          v225 = (v219[4] - v219[3]) >> 3;
          v1164 = 0;
          std::vector<unsigned long>::vector(&v1162, v225, &v1164);
          v115 = v1162;
          v226 = v1163;
          break;
        default:
          goto LABEL_1705;
      }
      while (2)
      {
        v227 = 0;
        v228 = (char *)v226 - (char *)v115;
        if (v228)
        {
          v229 = v228 >> 3;
          v230 = (uint64_t *)v219[6];
          if (v229 <= 1)
            v229 = 1;
          do
          {
            v232 = (uint64_t)*v115++;
            v231 = v232;
            v233 = *v230++;
            v227 += v233 * v231;
            --v229;
          }
          while (v229);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v219 + 1);
        *(double *)(*(_QWORD *)v219[1] + 8 * (v219[9] + v227)) = *(double *)(*(_QWORD *)v219[1] + 8 * (v219[9] + v227))
                                                               - v222;
        v115 = v1162;
        v226 = v1163;
        v234 = v1163 - v1162;
        v235 = v234 - 1;
        if ((char *)v1163 - (char *)v1162 < 1)
          goto LABEL_301;
        v236 = v219[3];
        v237 = (char *)v1162[v235] + 1;
        v1162[v235] = v237;
        if ((unint64_t)v237 < *(_QWORD *)(v236 + 8 * v235))
        {
LABEL_300:
          v234 = 1;
LABEL_301:
          if (v235 < 0 || !v234)
            goto LABEL_303;
          continue;
        }
        break;
      }
      v238 = (unint64_t *)&v115[v234 - 2];
      v239 = v236 - 16;
      while (1)
      {
        v240 = v234 - 1;
        v238[1] = 0;
        if (v234 - 1 <= 0)
          goto LABEL_303;
        v241 = *v238 + 1;
        *v238-- = v241;
        v242 = *(_QWORD *)(v239 + 8 * v234--);
        if (v241 < v242)
        {
          v235 = v240 - 1;
          goto LABEL_300;
        }
      }
    case 2:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v29 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v29, (uint64_t)v1165[0]);
          v1165[0] = v29;
          *v29 = 1;
          do
          {
            v30 = __ldaxr(v23);
            v26 = --v30 == 0;
          }
          while (__stlxr(v30, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v80 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v80, (uint64_t)v1165[0]);
          v1165[0] = v80;
          *v80 = 1;
          do
          {
            v81 = __ldaxr(v74);
            v77 = --v81 == 0;
          }
          while (__stlxr(v81, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v292 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v292, (uint64_t)v1165[0]);
          v1165[0] = v292;
          *v292 = 1;
          do
          {
            v293 = __ldaxr(v144);
            v248 = --v293 == 0;
          }
          while (__stlxr(v293, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v243 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v243, (uint64_t)v1165[0]);
          v1165[0] = v243;
          *v243 = 1;
          do
          {
            v244 = __ldaxr(v144);
            v147 = --v244 == 0;
          }
          while (__stlxr(v244, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v294 = operator new();
          v295 = v1165[0];
          *(_QWORD *)v294 = *v1165[0];
          *(_QWORD *)(v294 + 8) = v295[1];
          v296 = v295[2];
          *(_QWORD *)(v294 + 16) = v296;
          if (v296)
          {
            v297 = (unsigned int *)(v296 + 8);
            do
              v298 = __ldxr(v297);
            while (__stxr(v298 + 1, v297));
          }
          v299 = *(_OWORD *)(v295 + 3);
          v300 = *(_OWORD *)(v295 + 5);
          *(_OWORD *)(v294 + 56) = *(_OWORD *)(v295 + 7);
          *(_OWORD *)(v294 + 40) = v300;
          *(_OWORD *)(v294 + 24) = v299;
          v1165[0] = (_QWORD *)v294;
          *(_QWORD *)v294 = 1;
          do
          {
            v301 = __ldaxr(v249);
            v258 = --v301 == 0;
          }
          while (__stlxr(v301, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v141 = (_QWORD *)operator new();
          v142 = v1165[0] + 1;
          *v141 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v141 + 1, (uint64_t)v142);
          v1165[0] = v141;
          *v141 = 1;
          do
          {
            v143 = __ldaxr(v82);
            v86 = --v143 == 0;
          }
          while (__stlxr(v143, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 3:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v31 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v31, (uint64_t)v1165[0]);
          v1165[0] = v31;
          *v31 = 1;
          do
          {
            v32 = __ldaxr(v23);
            v26 = --v32 == 0;
          }
          while (__stlxr(v32, v23));
          goto LABEL_348;
        case 3:
          v87 = *(double *)a2;
          v88 = v1165[0];
          if (*v1165[0] != 1)
          {
            v89 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, (uint64_t)v1165[0]);
            v1165[0] = v89;
            *v89 = 1;
            do
            {
              v90 = __ldaxr(v88);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v88));
            if (!v91)
            {
              v92 = (void *)v88[1];
              if (v92)
              {
                v88[2] = (unint64_t)v92;
                operator delete(v92);
              }
              MEMORY[0x219A19A08](v88, 0x1080C409938AC02);
            }
          }
          v93 = v1165[0];
          turi::flexible_type_fail(v1165[0][2] - v1165[0][1] == *(_QWORD *)(*(_QWORD *)&v87 + 16)
                                                              - *(_QWORD *)(*(_QWORD *)&v87 + 8));
          v94 = (double *)v93[1];
          v95 = v93[2] - (_QWORD)v94;
          if (v95)
          {
            v96 = v95 >> 3;
            v97 = *(double **)(*(_QWORD *)&v87 + 8);
            if (v96 <= 1)
              v96 = 1;
            do
            {
              v98 = *v97++;
              *v94 = *v94 - v98;
              ++v94;
              --v96;
            }
            while (v96);
          }
          goto LABEL_491;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v304 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v304, (uint64_t)v1165[0]);
          v1165[0] = v304;
          *v304 = 1;
          do
          {
            v305 = __ldaxr(v144);
            v248 = --v305 == 0;
          }
          while (__stlxr(v305, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v262 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v262, (uint64_t)v1165[0]);
          v1165[0] = v262;
          *v262 = 1;
          do
          {
            v263 = __ldaxr(v144);
            v147 = --v263 == 0;
          }
          while (__stlxr(v263, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v314 = operator new();
          v315 = v1165[0];
          *(_QWORD *)v314 = *v1165[0];
          *(_QWORD *)(v314 + 8) = v315[1];
          v316 = v315[2];
          *(_QWORD *)(v314 + 16) = v316;
          if (v316)
          {
            v317 = (unsigned int *)(v316 + 8);
            do
              v318 = __ldxr(v317);
            while (__stxr(v318 + 1, v317));
          }
          v319 = *(_OWORD *)(v315 + 3);
          v320 = *(_OWORD *)(v315 + 5);
          *(_OWORD *)(v314 + 56) = *(_OWORD *)(v315 + 7);
          *(_OWORD *)(v314 + 40) = v320;
          *(_OWORD *)(v314 + 24) = v319;
          v1165[0] = (_QWORD *)v314;
          *(_QWORD *)v314 = 1;
          do
          {
            v321 = __ldaxr(v249);
            v258 = --v321 == 0;
          }
          while (__stlxr(v321, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v170 = (_QWORD *)operator new();
          v171 = v1165[0] + 1;
          *v170 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, (uint64_t)v171);
          v1165[0] = v170;
          *v170 = 1;
          do
          {
            v172 = __ldaxr(v82);
            v86 = --v172 == 0;
          }
          while (__stlxr(v172, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 4:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v24 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v24, (uint64_t)v1165[0]);
          v1165[0] = v24;
          *v24 = 1;
          do
          {
            v25 = __ldaxr(v23);
            v26 = --v25 == 0;
          }
          while (__stlxr(v25, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v75 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v75, (uint64_t)v1165[0]);
          v1165[0] = v75;
          *v75 = 1;
          do
          {
            v76 = __ldaxr(v74);
            v77 = --v76 == 0;
          }
          while (__stlxr(v76, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v246 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v246, (uint64_t)v1165[0]);
          v1165[0] = v246;
          *v246 = 1;
          do
          {
            v247 = __ldaxr(v144);
            v248 = --v247 == 0;
          }
          while (__stlxr(v247, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v145 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v145, (uint64_t)v1165[0]);
          v1165[0] = v145;
          *v145 = 1;
          do
          {
            v146 = __ldaxr(v144);
            v147 = --v146 == 0;
          }
          while (__stlxr(v146, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v250 = operator new();
          v251 = v1165[0];
          *(_QWORD *)v250 = *v1165[0];
          *(_QWORD *)(v250 + 8) = v251[1];
          v252 = v251[2];
          *(_QWORD *)(v250 + 16) = v252;
          if (v252)
          {
            v253 = (unsigned int *)(v252 + 8);
            do
              v254 = __ldxr(v253);
            while (__stxr(v254 + 1, v253));
          }
          v255 = *(_OWORD *)(v251 + 3);
          v256 = *(_OWORD *)(v251 + 5);
          *(_OWORD *)(v250 + 56) = *(_OWORD *)(v251 + 7);
          *(_OWORD *)(v250 + 40) = v256;
          *(_OWORD *)(v250 + 24) = v255;
          v1165[0] = (_QWORD *)v250;
          *(_QWORD *)v250 = 1;
          do
          {
            v257 = __ldaxr(v249);
            v258 = --v257 == 0;
          }
          while (__stlxr(v257, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v83 = (_QWORD *)operator new();
          v84 = v1165[0] + 1;
          *v83 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v83 + 1, (uint64_t)v84);
          v1165[0] = v83;
          *v83 = 1;
          do
          {
            v85 = __ldaxr(v82);
            v86 = --v85 == 0;
          }
          while (__stlxr(v85, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 5:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v35 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v35, (uint64_t)v1165[0]);
          v1165[0] = v35;
          *v35 = 1;
          do
          {
            v36 = __ldaxr(v23);
            v26 = --v36 == 0;
          }
          while (__stlxr(v36, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v148 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v148, (uint64_t)v1165[0]);
          v1165[0] = v148;
          *v148 = 1;
          do
          {
            v149 = __ldaxr(v74);
            v77 = --v149 == 0;
          }
          while (__stlxr(v149, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v352 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v352, (uint64_t)v1165[0]);
          v1165[0] = v352;
          *v352 = 1;
          do
          {
            v353 = __ldaxr(v144);
            v248 = --v353 == 0;
          }
          while (__stlxr(v353, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v302 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v302, (uint64_t)v1165[0]);
          v1165[0] = v302;
          *v302 = 1;
          do
          {
            v303 = __ldaxr(v144);
            v147 = --v303 == 0;
          }
          while (__stlxr(v303, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v354 = operator new();
          v355 = v1165[0];
          *(_QWORD *)v354 = *v1165[0];
          *(_QWORD *)(v354 + 8) = v355[1];
          v356 = v355[2];
          *(_QWORD *)(v354 + 16) = v356;
          if (v356)
          {
            v357 = (unsigned int *)(v356 + 8);
            do
              v358 = __ldxr(v357);
            while (__stxr(v358 + 1, v357));
          }
          v359 = *(_OWORD *)(v355 + 3);
          v360 = *(_OWORD *)(v355 + 5);
          *(_OWORD *)(v354 + 56) = *(_OWORD *)(v355 + 7);
          *(_OWORD *)(v354 + 40) = v360;
          *(_OWORD *)(v354 + 24) = v359;
          v1165[0] = (_QWORD *)v354;
          *(_QWORD *)v354 = 1;
          do
          {
            v361 = __ldaxr(v249);
            v258 = --v361 == 0;
          }
          while (__stlxr(v361, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v259 = (_QWORD *)operator new();
          v260 = v1165[0] + 1;
          *v259 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v259 + 1, (uint64_t)v260);
          v1165[0] = v259;
          *v259 = 1;
          do
          {
            v261 = __ldaxr(v82);
            v86 = --v261 == 0;
          }
          while (__stlxr(v261, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 6:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v37 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v37, (uint64_t)v1165[0]);
          v1165[0] = v37;
          *v37 = 1;
          do
          {
            v38 = __ldaxr(v23);
            v26 = --v38 == 0;
          }
          while (__stlxr(v38, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v168 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v168, (uint64_t)v1165[0]);
          v1165[0] = v168;
          *v168 = 1;
          do
          {
            v169 = __ldaxr(v74);
            v77 = --v169 == 0;
          }
          while (__stlxr(v169, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v362 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v362, (uint64_t)v1165[0]);
          v1165[0] = v362;
          *v362 = 1;
          do
          {
            v363 = __ldaxr(v144);
            v248 = --v363 == 0;
          }
          while (__stlxr(v363, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v312 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v312, (uint64_t)v1165[0]);
          v1165[0] = v312;
          *v312 = 1;
          do
          {
            v313 = __ldaxr(v144);
            v147 = --v313 == 0;
          }
          while (__stlxr(v313, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v364 = operator new();
          v365 = v1165[0];
          *(_QWORD *)v364 = *v1165[0];
          *(_QWORD *)(v364 + 8) = v365[1];
          v366 = v365[2];
          *(_QWORD *)(v364 + 16) = v366;
          if (v366)
          {
            v367 = (unsigned int *)(v366 + 8);
            do
              v368 = __ldxr(v367);
            while (__stxr(v368 + 1, v367));
          }
          v369 = *(_OWORD *)(v365 + 3);
          v370 = *(_OWORD *)(v365 + 5);
          *(_OWORD *)(v364 + 56) = *(_OWORD *)(v365 + 7);
          *(_OWORD *)(v364 + 40) = v370;
          *(_OWORD *)(v364 + 24) = v369;
          v1165[0] = (_QWORD *)v364;
          *(_QWORD *)v364 = 1;
          do
          {
            v371 = __ldaxr(v249);
            v258 = --v371 == 0;
          }
          while (__stlxr(v371, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v268 = (_QWORD *)operator new();
          v269 = v1165[0] + 1;
          *v268 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v268 + 1, (uint64_t)v269);
          v1165[0] = v268;
          *v268 = 1;
          do
          {
            v270 = __ldaxr(v82);
            v86 = --v270 == 0;
          }
          while (__stlxr(v270, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 7:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v33 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v33, (uint64_t)v1165[0]);
          v1165[0] = v33;
          *v33 = 1;
          do
          {
            v34 = __ldaxr(v23);
            v26 = --v34 == 0;
          }
          while (__stlxr(v34, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v99 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v99, (uint64_t)v1165[0]);
          v1165[0] = v99;
          *v99 = 1;
          do
          {
            v100 = __ldaxr(v74);
            v77 = --v100 == 0;
          }
          while (__stlxr(v100, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v310 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v310, (uint64_t)v1165[0]);
          v1165[0] = v310;
          *v310 = 1;
          do
          {
            v311 = __ldaxr(v144);
            v248 = --v311 == 0;
          }
          while (__stlxr(v311, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v264 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v264, (uint64_t)v1165[0]);
          v1165[0] = v264;
          *v264 = 1;
          do
          {
            v265 = __ldaxr(v144);
            v147 = --v265 == 0;
          }
          while (__stlxr(v265, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v322 = operator new();
          v323 = v1165[0];
          *(_QWORD *)v322 = *v1165[0];
          *(_QWORD *)(v322 + 8) = v323[1];
          v324 = v323[2];
          *(_QWORD *)(v322 + 16) = v324;
          if (v324)
          {
            v325 = (unsigned int *)(v324 + 8);
            do
              v326 = __ldxr(v325);
            while (__stxr(v326 + 1, v325));
          }
          v327 = *(_OWORD *)(v323 + 3);
          v328 = *(_OWORD *)(v323 + 5);
          *(_OWORD *)(v322 + 56) = *(_OWORD *)(v323 + 7);
          *(_OWORD *)(v322 + 40) = v328;
          *(_OWORD *)(v322 + 24) = v327;
          v1165[0] = (_QWORD *)v322;
          *(_QWORD *)v322 = 1;
          do
          {
            v329 = __ldaxr(v249);
            v258 = --v329 == 0;
          }
          while (__stlxr(v329, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v180 = (_QWORD *)operator new();
          v181 = v1165[0] + 1;
          *v180 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v180 + 1, (uint64_t)v181);
          v1165[0] = v180;
          *v180 = 1;
          do
          {
            v182 = __ldaxr(v82);
            v86 = --v182 == 0;
          }
          while (__stlxr(v182, v82));
          goto LABEL_368;
        default:
          goto LABEL_1705;
      }
    case 8:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v39 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v39, (uint64_t)v1165[0]);
          v1165[0] = v39;
          *v39 = 1;
          do
          {
            v40 = __ldaxr(v23);
            v26 = --v40 == 0;
          }
          while (__stlxr(v40, v23));
          goto LABEL_348;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v173 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v173, (uint64_t)v1165[0]);
          v1165[0] = v173;
          *v173 = 1;
          do
          {
            v174 = __ldaxr(v74);
            v77 = --v174 == 0;
          }
          while (__stlxr(v174, v74));
          goto LABEL_241;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v372 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v372, (uint64_t)v1165[0]);
          v1165[0] = v372;
          *v372 = 1;
          do
          {
            v373 = __ldaxr(v144);
            v248 = --v373 == 0;
          }
          while (__stlxr(v373, v144));
          goto LABEL_475;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v330 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v330, (uint64_t)v1165[0]);
          v1165[0] = v330;
          *v330 = 1;
          do
          {
            v331 = __ldaxr(v144);
            v147 = --v331 == 0;
          }
          while (__stlxr(v331, v144));
          goto LABEL_433;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v374 = operator new();
          v375 = v1165[0];
          *(_QWORD *)v374 = *v1165[0];
          *(_QWORD *)(v374 + 8) = v375[1];
          v376 = v375[2];
          *(_QWORD *)(v374 + 16) = v376;
          if (v376)
          {
            v377 = (unsigned int *)(v376 + 8);
            do
              v378 = __ldxr(v377);
            while (__stxr(v378 + 1, v377));
          }
          v379 = *(_OWORD *)(v375 + 3);
          v380 = *(_OWORD *)(v375 + 5);
          *(_OWORD *)(v374 + 56) = *(_OWORD *)(v375 + 7);
          *(_OWORD *)(v374 + 40) = v380;
          *(_OWORD *)(v374 + 24) = v379;
          v1165[0] = (_QWORD *)v374;
          *(_QWORD *)v374 = 1;
          do
          {
            v381 = __ldaxr(v249);
            v258 = --v381 == 0;
          }
          while (__stlxr(v381, v249));
          goto LABEL_485;
        case 9:
          v82 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v288 = (_QWORD *)operator new();
          v289 = v1165[0] + 1;
          *v288 = *v1165[0];
          turi::flexible_type_impl::ndarray<double>::ndarray(v288 + 1, (uint64_t)v289);
          v1165[0] = v288;
          *v288 = 1;
          do
          {
            v290 = __ldaxr(v82);
            v86 = --v290 == 0;
          }
          while (__stlxr(v290, v82));
LABEL_368:
          if (!v86)
            goto LABEL_490;
          v176 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v82);
          v291 = 2071181815;
          goto LABEL_488;
        default:
          goto LABEL_1705;
      }
    case 9:
      switch(BYTE4(v1165[1]))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_490;
        case 2:
          v23 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v27 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v27, (uint64_t)v1165[0]);
          v1165[0] = v27;
          *v27 = 1;
          do
          {
            v28 = __ldaxr(v23);
            v26 = --v28 == 0;
          }
          while (__stlxr(v28, v23));
LABEL_348:
          if (!v26)
            goto LABEL_490;
          if (*((char *)v23 + 31) < 0)
            operator delete((void *)v23[1]);
          v176 = v23;
          v177 = 0x1012C404EF22A49;
          goto LABEL_489;
        case 3:
          v74 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v78 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v78, (uint64_t)v1165[0]);
          v1165[0] = v78;
          *v78 = 1;
          do
          {
            v79 = __ldaxr(v74);
            v77 = --v79 == 0;
          }
          while (__stlxr(v79, v74));
LABEL_241:
          if (!v77)
            goto LABEL_490;
          v175 = (void *)v74[1];
          if (v175)
          {
            v74[2] = (unint64_t)v175;
            operator delete(v175);
          }
          v176 = v74;
          v177 = 0x1080C409938AC02;
          goto LABEL_489;
        case 4:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v266 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v266, (uint64_t)v1165[0]);
          v1165[0] = v266;
          *v266 = 1;
          do
          {
            v267 = __ldaxr(v144);
            v248 = --v267 == 0;
          }
          while (__stlxr(v267, v144));
LABEL_475:
          if (!v248)
            goto LABEL_490;
          v1162 = (void **)(v144 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_478;
        case 5:
          v144 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v178 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v178, (uint64_t)v1165[0]);
          v1165[0] = v178;
          *v178 = 1;
          do
          {
            v179 = __ldaxr(v144);
            v147 = --v179 == 0;
          }
          while (__stlxr(v179, v144));
LABEL_433:
          if (!v147)
            goto LABEL_490;
          v1162 = (void **)(v144 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_478:
          v176 = v144;
          v177 = 0x1020C405E66F15BLL;
          goto LABEL_489;
        case 8:
          v249 = v1165[0];
          if (*v1165[0] == 1)
            goto LABEL_490;
          v280 = operator new();
          v281 = v1165[0];
          *(_QWORD *)v280 = *v1165[0];
          *(_QWORD *)(v280 + 8) = v281[1];
          v282 = v281[2];
          *(_QWORD *)(v280 + 16) = v282;
          if (v282)
          {
            v283 = (unsigned int *)(v282 + 8);
            do
              v284 = __ldxr(v283);
            while (__stxr(v284 + 1, v283));
          }
          v285 = *(_OWORD *)(v281 + 3);
          v286 = *(_OWORD *)(v281 + 5);
          *(_OWORD *)(v280 + 56) = *(_OWORD *)(v281 + 7);
          *(_OWORD *)(v280 + 40) = v286;
          *(_OWORD *)(v280 + 24) = v285;
          v1165[0] = (_QWORD *)v280;
          *(_QWORD *)v280 = 1;
          do
          {
            v287 = __ldaxr(v249);
            v258 = --v287 == 0;
          }
          while (__stlxr(v287, v249));
LABEL_485:
          if (!v258)
            goto LABEL_490;
          boost::detail::shared_count::~shared_count((unsigned int **)v249 + 2);
          v176 = v249;
          v291 = -235920773;
LABEL_488:
          v177 = v291 | 0x1030C4000000000;
LABEL_489:
          MEMORY[0x219A19A08](v176, v177);
LABEL_490:
          turi::flexible_type_fail(0);
          goto LABEL_491;
        case 9:
          v101 = *(double *)a2;
          v102 = v1165[0];
          if (*v1165[0] != 1)
          {
            v103 = (_QWORD *)operator new();
            v104 = v1165[0] + 1;
            *v103 = *v1165[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v103 + 1, (uint64_t)v104);
            v1165[0] = v103;
            *v103 = 1;
            do
            {
              v105 = __ldaxr(v102);
              v106 = v105 - 1;
            }
            while (__stlxr(v106, v102));
            if (!v106)
            {
              v107 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v102);
              MEMORY[0x219A19A08](v107, 0x1030C407B73B9F7);
            }
          }
          v108 = v1165[0];
          v109 = v1165[0] + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v1165[0] + 1), *(_QWORD *)&v101 + 8))
            turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v111 = (uint64_t *)v108[3];
          v110 = (uint64_t *)v108[4];
          if (v110 == v111)
            goto LABEL_491;
          if (!*v109)
            goto LABEL_491;
          v112 = 1;
          do
          {
            v113 = *v111++;
            v112 *= v113;
          }
          while (v111 != v110);
          if (!v112)
            goto LABEL_491;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v109);
          v114 = (uint64_t)(v108[4] - v108[3]) >> 3;
          v1164 = 0;
          std::vector<unsigned long>::vector(&v1162, v114, &v1164);
          v115 = v1162;
          v116 = v1163;
          break;
        default:
          goto LABEL_1705;
      }
      break;
    default:
LABEL_1705:
      turi::flexible_type_fail(0);
LABEL_1709:
      __break(1u);
      return;
  }
  while (1)
  {
    v117 = (char *)v116 - (char *)v115;
    if (v117)
    {
      v118 = 0;
      v119 = v117 >> 3;
      v120 = *(uint64_t **)(*(_QWORD *)&v101 + 48);
      if (v119 <= 1)
        v119 = 1;
      v121 = v115;
      v122 = v119;
      do
      {
        v124 = (uint64_t)*v121++;
        v123 = v124;
        v125 = *v120++;
        v118 += v125 * v123;
        --v122;
      }
      while (v122);
      v126 = 0;
      v127 = *(double *)(**(_QWORD **)(*(_QWORD *)&v101 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v101 + 72) + v118));
      v128 = (uint64_t *)v108[6];
      do
      {
        v130 = (uint64_t)*v115++;
        v129 = v130;
        v131 = *v128++;
        v126 += v131 * v129;
        --v119;
      }
      while (v119);
    }
    else
    {
      v126 = 0;
      v127 = *(double *)(**(_QWORD **)(*(_QWORD *)&v101 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v101 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v109);
    *(double *)(*(_QWORD *)v108[1] + 8 * (v108[9] + v126)) = *(double *)(*(_QWORD *)v108[1] + 8 * (v108[9] + v126))
                                                           - v127;
    v115 = v1162;
    v116 = v1163;
    v132 = v1163 - v1162;
    v133 = v132 - 1;
    if ((char *)v1163 - (char *)v1162 < 1)
      goto LABEL_191;
    v134 = v108[3];
    v135 = (char *)v1162[v133] + 1;
    v1162[v133] = v135;
    if ((unint64_t)v135 >= *(_QWORD *)(v134 + 8 * v133))
      break;
LABEL_190:
    v132 = 1;
LABEL_191:
    if (v133 < 0 || !v132)
      goto LABEL_303;
  }
  v136 = (unint64_t *)&v115[v132 - 2];
  v137 = v134 - 16;
  while (1)
  {
    v138 = v132 - 1;
    v136[1] = 0;
    if (v132 - 1 <= 0)
      break;
    v139 = *v136 + 1;
    *v136-- = v139;
    v140 = *(_QWORD *)(v137 + 8 * v132--);
    if (v139 < v140)
    {
      v133 = v138 - 1;
      goto LABEL_190;
    }
  }
LABEL_303:
  if (v115)
  {
LABEL_304:
    v1163 = v115;
    operator delete(v115);
  }
LABEL_491:
  v1160 = (double)(unint64_t)a2[2];
  v1166 = 0.0;
  v1167 = 0;
  v1168 = 0;
  turi::flexible_type::operator=<double>((uint64_t)&v1166, &v1160);
  v382 = (uint64_t)v1165[0];
  v383 = BYTE4(v1165[1]);
  if (BYTE4(v1165[1]) <= 9u && ((1 << SBYTE4(v1165[1])) & 0x33C) != 0)
  {
    do
      v385 = __ldaxr((unint64_t *)v382);
    while (__stlxr(v385 + 1, (unint64_t *)v382));
  }
  switch(v1168)
  {
    case 0:
      switch(v383)
      {
        case 0:
          v382 /= *(uint64_t *)&v1166;
LABEL_563:
          switch(*((_BYTE *)a2 + 12))
          {
            case 0:
              v413 = (unint64_t)*a2 + v382;
              goto LABEL_677;
            case 1:
              v501 = (double)v382;
              goto LABEL_1055;
            case 2:
              v495 = *(double *)a2;
              if (**a2 == 1)
                goto LABEL_699;
              v496 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v496, (uint64_t)*a2);
              *a2 = v496;
              *v496 = 1;
              do
              {
                v497 = __ldaxr(*(unint64_t **)&v495);
                v498 = v497 - 1;
              }
              while (__stlxr(v498, *(unint64_t **)&v495));
              if (v498)
                goto LABEL_699;
              if (*(char *)(*(_QWORD *)&v495 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v495 + 8));
              v499 = v495;
              v500 = 0x1012C404EF22A49;
              goto LABEL_698;
            case 3:
              v457 = *a2;
              if (**a2 != 1)
              {
                v458 = (_QWORD *)operator new();
                std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v458, (uint64_t)*a2);
                *a2 = v458;
                *v458 = 1;
                do
                {
                  v459 = __ldaxr(v457);
                  v460 = v459 - 1;
                }
                while (__stlxr(v460, v457));
                if (!v460)
                {
                  v461 = (void *)v457[1];
                  if (v461)
                  {
                    v457[2] = (unint64_t)v461;
                    operator delete(v461);
                  }
                  MEMORY[0x219A19A08](v457, 0x1080C409938AC02);
                }
              }
              v462 = (double *)(*a2)[1];
              v463 = (*a2)[2] - (_QWORD)v462;
              if (!v463)
                goto LABEL_1216;
              v464 = v463 >> 3;
              if (v464 <= 1)
                v464 = 1;
              do
              {
                *v462 = *v462 + (double)v382;
                ++v462;
                --v464;
              }
              while (v464);
              goto LABEL_966;
            case 4:
              v502 = *(double *)a2;
              if (**a2 == 1)
                goto LABEL_699;
              v503 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v503, (uint64_t)*a2);
              *a2 = v503;
              *v503 = 1;
              do
              {
                v504 = __ldaxr(*(unint64_t **)&v502);
                v505 = v504 - 1;
              }
              while (__stlxr(v505, *(unint64_t **)&v502));
              if (v505)
                goto LABEL_699;
              v1162 = (void **)(*(_QWORD *)&v502 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              goto LABEL_689;
            case 5:
              v502 = *(double *)a2;
              if (**a2 == 1)
                goto LABEL_699;
              v506 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v506, (uint64_t)*a2);
              *a2 = v506;
              *v506 = 1;
              do
              {
                v507 = __ldaxr(*(unint64_t **)&v502);
                v508 = v507 - 1;
              }
              while (__stlxr(v508, *(unint64_t **)&v502));
              if (v508)
                goto LABEL_699;
              v1162 = (void **)(*(_QWORD *)&v502 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_689:
              v499 = v502;
              v500 = 0x1020C405E66F15BLL;
              goto LABEL_698;
            case 6:
              v413 = (unint64_t)*a2 & 0xFF00000000000000 | ((unint64_t)*a2 + v382) & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_677;
            case 7:
              goto LABEL_699;
            case 8:
              v509 = *(double *)a2;
              if (**a2 == 1)
                goto LABEL_699;
              v510 = operator new();
              v511 = *(double *)a2;
              *(_QWORD *)v510 = **a2;
              *(_QWORD *)(v510 + 8) = *(_QWORD *)(*(_QWORD *)&v511 + 8);
              v512 = *(_QWORD *)(*(_QWORD *)&v511 + 16);
              *(_QWORD *)(v510 + 16) = v512;
              if (v512)
              {
                v513 = (unsigned int *)(v512 + 8);
                do
                  v514 = __ldxr(v513);
                while (__stxr(v514 + 1, v513));
              }
              v515 = *(_OWORD *)(*(_QWORD *)&v511 + 24);
              v516 = *(_OWORD *)(*(_QWORD *)&v511 + 40);
              *(_OWORD *)(v510 + 56) = *(_OWORD *)(*(_QWORD *)&v511 + 56);
              *(_OWORD *)(v510 + 40) = v516;
              *(_OWORD *)(v510 + 24) = v515;
              *a2 = (_QWORD *)v510;
              *(_QWORD *)v510 = 1;
              do
              {
                v517 = __ldaxr(*(unint64_t **)&v509);
                v518 = v517 - 1;
              }
              while (__stlxr(v518, *(unint64_t **)&v509));
              if (v518)
                goto LABEL_699;
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v509 + 16));
              v499 = v509;
              v500 = 0x1030C40F1F0227BLL;
LABEL_698:
              MEMORY[0x219A19A08](*(_QWORD *)&v499, v500);
              goto LABEL_699;
            case 9:
              v465 = *a2;
              if (**a2 != 1)
              {
                v466 = (_QWORD *)operator new();
                v467 = (uint64_t)(*a2 + 1);
                *v466 = **a2;
                turi::flexible_type_impl::ndarray<double>::ndarray(v466 + 1, v467);
                *a2 = v466;
                *v466 = 1;
                do
                {
                  v468 = __ldaxr(v465);
                  v469 = v468 - 1;
                }
                while (__stlxr(v469, v465));
                if (!v469)
                {
                  v470 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v465);
                  MEMORY[0x219A19A08](v470, 0x1030C407B73B9F7);
                }
              }
              v471 = *a2;
              v473 = (uint64_t *)(*a2)[3];
              v472 = (uint64_t *)(*a2)[4];
              if (v472 == v473 || !v471[1])
                goto LABEL_1216;
              v474 = 1;
              do
              {
                v475 = *v473++;
                v474 *= v475;
              }
              while (v473 != v472);
              if (!v474)
                goto LABEL_966;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v471 + 1);
              v476 = (v471[4] - v471[3]) >> 3;
              v1161 = 0;
              std::vector<unsigned long>::vector(&v1162, v476, &v1161);
              v477 = v1162;
              v478 = v1163;
              break;
            default:
              goto LABEL_1706;
          }
          while (2)
          {
            v479 = 0;
            v480 = (char *)v478 - (char *)v477;
            if (v480)
            {
              v481 = v480 >> 3;
              v482 = (uint64_t *)v471[6];
              if (v481 <= 1)
                v481 = 1;
              do
              {
                v484 = (uint64_t)*v477++;
                v483 = v484;
                v485 = *v482++;
                v479 += v485 * v483;
                --v481;
              }
              while (v481);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v471 + 1);
            *(double *)(*(_QWORD *)v471[1] + 8 * (v471[9] + v479)) = *(double *)(*(_QWORD *)v471[1]
                                                                               + 8 * (v471[9] + v479))
                                                                   + (double)v382;
            v477 = v1162;
            v478 = v1163;
            v486 = v1163 - v1162;
            v487 = v486 - 1;
            if ((char *)v1163 - (char *)v1162 < 1)
              goto LABEL_666;
            v488 = v471[3];
            v489 = (char *)v1162[v487] + 1;
            v1162[v487] = v489;
            if ((unint64_t)v489 < *(_QWORD *)(v488 + 8 * v487))
            {
LABEL_665:
              v486 = 1;
LABEL_666:
              if (v487 < 0 || !v486)
                goto LABEL_964;
              continue;
            }
            break;
          }
          v490 = (unint64_t *)&v477[v486 - 2];
          v491 = v488 - 16;
          while (1)
          {
            v492 = v486 - 1;
            v490[1] = 0;
            if (v486 - 1 <= 0)
              goto LABEL_965;
            v493 = *v490 + 1;
            *v490-- = v493;
            v494 = *(_QWORD *)(v491 + 8 * v486--);
            if (v493 < v494)
            {
              v487 = v492 - 1;
              goto LABEL_665;
            }
          }
        case 1:
          v522 = (double)*(uint64_t *)&v1166;
          goto LABEL_770;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1029 = __ldaxr((unint64_t *)v382);
              v1030 = v1029 - 1;
            }
            while (__stlxr(v1030, (unint64_t *)v382));
            if (!v1030)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v520, v382);
            **(_QWORD **)&v520 = 1;
            do
            {
              v1064 = __ldaxr((unint64_t *)v382);
              v1065 = v1064 - 1;
            }
            while (__stlxr(v1065, (unint64_t *)v382));
            if (!v1065)
            {
              v1066 = *(void **)(v382 + 8);
              if (v1066)
              {
                *(_QWORD *)(v382 + 16) = v1066;
                operator delete(v1066);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          v1067 = *(double **)(*(_QWORD *)&v520 + 8);
          v1068 = *(_QWORD *)(*(_QWORD *)&v520 + 16) - (_QWORD)v1067;
          if (v1068)
          {
            v1069 = v1068 >> 3;
            v1070 = (double)*(uint64_t *)&v1166;
            if (v1069 <= 1)
              v1069 = 1;
            do
            {
              *v1067 = *v1067 / v1070;
              ++v1067;
              --v1069;
            }
            while (v1069);
          }
          goto LABEL_1603;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v959 = __ldaxr((unint64_t *)v382);
              v960 = v959 - 1;
            }
            while (__stlxr(v960, (unint64_t *)v382));
            if (!v960)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1115 = __ldaxr((unint64_t *)v382);
              v1116 = v1115 - 1;
            }
            while (__stlxr(v1116, (unint64_t *)v382));
            if (!v1116)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 6:
        case 7:
          goto LABEL_523;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1119 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1119;
            if (v1119)
            {
              v1120 = (unsigned int *)(v1119 + 8);
              do
                v1121 = __ldxr(v1120);
              while (__stxr(v1121 + 1, v1120));
            }
            v1122 = *(_OWORD *)(v382 + 24);
            v1123 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1123;
            *(_OWORD *)(v386 + 24) = v1122;
            *(_QWORD *)v386 = 1;
            do
            {
              v1124 = __ldaxr((unint64_t *)v382);
              v1125 = v1124 - 1;
            }
            while (__stlxr(v1125, (unint64_t *)v382));
            if (!v1125)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            **(_QWORD **)&v520 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v520 + 8), v382 + 8);
            **(_QWORD **)&v520 = 1;
            do
            {
              v971 = __ldaxr((unint64_t *)v382);
              v972 = v971 - 1;
            }
            while (__stlxr(v972, (unint64_t *)v382));
            if (!v972)
            {
              v973 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v973, 0x1030C407B73B9F7);
            }
          }
          v975 = *(uint64_t **)(*(_QWORD *)&v520 + 24);
          v974 = *(uint64_t **)(*(_QWORD *)&v520 + 32);
          if (v974 == v975)
            goto LABEL_1603;
          if (!*(_QWORD *)(*(_QWORD *)&v520 + 8))
            goto LABEL_1603;
          v976 = (double)*(uint64_t *)&v1166;
          v977 = 1;
          do
          {
            v978 = *v975++;
            v977 *= v978;
          }
          while (v975 != v974);
          if (!v977)
            goto LABEL_1603;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
          v979 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v520 + 32) - *(_QWORD *)(*(_QWORD *)&v520 + 24)) >> 3;
          v1161 = 0;
          std::vector<unsigned long>::vector(&v1162, v979, &v1161);
          v913 = v1162;
          v980 = v1163;
          break;
        default:
          goto LABEL_1706;
      }
      while (2)
      {
        v981 = 0;
        v982 = (char *)v980 - (char *)v913;
        if (v982)
        {
          v983 = v982 >> 3;
          v984 = *(uint64_t **)(*(_QWORD *)&v520 + 48);
          if (v983 <= 1)
            v983 = 1;
          do
          {
            v986 = (uint64_t)*v913++;
            v985 = v986;
            v987 = *v984++;
            v981 += v987 * v985;
            --v983;
          }
          while (v983);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v981)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v981)) / v976;
        v913 = v1162;
        v980 = v1163;
        v988 = v1163 - v1162;
        v989 = v988 - 1;
        if ((char *)v1163 - (char *)v1162 < 1)
          goto LABEL_1435;
        v990 = *(_QWORD *)(*(_QWORD *)&v520 + 24);
        v991 = (char *)v1162[v989] + 1;
        v1162[v989] = v991;
        if ((unint64_t)v991 < *(_QWORD *)(v990 + 8 * v989))
        {
LABEL_1434:
          v988 = 1;
LABEL_1435:
          if (v989 < 0 || !v988)
            goto LABEL_1461;
          continue;
        }
        break;
      }
      v992 = (unint64_t *)&v913[v988 - 2];
      v993 = v990 - 16;
      while (1)
      {
        v994 = v988 - 1;
        v992[1] = 0;
        if (v988 - 1 <= 0)
          goto LABEL_1462;
        v995 = *v992 + 1;
        *v992-- = v995;
        v996 = *(_QWORD *)(v993 + 8 * v988--);
        if (v995 < v996)
        {
          v989 = v994 - 1;
          goto LABEL_1434;
        }
      }
    case 1:
      switch(v383)
      {
        case 0:
          v382 = (uint64_t)((double)v382 / v1166);
          goto LABEL_524;
        case 1:
          v522 = v1166;
LABEL_770:
          *(double *)&v382 = *(double *)&v382 / v522;
          goto LABEL_524;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v951 = __ldaxr((unint64_t *)v382);
              v952 = v951 - 1;
            }
            while (__stlxr(v952, (unint64_t *)v382));
            if (!v952)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v520, v382);
            **(_QWORD **)&v520 = 1;
            do
            {
              v1088 = __ldaxr((unint64_t *)v382);
              v1089 = v1088 - 1;
            }
            while (__stlxr(v1089, (unint64_t *)v382));
            if (!v1089)
            {
              v1090 = *(void **)(v382 + 8);
              if (v1090)
              {
                *(_QWORD *)(v382 + 16) = v1090;
                operator delete(v1090);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          v1091 = *(double **)(*(_QWORD *)&v520 + 8);
          v1092 = *(_QWORD *)(*(_QWORD *)&v520 + 16) - (_QWORD)v1091;
          if (v1092)
          {
            v1093 = v1166;
            v1094 = v1092 >> 3;
            if (v1094 <= 1)
              v1094 = 1;
            do
            {
              *v1091 = *v1091 / v1093;
              ++v1091;
              --v1094;
            }
            while (v1094);
          }
          goto LABEL_1603;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1117 = __ldaxr((unint64_t *)v382);
              v1118 = v1117 - 1;
            }
            while (__stlxr(v1118, (unint64_t *)v382));
            if (!v1118)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1052 = __ldaxr((unint64_t *)v382);
              v1053 = v1052 - 1;
            }
            while (__stlxr(v1053, (unint64_t *)v382));
            if (!v1053)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 6:
        case 7:
          goto LABEL_523;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1126 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1126;
            if (v1126)
            {
              v1127 = (unsigned int *)(v1126 + 8);
              do
                v1128 = __ldxr(v1127);
              while (__stxr(v1128 + 1, v1127));
            }
            v1129 = *(_OWORD *)(v382 + 24);
            v1130 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1130;
            *(_OWORD *)(v386 + 24) = v1129;
            *(_QWORD *)v386 = 1;
            do
            {
              v1131 = __ldaxr((unint64_t *)v382);
              v1132 = v1131 - 1;
            }
            while (__stlxr(v1132, (unint64_t *)v382));
            if (!v1132)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            **(_QWORD **)&v520 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v520 + 8), v382 + 8);
            **(_QWORD **)&v520 = 1;
            do
            {
              v997 = __ldaxr((unint64_t *)v382);
              v998 = v997 - 1;
            }
            while (__stlxr(v998, (unint64_t *)v382));
            if (!v998)
            {
              v999 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v999, 0x1030C407B73B9F7);
            }
          }
          v1001 = *(uint64_t **)(*(_QWORD *)&v520 + 24);
          v1000 = *(uint64_t **)(*(_QWORD *)&v520 + 32);
          if (v1000 == v1001)
            goto LABEL_1603;
          if (!*(_QWORD *)(*(_QWORD *)&v520 + 8))
            goto LABEL_1603;
          v1002 = v1166;
          v1003 = 1;
          do
          {
            v1004 = *v1001++;
            v1003 *= v1004;
          }
          while (v1001 != v1000);
          if (!v1003)
            goto LABEL_1603;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
          v1005 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v520 + 32) - *(_QWORD *)(*(_QWORD *)&v520 + 24)) >> 3;
          v1161 = 0;
          std::vector<unsigned long>::vector(&v1162, v1005, &v1161);
          v913 = v1162;
          v1006 = v1163;
          break;
        default:
          goto LABEL_1706;
      }
      while (2)
      {
        v1007 = 0;
        v1008 = (char *)v1006 - (char *)v913;
        if (v1008)
        {
          v1009 = v1008 >> 3;
          v1010 = *(uint64_t **)(*(_QWORD *)&v520 + 48);
          if (v1009 <= 1)
            v1009 = 1;
          do
          {
            v1012 = (uint64_t)*v913++;
            v1011 = v1012;
            v1013 = *v1010++;
            v1007 += v1013 * v1011;
            --v1009;
          }
          while (v1009);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
        *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v1007)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v1007)) / v1002;
        v913 = v1162;
        v1006 = v1163;
        v1014 = v1163 - v1162;
        v1015 = v1014 - 1;
        if ((char *)v1163 - (char *)v1162 < 1)
          goto LABEL_1459;
        v1016 = *(_QWORD *)(*(_QWORD *)&v520 + 24);
        v1017 = (char *)v1162[v1015] + 1;
        v1162[v1015] = v1017;
        if ((unint64_t)v1017 < *(_QWORD *)(v1016 + 8 * v1015))
        {
LABEL_1458:
          v1014 = 1;
LABEL_1459:
          if (v1015 < 0 || !v1014)
            goto LABEL_1461;
          continue;
        }
        break;
      }
      v1018 = (unint64_t *)&v913[v1014 - 2];
      v1019 = v1016 - 16;
      while (1)
      {
        v1020 = v1014 - 1;
        v1018[1] = 0;
        if (v1014 - 1 <= 0)
          goto LABEL_1461;
        v1021 = *v1018 + 1;
        *v1018-- = v1021;
        v1022 = *(_QWORD *)(v1019 + 8 * v1014--);
        if (v1021 < v1022)
        {
          v1015 = v1020 - 1;
          goto LABEL_1458;
        }
      }
    case 2:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v944 = __ldaxr((unint64_t *)v382);
              v945 = v944 - 1;
            }
            while (__stlxr(v945, (unint64_t *)v382));
            if (!v945)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v886 = __ldaxr((unint64_t *)v382);
              v887 = v886 - 1;
            }
            while (__stlxr(v887, (unint64_t *)v382));
            if (!v887)
            {
              v888 = *(void **)(v382 + 8);
              if (v888)
              {
                *(_QWORD *)(v382 + 16) = v888;
                operator delete(v888);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1075 = __ldaxr((unint64_t *)v382);
              v1076 = v1075 - 1;
            }
            while (__stlxr(v1076, (unint64_t *)v382));
            if (!v1076)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1025 = __ldaxr((unint64_t *)v382);
              v1026 = v1025 - 1;
            }
            while (__stlxr(v1026, (unint64_t *)v382));
            if (!v1026)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1077 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1077;
            if (v1077)
            {
              v1078 = (unsigned int *)(v1077 + 8);
              do
                v1079 = __ldxr(v1078);
              while (__stxr(v1079 + 1, v1078));
            }
            v1080 = *(_OWORD *)(v382 + 24);
            v1081 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1081;
            *(_OWORD *)(v386 + 24) = v1080;
            *(_QWORD *)v386 = 1;
            do
            {
              v1082 = __ldaxr((unint64_t *)v382);
              v1083 = v1082 - 1;
            }
            while (__stlxr(v1083, (unint64_t *)v382));
            if (!v1083)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v941 = __ldaxr((unint64_t *)v382);
              v942 = v941 - 1;
            }
            while (__stlxr(v942, (unint64_t *)v382));
            if (!v942)
            {
              v943 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v943, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 3:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v969 = __ldaxr((unint64_t *)v382);
              v970 = v969 - 1;
            }
            while (__stlxr(v970, (unint64_t *)v382));
            if (!v970)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          v519 = v1166;
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](*(_QWORD **)&v520, v382);
            **(_QWORD **)&v520 = 1;
            do
            {
              v892 = __ldaxr((unint64_t *)v382);
              v893 = v892 - 1;
            }
            while (__stlxr(v893, (unint64_t *)v382));
            if (!v893)
            {
              v894 = *(void **)(v382 + 8);
              if (v894)
              {
                *(_QWORD *)(v382 + 16) = v894;
                operator delete(v894);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v520 + 16) - *(_QWORD *)(*(_QWORD *)&v520 + 8) == *(_QWORD *)(*(_QWORD *)&v519 + 16) - *(_QWORD *)(*(_QWORD *)&v519 + 8));
          v895 = *(double **)(*(_QWORD *)&v520 + 8);
          v896 = *(_QWORD *)(*(_QWORD *)&v520 + 16) - (_QWORD)v895;
          if (v896)
          {
            v897 = v896 >> 3;
            v898 = *(double **)(*(_QWORD *)&v519 + 8);
            if (v897 <= 1)
              v897 = 1;
            do
            {
              v899 = *v898++;
              *v895 = *v895 / v899;
              ++v895;
              --v897;
            }
            while (v897);
          }
          goto LABEL_1603;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1086 = __ldaxr((unint64_t *)v382);
              v1087 = v1086 - 1;
            }
            while (__stlxr(v1087, (unint64_t *)v382));
            if (!v1087)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1041 = __ldaxr((unint64_t *)v382);
              v1042 = v1041 - 1;
            }
            while (__stlxr(v1042, (unint64_t *)v382));
            if (!v1042)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1099 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1099;
            if (v1099)
            {
              v1100 = (unsigned int *)(v1099 + 8);
              do
                v1101 = __ldxr(v1100);
              while (__stxr(v1101 + 1, v1100));
            }
            v1102 = *(_OWORD *)(v382 + 24);
            v1103 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1103;
            *(_OWORD *)(v386 + 24) = v1102;
            *(_QWORD *)v386 = 1;
            do
            {
              v1104 = __ldaxr((unint64_t *)v382);
              v1105 = v1104 - 1;
            }
            while (__stlxr(v1105, (unint64_t *)v382));
            if (!v1105)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v956 = __ldaxr((unint64_t *)v382);
              v957 = v956 - 1;
            }
            while (__stlxr(v957, (unint64_t *)v382));
            if (!v957)
            {
              v958 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v958, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 4:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v903 = __ldaxr((unint64_t *)v382);
              v904 = v903 - 1;
            }
            while (__stlxr(v904, (unint64_t *)v382));
            if (!v904)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v880 = __ldaxr((unint64_t *)v382);
              v881 = v880 - 1;
            }
            while (__stlxr(v881, (unint64_t *)v382));
            if (!v881)
            {
              v882 = *(void **)(v382 + 8);
              if (v882)
              {
                *(_QWORD *)(v382 + 16) = v882;
                operator delete(v882);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1027 = __ldaxr((unint64_t *)v382);
              v1028 = v1027 - 1;
            }
            while (__stlxr(v1028, (unint64_t *)v382));
            if (!v1028)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v946 = __ldaxr((unint64_t *)v382);
              v947 = v946 - 1;
            }
            while (__stlxr(v947, (unint64_t *)v382));
            if (!v947)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1031 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1031;
            if (v1031)
            {
              v1032 = (unsigned int *)(v1031 + 8);
              do
                v1033 = __ldxr(v1032);
              while (__stxr(v1033 + 1, v1032));
            }
            v1034 = *(_OWORD *)(v382 + 24);
            v1035 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1035;
            *(_OWORD *)(v386 + 24) = v1034;
            *(_QWORD *)v386 = 1;
            do
            {
              v1036 = __ldaxr((unint64_t *)v382);
              v1037 = v1036 - 1;
            }
            while (__stlxr(v1037, (unint64_t *)v382));
            if (!v1037)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v889 = __ldaxr((unint64_t *)v382);
              v890 = v889 - 1;
            }
            while (__stlxr(v890, (unint64_t *)v382));
            if (!v890)
            {
              v891 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v891, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 5:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1050 = __ldaxr((unint64_t *)v382);
              v1051 = v1050 - 1;
            }
            while (__stlxr(v1051, (unint64_t *)v382));
            if (!v1051)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v948 = __ldaxr((unint64_t *)v382);
              v949 = v948 - 1;
            }
            while (__stlxr(v949, (unint64_t *)v382));
            if (!v949)
            {
              v950 = *(void **)(v382 + 8);
              if (v950)
              {
                *(_QWORD *)(v382 + 16) = v950;
                operator delete(v950);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1133 = __ldaxr((unint64_t *)v382);
              v1134 = v1133 - 1;
            }
            while (__stlxr(v1134, (unint64_t *)v382));
            if (!v1134)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1084 = __ldaxr((unint64_t *)v382);
              v1085 = v1084 - 1;
            }
            while (__stlxr(v1085, (unint64_t *)v382));
            if (!v1085)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1135 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1135;
            if (v1135)
            {
              v1136 = (unsigned int *)(v1135 + 8);
              do
                v1137 = __ldxr(v1136);
              while (__stxr(v1137 + 1, v1136));
            }
            v1138 = *(_OWORD *)(v382 + 24);
            v1139 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1139;
            *(_OWORD *)(v386 + 24) = v1138;
            *(_QWORD *)v386 = 1;
            do
            {
              v1140 = __ldaxr((unint64_t *)v382);
              v1141 = v1140 - 1;
            }
            while (__stlxr(v1141, (unint64_t *)v382));
            if (!v1141)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v1038 = __ldaxr((unint64_t *)v382);
              v1039 = v1038 - 1;
            }
            while (__stlxr(v1039, (unint64_t *)v382));
            if (!v1039)
            {
              v1040 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v1040, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 6:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1071 = __ldaxr((unint64_t *)v382);
              v1072 = v1071 - 1;
            }
            while (__stlxr(v1072, (unint64_t *)v382));
            if (!v1072)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v953 = __ldaxr((unint64_t *)v382);
              v954 = v953 - 1;
            }
            while (__stlxr(v954, (unint64_t *)v382));
            if (!v954)
            {
              v955 = *(void **)(v382 + 8);
              if (v955)
              {
                *(_QWORD *)(v382 + 16) = v955;
                operator delete(v955);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1142 = __ldaxr((unint64_t *)v382);
              v1143 = v1142 - 1;
            }
            while (__stlxr(v1143, (unint64_t *)v382));
            if (!v1143)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1097 = __ldaxr((unint64_t *)v382);
              v1098 = v1097 - 1;
            }
            while (__stlxr(v1098, (unint64_t *)v382));
            if (!v1098)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1144 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1144;
            if (v1144)
            {
              v1145 = (unsigned int *)(v1144 + 8);
              do
                v1146 = __ldxr(v1145);
              while (__stxr(v1146 + 1, v1145));
            }
            v1147 = *(_OWORD *)(v382 + 24);
            v1148 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1148;
            *(_OWORD *)(v386 + 24) = v1147;
            *(_QWORD *)v386 = 1;
            do
            {
              v1149 = __ldaxr((unint64_t *)v382);
              v1150 = v1149 - 1;
            }
            while (__stlxr(v1150, (unint64_t *)v382));
            if (!v1150)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v1047 = __ldaxr((unint64_t *)v382);
              v1048 = v1047 - 1;
            }
            while (__stlxr(v1048, (unint64_t *)v382));
            if (!v1048)
            {
              v1049 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v1049, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 7:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1023 = __ldaxr((unint64_t *)v382);
              v1024 = v1023 - 1;
            }
            while (__stlxr(v1024, (unint64_t *)v382));
            if (!v1024)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v900 = __ldaxr((unint64_t *)v382);
              v901 = v900 - 1;
            }
            while (__stlxr(v901, (unint64_t *)v382));
            if (!v901)
            {
              v902 = *(void **)(v382 + 8);
              if (v902)
              {
                *(_QWORD *)(v382 + 16) = v902;
                operator delete(v902);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1095 = __ldaxr((unint64_t *)v382);
              v1096 = v1095 - 1;
            }
            while (__stlxr(v1096, (unint64_t *)v382));
            if (!v1096)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1043 = __ldaxr((unint64_t *)v382);
              v1044 = v1043 - 1;
            }
            while (__stlxr(v1044, (unint64_t *)v382));
            if (!v1044)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1106 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1106;
            if (v1106)
            {
              v1107 = (unsigned int *)(v1106 + 8);
              do
                v1108 = __ldxr(v1107);
              while (__stxr(v1108 + 1, v1107));
            }
            v1109 = *(_OWORD *)(v382 + 24);
            v1110 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1110;
            *(_OWORD *)(v386 + 24) = v1109;
            *(_QWORD *)v386 = 1;
            do
            {
              v1111 = __ldaxr((unint64_t *)v382);
              v1112 = v1111 - 1;
            }
            while (__stlxr(v1112, (unint64_t *)v382));
            if (!v1112)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v966 = __ldaxr((unint64_t *)v382);
              v967 = v966 - 1;
            }
            while (__stlxr(v967, (unint64_t *)v382));
            if (!v967)
            {
              v968 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v968, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 8:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_523;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1073 = __ldaxr((unint64_t *)v382);
              v1074 = v1073 - 1;
            }
            while (__stlxr(v1074, (unint64_t *)v382));
            if (!v1074)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v961 = __ldaxr((unint64_t *)v382);
              v962 = v961 - 1;
            }
            while (__stlxr(v962, (unint64_t *)v382));
            if (!v962)
            {
              v963 = *(void **)(v382 + 8);
              if (v963)
              {
                *(_QWORD *)(v382 + 16) = v963;
                operator delete(v963);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1151 = __ldaxr((unint64_t *)v382);
              v1152 = v1151 - 1;
            }
            while (__stlxr(v1152, (unint64_t *)v382));
            if (!v1152)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1113 = __ldaxr((unint64_t *)v382);
              v1114 = v1113 - 1;
            }
            while (__stlxr(v1114, (unint64_t *)v382));
            if (!v1114)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1153 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1153;
            if (v1153)
            {
              v1154 = (unsigned int *)(v1153 + 8);
              do
                v1155 = __ldxr(v1154);
              while (__stxr(v1155 + 1, v1154));
            }
            v1156 = *(_OWORD *)(v382 + 24);
            v1157 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1157;
            *(_OWORD *)(v386 + 24) = v1156;
            *(_QWORD *)v386 = 1;
            do
            {
              v1158 = __ldaxr((unint64_t *)v382);
              v1159 = v1158 - 1;
            }
            while (__stlxr(v1159, (unint64_t *)v382));
            if (!v1159)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
          goto LABEL_1699;
        case 9:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(v386 + 8), v382 + 8);
            *(_QWORD *)v386 = 1;
            do
            {
              v1061 = __ldaxr((unint64_t *)v382);
              v1062 = v1061 - 1;
            }
            while (__stlxr(v1062, (unint64_t *)v382));
            if (!v1062)
            {
              v1063 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v1063, 0x1030C407B73B9F7);
            }
          }
          goto LABEL_1699;
        default:
          goto LABEL_1706;
      }
    case 9:
      switch(v383)
      {
        case 0:
        case 1:
        case 6:
        case 7:
LABEL_523:
          turi::flexible_type_fail(0);
          goto LABEL_524;
        case 2:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v939 = __ldaxr((unint64_t *)v382);
              v940 = v939 - 1;
            }
            while (__stlxr(v940, (unint64_t *)v382));
            if (!v940)
            {
              if (*(char *)(v382 + 31) < 0)
                operator delete(*(void **)(v382 + 8));
              MEMORY[0x219A19A08](v382, 0x1012C404EF22A49);
            }
          }
          goto LABEL_1699;
        case 3:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v883 = __ldaxr((unint64_t *)v382);
              v884 = v883 - 1;
            }
            while (__stlxr(v884, (unint64_t *)v382));
            if (!v884)
            {
              v885 = *(void **)(v382 + 8);
              if (v885)
              {
                *(_QWORD *)(v382 + 16) = v885;
                operator delete(v885);
              }
              MEMORY[0x219A19A08](v382, 0x1080C409938AC02);
            }
          }
          goto LABEL_1699;
        case 4:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v1045 = __ldaxr((unint64_t *)v382);
              v1046 = v1045 - 1;
            }
            while (__stlxr(v1046, (unint64_t *)v382));
            if (!v1046)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 5:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100]((_QWORD *)v386, v382);
            *(_QWORD *)v386 = 1;
            do
            {
              v964 = __ldaxr((unint64_t *)v382);
              v965 = v964 - 1;
            }
            while (__stlxr(v965, (unint64_t *)v382));
            if (!v965)
            {
              v1162 = (void **)(v382 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
              MEMORY[0x219A19A08](v382, 0x1020C405E66F15BLL);
            }
          }
          goto LABEL_1699;
        case 8:
          if (*(_QWORD *)v382 == 1)
          {
            v386 = v382;
          }
          else
          {
            *(double *)&v386 = COERCE_DOUBLE(operator new());
            *(_QWORD *)v386 = *(_QWORD *)v382;
            v1054 = *(_QWORD *)(v382 + 16);
            *(_QWORD *)(v386 + 8) = *(_QWORD *)(v382 + 8);
            *(_QWORD *)(v386 + 16) = v1054;
            if (v1054)
            {
              v1055 = (unsigned int *)(v1054 + 8);
              do
                v1056 = __ldxr(v1055);
              while (__stxr(v1056 + 1, v1055));
            }
            v1057 = *(_OWORD *)(v382 + 24);
            v1058 = *(_OWORD *)(v382 + 40);
            *(_OWORD *)(v386 + 56) = *(_OWORD *)(v382 + 56);
            *(_OWORD *)(v386 + 40) = v1058;
            *(_OWORD *)(v386 + 24) = v1057;
            *(_QWORD *)v386 = 1;
            do
            {
              v1059 = __ldaxr((unint64_t *)v382);
              v1060 = v1059 - 1;
            }
            while (__stlxr(v1060, (unint64_t *)v382));
            if (!v1060)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
              MEMORY[0x219A19A08](v382, 0x1030C40F1F0227BLL);
            }
          }
LABEL_1699:
          v382 = v386;
          turi::flexible_type_fail(0);
          goto LABEL_524;
        case 9:
          v521 = v1166;
          if (*(_QWORD *)v382 == 1)
          {
            v520 = *(double *)&v382;
          }
          else
          {
            v520 = COERCE_DOUBLE(operator new());
            **(_QWORD **)&v520 = *(_QWORD *)v382;
            turi::flexible_type_impl::ndarray<double>::ndarray((_QWORD *)(*(_QWORD *)&v520 + 8), v382 + 8);
            **(_QWORD **)&v520 = 1;
            do
            {
              v905 = __ldaxr((unint64_t *)v382);
              v906 = v905 - 1;
            }
            while (__stlxr(v906, (unint64_t *)v382));
            if (!v906)
            {
              v907 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
              MEMORY[0x219A19A08](v907, 0x1030C407B73B9F7);
            }
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(_QWORD *)&v520 + 8, *(_QWORD *)&v521 + 8))
            turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v909 = *(uint64_t **)(*(_QWORD *)&v520 + 24);
          v908 = *(uint64_t **)(*(_QWORD *)&v520 + 32);
          if (v908 == v909)
            goto LABEL_1603;
          if (!*(_QWORD *)(*(_QWORD *)&v520 + 8))
            goto LABEL_1603;
          v910 = 1;
          do
          {
            v911 = *v909++;
            v910 *= v911;
          }
          while (v909 != v908);
          if (!v910)
            goto LABEL_1603;
          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
          v912 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v520 + 32) - *(_QWORD *)(*(_QWORD *)&v520 + 24)) >> 3;
          v1161 = 0;
          std::vector<unsigned long>::vector(&v1162, v912, &v1161);
          v913 = v1162;
          v914 = v1163;
          break;
        default:
          goto LABEL_1706;
      }
      break;
    default:
LABEL_1706:
      turi::flexible_type_fail(0);
      goto LABEL_1709;
  }
  while (2)
  {
    v915 = (char *)v914 - (char *)v913;
    if (v915)
    {
      v916 = 0;
      v917 = v915 >> 3;
      v918 = *(uint64_t **)(*(_QWORD *)&v521 + 48);
      if (v917 <= 1)
        v917 = 1;
      v919 = v913;
      v920 = v917;
      do
      {
        v922 = (uint64_t)*v919++;
        v921 = v922;
        v923 = *v918++;
        v916 += v923 * v921;
        --v920;
      }
      while (v920);
      v924 = 0;
      v925 = *(double *)(**(_QWORD **)(*(_QWORD *)&v521 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v521 + 72) + v916));
      v926 = *(uint64_t **)(*(_QWORD *)&v520 + 48);
      do
      {
        v928 = (uint64_t)*v913++;
        v927 = v928;
        v929 = *v926++;
        v924 += v929 * v927;
        --v917;
      }
      while (v917);
    }
    else
    {
      v924 = 0;
      v925 = *(double *)(**(_QWORD **)(*(_QWORD *)&v521 + 8) + 8 * *(_QWORD *)(*(_QWORD *)&v521 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(_QWORD *)&v520 + 8));
    *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v924)) = *(double *)(**(_QWORD **)(*(_QWORD *)&v520 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v520 + 72) + v924)) / v925;
    v913 = v1162;
    v914 = v1163;
    v930 = v1163 - v1162;
    v931 = v930 - 1;
    if ((char *)v1163 - (char *)v1162 < 1)
    {
LABEL_1332:
      if (v931 < 0 || !v930)
        goto LABEL_1461;
      continue;
    }
    break;
  }
  v932 = *(_QWORD *)(*(_QWORD *)&v520 + 24);
  v933 = (char *)v1162[v931] + 1;
  v1162[v931] = v933;
  if ((unint64_t)v933 < *(_QWORD *)(v932 + 8 * v931))
  {
LABEL_1331:
    v930 = 1;
    goto LABEL_1332;
  }
  v934 = (unint64_t *)&v913[v930 - 2];
  v935 = v932 - 16;
  while (1)
  {
    v936 = v930 - 1;
    v934[1] = 0;
    if (v930 - 1 <= 0)
      break;
    v937 = *v934 + 1;
    *v934-- = v937;
    v938 = *(_QWORD *)(v935 + 8 * v930--);
    if (v937 < v938)
    {
      v931 = v936 - 1;
      goto LABEL_1331;
    }
  }
LABEL_1461:
  if (v913)
  {
LABEL_1462:
    v1163 = v913;
    operator delete(v913);
  }
LABEL_1603:
  *(double *)&v382 = v520;
LABEL_524:
  switch(v1168)
  {
    case 2:
      v387 = *(unint64_t **)&v1166;
      do
      {
        v388 = __ldaxr(v387);
        v389 = v388 - 1;
      }
      while (__stlxr(v389, v387));
      if (!v389)
      {
        v390 = v1166;
        if (v1166 != 0.0)
        {
          if (*(char *)(*(_QWORD *)&v1166 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v1166 + 8));
          v391 = v390;
          v392 = 0x1012C404EF22A49;
          goto LABEL_561;
        }
      }
      break;
    case 3:
      v401 = *(unint64_t **)&v1166;
      do
      {
        v402 = __ldaxr(v401);
        v403 = v402 - 1;
      }
      while (__stlxr(v403, v401));
      if (!v403)
      {
        v404 = v1166;
        if (v1166 != 0.0)
        {
          v405 = *(void **)(*(_QWORD *)&v1166 + 8);
          if (v405)
          {
            *(_QWORD *)(*(_QWORD *)&v1166 + 16) = v405;
            operator delete(v405);
          }
          v391 = v404;
          v392 = 0x1080C409938AC02;
          goto LABEL_561;
        }
      }
      break;
    case 4:
      v393 = *(unint64_t **)&v1166;
      do
      {
        v394 = __ldaxr(v393);
        v395 = v394 - 1;
      }
      while (__stlxr(v395, v393));
      if (!v395)
      {
        v396 = v1166;
        if (v1166 != 0.0)
        {
          v1162 = (void **)(*(_QWORD *)&v1166 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_554;
        }
      }
      break;
    case 5:
      v406 = *(unint64_t **)&v1166;
      do
      {
        v407 = __ldaxr(v406);
        v408 = v407 - 1;
      }
      while (__stlxr(v408, v406));
      if (!v408)
      {
        v396 = v1166;
        if (v1166 != 0.0)
        {
          v1162 = (void **)(*(_QWORD *)&v1166 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_554:
          v391 = v396;
          v392 = 0x1020C405E66F15BLL;
          goto LABEL_561;
        }
      }
      break;
    case 8:
      v409 = *(unint64_t **)&v1166;
      do
      {
        v410 = __ldaxr(v409);
        v411 = v410 - 1;
      }
      while (__stlxr(v411, v409));
      if (!v411)
      {
        v412 = v1166;
        if (v1166 != 0.0)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v1166 + 16));
          v391 = v412;
          v400 = -235920773;
          goto LABEL_560;
        }
      }
      break;
    case 9:
      v397 = *(unint64_t **)&v1166;
      do
      {
        v398 = __ldaxr(v397);
        v399 = v398 - 1;
      }
      while (__stlxr(v399, v397));
      if (!v399 && v1166 != 0.0)
      {
        v391 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v1166));
        v400 = 2071181815;
LABEL_560:
        v392 = v400 | 0x1030C4000000000;
LABEL_561:
        MEMORY[0x219A19A08](*(_QWORD *)&v391, v392);
      }
      break;
    default:
      break;
  }
  switch(v383)
  {
    case 0:
      goto LABEL_563;
    case 1:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          v413 = (uint64_t)(*(double *)&v382 + (double)(uint64_t)*a2);
LABEL_677:
          *a2 = (_QWORD *)v413;
          goto LABEL_1216;
        case 1:
          v501 = *(double *)&v382;
LABEL_1055:
          *(double *)a2 = *(double *)a2 + v501;
          goto LABEL_1216;
        case 2:
          v439 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v717 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v717, (uint64_t)*a2);
          *a2 = v717;
          *v717 = 1;
          do
          {
            v718 = __ldaxr(*(unint64_t **)&v439);
            v442 = --v718 == 0;
          }
          while (__stlxr(v718, *(unint64_t **)&v439));
          goto LABEL_1024;
        case 3:
          v614 = *a2;
          if (**a2 != 1)
          {
            v615 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v615, (uint64_t)*a2);
            *a2 = v615;
            *v615 = 1;
            do
            {
              v616 = __ldaxr(v614);
              v617 = v616 - 1;
            }
            while (__stlxr(v617, v614));
            if (!v617)
            {
              v618 = (void *)v614[1];
              if (v618)
              {
                v614[2] = (unint64_t)v618;
                operator delete(v618);
              }
              MEMORY[0x219A19A08](v614, 0x1080C409938AC02);
            }
          }
          v619 = (double *)(*a2)[1];
          v620 = (*a2)[2] - (_QWORD)v619;
          if (!v620)
            goto LABEL_1216;
          v621 = v620 >> 3;
          if (v621 <= 1)
            v621 = 1;
          do
          {
            *v619 = *v619 + *(double *)&v382;
            ++v619;
            --v621;
          }
          while (v621);
          goto LABEL_966;
        case 4:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v767 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v767, (uint64_t)*a2);
          *a2 = v767;
          *v767 = 1;
          do
          {
            v768 = __ldaxr(*(unint64_t **)&v706);
            v769 = --v768 == 0;
          }
          while (__stlxr(v768, *(unint64_t **)&v706));
          goto LABEL_1175;
        case 5:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v802 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v802, (uint64_t)*a2);
          *a2 = v802;
          *v802 = 1;
          do
          {
            v803 = __ldaxr(*(unint64_t **)&v706);
            v709 = --v803 == 0;
          }
          while (__stlxr(v803, *(unint64_t **)&v706));
          goto LABEL_1138;
        case 6:
          v719 = *(double *)a2;
          v720 = (unint64_t)*a2 + vcvtmd_s64_f64(*(double *)&v382);
          *a2 = (_QWORD *)((unint64_t)*a2 & 0xFF00000000000000 | v720 & 0xFFFFFFFFFFFFFFLL);
          v721 = (uint64_t)((*(double *)&v382 - (double)(uint64_t)floor(*(double *)&v382)) * 1000000.0) + *((int *)a2 + 2);
          if (v721 > 999999)
          {
            *a2 = (_QWORD *)((v720 + 1) & 0xFFFFFFFFFFFFFFLL | *(_QWORD *)&v719 & 0xFF00000000000000);
            LODWORD(v721) = v721 - 1000000;
          }
          if (v721 > 0xF423F)
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          *((_DWORD *)a2 + 2) = v721;
          goto LABEL_1216;
        case 7:
          goto LABEL_699;
        case 8:
          v788 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v804 = operator new();
          v805 = *(double *)a2;
          *(_QWORD *)v804 = **a2;
          *(_QWORD *)(v804 + 8) = *(_QWORD *)(*(_QWORD *)&v805 + 8);
          v806 = *(_QWORD *)(*(_QWORD *)&v805 + 16);
          *(_QWORD *)(v804 + 16) = v806;
          if (v806)
          {
            v807 = (unsigned int *)(v806 + 8);
            do
              v808 = __ldxr(v807);
            while (__stxr(v808 + 1, v807));
          }
          v809 = *(_OWORD *)(*(_QWORD *)&v805 + 24);
          v810 = *(_OWORD *)(*(_QWORD *)&v805 + 40);
          *(_OWORD *)(v804 + 56) = *(_OWORD *)(*(_QWORD *)&v805 + 56);
          *(_OWORD *)(v804 + 40) = v810;
          *(_OWORD *)(v804 + 24) = v809;
          *a2 = (_QWORD *)v804;
          *(_QWORD *)v804 = 1;
          do
          {
            v811 = __ldaxr(*(unint64_t **)&v788);
            v797 = --v811 == 0;
          }
          while (__stlxr(v811, *(unint64_t **)&v788));
          goto LABEL_1185;
        case 9:
          v647 = *a2;
          if (**a2 != 1)
          {
            v648 = (_QWORD *)operator new();
            v649 = (uint64_t)(*a2 + 1);
            *v648 = **a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v648 + 1, v649);
            *a2 = v648;
            *v648 = 1;
            do
            {
              v650 = __ldaxr(v647);
              v651 = v650 - 1;
            }
            while (__stlxr(v651, v647));
            if (!v651)
            {
              v652 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v647);
              MEMORY[0x219A19A08](v652, 0x1030C407B73B9F7);
            }
          }
          v653 = *a2;
          v655 = (uint64_t *)(*a2)[3];
          v654 = (uint64_t *)(*a2)[4];
          if (v654 == v655 || !v653[1])
            goto LABEL_1216;
          v656 = 1;
          do
          {
            v657 = *v655++;
            v656 *= v657;
          }
          while (v655 != v654);
          if (!v656)
            goto LABEL_966;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v653 + 1);
          v658 = (v653[4] - v653[3]) >> 3;
          v1161 = 0;
          std::vector<unsigned long>::vector(&v1162, v658, &v1161);
          v477 = v1162;
          v659 = v1163;
          break;
        default:
          goto LABEL_1706;
      }
      while (2)
      {
        v660 = 0;
        v661 = (char *)v659 - (char *)v477;
        if (v661)
        {
          v662 = v661 >> 3;
          v663 = (uint64_t *)v653[6];
          if (v662 <= 1)
            v662 = 1;
          do
          {
            v665 = (uint64_t)*v477++;
            v664 = v665;
            v666 = *v663++;
            v660 += v666 * v664;
            --v662;
          }
          while (v662);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v653 + 1);
        *(double *)(*(_QWORD *)v653[1] + 8 * (v653[9] + v660)) = *(double *)(*(_QWORD *)v653[1] + 8 * (v653[9] + v660))
                                                               + *(double *)&v382;
        v477 = v1162;
        v659 = v1163;
        v667 = v1163 - v1162;
        v668 = v667 - 1;
        if ((char *)v1163 - (char *)v1162 < 1)
          goto LABEL_962;
        v669 = v653[3];
        v670 = (char *)v1162[v668] + 1;
        v1162[v668] = v670;
        if ((unint64_t)v670 < *(_QWORD *)(v669 + 8 * v668))
        {
LABEL_961:
          v667 = 1;
LABEL_962:
          if (v668 < 0 || !v667)
            goto LABEL_964;
          continue;
        }
        break;
      }
      v671 = (unint64_t *)&v477[v667 - 2];
      v672 = v669 - 16;
      while (1)
      {
        v673 = v667 - 1;
        v671[1] = 0;
        if (v667 - 1 <= 0)
          goto LABEL_965;
        v674 = *v671 + 1;
        *v671-- = v674;
        v675 = *(_QWORD *)(v672 + 8 * v667--);
        if (v674 < v675)
        {
          v668 = v673 - 1;
          goto LABEL_961;
        }
      }
    case 2:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_1072;
        case 2:
          v426 = *(double *)a2;
          if (**a2 != 1)
          {
            v427 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v427, (uint64_t)*a2);
            *a2 = v427;
            *v427 = 1;
            do
            {
              v428 = __ldaxr(*(unint64_t **)&v426);
              v429 = v428 - 1;
            }
            while (__stlxr(v429, *(unint64_t **)&v426));
            if (!v429)
            {
              if (*(char *)(*(_QWORD *)&v426 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v426 + 8));
              MEMORY[0x219A19A08](*(_QWORD *)&v426, 0x1012C404EF22A49);
            }
          }
          v430 = *(char *)(v382 + 31);
          if (v430 >= 0)
            v431 = (const std::string::value_type *)(v382 + 8);
          else
            v431 = *(const std::string::value_type **)(v382 + 8);
          if (v430 >= 0)
            v432 = *(unsigned __int8 *)(v382 + 31);
          else
            v432 = *(_QWORD *)(v382 + 16);
          std::string::append((std::string *)(*a2 + 1), v431, v432);
          goto LABEL_1073;
        case 3:
          v533 = *a2;
          if (**a2 == 1)
            goto LABEL_1072;
          v534 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v534, (uint64_t)*a2);
          *a2 = v534;
          *v534 = 1;
          do
          {
            v535 = __ldaxr(v533);
            v536 = v535 - 1;
          }
          while (__stlxr(v536, v533));
          if (v536)
            goto LABEL_1072;
          v537 = (void *)v533[1];
          if (v537)
          {
            v533[2] = (unint64_t)v537;
            operator delete(v537);
          }
          v538 = *(double *)&v533;
          v539 = 0x1080C409938AC02;
          goto LABEL_1071;
        case 4:
          v676 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1072;
          v743 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v743, (uint64_t)*a2);
          *a2 = v743;
          *v743 = 1;
          do
          {
            v744 = __ldaxr(*(unint64_t **)&v676);
            v745 = v744 - 1;
          }
          while (__stlxr(v745, *(unint64_t **)&v676));
          if (v745)
            goto LABEL_1072;
          v1162 = (void **)(*(_QWORD *)&v676 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1061;
        case 5:
          v676 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1072;
          v677 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v677, (uint64_t)*a2);
          *a2 = v677;
          *v677 = 1;
          do
          {
            v678 = __ldaxr(*(unint64_t **)&v676);
            v679 = v678 - 1;
          }
          while (__stlxr(v679, *(unint64_t **)&v676));
          if (v679)
            goto LABEL_1072;
          v1162 = (void **)(*(_QWORD *)&v676 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1061:
          v538 = v676;
          v539 = 0x1020C405E66F15BLL;
          goto LABEL_1071;
        case 8:
          v746 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1072;
          v747 = operator new();
          v748 = *(double *)a2;
          *(_QWORD *)v747 = **a2;
          *(_QWORD *)(v747 + 8) = *(_QWORD *)(*(_QWORD *)&v748 + 8);
          v749 = *(_QWORD *)(*(_QWORD *)&v748 + 16);
          *(_QWORD *)(v747 + 16) = v749;
          if (v749)
          {
            v750 = (unsigned int *)(v749 + 8);
            do
              v751 = __ldxr(v750);
            while (__stxr(v751 + 1, v750));
          }
          v752 = *(_OWORD *)(*(_QWORD *)&v748 + 24);
          v753 = *(_OWORD *)(*(_QWORD *)&v748 + 40);
          *(_OWORD *)(v747 + 56) = *(_OWORD *)(*(_QWORD *)&v748 + 56);
          *(_OWORD *)(v747 + 40) = v753;
          *(_OWORD *)(v747 + 24) = v752;
          *a2 = (_QWORD *)v747;
          *(_QWORD *)v747 = 1;
          do
          {
            v754 = __ldaxr(*(unint64_t **)&v746);
            v755 = v754 - 1;
          }
          while (__stlxr(v755, *(unint64_t **)&v746));
          if (v755)
            goto LABEL_1072;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v746 + 16));
          v538 = v746;
          v604 = -235920773;
          goto LABEL_1070;
        case 9:
          v599 = *a2;
          if (**a2 == 1)
            goto LABEL_1072;
          v600 = (_QWORD *)operator new();
          v601 = (uint64_t)(*a2 + 1);
          *v600 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v600 + 1, v601);
          *a2 = v600;
          *v600 = 1;
          do
          {
            v602 = __ldaxr(v599);
            v603 = v602 - 1;
          }
          while (__stlxr(v603, v599));
          if (v603)
            goto LABEL_1072;
          v538 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v599));
          v604 = 2071181815;
LABEL_1070:
          v539 = v604 | 0x1030C4000000000;
LABEL_1071:
          MEMORY[0x219A19A08](*(_QWORD *)&v538, v539);
LABEL_1072:
          turi::flexible_type_fail(0);
          do
          {
LABEL_1073:
            v756 = __ldaxr((unint64_t *)v382);
            v757 = v756 - 1;
          }
          while (__stlxr(v757, (unint64_t *)v382));
          if (v757)
            v758 = 1;
          else
            v758 = v382 == 0;
          if (v758)
            goto LABEL_1216;
          if (*(char *)(v382 + 31) < 0)
            operator delete(*(void **)(v382 + 8));
          v735 = (_QWORD *)v382;
          v759 = 0x1012C404EF22A49;
          break;
        default:
          goto LABEL_1706;
      }
      goto LABEL_1215;
    case 3:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_1114;
        case 2:
          v433 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1114;
          v434 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v434, (uint64_t)*a2);
          *a2 = v434;
          *v434 = 1;
          do
          {
            v435 = __ldaxr(*(unint64_t **)&v433);
            v436 = v435 - 1;
          }
          while (__stlxr(v436, *(unint64_t **)&v433));
          if (v436)
            goto LABEL_1114;
          if (*(char *)(*(_QWORD *)&v433 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v433 + 8));
          v437 = v433;
          v438 = 0x1012C404EF22A49;
          goto LABEL_1113;
        case 3:
          v546 = *a2;
          if (**a2 != 1)
          {
            v547 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v547, (uint64_t)*a2);
            *a2 = v547;
            *v547 = 1;
            do
            {
              v548 = __ldaxr(v546);
              v549 = v548 - 1;
            }
            while (__stlxr(v549, v546));
            if (!v549)
            {
              v550 = (void *)v546[1];
              if (v550)
              {
                v546[2] = (unint64_t)v550;
                operator delete(v550);
              }
              MEMORY[0x219A19A08](v546, 0x1080C409938AC02);
            }
          }
          v551 = *(double *)a2;
          turi::flexible_type_fail(*(_QWORD *)(*(_QWORD *)&v551 + 16) - *(_QWORD *)(*(_QWORD *)&v551 + 8) == *(_QWORD *)(v382 + 16) - *(_QWORD *)(v382 + 8));
          v552 = *(double **)(*(_QWORD *)&v551 + 8);
          v553 = *(_QWORD *)(*(_QWORD *)&v551 + 16) - (_QWORD)v552;
          if (!v553)
            goto LABEL_1115;
          v554 = v553 >> 3;
          v555 = *(double **)(v382 + 8);
          if (v554 <= 1)
            v554 = 1;
          do
          {
            v556 = *v555++;
            *v552 = v556 + *v552;
            ++v552;
            --v554;
          }
          while (v554);
          goto LABEL_966;
        case 4:
          v702 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1114;
          v764 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v764, (uint64_t)*a2);
          *a2 = v764;
          *v764 = 1;
          do
          {
            v765 = __ldaxr(*(unint64_t **)&v702);
            v766 = v765 - 1;
          }
          while (__stlxr(v766, *(unint64_t **)&v702));
          if (v766)
            goto LABEL_1114;
          v1162 = (void **)(*(_QWORD *)&v702 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1091;
        case 5:
          v702 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1114;
          v703 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v703, (uint64_t)*a2);
          *a2 = v703;
          *v703 = 1;
          do
          {
            v704 = __ldaxr(*(unint64_t **)&v702);
            v705 = v704 - 1;
          }
          while (__stlxr(v705, *(unint64_t **)&v702));
          if (v705)
            goto LABEL_1114;
          v1162 = (void **)(*(_QWORD *)&v702 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1091:
          v437 = v702;
          v438 = 0x1020C405E66F15BLL;
          goto LABEL_1113;
        case 8:
          v774 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1114;
          v775 = operator new();
          v776 = *(double *)a2;
          *(_QWORD *)v775 = **a2;
          *(_QWORD *)(v775 + 8) = *(_QWORD *)(*(_QWORD *)&v776 + 8);
          v777 = *(_QWORD *)(*(_QWORD *)&v776 + 16);
          *(_QWORD *)(v775 + 16) = v777;
          if (v777)
          {
            v778 = (unsigned int *)(v777 + 8);
            do
              v779 = __ldxr(v778);
            while (__stxr(v779 + 1, v778));
          }
          v780 = *(_OWORD *)(*(_QWORD *)&v776 + 24);
          v781 = *(_OWORD *)(*(_QWORD *)&v776 + 40);
          *(_OWORD *)(v775 + 56) = *(_OWORD *)(*(_QWORD *)&v776 + 56);
          *(_OWORD *)(v775 + 40) = v781;
          *(_OWORD *)(v775 + 24) = v780;
          *a2 = (_QWORD *)v775;
          *(_QWORD *)v775 = 1;
          do
          {
            v782 = __ldaxr(*(unint64_t **)&v774);
            v783 = v782 - 1;
          }
          while (__stlxr(v783, *(unint64_t **)&v774));
          if (v783)
            goto LABEL_1114;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v774 + 16));
          v437 = v774;
          v632 = -235920773;
          goto LABEL_1112;
        case 9:
          v627 = *a2;
          if (**a2 == 1)
            goto LABEL_1114;
          v628 = (_QWORD *)operator new();
          v629 = (uint64_t)(*a2 + 1);
          *v628 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v628 + 1, v629);
          *a2 = v628;
          *v628 = 1;
          do
          {
            v630 = __ldaxr(v627);
            v631 = v630 - 1;
          }
          while (__stlxr(v631, v627));
          if (v631)
            goto LABEL_1114;
          v437 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v627));
          v632 = 2071181815;
LABEL_1112:
          v438 = v632 | 0x1030C4000000000;
LABEL_1113:
          MEMORY[0x219A19A08](*(_QWORD *)&v437, v438);
LABEL_1114:
          turi::flexible_type_fail(0);
          do
          {
LABEL_1115:
            v784 = __ldaxr((unint64_t *)v382);
            v785 = v784 - 1;
          }
          while (__stlxr(v785, (unint64_t *)v382));
          if (v785)
            v786 = 1;
          else
            v786 = v382 == 0;
          if (v786)
            goto LABEL_1216;
          v787 = *(void **)(v382 + 8);
          if (v787)
          {
            *(_QWORD *)(v382 + 16) = v787;
            operator delete(v787);
          }
          v735 = (_QWORD *)v382;
          v759 = 0x1080C409938AC02;
          break;
        default:
          goto LABEL_1706;
      }
      goto LABEL_1215;
    case 4:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_988;
        case 2:
          v414 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_988;
          v415 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v415, (uint64_t)*a2);
          *a2 = v415;
          *v415 = 1;
          do
          {
            v416 = __ldaxr(*(unint64_t **)&v414);
            v417 = v416 - 1;
          }
          while (__stlxr(v417, *(unint64_t **)&v414));
          if (v417)
            goto LABEL_988;
          if (*(char *)(*(_QWORD *)&v414 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v414 + 8));
          v418 = v414;
          v419 = 0x1012C404EF22A49;
          goto LABEL_987;
        case 3:
          v523 = *a2;
          if (**a2 == 1)
            goto LABEL_988;
          v524 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v524, (uint64_t)*a2);
          *a2 = v524;
          *v524 = 1;
          do
          {
            v525 = __ldaxr(v523);
            v526 = v525 - 1;
          }
          while (__stlxr(v526, v523));
          if (v526)
            goto LABEL_988;
          v527 = (void *)v523[1];
          if (v527)
          {
            v523[2] = (unint64_t)v527;
            operator delete(v527);
          }
          v418 = *(double *)&v523;
          v419 = 0x1080C409938AC02;
          goto LABEL_987;
        case 4:
          v605 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_988;
          v680 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v680, (uint64_t)*a2);
          *a2 = v680;
          *v680 = 1;
          do
          {
            v681 = __ldaxr(*(unint64_t **)&v605);
            v682 = v681 - 1;
          }
          while (__stlxr(v682, *(unint64_t **)&v605));
          if (v682)
            goto LABEL_988;
          v1162 = (void **)(*(_QWORD *)&v605 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_977;
        case 5:
          v605 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_988;
          v606 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v606, (uint64_t)*a2);
          *a2 = v606;
          *v606 = 1;
          do
          {
            v607 = __ldaxr(*(unint64_t **)&v605);
            v608 = v607 - 1;
          }
          while (__stlxr(v608, *(unint64_t **)&v605));
          if (v608)
            goto LABEL_988;
          v1162 = (void **)(*(_QWORD *)&v605 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_977:
          v418 = v605;
          v419 = 0x1020C405E66F15BLL;
          goto LABEL_987;
        case 8:
          v683 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_988;
          v684 = operator new();
          v685 = *(double *)a2;
          *(_QWORD *)v684 = **a2;
          *(_QWORD *)(v684 + 8) = *(_QWORD *)(*(_QWORD *)&v685 + 8);
          v686 = *(_QWORD *)(*(_QWORD *)&v685 + 16);
          *(_QWORD *)(v684 + 16) = v686;
          if (v686)
          {
            v687 = (unsigned int *)(v686 + 8);
            do
              v688 = __ldxr(v687);
            while (__stxr(v688 + 1, v687));
          }
          v689 = *(_OWORD *)(*(_QWORD *)&v685 + 24);
          v690 = *(_OWORD *)(*(_QWORD *)&v685 + 40);
          *(_OWORD *)(v684 + 56) = *(_OWORD *)(*(_QWORD *)&v685 + 56);
          *(_OWORD *)(v684 + 40) = v690;
          *(_OWORD *)(v684 + 24) = v689;
          *a2 = (_QWORD *)v684;
          *(_QWORD *)v684 = 1;
          do
          {
            v691 = __ldaxr(*(unint64_t **)&v683);
            v692 = v691 - 1;
          }
          while (__stlxr(v692, *(unint64_t **)&v683));
          if (v692)
            goto LABEL_988;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v683 + 16));
          v418 = v683;
          v545 = -235920773;
          goto LABEL_986;
        case 9:
          v540 = *a2;
          if (**a2 == 1)
            goto LABEL_988;
          v541 = (_QWORD *)operator new();
          v542 = (uint64_t)(*a2 + 1);
          *v541 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v541 + 1, v542);
          *a2 = v541;
          *v541 = 1;
          do
          {
            v543 = __ldaxr(v540);
            v544 = v543 - 1;
          }
          while (__stlxr(v544, v540));
          if (v544)
            goto LABEL_988;
          v418 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v540));
          v545 = 2071181815;
LABEL_986:
          v419 = v545 | 0x1030C4000000000;
LABEL_987:
          MEMORY[0x219A19A08](*(_QWORD *)&v418, v419);
LABEL_988:
          turi::flexible_type_fail(0);
          do
          {
LABEL_989:
            v693 = __ldaxr((unint64_t *)v382);
            v694 = v693 - 1;
          }
          while (__stlxr(v694, (unint64_t *)v382));
          if (v694)
            v695 = 1;
          else
            v695 = v382 == 0;
          if (v695)
            goto LABEL_1216;
          v1162 = (void **)(v382 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          break;
        default:
          goto LABEL_1706;
      }
      goto LABEL_1171;
    case 5:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_1164;
        case 2:
          v443 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v444 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v444, (uint64_t)*a2);
          *a2 = v444;
          *v444 = 1;
          do
          {
            v445 = __ldaxr(*(unint64_t **)&v443);
            v446 = v445 - 1;
          }
          while (__stlxr(v446, *(unint64_t **)&v443));
          if (v446)
            goto LABEL_1164;
          if (*(char *)(*(_QWORD *)&v443 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v443 + 8));
          v447 = v443;
          v448 = 0x1012C404EF22A49;
          goto LABEL_1163;
        case 3:
          v609 = *a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v610 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v610, (uint64_t)*a2);
          *a2 = v610;
          *v610 = 1;
          do
          {
            v611 = __ldaxr(v609);
            v612 = v611 - 1;
          }
          while (__stlxr(v612, v609));
          if (v612)
            goto LABEL_1164;
          v613 = (void *)v609[1];
          if (v613)
          {
            v609[2] = (unint64_t)v613;
            operator delete(v613);
          }
          v447 = *(double *)&v609;
          v448 = 0x1080C409938AC02;
          goto LABEL_1163;
        case 4:
          v760 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v812 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v812, (uint64_t)*a2);
          *a2 = v812;
          *v812 = 1;
          do
          {
            v813 = __ldaxr(*(unint64_t **)&v760);
            v814 = v813 - 1;
          }
          while (__stlxr(v814, *(unint64_t **)&v760));
          if (v814)
            goto LABEL_1164;
          v1162 = (void **)(*(_QWORD *)&v760 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1153;
        case 5:
          v760 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v761 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v761, (uint64_t)*a2);
          *a2 = v761;
          *v761 = 1;
          do
          {
            v762 = __ldaxr(*(unint64_t **)&v760);
            v763 = v762 - 1;
          }
          while (__stlxr(v763, *(unint64_t **)&v760));
          if (v763)
            goto LABEL_1164;
          v1162 = (void **)(*(_QWORD *)&v760 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1153:
          v447 = v760;
          v448 = 0x1020C405E66F15BLL;
          goto LABEL_1163;
        case 8:
          v815 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v816 = operator new();
          v817 = *(double *)a2;
          *(_QWORD *)v816 = **a2;
          *(_QWORD *)(v816 + 8) = *(_QWORD *)(*(_QWORD *)&v817 + 8);
          v818 = *(_QWORD *)(*(_QWORD *)&v817 + 16);
          *(_QWORD *)(v816 + 16) = v818;
          if (v818)
          {
            v819 = (unsigned int *)(v818 + 8);
            do
              v820 = __ldxr(v819);
            while (__stxr(v820 + 1, v819));
          }
          v821 = *(_OWORD *)(*(_QWORD *)&v817 + 24);
          v822 = *(_OWORD *)(*(_QWORD *)&v817 + 40);
          *(_OWORD *)(v816 + 56) = *(_OWORD *)(*(_QWORD *)&v817 + 56);
          *(_OWORD *)(v816 + 40) = v822;
          *(_OWORD *)(v816 + 24) = v821;
          *a2 = (_QWORD *)v816;
          *(_QWORD *)v816 = 1;
          do
          {
            v823 = __ldaxr(*(unint64_t **)&v815);
            v824 = v823 - 1;
          }
          while (__stlxr(v824, *(unint64_t **)&v815));
          if (v824)
            goto LABEL_1164;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v815 + 16));
          v447 = v815;
          v701 = -235920773;
          goto LABEL_1162;
        case 9:
          v696 = *a2;
          if (**a2 == 1)
            goto LABEL_1164;
          v697 = (_QWORD *)operator new();
          v698 = (uint64_t)(*a2 + 1);
          *v697 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v697 + 1, v698);
          *a2 = v697;
          *v697 = 1;
          do
          {
            v699 = __ldaxr(v696);
            v700 = v699 - 1;
          }
          while (__stlxr(v700, v696));
          if (v700)
            goto LABEL_1164;
          v447 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v696));
          v701 = 2071181815;
LABEL_1162:
          v448 = v701 | 0x1030C4000000000;
LABEL_1163:
          MEMORY[0x219A19A08](*(_QWORD *)&v447, v448);
LABEL_1164:
          turi::flexible_type_fail(0);
          do
          {
LABEL_1165:
            v825 = __ldaxr((unint64_t *)v382);
            v826 = v825 - 1;
          }
          while (__stlxr(v826, (unint64_t *)v382));
          if (v826)
            v827 = 1;
          else
            v827 = v382 == 0;
          if (v827)
            goto LABEL_1216;
          v1162 = (void **)(v382 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
          break;
        default:
          goto LABEL_1706;
      }
LABEL_1171:
      v735 = (_QWORD *)v382;
      v759 = 0x1020C405E66F15BLL;
      goto LABEL_1215;
    case 6:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_699;
        case 2:
          v439 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v449 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v449, (uint64_t)*a2);
          *a2 = v449;
          *v449 = 1;
          do
          {
            v450 = __ldaxr(*(unint64_t **)&v439);
            v442 = --v450 == 0;
          }
          while (__stlxr(v450, *(unint64_t **)&v439));
          goto LABEL_1024;
        case 3:
          v557 = *a2;
          if (**a2 == 1)
            goto LABEL_699;
          v622 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v622, (uint64_t)*a2);
          *a2 = v622;
          *v622 = 1;
          do
          {
            v623 = __ldaxr(v557);
            v560 = --v623 == 0;
          }
          while (__stlxr(v623, v557));
          goto LABEL_914;
        case 4:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v828 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v828, (uint64_t)*a2);
          *a2 = v828;
          *v828 = 1;
          do
          {
            v829 = __ldaxr(*(unint64_t **)&v706);
            v769 = --v829 == 0;
          }
          while (__stlxr(v829, *(unint64_t **)&v706));
          goto LABEL_1175;
        case 5:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v772 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v772, (uint64_t)*a2);
          *a2 = v772;
          *v772 = 1;
          do
          {
            v773 = __ldaxr(*(unint64_t **)&v706);
            v709 = --v773 == 0;
          }
          while (__stlxr(v773, *(unint64_t **)&v706));
          goto LABEL_1138;
        case 8:
          v788 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v830 = operator new();
          v831 = *(double *)a2;
          *(_QWORD *)v830 = **a2;
          *(_QWORD *)(v830 + 8) = *(_QWORD *)(*(_QWORD *)&v831 + 8);
          v832 = *(_QWORD *)(*(_QWORD *)&v831 + 16);
          *(_QWORD *)(v830 + 16) = v832;
          if (v832)
          {
            v833 = (unsigned int *)(v832 + 8);
            do
              v834 = __ldxr(v833);
            while (__stxr(v834 + 1, v833));
          }
          v835 = *(_OWORD *)(*(_QWORD *)&v831 + 24);
          v836 = *(_OWORD *)(*(_QWORD *)&v831 + 40);
          *(_OWORD *)(v830 + 56) = *(_OWORD *)(*(_QWORD *)&v831 + 56);
          *(_OWORD *)(v830 + 40) = v836;
          *(_OWORD *)(v830 + 24) = v835;
          *a2 = (_QWORD *)v830;
          *(_QWORD *)v830 = 1;
          do
          {
            v837 = __ldaxr(*(unint64_t **)&v788);
            v797 = --v837 == 0;
          }
          while (__stlxr(v837, *(unint64_t **)&v788));
          goto LABEL_1185;
        case 9:
          v642 = *a2;
          if (**a2 == 1)
            goto LABEL_699;
          v713 = (_QWORD *)operator new();
          v714 = (uint64_t)(*a2 + 1);
          *v713 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v713 + 1, v714);
          *a2 = v713;
          *v713 = 1;
          do
          {
            v715 = __ldaxr(v642);
            v646 = --v715 == 0;
          }
          while (__stlxr(v715, v642));
          goto LABEL_1018;
        default:
          goto LABEL_1706;
      }
    case 7:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_699;
        case 2:
          v439 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v440 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v440, (uint64_t)*a2);
          *a2 = v440;
          *v440 = 1;
          do
          {
            v441 = __ldaxr(*(unint64_t **)&v439);
            v442 = --v441 == 0;
          }
          while (__stlxr(v441, *(unint64_t **)&v439));
LABEL_1024:
          if (!v442)
            goto LABEL_699;
          if (*(char *)(*(_QWORD *)&v439 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v439 + 8));
          v625 = v439;
          v626 = 0x1012C404EF22A49;
          goto LABEL_1189;
        case 3:
          v557 = *a2;
          if (**a2 == 1)
            goto LABEL_699;
          v558 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v558, (uint64_t)*a2);
          *a2 = v558;
          *v558 = 1;
          do
          {
            v559 = __ldaxr(v557);
            v560 = --v559 == 0;
          }
          while (__stlxr(v559, v557));
LABEL_914:
          if (!v560)
            goto LABEL_699;
          v624 = (void *)v557[1];
          if (v624)
          {
            v557[2] = (unint64_t)v624;
            operator delete(v624);
          }
          v625 = *(double *)&v557;
          v626 = 0x1080C409938AC02;
          goto LABEL_1189;
        case 4:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v770 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v770, (uint64_t)*a2);
          *a2 = v770;
          *v770 = 1;
          do
          {
            v771 = __ldaxr(*(unint64_t **)&v706);
            v769 = --v771 == 0;
          }
          while (__stlxr(v771, *(unint64_t **)&v706));
LABEL_1175:
          if (!v769)
            goto LABEL_699;
          v1162 = (void **)(*(_QWORD *)&v706 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1178;
        case 5:
          v706 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v707 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v707, (uint64_t)*a2);
          *a2 = v707;
          *v707 = 1;
          do
          {
            v708 = __ldaxr(*(unint64_t **)&v706);
            v709 = --v708 == 0;
          }
          while (__stlxr(v708, *(unint64_t **)&v706));
LABEL_1138:
          if (!v709)
            goto LABEL_699;
          v1162 = (void **)(*(_QWORD *)&v706 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1178:
          v625 = v706;
          v626 = 0x1020C405E66F15BLL;
          goto LABEL_1189;
        case 8:
          v788 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_699;
          v789 = operator new();
          v790 = *(double *)a2;
          *(_QWORD *)v789 = **a2;
          *(_QWORD *)(v789 + 8) = *(_QWORD *)(*(_QWORD *)&v790 + 8);
          v791 = *(_QWORD *)(*(_QWORD *)&v790 + 16);
          *(_QWORD *)(v789 + 16) = v791;
          if (v791)
          {
            v792 = (unsigned int *)(v791 + 8);
            do
              v793 = __ldxr(v792);
            while (__stxr(v793 + 1, v792));
          }
          v794 = *(_OWORD *)(*(_QWORD *)&v790 + 24);
          v795 = *(_OWORD *)(*(_QWORD *)&v790 + 40);
          *(_OWORD *)(v789 + 56) = *(_OWORD *)(*(_QWORD *)&v790 + 56);
          *(_OWORD *)(v789 + 40) = v795;
          *(_OWORD *)(v789 + 24) = v794;
          *a2 = (_QWORD *)v789;
          *(_QWORD *)v789 = 1;
          do
          {
            v796 = __ldaxr(*(unint64_t **)&v788);
            v797 = --v796 == 0;
          }
          while (__stlxr(v796, *(unint64_t **)&v788));
LABEL_1185:
          if (!v797)
            goto LABEL_699;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v788 + 16));
          v625 = v788;
          v716 = -235920773;
          goto LABEL_1188;
        case 9:
          v642 = *a2;
          if (**a2 == 1)
            goto LABEL_699;
          v643 = (_QWORD *)operator new();
          v644 = (uint64_t)(*a2 + 1);
          *v643 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v643 + 1, v644);
          *a2 = v643;
          *v643 = 1;
          do
          {
            v645 = __ldaxr(v642);
            v646 = --v645 == 0;
          }
          while (__stlxr(v645, v642));
LABEL_1018:
          if (!v646)
            goto LABEL_699;
          v625 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v642));
          v716 = 2071181815;
LABEL_1188:
          v626 = v716 | 0x1030C4000000000;
LABEL_1189:
          MEMORY[0x219A19A08](*(_QWORD *)&v625, v626);
LABEL_699:
          turi::flexible_type_fail(0);
          break;
        default:
          goto LABEL_1706;
      }
      goto LABEL_1216;
    case 8:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_1207;
        case 2:
          v451 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v452 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v452, (uint64_t)*a2);
          *a2 = v452;
          *v452 = 1;
          do
          {
            v453 = __ldaxr(*(unint64_t **)&v451);
            v454 = v453 - 1;
          }
          while (__stlxr(v454, *(unint64_t **)&v451));
          if (v454)
            goto LABEL_1207;
          if (*(char *)(*(_QWORD *)&v451 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v451 + 8));
          v455 = v451;
          v456 = 0x1012C404EF22A49;
          goto LABEL_1206;
        case 3:
          v633 = *a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v634 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v634, (uint64_t)*a2);
          *a2 = v634;
          *v634 = 1;
          do
          {
            v635 = __ldaxr(v633);
            v636 = v635 - 1;
          }
          while (__stlxr(v636, v633));
          if (v636)
            goto LABEL_1207;
          v637 = (void *)v633[1];
          if (v637)
          {
            v633[2] = (unint64_t)v637;
            operator delete(v637);
          }
          v455 = *(double *)&v633;
          v456 = 0x1080C409938AC02;
          goto LABEL_1206;
        case 4:
          v798 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v838 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v838, (uint64_t)*a2);
          *a2 = v838;
          *v838 = 1;
          do
          {
            v839 = __ldaxr(*(unint64_t **)&v798);
            v840 = v839 - 1;
          }
          while (__stlxr(v840, *(unint64_t **)&v798));
          if (v840)
            goto LABEL_1207;
          v1162 = (void **)(*(_QWORD *)&v798 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1196;
        case 5:
          v798 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v799 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v799, (uint64_t)*a2);
          *a2 = v799;
          *v799 = 1;
          do
          {
            v800 = __ldaxr(*(unint64_t **)&v798);
            v801 = v800 - 1;
          }
          while (__stlxr(v801, *(unint64_t **)&v798));
          if (v801)
            goto LABEL_1207;
          v1162 = (void **)(*(_QWORD *)&v798 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1196:
          v455 = v798;
          v456 = 0x1020C405E66F15BLL;
          goto LABEL_1206;
        case 8:
          v841 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v842 = operator new();
          v843 = *(double *)a2;
          *(_QWORD *)v842 = **a2;
          *(_QWORD *)(v842 + 8) = *(_QWORD *)(*(_QWORD *)&v843 + 8);
          v844 = *(_QWORD *)(*(_QWORD *)&v843 + 16);
          *(_QWORD *)(v842 + 16) = v844;
          if (v844)
          {
            v845 = (unsigned int *)(v844 + 8);
            do
              v846 = __ldxr(v845);
            while (__stxr(v846 + 1, v845));
          }
          v847 = *(_OWORD *)(*(_QWORD *)&v843 + 24);
          v848 = *(_OWORD *)(*(_QWORD *)&v843 + 40);
          *(_OWORD *)(v842 + 56) = *(_OWORD *)(*(_QWORD *)&v843 + 56);
          *(_OWORD *)(v842 + 40) = v848;
          *(_OWORD *)(v842 + 24) = v847;
          *a2 = (_QWORD *)v842;
          *(_QWORD *)v842 = 1;
          do
          {
            v849 = __ldaxr(*(unint64_t **)&v841);
            v850 = v849 - 1;
          }
          while (__stlxr(v850, *(unint64_t **)&v841));
          if (v850)
            goto LABEL_1207;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v841 + 16));
          v455 = v841;
          v742 = -235920773;
          goto LABEL_1205;
        case 9:
          v737 = *a2;
          if (**a2 == 1)
            goto LABEL_1207;
          v738 = (_QWORD *)operator new();
          v739 = (uint64_t)(*a2 + 1);
          *v738 = **a2;
          turi::flexible_type_impl::ndarray<double>::ndarray(v738 + 1, v739);
          *a2 = v738;
          *v738 = 1;
          do
          {
            v740 = __ldaxr(v737);
            v741 = v740 - 1;
          }
          while (__stlxr(v741, v737));
          if (v741)
            goto LABEL_1207;
          v455 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v737));
          v742 = 2071181815;
LABEL_1205:
          v456 = v742 | 0x1030C4000000000;
LABEL_1206:
          MEMORY[0x219A19A08](*(_QWORD *)&v455, v456);
LABEL_1207:
          turi::flexible_type_fail(0);
          do
          {
LABEL_1208:
            v851 = __ldaxr((unint64_t *)v382);
            v852 = v851 - 1;
          }
          while (__stlxr(v852, (unint64_t *)v382));
          if (v852)
            v853 = 1;
          else
            v853 = v382 == 0;
          if (v853)
            goto LABEL_1216;
          boost::detail::shared_count::~shared_count((unsigned int **)(v382 + 16));
          v735 = (_QWORD *)v382;
          v736 = -235920773;
          break;
        default:
          goto LABEL_1706;
      }
LABEL_1214:
      v759 = v736 | 0x1030C4000000000;
LABEL_1215:
      MEMORY[0x219A19A08](v735, v759);
      goto LABEL_1216;
    case 9:
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_1042;
        case 2:
          v420 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1042;
          v421 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v421, (uint64_t)*a2);
          *a2 = v421;
          *v421 = 1;
          do
          {
            v422 = __ldaxr(*(unint64_t **)&v420);
            v423 = v422 - 1;
          }
          while (__stlxr(v423, *(unint64_t **)&v420));
          if (v423)
            goto LABEL_1042;
          if (*(char *)(*(_QWORD *)&v420 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)&v420 + 8));
          v424 = v420;
          v425 = 0x1012C404EF22A49;
          goto LABEL_1041;
        case 3:
          v528 = *a2;
          if (**a2 == 1)
            goto LABEL_1042;
          v529 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v529, (uint64_t)*a2);
          *a2 = v529;
          *v529 = 1;
          do
          {
            v530 = __ldaxr(v528);
            v531 = v530 - 1;
          }
          while (__stlxr(v531, v528));
          if (v531)
            goto LABEL_1042;
          v532 = (void *)v528[1];
          if (v532)
          {
            v528[2] = (unint64_t)v532;
            operator delete(v532);
          }
          v424 = *(double *)&v528;
          v425 = 0x1080C409938AC02;
          goto LABEL_1041;
        case 4:
          v638 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1042;
          v710 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v710, (uint64_t)*a2);
          *a2 = v710;
          *v710 = 1;
          do
          {
            v711 = __ldaxr(*(unint64_t **)&v638);
            v712 = v711 - 1;
          }
          while (__stlxr(v712, *(unint64_t **)&v638));
          if (v712)
            goto LABEL_1042;
          v1162 = (void **)(*(_QWORD *)&v638 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1014;
        case 5:
          v638 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1042;
          v639 = (_QWORD *)operator new();
          std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v639, (uint64_t)*a2);
          *a2 = v639;
          *v639 = 1;
          do
          {
            v640 = __ldaxr(*(unint64_t **)&v638);
            v641 = v640 - 1;
          }
          while (__stlxr(v641, *(unint64_t **)&v638));
          if (v641)
            goto LABEL_1042;
          v1162 = (void **)(*(_QWORD *)&v638 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1014:
          v424 = v638;
          v425 = 0x1020C405E66F15BLL;
          goto LABEL_1041;
        case 8:
          v722 = *(double *)a2;
          if (**a2 == 1)
            goto LABEL_1042;
          v723 = operator new();
          v724 = *(double *)a2;
          *(_QWORD *)v723 = **a2;
          *(_QWORD *)(v723 + 8) = *(_QWORD *)(*(_QWORD *)&v724 + 8);
          v725 = *(_QWORD *)(*(_QWORD *)&v724 + 16);
          *(_QWORD *)(v723 + 16) = v725;
          if (v725)
          {
            v726 = (unsigned int *)(v725 + 8);
            do
              v727 = __ldxr(v726);
            while (__stxr(v727 + 1, v726));
          }
          v728 = *(_OWORD *)(*(_QWORD *)&v724 + 24);
          v729 = *(_OWORD *)(*(_QWORD *)&v724 + 40);
          *(_OWORD *)(v723 + 56) = *(_OWORD *)(*(_QWORD *)&v724 + 56);
          *(_OWORD *)(v723 + 40) = v729;
          *(_OWORD *)(v723 + 24) = v728;
          *a2 = (_QWORD *)v723;
          *(_QWORD *)v723 = 1;
          do
          {
            v730 = __ldaxr(*(unint64_t **)&v722);
            v731 = v730 - 1;
          }
          while (__stlxr(v731, *(unint64_t **)&v722));
          if (v731)
            goto LABEL_1042;
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v722 + 16));
          v424 = v722;
          v425 = 0x1030C40F1F0227BLL;
LABEL_1041:
          MEMORY[0x219A19A08](*(_QWORD *)&v424, v425);
LABEL_1042:
          turi::flexible_type_fail(0);
          do
          {
LABEL_1043:
            v732 = __ldaxr((unint64_t *)v382);
            v733 = v732 - 1;
          }
          while (__stlxr(v733, (unint64_t *)v382));
          if (v733)
            v734 = 1;
          else
            v734 = v382 == 0;
          if (v734)
            goto LABEL_1216;
          v735 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v382);
          v736 = 2071181815;
          goto LABEL_1214;
        case 9:
          v561 = *a2;
          if (**a2 != 1)
          {
            v562 = (_QWORD *)operator new();
            v563 = (uint64_t)(*a2 + 1);
            *v562 = **a2;
            turi::flexible_type_impl::ndarray<double>::ndarray(v562 + 1, v563);
            *a2 = v562;
            *v562 = 1;
            do
            {
              v564 = __ldaxr(v561);
              v565 = v564 - 1;
            }
            while (__stlxr(v565, v561));
            if (!v565)
            {
              v566 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v561);
              MEMORY[0x219A19A08](v566, 0x1030C407B73B9F7);
            }
          }
          v567 = *(double *)a2;
          v568 = *a2 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v568, v382 + 8))
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          v570 = *(uint64_t **)(*(_QWORD *)&v567 + 24);
          v569 = *(uint64_t **)(*(_QWORD *)&v567 + 32);
          if (v569 == v570 || !*v568)
            goto LABEL_1043;
          v571 = 1;
          do
          {
            v572 = *v570++;
            v571 *= v572;
          }
          while (v570 != v569);
          if (!v571)
            goto LABEL_966;
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v568);
          v573 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v567 + 32) - *(_QWORD *)(*(_QWORD *)&v567 + 24)) >> 3;
          v1161 = 0;
          std::vector<unsigned long>::vector(&v1162, v573, &v1161);
          v477 = v1162;
          v574 = v1163;
          break;
        default:
          goto LABEL_1706;
      }
      break;
    default:
      goto LABEL_1706;
  }
  while (2)
  {
    v575 = (char *)v574 - (char *)v477;
    if (v575)
    {
      v576 = 0;
      v577 = v575 >> 3;
      v578 = *(uint64_t **)(v382 + 48);
      if (v577 <= 1)
        v577 = 1;
      v579 = v477;
      v580 = v577;
      do
      {
        v582 = (uint64_t)*v579++;
        v581 = v582;
        v583 = *v578++;
        v576 += v583 * v581;
        --v580;
      }
      while (v580);
      v584 = 0;
      v585 = *(double *)(**(_QWORD **)(v382 + 8) + 8 * (*(_QWORD *)(v382 + 72) + v576));
      v586 = *(uint64_t **)(*(_QWORD *)&v567 + 48);
      do
      {
        v588 = (uint64_t)*v477++;
        v587 = v588;
        v589 = *v586++;
        v584 += v589 * v587;
        --v577;
      }
      while (v577);
    }
    else
    {
      v584 = 0;
      v585 = *(double *)(**(_QWORD **)(v382 + 8) + 8 * *(_QWORD *)(v382 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v568);
    *(double *)(**(_QWORD **)(*(_QWORD *)&v567 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v567 + 72) + v584)) = v585 + *(double *)(**(_QWORD **)(*(_QWORD *)&v567 + 8) + 8 * (*(_QWORD *)(*(_QWORD *)&v567 + 72) + v584));
    v477 = v1162;
    v574 = v1163;
    v590 = v1163 - v1162;
    v591 = v590 - 1;
    if ((char *)v1163 - (char *)v1162 < 1)
    {
LABEL_879:
      if (v591 < 0 || !v590)
        goto LABEL_964;
      continue;
    }
    break;
  }
  v592 = *(_QWORD *)(*(_QWORD *)&v567 + 24);
  v593 = (char *)v1162[v591] + 1;
  v1162[v591] = v593;
  if ((unint64_t)v593 < *(_QWORD *)(v592 + 8 * v591))
  {
LABEL_878:
    v590 = 1;
    goto LABEL_879;
  }
  v594 = (unint64_t *)&v477[v590 - 2];
  v595 = v592 - 16;
  while (1)
  {
    v596 = v590 - 1;
    v594[1] = 0;
    if (v590 - 1 <= 0)
      break;
    v597 = *v594 + 1;
    *v594-- = v597;
    v598 = *(_QWORD *)(v595 + 8 * v590--);
    if (v597 < v598)
    {
      v591 = v596 - 1;
      goto LABEL_878;
    }
  }
LABEL_964:
  if (v477)
  {
LABEL_965:
    v1163 = v477;
    operator delete(v477);
  }
LABEL_966:
  switch(v383)
  {
    case 2:
      goto LABEL_1073;
    case 3:
      goto LABEL_1115;
    case 4:
      goto LABEL_989;
    case 5:
      goto LABEL_1165;
    case 8:
      goto LABEL_1208;
    case 9:
      goto LABEL_1043;
    default:
      break;
  }
LABEL_1216:
  switch(BYTE4(v1165[1]))
  {
    case 2:
      v854 = v1165[0];
      do
      {
        v855 = __ldaxr(v854);
        v856 = v855 - 1;
      }
      while (__stlxr(v856, v854));
      if (!v856)
      {
        v857 = v1165[0];
        if (v1165[0])
        {
          if (*((char *)v1165[0] + 31) < 0)
            operator delete(*((void **)v1165[0] + 1));
          v858 = v857;
          v859 = 0x1012C404EF22A49;
          goto LABEL_1253;
        }
      }
      break;
    case 3:
      v868 = v1165[0];
      do
      {
        v869 = __ldaxr(v868);
        v870 = v869 - 1;
      }
      while (__stlxr(v870, v868));
      if (!v870)
      {
        v871 = v1165[0];
        if (v1165[0])
        {
          v872 = (void *)v1165[0][1];
          if (v872)
          {
            v1165[0][2] = v872;
            operator delete(v872);
          }
          v858 = v871;
          v859 = 0x1080C409938AC02;
          goto LABEL_1253;
        }
      }
      break;
    case 4:
      v860 = v1165[0];
      do
      {
        v861 = __ldaxr(v860);
        v862 = v861 - 1;
      }
      while (__stlxr(v862, v860));
      if (!v862)
      {
        v863 = v1165[0];
        if (v1165[0])
        {
          v1162 = (void **)(v1165[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1162);
          goto LABEL_1246;
        }
      }
      break;
    case 5:
      v873 = v1165[0];
      do
      {
        v874 = __ldaxr(v873);
        v875 = v874 - 1;
      }
      while (__stlxr(v875, v873));
      if (!v875)
      {
        v863 = v1165[0];
        if (v1165[0])
        {
          v1162 = (void **)(v1165[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1162);
LABEL_1246:
          v858 = v863;
          v859 = 0x1020C405E66F15BLL;
          goto LABEL_1253;
        }
      }
      break;
    case 8:
      v876 = v1165[0];
      do
      {
        v877 = __ldaxr(v876);
        v878 = v877 - 1;
      }
      while (__stlxr(v878, v876));
      if (!v878)
      {
        v879 = v1165[0];
        if (v1165[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v1165[0] + 2);
          v858 = v879;
          v867 = -235920773;
          goto LABEL_1252;
        }
      }
      break;
    case 9:
      v864 = v1165[0];
      do
      {
        v865 = __ldaxr(v864);
        v866 = v865 - 1;
      }
      while (__stlxr(v866, v864));
      if (!v866 && v1165[0])
      {
        v858 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v1165[0]);
        v867 = 2071181815;
LABEL_1252:
        v859 = v867 | 0x1030C4000000000;
LABEL_1253:
        MEMORY[0x219A19A08](v858, v859);
      }
      break;
    default:
      return;
  }
}

