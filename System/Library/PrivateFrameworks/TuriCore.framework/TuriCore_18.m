void sub_2185BCDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  uint64_t v42;
  uint64_t v43;

  MEMORY[0x219A19A08](v42, 0x1012C404EF22A49);
  if (*(char *)(v43 - 201) < 0)
    operator delete(*(void **)(v43 - 224));
  *(_QWORD *)(v43 - 224) = &a12;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 224));
  xgboost_old::utils::FeatMap::~FeatMap((xgboost_old::utils::FeatMap *)&a15);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::metric_tracker::get_training_metrics(turi::supervised::xgboost::metric_tracker *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  char *v8;
  __int128 *v9;
  __int128 v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  std::string __p;
  uint64_t v25;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v4)
  {
    v7 = 0;
    v8 = (char *)this + 24;
    do
    {
      v9 = (__int128 *)(v4 + 24 * v7);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      v25 = a2;
      v11 = (_DWORD *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)v8, (const void **)&__p.__r_.__value_.__l.__data_);
      v12 = v11;
      v14 = a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = *a3;
        v17 = (v14 - *a3) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v20);
          v16 = *a3;
          v14 = a3[1];
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = *v12;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        *a3 = v22;
        a3[1] = v15;
        a3[2] = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v14 = *v11;
        v15 = v14 + 4;
      }
      a3[1] = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v7;
      v4 = *((_QWORD *)this + 9);
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 10) - v4) >> 3));
  }
}

void sub_2185BD7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::metric_tracker::get_validation_metrics(turi::supervised::xgboost::metric_tracker *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  std::string __p;
  uint64_t v24;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 9);
    if (*((_QWORD *)this + 10) != v5)
    {
      v7 = 0;
      do
      {
        v8 = (__int128 *)(v5 + 24 * v7);
        if (*((char *)v8 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
        }
        else
        {
          v9 = *v8;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
        }
        v24 = a2;
        v10 = (_DWORD *)std::map<std::pair<std::string,unsigned long>,float>::at((uint64_t)this + 48, (const void **)&__p.__r_.__value_.__l.__data_);
        v11 = v10;
        v13 = a3[1];
        v12 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v12)
        {
          v15 = *a3;
          v16 = (v13 - *a3) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v19);
            v15 = *a3;
            v13 = a3[1];
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = *v11;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          *a3 = v21;
          a3[1] = v14;
          a3[2] = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v13 = *v10;
          v14 = v13 + 4;
        }
        a3[1] = v14;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v7;
        v5 = *((_QWORD *)this + 9);
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 10) - v5) >> 3));
    }
  }
}

void sub_2185BD98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void turi::supervised::xgboost::xgboost_model::finalize_training(xgboost_old::learner::BoostLearner **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  char *v7;
  char **v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unsigned int *v14;
  char *v15;
  char **v16;
  _BYTE v17[40];
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  void *v24[2];
  char v25;
  _BYTE v26[40];
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  _QWORD v31[2];
  std::__shared_weak_count *v32;
  char **v33;
  char *v34[2];
  char **v35;
  char *v36[2];
  void **v37;

  turi::supervised::xgboost::trim_boost_learner(this + 208);
  v36[0] = 0;
  v36[1] = 0;
  v35 = v36;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v31, (const turi::gl_sframe *)(this + 154));
  std::string::basic_string[abi:ne180100]<0>(v29, "auto");
  std::string::basic_string[abi:ne180100]<0>(__p, "report");
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v26);
  turi::supervised::supervised_learning_model_base::api_evaluate((turi::supervised::supervised_learning_model_base *)this, (turi::gl_sframe *)v31, (uint64_t)v29, (uint64_t *)__p, (turi::gl_sarray *)v26, 0, (uint64_t **)&v33);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v26);
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  v31[0] = off_24D91E9C0;
  v2 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (uint64_t *)v33;
  if (v33 != v34)
  {
    do
    {
      std::operator+<char>();
      v37 = v24;
      v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v35, (const void **)v24, (uint64_t)&std::piecewise_construct, (_OWORD **)&v37);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, v5 + 7);
      if (v25 < 0)
        operator delete(v24[0]);
      v7 = (char *)v5[1];
      if (v7)
      {
        do
        {
          v8 = (char **)v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char **)v5[2];
          v9 = *v8 == (char *)v5;
          v5 = (uint64_t *)v8;
        }
        while (!v9);
      }
      v5 = (uint64_t *)v8;
    }
    while (v8 != v34);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v33, v34[0]);
  if (turi::gl_sframe::size((turi::gl_sframe *)(this + 157)))
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v22, (const turi::gl_sframe *)(this + 157));
    std::string::basic_string[abi:ne180100]<0>(v20, "auto");
    std::string::basic_string[abi:ne180100]<0>(v18, "report");
    turi::gl_sarray::gl_sarray((turi::gl_sarray *)v17);
    turi::supervised::supervised_learning_model_base::api_evaluate((turi::supervised::supervised_learning_model_base *)this, (turi::gl_sframe *)v22, (uint64_t)v20, (uint64_t *)v18, (turi::gl_sarray *)v17, 0, (uint64_t **)&v33);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v17);
    if (v19 < 0)
      operator delete(v18[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    v22[0] = off_24D91E9C0;
    v10 = v23;
    if (v23)
    {
      v11 = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (uint64_t *)v33;
    if (v33 != v34)
    {
      do
      {
        std::operator+<char>();
        v37 = v24;
        v14 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v35, (const void **)v24, (uint64_t)&std::piecewise_construct, (_OWORD **)&v37);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v14 + 14, v13 + 7);
        if (v25 < 0)
          operator delete(v24[0]);
        v15 = (char *)v13[1];
        if (v15)
        {
          do
          {
            v16 = (char **)v15;
            v15 = *(char **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (char **)v13[2];
            v9 = *v16 == (char *)v13;
            v13 = (uint64_t *)v16;
          }
          while (!v9);
        }
        v13 = (uint64_t *)v16;
      }
      while (v16 != v34);
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v33, v34[0]);
  }
  turi::ml_model_base::add_or_update_state((uint64_t)this, &v35);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v35, v36[0]);
}

void sub_2185BDD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a10);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  a27 = v46 + 16;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v47 - 104, *(char **)(v47 - 96));
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::train(turi::supervised::xgboost::xgboost_model *this)
{
  unsigned __int8 *v2;
  _BOOL4 v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unsigned int v33;
  double v34;
  char v35;
  size_t v36;
  unsigned int v37;
  double *v38;
  double *v39;
  unint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  unsigned int v47;
  double v48;
  uint64_t v49;
  unsigned int v50;
  turi::flexible_type_impl *v51;
  std::string::value_type *v52;
  std::string::size_type v53;
  int v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  __int128 v59;
  std::string::size_type v60;
  _QWORD *v61;
  _QWORD *v62;
  void **v63;
  _QWORD *v64;
  uint64_t v65;
  std::string *v66;
  __int128 v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  int *v123;
  file_logger *v124;
  file_logger *started;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  const std::locale::facet *v129;
  unsigned __int8 *v130;
  _BOOL4 v131;
  BOOL v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  unsigned int v161;
  double v162;
  char v163;
  size_t v164;
  unsigned int v165;
  double *v166;
  double *v167;
  unint64_t v168;
  double *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  double v173;
  double v174;
  unsigned int v175;
  double v176;
  uint64_t v177;
  unsigned int v178;
  turi::flexible_type_impl *v179;
  int v180;
  int v181;
  BOOL v182;
  unsigned int v183;
  uint64_t v184;
  __int128 v185;
  std::string::size_type v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  std::string::size_type v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  std::string::size_type v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  std::string::size_type v204;
  void *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::string::size_type v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *size;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *p_shared_owners;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  int *v229;
  __int128 v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t early_stopping_rounds;
  uint64_t v238;
  __int128 v239;
  char v240;
  _QWORD *v241;
  char v243;
  int v244;
  int v246;
  char *v247;
  _BYTE *v248;
  uint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  char **v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  int *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::string::size_type v271;
  char *v272;
  uint64_t v273;
  std::string::size_type v274;
  uint64_t v275;
  unsigned int *v276;
  unsigned int v277;
  __int128 v278;
  __int128 v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  std::string::size_type v283;
  _QWORD *v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t v288;
  std::string::size_type v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  std::string::size_type v296;
  void *v297;
  unint64_t *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  std::string::size_type v304;
  cppipc *v305;
  std::string::size_type v306;
  int is_random_forest;
  xgboost_old::learner::BoostLearner *v308;
  unint64_t v309;
  _BOOL4 v310;
  BOOL v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  turi::supervised::xgboost::early_stopping_checkpointer *v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  char v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  char **v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int *v344;
  unsigned int v345;
  __int128 v346;
  __int128 v347;
  _BYTE *v348;
  uint64_t v349;
  _BOOL4 v350;
  std::string *v351;
  __int128 v352;
  turi::unity_sframe *v353;
  uint64_t v354;
  unint64_t *v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  turi::unity_sframe *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  char **v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int *v392;
  unsigned int v393;
  __int128 v394;
  __int128 v395;
  std::runtime_error *v396;
  std::string *v397;
  __int128 v398;
  turi::unity_sframe *v399;
  uint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  void *v403;
  uint64_t v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  turi::unity_sframe *v419;
  uint64_t v420;
  int *v421;
  file_logger *v422;
  file_logger *v423;
  _QWORD *v424;
  uint64_t v425;
  _QWORD *v426;
  const std::locale::facet *v427;
  _QWORD *v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  int *v447;
  file_logger *v448;
  file_logger *v449;
  _QWORD *v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  const std::locale::facet *v455;
  _QWORD *v456;
  std::runtime_error *v457;
  std::string *v458;
  __int128 v459;
  std::runtime_error *v460;
  std::string *v461;
  __int128 v462;
  double v463;
  double v464;
  double v465;
  double v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  size_t v470;
  int v471;
  int v472;
  int v473;
  int v474;
  BOOL v475;
  char v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  size_t v480;
  int v481;
  int v482;
  int v483;
  int v484;
  char v485;
  std::runtime_error *v486;
  std::string *v487;
  __int128 v488;
  _QWORD *exception;
  int v490;
  std::string::value_type *__s;
  std::string::size_type __sz;
  std::string::size_type v493;
  char *v494;
  uint64_t v495;
  unint64_t v496;
  int v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  void *v502[2];
  char v503;
  xgboost_old::learner::BoostLearner *v504;
  std::__shared_weak_count *v505;
  uint64_t v506;
  uint64_t v507;
  void *v508[2];
  uint64_t v509;
  void *v510;
  void *v511;
  uint64_t v512;
  timeval v513;
  turi::supervised::xgboost::early_stopping_checkpointer *v514;
  std::__shared_weak_count *v515;
  __int128 v516;
  std::string v517;
  uint64_t v518[2];
  xgboost_old::learner::DMatrix *v519;
  std::__shared_weak_count *v520;
  uint64_t v521;
  uint64_t v522;
  xgboost_old::learner::DMatrix *v523;
  std::__shared_weak_count *v524;
  std::string v525;
  _DWORD v526[2];
  std::string v527;
  std::string v528;
  _DWORD v529[2];
  uint64_t v530;
  _QWORD v531[3];
  size_t v532[3];
  size_t __idx;
  size_t v534;
  uint64_t v535;
  size_t v536;
  std::string v537;
  _BYTE __str[32];
  __int128 v539;
  __int128 v540;
  std::string v541;
  char *v542[3];
  char *v543[3];
  uint64_t v544;
  std::string __p;
  uint64_t v546;
  unint64_t v547[2];
  void *v548;
  pthread_mutex_t v549[2];
  pthread_mutex_t v550[5];
  char v551;
  BOOL v552;
  uint64_t v553[3];
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  _BYTE v557[32];
  __int128 v558;
  __int128 v559;
  std::string v560;
  uint64_t v561;

  v561 = *MEMORY[0x24BDAC8D0];
  v530 = 0xFFFFFFFFLL;
  if ((*((_QWORD *)this + 163) - *((_QWORD *)this + 162)) >> 32)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v530;
    turi::supervised::xgboost::xgboost_model::train(void)::$_0::operator()();
  }
  *(_DWORD *)((char *)v529 + 3) = 0;
  v529[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__str, "resume_from_checkpoint");
  v494 = (char *)this + 224;
  if (turi::option_manager::is_option((uint64_t)this + 224, (const void **)__str))
  {
    std::string::basic_string[abi:ne180100]<0>(&v541, "resume_from_checkpoint");
    v2 = (unsigned __int8 *)turi::option_manager::value((uint64_t)v494, (const void **)&v541.__r_.__value_.__l.__data_);
    switch(byte_254FF5784)
    {
      case 0:
        v3 = 0;
        switch(v2[12])
        {
          case 0u:
            v4 = *(_QWORD *)v2 == turi::FLEX_UNDEFINED;
            goto LABEL_53;
          case 1u:
            v48 = *(double *)v2;
            v49 = turi::FLEX_UNDEFINED;
            goto LABEL_789;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            v55 = *((_DWORD *)v2 + 2);
            v56 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v2 << 8) >> 8;
            goto LABEL_779;
          default:
            goto LABEL_854;
        }
      case 1:
        v3 = 0;
        switch(v2[12])
        {
          case 0u:
            v48 = *(double *)&turi::FLEX_UNDEFINED;
            v49 = *(_QWORD *)v2;
LABEL_789:
            v4 = v48 == (double)v49;
            goto LABEL_53;
          case 1u:
            v3 = *(double *)v2 == *(double *)&turi::FLEX_UNDEFINED;
            goto LABEL_61;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            v463 = *(double *)&turi::FLEX_UNDEFINED;
            v464 = (double)*((int *)v2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v2 << 8) >> 8);
            goto LABEL_792;
          default:
            goto LABEL_854;
        }
      case 2:
        v3 = 0;
        v33 = v2[12];
        if (v33 - 3 < 7 || v33 < 2)
          goto LABEL_61;
        if (v33 != 2)
          goto LABEL_854;
        v34 = *(double *)v2;
        v35 = *(_BYTE *)(*(_QWORD *)v2 + 31);
        if (v35 < 0)
          v36 = *(_QWORD *)(*(_QWORD *)&v34 + 16);
        else
          v36 = *(unsigned __int8 *)(*(_QWORD *)v2 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v467 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v467 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v36 != v467)
          goto LABEL_60;
        v468 = (_QWORD *)(*(_QWORD *)&v34 + 8);
        if (v35 < 0)
          v468 = (_QWORD *)*v468;
        v469 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
          v469 = (_QWORD *)*v469;
        if (v35 < 0)
        {
          v4 = memcmp(v468, v469, v36) == 0;
LABEL_53:
          v3 = v4;
        }
        else
        {
          if (!v36)
            goto LABEL_826;
          v470 = v36 - 1;
          do
          {
            v472 = *(unsigned __int8 *)v468;
            v468 = (_QWORD *)((char *)v468 + 1);
            v471 = v472;
            v474 = *(unsigned __int8 *)v469;
            v469 = (_QWORD *)((char *)v469 + 1);
            v473 = v474;
            v475 = v470-- != 0;
            v476 = v475;
            v3 = v471 == v473;
          }
          while (v471 == v473 && (v476 & 1) != 0);
        }
        goto LABEL_61;
      case 3:
        v37 = v2[12];
        if (v37 > 9)
          goto LABEL_854;
        if (v37 != 3)
          goto LABEL_60;
        v38 = *(double **)(*(_QWORD *)v2 + 8);
        v39 = *(double **)(*(_QWORD *)v2 + 16);
        v40 = v39 - v38;
        v41 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v40 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v41) >> 3)
          goto LABEL_60;
        if (v39 == v38)
          goto LABEL_826;
        if (v40 <= 1)
          v42 = 1;
        else
          v42 = v39 - v38;
        if (*v38 != *v41)
          goto LABEL_60;
        v43 = 1;
        do
        {
          v44 = v43;
          if (v42 == v43)
            break;
          v45 = v38[v43];
          v46 = v41[v43++];
        }
        while (v45 == v46);
        v3 = v44 >= v40;
        goto LABEL_61;
      case 4:
        v6 = v2[12];
        if (v6 > 9)
          goto LABEL_854;
        if (v6 != 4)
          goto LABEL_60;
        v7 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v537, (uint64_t *)(*(_QWORD *)v2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_784;
      case 5:
        v50 = v2[12];
        if (v50 > 9)
          goto LABEL_854;
        if (v50 != 5)
          goto LABEL_60;
        v7 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v537, (uint64_t **)(*(_QWORD *)v2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_784;
      case 6:
        v3 = 0;
        switch(v2[12])
        {
          case 0u:
            v55 = dword_254FF5780;
            v56 = *(_QWORD *)v2 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_779:
            v4 = v56 && v55 == 0;
            goto LABEL_53;
          case 1u:
            v464 = *(double *)v2;
            v463 = (double)dword_254FF5780 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_792:
            v3 = vabdd_f64(v464, v463) < 0.0000005;
            goto LABEL_61;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_61;
          case 6u:
            v4 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)v2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v2 + 2) == dword_254FF5780;
            goto LABEL_53;
          default:
            goto LABEL_854;
        }
      case 7:
        v47 = v2[12];
        if (v47 >= 0xA)
          goto LABEL_854;
        v4 = v47 == 7;
        goto LABEL_53;
      case 8:
        v3 = 0;
        v57 = v2[12];
        if (v57 < 8 || v57 == 9)
          goto LABEL_61;
        if (v57 != 8)
          goto LABEL_854;
        v7 = turi::image_type::operator==(*(_QWORD *)v2 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_784:
        v3 = v7;
        goto LABEL_61;
      case 9:
        v8 = v2[12];
        if (v8 < 9)
          goto LABEL_60;
        if (v8 != 9)
        {
LABEL_854:
          turi::flexible_type_fail(0);
LABEL_861:
          __break(1u);
          return;
        }
        v9 = turi::FLEX_UNDEFINED;
        v10 = *(_QWORD **)v2;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v2)
          goto LABEL_826;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v10 + 1), turi::FLEX_UNDEFINED + 8))
        {
LABEL_60:
          v3 = 0;
          goto LABEL_61;
        }
        v12 = (char *)v10[3];
        v11 = (char *)v10[4];
        v13 = v11 - v12;
        if (v11 == v12)
          goto LABEL_826;
        if (!v10[1])
          goto LABEL_826;
        v14 = 1;
        do
        {
          v15 = *(_QWORD *)v12;
          v12 += 8;
          v14 *= v15;
        }
        while (v12 != v11);
        if (!v14)
        {
LABEL_826:
          v3 = 1;
          goto LABEL_61;
        }
        *(_QWORD *)v557 = 0;
        std::vector<unsigned long>::vector(&__p, v13 >> 3, v557);
        break;
      default:
        goto LABEL_854;
    }
    while (1)
    {
      v16 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
        v25 = 0;
        v26 = *(double *)(*(_QWORD *)v10[1] + 8 * v10[9]);
      }
      else
      {
        v17 = 0;
        v18 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        v19 = (uint64_t *)v10[6];
        if (v18 <= 1)
          v18 = 1;
        v20 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        v21 = v18;
        do
        {
          v23 = *v20++;
          v22 = v23;
          v24 = *v19++;
          v17 += v24 * v22;
          --v21;
        }
        while (v21);
        v25 = 0;
        v26 = *(double *)(*(_QWORD *)v10[1] + 8 * (v10[9] + v17));
        v27 = *(uint64_t **)(v9 + 48);
        v28 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        do
        {
          v30 = *v28++;
          v29 = v30;
          v31 = *v27++;
          v25 += v31 * v29;
          --v18;
        }
        while (v18);
      }
      v32 = *(double *)(**(_QWORD **)(v9 + 8) + 8 * (*(_QWORD *)(v9 + 72) + v25));
      v3 = v26 == v32;
      if (v26 != v32)
        break;
      if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v10 + 1), (uint64_t *)&__p))
      {
        v16 = (void *)__p.__r_.__value_.__r.__words[0];
        break;
      }
    }
    if (v16)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
      operator delete(v16);
    }
LABEL_61:
    v5 = !v3;
    if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v541.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = 0;
  }
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (!v5)
  {
    v52 = 0;
    v53 = 0;
    v54 = 0;
    goto LABEL_192;
  }
  std::string::basic_string[abi:ne180100]<0>(&v541, "resume_from_checkpoint");
  v51 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)v494, (const void **)&v541.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v51 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_82;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_82:
      __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
      v60 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                  + 64);
      __p.__r_.__value_.__r.__words[2] = v60;
      v546 = MEMORY[0x24BEDB848] + 16;
      if (v549[0].__opaque[7] < 0)
        operator delete(v548);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v549[0].__opaque[24]);
      break;
    case 2:
      v58 = *(_QWORD *)v51;
      if (*(char *)(*(_QWORD *)v51 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
      }
      else
      {
        v59 = *(_OWORD *)(v58 + 8);
        *(_QWORD *)&__str[16] = *(_QWORD *)(v58 + 24);
        *(_OWORD *)__str = v59;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v51 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v51 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v51 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v51, (std::string *)__str);
      break;
    case 7:
      memset(__str, 0, 24);
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v51 + 8));
      break;
    default:
      turi::flexible_type_fail(0);
      goto LABEL_861;
  }
  v53 = *(_QWORD *)&__str[8];
  v52 = *(std::string::value_type **)__str;
  v529[0] = *(_DWORD *)&__str[16];
  *(_DWORD *)((char *)v529 + 3) = *(_DWORD *)&__str[19];
  v54 = __str[23];
  __str[23] = 0;
  __str[0] = 0;
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v541.__r_.__value_.__l.__data_);
    if ((v54 & 0x80000000) == 0)
      goto LABEL_91;
LABEL_93:
    std::string::__init_copy_ctor_external(&v528, v52, v53);
    goto LABEL_94;
  }
  if (v54 < 0)
    goto LABEL_93;
LABEL_91:
  v528.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  v528.__r_.__value_.__l.__size_ = v53;
  LODWORD(v528.__r_.__value_.__r.__words[2]) = v529[0];
  *(_DWORD *)((char *)&v528.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v529 + 3);
  *((_BYTE *)&v528.__r_.__value_.__s + 23) = v54;
LABEL_94:
  turi::sanitize_url((__n128 *)&v528, (__n128 *)&__p);
  if (SHIBYTE(v528.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v528.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__str, "resume_from_checkpoint");
  *(_QWORD *)&v557[5] = 0x200000000000000;
  *(_QWORD *)v557 = 0;
  v61 = (_QWORD *)operator new();
  v62 = v61;
  *v61 = 0;
  v61[1] = 0;
  v63 = (void **)(v61 + 1);
  v61[2] = 0;
  v61[3] = 0;
  *(_QWORD *)v557 = v61;
  *v61 = 1;
  switch(v557[12])
  {
    case 2:
      if (*v61 != 1)
      {
        v64 = (_QWORD *)operator new();
        v65 = *(_QWORD *)v557;
        *v64 = **(_QWORD **)v557;
        v66 = (std::string *)(v64 + 1);
        if (*(char *)(v65 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)(v65 + 8), *(_QWORD *)(v65 + 16));
        }
        else
        {
          v67 = *(_OWORD *)(v65 + 8);
          v64[3] = *(_QWORD *)(v65 + 24);
          *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
        }
        *(_QWORD *)v557 = v64;
        *v64 = 1;
        do
        {
          v95 = __ldaxr(v62);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v62));
        if (!v96)
        {
          v72 = 0x1012C404EF22A49;
          if ((*((char *)v62 + 31) & 0x80000000) == 0)
            goto LABEL_136;
          v81 = *v63;
          goto LABEL_135;
        }
      }
      break;
    case 3:
      if (*v61 != 1)
      {
        v77 = (_QWORD *)operator new();
        v78 = *(_QWORD *)v557;
        *v77 = **(_QWORD **)v557;
        v77[2] = 0;
        v77[3] = 0;
        v77[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v77 + 1, *(const void **)(v78 + 8), *(_QWORD *)(v78 + 16), (uint64_t)(*(_QWORD *)(v78 + 16) - *(_QWORD *)(v78 + 8)) >> 3);
        *(_QWORD *)v557 = v77;
        *v77 = 1;
        do
        {
          v79 = __ldaxr(v62);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v62));
        if (!v80)
        {
          v72 = 0x1080C409938AC02;
          v81 = *v63;
          if (*v63)
          {
            v62[2] = v81;
LABEL_135:
            operator delete(v81);
          }
          goto LABEL_136;
        }
      }
      break;
    case 4:
      if (*v61 != 1)
      {
        v68 = (_QWORD *)operator new();
        v69 = *(_QWORD *)v557;
        *v68 = **(_QWORD **)v557;
        v68[2] = 0;
        v68[3] = 0;
        v68[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v68 + 1, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 4);
        *(_QWORD *)v557 = v68;
        *v68 = 1;
        do
        {
          v70 = __ldaxr(v62);
          v71 = v70 - 1;
        }
        while (__stlxr(v71, v62));
        if (!v71)
        {
          v72 = 0x1020C405E66F15BLL;
          v541.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v541);
          goto LABEL_136;
        }
      }
      break;
    case 5:
      if (*v61 != 1)
      {
        v82 = (_QWORD *)operator new();
        v83 = *(_QWORD *)v557;
        *v82 = **(_QWORD **)v557;
        v82[2] = 0;
        v82[3] = 0;
        v82[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v82 + 1, *(uint64_t **)(v83 + 8), *(uint64_t **)(v83 + 16), (uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 5);
        *(_QWORD *)v557 = v82;
        *v82 = 1;
        do
        {
          v84 = __ldaxr(v62);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v62));
        if (!v85)
        {
          v72 = 0x1020C405E66F15BLL;
          v541.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v541);
          goto LABEL_136;
        }
      }
      break;
    case 8:
      if (*v61 != 1)
      {
        v86 = operator new();
        v87 = *(_QWORD *)v557;
        *(_QWORD *)v86 = **(_QWORD **)v557;
        *(_QWORD *)(v86 + 8) = *(_QWORD *)(v87 + 8);
        v88 = *(_QWORD *)(v87 + 16);
        *(_QWORD *)(v86 + 16) = v88;
        if (v88)
        {
          v89 = (unsigned int *)(v88 + 8);
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        v91 = *(_OWORD *)(v87 + 24);
        v92 = *(_OWORD *)(v87 + 40);
        *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
        *(_OWORD *)(v86 + 40) = v92;
        *(_OWORD *)(v86 + 24) = v91;
        *(_QWORD *)v557 = v86;
        *(_QWORD *)v86 = 1;
        do
        {
          v93 = __ldaxr(v62);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v62));
        if (!v94)
        {
          v72 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)v62 + 2);
          goto LABEL_136;
        }
      }
      break;
    case 9:
      if (*v61 != 1)
      {
        v73 = (_QWORD *)operator new();
        v74 = *(_QWORD *)v557 + 8;
        *v73 = **(_QWORD **)v557;
        turi::flexible_type_impl::ndarray<double>::ndarray(v73 + 1, v74);
        *(_QWORD *)v557 = v73;
        *v73 = 1;
        do
        {
          v75 = __ldaxr(v62);
          v76 = v75 - 1;
        }
        while (__stlxr(v76, v62));
        if (!v76)
        {
          v72 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v62);
LABEL_136:
          MEMORY[0x219A19A08](v62, v72);
        }
      }
      break;
    default:
      break;
  }
  std::string::operator=((std::string *)(*(_QWORD *)v557 + 8), &__p);
  turi::option_manager::set_option((uint64_t)v494, (uint64_t)__str, (uint64_t)v557);
  switch(v557[12])
  {
    case 2:
      v97 = *(unint64_t **)v557;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = *(_QWORD **)v557;
        if (*(_QWORD *)v557)
        {
          if (*(char *)(*(_QWORD *)v557 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v557 + 8));
          v101 = v100;
          v102 = 0x1012C404EF22A49;
          goto LABEL_174;
        }
      }
      break;
    case 3:
      v111 = *(unint64_t **)v557;
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
      {
        v114 = *(_QWORD **)v557;
        if (*(_QWORD *)v557)
        {
          v115 = *(void **)(*(_QWORD *)v557 + 8);
          if (v115)
          {
            *(_QWORD *)(*(_QWORD *)v557 + 16) = v115;
            operator delete(v115);
          }
          v101 = v114;
          v102 = 0x1080C409938AC02;
          goto LABEL_174;
        }
      }
      break;
    case 4:
      v103 = *(unint64_t **)v557;
      do
      {
        v104 = __ldaxr(v103);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v103));
      if (!v105)
      {
        v106 = *(_QWORD **)v557;
        if (*(_QWORD *)v557)
        {
          v541.__r_.__value_.__r.__words[0] = *(_QWORD *)v557 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v541);
          goto LABEL_167;
        }
      }
      break;
    case 5:
      v116 = *(unint64_t **)v557;
      do
      {
        v117 = __ldaxr(v116);
        v118 = v117 - 1;
      }
      while (__stlxr(v118, v116));
      if (!v118)
      {
        v106 = *(_QWORD **)v557;
        if (*(_QWORD *)v557)
        {
          v541.__r_.__value_.__r.__words[0] = *(_QWORD *)v557 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v541);
LABEL_167:
          v101 = v106;
          v102 = 0x1020C405E66F15BLL;
          goto LABEL_174;
        }
      }
      break;
    case 8:
      v119 = *(unint64_t **)v557;
      do
      {
        v120 = __ldaxr(v119);
        v121 = v120 - 1;
      }
      while (__stlxr(v121, v119));
      if (!v121)
      {
        v122 = *(_QWORD **)v557;
        if (*(_QWORD *)v557)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v557 + 16));
          v101 = v122;
          v110 = -235920773;
          goto LABEL_173;
        }
      }
      break;
    case 9:
      v107 = *(unint64_t **)v557;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109 && *(_QWORD *)v557)
      {
        v101 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)v557);
        v110 = 2071181815;
LABEL_173:
        v102 = v110 | 0x1030C4000000000;
LABEL_174:
        MEMORY[0x219A19A08](v101, v102);
      }
      break;
    default:
      break;
  }
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v123 = (int *)global_logger();
  if (v123[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v123))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v124 = (file_logger *)global_logger();
    started = file_logger::start_stream(v124, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "train", 1121, 1);
    v126 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v126 && *((_BYTE *)v126 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126 + 2, (uint64_t)"Resuming from checkpoint at ", 28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v527, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v527 = __p;
    v127 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v527);
    v128 = pthread_getspecific(*(_QWORD *)(v127 + 592));
    if (v128)
    {
      if (*((_BYTE *)v128 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v128 + *(_QWORD *)(v128[2] - 24) + 16));
        v129 = std::locale::use_facet((const std::locale *)__str, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v129->__vftable[2].~facet_0)(v129, 10);
        std::locale::~locale((std::locale *)__str);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v127);
        if (*(_DWORD *)(v127 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v527.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_192:
  *(_DWORD *)((char *)v526 + 3) = 0;
  v526[0] = 0;
  v490 = v54;
  std::string::basic_string[abi:ne180100]<0>(__str, "model_checkpoint_path");
  if (turi::option_manager::is_option((uint64_t)v494, (const void **)__str))
  {
    std::string::basic_string[abi:ne180100]<0>(&v541, "model_checkpoint_path");
    v130 = (unsigned __int8 *)turi::option_manager::value((uint64_t)v494, (const void **)&v541.__r_.__value_.__l.__data_);
    switch(byte_254FF5784)
    {
      case 0:
        v131 = 0;
        switch(v130[12])
        {
          case 0u:
            v132 = *(_QWORD *)v130 == turi::FLEX_UNDEFINED;
            goto LABEL_243;
          case 1u:
            v176 = *(double *)v130;
            v177 = turi::FLEX_UNDEFINED;
            goto LABEL_804;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_251;
          case 6u:
            v181 = *((_DWORD *)v130 + 2);
            v182 = turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v130 << 8) >> 8;
            goto LABEL_794;
          default:
            goto LABEL_859;
        }
      case 1:
        v131 = 0;
        switch(v130[12])
        {
          case 0u:
            v176 = *(double *)&turi::FLEX_UNDEFINED;
            v177 = *(_QWORD *)v130;
LABEL_804:
            v132 = v176 == (double)v177;
            goto LABEL_243;
          case 1u:
            v131 = *(double *)v130 == *(double *)&turi::FLEX_UNDEFINED;
            goto LABEL_251;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_251;
          case 6u:
            v465 = *(double *)&turi::FLEX_UNDEFINED;
            v466 = (double)*((int *)v130 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v130 << 8) >> 8);
            goto LABEL_807;
          default:
            goto LABEL_859;
        }
      case 2:
        v131 = 0;
        v161 = v130[12];
        if (v161 - 3 < 7 || v161 < 2)
          goto LABEL_251;
        if (v161 != 2)
          goto LABEL_859;
        v162 = *(double *)v130;
        v163 = *(_BYTE *)(*(_QWORD *)v130 + 31);
        if (v163 < 0)
          v164 = *(_QWORD *)(*(_QWORD *)&v162 + 16);
        else
          v164 = *(unsigned __int8 *)(*(_QWORD *)v130 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v477 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v477 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v164 != v477)
          goto LABEL_250;
        v478 = (_QWORD *)(*(_QWORD *)&v162 + 8);
        if (v163 < 0)
          v478 = (_QWORD *)*v478;
        v479 = (_QWORD *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
          v479 = (_QWORD *)*v479;
        if (v163 < 0)
        {
          v132 = memcmp(v478, v479, v164) == 0;
LABEL_243:
          v131 = v132;
        }
        else
        {
          if (!v164)
            goto LABEL_845;
          v480 = v164 - 1;
          do
          {
            v482 = *(unsigned __int8 *)v478;
            v478 = (_QWORD *)((char *)v478 + 1);
            v481 = v482;
            v484 = *(unsigned __int8 *)v479;
            v479 = (_QWORD *)((char *)v479 + 1);
            v483 = v484;
            v475 = v480-- != 0;
            v485 = v475;
            v131 = v481 == v483;
          }
          while (v481 == v483 && (v485 & 1) != 0);
        }
        goto LABEL_251;
      case 3:
        v165 = v130[12];
        if (v165 > 9)
          goto LABEL_859;
        if (v165 != 3)
          goto LABEL_250;
        v166 = *(double **)(*(_QWORD *)v130 + 8);
        v167 = *(double **)(*(_QWORD *)v130 + 16);
        v168 = v167 - v166;
        v169 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v168 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v169) >> 3)
          goto LABEL_250;
        if (v167 == v166)
          goto LABEL_845;
        if (v168 <= 1)
          v170 = 1;
        else
          v170 = v167 - v166;
        if (*v166 != *v169)
          goto LABEL_250;
        v171 = 1;
        do
        {
          v172 = v171;
          if (v170 == v171)
            break;
          v173 = v166[v171];
          v174 = v169[v171++];
        }
        while (v173 == v174);
        v131 = v172 >= v168;
        goto LABEL_251;
      case 4:
        v134 = v130[12];
        if (v134 > 9)
          goto LABEL_859;
        if (v134 != 4)
          goto LABEL_250;
        v135 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v537, (uint64_t *)(*(_QWORD *)v130 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_799;
      case 5:
        v178 = v130[12];
        if (v178 > 9)
          goto LABEL_859;
        if (v178 != 5)
          goto LABEL_250;
        v135 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v537, (uint64_t **)(*(_QWORD *)v130 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_799;
      case 6:
        v131 = 0;
        switch(v130[12])
        {
          case 0u:
            v181 = dword_254FF5780;
            v182 = *(_QWORD *)v130 == turi::FLEX_UNDEFINED << 8 >> 8;
LABEL_794:
            v132 = v182 && v181 == 0;
            goto LABEL_243;
          case 1u:
            v466 = *(double *)v130;
            v465 = (double)dword_254FF5780 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8);
LABEL_807:
            v131 = vabdd_f64(v466, v465) < 0.0000005;
            goto LABEL_251;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_251;
          case 6u:
            v132 = ((turi::FLEX_UNDEFINED ^ *(_QWORD *)v130) & 0xFFFFFFFFFFFFFFLL) == 0
                && *((_DWORD *)v130 + 2) == dword_254FF5780;
            goto LABEL_243;
          default:
            goto LABEL_859;
        }
      case 7:
        v175 = v130[12];
        if (v175 >= 0xA)
          goto LABEL_859;
        v132 = v175 == 7;
        goto LABEL_243;
      case 8:
        v131 = 0;
        v183 = v130[12];
        if (v183 < 8 || v183 == 9)
          goto LABEL_251;
        if (v183 != 8)
          goto LABEL_859;
        v135 = turi::image_type::operator==(*(_QWORD *)v130 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_799:
        v131 = v135;
        goto LABEL_251;
      case 9:
        v136 = v130[12];
        if (v136 < 9)
          goto LABEL_250;
        if (v136 != 9)
        {
LABEL_859:
          turi::flexible_type_fail(0);
          goto LABEL_861;
        }
        v137 = turi::FLEX_UNDEFINED;
        v138 = *(_QWORD **)v130;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v130)
          goto LABEL_845;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v138 + 1), turi::FLEX_UNDEFINED + 8))
        {
LABEL_250:
          v131 = 0;
          goto LABEL_251;
        }
        v140 = (char *)v138[3];
        v139 = (char *)v138[4];
        v141 = v139 - v140;
        if (v139 == v140)
          goto LABEL_845;
        if (!v138[1])
          goto LABEL_845;
        v142 = 1;
        do
        {
          v143 = *(_QWORD *)v140;
          v140 += 8;
          v142 *= v143;
        }
        while (v140 != v139);
        if (!v142)
        {
LABEL_845:
          v131 = 1;
          goto LABEL_251;
        }
        *(_QWORD *)v557 = 0;
        std::vector<unsigned long>::vector(&__p, v141 >> 3, v557);
        break;
      default:
        goto LABEL_859;
    }
    while (1)
    {
      v144 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
        v153 = 0;
        v154 = *(double *)(*(_QWORD *)v138[1] + 8 * v138[9]);
      }
      else
      {
        v145 = 0;
        v146 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
        v147 = (uint64_t *)v138[6];
        if (v146 <= 1)
          v146 = 1;
        v148 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        v149 = v146;
        do
        {
          v151 = *v148++;
          v150 = v151;
          v152 = *v147++;
          v145 += v152 * v150;
          --v149;
        }
        while (v149);
        v153 = 0;
        v154 = *(double *)(*(_QWORD *)v138[1] + 8 * (v138[9] + v145));
        v155 = *(uint64_t **)(v137 + 48);
        v156 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
        do
        {
          v158 = *v156++;
          v157 = v158;
          v159 = *v155++;
          v153 += v159 * v157;
          --v146;
        }
        while (v146);
      }
      v160 = *(double *)(**(_QWORD **)(v137 + 8) + 8 * (*(_QWORD *)(v137 + 72) + v153));
      v131 = v154 == v160;
      if (v154 != v160)
        break;
      if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v138 + 1), (uint64_t *)&__p))
      {
        v144 = (void *)__p.__r_.__value_.__r.__words[0];
        break;
      }
    }
    if (v144)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v144;
      operator delete(v144);
    }
LABEL_251:
    v133 = !v131;
    if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v541.__r_.__value_.__l.__data_);
  }
  else
  {
    v133 = 0;
  }
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    if (v133)
      goto LABEL_255;
LABEL_258:
    __s = 0;
    __sz = 0;
    v180 = 0;
    goto LABEL_328;
  }
  if (!v133)
    goto LABEL_258;
LABEL_255:
  std::string::basic_string[abi:ne180100]<0>(&v541, "model_checkpoint_path");
  v179 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)v494, (const void **)&v541.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v179 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_272;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_272:
      __p.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
      v186 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                  + 64);
      __p.__r_.__value_.__r.__words[2] = v186;
      v546 = MEMORY[0x24BEDB848] + 16;
      if (v549[0].__opaque[7] < 0)
        operator delete(v548);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v549[0].__opaque[24]);
      break;
    case 2:
      v184 = *(_QWORD *)v179;
      if (*(char *)(*(_QWORD *)v179 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v184 + 8), *(_QWORD *)(v184 + 16));
      }
      else
      {
        v185 = *(_OWORD *)(v184 + 8);
        *(_QWORD *)&__str[16] = *(_QWORD *)(v184 + 24);
        *(_OWORD *)__str = v185;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v179 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(_QWORD *)v179 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v179 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v179, (std::string *)__str);
      break;
    case 7:
      memset(__str, 0, 24);
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (_QWORD *)(*(_QWORD *)v179 + 8));
      break;
    default:
      goto LABEL_859;
  }
  __sz = *(_QWORD *)&__str[8];
  __s = *(std::string::value_type **)__str;
  v526[0] = *(_DWORD *)&__str[16];
  *(_DWORD *)((char *)v526 + 3) = *(_DWORD *)&__str[19];
  v180 = __str[23];
  __str[23] = 0;
  __str[0] = 0;
  if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v541.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model_checkpoint_path");
  if (v180 < 0)
  {
    std::string::__init_copy_ctor_external(&v525, __s, __sz);
  }
  else
  {
    v525.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
    v525.__r_.__value_.__l.__size_ = __sz;
    LODWORD(v525.__r_.__value_.__r.__words[2]) = v526[0];
    *(_DWORD *)((char *)&v525.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v526 + 3);
    *((_BYTE *)&v525.__r_.__value_.__s + 23) = v180;
  }
  turi::sanitize_url((__n128 *)&v525, (__n128 *)__str);
  turi::flexible_type::flexible_type<std::string>((uint64_t)&v541, (__int128 *)__str);
  turi::option_manager::set_option((uint64_t)v494, (uint64_t)&__p, (uint64_t)&v541);
  switch(v541.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v187 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v188 = __ldaxr(v187);
        v189 = v188 - 1;
      }
      while (__stlxr(v189, v187));
      if (!v189)
      {
        v190 = v541.__r_.__value_.__r.__words[0];
        if (v541.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v541.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v541.__r_.__value_.__r.__words[0] + 8));
          v191 = (_QWORD *)v190;
          v192 = 0x1012C404EF22A49;
          goto LABEL_321;
        }
      }
      break;
    case 3:
      v201 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        v204 = v541.__r_.__value_.__r.__words[0];
        if (v541.__r_.__value_.__r.__words[0])
        {
          v205 = *(void **)(v541.__r_.__value_.__r.__words[0] + 8);
          if (v205)
          {
            *(_QWORD *)(v541.__r_.__value_.__r.__words[0] + 16) = v205;
            operator delete(v205);
          }
          v191 = (_QWORD *)v204;
          v192 = 0x1080C409938AC02;
          goto LABEL_321;
        }
      }
      break;
    case 4:
      v193 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v194 = __ldaxr(v193);
        v195 = v194 - 1;
      }
      while (__stlxr(v195, v193));
      if (!v195)
      {
        v196 = v541.__r_.__value_.__r.__words[0];
        if (v541.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)v557 = v541.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
          goto LABEL_314;
        }
      }
      break;
    case 5:
      v206 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v207 = __ldaxr(v206);
        v208 = v207 - 1;
      }
      while (__stlxr(v208, v206));
      if (!v208)
      {
        v196 = v541.__r_.__value_.__r.__words[0];
        if (v541.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)v557 = v541.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
LABEL_314:
          v191 = (_QWORD *)v196;
          v192 = 0x1020C405E66F15BLL;
          goto LABEL_321;
        }
      }
      break;
    case 8:
      v209 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v210 = __ldaxr(v209);
        v211 = v210 - 1;
      }
      while (__stlxr(v211, v209));
      if (!v211)
      {
        v212 = v541.__r_.__value_.__r.__words[0];
        if (v541.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v541.__r_.__value_.__r.__words[0] + 16));
          v191 = (_QWORD *)v212;
          v200 = -235920773;
          goto LABEL_320;
        }
      }
      break;
    case 9:
      v197 = (unint64_t *)v541.__r_.__value_.__r.__words[0];
      do
      {
        v198 = __ldaxr(v197);
        v199 = v198 - 1;
      }
      while (__stlxr(v199, v197));
      if (!v199 && v541.__r_.__value_.__r.__words[0])
      {
        v191 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v541.__r_.__value_.__l.__data_);
        v200 = 2071181815;
LABEL_320:
        v192 = v200 | 0x1030C4000000000;
LABEL_321:
        MEMORY[0x219A19A08](v191, v192);
      }
      break;
    default:
      break;
  }
  v541.__r_.__value_.__r.__words[0] = 0;
  LODWORD(v541.__r_.__value_.__r.__words[1]) = 0;
  v541.__r_.__value_.__s.__data_[12] = 0;
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(v525.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v525.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_328:
  v523 = 0;
  v524 = 0;
  v521 = 0;
  v522 = 0;
  turi::supervised::xgboost::xgboost_model::_init_data(this, (uint64_t)&__p);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v523, (__int128 *)&__p);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&v521, (__int128 *)&__p.__r_.__value_.__r.__words[2]);
  v213 = (std::__shared_weak_count *)v546;
  if (v546)
  {
    v214 = (unint64_t *)(v546 + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v217 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v519 = v523;
  v520 = v524;
  if (v524)
  {
    p_shared_owners = (unint64_t *)&v524->__shared_owners_;
    do
      v220 = __ldxr(p_shared_owners);
    while (__stxr(v220 + 1, p_shared_owners));
  }
  v221 = (std::__shared_weak_count *)v522;
  v518[0] = v521;
  v518[1] = v522;
  if (v522)
  {
    v222 = (unint64_t *)(v522 + 8);
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
  }
  v497 = v180;
  if (v54 < 0)
  {
    std::string::__init_copy_ctor_external(&v517, v52, v53);
  }
  else
  {
    v517.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    v517.__r_.__value_.__l.__size_ = v53;
    LODWORD(v517.__r_.__value_.__r.__words[2]) = v529[0];
    *(_DWORD *)((char *)&v517.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v529 + 3);
    *((_BYTE *)&v517.__r_.__value_.__s + 23) = v54;
  }
  turi::supervised::xgboost::xgboost_model::_init_learner((xgboost_old::learner::BoostLearner **)this, (uint64_t *)&v519, v518, v5, (uint64_t)&v517, 0);
  if (SHIBYTE(v517.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v517.__r_.__value_.__l.__data_);
  if (v221)
  {
    v224 = (unint64_t *)&v221->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  v226 = v520;
  if (v520)
  {
    v227 = (unint64_t *)&v520->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v495 = v521;
  turi::supervised::xgboost::xgboost_model::_init_progress_printer(this, v521 != 0, (uint64_t)&__p);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v516);
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, "progress");
    *(_QWORD *)v557 = __str;
    v229 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__str, (uint64_t)&std::piecewise_construct, (_OWORD **)v557);
    turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get(v229 + 14, &v541);
    v230 = *(_OWORD *)&v541.__r_.__value_.__l.__data_;
    *(_OWORD *)&v541.__r_.__value_.__l.__data_ = 0uLL;
    v231 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
    v516 = v230;
    if (v231)
    {
      v232 = (unint64_t *)&v231->__shared_owners_;
      do
        v233 = __ldaxr(v232);
      while (__stlxr(v233 - 1, v232));
      if (!v233)
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v231);
      }
    }
    v234 = (std::__shared_weak_count *)v541.__r_.__value_.__l.__size_;
    if (v541.__r_.__value_.__l.__size_)
    {
      v235 = (unint64_t *)(v541.__r_.__value_.__l.__size_ + 8);
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
  turi::supervised::xgboost::metric_tracker::metric_tracker(&v541, (__int128 **)this);
  v514 = 0;
  v515 = 0;
  early_stopping_rounds = turi::supervised::xgboost::xgboost_model::_get_early_stopping_rounds(this, v495 != 0);
  if (early_stopping_rounds)
  {
    v238 = *((_QWORD *)this + 44);
    if (*(char *)(v238 - 1) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v238 - 24), *(_QWORD *)(v238 - 16));
    }
    else
    {
      v239 = *(_OWORD *)(v238 - 24);
      *(_QWORD *)&__str[16] = *(_QWORD *)(v238 - 8);
      *(_OWORD *)__str = v239;
    }
    v240 = __str[23];
    if ((__str[23] & 0x80000000) != 0)
    {
      if (*(_QWORD *)&__str[8] == 3 && **(_WORD **)__str == 30049 && *(_BYTE *)(*(_QWORD *)__str + 2) == 99)
        goto LABEL_394;
      if (*(_QWORD *)&__str[8] == 8)
      {
        v241 = *(_QWORD **)__str;
LABEL_387:
        if (*v241 != 0x7963617275636361)
          goto LABEL_388;
LABEL_394:
        v243 = 1;
        v244 = 0x800000;
LABEL_395:
        v246 = v244;
        v247 = (char *)operator new(0x68uLL);
        *((_QWORD *)v247 + 2) = 0;
        *(_QWORD *)v247 = &unk_24D94ABF8;
        *((_QWORD *)v247 + 1) = 0;
        *(_OWORD *)(v247 + 40) = 0u;
        *(_OWORD *)(v247 + 56) = 0u;
        *(_OWORD *)(v247 + 24) = 0u;
        *((_QWORD *)v247 + 9) = early_stopping_rounds + 1;
        v247[80] = v243;
        *((_QWORD *)v247 + 11) = 0;
        *((_QWORD *)v247 + 12) = early_stopping_rounds;
        *((_DWORD *)v247 + 21) = v246;
        v514 = (turi::supervised::xgboost::early_stopping_checkpointer *)(v247 + 24);
        v515 = (std::__shared_weak_count *)v247;
        if (v240 < 0)
          operator delete(*(void **)__str);
        goto LABEL_397;
      }
    }
    else
    {
      if (__str[23] == 3)
      {
        if (*(unsigned __int16 *)__str != 30049 || __str[2] != 99)
          goto LABEL_388;
        goto LABEL_394;
      }
      if (__str[23] == 8)
      {
        v241 = __str;
        goto LABEL_387;
      }
    }
LABEL_388:
    v243 = 0;
    v244 = 2139095039;
    goto LABEL_395;
  }
LABEL_397:
  gettimeofday(&v513, 0);
  gettimeofday(&v513, 0);
  std::string::basic_string[abi:ne180100]<0>(&v537, "max_iterations");
  if (turi::option_manager::is_option((uint64_t)v494, (const void **)&v537.__r_.__value_.__l.__data_))
  {
    std::string::basic_string[abi:ne180100]<0>(&v560, "max_iterations");
    v248 = (_BYTE *)turi::option_manager::value((uint64_t)v494, (const void **)&v560.__r_.__value_.__l.__data_);
    v496 = 0;
    switch(v248[12])
    {
      case 0:
        v249 = *(_QWORD *)v248;
        goto LABEL_420;
      case 1:
        v249 = (uint64_t)*(double *)v248;
        goto LABEL_420;
      case 2:
        v254 = *(_QWORD *)v248;
        v255 = (char **)(*(_QWORD *)v248 + 8);
        __idx = 0;
        v256 = (char *)v255;
        if (*(char *)(v254 + 31) < 0)
          v256 = *v255;
        std::string::basic_string[abi:ne180100]<0>(__str, v256);
        v496 = std::stoll((const std::string *)__str, &__idx, 10);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        if (*(char *)(v254 + 31) < 0)
          v257 = *(_QWORD *)(v254 + 16);
        else
          v257 = *(unsigned __int8 *)(v254 + 31);
        if (__idx != v257)
        {
          v457 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v458 = std::string::append((std::string *)v557, " cannot be interpreted as an integer");
          v459 = *(_OWORD *)&v458->__r_.__value_.__l.__data_;
          *(_QWORD *)&__str[16] = *((_QWORD *)&v458->__r_.__value_.__l + 2);
          *(_OWORD *)__str = v459;
          v458->__r_.__value_.__l.__size_ = 0;
          v458->__r_.__value_.__r.__words[2] = 0;
          v458->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v457, (const std::string *)__str);
          __cxa_throw(v457, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        goto LABEL_428;
      case 3:
        v250 = *(_QWORD *)v248;
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v250 + 8), *(_QWORD *)(v250 + 16), (uint64_t)(*(_QWORD *)(v250 + 16) - *(_QWORD *)(v250 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(_QWORD *)__str)
        {
          *(_QWORD *)&__str[8] = *(_QWORD *)__str;
          operator delete(*(void **)__str);
        }
        goto LABEL_427;
      case 4:
        v258 = *(_QWORD *)v248;
        memset(__str, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v258 + 8), *(uint64_t **)(v258 + 16), (uint64_t)(*(_QWORD *)(v258 + 16) - *(_QWORD *)(v258 + 8)) >> 4);
        turi::flexible_type_fail(0);
        *(_QWORD *)v557 = __str;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
        goto LABEL_427;
      case 5:
        v259 = *(_QWORD *)v248;
        memset(__str, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v259 + 8), *(uint64_t **)(v259 + 16), (uint64_t)(*(_QWORD *)(v259 + 16) - *(_QWORD *)(v259 + 8)) >> 5);
        turi::flexible_type_fail(0);
        *(_QWORD *)v557 = __str;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
        goto LABEL_427;
      case 6:
        v249 = (uint64_t)(*(_QWORD *)v248 << 8) >> 8;
LABEL_420:
        v496 = v249;
        goto LABEL_428;
      case 7:
        goto LABEL_428;
      case 8:
        v260 = *(_QWORD *)v248;
        v261 = *(_QWORD *)(*(_QWORD *)v248 + 16);
        *(_QWORD *)__str = *(_QWORD *)(*(_QWORD *)v248 + 8);
        *(_QWORD *)&__str[8] = v261;
        if (v261)
        {
          v262 = (unsigned int *)(v261 + 8);
          do
            v263 = __ldxr(v262);
          while (__stxr(v263 + 1, v262));
        }
        v264 = *(_OWORD *)(v260 + 24);
        v265 = *(_OWORD *)(v260 + 56);
        v539 = *(_OWORD *)(v260 + 40);
        v540 = v265;
        *(_OWORD *)&__str[16] = v264;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
        goto LABEL_427;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v248 + 8);
        turi::flexible_type_fail(0);
        if (*((_QWORD *)&v539 + 1))
        {
          *(_QWORD *)&v540 = *((_QWORD *)&v539 + 1);
          operator delete(*((void **)&v539 + 1));
        }
        if (*(_QWORD *)&__str[16])
        {
          *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
          operator delete(*(void **)&__str[16]);
        }
        v251 = *(std::__shared_weak_count **)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v252 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
LABEL_427:
        v496 = 0;
LABEL_428:
        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v560.__r_.__value_.__l.__data_);
        break;
      default:
LABEL_860:
        turi::flexible_type_fail(0);
        goto LABEL_861;
    }
  }
  else
  {
    v496 = 1;
  }
  if ((SHIBYTE(v537.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_432;
LABEL_435:
    v268 = 0;
LABEL_503:
    v305 = (cppipc *)turi::table_printer::print_header((turi::table_printer *)&__p);
    v306 = v180;
    if (v180 < 0)
      v306 = __sz;
    v493 = v306;
    do
    {
      if (v268 >= v496)
        break;
      if (cppipc::must_cancel(v305))
        turi::supervised::xgboost::xgboost_model::train(void)::$_1::operator()();
      is_random_forest = turi::supervised::xgboost::xgboost_model::is_random_forest(this);
      v308 = (xgboost_old::learner::BoostLearner *)*((_QWORD *)this + 208);
      if (is_random_forest)
        xgboost_old::learner::BoostLearner::UpdateOneIterKeepGpair(v308, v268, v523);
      else
        xgboost_old::learner::BoostLearner::UpdateOneIter(v308, v268, v523);
      v510 = 0;
      v511 = 0;
      v512 = 0;
      turi::supervised::xgboost::xgboost_model::xgboost_predict(this, (uint64_t)v523, 0, (uint64_t *)&v510, 1.0 / (double)(v268 + 1));
      turi::supervised::xgboost::fast_evaluate((uint64_t)&v510, (uint64_t)v523 + 16, &v541, (float **)v508);
      turi::supervised::xgboost::metric_tracker::track_training((uint64_t)&v541, v268, v508);
      if (v495)
      {
        memset(__str, 0, 24);
        turi::supervised::xgboost::xgboost_model::xgboost_predict(this, v521, 0, (uint64_t *)__str, 1.0 / (double)(v268 + 1));
        turi::supervised::xgboost::fast_evaluate((uint64_t)__str, v521 + 16, &v541, (float **)v557);
        if (v508[0])
        {
          v508[1] = v508[0];
          operator delete(v508[0]);
        }
        *(_OWORD *)v508 = *(_OWORD *)v557;
        v509 = *(_QWORD *)&v557[16];
        turi::supervised::xgboost::metric_tracker::track_validation((uint64_t)&v541, v268, v508);
        if (*(_QWORD *)__str)
        {
          *(_QWORD *)&__str[8] = *(_QWORD *)__str;
          operator delete(*(void **)__str);
        }
      }
      gettimeofday((timeval *)__str, 0);
      turi::supervised::xgboost::metric_tracker::make_progress_table_row((turi::supervised::xgboost::metric_tracker *)&v541, (double)(*(_DWORD *)&__str[8] - v513.tv_usec) / 1000000.0 + (double)(*(_QWORD *)__str - v513.tv_sec), (std::string *)v268, (std::string::size_type)&v506);
      *(_QWORD *)v557 = 0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 3);
      v537.__r_.__value_.__r.__words[0] = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
      if (*(_QWORD *)v557 != v537.__r_.__value_.__r.__words[0])
      {
        *(_QWORD *)__str = v557;
        *(_QWORD *)&__str[8] = &v537;
        turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
      }
      do
        v309 = __ldaxr(v547);
      while (__stlxr(v309 + 1, v547));
      v310 = turi::table_printer::register_tick((turi::table_printer *)&__p, v268 + 1, v309 + 1);
      v311 = v310;
      if (v310)
      {
        pthread_mutex_lock(v549);
        turi::table_printer::print_row<std::string>(&__p, &v506);
        pthread_mutex_unlock(v549);
      }
      if (v556 && !(v309 % v556))
      {
        pthread_mutex_lock(v550);
        v312 = v506;
        v313 = v507;
        if (!v551)
        {
          std::vector<turi::flexible_type>::resize(v553, 0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 3));
          v312 = v506;
          v313 = v507;
          v314 = 0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 3);
          if (v314 <= v555 - v554)
          {
            if (v314 < v555 - v554)
              v555 = v554 - 0x5555555555555555 * ((v507 - v506) >> 3);
          }
          else
          {
            std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v554, v314 - (v555 - v554));
            v312 = v506;
            v313 = v507;
          }
        }
        if (v313 != v312)
        {
          v315 = 0;
          v316 = 0;
          v317 = 0;
          do
          {
            turi::flexible_type::operator=<std::string>((uint64_t *)(v553[0] + v315), (const std::string *)(v312 + v316));
            *(_BYTE *)(v554 + v317++) = 0;
            v312 = v506;
            v316 += 24;
            v315 += 16;
          }
          while (v317 < 0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 3));
        }
        v54 = v490;
        turi::table_printer::track_progress_row((uint64_t)&__p, v553);
        v552 = v311;
        pthread_mutex_unlock(v550);
      }
      v318 = v514;
      if (!v514)
        goto LABEL_864;
      v319 = (std::__shared_weak_count *)*((_QWORD *)this + 209);
      v504 = (xgboost_old::learner::BoostLearner *)*((_QWORD *)this + 208);
      v505 = v319;
      if (v319)
      {
        v320 = (unint64_t *)&v319->__shared_owners_;
        do
          v321 = __ldxr(v320);
        while (__stxr(v321 + 1, v320));
      }
      turi::supervised::xgboost::metric_tracker::get_validation_metrics((turi::supervised::xgboost::metric_tracker *)&v541, v268, (char **)__str);
      turi::supervised::xgboost::early_stopping_checkpointer::add((uint64_t)v318, (void *)v268, &v504, *(float *)(*(_QWORD *)&__str[8] - 4));
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      v322 = v505;
      if (v505)
      {
        v323 = (unint64_t *)&v505->__shared_owners_;
        do
          v324 = __ldaxr(v323);
        while (__stlxr(v324 - 1, v323));
        if (!v324)
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
      }
      v325 = *((_QWORD *)v514 + 8);
      if (v268 - v325 >= *((_QWORD *)v514 + 9))
      {
        turi::supervised::xgboost::early_stopping_checkpointer::get_model_at_iteration(v514, v325, __str);
        std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 1664, (__int128 *)__str);
        v328 = *(std::__shared_weak_count **)&__str[8];
        v180 = v497;
        if (*(_QWORD *)&__str[8])
        {
          v329 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
            std::__shared_weak_count::__release_weak(v328);
          }
        }
        v331 = 0;
      }
      else
      {
LABEL_864:
        if (v493)
        {
          std::string::basic_string[abi:ne180100]<0>(v502, "model_checkpoint_interval");
          v326 = (_BYTE *)turi::option_manager::value((uint64_t)v494, (const void **)v502);
          switch(v326[12])
          {
            case 0:
              LODWORD(v327) = *(_DWORD *)v326;
              goto LABEL_579;
            case 1:
              v327 = (uint64_t)*(double *)v326;
              goto LABEL_579;
            case 2:
              v336 = *(_QWORD *)v326;
              v337 = (char **)(*(_QWORD *)v326 + 8);
              v536 = 0;
              v338 = (char *)v337;
              if (*(char *)(v336 + 31) < 0)
                v338 = *v337;
              std::string::basic_string[abi:ne180100]<0>(&v537, v338);
              LODWORD(v327) = std::stoll(&v537, &v536, 10);
              if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v537.__r_.__value_.__l.__data_);
              if (*(char *)(v336 + 31) < 0)
                v339 = *(_QWORD *)(v336 + 16);
              else
                v339 = *(unsigned __int8 *)(v336 + 31);
              if (v536 != v339)
              {
                v486 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v487 = std::string::append(&v560, " cannot be interpreted as an integer");
                v488 = *(_OWORD *)&v487->__r_.__value_.__l.__data_;
                v537.__r_.__value_.__r.__words[2] = v487->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v537.__r_.__value_.__l.__data_ = v488;
                v487->__r_.__value_.__l.__size_ = 0;
                v487->__r_.__value_.__r.__words[2] = 0;
                v487->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v486, &v537);
                __cxa_throw(v486, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_579;
            case 3:
              v332 = *(_QWORD *)v326;
              v535 = 0;
              v534 = 0;
              __idx = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__idx, *(const void **)(v332 + 8), *(_QWORD *)(v332 + 16), (uint64_t)(*(_QWORD *)(v332 + 16) - *(_QWORD *)(v332 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__idx)
              {
                v534 = __idx;
                operator delete((void *)__idx);
              }
              goto LABEL_582;
            case 4:
              v340 = *(_QWORD *)v326;
              memset(v532, 0, sizeof(v532));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v532, *(uint64_t **)(v340 + 8), *(uint64_t **)(v340 + 16), (uint64_t)(*(_QWORD *)(v340 + 16) - *(_QWORD *)(v340 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v537.__r_.__value_.__r.__words[0] = (std::string::size_type)v532;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v537);
              goto LABEL_582;
            case 5:
              v341 = *(_QWORD *)v326;
              memset(v531, 0, sizeof(v531));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v531, *(uint64_t **)(v341 + 8), *(uint64_t **)(v341 + 16), (uint64_t)(*(_QWORD *)(v341 + 16) - *(_QWORD *)(v341 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v537.__r_.__value_.__r.__words[0] = (std::string::size_type)v531;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v537);
              goto LABEL_582;
            case 6:
              v327 = (uint64_t)(*(_QWORD *)v326 << 8) >> 8;
LABEL_579:
              if ((_DWORD)v327)
              {
                std::string::basic_string[abi:ne180100]<0>(&v560, "model_checkpoint_interval");
                v348 = (_BYTE *)turi::option_manager::value((uint64_t)v494, (const void **)&v560.__r_.__value_.__l.__data_);
                LODWORD(v349) = 0;
                switch(v348[12])
                {
                  case 0:
                    v349 = *(_QWORD *)v348;
                    goto LABEL_673;
                  case 1:
                    v349 = (uint64_t)*(double *)v348;
                    goto LABEL_673;
                  case 2:
                    v384 = *(_QWORD *)v348;
                    v385 = (char **)(*(_QWORD *)v348 + 8);
                    __idx = 0;
                    v386 = (char *)v385;
                    if (*(char *)(v384 + 31) < 0)
                      v386 = *v385;
                    std::string::basic_string[abi:ne180100]<0>(__str, v386);
                    LODWORD(v349) = std::stoll((const std::string *)__str, &__idx, 10);
                    if ((__str[23] & 0x80000000) != 0)
                      operator delete(*(void **)__str);
                    if (*(char *)(v384 + 31) < 0)
                      v387 = *(_QWORD *)(v384 + 16);
                    else
                      v387 = *(unsigned __int8 *)(v384 + 31);
                    if (__idx != v387)
                    {
                      v396 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v397 = std::string::append(&v537, " cannot be interpreted as an integer");
                      v398 = *(_OWORD *)&v397->__r_.__value_.__l.__data_;
                      *(_QWORD *)&__str[16] = *((_QWORD *)&v397->__r_.__value_.__l + 2);
                      *(_OWORD *)__str = v398;
                      v397->__r_.__value_.__l.__size_ = 0;
                      v397->__r_.__value_.__r.__words[2] = 0;
                      v397->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v396, (const std::string *)__str);
                      __cxa_throw(v396, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    goto LABEL_673;
                  case 3:
                    v380 = *(_QWORD *)v348;
                    memset(__str, 0, 24);
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v380 + 8), *(_QWORD *)(v380 + 16), (uint64_t)(*(_QWORD *)(v380 + 16) - *(_QWORD *)(v380 + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if (*(_QWORD *)__str)
                    {
                      *(_QWORD *)&__str[8] = *(_QWORD *)__str;
                      operator delete(*(void **)__str);
                    }
                    goto LABEL_672;
                  case 4:
                    v388 = *(_QWORD *)v348;
                    memset(__str, 0, 24);
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v388 + 8), *(uint64_t **)(v388 + 16), (uint64_t)(*(_QWORD *)(v388 + 16) - *(_QWORD *)(v388 + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    v537.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v537);
                    goto LABEL_672;
                  case 5:
                    v389 = *(_QWORD *)v348;
                    memset(__str, 0, 24);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v389 + 8), *(uint64_t **)(v389 + 16), (uint64_t)(*(_QWORD *)(v389 + 16) - *(_QWORD *)(v389 + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    v537.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v537);
                    goto LABEL_672;
                  case 6:
                    v349 = (uint64_t)(*(_QWORD *)v348 << 8) >> 8;
                    goto LABEL_673;
                  case 7:
                    goto LABEL_673;
                  case 8:
                    v390 = *(_QWORD *)v348;
                    v391 = *(_QWORD *)(*(_QWORD *)v348 + 16);
                    *(_QWORD *)v557 = *(_QWORD *)(*(_QWORD *)v348 + 8);
                    *(_QWORD *)&v557[8] = v391;
                    if (v391)
                    {
                      v392 = (unsigned int *)(v391 + 8);
                      do
                        v393 = __ldxr(v392);
                      while (__stxr(v393 + 1, v392));
                    }
                    v394 = *(_OWORD *)(v390 + 24);
                    v395 = *(_OWORD *)(v390 + 56);
                    v558 = *(_OWORD *)(v390 + 40);
                    v559 = v395;
                    *(_OWORD *)&v557[16] = v394;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((unsigned int **)&v557[8]);
                    goto LABEL_672;
                  case 9:
                    turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v348 + 8);
                    turi::flexible_type_fail(0);
                    if (*((_QWORD *)&v539 + 1))
                    {
                      *(_QWORD *)&v540 = *((_QWORD *)&v539 + 1);
                      operator delete(*((void **)&v539 + 1));
                    }
                    if (*(_QWORD *)&__str[16])
                    {
                      *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
                      operator delete(*(void **)&__str[16]);
                    }
                    v381 = *(std::__shared_weak_count **)&__str[8];
                    if (*(_QWORD *)&__str[8])
                    {
                      v382 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
                      do
                        v383 = __ldaxr(v382);
                      while (__stlxr(v383 - 1, v382));
                      if (!v383)
                      {
                        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                        std::__shared_weak_count::__release_weak(v381);
                      }
                    }
LABEL_672:
                    LODWORD(v349) = 0;
LABEL_673:
                    v350 = (v268 + 1) % (int)v349 == 0;
                    if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v560.__r_.__value_.__l.__data_);
                    goto LABEL_583;
                  default:
                    goto LABEL_850;
                }
              }
              goto LABEL_582;
            case 7:
              goto LABEL_582;
            case 8:
              v342 = *(_QWORD *)v326;
              v343 = *(_QWORD *)(*(_QWORD *)v326 + 16);
              *(_QWORD *)v557 = *(_QWORD *)(*(_QWORD *)v326 + 8);
              *(_QWORD *)&v557[8] = v343;
              if (v343)
              {
                v344 = (unsigned int *)(v343 + 8);
                do
                  v345 = __ldxr(v344);
                while (__stxr(v345 + 1, v344));
              }
              v346 = *(_OWORD *)(v342 + 24);
              v347 = *(_OWORD *)(v342 + 56);
              v558 = *(_OWORD *)(v342 + 40);
              v559 = v347;
              *(_OWORD *)&v557[16] = v346;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&v557[8]);
              goto LABEL_582;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(_QWORD *)v326 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v539 + 1))
              {
                *(_QWORD *)&v540 = *((_QWORD *)&v539 + 1);
                operator delete(*((void **)&v539 + 1));
              }
              if (*(_QWORD *)&__str[16])
              {
                *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
                operator delete(*(void **)&__str[16]);
              }
              v333 = *(std::__shared_weak_count **)&__str[8];
              if (*(_QWORD *)&__str[8])
              {
                v334 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
                do
                  v335 = __ldaxr(v334);
                while (__stlxr(v335 - 1, v334));
                if (!v335)
                {
                  ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                  std::__shared_weak_count::__release_weak(v333);
                }
              }
LABEL_582:
              v350 = 0;
LABEL_583:
              if (v503 < 0)
              {
                operator delete(v502[0]);
                if (!v350)
                  break;
              }
              else if (!v350)
              {
                break;
              }
              if (v497 < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v557, __s, __sz);
              }
              else
              {
                *(_QWORD *)v557 = __s;
                *(_QWORD *)&v557[8] = __sz;
                *(_DWORD *)&v557[16] = v526[0];
                *(_DWORD *)&v557[19] = *(_DWORD *)((char *)v526 + 3);
                v557[23] = v497;
              }
              std::to_string(&v537, v268 + 1);
              v351 = std::string::insert(&v537, 0, "model_checkpoint_");
              v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
              *(_QWORD *)&__str[16] = *((_QWORD *)&v351->__r_.__value_.__l + 2);
              *(_OWORD *)__str = v352;
              v351->__r_.__value_.__l.__size_ = 0;
              v351->__r_.__value_.__r.__words[2] = 0;
              v351->__r_.__value_.__r.__words[0] = 0;
              boost::filesystem::path::operator/=((std::string *)v557, (uint64_t)__str);
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
              if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v537.__r_.__value_.__l.__data_);
              if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v516 + 64))(v516))
              {
                _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v537);
                v353 = (turi::unity_sframe *)v537.__r_.__value_.__r.__words[0];
                turi::table_printer::get_tracked_table((turi::table_printer *)&__p, (turi::sframe *)__str);
                turi::unity_sframe::construct_from_sframe(v353, (const turi::sframe *)__str);
                turi::sframe::~sframe((turi::sframe *)__str);
                v354 = v516;
                v501 = *(_OWORD *)&v537.__r_.__value_.__l.__data_;
                if (v537.__r_.__value_.__l.__size_)
                {
                  v355 = (unint64_t *)(v537.__r_.__value_.__l.__size_ + 8);
                  do
                    v356 = __ldxr(v355);
                  while (__stxr(v356 + 1, v355));
                }
                (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v354 + 288))(__str, v354, &v501);
                v357 = *(void **)__str;
                if (*(_QWORD *)__str
                {
                  v358 = *(_QWORD *)&__str[8];
                  if (*(_QWORD *)&__str[8])
                  {
                    v359 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
                    do
                      v360 = __ldxr(v359);
                    while (__stxr(v360 + 1, v359));
                  }
                }
                else
                {
                  v358 = 0;
                }
                v361 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
                *(_QWORD *)&v516 = v357;
                *((_QWORD *)&v516 + 1) = v358;
                if (v361)
                {
                  v362 = (unint64_t *)&v361->__shared_owners_;
                  do
                    v363 = __ldaxr(v362);
                  while (__stlxr(v363 - 1, v362));
                  if (!v363)
                  {
                    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                    std::__shared_weak_count::__release_weak(v361);
                  }
                }
                v364 = *(std::__shared_weak_count **)&__str[8];
                if (*(_QWORD *)&__str[8])
                {
                  v365 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
                  do
                    v366 = __ldaxr(v365);
                  while (__stlxr(v366 - 1, v365));
                  if (!v366)
                  {
                    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                    std::__shared_weak_count::__release_weak(v364);
                  }
                }
                v367 = (std::__shared_weak_count *)*((_QWORD *)&v501 + 1);
                if (*((_QWORD *)&v501 + 1))
                {
                  v368 = (unint64_t *)(*((_QWORD *)&v501 + 1) + 8);
                  do
                    v369 = __ldaxr(v368);
                  while (__stlxr(v369 - 1, v368));
                  if (!v369)
                  {
                    ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                    std::__shared_weak_count::__release_weak(v367);
                  }
                }
                v370 = (std::__shared_weak_count *)v537.__r_.__value_.__l.__size_;
                if (v537.__r_.__value_.__l.__size_)
                {
                  v371 = (unint64_t *)(v537.__r_.__value_.__l.__size_ + 8);
                  do
                    v372 = __ldaxr(v371);
                  while (__stlxr(v372 - 1, v371));
                  if (!v372)
                  {
                    ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                    std::__shared_weak_count::__release_weak(v370);
                  }
                }
              }
              else
              {
                v373 = (turi::unity_sframe *)v516;
                turi::table_printer::get_tracked_table((turi::table_printer *)&__p, (turi::sframe *)__str);
                turi::unity_sframe::construct_from_sframe(v373, (const turi::sframe *)__str);
                turi::sframe::~sframe((turi::sframe *)__str);
              }
              turi::supervised::xgboost::metric_tracker::get_training_metrics((turi::supervised::xgboost::metric_tracker *)&v541, v268, (char **)__str);
              turi::supervised::xgboost::metric_tracker::get_validation_metrics((turi::supervised::xgboost::metric_tracker *)&v541, v268, &v537.__r_.__value_.__l.__data_);
              v374 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
              v500 = v516;
              if (*((_QWORD *)&v516 + 1))
              {
                v375 = (unint64_t *)(*((_QWORD *)&v516 + 1) + 8);
                do
                  v376 = __ldxr(v375);
                while (__stxr(v376 + 1, v375));
              }
              gettimeofday((timeval *)&v560, 0);
              turi::supervised::xgboost::xgboost_model::_save_training_state((uint64_t)this, (double)(LODWORD(v560.__r_.__value_.__r.__words[1]) - v513.tv_usec) / 1000000.0+ (double)(uint64_t)(v560.__r_.__value_.__r.__words[0] - v513.tv_sec), v377, (uint64_t *)__str, (uint64_t *)&v537, (uint64_t)&v500);
              if (v374)
              {
                v378 = (unint64_t *)&v374->__shared_owners_;
                do
                  v379 = __ldaxr(v378);
                while (__stlxr(v379 - 1, v378));
                if (!v379)
                {
                  ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                  std::__shared_weak_count::__release_weak(v374);
                }
              }
              if (v537.__r_.__value_.__r.__words[0])
              {
                v537.__r_.__value_.__l.__size_ = v537.__r_.__value_.__r.__words[0];
                operator delete(v537.__r_.__value_.__l.__data_);
              }
              if (*(_QWORD *)__str)
              {
                *(_QWORD *)&__str[8] = *(_QWORD *)__str;
                operator delete(*(void **)__str);
              }
              turi::supervised::xgboost::xgboost_model::_checkpoint(this, (uint64_t)v557);
              if ((v557[23] & 0x80000000) != 0)
                operator delete(*(void **)v557);
              break;
            default:
LABEL_850:
              turi::flexible_type_fail(0);
              goto LABEL_861;
          }
        }
        v331 = 1;
        ++v268;
        v180 = v497;
      }
      *(_QWORD *)__str = &v506;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      if (v508[0])
      {
        v508[1] = v508[0];
        operator delete(v508[0]);
      }
      v305 = (cppipc *)v510;
      if (v510)
      {
        v511 = v510;
        operator delete(v510);
      }
    }
    while ((v331 & 1) != 0);
    turi::table_printer::print_footer((turi::table_printer *)&__p);
    if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v516 + 64))(v516))
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v557);
      v399 = *(turi::unity_sframe **)v557;
      turi::table_printer::get_tracked_table((turi::table_printer *)&__p, (turi::sframe *)__str);
      turi::unity_sframe::construct_from_sframe(v399, (const turi::sframe *)__str);
      turi::sframe::~sframe((turi::sframe *)__str);
      v400 = v516;
      v499 = *(_OWORD *)v557;
      if (*(_QWORD *)&v557[8])
      {
        v401 = (unint64_t *)(*(_QWORD *)&v557[8] + 8);
        do
          v402 = __ldxr(v401);
        while (__stxr(v402 + 1, v401));
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v400 + 288))(__str, v400, &v499);
      v403 = *(void **)__str;
      if (*(_QWORD *)__str
      {
        v404 = *(_QWORD *)&__str[8];
        if (*(_QWORD *)&__str[8])
        {
          v405 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
          do
            v406 = __ldxr(v405);
          while (__stxr(v406 + 1, v405));
        }
      }
      else
      {
        v404 = 0;
      }
      v407 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
      *(_QWORD *)&v516 = v403;
      *((_QWORD *)&v516 + 1) = v404;
      if (v407)
      {
        v408 = (unint64_t *)&v407->__shared_owners_;
        do
          v409 = __ldaxr(v408);
        while (__stlxr(v409 - 1, v408));
        if (!v409)
        {
          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
          std::__shared_weak_count::__release_weak(v407);
        }
      }
      v410 = *(std::__shared_weak_count **)&__str[8];
      if (*(_QWORD *)&__str[8])
      {
        v411 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
        do
          v412 = __ldaxr(v411);
        while (__stlxr(v412 - 1, v411));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
          std::__shared_weak_count::__release_weak(v410);
        }
      }
      v413 = (std::__shared_weak_count *)*((_QWORD *)&v499 + 1);
      if (*((_QWORD *)&v499 + 1))
      {
        v414 = (unint64_t *)(*((_QWORD *)&v499 + 1) + 8);
        do
          v415 = __ldaxr(v414);
        while (__stlxr(v415 - 1, v414));
        if (!v415)
        {
          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
          std::__shared_weak_count::__release_weak(v413);
        }
      }
      v416 = *(std::__shared_weak_count **)&v557[8];
      if (*(_QWORD *)&v557[8])
      {
        v417 = (unint64_t *)(*(_QWORD *)&v557[8] + 8);
        do
          v418 = __ldaxr(v417);
        while (__stlxr(v418 - 1, v417));
        if (!v418)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
      }
    }
    else
    {
      v419 = (turi::unity_sframe *)v516;
      turi::table_printer::get_tracked_table((turi::table_printer *)&__p, (turi::sframe *)__str);
      turi::unity_sframe::construct_from_sframe(v419, (const turi::sframe *)__str);
      turi::sframe::~sframe((turi::sframe *)__str);
    }
    if (v268 >= v496)
    {
      v420 = v496 - 1;
    }
    else
    {
      v420 = *((_QWORD *)v514 + 8);
      v421 = (int *)global_logger();
      if (v421[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v421))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v422 = (file_logger *)global_logger();
        v423 = file_logger::start_stream(v422, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "train", 1259, 1);
        v424 = pthread_getspecific(*((_QWORD *)v423 + 74));
        if (v424 && *((_BYTE *)v424 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v424 + 2, (uint64_t)"Early stop triggered. Returning the best model at iteration: ", 61);
        v425 = file_logger::operator<<<unsigned long>((uint64_t)v423);
        v426 = pthread_getspecific(*(_QWORD *)(v425 + 592));
        if (v426)
        {
          if (*((_BYTE *)v426 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v426 + *(_QWORD *)(v426[2] - 24) + 16));
            v427 = std::locale::use_facet((const std::locale *)__str, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v427->__vftable[2].~facet_0)(v427, 10);
            std::locale::~locale((std::locale *)__str);
            v180 = v497;
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v425);
            if (*(_DWORD *)(v425 + 600) == 7)
            {
              __print_back_trace();
              v428 = __cxa_allocate_exception(8uLL);
              *v428 = "LOG_FATAL encountered";
              __cxa_throw(v428, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
    }
    turi::supervised::xgboost::metric_tracker::get_training_metrics((turi::supervised::xgboost::metric_tracker *)&v541, v420, (char **)__str);
    turi::supervised::xgboost::metric_tracker::get_validation_metrics((turi::supervised::xgboost::metric_tracker *)&v541, v420, (char **)v557);
    v429 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
    v498 = v516;
    if (*((_QWORD *)&v516 + 1))
    {
      v430 = (unint64_t *)(*((_QWORD *)&v516 + 1) + 8);
      do
        v431 = __ldxr(v430);
      while (__stxr(v431 + 1, v430));
    }
    gettimeofday((timeval *)&v537, 0);
    turi::supervised::xgboost::xgboost_model::_save_training_state((uint64_t)this, (double)(LODWORD(v537.__r_.__value_.__r.__words[1]) - v513.tv_usec) / 1000000.0+ (double)(uint64_t)(v537.__r_.__value_.__r.__words[0] - v513.tv_sec), v432, (uint64_t *)__str, (uint64_t *)v557, (uint64_t)&v498);
    if (v429)
    {
      v433 = (unint64_t *)&v429->__shared_owners_;
      do
        v434 = __ldaxr(v433);
      while (__stlxr(v434 - 1, v433));
      if (!v434)
      {
        ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
        std::__shared_weak_count::__release_weak(v429);
      }
    }
    if (*(_QWORD *)v557)
    {
      *(_QWORD *)&v557[8] = *(_QWORD *)v557;
      operator delete(*(void **)v557);
    }
    if (*(_QWORD *)__str)
    {
      *(_QWORD *)&__str[8] = *(_QWORD *)__str;
      operator delete(*(void **)__str);
    }
    turi::supervised::xgboost::trim_boost_learner((xgboost_old::learner::BoostLearner **)this + 208);
    goto LABEL_734;
  }
  operator delete(v537.__r_.__value_.__l.__data_);
  if (!v5)
    goto LABEL_435;
LABEL_432:
  std::string::basic_string[abi:ne180100]<0>(&v537, "num_trees");
  *(_QWORD *)__str = &v537;
  v266 = (int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v537.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__str);
  turi::variant_converter<turi::flexible_type,void>::get(v266 + 14, (uint64_t)&v560);
  LODWORD(v267) = 0;
  switch(v560.__r_.__value_.__s.__data_[12])
  {
    case 0:
      LODWORD(v267) = v560.__r_.__value_.__l.__data_;
      goto LABEL_462;
    case 1:
      v267 = (uint64_t)*(double *)&v560.__r_.__value_.__l.__data_;
      goto LABEL_462;
    case 2:
      v271 = v560.__r_.__value_.__r.__words[0];
      __idx = 0;
      v272 = (char *)(v560.__r_.__value_.__r.__words[0] + 8);
      if (*(char *)(v560.__r_.__value_.__r.__words[0] + 31) < 0)
        v272 = *(char **)(v560.__r_.__value_.__r.__words[0] + 8);
      std::string::basic_string[abi:ne180100]<0>(__str, v272);
      LODWORD(v267) = std::stoll((const std::string *)__str, &__idx, 10);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (*(char *)(v271 + 31) < 0)
        v273 = *(_QWORD *)(v271 + 16);
      else
        v273 = *(unsigned __int8 *)(v271 + 31);
      if (__idx != v273)
      {
        v460 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v461 = std::string::append((std::string *)v557, " cannot be interpreted as an integer");
        v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v461->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v462;
        v461->__r_.__value_.__l.__size_ = 0;
        v461->__r_.__value_.__r.__words[2] = 0;
        v461->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v460, (const std::string *)__str);
        __cxa_throw(v460, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_462;
    case 3:
      memset(__str, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *(const void **)(v560.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)__str)
      {
        *(_QWORD *)&__str[8] = *(_QWORD *)__str;
        operator delete(*(void **)__str);
      }
      goto LABEL_461;
    case 4:
      memset(__str, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__str, *(uint64_t **)(v560.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v560.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 8)) >> 4);
      turi::flexible_type_fail(0);
      *(_QWORD *)v557 = __str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
      goto LABEL_461;
    case 5:
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v560.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v560.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 8)) >> 5);
      turi::flexible_type_fail(0);
      *(_QWORD *)v557 = __str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v557);
      goto LABEL_461;
    case 6:
      v267 = (uint64_t)(v560.__r_.__value_.__r.__words[0] << 8) >> 8;
      goto LABEL_462;
    case 7:
      goto LABEL_462;
    case 8:
      v274 = v560.__r_.__value_.__r.__words[0];
      v275 = *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16);
      *(_QWORD *)__str = *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 8);
      *(_QWORD *)&__str[8] = v275;
      if (v275)
      {
        v276 = (unsigned int *)(v275 + 8);
        do
          v277 = __ldxr(v276);
        while (__stxr(v277 + 1, v276));
      }
      v278 = *(_OWORD *)(v274 + 24);
      v279 = *(_OWORD *)(v274 + 56);
      v539 = *(_OWORD *)(v274 + 40);
      v540 = v279;
      *(_OWORD *)&__str[16] = v278;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str[8]);
      goto LABEL_461;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, v560.__r_.__value_.__r.__words[0] + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v539 + 1))
      {
        *(_QWORD *)&v540 = *((_QWORD *)&v539 + 1);
        operator delete(*((void **)&v539 + 1));
      }
      if (*(_QWORD *)&__str[16])
      {
        *(_QWORD *)&__str[24] = *(_QWORD *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      v267 = *(_QWORD *)&__str[8];
      if (!*(_QWORD *)&__str[8])
        goto LABEL_462;
      v269 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v267 + 16))(v267);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v267);
      }
LABEL_461:
      LODWORD(v267) = 0;
LABEL_462:
      switch(v560.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v280 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v281 = __ldaxr(v280);
            v282 = v281 - 1;
          }
          while (__stlxr(v282, v280));
          if (!v282)
          {
            v283 = v560.__r_.__value_.__r.__words[0];
            if (v560.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v560.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v560.__r_.__value_.__r.__words[0] + 8));
              v284 = (_QWORD *)v283;
              v285 = 0x1012C404EF22A49;
              goto LABEL_493;
            }
          }
          break;
        case 3:
          v293 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v294 = __ldaxr(v293);
            v295 = v294 - 1;
          }
          while (__stlxr(v295, v293));
          if (!v295)
          {
            v296 = v560.__r_.__value_.__r.__words[0];
            if (v560.__r_.__value_.__r.__words[0])
            {
              v297 = *(void **)(v560.__r_.__value_.__r.__words[0] + 8);
              if (v297)
              {
                *(_QWORD *)(v560.__r_.__value_.__r.__words[0] + 16) = v297;
                operator delete(v297);
              }
              v284 = (_QWORD *)v296;
              v285 = 0x1080C409938AC02;
              goto LABEL_493;
            }
          }
          break;
        case 4:
          v286 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v287 = __ldaxr(v286);
            v288 = v287 - 1;
          }
          while (__stlxr(v288, v286));
          if (!v288)
          {
            v289 = v560.__r_.__value_.__r.__words[0];
            if (v560.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)__str = v560.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
              goto LABEL_492;
            }
          }
          break;
        case 5:
          v298 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v299 = __ldaxr(v298);
            v300 = v299 - 1;
          }
          while (__stlxr(v300, v298));
          if (!v300)
          {
            v289 = v560.__r_.__value_.__r.__words[0];
            if (v560.__r_.__value_.__r.__words[0])
            {
              *(_QWORD *)__str = v560.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_492:
              v284 = (_QWORD *)v289;
              v285 = 0x1020C405E66F15BLL;
              goto LABEL_493;
            }
          }
          break;
        case 8:
          v301 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v302 = __ldaxr(v301);
            v303 = v302 - 1;
          }
          while (__stlxr(v303, v301));
          if (!v303)
          {
            v304 = v560.__r_.__value_.__r.__words[0];
            if (v560.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v560.__r_.__value_.__r.__words[0] + 16));
              MEMORY[0x219A19A08](v304, 0x1030C40F1F0227BLL);
            }
            v560.__r_.__value_.__r.__words[0] = 0;
          }
          break;
        case 9:
          v290 = (unint64_t *)v560.__r_.__value_.__r.__words[0];
          do
          {
            v291 = __ldaxr(v290);
            v292 = v291 - 1;
          }
          while (__stlxr(v292, v290));
          if (!v292 && v560.__r_.__value_.__r.__words[0])
          {
            v284 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v560.__r_.__value_.__l.__data_);
            v285 = 0x1030C407B73B9F7;
LABEL_493:
            MEMORY[0x219A19A08](v284, v285);
          }
          break;
        default:
          break;
      }
      v268 = (int)v267;
      v560.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v560.__r_.__value_.__r.__words[1]) = 0;
      v560.__r_.__value_.__s.__data_[12] = 0;
      if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v537.__r_.__value_.__l.__data_);
      if (v496 > (int)v267)
        goto LABEL_503;
      v447 = (int *)global_logger();
      if (v447[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v447))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v448 = (file_logger *)global_logger();
        v449 = file_logger::start_stream(v448, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost.cpp", "train", 1177, 1);
        v450 = pthread_getspecific(*((_QWORD *)v449 + 74));
        if (v450 && *((_BYTE *)v450 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v450 + 2, (uint64_t)"Resumed training from checkpoint at iteration ", 46);
        v451 = file_logger::operator<<<unsigned long>((uint64_t)v449);
        v452 = pthread_getspecific(*(_QWORD *)(v451 + 592));
        if (v452 && *((_BYTE *)v452 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v452 + 2, (uint64_t)" which is greater than or equal to max_iterations ", 50);
        v453 = file_logger::operator<<<unsigned long>(v451);
        v454 = pthread_getspecific(*(_QWORD *)(v453 + 592));
        if (v454)
        {
          if (*((_BYTE *)v454 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v454 + *(_QWORD *)(v454[2] - 24) + 16));
            v455 = std::locale::use_facet((const std::locale *)__str, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v455->__vftable[2].~facet_0)(v455, 10);
            std::locale::~locale((std::locale *)__str);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v453);
            if (*(_DWORD *)(v453 + 600) == 7)
            {
              __print_back_trace();
              v456 = __cxa_allocate_exception(8uLL);
              *v456 = "LOG_FATAL encountered";
              __cxa_throw(v456, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      return;
    default:
      goto LABEL_860;
  }
LABEL_734:
  v435 = v515;
  if (v515)
  {
    v436 = (unint64_t *)&v515->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  *(_QWORD *)__str = &v544;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v543, v543[1]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v542, v542[1]);
  *(_QWORD *)__str = &v541;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  v438 = (std::__shared_weak_count *)*((_QWORD *)&v516 + 1);
  if (*((_QWORD *)&v516 + 1))
  {
    v439 = (unint64_t *)(*((_QWORD *)&v516 + 1) + 8);
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  turi::table_printer::~table_printer((turi::table_printer *)&__p);
  v441 = (std::__shared_weak_count *)v522;
  if (v522)
  {
    v442 = (unint64_t *)(v522 + 8);
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
      std::__shared_weak_count::__release_weak(v441);
    }
  }
  v444 = v524;
  if (!v524)
    goto LABEL_753;
  v445 = (unint64_t *)&v524->__shared_owners_;
  do
    v446 = __ldaxr(v445);
  while (__stlxr(v446 - 1, v445));
  if (!v446)
  {
    ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
    std::__shared_weak_count::__release_weak(v444);
    if ((v180 & 0x80000000) == 0)
    {
LABEL_754:
      if ((v54 & 0x80000000) == 0)
        return;
LABEL_770:
      operator delete(v52);
      return;
    }
  }
  else
  {
LABEL_753:
    if ((v180 & 0x80000000) == 0)
      goto LABEL_754;
  }
  operator delete(__s);
  if (v54 < 0)
    goto LABEL_770;
}

void sub_2185C199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  void *v15;
  void *v17;

  v17 = (void *)STACK[0x420];
  if (STACK[0x420])
  {
    STACK[0x428] = (unint64_t)v17;
    operator delete(v17);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (a15 < 0)
    operator delete(v15);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::early_stopping_checkpointer::add(uint64_t a1, void *a2, xgboost_old::learner::BoostLearner **a3, float a4)
{
  dmlc::Stream *v8;
  dmlc::Stream *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  float v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  xgboost_old::learner::BoostLearner *v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  std::__shared_weak_count *v23;
  std::string v24;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::get_temp_name((uint64_t)__p, &v24);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (dmlc::Stream *)&v24;
  else
    v8 = (dmlc::Stream *)v24.__r_.__value_.__r.__words[0];
  xgboost_old::learner::BoostLearner::SaveModel(*a3, v8, 0);
  _ZNSt3__115allocate_sharedB8ne180100IN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v20);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (dmlc::Stream *)&v24;
  else
    v9 = (dmlc::Stream *)v24.__r_.__value_.__r.__words[0];
  xgboost_old::learner::BoostLearner::LoadModel((std::string *)v20, v9);
  __p[0] = a2;
  __p[1] = v20;
  v23 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::push_back((_QWORD *)a1, (uint64_t)__p);
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 48))
    std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::pop_front((int64x2_t *)a1);
  v16 = *(float *)(a1 + 60);
  if (!*(_BYTE *)(a1 + 56))
  {
    if (v16 <= a4)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v16 < a4)
  {
LABEL_21:
    *(float *)(a1 + 60) = a4;
    *(_QWORD *)(a1 + 64) = a2;
  }
LABEL_22:
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_2185C29D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::metric_tracker::~metric_tracker(char **this)
{
  char **v2;

  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)(this + 3), this[4]);
  v2 = this;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void xgboost_old::utils::FeatMap::~FeatMap(xgboost_old::utils::FeatMap *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void turi::supervised::xgboost::xgboost_model::predict_impl(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  char v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD v36[3];
  _BYTE v37[16];
  _QWORD v38[33];
  void *v39;
  void *v40;
  uint64_t v41;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v8 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
  v9 = *((unsigned __int8 *)a3 + 23);
  if (v8 < 3)
    goto LABEL_17;
  if ((v9 & 0x80) == 0)
  {
    if (v9 != 6)
    {
      v10 = a3;
      if (v9 != 11)
        goto LABEL_22;
      goto LABEL_13;
    }
    v18 = *(_DWORD *)a3 == 1735549293 && *((_WORD *)a3 + 2) == 28265;
    v16 = a3;
    if (!v18)
      goto LABEL_27;
LABEL_44:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v37);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Output type '", 13);
    v30 = *((char *)a3 + 23);
    if (v30 >= 0)
      v31 = (uint64_t)a3;
    else
      v31 = *a3;
    if (v30 >= 0)
      v32 = *((unsigned __int8 *)a3 + 23);
    else
      v32 = a3[1];
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' is only supported for binary classification.", 46);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" For multi-class classification, use predict_topk() instead.", 60);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v35);
    v36[2] = v37;
    turi::supervised::xgboost::xgboost_model::predict_impl(xgboost_old::learner::DMatrix const&,std::string const&)::$_0::operator()();
  }
  v11 = a3[1];
  if (v11 == 6 && *(_DWORD *)*a3 == 1735549293 && *(_WORD *)(*a3 + 4) == 28265)
    goto LABEL_44;
  if (v11 != 11)
    goto LABEL_20;
  v10 = (uint64_t *)*a3;
LABEL_13:
  v13 = *v10;
  v14 = *(uint64_t *)((char *)v10 + 3);
  if (v13 == 0x6C696261626F7270 && v14 == 0x7974696C69626162)
    goto LABEL_44;
LABEL_17:
  if ((v9 & 0x80) == 0)
  {
    v16 = a3;
    if (v9 == 6)
      goto LABEL_27;
LABEL_22:
    v17 = 0;
    goto LABEL_33;
  }
LABEL_20:
  if (a3[1] != 6)
    goto LABEL_22;
  v16 = (_QWORD *)*a3;
LABEL_27:
  v19 = *(_DWORD *)v16;
  v20 = *((unsigned __int16 *)v16 + 2);
  v17 = v19 == 1735549293 && v20 == 28265;
LABEL_33:
  turi::supervised::xgboost::xgboost_model::xgboost_predict(a1, a2, v17, (uint64_t *)&v39, 0.0);
  v22 = turi::supervised::prediction_type_enum_from_name(a3);
  v23 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
  v24 = (std::__shared_weak_count *)*((_QWORD *)a1 + 48);
  v36[0] = *((_QWORD *)a1 + 47);
  v36[1] = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  turi::supervised::xgboost::transform_prediction((uint64_t *)&v39, v22, v23, (uint64_t)v36, a4);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_2185C2D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  v7 = *(void **)(v5 - 72);
  if (v7)
  {
    *(_QWORD *)(v5 - 64) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::predict(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE v36[208];
  void **v37[2];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)v38 + 5) = 0x700000000000000;
  v38[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v36, a2, v38, 2, 0);
  switch(BYTE4(v38[1]))
  {
    case 2:
      v7 = (unint64_t *)v38[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v38[0];
        if (v38[0])
        {
          if (*(char *)(v38[0] + 31) < 0)
            operator delete(*(void **)(v38[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v13 = (unint64_t *)v38[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v38[0];
        if (v38[0])
        {
          v17 = *(void **)(v38[0] + 8);
          if (v17)
          {
            *(_QWORD *)(v38[0] + 16) = v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v38[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v38[0];
        if (v38[0])
        {
          v37[0] = (void **)(v38[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v37);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v29 = (unint64_t *)v38[0];
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v21 = v38[0];
        if (v38[0])
        {
          v37[0] = (void **)(v38[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v37);
LABEL_35:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v32 = (unint64_t *)v38[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v38[0];
        if (v38[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v38[0] + 16));
          v11 = v35;
          v28 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v22 = (unint64_t *)v38[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v38[0];
        if (v38[0])
        {
          v26 = *(void **)(v38[0] + 48);
          if (v26)
          {
            *(_QWORD *)(v38[0] + 56) = v26;
            operator delete(v26);
          }
          v27 = *(void **)(v25 + 24);
          if (v27)
          {
            *(_QWORD *)(v25 + 32) = v27;
            operator delete(v27);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v25 + 8);
          v11 = v25;
          v28 = 2071181815;
LABEL_41:
          v12 = v28 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      break;
  }
  memset(v38, 0, 13);
  turi::supervised::xgboost::xgboost_model::predict_impl(a1, (uint64_t)v36, a3, a4);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)v36);
}

void sub_2185C3000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::fast_predict(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39[2];
  _BYTE v40[240];
  int missing_value_enum_from_string;

  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 48);
  v39[0] = *((_QWORD *)a1 + 47);
  v39[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  turi::supervised::xgboost::make_simple_dmatrix(a2, v39, &missing_value_enum_from_string, (xgboost_old::io::DMatrixSimple *)v40);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  turi::supervised::xgboost::xgboost_model::predict_impl(a1, (uint64_t)v40, a4, &v37);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v35);
  v14 = v35;
  v33 = v37;
  v34 = v38;
  if (v38)
  {
    v15 = (unint64_t *)&v38->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  turi::unity_sarray::construct_from_sarray(v14, &v33);
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v31 = v35;
  v32 = v36;
  if (v36)
  {
    v20 = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  turi::gl_sarray::gl_sarray(a5, &v31);
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)v40);
}

void sub_2185C3334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)va3);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::fast_predict_topk(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  turi::unity_sframe *v24;
  std::__shared_weak_count *v25;
  turi::unity_sframe *v26;
  std::__shared_weak_count *v27;
  uint64_t v28[2];
  _BYTE v29[240];
  int missing_value_enum_from_string;
  _BYTE v31[296];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  missing_value_enum_from_string = turi::supervised::supervised_learning_model_base::get_missing_value_enum_from_string((uint64_t)a1, a3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 48);
  v28[0] = *((_QWORD *)a1 + 47);
  v28[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  turi::supervised::xgboost::make_simple_dmatrix(a2, v28, &missing_value_enum_from_string, (xgboost_old::io::DMatrixSimple *)v29);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  turi::supervised::xgboost::xgboost_model::predict_topk_impl(a1, (uint64_t)v29, a4, a5, (uint64_t)v31);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v26);
  turi::unity_sframe::construct_from_sframe(v26, (const turi::sframe *)v31);
  v24 = v26;
  v25 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  turi::gl_sframe::gl_sframe(a6, (uint64_t *)&v24);
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  turi::sframe::~sframe((turi::sframe *)v31);
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)v29);
}

void sub_2185C3558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  turi::sframe::~sframe((turi::sframe *)&a47);
  xgboost_old::io::DMatrixSimple::~DMatrixSimple((xgboost_old::io::DMatrixSimple *)&a16);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::predict_topk_impl(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  int v11;
  const std::string::value_type *v12;
  int v13;
  int v14;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[3];
  void *__p;
  void *v29;
  _QWORD v30[33];

  v10 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
  if (v10 < a4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"The training data contained ", 28);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" classes.", 9);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" The parameter 'k' must be less than or equal to the number of ", 63);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"classes in the training data.", 29);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v26);
    v27[2] = &__p;
    turi::supervised::xgboost::xgboost_model::predict_topk_impl(xgboost_old::learner::DMatrix const&,std::string const&,unsigned long)::$_0::operator()();
  }
  __p = 0;
  v29 = 0;
  v30[0] = 0;
  v11 = *(char *)(a3 + 23);
  if (v11 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 6)
    {
LABEL_13:
      v16 = 0;
      goto LABEL_14;
    }
    v12 = *(const std::string::value_type **)a3;
  }
  else
  {
    v12 = (const std::string::value_type *)a3;
    if (v11 != 6)
      goto LABEL_13;
  }
  v13 = *(_DWORD *)v12;
  v14 = *((unsigned __int16 *)v12 + 2);
  v16 = v13 == 1735549293 && v14 == 28265;
LABEL_14:
  turi::supervised::xgboost::xgboost_model::xgboost_predict(a1, a2, v16, (uint64_t *)&__p, 0.0);
  v17 = *((_QWORD *)a1 + 47);
  v18 = (std::__shared_weak_count *)*((_QWORD *)a1 + 48);
  v27[0] = v17;
  v27[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  turi::supervised::xgboost::transform_prediction_topk(&__p, (const std::string::value_type **)a3, a4, v10, (uint64_t)v27, a5);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_2185C3764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::predict_topk(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v38[208];
  void **v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)v40 + 5) = 0x700000000000000;
  v40[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v38, a2, v40, 2, 0);
  switch(BYTE4(v40[1]))
  {
    case 2:
      v9 = (unint64_t *)v40[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v40[0];
        if (v40[0])
        {
          if (*(char *)(v40[0] + 31) < 0)
            operator delete(*(void **)(v40[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v15 = (unint64_t *)v40[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v40[0];
        if (v40[0])
        {
          v19 = *(void **)(v40[0] + 8);
          if (v19)
          {
            *(_QWORD *)(v40[0] + 16) = v19;
            operator delete(v19);
          }
          v13 = v18;
          v14 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v20 = (unint64_t *)v40[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v40[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v23 = v40[0];
        if (v40[0])
        {
          v39[0] = (void **)(v40[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v39);
LABEL_35:
          v13 = v23;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v40[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v40[0];
        if (v40[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40[0] + 16));
          v13 = v37;
          v30 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v24 = (unint64_t *)v40[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v40[0];
        if (v40[0])
        {
          v28 = *(void **)(v40[0] + 48);
          if (v28)
          {
            *(_QWORD *)(v40[0] + 56) = v28;
            operator delete(v28);
          }
          v29 = *(void **)(v27 + 24);
          if (v29)
          {
            *(_QWORD *)(v27 + 32) = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
          v13 = v27;
          v30 = 2071181815;
LABEL_41:
          v14 = v30 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      break;
  }
  memset(v40, 0, 13);
  turi::supervised::xgboost::xgboost_model::predict_topk_impl(a1, (uint64_t)v38, a3, a4, a5);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)v38);
}

void sub_2185C3A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::evaluate(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[26];
  void **v37[2];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)((char *)v38 + 5) = 0x700000000000000;
  v38[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v36, a2, v38, 2, 0);
  switch(BYTE4(v38[1]))
  {
    case 2:
      v7 = (unint64_t *)v38[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v38[0];
        if (v38[0])
        {
          if (*(char *)(v38[0] + 31) < 0)
            operator delete(*(void **)(v38[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v13 = (unint64_t *)v38[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v38[0];
        if (v38[0])
        {
          v17 = *(void **)(v38[0] + 8);
          if (v17)
          {
            *(_QWORD *)(v38[0] + 16) = v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v38[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v38[0];
        if (v38[0])
        {
          v37[0] = (void **)(v38[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v37);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v29 = (unint64_t *)v38[0];
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v21 = v38[0];
        if (v38[0])
        {
          v37[0] = (void **)(v38[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v37);
LABEL_35:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v32 = (unint64_t *)v38[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v38[0];
        if (v38[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v38[0] + 16));
          v11 = v35;
          v28 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v22 = (unint64_t *)v38[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v38[0];
        if (v38[0])
        {
          v26 = *(void **)(v38[0] + 48);
          if (v26)
          {
            *(_QWORD *)(v38[0] + 56) = v26;
            operator delete(v26);
          }
          v27 = *(void **)(v25 + 24);
          if (v27)
          {
            *(_QWORD *)(v25 + 32) = v27;
            operator delete(v27);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v25 + 8);
          v11 = v25;
          v28 = 2071181815;
LABEL_41:
          v12 = v28 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      break;
  }
  memset(v38, 0, 13);
  turi::supervised::xgboost::xgboost_model::evaluate_impl(a1, v36, a3, a4);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)v36);
}

void sub_2185C3DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::evaluate_impl(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  int v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  turi::thread *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  int v84;
  void **v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  BOOL v92;
  char v93;
  _BOOL4 v94;
  std::string **v95;
  __int128 **v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  int v100;
  void **v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char v108;
  _BOOL4 v109;
  std::vector<std::string>::pointer end;
  __int128 v111;
  std::string *v112;
  std::vector<std::string>::pointer v113;
  std::vector<std::string>::pointer begin;
  int v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  float *v126;
  float *i;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  void *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  unsigned int v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  int v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  void **v182;
  void **v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  unsigned __int8 *v196;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  __int128 v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  __int128 v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  turi::gl_sarray_writer_impl *v208;
  std::string __p;
  char v210[8];
  char *v211;
  unint64_t v212;
  _BYTE v213[32];
  int v214;
  uint64_t *v215;
  _QWORD *v216[2];
  _BYTE v217[72];
  std::vector<std::string> v218;
  char *v219[10];
  unint64_t v220[10];
  void **v221;
  _BYTE v222[13];
  void *v223[2];
  unsigned __int8 v224;
  void **v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;

  v231 = *MEMORY[0x24BDAC8D0];
  v216[0] = 0;
  v216[1] = 0;
  v215 = (uint64_t *)v216;
  memset(v213, 0, sizeof(v213));
  v214 = 1065353216;
  v212 = turi::supervised::xgboost::xgboost_model::num_classes((turi::supervised::xgboost::xgboost_model *)a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1))
  {
    v196 = a3;
    v220[0] = 0;
    if (a2[25])
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + 32) + 80);
        v223[0] = v220;
        v9 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v215, v220, (uint64_t)&std::piecewise_construct, (_QWORD **)v223);
        v10 = v9;
        v11 = v8 + 16 * v7;
        v12 = v9 + 5;
        if ((uint64_t **)v11 != v9 + 5)
        {
          switch(*((_BYTE *)v9 + 52))
          {
            case 2:
              v13 = (unint64_t *)*v12;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                v16 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_47;
                if (*((char *)v16 + 31) < 0)
                  operator delete((void *)v16[1]);
                v17 = v16;
                v18 = 0x1012C404EF22A49;
                goto LABEL_46;
              }
              break;
            case 3:
              v19 = (unint64_t *)*v12;
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                v22 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_47;
                v23 = (void *)v22[1];
                if (v23)
                {
                  v22[2] = (unint64_t)v23;
                  operator delete(v23);
                }
                v17 = v22;
                v18 = 0x1080C409938AC02;
                goto LABEL_46;
              }
              break;
            case 4:
              v24 = (unint64_t *)*v12;
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                v27 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_47;
                v223[0] = v27 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
                goto LABEL_39;
              }
              break;
            case 5:
              v35 = (unint64_t *)*v12;
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                v27 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_47;
                v223[0] = v27 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
LABEL_39:
                v17 = v27;
                v18 = 0x1020C405E66F15BLL;
                goto LABEL_46;
              }
              break;
            case 8:
              v38 = (unint64_t *)*v12;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_47;
                boost::detail::shared_count::~shared_count((unsigned int **)v41 + 2);
                v17 = v41;
                v34 = -235920773;
                goto LABEL_45;
              }
              break;
            case 9:
              v28 = (unint64_t *)*v12;
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v31 = (unint64_t *)*v12;
                if (*v12)
                {
                  v32 = (void *)v31[6];
                  if (v32)
                  {
                    v31[7] = (unint64_t)v32;
                    operator delete(v32);
                  }
                  v33 = (void *)v31[3];
                  if (v33)
                  {
                    v31[4] = (unint64_t)v33;
                    operator delete(v33);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v31 + 1));
                  v17 = v31;
                  v34 = 2071181815;
LABEL_45:
                  v18 = v34 | 0x1030C4000000000;
LABEL_46:
                  MEMORY[0x219A19A08](v17, v18);
                }
LABEL_47:
                *v12 = 0;
              }
              break;
            default:
              break;
          }
          v42 = *(uint64_t **)v11;
          *(uint64_t **)((char *)v12 + 5) = *(uint64_t **)(v11 + 5);
          *v12 = v42;
          LODWORD(v42) = *(unsigned __int8 *)(v11 + 12);
          *((_BYTE *)v10 + 52) = (_BYTE)v42;
          v43 = v42 > 9;
          v44 = (1 << (char)v42) & 0x33C;
          if (!v43 && v44 != 0)
          {
            v46 = (unint64_t *)*v12;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 + 1, v46));
          }
        }
        v48 = v220[0];
        BYTE4(v223[1]) = 0;
        LODWORD(v223[1]) = 0;
        v223[0] = (void *)v220[0];
        v221 = v223;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type&&>,std::tuple<>>((uint64_t)v213, (unsigned __int8 *)v223, (uint64_t)&std::piecewise_construct, (uint64_t **)&v221)+ 4) = v48;
        switch(BYTE4(v223[1]))
        {
          case 2:
            v49 = (unint64_t *)v223[0];
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              v52 = v223[0];
              if (v223[0])
              {
                if (*((char *)v223[0] + 31) < 0)
                  operator delete(*((void **)v223[0] + 1));
                v53 = v52;
                v54 = 0x1012C404EF22A49;
                goto LABEL_95;
              }
            }
            break;
          case 3:
            v55 = (unint64_t *)v223[0];
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              v58 = v223[0];
              if (v223[0])
              {
                v59 = (void *)*((_QWORD *)v223[0] + 1);
                if (v59)
                {
                  *((_QWORD *)v223[0] + 2) = v59;
                  operator delete(v59);
                }
                v53 = v58;
                v54 = 0x1080C409938AC02;
                goto LABEL_95;
              }
            }
            break;
          case 4:
            v60 = (unint64_t *)v223[0];
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
            {
              v63 = v223[0];
              if (v223[0])
              {
                v221 = (void **)((char *)v223[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v221);
                goto LABEL_88;
              }
            }
            break;
          case 5:
            v71 = (unint64_t *)v223[0];
            do
            {
              v72 = __ldaxr(v71);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v71));
            if (!v73)
            {
              v63 = v223[0];
              if (v223[0])
              {
                v221 = (void **)((char *)v223[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v221);
LABEL_88:
                v53 = v63;
                v54 = 0x1020C405E66F15BLL;
                goto LABEL_95;
              }
            }
            break;
          case 8:
            v74 = (unint64_t *)v223[0];
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
            {
              v77 = v223[0];
              if (v223[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)v223[0] + 2);
                v53 = v77;
                v70 = -235920773;
                goto LABEL_94;
              }
            }
            break;
          case 9:
            v64 = (unint64_t *)v223[0];
            do
            {
              v65 = __ldaxr(v64);
              v66 = v65 - 1;
            }
            while (__stlxr(v66, v64));
            if (!v66)
            {
              v67 = v223[0];
              if (v223[0])
              {
                v68 = (void *)*((_QWORD *)v223[0] + 6);
                if (v68)
                {
                  *((_QWORD *)v223[0] + 7) = v68;
                  operator delete(v68);
                }
                v69 = (void *)v67[3];
                if (v69)
                {
                  v67[4] = v69;
                  operator delete(v69);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v67 + 1));
                v53 = v67;
                v70 = 2071181815;
LABEL_94:
                v54 = v70 | 0x1030C4000000000;
LABEL_95:
                MEMORY[0x219A19A08](v53, v54);
              }
            }
            break;
          default:
            break;
        }
        v7 = v220[0] + 1;
        v220[0] = v7;
      }
      while (v7 < a2[25]);
    }
    a3 = v196;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "default");
  turi::flexible_type_converter<std::string>::set(&__p, (uint64_t)v220);
  *(_QWORD *)&v222[5] = *(unint64_t *)((char *)v220 + 5);
  *(_QWORD *)v222 = v220[0];
  v222[12] = BYTE4(v220[1]);
  LODWORD(v221) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)v223, "average", (unsigned int *)&v221);
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)&v212, (uint64_t)v219);
  *(unint64_t *)((char *)&v220[1] + 5) = *(unint64_t *)((char *)v219 + 5);
  v220[1] = (unint64_t)v219[0];
  BYTE4(v220[2]) = BYTE4(v219[1]);
  LODWORD(v220[0]) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v226, "num_classes", (unsigned int *)v220);
  turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::set(&v215, (uint64_t)&v218);
  *(char **)((char *)&v219[1] + 5) = *(char **)((char *)&v218.__begin_ + 5);
  v219[1] = (char *)v218.__begin_;
  BYTE4(v219[2]) = BYTE4(v218.__end_);
  LODWORD(v219[0]) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v227, "inv_index_map", (unsigned int *)v219);
  LOBYTE(v198) = 0;
  turi::flexible_type_converter<BOOL>::set((unsigned __int8 *)&v198, (uint64_t)v217);
  *(std::vector<std::string>::pointer *)((char *)&v218.__end_ + 5) = *(std::vector<std::string>::pointer *)&v217[5];
  v218.__end_ = *(std::vector<std::string>::pointer *)v217;
  BYTE4(v218.__end_cap_.__value_) = v217[12];
  LODWORD(v218.__begin_) = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v228, "binary", (unsigned int *)&v218);
  turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::set((uint64_t)v213, (uint64_t)&v230);
  *(_QWORD *)&v217[13] = *(_QWORD *)((char *)&v230 + 5);
  *(_QWORD *)&v217[8] = v230;
  v217[20] = BYTE12(v230);
  *(_DWORD *)v217 = 0;
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[16],boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,0>((uint64_t)&v229, "index_map", (unsigned int *)v217);
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v210, (const void **)v223, 5);
  v78 = 65;
  do
  {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v222[v78 * 8 - 8]);
    if (SHIBYTE(v220[v78 + 9]) < 0)
      operator delete((void *)v220[v78 + 7]);
    v78 -= 13;
  }
  while (v78 * 8);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v217);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v218);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v219);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v220);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v221);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(v220, 0, 24);
  memset(v219, 0, 24);
  v80 = turi::thread::cpu_count(v79);
  memset(&v218, 0, sizeof(v218));
  std::string::basic_string[abi:ne180100]<0>(v223, "auto");
  v81 = a3[23];
  if ((v81 & 0x80u) == 0)
    v82 = (void *)a3[23];
  else
    v82 = (void *)*((_QWORD *)a3 + 1);
  v83 = v224;
  v84 = (char)v224;
  if ((v224 & 0x80u) != 0)
    v83 = (unint64_t)v223[1];
  if (v82 != (void *)v83)
  {
    v94 = 0;
    if (((char)v224 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_126;
  }
  if ((v224 & 0x80u) == 0)
    v85 = v223;
  else
    v85 = (void **)v223[0];
  if ((v81 & 0x80) != 0)
  {
    v94 = memcmp(*(const void **)a3, v85, *((_QWORD *)a3 + 1)) == 0;
    if ((v84 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_126;
  }
  if (!a3[23])
  {
    v94 = 1;
    if (((char)v224 & 0x80000000) == 0)
      goto LABEL_122;
LABEL_126:
    operator delete(v223[0]);
    if (v94)
      goto LABEL_123;
    goto LABEL_127;
  }
  v86 = v81 - 1;
  v87 = a3;
  do
  {
    v89 = *v87++;
    v88 = v89;
    v91 = *(unsigned __int8 *)v85;
    v85 = (void **)((char *)v85 + 1);
    v90 = v91;
    v92 = v86-- != 0;
    v93 = v92;
    v94 = v88 == v90;
  }
  while (v88 == v90 && (v93 & 1) != 0);
  if ((char)v224 < 0)
    goto LABEL_126;
LABEL_122:
  if (v94)
  {
LABEL_123:
    v95 = (std::string **)(a1 + 320);
    if (&v218 == (std::vector<std::string> *)(a1 + 320))
      goto LABEL_166;
    v96 = (__int128 **)(a1 + 328);
LABEL_148:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v218, *v95, *v96, 0xAAAAAAAAAAAAAAABLL * (((char *)*v96 - (char *)*v95) >> 3));
    goto LABEL_166;
  }
LABEL_127:
  std::string::basic_string[abi:ne180100]<0>(v223, "train");
  v97 = a3[23];
  if ((v97 & 0x80u) == 0)
    v98 = (void *)a3[23];
  else
    v98 = (void *)*((_QWORD *)a3 + 1);
  v99 = v224;
  v100 = (char)v224;
  if ((v224 & 0x80u) != 0)
    v99 = (unint64_t)v223[1];
  if (v98 != (void *)v99)
  {
    v109 = 0;
    if (((char)v224 & 0x80000000) == 0)
      goto LABEL_145;
    goto LABEL_150;
  }
  if ((v224 & 0x80u) == 0)
    v101 = v223;
  else
    v101 = (void **)v223[0];
  if ((v97 & 0x80) != 0)
  {
    v109 = memcmp(*(const void **)a3, v101, *((_QWORD *)a3 + 1)) == 0;
    if ((v100 & 0x80000000) == 0)
      goto LABEL_145;
    goto LABEL_150;
  }
  if (!a3[23])
  {
    v109 = 1;
    if (((char)v224 & 0x80000000) == 0)
      goto LABEL_145;
LABEL_150:
    operator delete(v223[0]);
    if (v109)
      goto LABEL_146;
    goto LABEL_151;
  }
  v102 = v97 - 1;
  v103 = a3;
  do
  {
    v105 = *v103++;
    v104 = v105;
    v107 = *(unsigned __int8 *)v101;
    v101 = (void **)((char *)v101 + 1);
    v106 = v107;
    v92 = v102-- != 0;
    v108 = v92;
    v109 = v104 == v106;
  }
  while (v104 == v106 && (v108 & 1) != 0);
  if ((char)v224 < 0)
    goto LABEL_150;
LABEL_145:
  if (v109)
  {
LABEL_146:
    v95 = (std::string **)(a1 + 344);
    if (&v218 == (std::vector<std::string> *)(a1 + 344))
      goto LABEL_166;
    v96 = (__int128 **)(a1 + 352);
    goto LABEL_148;
  }
LABEL_151:
  end = v218.__end_;
  if (v218.__end_ >= v218.__end_cap_.__value_)
  {
    v112 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v218, (__int128 *)a3);
  }
  else
  {
    if ((char)a3[23] < 0)
    {
      std::string::__init_copy_ctor_external(v218.__end_, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v111 = *(_OWORD *)a3;
      v218.__end_->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v111;
    }
    v112 = end + 1;
  }
  v218.__end_ = v112;
LABEL_166:
  begin = v218.__begin_;
  v113 = v218.__end_;
  if (v218.__begin_ == v218.__end_)
  {
    v115 = 0;
  }
  else
  {
    LOBYTE(v115) = 0;
    do
    {
      turi::evaluation::get_evaluator_metric(begin, (uint64_t)v210, v223);
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v219, (__int128 *)v223);
      v116 = (_OWORD *)v220[1];
      if (v220[1] >= v220[2])
      {
        v118 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v220, (__int128 *)begin);
      }
      else
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v220[1], begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          v117 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          *(_QWORD *)(v220[1] + 16) = *((_QWORD *)&begin->__r_.__value_.__l + 2);
          *v116 = v117;
        }
        v118 = (uint64_t)v116 + 24;
      }
      v220[1] = v118;
      if ((v115 & 1) != 0)
        v115 = 1;
      else
        v115 = (*(uint64_t (**)(void *))(*(_QWORD *)v223[0] + 32))(v223[0]);
      v119 = (std::__shared_weak_count *)v223[1];
      if (v223[1])
      {
        v120 = (unint64_t *)((char *)v223[1] + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      ++begin;
    }
    while (begin != v113);
  }
  v122 = v219[0];
  if (v219[1] != v219[0])
  {
    v123 = 0;
    v124 = 0;
    do
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v122[v123] + 24))(*(_QWORD *)&v122[v123], v80);
      ++v124;
      v122 = v219[0];
      v123 += 16;
    }
    while (v124 < (v219[1] - v219[0]) >> 4);
  }
  v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  turi::gl_sarray_writer::gl_sarray_writer(&v208, v125 ^ 1u, -1);
  v126 = (float *)a2[10];
  for (i = (float *)a2[11]; v126 != i; ++v126)
  {
    *(void **)((char *)v223 + 5) = (void *)0x100000000000000;
    v223[0] = 0;
    *(double *)v223 = *v126;
    turi::gl_sarray_writer::write(&v208, (const turi::flexible_type *)v223, 0);
    switch(BYTE4(v223[1]))
    {
      case 2:
        v128 = (unint64_t *)v223[0];
        do
        {
          v129 = __ldaxr(v128);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v128));
        if (!v130)
        {
          v131 = v223[0];
          if (v223[0])
          {
            if (*((char *)v223[0] + 31) < 0)
              operator delete(*((void **)v223[0] + 1));
            v132 = v131;
            v133 = 0x1012C404EF22A49;
            goto LABEL_230;
          }
        }
        break;
      case 3:
        v138 = (unint64_t *)v223[0];
        do
        {
          v139 = __ldaxr(v138);
          v140 = v139 - 1;
        }
        while (__stlxr(v140, v138));
        if (!v140)
        {
          v141 = v223[0];
          if (v223[0])
          {
            v142 = (void *)*((_QWORD *)v223[0] + 1);
            if (v142)
            {
              *((_QWORD *)v223[0] + 2) = v142;
              operator delete(v142);
            }
            v132 = v141;
            v133 = 0x1080C409938AC02;
            goto LABEL_230;
          }
        }
        break;
      case 4:
        v134 = (unint64_t *)v223[0];
        do
        {
          v135 = __ldaxr(v134);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v134));
        if (!v136)
        {
          v137 = v223[0];
          if (v223[0])
          {
            v221 = (void **)((char *)v223[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v221);
            goto LABEL_214;
          }
        }
        break;
      case 5:
        v143 = (unint64_t *)v223[0];
        do
        {
          v144 = __ldaxr(v143);
          v145 = v144 - 1;
        }
        while (__stlxr(v145, v143));
        if (!v145)
        {
          v137 = v223[0];
          if (v223[0])
          {
            v221 = (void **)((char *)v223[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v221);
LABEL_214:
            v132 = v137;
            v133 = 0x1020C405E66F15BLL;
            goto LABEL_230;
          }
        }
        break;
      case 8:
        v153 = (unint64_t *)v223[0];
        do
        {
          v154 = __ldaxr(v153);
          v155 = v154 - 1;
        }
        while (__stlxr(v155, v153));
        if (!v155)
        {
          v156 = v223[0];
          if (v223[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v223[0] + 2);
            v132 = v156;
            v152 = -235920773;
            goto LABEL_229;
          }
        }
        break;
      case 9:
        v146 = (unint64_t *)v223[0];
        do
        {
          v147 = __ldaxr(v146);
          v148 = v147 - 1;
        }
        while (__stlxr(v148, v146));
        if (!v148)
        {
          v149 = v223[0];
          if (v223[0])
          {
            v150 = (void *)*((_QWORD *)v223[0] + 6);
            if (v150)
            {
              *((_QWORD *)v223[0] + 7) = v150;
              operator delete(v150);
            }
            v151 = (void *)v149[3];
            if (v151)
            {
              v149[4] = v151;
              operator delete(v151);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v149 + 1));
            v132 = v149;
            v152 = 2071181815;
LABEL_229:
            v133 = v152 | 0x1030C4000000000;
LABEL_230:
            MEMORY[0x219A19A08](v132, v133);
          }
        }
        break;
      default:
        continue;
    }
  }
  turi::gl_sarray_writer::close(&v208, (uint64_t)&v221);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(v223, "targets", (const turi::gl_sarray *)&v221);
  turi::gl_sframe::gl_sframe(v217, v223, 1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v225);
  if ((char)v224 < 0)
    operator delete(v223[0]);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v230);
  v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  v158 = v230;
  if (v157)
  {
    std::string::basic_string[abi:ne180100]<0>(v223, "class_index");
    turi::supervised::xgboost::xgboost_model::predict_impl((turi::supervised::xgboost::xgboost_model *)a1, (uint64_t)a2, (uint64_t *)v223, &v206);
    turi::unity_sarray::construct_from_sarray(v158, &v206);
    v159 = v207;
    if (v207)
    {
      p_shared_owners = (unint64_t *)&v207->__shared_owners_;
      do
        v161 = __ldaxr(p_shared_owners);
      while (__stlxr(v161 - 1, p_shared_owners));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    if ((char)v224 < 0)
      operator delete(v223[0]);
    v205 = v230;
    if (*((_QWORD *)&v230 + 1))
    {
      v162 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    turi::gl_sarray::gl_sarray((uint64_t)v223, (uint64_t *)&v205);
    std::string::basic_string[abi:ne180100]<0>(&__p, "preds");
    turi::gl_sframe::add_column((uint64_t)v217, (uint64_t)v223, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v223);
    v164 = (std::__shared_weak_count *)*((_QWORD *)&v205 + 1);
    if (!*((_QWORD *)&v205 + 1))
      goto LABEL_251;
    v165 = (unint64_t *)(*((_QWORD *)&v205 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
      if (!v115)
        goto LABEL_286;
    }
    else
    {
LABEL_251:
      if (!v115)
        goto LABEL_286;
    }
    v167 = v230;
    std::string::basic_string[abi:ne180100]<0>(v223, "probability_vector");
    turi::supervised::xgboost::xgboost_model::predict_impl((turi::supervised::xgboost::xgboost_model *)a1, (uint64_t)a2, (uint64_t *)v223, &v203);
    turi::unity_sarray::construct_from_sarray(v167, &v203);
    v168 = v204;
    if (v204)
    {
      v169 = (unint64_t *)&v204->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    if ((char)v224 < 0)
      operator delete(v223[0]);
    v202 = v230;
    if (*((_QWORD *)&v230 + 1))
    {
      v171 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
      do
        v172 = __ldxr(v171);
      while (__stxr(v172 + 1, v171));
    }
    turi::gl_sarray::gl_sarray((uint64_t)v223, (uint64_t *)&v202);
    std::string::basic_string[abi:ne180100]<0>(&__p, "prob_preds");
    turi::gl_sframe::add_column((uint64_t)v217, (uint64_t)v223, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v223);
    v173 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1))
    {
      v174 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      goto LABEL_283;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v223, "");
    turi::supervised::xgboost::xgboost_model::predict_impl((turi::supervised::xgboost::xgboost_model *)a1, (uint64_t)a2, (uint64_t *)v223, &v200);
    turi::unity_sarray::construct_from_sarray(v158, &v200);
    v176 = v201;
    if (v201)
    {
      v177 = (unint64_t *)&v201->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    if ((char)v224 < 0)
      operator delete(v223[0]);
    v199 = v230;
    if (*((_QWORD *)&v230 + 1))
    {
      v179 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
      do
        v180 = __ldxr(v179);
      while (__stxr(v180 + 1, v179));
    }
    turi::gl_sarray::gl_sarray((uint64_t)v223, (uint64_t *)&v199);
    std::string::basic_string[abi:ne180100]<0>(&__p, "preds");
    turi::gl_sframe::add_column((uint64_t)v217, (uint64_t)v223, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v223);
    v173 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
    if (*((_QWORD *)&v199 + 1))
    {
      v181 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
      do
        v175 = __ldaxr(v181);
      while (__stlxr(v175 - 1, v181));
LABEL_283:
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
  }
LABEL_286:
  v198 = 0;
  v198 = turi::gl_sframe::size((turi::gl_sframe *)v217);
  v182 = (void **)operator new(0x20uLL);
  *v182 = &off_24D94AC48;
  v182[1] = &v198;
  v182[2] = v217;
  v182[3] = v219;
  v225 = v182;
  turi::in_parallel((turi::thread_pool *)v223);
  v183 = v225;
  if (v225 == v223)
  {
    v184 = 4;
    v183 = v223;
  }
  else
  {
    if (!v225)
      goto LABEL_291;
    v184 = 5;
  }
  (*((void (**)(void))*v183 + v184))();
LABEL_291:
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v185 = v219[0];
  if (v219[1] != v219[0])
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)&v185[v187] + 64))(v223);
      __p.__r_.__value_.__r.__words[0] = v220[0] + v186;
      v189 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)(v220[0] + v186), (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v189 + 14, (unsigned int *)v223);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v223);
      ++v188;
      v185 = v219[0];
      v187 += 16;
      v186 += 24;
    }
    while (v188 < (v219[1] - v219[0]) >> 4);
  }
  v190 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
  if (*((_QWORD *)&v230 + 1))
  {
    v191 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  *(_QWORD *)v217 = off_24D91E9C0;
  v193 = *(std::__shared_weak_count **)&v217[16];
  if (*(_QWORD *)&v217[16])
  {
    v194 = (unint64_t *)(*(_QWORD *)&v217[16] + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v221);
  turi::gl_sarray_writer::~gl_sarray_writer((turi::gl_sarray_writer *)&v208);
  v223[0] = &v218;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
  v223[0] = v219;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
  v223[0] = v220;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v210, v211);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v213);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v215, v216[0]);
}

void sub_2185C5164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  STACK[0x2A0] = (unint64_t)&a53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = (unint64_t)&a63;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = (unint64_t)&STACK[0x200];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a29, (char *)a30);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)&a33);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&a39, (_QWORD *)a40);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::extract_features(turi::supervised::xgboost::xgboost_model *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float *v44;
  double *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void **v50;
  _QWORD *v51;
  uint64_t v52;
  std::string *v53;
  __int128 v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  unsigned int v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  void ***v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *p_shared_owners;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  void *__p;
  _BYTE *v133;
  char v134;
  void **v135[2];
  uint64_t v136;
  char v137[8];
  std::__shared_weak_count *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  float *v147;
  float *v148;
  uint64_t v149;
  void **v150;
  _BYTE v151[13];
  void **v152[2];
  char v153;
  void ***v154;
  _BYTE v155[24];
  _BYTE *v156;
  _BYTE v157[24];
  _BYTE *v158;
  _QWORD v159[4];

  v159[2] = *MEMORY[0x24BDAC8D0];
  v147 = 0;
  v148 = 0;
  v149 = 0;
  turi::supervised::supervised_learning_model_base::construct_ml_data_using_current_metadata((uint64_t)a1, a2, a3, (uint64_t)v137);
  *(_QWORD *)((char *)v159 + 5) = 0x700000000000000;
  v159[0] = 0;
  turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(v135, v137, v159, 2, 0);
  switch(BYTE4(v159[1]))
  {
    case 2:
      v6 = (unint64_t *)v159[0];
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = v159[0];
        if (v159[0])
        {
          if (*(char *)(v159[0] + 31) < 0)
            operator delete(*(void **)(v159[0] + 8));
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v23 = (unint64_t *)v159[0];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v159[0];
        if (v159[0])
        {
          v27 = *(void **)(v159[0] + 8);
          if (v27)
          {
            *(_QWORD *)(v159[0] + 16) = v27;
            operator delete(v27);
          }
          v10 = v26;
          v11 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v12 = (unint64_t *)v159[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v159[0];
        if (v159[0])
        {
          v152[0] = (void **)(v159[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v152);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v28 = (unint64_t *)v159[0];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v15 = v159[0];
        if (v159[0])
        {
          v152[0] = (void **)(v159[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v152);
LABEL_35:
          v10 = v15;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v31 = (unint64_t *)v159[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v159[0];
        if (v159[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v159[0] + 16));
          v10 = v34;
          v22 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v16 = (unint64_t *)v159[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v159[0];
        if (v159[0])
        {
          v20 = *(void **)(v159[0] + 48);
          if (v20)
          {
            *(_QWORD *)(v159[0] + 56) = v20;
            operator delete(v20);
          }
          v21 = *(void **)(v19 + 24);
          if (v21)
          {
            *(_QWORD *)(v19 + 32) = v21;
            operator delete(v21);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v19 + 8);
          v10 = v19;
          v22 = 2071181815;
LABEL_41:
          v11 = v22 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v10, v11);
        }
      }
      break;
    default:
      break;
  }
  memset(v159, 0, 13);
  v35 = *(_QWORD *)(*((_QWORD *)a1 + 208) + 208);
  v36 = (*(uint64_t (**)(void ***))v135[0])(v135);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, float **, _QWORD))(*(_QWORD *)v35 + 80))(v35, v36, &v136, &v147, 0);
  std::string::basic_string[abi:ne180100]<0>(v152, "max_iterations");
  if (turi::option_manager::is_option((uint64_t)a1 + 224, (const void **)v152))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "max_iterations");
    v37 = *(_QWORD *)turi::option_manager::value((uint64_t)a1 + 224, (const void **)&__p);
    if (v134 < 0)
      operator delete(__p);
  }
  else
  {
    v37 = 1;
  }
  if (v153 < 0)
    operator delete(v152[0]);
  if ((*(unsigned int (**)(turi::supervised::xgboost::xgboost_model *))(*(_QWORD *)a1 + 232))(a1))
  {
    v38 = turi::supervised::xgboost::xgboost_model::num_classes(a1);
    if (v38 <= 2)
      v39 = 1;
    else
      v39 = v38;
  }
  else
  {
    v39 = 1;
  }
  v40 = operator new();
  turi::sarray<turi::flexible_type>::sarray(v40);
  std::shared_ptr<turi::sarray<turi::flexible_type>>::shared_ptr[abi:ne180100]<turi::sarray<turi::flexible_type>,void>(a4, v40);
  v131 = a4;
  turi::sarray<turi::flexible_type>::open_for_write(*a4, 1, 0);
  turi::sarray<turi::flexible_type>::set_type(*a4, 3);
  (*(void (**)(void ***__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a4 + 32))(v152, *a4, 0);
  v41 = v39 * v37;
  std::vector<double>::vector(&__p, v41);
  if (v140 != v139)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      if (v41)
      {
        v44 = v147;
        v45 = (double *)__p;
        v46 = v41;
        v47 = v43;
        do
        {
          v43 = v47 + 1;
          *v45++ = v44[v47++];
          --v46;
        }
        while (v46);
      }
      *(_QWORD *)&v151[5] = 0x300000000000000;
      *(_QWORD *)v151 = 0;
      v48 = (_QWORD *)operator new();
      v49 = v48;
      *v48 = 0;
      v48[1] = 0;
      v50 = (void **)(v48 + 1);
      v48[2] = 0;
      v48[3] = 0;
      *(_QWORD *)v151 = v48;
      *v48 = 1;
      switch(v151[12])
      {
        case 2:
          if (*v48 != 1)
          {
            v51 = (_QWORD *)operator new();
            v52 = *(_QWORD *)v151;
            *v51 = **(_QWORD **)v151;
            v53 = (std::string *)(v51 + 1);
            if (*(char *)(v52 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
            }
            else
            {
              v54 = *(_OWORD *)(v52 + 8);
              v51[3] = *(_QWORD *)(v52 + 24);
              *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
            }
            *(_QWORD *)v151 = v51;
            *v51 = 1;
            do
            {
              v85 = __ldaxr(v49);
              v86 = v85 - 1;
            }
            while (__stlxr(v86, v49));
            if (!v86)
            {
              v71 = 0x1012C404EF22A49;
              if (*((char *)v49 + 31) < 0)
              {
                operator delete(*v50);
                v71 = 0x1012C404EF22A49;
              }
              goto LABEL_104;
            }
          }
          break;
        case 3:
          if (*v48 != 1)
          {
            v66 = (_QWORD *)operator new();
            v67 = *(_QWORD *)v151;
            *v66 = **(_QWORD **)v151;
            v66[2] = 0;
            v66[3] = 0;
            v66[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v66 + 1, *(const void **)(v67 + 8), *(_QWORD *)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 3);
            *(_QWORD *)v151 = v66;
            *v66 = 1;
            do
            {
              v68 = __ldaxr(v49);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v49));
            if (!v69)
            {
              v70 = *v50;
              v71 = 0x1080C409938AC02;
              if (*v50)
              {
                v49[2] = v70;
                operator delete(v70);
                v71 = 0x1080C409938AC02;
              }
              goto LABEL_104;
            }
          }
          break;
        case 4:
          if (*v48 != 1)
          {
            v55 = (_QWORD *)operator new();
            v56 = *(_QWORD *)v151;
            *v55 = **(_QWORD **)v151;
            v55[2] = 0;
            v55[3] = 0;
            v55[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v55 + 1, *(uint64_t **)(v56 + 8), *(uint64_t **)(v56 + 16), (uint64_t)(*(_QWORD *)(v56 + 16) - *(_QWORD *)(v56 + 8)) >> 4);
            *(_QWORD *)v151 = v55;
            *v55 = 1;
            do
            {
              v57 = __ldaxr(v49);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v49));
            if (!v58)
            {
              v150 = v50;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v150);
              goto LABEL_88;
            }
          }
          break;
        case 5:
          if (*v48 != 1)
          {
            v72 = (_QWORD *)operator new();
            v73 = *(_QWORD *)v151;
            *v72 = **(_QWORD **)v151;
            v72[2] = 0;
            v72[3] = 0;
            v72[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v72 + 1, *(uint64_t **)(v73 + 8), *(uint64_t **)(v73 + 16), (uint64_t)(*(_QWORD *)(v73 + 16) - *(_QWORD *)(v73 + 8)) >> 5);
            *(_QWORD *)v151 = v72;
            *v72 = 1;
            do
            {
              v74 = __ldaxr(v49);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v49));
            if (!v75)
            {
              v150 = v50;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v150);
LABEL_88:
              v71 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            }
          }
          break;
        case 8:
          if (*v48 != 1)
          {
            v76 = operator new();
            v77 = *(_QWORD *)v151;
            *(_QWORD *)v76 = **(_QWORD **)v151;
            *(_QWORD *)(v76 + 8) = *(_QWORD *)(v77 + 8);
            v78 = *(_QWORD *)(v77 + 16);
            *(_QWORD *)(v76 + 16) = v78;
            if (v78)
            {
              v79 = (unsigned int *)(v78 + 8);
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
            }
            v81 = *(_OWORD *)(v77 + 24);
            v82 = *(_OWORD *)(v77 + 40);
            *(_OWORD *)(v76 + 56) = *(_OWORD *)(v77 + 56);
            *(_OWORD *)(v76 + 40) = v82;
            *(_OWORD *)(v76 + 24) = v81;
            *(_QWORD *)v151 = v76;
            *(_QWORD *)v76 = 1;
            do
            {
              v83 = __ldaxr(v49);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v49));
            if (!v84)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v49 + 2);
              v65 = -235920773;
              goto LABEL_97;
            }
          }
          break;
        case 9:
          if (*v48 != 1)
          {
            v59 = (_QWORD *)operator new();
            v60 = *(_QWORD *)v151 + 8;
            *v59 = **(_QWORD **)v151;
            turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, v60);
            *(_QWORD *)v151 = v59;
            *v59 = 1;
            do
            {
              v61 = __ldaxr(v49);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v49));
            if (!v62)
            {
              v63 = (void *)v49[6];
              if (v63)
              {
                v49[7] = v63;
                operator delete(v63);
              }
              v64 = (void *)v49[3];
              if (v64)
              {
                v49[4] = v64;
                operator delete(v64);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v50);
              v65 = 2071181815;
LABEL_97:
              v71 = v65 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x219A19A08](v49, v71);
            }
          }
          break;
        default:
          break;
      }
      if ((void **)(*(_QWORD *)v151 + 8) != &__p)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*(_QWORD *)v151 + 8), (char *)__p, (uint64_t)v133, (v133 - (_BYTE *)__p) >> 3);
      if (!v156)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v156 + 48))(v156, v151);
      switch(v151[12])
      {
        case 2:
          v87 = *(unint64_t **)v151;
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            v90 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              if (*(char *)(*(_QWORD *)v151 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v151 + 8));
              v91 = v90;
              v92 = 0x1012C404EF22A49;
              goto LABEL_149;
            }
          }
          break;
        case 3:
          v104 = *(unint64_t **)v151;
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (!v106)
          {
            v107 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              v108 = *(void **)(*(_QWORD *)v151 + 8);
              if (v108)
              {
                *(_QWORD *)(*(_QWORD *)v151 + 16) = v108;
                operator delete(v108);
              }
              v91 = v107;
              v92 = 0x1080C409938AC02;
              goto LABEL_149;
            }
          }
          break;
        case 4:
          v93 = *(unint64_t **)v151;
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
          {
            v96 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              v150 = (void **)(*(_QWORD *)v151 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v150);
              goto LABEL_142;
            }
          }
          break;
        case 5:
          v109 = *(unint64_t **)v151;
          do
          {
            v110 = __ldaxr(v109);
            v111 = v110 - 1;
          }
          while (__stlxr(v111, v109));
          if (!v111)
          {
            v96 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              v150 = (void **)(*(_QWORD *)v151 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v150);
LABEL_142:
              v91 = v96;
              v92 = 0x1020C405E66F15BLL;
              goto LABEL_149;
            }
          }
          break;
        case 8:
          v112 = *(unint64_t **)v151;
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (!v114)
          {
            v115 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v151 + 16));
              v91 = v115;
              v103 = -235920773;
              goto LABEL_148;
            }
          }
          break;
        case 9:
          v97 = *(unint64_t **)v151;
          do
          {
            v98 = __ldaxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
          {
            v100 = *(_QWORD *)v151;
            if (*(_QWORD *)v151)
            {
              v101 = *(void **)(*(_QWORD *)v151 + 48);
              if (v101)
              {
                *(_QWORD *)(*(_QWORD *)v151 + 56) = v101;
                operator delete(v101);
              }
              v102 = *(void **)(v100 + 24);
              if (v102)
              {
                *(_QWORD *)(v100 + 32) = v102;
                operator delete(v102);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v100 + 8);
              v91 = v100;
              v103 = 2071181815;
LABEL_148:
              v92 = v103 | 0x1030C4000000000;
LABEL_149:
              MEMORY[0x219A19A08](v91, v92);
            }
          }
          break;
        default:
          break;
      }
      ++v42;
    }
    while (v42 < v140 - v139);
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*v131 + 40))(*v131);
  if (__p)
  {
    v133 = __p;
    operator delete(__p);
  }
  v116 = v158;
  if (v158 == v157)
  {
    v117 = 4;
    v116 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_158;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_158:
  v118 = v156;
  if (v156 == v155)
  {
    v119 = 4;
    v118 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_163;
    v119 = 5;
  }
  (*(void (**)(void))(*v118 + 8 * v119))();
LABEL_163:
  v120 = v154;
  if (v154 == v152)
  {
    v121 = 4;
    v120 = v152;
    goto LABEL_167;
  }
  if (v154)
  {
    v121 = 5;
LABEL_167:
    ((void (*)(void))(*v120)[v121])();
  }
  turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)v135);
  v122 = v146;
  if (v146)
  {
    p_shared_owners = (unint64_t *)&v146->__shared_owners_;
    do
      v124 = __ldaxr(p_shared_owners);
    while (__stlxr(v124 - 1, p_shared_owners));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v135[0] = (void **)&v145;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v135);
  v125 = v144;
  if (v144)
  {
    v126 = (unint64_t *)&v144->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v135[0] = (void **)&v143;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](v135);
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  v128 = v138;
  if (v138)
  {
    v129 = (unint64_t *)&v138->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
}

void sub_2185C617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;

  MEMORY[0x219A19A08](v42, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v43 - 212))
  {
    case 2:
      v45 = *(unint64_t **)(v43 - 224);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = *(_QWORD *)(v43 - 224);
        if (v48)
        {
          if (*(char *)(v48 + 31) < 0)
            operator delete(*(void **)(v48 + 8));
          MEMORY[0x219A19A08](v48, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v59 = *(unint64_t **)(v43 - 224);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_40;
      v62 = *(_QWORD **)(v43 - 224);
      if (!v62)
        goto LABEL_39;
      v63 = (void *)v62[1];
      if (v63)
      {
        v62[2] = v63;
        operator delete(v63);
      }
      v57 = v62;
      v64 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v49 = *(unint64_t **)(v43 - 224);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_40;
      v52 = *(_QWORD **)(v43 - 224);
      if (!v52)
        goto LABEL_39;
      *(_QWORD *)(v43 - 232) = v52 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 232));
      goto LABEL_31;
    case 5:
      v65 = *(unint64_t **)(v43 - 224);
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (v67)
        goto LABEL_40;
      v52 = *(_QWORD **)(v43 - 224);
      if (!v52)
        goto LABEL_39;
      *(_QWORD *)(v43 - 232) = v52 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 232));
LABEL_31:
      v57 = v52;
      v64 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v68 = *(unint64_t **)(v43 - 224);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_40;
      v71 = *(_QWORD *)(v43 - 224);
      if (!v71)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v71 + 16));
      v57 = (_QWORD *)v71;
      v58 = -235920773;
      goto LABEL_37;
    case 9:
      v53 = *(unint64_t **)(v43 - 224);
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (v55)
        goto LABEL_40;
      v56 = *(_QWORD **)(v43 - 224);
      if (!v56)
        goto LABEL_39;
      v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v56);
      v58 = 2071181815;
LABEL_37:
      v64 = v58 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v57, v64);
LABEL_39:
      *(_QWORD *)(v43 - 224) = 0;
LABEL_40:
      if (__p)
        operator delete(__p);
      turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((_QWORD *)(v43 - 208));
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a9);
      turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData((turi::supervised::xgboost::DMatrixMLData *)&a16);
      turi::ml_data::~ml_data((turi::ml_data *)&a42);
      v72 = *(void **)(v43 - 256);
      if (v72)
      {
        *(_QWORD *)(v43 - 248) = v72;
        operator delete(v72);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::supervised::xgboost::get_index_map_with_escaping(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t j;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t k;
  uint64_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  const char *v72;
  char __str[256];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v3 = **a1;
  if ((*a1)[1] != v3)
  {
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * v5);
      v7 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *(_DWORD *)(v7 + 24);
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      else
      {
        v11 = *(_DWORD *)(v7 + 24);
      }
      switch(v11)
      {
        case 0:
          v43 = (uint64_t *)(**a1 + 16 * v5);
          v44 = *v43;
          v45 = (std::__shared_weak_count *)v43[1];
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            v48 = *(unsigned __int8 *)(v44 + 28);
            do
              v49 = __ldaxr(v46);
            while (__stlxr(v49 - 1, v46));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          else
          {
            v48 = *(unsigned __int8 *)(v44 + 28);
          }
          v65 = (uint64_t *)(**a1 + 16 * v5);
          v66 = *v65;
          v67 = (std::__shared_weak_count *)v65[1];
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            v70 = *(_QWORD *)(v66 + 104);
            do
              v71 = __ldaxr(v68);
            while (__stlxr(v71 - 1, v68));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          else
          {
            v70 = *(_QWORD *)(v66 + 104);
          }
          snprintf(__str, 0x100uLL, "{%zd}", v70);
          if (v48)
            v72 = "q";
          else
            v72 = "int";
          xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v70, __str, v72);
          break;
        case 1:
        case 3:
          for (i = 0; ; ++i)
          {
            v14 = (uint64_t *)(**a1 + 16 * v5);
            v15 = *v14;
            v16 = (std::__shared_weak_count *)v14[1];
            if (v16)
            {
              v17 = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
              v19 = *(_QWORD *)(v15 + 64);
              do
                v20 = __ldaxr(v17);
              while (__stlxr(v20 - 1, v17));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            else
            {
              v19 = *(_QWORD *)(v15 + 64);
            }
            if (i >= v19)
              break;
            v21 = (uint64_t *)(**a1 + 16 * v5);
            v22 = *v21;
            v23 = (std::__shared_weak_count *)v21[1];
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
              v26 = *(_QWORD *)(v22 + 104);
              do
                v27 = __ldaxr(v24);
              while (__stlxr(v27 - 1, v24));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            else
            {
              v26 = *(_QWORD *)(v22 + 104);
            }
            snprintf(__str, 0x100uLL, "{%zd}", v26 + i);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v26 + i, __str, "i");
          }
          break;
        case 2:
        case 7:
          for (j = 0; ; ++j)
          {
            v29 = (uint64_t *)(**a1 + 16 * v5);
            v30 = *v29;
            v31 = (std::__shared_weak_count *)v29[1];
            if (v31)
            {
              v32 = (unint64_t *)&v31->__shared_owners_;
              do
                v33 = __ldxr(v32);
              while (__stxr(v33 + 1, v32));
              v34 = *(_QWORD *)(v30 + 64);
              do
                v35 = __ldaxr(v32);
              while (__stlxr(v35 - 1, v32));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            else
            {
              v34 = *(_QWORD *)(v30 + 64);
            }
            if (j >= v34)
              break;
            v36 = (uint64_t *)(**a1 + 16 * v5);
            v37 = *v36;
            v38 = (std::__shared_weak_count *)v36[1];
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
              v41 = *(_QWORD *)(v37 + 104);
              do
                v42 = __ldaxr(v39);
              while (__stlxr(v42 - 1, v39));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            else
            {
              v41 = *(_QWORD *)(v37 + 104);
            }
            snprintf(__str, 0x100uLL, "{%zd}", v41 + j);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v41 + j, __str, "q");
          }
          break;
        case 4:
          for (k = 0; ; ++k)
          {
            v51 = (uint64_t *)(**a1 + 16 * v5);
            v52 = *v51;
            v53 = (std::__shared_weak_count *)v51[1];
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
              v56 = *(_QWORD *)(v52 + 64);
              do
                v57 = __ldaxr(v54);
              while (__stlxr(v57 - 1, v54));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            else
            {
              v56 = *(_QWORD *)(v52 + 64);
            }
            if (k >= v56)
              break;
            v58 = (uint64_t *)(**a1 + 16 * v5);
            v59 = *v58;
            v60 = (std::__shared_weak_count *)v58[1];
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
              v63 = *(_QWORD *)(v59 + 104);
              do
                v64 = __ldaxr(v61);
              while (__stlxr(v64 - 1, v61));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            else
            {
              v63 = *(_QWORD *)(v59 + 104);
            }
            snprintf(__str, 0x100uLL, "{%zd}", v63 + k);
            xgboost_old::utils::FeatMap::PushBack((std::vector<std::string> *)a2, v63 + k, __str, "q");
          }
          break;
        default:
          break;
      }
      ++v5;
      v3 = **a1;
    }
    while (v5 < ((*a1)[1] - v3) >> 4);
  }
}

void sub_2185C6BA8(_Unwind_Exception *a1)
{
  xgboost_old::utils::FeatMap *v1;

  xgboost_old::utils::FeatMap::~FeatMap(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::xgboost_model::get_trees(turi::supervised::xgboost::xgboost_model *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9[3];
  _BYTE v10[24];
  void *__p;
  void *v12;
  uint64_t *v13[2];
  void ***v14;

  v4 = (uint64_t *)*((_QWORD *)this + 48);
  v13[0] = *((uint64_t **)this + 47);
  v13[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 1);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  turi::supervised::xgboost::get_index_map_with_escaping(v13, (uint64_t)v10);
  (*(void (**)(void ***__return_ptr, _QWORD, _BYTE *, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 208) + 208)
                                                                         + 88))(v9, *(_QWORD *)(*((_QWORD *)this + 208) + 208), v10, 2);
  turi::supervised::xgboost::convert_vec_string((const std::string **)v9, a2);
  v14 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  v9[0] = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v9);
  if (v4)
  {
    v7 = (unint64_t *)(v4 + 1);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(uint64_t *))(*v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
}

void sub_2185C6CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 40) = v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  xgboost_old::utils::FeatMap::~FeatMap((xgboost_old::utils::FeatMap *)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v5 - 56);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::SaveModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[8];
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a1 + 72);
  v7 = *(_OWORD *)(a1 + 152);
  v8 = *(_OWORD *)(a1 + 184);
  v20[6] = *(_OWORD *)(a1 + 168);
  v20[7] = v8;
  v21 = *(_QWORD *)(a1 + 200);
  v9 = *(_OWORD *)(a1 + 88);
  v20[0] = v6;
  v20[1] = v9;
  v10 = *(_OWORD *)(a1 + 120);
  v20[2] = *(_OWORD *)(a1 + 104);
  v20[3] = v10;
  v20[4] = *(_OWORD *)(a1 + 136);
  v20[5] = v7;
  HIDWORD(v20[0]) = a3;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a2 + 8))(a2, v20, 136);
  v11 = *(unsigned __int8 *)(a1 + 271);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a1 + 256);
  v22 = v11;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v22, 8);
  if (v22)
  {
    v12 = *(char *)(a1 + 271);
    if (v12 >= 0)
      v13 = a1 + 248;
    else
      v13 = *(_QWORD *)(a1 + 248);
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 271);
    else
      v14 = *(_QWORD *)(a1 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v13, v14);
  }
  v15 = *(unsigned __int8 *)(a1 + 239);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a1 + 224);
  v22 = v15;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v22, 8);
  if (v22)
  {
    v16 = *(char *)(a1 + 239);
    if (v16 >= 0)
      v17 = a1 + 216;
    else
      v17 = *(_QWORD *)(a1 + 216);
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 239);
    else
      v18 = *(_QWORD *)(a1 + 224);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v17, v18);
  }
  v22 = (uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v22, 8);
  if (v22)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208), a2, a3);
}

uint64_t turi::supervised::xgboost::xgboost_model::save_impl(turi::supervised::xgboost::xgboost_model *this, turi::oarchive *a2)
{
  return turi::supervised::xgboost::xgboost_model::_save(this, a2, 1);
}

uint64_t turi::supervised::xgboost::xgboost_model::load_version(turi::supervised::xgboost::xgboost_model *this, turi::iarchive *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12[2];

  assert_msg(a3 < 0xA, (uint64_t)"This model version cannot be loaded. Please re-save your state.", a3, a4, a5, a6, a7, a8, v12[0]);
  if (a3 <= 8)
    turi::supervised::xgboost::xgboost_model::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 47);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)this + 40);
  turi::option_manager::load((char **)this + 28, a2);
  v12[0] = (uint64_t)&unk_24D94A638;
  v12[1] = (uint64_t)a2;
  return xgboost_old::learner::BoostLearner::LoadModel(*((std::string **)this + 208), (dmlc::Stream *)v12, 1);
}

uint64_t xgboost_old::learner::BoostLearner::LoadModel(std::string *this, dmlc::Stream *a2, char a3)
{
  _BOOL8 v6;
  const char *v7;
  _BOOL8 v8;
  const char *v9;
  std::string::size_type v10;
  _BOOL8 v11;
  const char *v12;
  std::string::size_type *p_size;
  _BOOL8 v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  std::string::__raw *v18;
  std::string::size_type v19;
  const char *v20;
  std::string::pointer data;
  std::string::size_type v22;
  char *v23;
  char *size;
  int64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t result;
  unint64_t v39;
  std::string::size_type __n[5];

  __n[4] = *MEMORY[0x24BDAC8D0];
  v6 = (**(uint64_t (***)(dmlc::Stream *, char *, uint64_t))a2)(a2, (char *)&this[3], 136) != 0;
  xgboost_old::utils::Check(v6, "BoostLearner: wrong model format", v7);
  __n[0] = 0;
  v8 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, __n, 8) != 0;
  xgboost_old::utils::Check(v8, "BoostLearner: wrong model format", v9);
  v10 = __n[0];
  if (__n[0] >= 0xFFFFFFFF)
  {
    LODWORD(v39) = 0;
    v11 = (**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v39, 4) != 0;
    xgboost_old::utils::Check(v11, "BoostLearner: wrong model format", v12);
    v10 = HIDWORD(__n[0]);
    __n[0] >>= 32;
  }
  if (v10)
  {
    p_size = &this[10].__r_.__value_.__l.__size_;
    std::string::resize((std::string *)((char *)this + 248), v10, 0);
    if (this[11].__r_.__value_.__s.__data_[7] < 0)
      p_size = (std::string::size_type *)*p_size;
    v14 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, std::string::size_type))a2)(a2, p_size, __n[0]) != 0;
    xgboost_old::utils::Check(v14, "BoostLearner: wrong model format", v15);
  }
  __n[0] = 0;
  v16 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type *, uint64_t))a2)(a2, __n, 8);
  if (v16)
  {
    v18 = (std::string::__raw *)&this[9];
    v19 = __n[0];
    std::string::resize(this + 9, __n[0], 0);
    if (!__n[0])
      goto LABEL_12;
    if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
      v18 = (std::string::__raw *)v18->__words[0];
    v16 = (**(uint64_t (***)(dmlc::Stream *, std::string::__raw *, std::string::size_type))a2)(a2, v18, v19);
    if (v16)
LABEL_12:
      v16 = 1;
  }
  xgboost_old::utils::Check(v16, "BoostLearner: wrong model format", v17);
  data = this[10].__r_.__value_.__l.__data_;
  if (data)
    (*(void (**)(std::string::pointer))(*(_QWORD *)data + 8))(data);
  v22 = this[8].__r_.__value_.__r.__words[2];
  if (v22)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 104))(v22);
  if ((a3 & 1) != 0)
  {
    size = (char *)this[14].__r_.__value_.__l.__size_;
    v23 = (char *)this[14].__r_.__value_.__r.__words[2];
    v25 = v23 - size;
    if (v23 == size)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = v25 / 24;
      if (v27 <= 1)
        v27 = 1;
      do
      {
        v28 = *(_QWORD *)size;
        size += 24;
        v29 = *(_DWORD *)(v28 + 24);
        if (v26 <= v29)
          v26 = v29;
        --v27;
      }
      while (v27);
    }
    LODWORD(__n[0]) = v26;
    rabit::engine::Allreduce_((uint64_t)__n, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,unsigned int>, 3, 0, 0, 0);
    v31 = LODWORD(__n[0]);
    v30 = HIDWORD(this[3].__r_.__value_.__r.__words[0]);
    if (LODWORD(__n[0]) > v30)
    {
      HIDWORD(this[3].__r_.__value_.__r.__words[0]) = __n[0];
      v30 = v31;
    }
  }
  else
  {
    v30 = HIDWORD(this[3].__r_.__value_.__r.__words[0]);
  }
  xgboost_old::utils::SPrintf((xgboost_old::utils *)__n, (char *)0x19, "%d", v20, v30);
  xgboost_old::learner::BoostLearner::SetParam((xgboost_old::learner::BoostLearner *)this, "bst:num_feature", (char *)__n);
  xgboost_old::learner::BoostLearner::InitObjGBM((xgboost_old::learner::BoostLearner *)this, v32, v33);
  xgboost_old::utils::SPrintf((xgboost_old::utils *)__n, (char *)0x20, "%u", v34, LODWORD(this[3].__r_.__value_.__r.__words[1]));
  (*(void (**)(std::string::size_type, const char *, std::string::size_type *))(*(_QWORD *)this[10].__r_.__value_.__l.__data_
                                                                                         + 16))(this[10].__r_.__value_.__r.__words[0], "num_class", __n);
  v39 = 0;
  v35 = (**(uint64_t (***)(dmlc::Stream *, unint64_t *, uint64_t))a2)(a2, &v39, 8);
  if (v35)
  {
    v37 = v39;
    std::vector<float>::resize((uint64_t)&this[12].__r_.__value_.__l.__size_, v39);
    if (!v39
      || (v35 = (**(uint64_t (***)(dmlc::Stream *, std::string::size_type, uint64_t))a2)(a2, this[12].__r_.__value_.__l.__size_, 4 * v37)) != 0)
    {
      v35 = 1;
    }
  }
  xgboost_old::utils::Check(v35, "BoostLearner: wrong model format", v36);
  result = (*(uint64_t (**)(std::string::size_type, dmlc::Stream *, BOOL))(*(_QWORD *)this[8].__r_.__value_.__r.__words[2]
                                                                                   + 8))(this[8].__r_.__value_.__r.__words[2], a2, HIDWORD(this[3].__r_.__value_.__r.__words[1]) != 0);
  if (!HIDWORD(this[3].__r_.__value_.__r.__words[1]))
    return (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)this[8].__r_.__value_.__r.__words[2]
                                                                                     + 40))(this[8].__r_.__value_.__r.__words[2], this[1].__r_.__value_.__l.__size_);
  return result;
}

void turi::supervised::xgboost::xgboost_model::_export_xgboost_model(std::__shared_weak_count **a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::string::size_type v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string::size_type v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  turi::flexible_type_impl *v34;
  turi::flexible_type_impl *v35;
  uint64_t v36;
  std::string *v37;
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  turi::supervised::xgboost::xgboost_model::get_trees((turi::supervised::xgboost::xgboost_model *)a1, (uint64_t)&v38);
  v10 = (unint64_t *)v38.__r_.__value_.__r.__words[0];
  v35 = 0;
  v36 = 0;
  v34 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v34, *(uint64_t **)(v38.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v38.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 16) - *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 8)) >> 4);
  switch(v38.__r_.__value_.__s.__data_[12])
  {
    case 2:
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v38.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v38.__r_.__value_.__r.__words[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_36;
        }
      }
      break;
    case 3:
      do
      {
        v16 = __ldaxr(v10);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v10));
      if (!v17)
      {
        v18 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          v19 = *(void **)(v38.__r_.__value_.__r.__words[0] + 8);
          if (v19)
          {
            *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 16) = v19;
            operator delete(v19);
          }
          v14 = v18;
          v15 = 0x1080C409938AC02;
          goto LABEL_36;
        }
      }
      break;
    case 4:
      do
      {
        v20 = __ldaxr(v10);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v10));
      if (!v21)
      {
        v22 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          v37 = (std::string *)(v38.__r_.__value_.__r.__words[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      do
      {
        v23 = __ldaxr(v10);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v10));
      if (!v24)
      {
        v22 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          v37 = (std::string *)(v38.__r_.__value_.__r.__words[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
LABEL_22:
          v14 = v22;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_36;
        }
      }
      break;
    case 8:
      do
      {
        v31 = __ldaxr(v10);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v10));
      if (!v32)
      {
        v33 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v38.__r_.__value_.__r.__words[0] + 16));
          v14 = v33;
          v30 = -235920773;
          goto LABEL_35;
        }
      }
      break;
    case 9:
      do
      {
        v25 = __ldaxr(v10);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v10));
      if (!v26)
      {
        v27 = v38.__r_.__value_.__r.__words[0];
        if (v38.__r_.__value_.__r.__words[0])
        {
          v28 = *(void **)(v38.__r_.__value_.__r.__words[0] + 48);
          if (v28)
          {
            *(_QWORD *)(v38.__r_.__value_.__r.__words[0] + 56) = v28;
            operator delete(v28);
          }
          v29 = *(void **)(v27 + 24);
          if (v29)
          {
            *(_QWORD *)(v27 + 32) = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
          v14 = v27;
          v30 = 2071181815;
LABEL_35:
          v15 = v30 | 0x1030C4000000000;
LABEL_36:
          MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      break;
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(&v38, v34, v35, (v35 - v34) >> 4);
  turi::export_xgboost_model(a1 + 47, (const std::string **)&v38, a2, a3, a4, a5);
  v37 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_2185C75A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  a13 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_2185C77BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void xgboost_old::utils::Base64OutStream::Finish(xgboost_old::utils::Base64OutStream *this, int __c)
{
  int v4;
  _QWORD *v5;

  v4 = *((_DWORD *)this + 4);
  if (v4 == 1)
  {
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[16 * (*((_BYTE *)this + 21) & 3)]);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    v4 = *((_DWORD *)this + 4);
  }
  if (v4 == 2)
  {
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 22) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*((_BYTE *)this + 21) & 3))]);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, xgboost_old::utils::base64::EncodeTable[4 * (*((_BYTE *)this + 22) & 0xF)]);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
    std::string::push_back((std::string *)this + 1, 61);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
  }
  *((_DWORD *)this + 4) = 0;
  if (__c != -1)
  {
    std::string::push_back((std::string *)this + 1, __c);
    if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
      if (*((char *)this + 47) < 0)
      {
        **((_BYTE **)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      else
      {
        *((_BYTE *)this + 24) = 0;
        *((_BYTE *)this + 47) = 0;
      }
    }
  }
  v5 = (_QWORD *)((char *)this + 24);
  if (*((char *)this + 47) < 0)
  {
    if (!*((_QWORD *)this + 4))
      return;
    v5 = (_QWORD *)*v5;
  }
  else if (!*((_BYTE *)this + 47))
  {
    return;
  }
  (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), v5);
  if (*((char *)this + 47) < 0)
  {
    **((_BYTE **)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    *((_BYTE *)this + 24) = 0;
    *((_BYTE *)this + 47) = 0;
  }
}

void xgboost_old::utils::Base64OutStream::~Base64OutStream(void **this)
{
  *this = &unk_24D94A138;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = &unk_24D94A138;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x219A19A08);
}

void xgboost_old::utils::Base64OutStream::Read(xgboost_old::utils::Base64OutStream *this, const char *a2)
{
  xgboost_old::utils::Error((xgboost_old::utils *)"Base64OutStream do not support read", a2);
}

uint64_t sub_2185C7C80()
{
  return 0;
}

void xgboost_old::utils::Base64OutStream::Write(xgboost_old::utils::Base64OutStream *this, char *a2, uint64_t a3)
{
  uint64_t v3;
  std::string *v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v6 = (std::string *)((char *)this + 24);
    v7 = *((_DWORD *)this + 4);
    do
    {
      if (v7 <= 2)
      {
        v8 = v3;
        do
        {
          v9 = *a2++;
          v10 = v7 + 1;
          *((_DWORD *)this + 4) = v10;
          *((_BYTE *)this + v10 + 20) = v9;
          v3 = v8 - 1;
          v7 = *((_DWORD *)this + 4);
        }
        while (v7 <= 2 && v8-- != 1);
      }
      if (v7 == 3)
      {
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[(unint64_t)*((unsigned __int8 *)this + 21) >> 2]);
        if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((_BYTE **)this + 3) = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            *((_BYTE *)this + 24) = 0;
            *((_BYTE *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 22) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*((_BYTE *)this + 21) & 3))]);
        if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((_BYTE **)this + 3) = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            *((_BYTE *)this + 24) = 0;
            *((_BYTE *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[((unint64_t)*((unsigned __int8 *)this + 23) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*((_BYTE *)this + 22) & 0xF))]);
        if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((_BYTE **)this + 3) = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            *((_BYTE *)this + 24) = 0;
            *((_BYTE *)this + 47) = 0;
          }
        }
        std::string::push_back(v6, xgboost_old::utils::base64::EncodeTable[*((_BYTE *)this + 23) & 0x3F]);
        if (*((char *)this + 47) < 0 && *((_QWORD *)this + 4) >= 0x100uLL)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), *((_QWORD *)this + 3));
          if (*((char *)this + 47) < 0)
          {
            **((_BYTE **)this + 3) = 0;
            *((_QWORD *)this + 4) = 0;
          }
          else
          {
            *((_BYTE *)this + 24) = 0;
            *((_BYTE *)this + 47) = 0;
          }
        }
        v7 = 0;
        *((_DWORD *)this + 4) = 0;
      }
    }
    while (v3);
  }
}

xgboost_old::learner::BoostLearner *xgboost_old::learner::BoostLearner::BoostLearner(xgboost_old::learner::BoostLearner *this)
{
  char *v2;

  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &unk_24D94A180;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 9) = 1056964608;
  *((_QWORD *)this + 10) = 0;
  v2 = (char *)this + 216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  MEMORY[0x219A19390]((char *)this + 248, "reg:linear");
  MEMORY[0x219A19390](v2, "gbtree");
  *((_DWORD *)this + 10) = 1065353216;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_2185C7FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  xgboost_old::learner::EvalSet *v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a2);
  v7 = *(void **)(v2 + 344);
  if (v7)
  {
    *(_QWORD *)(v2 + 352) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v2 + 320);
  if (v8)
  {
    *(_QWORD *)(v2 + 328) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v2 + 296);
  if (v9)
  {
    *(_QWORD *)(v2 + 304) = v9;
    operator delete(v9);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 271) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 239) < 0)
    operator delete(*v4);
  xgboost_old::learner::EvalSet::~EvalSet(v3);
  _Unwind_Resume(a1);
}

uint64_t xgboost_old::learner::BoostLearner::Load(std::string *this, dmlc::Stream *a2)
{
  return xgboost_old::learner::BoostLearner::LoadModel(this, a2, 0);
}

uint64_t xgboost_old::learner::BoostLearner::Save(uint64_t a1, uint64_t a2)
{
  return xgboost_old::learner::BoostLearner::SaveModel(a1, a2, *(_DWORD *)(a1 + 24) != 2);
}

void xgboost_old::learner::BoostLearner::~BoostLearner(xgboost_old::learner::BoostLearner *this)
{
  xgboost_old::learner::BoostLearner::~BoostLearner(this);
  JUMPOUT(0x219A19A08);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &unk_24D94A180;
  v2 = *((_QWORD *)this + 30);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 26);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
  v4 = (void *)*((_QWORD *)this + 43);
  if (v4)
  {
    *((_QWORD *)this + 44) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 40);
  if (v5)
  {
    *((_QWORD *)this + 41) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 37);
  if (v6)
  {
    *((_QWORD *)this + 38) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 272);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  xgboost_old::learner::EvalSet::~EvalSet((xgboost_old::learner::BoostLearner *)((char *)this + 48));
}

void xgboost_old::learner::EvalSet::~EvalSet(xgboost_old::learner::EvalSet *this)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 24))(v2[v5]);
      v2 = *(_QWORD **)this;
      v3 = (_QWORD *)*((_QWORD *)this + 1);
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void xgboost_old::utils::Base64InStream::~Base64InStream(void **this)
{
  *this = &unk_24D94A1D8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = &unk_24D94A1D8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::utils::Base64InStream::Read(xgboost_old::utils::Base64InStream *this, char *a2, const char *a3)
{
  uint64_t v3;
  char *v4;
  int v6;
  char v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  const char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  int v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  _BOOL8 v64;

  v3 = (uint64_t)a3;
  if (a3)
  {
    v4 = a2;
    v6 = *((_DWORD *)this + 15);
    if (!v6)
    {
      v9 = a3;
LABEL_9:
      v10 = (char *)this + 16;
      v11 = *((_DWORD *)this + 14);
      while (1)
      {
        if (v11 == -1)
        {
LABEL_107:
          v3 -= (uint64_t)v9;
          return v3;
        }
        if (v11 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x4000) != 0)
            goto LABEL_107;
        }
        else if (__maskrune(v11, 0x4000uLL))
        {
          goto LABEL_107;
        }
        v12 = xgboost_old::utils::base64::DecodeTable[*((int *)this + 14)];
        v13 = *((_QWORD *)this + 6);
        if (v13 >= *((_QWORD *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            v15 = (char *)*((_QWORD *)this + 2);
            v14 = *((_QWORD *)this + 3);
          }
          else
          {
            v14 = *((unsigned __int8 *)this + 39);
            v15 = (char *)this + 16;
          }
          v16 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v15, v14);
          *((_QWORD *)this + 5) = v16;
          if (!v16)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_30;
          }
          v13 = 0;
        }
        *((_QWORD *)this + 6) = v13 + 1;
        v17 = (char *)this + 16;
        if (*((char *)this + 39) < 0)
          v17 = *(char **)v10;
        v18 = v17[v13];
        *((_DWORD *)this + 14) = v18;
        if (v18 == -1)
        {
          v16 = 0;
        }
        else
        {
          if ((v18 & 0x80000000) != 0)
            v19 = __maskrune(v18, 0x4000uLL);
          else
            v19 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v18 + 60) & 0x4000;
          v16 = v19 == 0;
        }
LABEL_30:
        xgboost_old::utils::Check(v16, "invalid base64 format", a3);
        v21 = xgboost_old::utils::base64::DecodeTable[*((int *)this + 14)];
        *v4 = ((v12 << 18) | (v21 << 12)) >> 16;
        v22 = *((_QWORD *)this + 6);
        if (v22 >= *((_QWORD *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            v24 = (char *)*((_QWORD *)this + 2);
            v23 = *((_QWORD *)this + 3);
          }
          else
          {
            v23 = *((unsigned __int8 *)this + 39);
            v24 = (char *)this + 16;
          }
          v25 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v24, v23);
          *((_QWORD *)this + 5) = v25;
          if (!v25)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_45;
          }
          v22 = 0;
        }
        *((_QWORD *)this + 6) = v22 + 1;
        v26 = (char *)this + 16;
        if (*((char *)this + 39) < 0)
          v26 = *(char **)v10;
        v27 = v26[v22];
        *((_DWORD *)this + 14) = v27;
        if (v27 == -1)
        {
          v25 = 0;
        }
        else
        {
          if ((v27 & 0x80000000) != 0)
            v28 = __maskrune(v27, 0x4000uLL);
          else
            v28 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v27 + 60) & 0x4000;
          v25 = v28 == 0;
        }
LABEL_45:
        v29 = v9 - 1;
        xgboost_old::utils::Check(v25, "invalid base64 format", v20);
        v31 = *((int *)this + 14);
        if ((_DWORD)v31 == 61)
        {
          v52 = *((_QWORD *)this + 6);
          if (v52 < *((_QWORD *)this + 5))
            goto LABEL_87;
          if (*((char *)this + 39) < 0)
          {
            v54 = (char *)*((_QWORD *)this + 2);
            v53 = *((_QWORD *)this + 3);
          }
          else
          {
            v53 = *((unsigned __int8 *)this + 39);
            v54 = (char *)this + 16;
          }
          v55 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v54, v53);
          *((_QWORD *)this + 5) = v55;
          if (v55)
          {
            v52 = 0;
LABEL_87:
            *((_QWORD *)this + 6) = v52 + 1;
            v56 = (char *)this + 16;
            if (*((char *)this + 39) < 0)
              v56 = *(char **)v10;
            v57 = v56[v52];
          }
          else
          {
            v57 = 255;
          }
          *((_DWORD *)this + 14) = (char)v57;
          xgboost_old::utils::Check(v57 == 61, "invalid base64 format", v30);
LABEL_91:
          v58 = *((_QWORD *)this + 6);
          if (v58 < *((_QWORD *)this + 5))
          {
LABEL_97:
            *((_QWORD *)this + 6) = v58 + 1;
            if (*((char *)this + 39) < 0)
              v10 = *(char **)v10;
            v62 = v10[v58];
            *((_DWORD *)this + 14) = v62;
            if (v62 == -1)
              goto LABEL_103;
            if ((v62 & 0x80000000) != 0)
              v63 = __maskrune(v62, 0x4000uLL);
            else
              v63 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v62 + 60) & 0x4000;
            v64 = v63 != 0;
          }
          else
          {
            if (*((char *)this + 39) < 0)
            {
              v60 = (char *)*((_QWORD *)this + 2);
              v59 = *((_QWORD *)this + 3);
            }
            else
            {
              v59 = *((unsigned __int8 *)this + 39);
              v60 = (char *)this + 16;
            }
            v61 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v60, v59);
            *((_QWORD *)this + 5) = v61;
            if (v61)
            {
              v58 = 0;
              goto LABEL_97;
            }
            *((_DWORD *)this + 14) = -1;
LABEL_103:
            v64 = 1;
          }
          xgboost_old::utils::Check(v64, "invalid base64 format", a3);
          v9 = v29;
          goto LABEL_107;
        }
        v32 = v21 << 12;
        v33 = xgboost_old::utils::base64::DecodeTable[v31];
        v34 = (v32 | (v33 << 6)) >> 8;
        if (v9 == (const char *)1)
        {
          v35 = *((int *)this + 15);
          *((_DWORD *)this + 15) = v35 + 1;
          *((_BYTE *)this + v35 + 64) = v34;
          ++v4;
        }
        else
        {
          v4[1] = v34;
          v4 += 2;
          v29 = v9 - 2;
        }
        v36 = *((_QWORD *)this + 6);
        if (v36 >= *((_QWORD *)this + 5))
        {
          if (*((char *)this + 39) < 0)
          {
            v38 = (char *)*((_QWORD *)this + 2);
            v37 = *((_QWORD *)this + 3);
          }
          else
          {
            v37 = *((unsigned __int8 *)this + 39);
            v38 = (char *)this + 16;
          }
          v39 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v38, v37);
          *((_QWORD *)this + 5) = v39;
          if (!v39)
          {
            *((_DWORD *)this + 14) = -1;
            goto LABEL_64;
          }
          v36 = 0;
        }
        *((_QWORD *)this + 6) = v36 + 1;
        v40 = (char *)this + 16;
        if (*((char *)this + 39) < 0)
          v40 = *(char **)v10;
        v41 = v40[v36];
        *((_DWORD *)this + 14) = v41;
        if (v41 == -1)
        {
          v39 = 0;
        }
        else
        {
          if ((v41 & 0x80000000) != 0)
            v42 = __maskrune(v41, 0x4000uLL);
          else
            v42 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v41 + 60) & 0x4000;
          v39 = v42 == 0;
        }
LABEL_64:
        xgboost_old::utils::Check(v39, "invalid base64 format", v30);
        v43 = *((int *)this + 14);
        if ((_DWORD)v43 == 61)
          goto LABEL_91;
        v44 = xgboost_old::utils::base64::DecodeTable[v43] | ((_BYTE)v33 << 6);
        if (v29)
        {
          *v4++ = v44;
          v9 = v29 - 1;
        }
        else
        {
          v9 = 0;
          v45 = *((int *)this + 15);
          *((_DWORD *)this + 15) = v45 + 1;
          *((_BYTE *)this + v45 + 64) = v44;
        }
        v46 = *((_QWORD *)this + 6);
        if (v46 < *((_QWORD *)this + 5))
          goto LABEL_74;
        if (*((char *)this + 39) < 0)
        {
          v48 = (char *)*((_QWORD *)this + 2);
          v47 = *((_QWORD *)this + 3);
        }
        else
        {
          v47 = *((unsigned __int8 *)this + 39);
          v48 = (char *)this + 16;
        }
        v49 = (***((uint64_t (****)(_QWORD, char *, uint64_t))this + 1))(*((_QWORD *)this + 1), v48, v47);
        *((_QWORD *)this + 5) = v49;
        if (v49)
        {
          v46 = 0;
LABEL_74:
          *((_QWORD *)this + 6) = v46 + 1;
          v50 = (char *)this + 16;
          if (*((char *)this + 39) < 0)
            v50 = *(char **)v10;
          v51 = v50[v46];
          goto LABEL_77;
        }
        v51 = -1;
LABEL_77:
        v11 = v51;
        *((_DWORD *)this + 14) = v51;
        if (!v9)
          goto LABEL_107;
      }
    }
    if (v6 == 2)
    {
      v7 = *((_BYTE *)this + 64);
      if ((unint64_t)a3 < 2)
      {
        *a2 = v7;
        *((_BYTE *)this + 64) = *((_BYTE *)this + 65);
        v3 = 1;
        *((_DWORD *)this + 15) = 1;
        return v3;
      }
      *a2 = v7;
      a2[1] = *((_BYTE *)this + 65);
      v4 = a2 + 2;
      v8 = -2;
    }
    else
    {
      *a2 = *((_BYTE *)this + 64);
      v4 = a2 + 1;
      v8 = -1;
    }
    *((_DWORD *)this + 15) = 0;
    v9 = &a3[v8];
    if (&a3[v8])
      goto LABEL_9;
  }
  return v3;
}

void xgboost_old::utils::Base64InStream::Write(xgboost_old::utils::Base64InStream *this, const char *a2)
{
  xgboost_old::utils::Error((xgboost_old::utils *)"Base64InStream do not support write", a2);
}

xgboost_old::utils::StreamBufferReader *xgboost_old::utils::StreamBufferReader::StreamBufferReader(xgboost_old::utils::StreamBufferReader *this, std::string::size_type a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((int64x2_t *)this + 2) = vdupq_n_s64(1uLL);
  std::string::resize((std::string *)((char *)this + 8), a2, 0);
  return this;
}

void sub_2185C880C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

turi::table_printer *turi::table_printer::table_printer(turi::table_printer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  gettimeofday((timeval *)((char *)this + 24), 0);
  *((_QWORD *)this + 5) = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 96), 0);
  assert_msg((_DWORD)v2 == 0, (uint64_t)"Mutex create error %d", v3, v4, v5, v6, v7, v8, v2);
  v9 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 160), 0);
  assert_msg((_DWORD)v9 == 0, (uint64_t)"Mutex create error %d", v10, v11, v12, v13, v14, v15, v9);
  *((_QWORD *)this + 28) = 0xBFF0000000000000;
  v16 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 232), 0);
  assert_msg((_DWORD)v16 == 0, (uint64_t)"Mutex create error %d", v17, v18, v19, v20, v21, v22, v16);
  turi::sframe::sframe((turi::table_printer *)((char *)this + 296));
  *((_WORD *)this + 296) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 93) = 1;
  return this;
}

void sub_2185C8948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  pthread_mutex_t *v10;
  pthread_mutex_t *v11;
  pthread_mutex_t *v12;
  pthread_mutex_t *v13;

  v13 = v12;
  turi::mutex::~mutex(v13);
  turi::mutex::~mutex(v11);
  turi::mutex::~mutex(v10);
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::BoostLearner::InitObjGBM(xgboost_old::learner::BoostLearner *this, uint64_t a2, const char *a3)
{
  const char *v4;
  char *v5;
  xgboost_old::learner *v6;
  const char *v7;
  xgboost_old::gbm *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  xgboost_old::learner *v20;

  if (*((_QWORD *)this + 30))
    return;
  xgboost_old::utils::Assert(*((_QWORD *)this + 26) == 0, "GBM and obj should be NULL", a3);
  v5 = (char *)this + 248;
  v6 = (xgboost_old::learner::BoostLearner *)((char *)this + 248);
  if (*((char *)this + 271) < 0)
    v6 = *(xgboost_old::learner **)v5;
  *((_QWORD *)this + 30) = xgboost_old::learner::CreateObjFunction(v6, v4);
  v8 = (xgboost_old::learner::BoostLearner *)((char *)this + 216);
  if (*((char *)this + 239) < 0)
    v8 = *(xgboost_old::gbm **)v8;
  *((_QWORD *)this + 26) = xgboost_old::gbm::CreateGradBooster(v8, v7);
  v9 = *((char *)this + 271);
  if ((v9 & 0x80000000) == 0)
  {
    if (v9 != 13)
      goto LABEL_17;
LABEL_11:
    if (*(_QWORD *)v5 == 0x6F703A746E756F63 && *(_QWORD *)(v5 + 5) == 0x6E6F7373696F703ALL)
    {
      (*(void (**)(_QWORD, const char *, const char *))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30), "max_delta_step", "0.7");
      (***((void (****)(_QWORD, const char *, const char *))this + 26))(*((_QWORD *)this + 26), "max_delta_step", "0.7");
    }
    goto LABEL_17;
  }
  if (*((_QWORD *)this + 32) == 13)
  {
    v5 = *(char **)v5;
    goto LABEL_11;
  }
LABEL_17:
  v11 = *((_QWORD *)this + 34);
  if (*((_QWORD *)this + 35) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(v11 + v12);
      if (*((char *)v14 + 23) < 0)
        v15 = (uint64_t *)*v14;
      else
        v15 = v14;
      v16 = v14 + 3;
      if (*((char *)v14 + 47) < 0)
        v16 = (_QWORD *)*v16;
      (*(void (**)(_QWORD, uint64_t *, _QWORD *))(**((_QWORD **)this + 30) + 16))(*((_QWORD *)this + 30), v15, v16);
      v17 = (uint64_t *)(*((_QWORD *)this + 34) + v12);
      if (*((char *)v17 + 23) < 0)
        v18 = *v17;
      else
        v18 = *((_QWORD *)this + 34) + v12;
      v19 = v17 + 3;
      if (*((char *)v17 + 47) < 0)
        v19 = (_QWORD *)*v19;
      (***((void (****)(_QWORD, uint64_t, _QWORD *))this + 26))(*((_QWORD *)this + 26), v18, v19);
      ++v13;
      v11 = *((_QWORD *)this + 34);
      v12 += 48;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 35) - v11) >> 4));
  }
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 6))
  {
    v20 = (xgboost_old::learner *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 32))(*((_QWORD *)this + 30));
    xgboost_old::learner::EvalSet::AddEval((xgboost_old::learner::BoostLearner *)((char *)this + 48), v20);
  }
}

unsigned int *rabit::op::Reducer<rabit::op::Max,unsigned int>(unsigned int *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v5 = *result++;
      v4 = v5;
      if (*a2 < v5)
        *a2 = v4;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *xgboost_old::learner::CreateObjFunction(xgboost_old::learner *this, const char *a2)
{
  const char *v3;
  _QWORD *result;
  uint64_t v5;
  char *v6;

  if (!strcmp("reg:linear", (const char *)this))
  {
    result = (_QWORD *)operator new();
    v5 = 1065353216;
LABEL_16:
    *result = &unk_24D94A220;
    result[1] = v5;
    return result;
  }
  if (!strcmp("reg:logistic", (const char *)this))
  {
    result = (_QWORD *)operator new();
    v5 = 0x13F800000;
    goto LABEL_16;
  }
  if (!strcmp("binary:logistic", (const char *)this))
  {
    result = (_QWORD *)operator new();
    v5 = 0x23F800000;
    goto LABEL_16;
  }
  if (!strcmp("binary:logitraw", (const char *)this))
  {
    result = (_QWORD *)operator new();
    v5 = 0x33F800000;
    goto LABEL_16;
  }
  if (!strcmp("count:poisson", (const char *)this))
  {
    result = (_QWORD *)operator new();
    *result = &unk_24D94A2D8;
    *((_DWORD *)result + 2) = 0;
  }
  else if (!strcmp("multi:softmax", (const char *)this))
  {
    result = (_QWORD *)operator new();
    *result = &unk_24D94A380;
    result[1] = 0;
  }
  else if (!strcmp("multi:softprob", (const char *)this))
  {
    result = (_QWORD *)operator new();
    *result = &unk_24D94A380;
    result[1] = 0x100000000;
  }
  else
  {
    if (!strcmp("rank:pairwise", (const char *)this))
    {
      result = (_QWORD *)operator new();
      result[2] = 0;
      result[1] = 0x100000003;
    }
    else if (!strcmp("rank:ndcg", (const char *)this))
    {
      result = (_QWORD *)operator new();
      result[2] = 0;
      result[1] = 0x100000003;
    }
    else
    {
      if (strcmp("rank:map", (const char *)this))
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown objective function type: %s", v3, this);
      result = (_QWORD *)operator new();
      result[2] = 0;
      result[1] = 0x100000003;
    }
    *result = v6 + 16;
  }
  return result;
}

float xgboost_old::learner::RegLossObj::SetParam(xgboost_old::learner::RegLossObj *this, const char *a2, const char *a3)
{
  float result;

  if (!strcmp("scale_pos_weight", a2))
  {
    result = atof(a3);
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::RegLossObj::GetGradient(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  unsigned int *v14[6];
  int v15;
  unsigned __int8 v16;

  xgboost_old::utils::Check(*(_QWORD *)(a3 + 72) != *(_QWORD *)(a3 + 64), "label set cannot be empty", (const char *)a3);
  xgboost_old::utils::Check(((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)% (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 2) == 0, "labels are not correctly provided", v9);
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a5, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v16 = 1;
  v15 = (*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 2;
  v10 = (const char *)((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v14[0] = (unsigned int *)&v15;
  v14[1] = a1;
  v14[2] = (unsigned int *)a2;
  v14[3] = (unsigned int *)a3;
  v14[4] = (unsigned int *)&v16;
  v14[5] = a5;
  turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v10, v14);
  if (a1[3])
    v12 = "label must be in [0,1] for logistic regression";
  else
    v12 = "";
  return xgboost_old::utils::Check(v16, "%s", v11, v12);
}

const char *xgboost_old::learner::RegLossObj::DefaultEvalMetric(xgboost_old::learner::RegLossObj *this)
{
  int v1;
  const char *v2;

  v1 = *((_DWORD *)this + 3);
  v2 = "rmse";
  if (v1 == 3)
    v2 = "auc";
  if (v1 == 2)
    return "error";
  else
    return v2;
}

void xgboost_old::learner::RegLossObj::PredTransform(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  _QWORD v3[2];

  v2 = ((a2[1] - *a2) >> 2);
  v3[0] = a2;
  v3[1] = a1;
  turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(0, v2, (uint64_t)v3);
}

uint64_t xgboost_old::learner::IObjFunction::EvalTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

float xgboost_old::learner::RegLossObj::ProbToMargin(xgboost_old::learner::RegLossObj *this, float a2, uint64_t a3, const char *a4)
{
  float v4;
  uint64_t v5;

  v4 = a2;
  if ((*((_DWORD *)this + 3) - 1) <= 2)
  {
    v5 = a2 < 1.0 && a2 > 0.0;
    xgboost_old::utils::Check(v5, "base_score must be in (0,1) for logistic loss", a4);
    return -logf((float)(1.0 / v4) + -1.0);
  }
  return v4;
}

void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, const char *a2, unsigned int **a3)
{
  const char *v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  double v9;
  BOOL v10;
  turi::thread_pool *v11;
  uint64_t v12;
  double v13;
  double v14;
  turi::thread *v15;
  unint64_t v16;
  uint64_t v17[4];
  _BYTE v18[192];
  uint64_t v19;

  v5 = (const char *)a1;
  v19 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v10 = 0;
  else
    v10 = (unint64_t)v7 > 1;
  if (v10)
  {
    v11 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v18, v11);
    v12 = 0;
    v13 = (double)(unint64_t)(a2 - v5) / (double)(unint64_t)v7;
    v14 = (double)(unint64_t)v5;
    do
    {
      v15 = (turi::thread *)(v12 + 1);
      v16 = (unint64_t)(v14 + v13 * (double)(unint64_t)(v12 + 1));
      if ((turi::thread *)v12 == (turi::thread *)((char *)v7 - 1))
        v16 = (unint64_t)a2;
      v17[2] = (unint64_t)(v14 + v13 * (double)(unint64_t)v12);
      v17[3] = v16;
      v17[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v17[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v18, (uint64_t)v17, v12);
      boost::function0<void>::~function0(v17);
      v12 = (uint64_t)v15;
    }
    while (v15 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v18);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v18);
  }
  else if (a2 > v5)
  {
    do
      *(float *)&v9 = xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(a3, v5++, v9);
    while (a2 != v5);
  }
}

void sub_2185C923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

float xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, const char *a2, double a3)
{
  unsigned int *v5;
  unint64_t v6;
  float v7;
  unsigned int v8;
  unint64_t v9;
  const char *v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  float v17;
  float v18;
  float result;
  float *v20;

  v5 = a1[1];
  v6 = **a1;
  v7 = *(float *)(*(_QWORD *)a1[2] + 4 * (_QWORD)a2);
  v8 = v5[3];
  v9 = (unint64_t)a2 / v6;
  if (v8 - 1 < 2)
  {
    v7 = 1.0 / (float)(expf(-v7) + 1.0);
  }
  else if (v8 && v8 != 3)
  {
    xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2);
  }
  v10 = &a2[-(v9 * v6)];
  v11 = a1[3];
  v12 = *((_QWORD *)v11 + 14);
  v13 = 1.0;
  if (*((_QWORD *)v11 + 15) != v12)
    v13 = *(float *)(v12 + 4 * (_QWORD)v10);
  v14 = *(float *)(*((_QWORD *)v11 + 8) + 4 * (_QWORD)v10);
  if (v14 == 1.0)
    v13 = v13 * *((float *)v5 + 2);
  v15 = v5[3];
  if (v15)
  {
    if (v14 < 0.0 || v14 > 1.0)
      *(_BYTE *)a1[4] = 0;
    *(float *)&a3 = v7;
    if (v15 - 1 >= 2)
    {
      if (v15 != 3)
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2, a3);
      *(float *)&a3 = 1.0 / (float)(expf(-v7) + 1.0);
    }
    v17 = *(float *)&a3 - v14;
    if (v15 - 1 >= 2)
    {
      if (v15 != 3)
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2);
      v7 = 1.0 / (float)(expf(-v7) + 1.0);
    }
    v18 = v7 * (float)(1.0 - v7);
    if (v18 < 1.0e-16)
      v18 = 1.0e-16;
  }
  else
  {
    v17 = v7 - v14;
    v18 = 1.0;
  }
  result = v13 * v18;
  v20 = (float *)(*(_QWORD *)a1[5] + 8 * (_QWORD)a2);
  *v20 = v13 * v17;
  v20[1] = result;
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A8DBLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A8DBLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1, double a2)
{
  const char *i;

  for (i = *(const char **)(a1 + 8); (unint64_t)i < *(_QWORD *)(a1 + 16); ++i)
    *(float *)&a2 = xgboost_old::learner::RegLossObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i, a2);
}

void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  const char *v9;
  double v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  turi::thread_pool *v15;
  uint64_t v16;
  double v17;
  double v18;
  turi::thread *v19;
  unint64_t v20;
  uint64_t v21[4];
  _BYTE v22[192];
  uint64_t v23;

  v5 = (unint64_t)a1;
  v23 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v11 = 0;
  else
    v11 = (unint64_t)v7 > 1;
  if (v11)
  {
    v15 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v22, v15);
    v16 = 0;
    v17 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v18 = (double)v5;
    do
    {
      v19 = (turi::thread *)(v16 + 1);
      v20 = (unint64_t)(v18 + v17 * (double)(unint64_t)(v16 + 1));
      if ((turi::thread *)v16 == (turi::thread *)((char *)v7 - 1))
        v20 = a2;
      v21[2] = (unint64_t)(v18 + v17 * (double)(unint64_t)v16);
      v21[3] = v20;
      v21[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v21[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v22, (uint64_t)v21, v16);
      boost::function0<void>::~function0(v21);
      v16 = (uint64_t)v19;
    }
    while (v19 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v22);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v22);
  }
  else if (a2 > v5)
  {
    v12 = **(_QWORD **)a3;
    do
    {
      LODWORD(v10) = *(_DWORD *)(v12 + 4 * v5);
      v13 = *(_DWORD *)(*(_QWORD *)(a3 + 8) + 12);
      if ((v13 - 1) < 2)
      {
        *(float *)&v10 = 1.0 / (float)(expf(-*(float *)&v10) + 1.0);
      }
      else
      {
        if (v13)
          v14 = v13 == 3;
        else
          v14 = 1;
        if (!v14)
          xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v9, v10);
      }
      *(_DWORD *)(v12 + 4 * v5++) = LODWORD(v10);
    }
    while (a2 != v5);
  }
}

void sub_2185C96B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872A990 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872A990 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::RegLossObj::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t ***a1, const char *a2, double a3)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = (unint64_t)a1[1];
  for (i = (unint64_t)a1[2]; v3 < i; ++v3)
  {
    v6 = ***a1;
    LODWORD(a3) = *(_DWORD *)(v6 + 4 * v3);
    v7 = *((_DWORD *)(*a1)[1] + 3);
    if ((v7 - 1) < 2)
    {
      *(float *)&a3 = 1.0 / (float)(expf(-*(float *)&a3) + 1.0);
    }
    else
    {
      if (v7)
        v8 = v7 == 3;
      else
        v8 = 1;
      if (!v8)
        xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", a2, a3);
    }
    *(_DWORD *)(v6 + 4 * v3) = LODWORD(a3);
  }
}

float xgboost_old::learner::PoissonRegression::SetParam(xgboost_old::learner::PoissonRegression *this, const char *a2, const char *a3)
{
  float result;

  if (!strcmp("max_delta_step", a2))
  {
    result = atof(a3);
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::PoissonRegression::GetGradient(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  const char *v10;
  unint64_t v11;
  const char *v12;
  _QWORD v14[5];
  unsigned __int8 v15;

  xgboost_old::utils::Check(*(float *)(a1 + 8) != 0.0, "PoissonRegression: need to set max_delta_step", (const char *)a3);
  xgboost_old::utils::Check(*(_QWORD *)(a3 + 72) != *(_QWORD *)(a3 + 64), "label set cannot be empty", v9);
  xgboost_old::utils::Check(a2[1] - *a2 == *(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64), "labels are not correctly provided", v10);
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a5, (uint64_t)(a2[1] - *a2) >> 2);
  v15 = 1;
  v11 = ((a2[1] - *a2) >> 2);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a1;
  v14[4] = &v15;
  turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v11, (uint64_t)v14);
  return xgboost_old::utils::Check(v15, "PoissonRegression: label must be nonnegative", v12);
}

void xgboost_old::learner::PoissonRegression::PredTransform(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = (uint64_t)(a2[1] - *a2) >> 2;
  v3 = a2;
  turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(0, v2, &v3);
}

void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float *v16;
  _BYTE *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  turi::thread_pool *v27;
  uint64_t v28;
  double v29;
  double v30;
  turi::thread *v31;
  unint64_t v32;
  uint64_t v33[4];
  _BYTE v34[192];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v27 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v34, v27);
    v28 = 0;
    v29 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v30 = (double)(unint64_t)a1;
    do
    {
      v31 = (turi::thread *)(v28 + 1);
      v32 = (unint64_t)(v30 + v29 * (double)(unint64_t)(v28 + 1));
      if ((turi::thread *)v28 == (turi::thread *)((char *)v7 - 1))
        v32 = a2;
      v33[2] = (unint64_t)(v30 + v29 * (double)(unint64_t)v28);
      v33[3] = v32;
      v33[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v33[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v34, (uint64_t)v33, v28);
      boost::function0<void>::~function0(v33);
      v28 = (uint64_t)v31;
    }
    while (v31 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v34);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v34);
  }
  else
  {
    v9 = a2 > (unint64_t)a1;
    v10 = a2 - (_QWORD)a1;
    if (v9)
    {
      v11 = *(_QWORD **)(a3 + 8);
      v13 = v11[14];
      v12 = v11[15];
      v15 = *(_QWORD **)(a3 + 16);
      v14 = *(_QWORD *)(a3 + 24);
      v16 = (float *)(**(_QWORD **)a3 + 4 * (_QWORD)a1);
      v17 = *(_BYTE **)(a3 + 32);
      v18 = (float *)(v13 + 4 * (_QWORD)a1);
      v19 = (float *)(v11[8] + 4 * (_QWORD)a1);
      v20 = (8 * (_QWORD)a1) | 4;
      do
      {
        if (v12 == v13)
          v21 = 1.0;
        else
          v21 = *v18;
        if (*v19 >= 0.0)
        {
          v23 = *v16;
          v22 = *v19;
          v24 = v21 * (float)(expf(*v16) - v22);
          v25 = expf(v23 + *(float *)(v14 + 8));
          v26 = (float *)(*v15 + v20);
          *(v26 - 1) = v24;
          *v26 = v21 * v25;
        }
        else
        {
          *v17 = 0;
        }
        ++v16;
        ++v18;
        ++v19;
        v20 += 8;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2185C9B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872AA3FLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872AA3FLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;

  v1 = a1[1];
  v2 = a1[2];
  v3 = v2 - v1;
  if (v2 > v1)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 24);
    v6 = *(_QWORD **)(*a1 + 8);
    v8 = v6[14];
    v7 = v6[15];
    v9 = (8 * v1) | 4;
    v10 = (float *)(**(_QWORD **)*a1 + 4 * v1);
    v11 = (float *)(v6[8] + 4 * v1);
    v12 = (float *)(v8 + 4 * v1);
    do
    {
      if (v7 == v8)
        v13 = 1.0;
      else
        v13 = *v12;
      if (*v11 >= 0.0)
      {
        v15 = *v10;
        v14 = *v11;
        v16 = v13 * (float)(expf(*v10) - v14);
        v17 = expf(v15 + *(float *)(v5 + 8));
        v18 = (float *)(**(_QWORD **)(v4 + 16) + v9);
        *(v18 - 1) = v16;
        *v18 = v13 * v17;
      }
      else
      {
        **(_BYTE **)(v4 + 32) = 0;
      }
      v9 += 8;
      ++v10;
      ++v11;
      ++v12;
      --v3;
    }
    while (v3);
  }
}

void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD **a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  float *v11;
  turi::thread_pool *v12;
  uint64_t v13;
  double v14;
  double v15;
  turi::thread *v16;
  unint64_t v17;
  uint64_t v18[4];
  _BYTE v19[192];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v12 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v19, v12);
    v13 = 0;
    v14 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v15 = (double)(unint64_t)a1;
    do
    {
      v16 = (turi::thread *)(v13 + 1);
      v17 = (unint64_t)(v15 + v14 * (double)(unint64_t)(v13 + 1));
      if ((turi::thread *)v13 == (turi::thread *)((char *)v7 - 1))
        v17 = a2;
      v18[2] = (unint64_t)(v15 + v14 * (double)(unint64_t)v13);
      v18[3] = v17;
      v18[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v18[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v19, (uint64_t)v18, v13);
      boost::function0<void>::~function0(v18);
      v13 = (uint64_t)v16;
    }
    while (v16 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v19);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v19);
  }
  else
  {
    v9 = a2 > (unint64_t)a1;
    v10 = a2 - (_QWORD)a1;
    if (v9)
    {
      v11 = (float *)(**a3 + 4 * (_QWORD)a1);
      do
      {
        *v11 = expf(*v11);
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2185C9E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872AAFBLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872AAFBLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::PoissonRegression::PredTransform(std::vector<float> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  float *v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 - v1;
  if (v2 > v1)
  {
    v4 = (float *)(***(_QWORD ***)a1 + 4 * v1);
    do
    {
      *v4 = expf(*v4);
      ++v4;
      --v3;
    }
    while (v3);
  }
}

uint64_t xgboost_old::learner::SoftmaxMultiClassObj::SetParam(xgboost_old::learner::SoftmaxMultiClassObj *this, const char *a2, const char *a3)
{
  uint64_t result;

  result = strcmp("num_class", a2);
  if (!(_DWORD)result)
  {
    result = atoi(a3);
    *((_DWORD *)this + 2) = result;
  }
  return result;
}

uint64_t xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  const char *v9;
  const char *v10;
  unint64_t v11;
  int v12;
  turi::thread *v13;
  const char *v14;
  _BOOL8 v16;
  unsigned int *v18[8];
  unint64_t v19;
  int v20;
  int v21;
  int v22;

  xgboost_old::utils::Check(a1[2] != 0, "must set num_class to use softmax", (const char *)a3);
  xgboost_old::utils::Check(*(_QWORD *)(a3 + 72) != *(_QWORD *)(a3 + 64), "label set cannot be empty", v9);
  xgboost_old::utils::Check(((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)% (unint64_t)(((uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 2) * (int)a1[2]) == 0, "SoftmaxMultiClassObj: label size and pred size does not match", v10);
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)a5, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v11 = (int)a1[2];
  v12 = v11 * ((*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 2);
  v21 = ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) / v11;
  v22 = v12;
  v20 = 0;
  v19 = turi::thread::cpu_count(v13);
  v18[0] = (unsigned int *)&v21;
  v18[1] = (unsigned int *)&v19;
  v18[2] = a1;
  v18[3] = (unsigned int *)a2;
  v18[4] = (unsigned int *)&v22;
  v18[5] = (unsigned int *)a3;
  v18[6] = (unsigned int *)&v20;
  v18[7] = a5;
  turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(0, v19, v18);
  v16 = v20 >= 0 && v20 < (int)a1[2];
  return xgboost_old::utils::Check(v16, "SoftmaxMultiClassObj: label must be in [0, num_class), num_class=%d but found %d in label", v14, a1[2], v20);
}

void xgboost_old::learner::SoftmaxMultiClassObj::PredTransform(unsigned int *a1, uint64_t a2)
{
  xgboost_old::learner::SoftmaxMultiClassObj::Transform(a1, a2, (const char *)a1[3]);
}

void xgboost_old::learner::SoftmaxMultiClassObj::EvalTransform(unsigned int *a1, uint64_t a2)
{
  xgboost_old::learner::SoftmaxMultiClassObj::Transform(a1, a2, (const char *)1);
}

void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185CA290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  double v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  float v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  float *v47;
  unint64_t v48;
  void *__p;
  float *v50;

  v3 = a1[2];
  v4 = **a1;
  v5 = *(_QWORD *)a1[1];
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  std::vector<float>::vector(&__p, (int)v3[2]);
  v8 = (float *)__p;
  v48 = v7;
  if (v6 >= v7)
  {
    if (!__p)
      return;
  }
  else
  {
    v47 = v50;
    v46 = (char *)v50 - (_BYTE *)__p;
    v9 = ((char *)v50 - (_BYTE *)__p) >> 2;
    v10 = 2;
    if (v9 > 2)
      v10 = ((char *)v50 - (_BYTE *)__p) >> 2;
    if (v9 <= 1)
      v11 = 1;
    else
      v11 = ((char *)v50 - (_BYTE *)__p) >> 2;
    v12 = a1[5];
    v44 = *((_QWORD *)v12 + 8);
    v45 = a1[4];
    v13 = *((_QWORD *)v12 + 14);
    v14 = v3[2];
    v42 = v10 - 1;
    v43 = *((_QWORD *)v12 + 15);
    do
    {
      if ((int)v14 >= 1)
      {
        v15 = 0;
        v16 = *(_QWORD *)a1[3];
        v17 = v14;
        v18 = v8;
        do
        {
          *v18++ = *(float *)(v16 + 4 * (v6 * v14 + v15++));
          --v17;
        }
        while (v17);
      }
      v19 = *v8;
      v20 = v8 + 1;
      v21 = v42;
      if (v46 >= 5)
      {
        do
        {
          v22 = *v20++;
          v23 = v22;
          if (v22 >= v19)
            v19 = v23;
          --v21;
        }
        while (v21);
      }
      if (v47 != v8)
      {
        v24 = 0.0;
        v25 = v8;
        v26 = v11;
        do
        {
          v27 = expf(*v25 - v19);
          *v25++ = v27;
          v24 = v24 + v27;
          --v26;
        }
        while (v26);
        v29 = v8;
        v30 = v11;
        do
        {
          v28 = v24;
          *v29 = *v29 / v28;
          ++v29;
          --v30;
        }
        while (v30);
      }
      v31 = v6 % *v45;
      v32 = (int)*(float *)(v44 + 4 * v31);
      if ((v32 & 0x80000000) != 0 || (int)v14 <= (int)v32)
      {
        *a1[6] = v32;
        v32 = 0;
      }
      if (v43 == v13)
        v33 = 1.0;
      else
        v33 = *(float *)(v13 + 4 * v31);
      v14 = v3[2];
      if ((int)v14 >= 1)
      {
        v34 = 0;
        v35 = v32;
        v36 = v6 * v14 + v32;
        v37 = v3[2];
        v38 = v8;
        do
        {
          v39 = *v38;
          if (v35)
          {
            v40 = v33 * v39;
            v41 = (float *)(*(_QWORD *)a1[7] + 8 * (v6 * v14 + v34));
          }
          else
          {
            v40 = v33 * (float)(v39 + -1.0);
            v41 = (float *)(*(_QWORD *)a1[7] + 8 * v36);
          }
          *v41 = v40;
          v41[1] = v33 * (float)((float)(v39 + v39) * (float)(1.0 - v39));
          ++v34;
          --v35;
          ++v38;
          --v37;
        }
        while (v37);
      }
      ++v6;
    }
    while (v6 != v48);
  }
  v50 = v8;
  operator delete(v8);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872ABB4 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872ABB4 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    xgboost_old::learner::SoftmaxMultiClassObj::GetGradient(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,int,std::vector<xgboost_old::bst_gpair> *)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i);
}

void xgboost_old::learner::SoftmaxMultiClassObj::Transform(unsigned int *a1, uint64_t a2, const char *a3)
{
  int v3;
  turi::thread *v6;
  unint64_t v7;
  unsigned int *v8[6];
  unint64_t v9;
  _BYTE v10[12];
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = (int)a3;
  v13 = (int)a3;
  v6 = (turi::thread *)xgboost_old::utils::Check(a1[2] != 0, "must set num_class to use softmax", a3);
  *(_QWORD *)&v10[4] = 0;
  v11 = 0;
  v12 = 0;
  v7 = ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) / (unint64_t)(int)a1[2];
  *(_QWORD *)v10 = v7;
  if (!v3)
    std::vector<float>::resize((uint64_t)&v10[4], v7);
  v8[0] = (unsigned int *)v10;
  v8[1] = (unsigned int *)&v9;
  v8[2] = a1;
  v8[3] = (unsigned int *)a2;
  v8[4] = (unsigned int *)&v13;
  v8[5] = (unsigned int *)&v10[4];
  v9 = turi::thread::cpu_count(v6);
  turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(0, v9, v8);
  if (&v10[4] != (_BYTE *)a2 && !v13)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a2, *(char **)&v10[4], v11, (v11 - *(_QWORD *)&v10[4]) >> 2);
  if (*(_QWORD *)&v10[4])
  {
    v11 = *(_QWORD *)&v10[4];
    operator delete(*(void **)&v10[4]);
  }
}

void sub_2185CA720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, unsigned int **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185CA894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(unsigned int **a1, uint64_t a2)
{
  unsigned int **v2;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  double v27;
  float *v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  void *__p;
  float *v51;

  v2 = a1;
  v3 = a1[2];
  v4 = **a1;
  v5 = *(_QWORD *)a1[1];
  v6 = v4 * a2 / v5;
  v7 = (v4 + v4 * a2) / v5;
  std::vector<float>::vector(&__p, (int)v3[2]);
  v8 = (float *)__p;
  if (v6 < v7)
  {
    v9 = v3[2];
    v10 = (int)v9;
    v11 = *v2[4];
    v49 = v51;
    v12 = (char *)v51 - (_BYTE *)__p;
    v13 = ((char *)v51 - (_BYTE *)__p) >> 2;
    if (v51 == __p)
      v14 = 0;
    else
      v14 = (float *)__p;
    v15 = 2;
    if (v13 > 2)
      v15 = ((char *)v51 - (_BYTE *)__p) >> 2;
    if (v13 <= 1)
      v16 = 1;
    else
      v16 = ((char *)v51 - (_BYTE *)__p) >> 2;
    v47 = (float *)((char *)__p + 4);
    v48 = v15 - 1;
    v45 = v3[2];
    v46 = (int)v9;
    v43 = v2;
    v44 = (char *)v51 - (_BYTE *)__p;
    do
    {
      v17 = v6 * v10;
      if ((int)v10 >= 1)
      {
        v18 = 0;
        v19 = *(_QWORD *)v2[3];
        v20 = v9;
        v21 = v8;
        do
        {
          *v21++ = *(float *)(v19 + 4 * (v17 + v18++));
          --v20;
        }
        while (v20);
      }
      if (v11)
      {
        v22 = *v8;
        v23 = v47;
        v24 = v48;
        if (v12 >= 5)
        {
          do
          {
            v25 = *v23++;
            v26 = v25;
            if (v25 >= v22)
              v22 = v26;
            --v24;
          }
          while (v24);
        }
        if (v49 != v8)
        {
          v27 = 0.0;
          v28 = v8;
          v29 = v8;
          v30 = v16;
          v31 = v16;
          do
          {
            v32 = expf(*v29 - v22);
            *v29++ = v32;
            v27 = v27 + v32;
            --v31;
          }
          while (v31);
          v8 = v28;
          v34 = v28;
          v16 = v30;
          v35 = v30;
          v2 = v43;
          v12 = v44;
          v9 = v45;
          v10 = v46;
          do
          {
            v33 = v27;
            *v34 = *v34 / v33;
            ++v34;
            --v35;
          }
          while (v35);
        }
        if ((int)v9 >= 1)
        {
          v36 = 0;
          v37 = *(_QWORD *)v2[3];
          v38 = v9;
          v39 = v8;
          do
          {
            v40 = *(_DWORD *)v39++;
            *(_DWORD *)(v37 + 4 * (v17 + v36++)) = v40;
            --v38;
          }
          while (v38);
        }
      }
      else
      {
        if (v12 < 5)
        {
          LODWORD(v41) = 0;
        }
        else
        {
          v41 = 0;
          v42 = 1;
          do
          {
            if (v14[v42] > v14[v41])
              v41 = v42;
            ++v42;
          }
          while (v13 != v42);
        }
        *(float *)(*(_QWORD *)v2[5] + 4 * v6) = (float)(int)v41;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  if (v8)
  {
    v51 = v8;
    operator delete(v8);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872AC73 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872AC73 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  unint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i < *(_QWORD *)(a1 + 16); ++i)
    xgboost_old::learner::SoftmaxMultiClassObj::Transform(std::vector<float> *,int)::{lambda(unsigned long)#1}::operator()(*(unsigned int ***)a1, i);
}

void xgboost_old::learner::PairwiseRankObj::~PairwiseRankObj(xgboost_old::learner::PairwiseRankObj *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t xgboost_old::learner::LambdaRankObj::SetParam(xgboost_old::learner::LambdaRankObj *this, const char *a2, const char *a3)
{
  float v6;
  uint64_t result;

  if (!strcmp("loss_type", a2))
    *((_DWORD *)this + 2) = atoi(a3);
  if (!strcmp("fix_list_weight", a2))
  {
    v6 = atof(a3);
    *((float *)this + 4) = v6;
  }
  result = strcmp("num_pairsample", a2);
  if (!(_DWORD)result)
  {
    result = atoi(a3);
    *((_DWORD *)this + 3) = result;
  }
  return result;
}

void xgboost_old::learner::LambdaRankObj::GetGradient(_DWORD *a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  _QWORD *v7;
  const char *v9;
  uint64_t v10;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v12;
  unsigned int *v13;
  BOOL v14;
  std::vector<unsigned int> *v15;
  std::vector<unsigned int>::pointer *p_end;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  int *v39;
  unint64_t v40;
  _DWORD *v41;
  unsigned __int32 *v42;
  unsigned int v43;
  unsigned __int32 v44;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  float *v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  float *v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  double v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  int v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  const char *v80;
  double v81;
  float v82;
  uint64_t v83;
  unint64_t v84;
  float *v85;
  unsigned int *v86;
  unsigned int v87;
  float v88;
  float v89;
  float v90;
  int v91;
  BOOL v92;
  float v93;
  float v94;
  uint64_t v95;
  float *v96;
  float v97;
  float v98;
  float *v99;
  float v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::vector<unsigned int> *v105;
  uint64_t *v106;
  void *v108;
  char *v109;
  uint64_t v110;
  void *__p;
  char *v112;
  char *v113;
  std::vector<unsigned int>::value_type __x[2];
  char *v115;
  char *v116;
  unsigned int v117;
  std::vector<unsigned int> v118;
  uint64_t (*v119[2])(uint64_t *, uint64_t *);

  v7 = a3;
  xgboost_old::utils::Check(a2[1] - *a2 == a3[9] - a3[8], "label size predict size not match", (const char *)a3);
  v106 = (uint64_t *)a5;
  std::vector<xgboost_old::SparseBatch::Entry>::resize(a5, (uint64_t)(a2[1] - *a2) >> 2);
  __x[0] = 0;
  std::vector<unsigned int>::vector(&v118, 2uLL, __x);
  v10 = (uint64_t)(v7[9] - v7[8]) >> 2;
  begin = v118.__begin_;
  v118.__begin_[1] = v10;
  v12 = (unsigned int *)v7[11];
  v13 = (unsigned int *)v7[12];
  v14 = v13 == v12;
  if (v13 == v12)
  {
    v12 = begin;
    v15 = &v118;
  }
  else
  {
    v15 = (std::vector<unsigned int> *)(v7 + 11);
  }
  v105 = v15;
  if (v14)
    p_end = &v118.__end_;
  else
    p_end = (std::vector<unsigned int>::pointer *)(v7 + 12);
  v17 = *p_end != v12 && v10 == *(*p_end - 1);
  xgboost_old::utils::Check(v17, "group structure not consistent with #rows", v9);
  v18 = (unint64_t)((char *)*p_end - (char *)v105->__begin_) >> 2;
  v117 = 1111 * a4;
  *(_QWORD *)__x = 0;
  v115 = 0;
  v116 = 0;
  __p = 0;
  v112 = 0;
  v113 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v102 = (v18 - 1);
  if ((_DWORD)v18 == 1)
    goto LABEL_120;
  v19 = 0;
  v20 = 0;
  v101 = v7;
  do
  {
    v21 = (char *)__p;
    v112 = (char *)__p;
    v115 = v19;
    v22 = v105->__begin_[v20];
    v103 = v20;
    v23 = v20 + 1;
    v24 = __p;
    v104 = v23;
    if (v22 < v105->__begin_[v23])
    {
      do
      {
        v25 = *(_DWORD *)(*a2 + 4 * v22);
        v26 = *(_DWORD *)(v7[8] + 4 * v22);
        if (v21 >= v113)
        {
          v27 = (char *)__p;
          v28 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (_BYTE *)__p) >> 2);
          v29 = v28 + 1;
          if (v28 + 1 > 0x1555555555555555)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v113 - (_BYTE *)__p) >> 2) > v29)
            v29 = 0x5555555555555556 * ((v113 - (_BYTE *)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v113 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v30 = 0x1555555555555555;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v113, v30);
            v27 = (char *)__p;
            v21 = v112;
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[12 * v28];
          *(_DWORD *)v32 = v25;
          *((_DWORD *)v32 + 1) = v26;
          *((_DWORD *)v32 + 2) = v22;
          v33 = v32;
          if (v21 != v27)
          {
            do
            {
              v34 = *(_QWORD *)(v21 - 12);
              v21 -= 12;
              v35 = *((_DWORD *)v21 + 2);
              *(_QWORD *)(v33 - 12) = v34;
              v33 -= 12;
              *((_DWORD *)v33 + 2) = v35;
            }
            while (v21 != v27);
            v27 = (char *)__p;
          }
          v21 = v32 + 12;
          __p = v33;
          v112 = v32 + 12;
          v113 = &v31[12 * v30];
          if (v27)
            operator delete(v27);
          v23 = v104;
        }
        else
        {
          *(_DWORD *)v21 = v25;
          *((_DWORD *)v21 + 1) = v26;
          *((_DWORD *)v21 + 2) = v22;
          v21 += 12;
        }
        v112 = v21;
        *(_QWORD *)(*v106 + 8 * v22++) = 0;
      }
      while (v22 < v105->__begin_[v23]);
      v24 = __p;
    }
    v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v21 - v24) >> 2));
    v119[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::learner::LambdaRankObj::ListEntry::CmpPred;
    if (v21 == v24)
      v37 = 0;
    else
      v37 = v36;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>((uint64_t)v24, (uint64_t *)v21, v119, v37, 1);
    std::vector<turi::neural_net::GraphLayer *>::resize((uint64_t)&v108, 0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)__p) >> 2));
    v39 = (int *)v108;
    if (v112 != __p)
    {
      v40 = 0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)__p) >> 2);
      v41 = (char *)v108 + 4;
      v42 = (unsigned __int32 *)((char *)__p + 4);
      v43 = 1;
      do
      {
        v44 = *v42;
        v42 += 3;
        v38.n128_u32[0] = v44;
        *(v41 - 1) = v44;
        *v41 = v43 - 1;
        v41 += 2;
      }
      while (v40 > v43++);
    }
    v46 = 126 - 2 * __clz((v109 - (char *)v39) >> 3);
    v119[0] = (uint64_t (*)(uint64_t *, uint64_t *))xgboost_old::learner::CmpFirst;
    if (v109 == (char *)v39)
      v47 = 0;
    else
      v47 = v46;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,unsigned int> const&,std::pair<float,unsigned int> const&),std::pair<float,unsigned int>*,false>(v39, (int *)v109, (uint64_t (**)(int *, int *))v119, v47, 1, v38);
    v49 = (float *)v108;
    v48 = (int *)v109;
    if (v109 != v108)
    {
      v50 = 0;
      v51 = 0;
      v52 = (v109 - (_BYTE *)v108) >> 3;
      while (1)
      {
        v53 = &v49[2 * v50];
        v54 = 1;
        do
        {
          v55 = v54;
          v50 = v51 + v54;
          if (v52 <= v50)
            break;
          ++v54;
        }
        while (v49[2 * v50] == *v53);
        v56 = v52 - v55;
        if (v56)
        {
          v57 = a1[3];
          if (v57)
            break;
        }
LABEL_86:
        v52 = ((char *)v48 - (char *)v49) >> 3;
        v51 = v50;
        if (v52 <= v50)
          goto LABEL_87;
      }
      v58 = (double)v56;
      while (v51 >= v50)
      {
LABEL_84:
        if (!--v57)
        {
          v49 = (float *)v108;
          v48 = (int *)v109;
          goto LABEL_86;
        }
      }
      v59 = v51;
      while (1)
      {
        v60 = ((double)rand_r(&v117) * 4.65661287e-10 * v58);
        if (v51 <= v60)
        {
          v64 = *((_DWORD *)v108 + 2 * v59 + 1);
          v65 = *((_DWORD *)v108 + 2 * v55 + 2 * v60 + 1);
          v63 = v115;
          if (v115 >= v116)
          {
            v67 = *(char **)__x;
            v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(_QWORD *)__x] >> 2);
            v73 = v72 + 1;
            if (v72 + 1 > 0x1555555555555555)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2) > v73)
              v73 = 0x5555555555555556 * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v70 = 0x1555555555555555;
            else
              v70 = v73;
            if (v70)
            {
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v116, v70);
              v67 = *(char **)__x;
              v63 = v115;
            }
            else
            {
              v71 = 0;
            }
            v74 = &v71[12 * v72];
            *(_DWORD *)v74 = v64;
            *((_DWORD *)v74 + 1) = v65;
            *((_DWORD *)v74 + 2) = 1065353216;
            v75 = v74;
            if (v63 != v67)
            {
              do
              {
                v78 = *(_QWORD *)(v63 - 12);
                v63 -= 12;
                v79 = *((_DWORD *)v63 + 2);
                *(_QWORD *)(v75 - 12) = v78;
                v75 -= 12;
                *((_DWORD *)v75 + 2) = v79;
              }
              while (v63 != v67);
LABEL_80:
              v67 = *(char **)__x;
            }
LABEL_81:
            v66 = v74 + 12;
            *(_QWORD *)__x = v75;
            v115 = v74 + 12;
            v116 = &v71[12 * v70];
            if (v67)
              operator delete(v67);
            goto LABEL_83;
          }
          *(_DWORD *)v115 = v64;
          *((_DWORD *)v63 + 1) = v65;
        }
        else
        {
          v61 = *((_DWORD *)v108 + 2 * v60 + 1);
          v62 = *((_DWORD *)v108 + 2 * v59 + 1);
          v63 = v115;
          if (v115 >= v116)
          {
            v67 = *(char **)__x;
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(_QWORD *)__x] >> 2);
            v69 = v68 + 1;
            if (v68 + 1 > 0x1555555555555555)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2) > v69)
              v69 = 0x5555555555555556 * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v116[-*(_QWORD *)__x] >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v70 = 0x1555555555555555;
            else
              v70 = v69;
            if (v70)
            {
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<xgboost_old::tree::SplitEntry>>((uint64_t)&v116, v70);
              v67 = *(char **)__x;
              v63 = v115;
            }
            else
            {
              v71 = 0;
            }
            v74 = &v71[12 * v68];
            *(_DWORD *)v74 = v61;
            *((_DWORD *)v74 + 1) = v62;
            *((_DWORD *)v74 + 2) = 1065353216;
            v75 = v74;
            if (v63 != v67)
            {
              do
              {
                v76 = *(_QWORD *)(v63 - 12);
                v63 -= 12;
                v77 = *((_DWORD *)v63 + 2);
                *(_QWORD *)(v75 - 12) = v76;
                v75 -= 12;
                *((_DWORD *)v75 + 2) = v77;
              }
              while (v63 != v67);
              goto LABEL_80;
            }
            goto LABEL_81;
          }
          *(_DWORD *)v115 = v61;
          *((_DWORD *)v63 + 1) = v62;
        }
        v66 = v63 + 12;
        *((_DWORD *)v63 + 2) = 1065353216;
LABEL_83:
        v115 = v66;
        if (++v59 == v50)
          goto LABEL_84;
      }
    }
LABEL_87:
    (*(void (**)(_DWORD *, void **, std::vector<unsigned int>::value_type *))(*(_QWORD *)a1 + 64))(a1, &__p, __x);
    LODWORD(v81) = a1[4];
    v82 = 1.0 / (float)(int)a1[3];
    if (*(float *)&v81 != 0.0)
      v82 = v82 * (float)(*(float *)&v81 / (float)(v105->__begin_[v104] - v105->__begin_[v103]));
    v19 = v115;
    if (v115 != *(char **)__x)
    {
      v83 = 0;
      v84 = 0;
      v19 = *(char **)__x;
      do
      {
        v85 = (float *)&v19[v83];
        v86 = (unsigned int *)__p;
        v88 = *v85;
        v87 = *((_DWORD *)v85 + 1);
        v89 = v85[2];
        v90 = *((float *)__p + 3 * *(unsigned int *)v85) - *((float *)__p + 3 * v87);
        v91 = a1[2];
        if ((v91 - 1) < 2)
        {
          v90 = 1.0 / (float)(expf(-v90) + 1.0);
        }
        else
        {
          if (v91)
            v92 = v91 == 3;
          else
            v92 = 1;
          if (!v92)
            xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80);
        }
        *(float *)&v81 = v90;
        if ((v91 - 1) >= 2)
        {
          if (v91 != 3)
          {
            if (v91)
              xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80, v81);
            v93 = v90 + -1.0;
            goto LABEL_112;
          }
          *(float *)&v81 = 1.0 / (float)(expf(-v90) + 1.0);
        }
        v93 = *(float *)&v81 + -1.0;
        if ((v91 - 1) < 2)
          goto LABEL_109;
        if (v91)
        {
          if (v91 != 3)
            xgboost_old::utils::Error((xgboost_old::utils *)"unknown loss_type", v80);
          v90 = 1.0 / (float)(expf(-v90) + 1.0);
LABEL_109:
          if ((float)(v90 * (float)(1.0 - v90)) >= 1.0e-16)
            v94 = v90 * (float)(1.0 - v90);
          else
            v94 = 1.0e-16;
          goto LABEL_114;
        }
LABEL_112:
        v94 = 1.0;
LABEL_114:
        v95 = *v106;
        v96 = (float *)(*v106 + 8 * v86[3 * LODWORD(v88) + 2]);
        v97 = (float)(v82 * v89) + (float)(v82 * v89);
        v98 = v96[1] + (float)(v97 * v94);
        *v96 = *v96 + (float)(v93 * (float)(v82 * v89));
        v96[1] = v98;
        v99 = (float *)(v95 + 8 * v86[3 * v87 + 2]);
        v100 = v99[1];
        *v99 = *v99 - (float)(v93 * (float)(v82 * v89));
        v99[1] = v100 + (float)(v97 * v94);
        ++v84;
        v19 = *(char **)__x;
        v83 += 12;
      }
      while (v84 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v115[-*(_QWORD *)__x] >> 2));
    }
    v7 = v101;
    v20 = v104;
  }
  while (v104 != v102);
  if (v108)
  {
    v109 = (char *)v108;
    operator delete(v108);
  }
  if (__p)
  {
    v112 = (char *)__p;
    operator delete(__p);
  }
LABEL_120:
  if (*(_QWORD *)__x)
  {
    v115 = *(char **)__x;
    operator delete(*(void **)__x);
  }
  if (v118.__begin_)
  {
    v118.__end_ = v118.__begin_;
    operator delete(v118.__begin_);
  }
}

void sub_2185CB570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *xgboost_old::learner::LambdaRankObj::DefaultEvalMetric(xgboost_old::learner::LambdaRankObj *this)
{
  return "map";
}

BOOL xgboost_old::learner::LambdaRankObj::ListEntry::CmpPred(float *a1, float *a2)
{
  return *a1 > *a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;

  v8 = result;
LABEL_2:
  v9 = (uint64_t *)((char *)a2 - 12);
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v10) >> 2);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)((uint64_t *)((char *)a2 - 12), (uint64_t *)v10);
        if ((_DWORD)result)
        {
          v29 = *(_DWORD *)(v10 + 8);
          v27 = *(_QWORD *)v10;
          v25 = *v9;
          *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)v10 = v25;
          *v9 = v27;
          *((_DWORD *)a2 - 1) = v29;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)((char *)a2 - 12), a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, v10 + 12, v10 + 24, (uint64_t)a2 - 12, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, v10 + 12, v10 + 24, v10 + 36, (uint64_t)a2 - 12, a3);
      default:
        if (v13 <= 287)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = v10 + 12 * (v14 >> 1);
          if ((unint64_t)v13 < 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)(v10 + 12 * v15), (uint64_t *)v10, (uint64_t *)((char *)a2 - 12), a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)v10, (uint64_t *)(v10 + 12 * v15), (uint64_t *)((char *)a2 - 12), a3);
            v17 = 3 * v15;
            v18 = (uint64_t *)(v10 + 12 * v15 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)(v10 + 12), v18, a2 - 3, a3);
            v19 = (uint64_t *)(v10 + 24);
            v20 = (uint64_t *)(v10 + 12 + 4 * v17);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v19, v20, (uint64_t *)((char *)a2 - 36), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v18, (uint64_t *)v16, v20, a3);
            v28 = *(_DWORD *)(v8 + 8);
            v26 = *(_QWORD *)v8;
            v21 = *(_QWORD *)v16;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v16 + 8);
            *(_QWORD *)v8 = v21;
            *(_DWORD *)(v16 + 8) = v28;
            *(_QWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)((uint64_t *)(v8 - 12), (uint64_t *)v8) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>((uint64_t *)v8, a2, a3);
            v10 = result;
            goto LABEL_17;
          }
LABEL_12:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>((uint64_t *)v8, (unint64_t)a2, (uint64_t (**)(char *, uint64_t *))a3);
          if ((v23 & 1) == 0)
            goto LABEL_15;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v8, v22, a3);
          v10 = v22 + 12;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(v22 + 12, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,false>(v8, v22, a3, -v12, a5 & 1);
            v10 = v22 + 12;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = (uint64_t *)v22;
          if (v24)
            return result;
          goto LABEL_2;
        }
        if ((uint64_t *)v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,xgboost_old::learner::LambdaRankObj::ListEntry*>(v10, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 12;
    if (result + 12 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_QWORD *)v10;
          v16 = *(_DWORD *)(v10 + 8);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_QWORD *)(v13 + 12) = *(_QWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 20) = *(_DWORD *)(v6 + v12 + 8);
            if (!v12)
              break;
            v12 -= 12;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 12;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_QWORD *)v14 = v15;
          *(_DWORD *)(v14 + 8) = v16;
        }
        v7 = v10 + 12;
        v9 += 12;
      }
      while (v10 + 12 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 12;
    if (result + 12 != a2)
    {
      v9 = result - 12;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_QWORD *)v6;
          v13 = *(_DWORD *)(v6 + 8);
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 + 12);
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 20);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 12;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 24) = v12;
          *(_DWORD *)(v11 + 32) = v13;
        }
        v7 = v6 + 12;
        v9 += 12;
      }
      while (v6 + 12 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_DWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_DWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_DWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_DWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_DWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_DWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_DWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_DWORD *)a3 + 2);
  *a1 = *a3;
  *((_DWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_DWORD *)a3 + 2) = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a2;
  v16 = *a1;
  v17 = *((_DWORD *)a1 + 2);
  if (((*a3)(&v16, (uint64_t *)((char *)a2 - 12)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (uint64_t *)((char *)v6 + 12);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (uint64_t *)((char *)a1 + 12);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (uint64_t *)((char *)v6 + 12);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_DWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_DWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (uint64_t *)((char *)v6 + 12);
    while (!(*a3)(&v16, v6));
    do
      v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (uint64_t *)((char *)v6 - 12);
  if ((uint64_t *)((char *)v6 - 12) != a1)
  {
    v13 = *v12;
    *((_DWORD *)a1 + 2) = *((_DWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_DWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,xgboost_old::learner::LambdaRankObj::ListEntry *,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(char *, uint64_t *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_DWORD *)a1 + 2);
  do
    v6 += 12;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (unint64_t)a1 + v6;
  v8 = (uint64_t)a1 + v6 - 12;
  if (v6 == 12)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 12;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 12;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    v9 = (uint64_t *)((char *)a1 + v6);
    v10 = a2;
    do
    {
      v19 = *v9;
      v11 = v19;
      v20 = *((_DWORD *)v9 + 2);
      v12 = v20;
      v13 = *(_DWORD *)(v10 + 8);
      *v9 = *(_QWORD *)v10;
      *((_DWORD *)v9 + 2) = v13;
      *(_DWORD *)(v10 + 8) = v12;
      *(_QWORD *)v10 = v11;
      do
        v9 = (uint64_t *)((char *)v9 + 12);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 12;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    v8 = (uint64_t)v9 - 12;
  }
  if ((uint64_t *)v8 != a1)
  {
    v14 = *(_QWORD *)v8;
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v8 + 8);
    *a1 = v14;
  }
  v15 = v17;
  *(_DWORD *)(v8 + 8) = v18;
  *(_QWORD *)v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (uint64_t *)(a2 - 12);
      if ((*a3)((uint64_t *)(a2 - 12), (uint64_t *)a1))
      {
        v9 = *(_DWORD *)(a1 + 8);
        v10 = *(_QWORD *)a1;
        v11 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *v8;
        *(_DWORD *)(a1 + 8) = v11;
        *v8 = v10;
        *(_DWORD *)(a2 - 4) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12, a3);
      return 1;
    default:
      v12 = (uint64_t *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      v13 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v13, v12))
    {
      v19 = *(_QWORD *)v13;
      v20 = *(_DWORD *)(v13 + 8);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 36) = *(_QWORD *)(a1 + v16 + 24);
        *(_DWORD *)(v17 + 44) = *(_DWORD *)(a1 + v16 + 32);
        if (v16 == -24)
          break;
        v16 -= 12;
        if (((*a3)(&v19, (uint64_t *)(v17 + 12)) & 1) == 0)
        {
          v18 = a1 + v16 + 36;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v19;
      *(_DWORD *)(v18 + 8) = v20;
      if (++v15 == 8)
        return v13 + 12 == a2;
    }
    v12 = (uint64_t *)v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_QWORD *)a3;
    v13 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v13;
    *(_QWORD *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if ((_DWORD)result)
    {
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_QWORD *)a2;
      v16 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v16;
      *(_QWORD *)a3 = v15;
      *(_DWORD *)(a3 + 8) = v14;
      result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
      if ((_DWORD)result)
      {
        v17 = *(_DWORD *)(a1 + 8);
        v18 = *(_QWORD *)a1;
        v19 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v19;
        *(_QWORD *)a2 = v18;
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a2, a3, a4, a6);
  result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)(a4 + 8);
    v14 = *(_QWORD *)a4;
    v15 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v15;
    *(_QWORD *)a5 = v14;
    *(_DWORD *)(a5 + 8) = v13;
    result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if ((_DWORD)result)
    {
      v16 = *(_DWORD *)(a3 + 8);
      v17 = *(_QWORD *)a3;
      v18 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = v18;
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 8) = v16;
      result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
      if ((_DWORD)result)
      {
        v19 = *(_DWORD *)(a2 + 8);
        v20 = *(_QWORD *)a2;
        v21 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v21;
        *(_QWORD *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v19;
        result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
        if ((_DWORD)result)
        {
          v22 = *(_DWORD *)(a1 + 8);
          v23 = *(_QWORD *)a1;
          v24 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v24;
          *(_QWORD *)a2 = v23;
          *(_DWORD *)(a2 + 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*,xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  if ((uint64_t *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 12;
    if ((uint64_t)a2 - a1 >= 13)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 12 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a4, v9, v12);
        v12 = (uint64_t *)((char *)v12 - 12);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          v15 = *((_DWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_DWORD *)(a1 + 8);
          *v14 = *(_QWORD *)a1;
          *((_DWORD *)v14 + 2) = v17;
          *(_QWORD *)a1 = v16;
          *(_DWORD *)(a1 + 8) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, a4, v9, (uint64_t *)a1);
        }
        v14 = (uint64_t *)((char *)v14 + 12);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 13)
    {
      return v13;
    }
    else
    {
      v28 = v13;
      v18 = v8 / 0xCuLL;
      do
      {
        v29 = v6;
        v19 = 0;
        v30 = *(_QWORD *)a1;
        v31 = *(_DWORD *)(a1 + 8);
        v20 = a1;
        do
        {
          v21 = v20 + 12 * v19 + 12;
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && (*a4)(v20 + 12 * v19 + 12, v20 + 12 * v19 + 24))
          {
            v21 += 12;
            v22 = v23;
          }
          v24 = *(_QWORD *)v21;
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v21 + 8);
          *(_QWORD *)v20 = v24;
          v20 = v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 = (uint64_t *)((char *)v29 - 12);
        if ((uint64_t *)v21 == (uint64_t *)((char *)v29 - 12))
        {
          *(_DWORD *)(v21 + 8) = v31;
          *(_QWORD *)v21 = v30;
        }
        else
        {
          v25 = *v6;
          *(_DWORD *)(v21 + 8) = *((_DWORD *)v29 - 1);
          *(_QWORD *)v21 = v25;
          *v6 = v30;
          *((_DWORD *)v29 - 1) = v31;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(a1, v21 + 12, (uint64_t (**)(uint64_t, uint64_t))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 12 - a1) >> 2));
        }
      }
      while (v18-- > 2);
      return v28;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v13 = result + 12 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
      if (v14 < a3 && (*a2)(result + 12 * v12, v13 + 12))
      {
        v13 += 12;
        v12 = v14;
      }
      result = ((uint64_t (*)(uint64_t, uint64_t *))*a2)(v13, v7);
      if ((result & 1) == 0)
      {
        v20 = *v7;
        v21 = *((_DWORD *)v7 + 2);
        do
        {
          v15 = v13;
          v16 = *(_QWORD *)v13;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v13 + 8);
          *v7 = v16;
          if (v9 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = v8 + 12 * v17;
          v18 = 2 * v12 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 12 * v17, v13 + 12))
            {
              v13 += 12;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, uint64_t *))*a2)(v13, &v20);
          v7 = (uint64_t *)v15;
          v12 = v17;
        }
        while (!(_DWORD)result);
        v19 = v20;
        *(_DWORD *)(v15 + 8) = v21;
        *(_QWORD *)v15 = v19;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::learner::LambdaRankObj::ListEntry const&,xgboost_old::learner::LambdaRankObj::ListEntry const&),xgboost_old::learner::LambdaRankObj::ListEntry*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 12 * (v6 >> 1);
    v11 = (uint64_t *)(a2 - 12);
    result = (*a3)(v10, a2 - 12);
    if ((_DWORD)result)
    {
      v14 = *v11;
      v15 = *((_DWORD *)v11 + 2);
      do
      {
        v12 = v10;
        v13 = *(_QWORD *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        *v11 = v13;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 12 * v9;
        result = (*a3)(v10, (uint64_t)&v14);
        v11 = (uint64_t *)v12;
      }
      while ((result & 1) != 0);
      *(_QWORD *)v12 = v14;
      *(_DWORD *)(v12 + 8) = v15;
    }
  }
  return result;
}

void xgboost_old::learner::LambdaRankObjNDCG::GetLambdaWeight(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  float *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  float *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  float *v38;
  float *v39;
  char v40;

  std::vector<float>::vector(&v38, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v5 = v38;
  v6 = a2[1] - *a2;
  if (v6)
  {
    v7 = v6 / 12;
    if (v7 <= 1)
      v7 = 1;
    v8 = (int *)(*a2 + 4);
    v9 = v38;
    do
    {
      v10 = *v8;
      v8 += 3;
      *(_DWORD *)v9++ = v10;
      --v7;
    }
    while (v7);
  }
  v11 = 126 - 2 * __clz(v39 - v5);
  if (v39 == v5)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v5, v39, (uint64_t)&v40, v12, 1);
  v13 = v38;
  v14 = (char *)v39 - (char *)v38;
  if (v39 == v38)
  {
    if (v39)
    {
      v39 = v38;
      operator delete(v38);
    }
  }
  else
  {
    v15 = 0;
    if ((unint64_t)(v14 >> 2) <= 1)
      v16 = 1;
    else
      v16 = v14 >> 2;
    v17 = 0.0;
    do
    {
      v18 = v13[v15];
      if (v18)
        v17 = v17 + (float)((float)~(-1 << v18) / logf((float)(unint64_t)(v15 + 2)));
      ++v15;
    }
    while (v16 != v15);
    v19 = v17;
    v39 = v13;
    operator delete(v13);
    if (v19 != 0.0)
    {
      v20 = *a3;
      v21 = a3[1] - *a3;
      if (v21)
      {
        v22 = 1.0 / v19;
        v23 = v21 / 12;
        v24 = *a2;
        if (v23 <= 1)
          v25 = 1;
        else
          v25 = v23;
        v26 = (float *)(v20 + 8);
        do
        {
          v27 = *((_DWORD *)v26 - 2);
          v28 = *((_DWORD *)v26 - 1);
          v29 = 1.0 / logf((float)v27 + 2.0);
          v30 = logf((float)v28 + 2.0);
          v31 = (float)~(-1 << (int)*(float *)(v24 + 12 * v27 + 4));
          v32 = (float)~(-1 << (int)*(float *)(v24 + 12 * v28 + 4));
          v33 = v22
              * (float)((float)((float)((float)(1.0 / v30) * v32) + (float)(v31 * v29))
                      - (float)((float)((float)(1.0 / v30) * v31) + (float)(v32 * v29)));
          v34 = -v33;
          if (v33 >= 0.0)
            v34 = v33;
          *v26 = v34;
          v26 += 3;
          --v25;
        }
        while (v25);
      }
      return;
    }
  }
  v35 = a3[1] - *a3;
  if (v35)
  {
    v36 = v35 / 12;
    if (v36 <= 1)
      v36 = 1;
    v37 = (_DWORD *)(*a3 + 8);
    do
    {
      *v37 = 0;
      v37 += 3;
      --v36;
    }
    while (v36);
  }
}

void sub_2185CCA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  float *v17;
  char v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  BOOL v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *((_DWORD *)a2 - 1);
        else
          v24 = *((_DWORD *)v9 + 1);
        if (v22 > v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        *((_DWORD *)v9 + 1) = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 > *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *(_DWORD *)v9;
        v27 = v9[1];
        if (v26 <= v27)
        {
          v28 = *((_DWORD *)v9 + 1);
          v27 = v26;
        }
        *(_DWORD *)v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = *((_DWORD *)v9 + 2);
        else
          v31 = *(_DWORD *)v9;
        if (*v9 <= v29)
          v29 = *v9;
        v9[2] = v29;
        *(_DWORD *)v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 <= v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 > v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 > v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 > v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *(_DWORD *)v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = *((_DWORD *)v9 + 1);
        else
          v43 = *(_DWORD *)v9;
        if (*v9 > v42)
          v41 = *((_DWORD *)v9 + 1);
        *(_DWORD *)v9 = v43;
        *((_DWORD *)v9 + 1) = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *((_DWORD *)a2 - 1);
        else
          v46 = *((_DWORD *)v9 + 3);
        if (v44 > v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        *((_DWORD *)v9 + 3) = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 > v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = *((_DWORD *)v9 + 2);
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
        {
          v51 = *((_DWORD *)v9 + 3);
          v50 = v49;
        }
        *((_DWORD *)v9 + 2) = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 <= v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *(_DWORD *)v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 > *v9)
          v56 = *v9;
        if (v58 <= v57)
        {
          v55 = *((_DWORD *)v9 + 2);
          v57 = v58;
        }
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 > v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *(_DWORD *)v9 = v55;
        v9[1] = v54;
        if (v59 <= v57)
          v60 = v59;
        else
          v60 = v57;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, v17);
          v9 = v17 + 1;
          result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(float *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(float *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (float *)((char *)v9 + v68 + 4);
                    goto LABEL_117;
                  }
                }
                v69 = v9;
LABEL_117:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              v72 = v61;
              do
              {
                *v72 = v71;
                v71 = *(v72 - 2);
                --v72;
              }
              while (v70 > v71);
              *v72 = v70;
            }
            ++v61;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  _BOOL8 v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *((_DWORD *)a2 - 1);
      else
        v22 = *((_DWORD *)a1 + 1);
      if (v20 > v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 > *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
      {
        v26 = a1[1];
        v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 <= v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 <= v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 > v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 > v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 > v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 > v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *((_DWORD *)a2 - 1);
      else
        v32 = *((_DWORD *)a1 + 3);
      if (v30 > v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 > v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = *((_DWORD *)a1 + 2);
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
      {
        v37 = *((_DWORD *)a1 + 3);
        v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 <= v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 > *a1)
        v42 = *a1;
      if (v44 <= v43)
      {
        v41 = a1[2];
        v43 = v44;
      }
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 > v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43)
        v46 = v45;
      else
        v46 = v43;
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v6)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 <= v6)
        v6 = a1[1];
      if (v6 <= v8)
        v10 = *a1;
      else
        v10 = v6;
      if (v6 > v8)
        v6 = *a1;
      *v5 = v6;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 > v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        v2 = 1;
      }
      else
      {
        v13 = 0;
        v14 = 12;
        while (1)
        {
          v15 = *v12;
          v16 = *v5;
          if (*v12 > *v5)
          {
            v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            v19 = a1;
LABEL_27:
            *v19 = v15;
            if (++v13 == 8)
              break;
          }
          v5 = v12;
          v14 += 4;
          if (++v12 == a2)
            goto LABEL_29;
        }
        v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 <= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void xgboost_old::learner::LambdaRankObjMAP::GetLambdaWeight(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int32x2_t v5;
  float32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  float *v12;
  float32x2_t v13;
  float v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  int v21;
  int v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  void *__p;
  char *v34;
  uint64_t v35;

  __p = 0;
  v34 = 0;
  v35 = 0;
  std::vector<xgboost_old::utils::WQSummary<float,float>::Entry,std::allocator<xgboost_old::utils::WQSummary<float,float>::Entry>>::resize((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  v7 = *a2;
  v8 = a2[1] - *a2;
  if (v8)
  {
    v9 = v8 / 12;
    v10 = (char *)__p;
    if ((unint64_t)(v9 + 1) > 2)
      v11 = v9 + 1;
    else
      v11 = 2;
    v12 = (float *)(v7 + 4);
    v13 = 0;
    v14 = 0.0;
    v15 = 1;
    v5.i32[0] = 0;
    do
    {
      if (*v12 > 0.0)
      {
        *(float *)v5.i32 = *(float *)v5.i32 + 1.0;
        v6.f32[0] = (float)v15;
        v14 = v14 + (float)(*(float *)v5.i32 / (float)v15);
        v6 = vdiv_f32(vadd_f32((float32x2_t)vdup_lane_s32(v5, 0), (float32x2_t)0x3F800000BF800000), (float32x2_t)vdup_lane_s32((int32x2_t)v6, 0));
        v13 = vadd_f32(v13, v6);
      }
      *(float *)v10 = v14;
      *(float32x2_t *)(v10 + 4) = v13;
      *((_DWORD *)v10 + 3) = v5.i32[0];
      ++v15;
      v10 += 16;
      v12 += 3;
    }
    while (v11 != v15);
  }
  v16 = a3[1] - *a3;
  if (v16)
  {
    v17 = v16 / 12;
    v18 = (float *)__p;
    v19 = (float *)(v34 - 4);
    if (v17 <= 1)
      v17 = 1;
    v20 = (float *)(*a3 + 8);
    do
    {
      v21 = *((_DWORD *)v20 - 2);
      v22 = *((_DWORD *)v20 - 1);
      v23 = 0.0;
      if (v21 != v22 && *v19 != 0.0)
      {
        if (v21 >= v22)
          v24 = *((_DWORD *)v20 - 1);
        else
          v24 = *((_DWORD *)v20 - 2);
        if (v21 <= v22)
          v21 = *((_DWORD *)v20 - 1);
        v25 = v18[4 * v21];
        if (v24)
          v25 = v25 - v18[4 * v24 - 4];
        v23 = 0.0;
        if (*(float *)(v7 + 12 * v24 + 4) <= 0.0)
          v26 = 0.0;
        else
          v26 = 1.0;
        if (*(float *)(v7 + 12 * v21 + 4) <= 0.0)
          v27 = 0.0;
        else
          v27 = 1.0;
        if (v26 != v27)
        {
          v28 = v21 - 1;
          if (v26 >= v27)
          {
            v30 = v18[4 * v28 + 1] - v18[4 * v24 + 1];
            v31 = v18[4 * v21 + 3];
            v24 = v21;
          }
          else
          {
            v29 = &v18[4 * v24];
            v30 = v18[4 * v28 + 2] - v29[2];
            v31 = v29[3] + 1.0;
          }
          v32 = (float)((float)((float)(v30 + 0.0) + (float)(v31 / (float)(v24 + 1))) - v25) / *v19;
          if (v32 >= 0.0)
            v23 = (float)((float)((float)(v30 + 0.0) + (float)(v31 / (float)(v24 + 1))) - v25) / *v19;
          else
            v23 = -v32;
        }
      }
      *v20 = v23;
      v20 += 3;
      --v17;
    }
    while (v17);
  }
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2185CD810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_2185CD960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2185CD968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(std::vector<turi::flexible_type> const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(std::vector<turi::flexible_type> &&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(turi::sframe_rows const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2185CDCA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2185CDE14(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(turi::sframe_rows const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2185CDF88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *turi::supervised::xgboost::metric_tracker::metric_tracker(std::string *this, __int128 **a2)
{
  std::vector<std::string> *v4;
  std::string::pointer data;
  std::string::size_type i;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *size;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  std::string::size_type v24;
  std::string v26;
  __int128 v27;
  std::string v28;
  std::string::size_type v29;
  std::string::value_type *v30;

  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[1].__r_.__value_.__l.__size_;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  v4 = (std::vector<std::string> *)&this[3];
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  turi::supervised::supervised_learning_model_base::get_tracking_metrics(a2, &v28);
  std::vector<std::string>::__vdeallocate(v4);
  this[3] = v28;
  memset(&v28, 0, sizeof(v28));
  *(_QWORD *)&v27 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  data = this[3].__r_.__value_.__l.__data_;
  for (i = this[3].__r_.__value_.__l.__size_; data != (std::string::pointer)i; data += 24)
  {
    if (data[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)data, *((_QWORD *)data + 1));
    }
    else
    {
      v7 = *(_OWORD *)data;
      v26.__r_.__value_.__r.__words[2] = *((_QWORD *)data + 2);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
    }
    v8 = turi::supervised::xgboost::xgboost_model::num_classes((turi::supervised::xgboost::xgboost_model *)a2);
    turi::supervised::xgboost::get_fast_evaluator((uint64_t *)&v26, v8, &v27);
    size = (_OWORD *)this->__r_.__value_.__l.__size_;
    v9 = this->__r_.__value_.__r.__words[2];
    if ((unint64_t)size >= v9)
    {
      v12 = (uint64_t)((uint64_t)size - this->__r_.__value_.__r.__words[0]) >> 4;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = v9 - this->__r_.__value_.__r.__words[0];
      v14 = v13 >> 3;
      if (v13 >> 3 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      v30 = &this->__r_.__value_.__s.__data_[16];
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&this->__r_.__value_.__r.__words[2], v15);
      v18 = &v16[16 * v12];
      *(_OWORD *)v18 = v27;
      v27 = 0uLL;
      v20 = (_QWORD *)this->__r_.__value_.__r.__words[0];
      v19 = (_QWORD *)this->__r_.__value_.__l.__size_;
      if (v19 == (_QWORD *)this->__r_.__value_.__l.__data_)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 2;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *v19 = 0;
          v19[1] = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)&this->__r_.__value_.__l.__data_;
      }
      v11 = v18 + 16;
      this->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      this->__r_.__value_.__l.__size_ = (std::string::size_type)(v18 + 16);
      *(int64x2_t *)&v28.__r_.__value_.__r.__words[1] = v23;
      v24 = this->__r_.__value_.__r.__words[2];
      this->__r_.__value_.__r.__words[2] = (std::string::size_type)&v16[16 * v17];
      v29 = v24;
      v28.__r_.__value_.__r.__words[0] = v23.i64[0];
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v28);
    }
    else
    {
      *size = v27;
      v11 = size + 1;
    }
    this->__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_2185CE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v19, *(char **)(v18 + 56));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a10, *(char **)(v18 + 32));
  a18 = v18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void xgboost_old::learner::BoostLearner::PredictRaw(float *a1, uint64_t a2, _QWORD *a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float *v22;
  float v23;

  v23 = a5;
  v10 = *((_QWORD *)a1 + 26);
  v11 = (**(uint64_t (***)(uint64_t))a2)(a2);
  v12 = *((_QWORD *)a1 + 43);
  v13 = *((_QWORD *)a1 + 44) - v12;
  if (v13)
  {
    v14 = v13 / 24;
    if ((unint64_t)(v13 / 24) <= 1)
      v14 = 1;
    v15 = (uint64_t *)(v12 + 8);
    while (1)
    {
      v16 = *(v15 - 1) == a2 && *(_QWORD *)(a2 + 176) == (_QWORD)a1;
      if (v16 && v15[1] == *(_QWORD *)(a2 + 16))
        break;
      v15 += 3;
      if (!--v14)
        goto LABEL_12;
    }
    v17 = *v15;
  }
  else
  {
LABEL_12:
    v17 = -1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v10 + 64))(v10, v11, v17, a2 + 16, a3, a4);
  v19 = ((a3[1] - *a3) >> 2);
  if (a5 != 1.0)
  {
    v21 = a3;
    v22 = &v23;
    turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(0, v19, (uint64_t)&v21);
  }
  v20 = *(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152);
  if (v20)
  {
    xgboost_old::utils::Check(a3[1] - *a3 == v20, "base_margin.size does not match with prediction size", v18);
    v21 = a3;
    v22 = (float *)a2;
    turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(0, v19, (uint64_t)&v21);
  }
  else
  {
    v21 = a3;
    v22 = a1;
    turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(0, v19, (uint64_t)&v21);
  }
}

void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  float *v11;
  float *v12;
  turi::thread_pool *v13;
  uint64_t v14;
  double v15;
  double v16;
  turi::thread *v17;
  unint64_t v18;
  uint64_t v19[4];
  _BYTE v20[192];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v13 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v13);
    v14 = 0;
    v15 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v16 = (double)(unint64_t)a1;
    do
    {
      v17 = (turi::thread *)(v14 + 1);
      v18 = (unint64_t)(v16 + v15 * (double)(unint64_t)(v14 + 1));
      if ((turi::thread *)v14 == (turi::thread *)((char *)v7 - 1))
        v18 = a2;
      v19[2] = (unint64_t)(v16 + v15 * (double)(unint64_t)v14);
      v19[3] = v18;
      v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v19[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v20, (uint64_t)v19, v14);
      boost::function0<void>::~function0(v19);
      v14 = (uint64_t)v17;
    }
    while (v17 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v20);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v20);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(float **)(a3 + 8);
      v12 = (float *)(**(_QWORD **)a3 + 4 * (_QWORD)a1);
      do
      {
        *v12 = *v11 * *v12;
        ++v12;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2185CE4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  turi::thread_pool *v14;
  uint64_t v15;
  double v16;
  double v17;
  turi::thread *v18;
  unint64_t v19;
  uint64_t v20[4];
  _BYTE v21[192];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v14 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v21, v14);
    v15 = 0;
    v16 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v17 = (double)(unint64_t)a1;
    do
    {
      v18 = (turi::thread *)(v15 + 1);
      v19 = (unint64_t)(v17 + v16 * (double)(unint64_t)(v15 + 1));
      if ((turi::thread *)v15 == (turi::thread *)((char *)v7 - 1))
        v19 = a2;
      v20[2] = (unint64_t)(v17 + v16 * (double)(unint64_t)v15);
      v20[3] = v19;
      v20[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2})::stored_vtable
             + 1;
      v20[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v21, (uint64_t)v20, v15);
      boost::function0<void>::~function0(v20);
      v15 = (uint64_t)v18;
    }
    while (v18 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v21);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v21);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = (float *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 152) + 4 * (_QWORD)a1);
      v12 = (float *)(**(_QWORD **)a3 + 4 * (_QWORD)a1);
      do
      {
        v13 = *v11++;
        *v12 = v13 + *v12;
        ++v12;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2185CE66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  turi::thread_pool *v13;
  uint64_t v14;
  double v15;
  double v16;
  turi::thread *v17;
  unint64_t v18;
  uint64_t v19[4];
  _BYTE v20[192];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v13 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v20, v13);
    v14 = 0;
    v15 = (double)(a2 - (unint64_t)a1) / (double)(unint64_t)v7;
    v16 = (double)(unint64_t)a1;
    do
    {
      v17 = (turi::thread *)(v14 + 1);
      v18 = (unint64_t)(v16 + v15 * (double)(unint64_t)(v14 + 1));
      if ((turi::thread *)v14 == (turi::thread *)((char *)v7 - 1))
        v18 = a2;
      v19[2] = (unint64_t)(v16 + v15 * (double)(unint64_t)v14);
      v19[3] = v18;
      v19[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>(xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3})::stored_vtable
             + 1;
      v19[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v20, (uint64_t)v19, v14);
      boost::function0<void>::~function0(v19);
      v14 = (uint64_t)v17;
    }
    while (v17 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v20);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v20);
  }
  else
  {
    v10 = a2 - (_QWORD)a1;
    if (a2 > (unint64_t)a1)
    {
      v11 = *(_QWORD *)(a3 + 8);
      v12 = (float *)(**(_QWORD **)a3 + 4 * (_QWORD)a1);
      do
      {
        *v12 = *(float *)(v11 + 72) + *v12;
        ++v12;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_2185CE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872ADA2 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872ADA2 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float result;

  v2 = a1[1];
  v1 = a1[2];
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(float **)(*a1 + 8);
    v6 = (float *)(**(_QWORD **)*a1 + 4 * v2);
    do
    {
      result = *v5 * *v6;
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872AE37 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872AE37 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#2} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float v7;
  float result;

  v2 = a1[1];
  v1 = a1[2];
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = (float *)(**(_QWORD **)*a1 + 4 * v2);
    v6 = (float *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 152) + 4 * v2);
    do
    {
      v7 = *v6++;
      result = v7 + *v5;
      *v5++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872AECDLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872AECDLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

float boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3}>(unsigned long,unsigned long,xgboost_old::learner::BoostLearner::PredictRaw(xgboost_old::learner::DMatrix const&,std::vector<float> *,unsigned int,float)::{lambda(unsigned long)#3} const&)::{lambda(void)#1},void>::invoke(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  float *v6;
  float result;

  v2 = a1[1];
  v1 = a1[2];
  v3 = v1 > v2;
  v4 = v1 - v2;
  if (v3)
  {
    v5 = *(_QWORD *)(*a1 + 8);
    v6 = (float *)(**(_QWORD **)*a1 + 4 * v2);
    do
    {
      result = *(float *)(v5 + 72) + *v6;
      *v6++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__emplace_unique_key_args<std::pair<std::string,unsigned long>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,unsigned long>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = **a4;
    v7[6] = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    v7[7] = *((_QWORD *)v9 + 3);
    *((_DWORD *)v7 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16 && a2[3] < a3[3];
}

uint64_t std::map<std::pair<std::string,unsigned long>,float>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__find_equal<std::pair<std::string,unsigned long>>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 64;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,unsigned long>,float>,std::__map_value_compare<std::pair<std::string,unsigned long>,std::__value_type<std::pair<std::string,unsigned long>,float>,std::less<std::pair<std::string,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<std::string,unsigned long>,float>>>::__count_unique<std::pair<std::string,unsigned long>>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::pair<std::string,unsigned long>>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

__n128 std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v8 + 8) = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL))
                                                                + 24 * (a1[2].i64[0] % 0xAAuLL) + 8);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA040);
  return std::deque<std::string>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

void std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2185CF174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *turi::supervised::xgboost::early_stopping_checkpointer::get_model_at_iteration@<X0>(_QWORD *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *exception;

  v3 = this[1];
  if (this[2] == v3)
    goto LABEL_13;
  v4 = this[4];
  v5 = (_QWORD *)(v3 + 8 * (v4 / 0xAA));
  v6 = (_QWORD *)(*v5 + 24 * (v4 % 0xAA));
  v7 = this[5] + v4;
  v8 = v7 / 0xAA;
  v9 = v7 % 0xAA;
  v10 = *(_QWORD *)(v3 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  if (v6 != (_QWORD *)v10)
  {
    while (*v6 != a2)
    {
      v6 += 3;
      if ((_QWORD *)((char *)v6 - *v5) == (_QWORD *)4080)
      {
        v11 = (_QWORD *)v5[1];
        ++v5;
        v6 = v11;
      }
      if (v6 == (_QWORD *)v10)
      {
        v6 = (_QWORD *)v10;
        break;
      }
    }
  }
  if (v6 == (_QWORD *)(*(_QWORD *)(v3 + 8 * v8) + 24 * v9))
  {
LABEL_13:
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Cannot find model at given iteration";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  v12 = v6[2];
  *a3 = v6[1];
  a3[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return this;
}

uint64_t turi::supervised::xgboost::ArcStreamOutAdapter::Read(turi::supervised::xgboost::ArcStreamOutAdapter *this, void *a2, const char *a3)
{
  xgboost_old::utils::Assert(0, "ArcStreamOutAdapter: read not implemented", a3);
  return 0;
}

void *turi::supervised::xgboost::ArcStreamOutAdapter::Write(turi::supervised::xgboost::ArcStreamOutAdapter *this, const void *__src, size_t __n)
{
  uint64_t v5;
  void *result;
  size_t v7;
  char *v8;
  size_t v9;
  char **v10;
  size_t v11;
  BOOL v12;
  std::vector<char>::size_type v13;

  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)v5)
    return (void *)std::ostream::write();
  v7 = *(_QWORD *)(v5 + 40);
  if (*(_QWORD *)(v5 + 32) + __n > v7)
  {
    v9 = 2 * (v7 + __n);
    *(_QWORD *)(v5 + 40) = v9;
    v10 = *(char ***)(v5 + 16);
    if (v10)
    {
      v8 = *v10;
      v11 = v10[1] - *v10;
      v12 = v9 >= v11;
      v13 = v9 - v11;
      if (v13 != 0 && v12)
      {
        std::vector<char>::__append(*(std::vector<char> **)(v5 + 16), v13);
        v8 = **(char ***)(v5 + 16);
      }
      else if (!v12)
      {
        v10[1] = &v8[v9];
      }
    }
    else
    {
      v8 = (char *)malloc_type_realloc(*(void **)(v5 + 24), v9, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(v5 + 24) = v8;
  }
  else
  {
    v8 = *(char **)(v5 + 24);
  }
  result = memcpy(&v8[*(_QWORD *)(v5 + 32)], __src, __n);
  *(_QWORD *)(v5 + 32) += __n;
  return result;
}

uint64_t turi::supervised::xgboost::ArcStreamInAdapter::Read(turi::supervised::xgboost::ArcStreamInAdapter *this, void *__dst, size_t __n)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    memcpy(__dst, (const void *)(v5 + *(_QWORD *)(v4 + 24)), __n);
    *(_QWORD *)(v4 + 24) += __n;
  }
  else
  {
    std::istream::read();
  }
  return 1;
}

uint64_t turi::supervised::xgboost::ArcStreamInAdapter::Write(turi::supervised::xgboost::ArcStreamInAdapter *this, const void *a2, const char *a3)
{
  return xgboost_old::utils::Assert(0, "ArcStreamInAdapter: write not implemented", a3);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x188uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2185CF45C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN11xgboost_old7learner12BoostLearnerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D94A680;
  a1[1] = 0;
  xgboost_old::learner::BoostLearner::BoostLearner((xgboost_old::learner::BoostLearner *)(a1 + 3));
  return a1;
}

void sub_2185CF4A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::BoostLearner>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalLogLoss>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalMultiLogLoss>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalAuc>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

float turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalError>::Eval(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  return 1.0 - xgboost_old::learner::EvalEWiseBase<xgboost_old::learner::EvalError>::Eval(a1, a2, a3, a4);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

float turi::supervised::xgboost::ErrorToAccuracyEvaluator<xgboost_old::learner::EvalMatchError>::Eval(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  return 1.0 - xgboost_old::learner::EvalMClassBase<xgboost_old::learner::EvalMatchError>::Eval(a1, a2, a3, a4);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<xgboost_old::learner::EvalRMSE>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94A940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::EvalMaxError>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

float turi::supervised::xgboost::EvalMaxError::Eval(turi::thread *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  unint64_t v8;
  void *v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  _QWORD v15[3];
  void *__p;
  void *v17;

  v7 = *(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64);
  v8 = turi::thread::cpu_count(a1);
  LODWORD(v15[0]) = 0;
  std::vector<float>::vector(&__p, v8, v15);
  v15[0] = a3;
  v15[1] = a2;
  v15[2] = &__p;
  turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(0, (v7 >> 2), v15);
  v9 = __p;
  v10 = *(float *)__p;
  if (__p != v17)
  {
    v11 = (float *)__p;
    do
    {
      v12 = *v11++;
      v13 = v12;
      if (v10 < v12)
        v10 = v13;
    }
    while (v11 != v17);
  }
  *(float *)v15 = v10;
  if ((a4 & 1) != 0)
  {
    rabit::engine::Allreduce_((uint64_t)v15, 4, 1, (uint64_t)rabit::op::Reducer<rabit::op::Max,float>, 6, 0, 0, 0);
    v10 = *(float *)v15;
    v9 = __p;
  }
  if (v9)
  {
    v17 = v9;
    operator delete(v9);
  }
  return v10;
}

void sub_2185CF8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *turi::supervised::xgboost::EvalMaxError::Name(turi::supervised::xgboost::EvalMaxError *this)
{
  return "max_error";
}

void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  float v13;
  turi::thread *v14;
  _QWORD *v15;
  turi::thread_pool *v16;
  uint64_t v17;
  double v18;
  double v19;
  turi::thread *v20;
  unint64_t v21;
  uint64_t v22[4];
  _BYTE v23[192];
  uint64_t v24;

  v5 = (unint64_t)a1;
  v24 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v16 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v23, v16);
    v17 = 0;
    v18 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v19 = (double)v5;
    do
    {
      v20 = (turi::thread *)(v17 + 1);
      v21 = (unint64_t)(v19 + v18 * (double)(unint64_t)(v17 + 1));
      if ((turi::thread *)v17 == (turi::thread *)((char *)v7 - 1))
        v21 = a2;
      v22[2] = (unint64_t)(v19 + v18 * (double)(unint64_t)v17);
      v22[3] = v21;
      v22[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v22[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v23, (uint64_t)v22, v17);
      boost::function0<void>::~function0(v22);
      v17 = (uint64_t)v20;
    }
    while (v20 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v23);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v23);
  }
  else if (a2 > v5)
  {
    do
    {
      v10 = *(_QWORD *)(*a3 + 112);
      if (*(_QWORD *)(*a3 + 120) == v10)
        v11 = 1.0;
      else
        v11 = *(float *)(v10 + 4 * v5);
      v12 = (_QWORD *)a3[2];
      v13 = v11 * vabds_f32(*(float *)(*(_QWORD *)(*a3 + 64) + 4 * v5), *(float *)(*(_QWORD *)a3[1] + 4 * v5));
      v14 = (turi::thread *)turi::thread::get_tls_data(tls_data);
      if (v13 < *(float *)(*v12 + 4 * *(_QWORD *)v14))
        v13 = *(float *)(*v12 + 4 * *(_QWORD *)v14);
      v15 = (_QWORD *)a3[2];
      tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v14);
      *(float *)(*v15 + 4 * *(_QWORD *)tls_data) = v13;
      ++v5;
    }
    while (a2 != v5);
  }
}

void sub_2185CFA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872CB12 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872CB12 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

turi::thread *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::EvalMaxError::Eval(std::vector<float> const&,xgboost_old::learner::MetaInfo const&,BOOL)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(turi::thread *result)
{
  unint64_t v1;
  turi::thread *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  float v6;
  _QWORD *v7;
  float v8;
  turi::thread *tls_data;
  _QWORD *v10;

  v1 = *((_QWORD *)result + 1);
  if (v1 < *((_QWORD *)result + 2))
  {
    v2 = result;
    do
    {
      v3 = *(_QWORD **)v2;
      v4 = **(_QWORD ***)v2;
      v5 = v4[14];
      if (v4[15] == v5)
        v6 = 1.0;
      else
        v6 = *(float *)(v5 + 4 * v1);
      v7 = (_QWORD *)v3[2];
      v8 = v6 * vabds_f32(*(float *)(v4[8] + 4 * v1), *(float *)(*(_QWORD *)v3[1] + 4 * v1));
      tls_data = (turi::thread *)turi::thread::get_tls_data(result);
      if (v8 < *(float *)(*v7 + 4 * *(_QWORD *)tls_data))
        v8 = *(float *)(*v7 + 4 * *(_QWORD *)tls_data);
      v10 = (_QWORD *)v3[2];
      result = (turi::thread *)turi::thread::get_tls_data(tls_data);
      *(float *)(*v10 + 4 * *(_QWORD *)result) = v8;
      ++v1;
    }
    while (v1 < *((_QWORD *)v2 + 2));
  }
  return result;
}

void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6[5];
  double v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a1;
  v8 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  v7 = (double)(unint64_t)((a2 - a1) >> 2) / (double)v8;
  v6[0] = &v10;
  v6[1] = (uint64_t *)&v7;
  v6[2] = (uint64_t *)&v8;
  v6[3] = &v9;
  v6[4] = a3;
  turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v8, v6);
}

void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1}>(std::__wrap_iter<float const*>)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185CFDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  double v3;
  uint64_t v4;
  float *v5;
  float *i;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *result;
  uint64_t v41;
  void **v42;
  double v43;
  int v44;
  char v45;
  _QWORD v46[3];
  _QWORD *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(double *)a1[1];
  v4 = **a1;
  if (*a1[2] - 1 == a2)
    v5 = (float *)*a1[3];
  else
    v5 = (float *)(v4 + 4 * (uint64_t)(v3 * (double)(a2 + 1)));
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, unint64_t))(*a1[4] + 32))(v46, a1[4], a2);
  for (i = (float *)(v4 + 4 * (uint64_t)(v3 * (double)a2)); i != v5; ++i)
  {
    v44 = 0;
    v45 = 1;
    v43 = *i;
    if (!v49)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, double *))(*(_QWORD *)v49 + 48))(v49, &v43);
    switch(v45)
    {
      case 2:
        v7 = *(unint64_t **)&v43;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = v43;
          if (v43 != 0.0)
          {
            if (*(char *)(*(_QWORD *)&v43 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)&v43 + 8));
            v11 = v10;
            v12 = 0x1012C404EF22A49;
            goto LABEL_47;
          }
        }
        break;
      case 3:
        v24 = *(unint64_t **)&v43;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = v43;
          if (v43 != 0.0)
          {
            v28 = *(void **)(*(_QWORD *)&v43 + 8);
            if (v28)
            {
              *(_QWORD *)(*(_QWORD *)&v43 + 16) = v28;
              operator delete(v28);
            }
            v11 = v27;
            v12 = 0x1080C409938AC02;
            goto LABEL_47;
          }
        }
        break;
      case 4:
        v13 = *(unint64_t **)&v43;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = v43;
          if (v43 != 0.0)
          {
            v42 = (void **)(*(_QWORD *)&v43 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
            goto LABEL_40;
          }
        }
        break;
      case 5:
        v29 = *(unint64_t **)&v43;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v16 = v43;
          if (v43 != 0.0)
          {
            v42 = (void **)(*(_QWORD *)&v43 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_40:
            v11 = v16;
            v12 = 0x1020C405E66F15BLL;
            goto LABEL_47;
          }
        }
        break;
      case 8:
        v32 = *(unint64_t **)&v43;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = v43;
          if (v43 != 0.0)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v43 + 16));
            v11 = v35;
            v23 = -235920773;
            goto LABEL_46;
          }
        }
        break;
      case 9:
        v17 = *(unint64_t **)&v43;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = v43;
          if (v43 != 0.0)
          {
            v21 = *(void **)(*(_QWORD *)&v43 + 48);
            if (v21)
            {
              *(_QWORD *)(*(_QWORD *)&v43 + 56) = v21;
              operator delete(v21);
            }
            v22 = *(void **)(*(_QWORD *)&v20 + 24);
            if (v22)
            {
              *(_QWORD *)(*(_QWORD *)&v20 + 32) = v22;
              operator delete(v22);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v20 + 8);
            v11 = v20;
            v23 = 2071181815;
LABEL_46:
            v12 = v23 | 0x1030C4000000000;
LABEL_47:
            MEMORY[0x219A19A08](*(_QWORD *)&v11, v12);
          }
        }
        break;
      default:
        continue;
    }
  }
  v36 = v51;
  if (v51 == v50)
  {
    v37 = 4;
    v36 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_54;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_54:
  v38 = v49;
  if (v49 == v48)
  {
    v39 = 4;
    v38 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_59;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_59:
  result = v47;
  if (v47 == v46)
  {
    v41 = 4;
    result = v46;
  }
  else
  {
    if (!v47)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_2185D0190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872CBB4 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872CBB4 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<float const*> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<float const*>,std::__wrap_iter<float const*>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_0,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D0534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D06B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_2,std::__wrap_iter<float const*>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D0834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_5EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_5EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

double boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_5 const&)::{lambda(void)#1},void>::invoke(uint64_t ***a1, double result)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;

  v2 = (unint64_t)a1[1];
  v3 = (unint64_t)a1[2];
  if (v2 < v3)
  {
    v4 = ***a1;
    v5 = *(*a1)[3];
    v6 = *(_QWORD *)*(*a1)[2];
    v7 = *(*a1)[1];
    do
    {
      v8 = (float *)(v5 + 4 * v2 * v4);
      if (v6 >= 2)
      {
        v9 = v8 + 1;
        v10 = *v8;
        v11 = 4 * v6 - 4;
        v12 = v8 + 1;
        do
        {
          v13 = *v12++;
          v14 = v13;
          if (v10 < v13)
          {
            v10 = v14;
            v8 = v9;
          }
          v9 = v12;
          v11 -= 4;
        }
        while (v11);
      }
      result = *v8;
      *(double *)(v7 + 8 * v2++) = result;
    }
    while (v2 != v3);
  }
  return result;
}

void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6[5];
  double v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a1;
  v8 = (*(uint64_t (**)(uint64_t *))(*a3 + 24))(a3);
  v7 = (double)(unint64_t)((a2 - a1) >> 3) / (double)v8;
  v6[0] = &v10;
  v6[1] = (uint64_t *)&v7;
  v6[2] = (uint64_t *)&v8;
  v6[3] = &v9;
  v6[4] = a3;
  turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(0, v8, v6);
}

void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1}>(std::__wrap_iter<double *>)::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185D0BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *result;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  int v44;
  char v45;
  _QWORD v46[3];
  _QWORD *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(double *)a1[1];
  v4 = **a1;
  if (*a1[2] - 1 == a2)
    v5 = (uint64_t *)*a1[3];
  else
    v5 = (uint64_t *)(v4 + 8 * (uint64_t)(v3 * (double)(a2 + 1)));
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, unint64_t))(*a1[4] + 32))(v46, a1[4], a2);
  for (i = (uint64_t *)(v4 + 8 * (uint64_t)(v3 * (double)a2)); i != v5; ++i)
  {
    v44 = 0;
    v45 = 1;
    v43 = *i;
    if (!v49)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v49 + 48))(v49, &v43);
    switch(v45)
    {
      case 2:
        v7 = (unint64_t *)v43;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = v43;
          if (v43)
          {
            if (*(char *)(v43 + 31) < 0)
              operator delete(*(void **)(v43 + 8));
            v11 = v10;
            v12 = 0x1012C404EF22A49;
            goto LABEL_47;
          }
        }
        break;
      case 3:
        v24 = (unint64_t *)v43;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = v43;
          if (v43)
          {
            v28 = *(void **)(v43 + 8);
            if (v28)
            {
              *(_QWORD *)(v43 + 16) = v28;
              operator delete(v28);
            }
            v11 = v27;
            v12 = 0x1080C409938AC02;
            goto LABEL_47;
          }
        }
        break;
      case 4:
        v13 = (unint64_t *)v43;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = v43;
          if (v43)
          {
            v42 = (void **)(v43 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
            goto LABEL_40;
          }
        }
        break;
      case 5:
        v29 = (unint64_t *)v43;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v16 = v43;
          if (v43)
          {
            v42 = (void **)(v43 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_40:
            v11 = v16;
            v12 = 0x1020C405E66F15BLL;
            goto LABEL_47;
          }
        }
        break;
      case 8:
        v32 = (unint64_t *)v43;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          v35 = v43;
          if (v43)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v43 + 16));
            v11 = v35;
            v23 = -235920773;
            goto LABEL_46;
          }
        }
        break;
      case 9:
        v17 = (unint64_t *)v43;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = v43;
          if (v43)
          {
            v21 = *(void **)(v43 + 48);
            if (v21)
            {
              *(_QWORD *)(v43 + 56) = v21;
              operator delete(v21);
            }
            v22 = *(void **)(v20 + 24);
            if (v22)
            {
              *(_QWORD *)(v20 + 32) = v22;
              operator delete(v22);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20 + 8);
            v11 = v20;
            v23 = 2071181815;
LABEL_46:
            v12 = v23 | 0x1030C4000000000;
LABEL_47:
            MEMORY[0x219A19A08](v11, v12);
          }
        }
        break;
      default:
        continue;
    }
  }
  v36 = v51;
  if (v51 == v50)
  {
    v37 = 4;
    v36 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_54;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_54:
  v38 = v49;
  if (v49 == v48)
  {
    v39 = 4;
    v38 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_59;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_59:
  result = v47;
  if (v47 == v46)
  {
    v41 = 4;
    result = v46;
  }
  else
  {
    if (!v47)
      return result;
    v41 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v41))();
}

void sub_2185D0F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872CD23 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872CD23 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<void turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,std::__wrap_iter<double *> const&)::{lambda(void)#1},void>::invoke(uint64_t ***result)
{
  unint64_t v1;
  uint64_t ***v2;

  v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    v2 = result;
    do
      result = (uint64_t ***)turi::sframe_impl::do_copy<std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &>(std::__wrap_iter<double *>,std::__wrap_iter<double *>,turi::sarray<turi::flexible_type> &,std::random_access_iterator_tag)::{lambda(unsigned long)#1}::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_7EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_7EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_7 const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = **(_QWORD **)(*result + 24);
    v3 = **(_QWORD ***)(*result + 16);
    v4 = *(_QWORD **)*result;
    v5 = **(_QWORD **)(*result + 8);
    do
    {
      v6 = (float *)(v2 + 4 * *v4 * v1);
      if (*v3 >= 2uLL)
      {
        v8 = v6 + 1;
        v9 = *v6;
        v10 = 4 * *v3 - 4;
        v7 = (float *)(v2 + 4 * *v4 * v1);
        v11 = v6 + 1;
        do
        {
          v12 = *v11++;
          v13 = v12;
          if (v9 < v12)
          {
            v9 = v13;
            v7 = v8;
          }
          v8 = v11;
          v10 -= 4;
        }
        while (v10);
      }
      else
      {
        v7 = (float *)(v2 + 4 * *v4 * v1);
      }
      *(_QWORD *)(v5 + 8 * v1++) = v7 - v6;
    }
    while (v1 < result[2]);
  }
  return result;
}

void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", 104);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer.is_opened_for_write()", 28);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/algorithm.hpp", "operator()", 417, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  void turi::copy<boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &,void>(boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_8,std::__wrap_iter<unsigned long *>,boost::iterators::use_default,boost::iterators::use_default>,turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D1450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  double *v13;
  uint64_t v14;
  float *v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *result;
  uint64_t v90;
  void *__p;
  _BYTE *v92;
  void **v93;
  _BYTE v94[13];
  _QWORD v95[3];
  _QWORD *v96;
  _BYTE v97[24];
  _BYTE *v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)**a1 + 32))(v95);
  v4 = *a1[1];
  v5 = *a1[2];
  v6 = *a1[3];
  *(_QWORD *)v94 = 0;
  std::vector<double>::vector(&__p, v6, v94);
  v7 = *a1[3];
  v8 = v7 * (v4 * a2 / v5);
  v9 = v7 * ((v4 + v4 * a2) / v5);
  if (v8 != v9)
  {
    v10 = *a1[4];
    v11 = (float *)(v10 + 4 * v9);
    v12 = (float *)(v10 + 4 * v8);
    do
    {
      if (v7)
      {
        v13 = (double *)__p;
        v14 = 4 * v7;
        v15 = v12;
        do
        {
          v16 = *v15++;
          *v13++ = v16;
          v14 -= 4;
        }
        while (v14);
      }
      *(_QWORD *)&v94[5] = 0x300000000000000;
      *(_QWORD *)v94 = 0;
      v17 = (_QWORD *)operator new();
      v18 = v17;
      *v17 = 0;
      v17[1] = 0;
      v19 = (void **)(v17 + 1);
      v17[2] = 0;
      v17[3] = 0;
      *(_QWORD *)v94 = v17;
      *v17 = 1;
      switch(v94[12])
      {
        case 2:
          if (*v17 != 1)
          {
            v20 = (_QWORD *)operator new();
            v21 = *(_QWORD *)v94;
            *v20 = **(_QWORD **)v94;
            v22 = (std::string *)(v20 + 1);
            if (*(char *)(v21 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)(v21 + 8), *(_QWORD *)(v21 + 16));
            }
            else
            {
              v23 = *(_OWORD *)(v21 + 8);
              v20[3] = *(_QWORD *)(v21 + 24);
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
            }
            *(_QWORD *)v94 = v20;
            *v20 = 1;
            do
            {
              v54 = __ldaxr(v18);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v18));
            if (!v55)
            {
              v40 = 0x1012C404EF22A49;
              if (*((char *)v18 + 31) < 0)
              {
                operator delete(*v19);
                v40 = 0x1012C404EF22A49;
              }
              goto LABEL_51;
            }
          }
          break;
        case 3:
          if (*v17 != 1)
          {
            v35 = (_QWORD *)operator new();
            v36 = *(_QWORD *)v94;
            *v35 = **(_QWORD **)v94;
            v35[2] = 0;
            v35[3] = 0;
            v35[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v35 + 1, *(const void **)(v36 + 8), *(_QWORD *)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
            *(_QWORD *)v94 = v35;
            *v35 = 1;
            do
            {
              v37 = __ldaxr(v18);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v18));
            if (!v38)
            {
              v39 = *v19;
              v40 = 0x1080C409938AC02;
              if (*v19)
              {
                v18[2] = v39;
                operator delete(v39);
                v40 = 0x1080C409938AC02;
              }
              goto LABEL_51;
            }
          }
          break;
        case 4:
          if (*v17 != 1)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)v94;
            *v24 = **(_QWORD **)v94;
            v24[2] = 0;
            v24[3] = 0;
            v24[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v24 + 1, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 4);
            *(_QWORD *)v94 = v24;
            *v24 = 1;
            do
            {
              v26 = __ldaxr(v18);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v18));
            if (!v27)
            {
              v93 = v19;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v93);
              goto LABEL_35;
            }
          }
          break;
        case 5:
          if (*v17 != 1)
          {
            v41 = (_QWORD *)operator new();
            v42 = *(_QWORD *)v94;
            *v41 = **(_QWORD **)v94;
            v41[2] = 0;
            v41[3] = 0;
            v41[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v41 + 1, *(uint64_t **)(v42 + 8), *(uint64_t **)(v42 + 16), (uint64_t)(*(_QWORD *)(v42 + 16) - *(_QWORD *)(v42 + 8)) >> 5);
            *(_QWORD *)v94 = v41;
            *v41 = 1;
            do
            {
              v43 = __ldaxr(v18);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v18));
            if (!v44)
            {
              v93 = v19;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v93);
LABEL_35:
              v40 = 0x1020C405E66F15BLL;
              goto LABEL_51;
            }
          }
          break;
        case 8:
          if (*v17 != 1)
          {
            v45 = operator new();
            v46 = *(_QWORD *)v94;
            *(_QWORD *)v45 = **(_QWORD **)v94;
            *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
            v47 = *(_QWORD *)(v46 + 16);
            *(_QWORD *)(v45 + 16) = v47;
            if (v47)
            {
              v48 = (unsigned int *)(v47 + 8);
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v50 = *(_OWORD *)(v46 + 24);
            v51 = *(_OWORD *)(v46 + 40);
            *(_OWORD *)(v45 + 56) = *(_OWORD *)(v46 + 56);
            *(_OWORD *)(v45 + 40) = v51;
            *(_OWORD *)(v45 + 24) = v50;
            *(_QWORD *)v94 = v45;
            *(_QWORD *)v45 = 1;
            do
            {
              v52 = __ldaxr(v18);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v18));
            if (!v53)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v18 + 2);
              v34 = -235920773;
              goto LABEL_44;
            }
          }
          break;
        case 9:
          if (*v17 != 1)
          {
            v28 = (_QWORD *)operator new();
            v29 = *(_QWORD *)v94 + 8;
            *v28 = **(_QWORD **)v94;
            turi::flexible_type_impl::ndarray<double>::ndarray(v28 + 1, v29);
            *(_QWORD *)v94 = v28;
            *v28 = 1;
            do
            {
              v30 = __ldaxr(v18);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v18));
            if (!v31)
            {
              v32 = (void *)v18[6];
              if (v32)
              {
                v18[7] = v32;
                operator delete(v32);
              }
              v33 = (void *)v18[3];
              if (v33)
              {
                v18[4] = v33;
                operator delete(v33);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v19);
              v34 = 2071181815;
LABEL_44:
              v40 = v34 | 0x1030C4000000000;
LABEL_51:
              MEMORY[0x219A19A08](v18, v40);
            }
          }
          break;
        default:
          break;
      }
      if ((void **)(*(_QWORD *)v94 + 8) != &__p)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*(_QWORD *)v94 + 8), (char *)__p, (uint64_t)v92, (v92 - (_BYTE *)__p) >> 3);
      if (!v98)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v98 + 48))(v98, v94);
      switch(v94[12])
      {
        case 2:
          v56 = *(unint64_t **)v94;
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              if (*(char *)(*(_QWORD *)v94 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)v94 + 8));
              v60 = v59;
              v61 = 0x1012C404EF22A49;
              goto LABEL_96;
            }
          }
          break;
        case 3:
          v73 = *(unint64_t **)v94;
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            v76 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              v77 = *(void **)(*(_QWORD *)v94 + 8);
              if (v77)
              {
                *(_QWORD *)(*(_QWORD *)v94 + 16) = v77;
                operator delete(v77);
              }
              v60 = v76;
              v61 = 0x1080C409938AC02;
              goto LABEL_96;
            }
          }
          break;
        case 4:
          v62 = *(unint64_t **)v94;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              v93 = (void **)(*(_QWORD *)v94 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v93);
              goto LABEL_89;
            }
          }
          break;
        case 5:
          v78 = *(unint64_t **)v94;
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (!v80)
          {
            v65 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              v93 = (void **)(*(_QWORD *)v94 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v93);
LABEL_89:
              v60 = v65;
              v61 = 0x1020C405E66F15BLL;
              goto LABEL_96;
            }
          }
          break;
        case 8:
          v81 = *(unint64_t **)v94;
          do
          {
            v82 = __ldaxr(v81);
            v83 = v82 - 1;
          }
          while (__stlxr(v83, v81));
          if (!v83)
          {
            v84 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v94 + 16));
              v60 = v84;
              v72 = -235920773;
              goto LABEL_95;
            }
          }
          break;
        case 9:
          v66 = *(unint64_t **)v94;
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v69 = *(_QWORD *)v94;
            if (*(_QWORD *)v94)
            {
              v70 = *(void **)(*(_QWORD *)v94 + 48);
              if (v70)
              {
                *(_QWORD *)(*(_QWORD *)v94 + 56) = v70;
                operator delete(v70);
              }
              v71 = *(void **)(v69 + 24);
              if (v71)
              {
                *(_QWORD *)(v69 + 32) = v71;
                operator delete(v71);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v69 + 8);
              v60 = v69;
              v72 = 2071181815;
LABEL_95:
              v61 = v72 | 0x1030C4000000000;
LABEL_96:
              MEMORY[0x219A19A08](v60, v61);
            }
          }
          break;
        default:
          break;
      }
      v7 = *a1[3];
      v12 += v7;
    }
    while (v12 != v11);
  }
  if (__p)
  {
    v92 = __p;
    operator delete(__p);
  }
  v85 = v100;
  if (v100 == v99)
  {
    v86 = 4;
    v85 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_105;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_105:
  v87 = v98;
  if (v98 == v97)
  {
    v88 = 4;
    v87 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_110;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_110:
  result = v96;
  if (v96 == v95)
  {
    v90 = 4;
    result = v95;
  }
  else
  {
    if (!v96)
      return result;
    v90 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v90))();
}

void sub_2185D1C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, __int16 a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;

  MEMORY[0x219A19A08](v17, 0x1012C404EF22A49);
  switch(a15)
  {
    case 2:
      v19 = (unint64_t *)a13;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = a13;
        if (a13)
        {
          if (*(char *)(a13 + 31) < 0)
            operator delete(*(void **)(a13 + 8));
          MEMORY[0x219A19A08](v22, 0x1012C404EF22A49);
        }
      }
      goto LABEL_37;
    case 3:
      v32 = (unint64_t *)a13;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
        turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()(&a13);
      goto LABEL_37;
    case 4:
      v23 = (unint64_t *)a13;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_37;
      v26 = a13;
      if (!a13)
        goto LABEL_36;
      a12 = a13 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_28;
    case 5:
      v35 = (unint64_t *)a13;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_37;
      v26 = a13;
      if (!a13)
        goto LABEL_36;
      a12 = a13 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_28:
      v30 = (_QWORD *)v26;
      v38 = 0x1020C405E66F15BLL;
      goto LABEL_35;
    case 8:
      v39 = (unint64_t *)a13;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_37;
      v42 = a13;
      if (!a13)
        goto LABEL_36;
      boost::detail::shared_count::~shared_count((unsigned int **)(a13 + 16));
      v30 = (_QWORD *)v42;
      v31 = -235920773;
      goto LABEL_34;
    case 9:
      v27 = (unint64_t *)a13;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_37;
      if (!a13)
        goto LABEL_36;
      v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a13);
      v31 = 2071181815;
LABEL_34:
      v38 = v31 | 0x1030C4000000000;
LABEL_35:
      MEMORY[0x219A19A08](v30, v38);
LABEL_36:
      a13 = 0;
LABEL_37:
      if (__p)
        operator delete(__p);
      turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a17);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_37;
  }
}

void sub_2185D2040()
{
  JUMPOUT(0x2185D2038);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16v"
                                        "ectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_"
                                        "metadataEEEE3$_9EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost20transform_predictionERKNSt3__16vectorIfNS3_9allocatorIfEEEENS1_20prediction_type_enumEmNS3_10shared_ptrINS_11ml_metadataEEEE3$_9EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9 const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::supervised::xgboost::transform_prediction(std::vector<float> const&,turi::supervised::prediction_type_enum,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_9::operator()((_QWORD **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

_QWORD *turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v9;
  std::vector<int>::pointer v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float *v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  int *v21;
  std::vector<int>::pointer v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  std::vector<int>::pointer v29;
  std::vector<int>::pointer v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  int *v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int **v49;
  unsigned int **v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int **v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int **v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int **v66;
  unsigned int *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  int v108;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  void *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *result;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *__p[3];
  std::vector<int> v151;
  _QWORD v152[3];
  uint64_t *v153;
  _BYTE v154[24];
  _BYTE *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  turi::sframe::get_output_iterator(*(size_t **)a1, a2, (uint64_t)v154);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = **(_QWORD **)(a1 + 16);
  std::vector<turi::flexible_type>::vector(v152, 3uLL);
  std::vector<int>::vector(&v151, **(_QWORD **)(a1 + 24));
  std::vector<float>::vector(__p, 2uLL);
  v6 = v4 * a2 / v5;
  v148 = (v4 + v4 * a2) / v5;
  if (v6 < v148)
  {
    do
    {
      begin = v151.__begin_;
      end = v151.__end_;
      if (v151.__begin_ != v151.__end_)
      {
        v9 = 0;
        v10 = v151.__begin_;
        do
          *v10++ = v9++;
        while (v10 != end);
      }
      v149 = 0;
      v11 = *(_QWORD **)(a1 + 32);
      v12 = **(_QWORD **)(a1 + 40) * v6;
      v13 = *(_QWORD **)(a1 + 24);
      v149 = *v11 + 4 * v12;
      if (*v13 == 2)
      {
        v14 = *(float *)(*v11 + 4 * v12);
        v15 = (float *)__p[0];
        *((float *)__p[0] + 1) = v14;
        v16 = 1.0 - v14;
        if (**(_BYTE **)(a1 + 48) == 5)
          v16 = 0.0;
        *v15 = v16;
        v149 = (uint64_t)v15;
      }
      v17 = **(_QWORD **)(a1 + 56);
      v153 = &v149;
      if (v17)
      {
        if (v17 >= 2)
        {
          v18 = (unint64_t)(v17 - 2) >> 1;
          v19 = v18 + 1;
          v20 = &begin[v18];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v153, v17, v20--);
            --v19;
          }
          while (v19);
        }
        v21 = &begin[v17];
        if (v21 != end)
        {
          v22 = &begin[v17];
          do
          {
            v23 = *v22;
            v24 = *begin;
            if (*(float *)(v149 + 4 * v23) > *(float *)(v149 + 4 * v24))
            {
              *v22 = v24;
              *begin = v23;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v153, v17, begin);
            }
            ++v22;
          }
          while (v22 != end);
        }
        if (v17 >= 2)
        {
          v25 = v17 & 0x3FFFFFFFFFFFFFFFLL;
          do
          {
            v26 = 0;
            v27 = *begin;
            v28 = v153;
            v29 = begin;
            do
            {
              v30 = v29;
              v29 += v26 + 1;
              v31 = 2 * v26;
              v26 = (2 * v26) | 1;
              v32 = v31 + 2;
              if (v32 < v25 && *(float *)(*v28 + 4 * *v29) > *(float *)(*v28 + 4 * v29[1]))
              {
                ++v29;
                v26 = v32;
              }
              *v30 = *v29;
            }
            while (v26 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
            if (v29 == --v21)
            {
              *v29 = v27;
            }
            else
            {
              *v29 = *v21;
              *v21 = v27;
              v33 = (char *)v29 - (char *)begin + 4;
              if (v33 >= 5)
              {
                v34 = (((unint64_t)v33 >> 2) - 2) >> 1;
                v35 = &begin[v34];
                v36 = *v35;
                v37 = *v29;
                v38 = *v28;
                v39 = *(float *)(v38 + 4 * v37);
                if (*(float *)(v38 + 4 * v36) > v39)
                {
                  do
                  {
                    v40 = v35;
                    *v29 = v36;
                    if (!v34)
                      break;
                    v34 = (v34 - 1) >> 1;
                    v35 = &begin[v34];
                    v36 = *v35;
                    v29 = v40;
                  }
                  while (*(float *)(v38 + 4 * v36) > v39);
                  *v40 = v37;
                }
              }
            }
            v41 = v25-- <= 2;
          }
          while (!v41);
        }
      }
      if (**(_QWORD **)(a1 + 56))
      {
        v42 = 0;
        do
        {
          v43 = v151.__begin_[v42];
          v44 = *(float *)(v149 + 4 * v43);
          v45 = v152[0];
          switch(*(_BYTE *)(v152[0] + 12))
          {
            case 2:
              v46 = *(unint64_t **)v152[0];
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                v49 = *(unsigned int ***)v45;
                if (!*(_QWORD *)v45)
                  goto LABEL_78;
                if (*((char *)v49 + 31) < 0)
                  operator delete(v49[1]);
                v50 = v49;
                v51 = 0x1012C404EF22A49;
                goto LABEL_77;
              }
              break;
            case 3:
              v63 = *(unint64_t **)v152[0];
              do
              {
                v64 = __ldaxr(v63);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, v63));
              if (!v65)
              {
                v66 = *(unsigned int ***)v45;
                if (!*(_QWORD *)v45)
                  goto LABEL_78;
                v67 = v66[1];
                if (v67)
                {
                  v66[2] = v67;
                  operator delete(v67);
                }
                v50 = v66;
                v51 = 0x1080C409938AC02;
                goto LABEL_77;
              }
              break;
            case 4:
              v52 = *(unint64_t **)v152[0];
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = *(unsigned int ***)v45;
                if (!*(_QWORD *)v45)
                  goto LABEL_78;
                v153 = (uint64_t *)(v55 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
                goto LABEL_70;
              }
              break;
            case 5:
              v68 = *(unint64_t **)v152[0];
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v55 = *(unsigned int ***)v45;
                if (!*(_QWORD *)v45)
                  goto LABEL_78;
                v153 = (uint64_t *)(v55 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
LABEL_70:
                v50 = v55;
                v51 = 0x1020C405E66F15BLL;
                goto LABEL_77;
              }
              break;
            case 8:
              v71 = *(unint64_t **)v152[0];
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = *(unsigned int ***)v45;
                if (!*(_QWORD *)v45)
                  goto LABEL_78;
                boost::detail::shared_count::~shared_count(v74 + 2);
                v50 = v74;
                v62 = -235920773;
                goto LABEL_76;
              }
              break;
            case 9:
              v56 = *(unint64_t **)v152[0];
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v59 = *(unsigned int ***)v45;
                if (*(_QWORD *)v45)
                {
                  v60 = v59[6];
                  if (v60)
                  {
                    v59[7] = v60;
                    operator delete(v60);
                  }
                  v61 = v59[3];
                  if (v61)
                  {
                    v59[4] = v61;
                    operator delete(v61);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v59 + 1));
                  v50 = v59;
                  v62 = 2071181815;
LABEL_76:
                  v51 = v62 | 0x1030C4000000000;
LABEL_77:
                  MEMORY[0x219A19A08](v50, v51);
                }
LABEL_78:
                *(_QWORD *)v45 = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v45 + 8) = 0;
          *(_BYTE *)(v45 + 12) = 0;
          *(_QWORD *)v45 = v6;
          v75 = *(_QWORD *)(**(_QWORD **)(a1 + 64) + 80) + 16 * v43;
          v76 = v152[0];
          v77 = v152[0] + 16;
          if (v75 != v152[0] + 16)
          {
            switch(*(_BYTE *)(v152[0] + 28))
            {
              case 2:
                v78 = *(unint64_t **)v77;
                do
                {
                  v79 = __ldaxr(v78);
                  v80 = v79 - 1;
                }
                while (__stlxr(v80, v78));
                if (!v80)
                {
                  v81 = *(unint64_t **)v77;
                  if (!*(_QWORD *)v77)
                    goto LABEL_122;
                  if (*((char *)v81 + 31) < 0)
                    operator delete((void *)v81[1]);
                  v82 = v81;
                  v83 = 0x1012C404EF22A49;
                  goto LABEL_121;
                }
                break;
              case 3:
                v95 = *(unint64_t **)v77;
                do
                {
                  v96 = __ldaxr(v95);
                  v97 = v96 - 1;
                }
                while (__stlxr(v97, v95));
                if (!v97)
                {
                  v98 = *(unint64_t **)v77;
                  if (!*(_QWORD *)v77)
                    goto LABEL_122;
                  v99 = (void *)v98[1];
                  if (v99)
                  {
                    v98[2] = (unint64_t)v99;
                    operator delete(v99);
                  }
                  v82 = v98;
                  v83 = 0x1080C409938AC02;
                  goto LABEL_121;
                }
                break;
              case 4:
                v84 = *(unint64_t **)v77;
                do
                {
                  v85 = __ldaxr(v84);
                  v86 = v85 - 1;
                }
                while (__stlxr(v86, v84));
                if (!v86)
                {
                  v87 = *(unint64_t **)v77;
                  if (!*(_QWORD *)v77)
                    goto LABEL_122;
                  v153 = (uint64_t *)(v87 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
                  goto LABEL_114;
                }
                break;
              case 5:
                v100 = *(unint64_t **)v77;
                do
                {
                  v101 = __ldaxr(v100);
                  v102 = v101 - 1;
                }
                while (__stlxr(v102, v100));
                if (!v102)
                {
                  v87 = *(unint64_t **)v77;
                  if (!*(_QWORD *)v77)
                    goto LABEL_122;
                  v153 = (uint64_t *)(v87 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
LABEL_114:
                  v82 = v87;
                  v83 = 0x1020C405E66F15BLL;
                  goto LABEL_121;
                }
                break;
              case 8:
                v103 = *(unint64_t **)v77;
                do
                {
                  v104 = __ldaxr(v103);
                  v105 = v104 - 1;
                }
                while (__stlxr(v105, v103));
                if (!v105)
                {
                  v106 = *(unint64_t **)v77;
                  if (!*(_QWORD *)v77)
                    goto LABEL_122;
                  boost::detail::shared_count::~shared_count((unsigned int **)v106 + 2);
                  v82 = v106;
                  v94 = -235920773;
                  goto LABEL_120;
                }
                break;
              case 9:
                v88 = *(unint64_t **)v77;
                do
                {
                  v89 = __ldaxr(v88);
                  v90 = v89 - 1;
                }
                while (__stlxr(v90, v88));
                if (!v90)
                {
                  v91 = *(unint64_t **)v77;
                  if (*(_QWORD *)v77)
                  {
                    v92 = (void *)v91[6];
                    if (v92)
                    {
                      v91[7] = (unint64_t)v92;
                      operator delete(v92);
                    }
                    v93 = (void *)v91[3];
                    if (v93)
                    {
                      v91[4] = (unint64_t)v93;
                      operator delete(v93);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v91 + 1));
                    v82 = v91;
                    v94 = 2071181815;
LABEL_120:
                    v83 = v94 | 0x1030C4000000000;
LABEL_121:
                    MEMORY[0x219A19A08](v82, v83);
                  }
LABEL_122:
                  *(_QWORD *)v77 = 0;
                }
                break;
              default:
                break;
            }
            v107 = *(_QWORD *)v75;
            *(_QWORD *)(v77 + 5) = *(_QWORD *)(v75 + 5);
            *(_QWORD *)v77 = v107;
            LODWORD(v107) = *(unsigned __int8 *)(v75 + 12);
            *(_BYTE *)(v76 + 28) = v107;
            v41 = v107 > 9;
            v108 = (1 << v107) & 0x33C;
            if (!v41 && v108 != 0)
            {
              v110 = *(unint64_t **)v77;
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 + 1, v110));
            }
          }
          if (**(_BYTE **)(a1 + 48) == 6)
            v44 = (float)v42;
          v112 = v152[0];
          switch(*(_BYTE *)(v152[0] + 44))
          {
            case 2:
              v113 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v114 = __ldaxr(v113);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v113));
              if (!v115)
              {
                v116 = *(_QWORD *)(v112 + 32);
                if (!v116)
                  goto LABEL_173;
                if (*(char *)(v116 + 31) < 0)
                  operator delete(*(void **)(v116 + 8));
                v117 = (_QWORD *)v116;
                v118 = 0x1012C404EF22A49;
                goto LABEL_172;
              }
              break;
            case 3:
              v130 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v131 = __ldaxr(v130);
                v132 = v131 - 1;
              }
              while (__stlxr(v132, v130));
              if (!v132)
              {
                v133 = *(_QWORD **)(v112 + 32);
                if (!v133)
                  goto LABEL_173;
                v134 = (void *)v133[1];
                if (v134)
                {
                  v133[2] = v134;
                  operator delete(v134);
                }
                v117 = v133;
                v118 = 0x1080C409938AC02;
                goto LABEL_172;
              }
              break;
            case 4:
              v119 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v120 = __ldaxr(v119);
                v121 = v120 - 1;
              }
              while (__stlxr(v121, v119));
              if (!v121)
              {
                v122 = *(_QWORD **)(v112 + 32);
                if (!v122)
                  goto LABEL_173;
                v153 = v122 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
                goto LABEL_165;
              }
              break;
            case 5:
              v135 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v136 = __ldaxr(v135);
                v137 = v136 - 1;
              }
              while (__stlxr(v137, v135));
              if (!v137)
              {
                v122 = *(_QWORD **)(v112 + 32);
                if (!v122)
                  goto LABEL_173;
                v153 = v122 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
LABEL_165:
                v117 = v122;
                v118 = 0x1020C405E66F15BLL;
                goto LABEL_172;
              }
              break;
            case 8:
              v138 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v139 = __ldaxr(v138);
                v140 = v139 - 1;
              }
              while (__stlxr(v140, v138));
              if (!v140)
              {
                v141 = *(_QWORD *)(v112 + 32);
                if (!v141)
                  goto LABEL_173;
                boost::detail::shared_count::~shared_count((unsigned int **)(v141 + 16));
                v117 = (_QWORD *)v141;
                v129 = -235920773;
                goto LABEL_171;
              }
              break;
            case 9:
              v123 = *(unint64_t **)(v152[0] + 32);
              do
              {
                v124 = __ldaxr(v123);
                v125 = v124 - 1;
              }
              while (__stlxr(v125, v123));
              if (!v125)
              {
                v126 = *(_QWORD **)(v112 + 32);
                if (v126)
                {
                  v127 = (void *)v126[6];
                  if (v127)
                  {
                    v126[7] = v127;
                    operator delete(v127);
                  }
                  v128 = (void *)v126[3];
                  if (v128)
                  {
                    v126[4] = v128;
                    operator delete(v128);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v126 + 1));
                  v117 = v126;
                  v129 = 2071181815;
LABEL_171:
                  v118 = v129 | 0x1030C4000000000;
LABEL_172:
                  MEMORY[0x219A19A08](v117, v118);
                }
LABEL_173:
                *(_QWORD *)(v112 + 32) = 0;
              }
              break;
            default:
              break;
          }
          *(_DWORD *)(v112 + 40) = 0;
          *(_BYTE *)(v112 + 44) = 1;
          *(double *)(v112 + 32) = v44;
          if (!v155)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v155 + 48))(v155, v152);
          ++v42;
        }
        while (v42 < **(_QWORD **)(a1 + 56));
      }
      ++v6;
    }
    while (v6 != v148);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v151.__begin_)
  {
    v151.__end_ = v151.__begin_;
    operator delete(v151.__begin_);
  }
  v151.__begin_ = (std::vector<int>::pointer)v152;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
  v142 = v159;
  if (v159 == v158)
  {
    v143 = 4;
    v142 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_186;
    v143 = 5;
  }
  (*(void (**)(void))(*v142 + 8 * v143))();
LABEL_186:
  v144 = v157;
  if (v157 == v156)
  {
    v145 = 4;
    v144 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_191;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_191:
  result = v155;
  if (v155 == v154)
  {
    v147 = 4;
    result = v154;
  }
  else
  {
    if (!v155)
      return result;
    v147 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v147))();
}

void sub_2185D2B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char *__p, char *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
  {
    a15 = __p;
    operator delete(__p);
  }
  __p = &a17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(&a21);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_2185D2C44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator() const(unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v14;
          }
          v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost25transform_prediction_topkERKNSt3"
                                        "__16vectorIfNS3_9allocatorIfEEEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS5_I"
                                        "cEEEEmmNS3_10shared_ptrINS_11ml_metadataEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost25transform_prediction_topkERKNSt3__16vectorIfNS3_9allocatorIfEEEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS5_IcEEEEmmNS3_10shared_ptrINS_11ml_metadataEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1 const&)::{lambda(void)#1},void>::invoke(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::supervised::xgboost::transform_prediction_topk(std::vector<float> const&,std::string const&,unsigned long,unsigned long,std::shared_ptr<turi::ml_metadata>)::$_1::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

_QWORD *std::shared_ptr<xgboost_old::learner::BoostLearner>::shared_ptr[abi:ne180100]<xgboost_old::learner::BoostLearner,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D94AAB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2185D2E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<xgboost_old::learner::BoostLearner *,std::shared_ptr<xgboost_old::learner::BoostLearner>::__shared_ptr_default_delete<xgboost_old::learner::BoostLearner,xgboost_old::learner::BoostLearner>,std::allocator<xgboost_old::learner::BoostLearner>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<xgboost_old::learner::BoostLearner *,std::shared_ptr<xgboost_old::learner::BoostLearner>::__shared_ptr_default_delete<xgboost_old::learner::BoostLearner,xgboost_old::learner::BoostLearner>,std::allocator<xgboost_old::learner::BoostLearner>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,std::allocator<turi::supervised::xgboost::DMatrixMLData>,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__shared_ptr_emplace[abi:ne180100]<turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,std::allocator<turi::supervised::xgboost::DMatrixMLData>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_2185D2F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__shared_ptr_emplace[abi:ne180100]<turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &,std::allocator<turi::supervised::xgboost::DMatrixMLData>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, _QWORD *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_24D94AB30;
  a1[1] = 0;
  std::allocator<turi::supervised::xgboost::DMatrixMLData>::construct[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_2185D2FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94AB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94AB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::DMatrixMLData>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t std::allocator<turi::supervised::xgboost::DMatrixMLData>::construct[abi:ne180100]<turi::supervised::xgboost::DMatrixMLData,turi::ml_data &,turi::flexible_type &,turi::supervised::xgboost::storage_mode_enum &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, _QWORD *a6)
{
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void **v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  memset(v40, 0, 13);
  if (v40 != (_QWORD *)a4)
  {
    *(_QWORD *)((char *)v40 + 5) = *(_QWORD *)(a4 + 5);
    v40[0] = *(_QWORD *)a4;
    BYTE4(v40[1]) = *(_BYTE *)(a4 + 12);
    if (BYTE4(v40[1]) <= 9u && ((1 << SBYTE4(v40[1])) & 0x33C) != 0)
    {
      v7 = (unint64_t *)v40[0];
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  result = turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(a2, a3, v40, *a5, *a6);
  switch(BYTE4(v40[1]))
  {
    case 2:
      v10 = (unint64_t *)v40[0];
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = v40[0];
        if (v40[0])
        {
          if (*(char *)(v40[0] + 31) < 0)
            operator delete(*(void **)(v40[0] + 8));
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v16 = (unint64_t *)v40[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v40[0];
        if (v40[0])
        {
          v20 = *(void **)(v40[0] + 8);
          if (v20)
          {
            *(_QWORD *)(v40[0] + 16) = v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v21 = (unint64_t *)v40[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v40[0];
        if (v40[0])
        {
          v39 = (void **)(v40[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      v25 = (unint64_t *)v40[0];
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v24 = v40[0];
        if (v40[0])
        {
          v39 = (void **)(v40[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v39);
LABEL_33:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v35 = (unint64_t *)v40[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v40[0];
        if (v40[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v40[0] + 16));
          v14 = v38;
          v34 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v28 = (unint64_t *)v40[0];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v40[0];
        if (v40[0])
        {
          v32 = *(void **)(v40[0] + 48);
          if (v32)
          {
            *(_QWORD *)(v40[0] + 56) = v32;
            operator delete(v32);
          }
          v33 = *(void **)(v31 + 24);
          if (v33)
          {
            *(_QWORD *)(v31 + 32) = v33;
            operator delete(v33);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31 + 8);
          v14 = v31;
          v34 = 2071181815;
LABEL_48:
          v15 = v34 | 0x1030C4000000000;
LABEL_49:
          result = MEMORY[0x219A19A08](v14, v15);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2185D32C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a10);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a10);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<turi::supervised::xgboost::metric_tracker>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::metric_tracker,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D94AB80;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2185D33A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::metric_tracker *,std::shared_ptr<turi::supervised::xgboost::metric_tracker>::__shared_ptr_default_delete<turi::supervised::xgboost::metric_tracker,turi::supervised::xgboost::metric_tracker>,std::allocator<turi::supervised::xgboost::metric_tracker>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::metric_tracker *,std::shared_ptr<turi::supervised::xgboost::metric_tracker>::__shared_ptr_default_delete<turi::supervised::xgboost::metric_tracker,turi::supervised::xgboost::metric_tracker>,std::allocator<turi::supervised::xgboost::metric_tracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::supervised::xgboost::metric_tracker>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 72);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 48, *(char **)(a2 + 56));
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a2 + 24, *(char **)(a2 + 32));
    v4 = (void **)a2;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x219A19A08](a2, 0x1020C405879664BLL);
  }
  return result;
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94ABF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94ABF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised::xgboost::early_stopping_checkpointer>::__on_zero_shared(uint64_t a1)
{
  return std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::~deque[abi:ne180100]((_QWORD *)(a1 + 24));
}

uint64_t std::deque<std::pair<unsigned long,std::shared_ptr<xgboost_old::learner::BoostLearner>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v7 + 8);
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D94AC48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D94AC48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t ***v17;
  std::__shared_weak_count *v18;

  v4 = *a2;
  turi::gl_sframe::range_iterator(*(turi::gl_sframe **)(a1 + 16), (unint64_t)(**(_QWORD **)(a1 + 8) * *a2) / *a3, (unint64_t)(**(_QWORD **)(a1 + 8) + **(_QWORD **)(a1 + 8) * *a2) / *a3, &v17);
  v16[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v17);
  v16[1] = v5;
  v6 = turi::gl_sframe_range::end((turi::gl_sframe_range *)&v17);
  while (v16[0] != v6)
  {
    v7 = turi::gl_sframe_range::iterator::dereference((turi::gl_sframe_range::iterator *)v16);
    v8 = **(_QWORD **)(a1 + 24);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) != v8)
    {
      v9 = v7;
      v10 = 0;
      v11 = 0;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + v10) + 32))(*(_QWORD *)(v8 + v10)))
          v12 = 32;
        else
          v12 = 16;
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(**(_QWORD **)(a1 + 24) + v10) + 48))(*(_QWORD *)(**(_QWORD **)(a1 + 24) + v10), ****(_QWORD ****)v9 + 16 * *(_QWORD *)(v9 + 8), **(_QWORD **)(**(_QWORD **)v9 + v12) + 16 * *(_QWORD *)(v9 + 8), v4);
        ++v11;
        v8 = **(_QWORD **)(a1 + 24);
        v10 += 16;
      }
      while (v11 < (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - v8) >> 4);
    }
    turi::gl_sframe_range::iterator::increment((turi::gl_sframe_range::iterator *)v16);
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2185D37F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0,std::allocator<turi::supervised::xgboost::xgboost_model::evaluate_impl(turi::supervised::xgboost::DMatrixMLData const&,std::string const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void __cxx_global_var_init_98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_xgboost_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_xgboost_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185D3B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_12_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_xgboost_extension_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::supervised::xgboost::MakeColPage(turi::thread *a1, turi::supervised::xgboost::SFrameSparsePage **a2, unint64_t a3, turi::supervised::xgboost::SFrameSparsePage *a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  turi::thread_pool *instance;
  turi::thread *v17;
  turi::thread *tls_data;
  turi::thread_pool *v19;
  uint64_t v20;
  double v21;
  turi::thread *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t i;
  uint64_t v51;
  uint64_t v52;
  turi::thread_pool *v53;
  turi::thread_pool *v54;
  turi::thread *v55;
  turi::thread *v56;
  turi::thread_pool *v57;
  uint64_t v58;
  double v59;
  turi::thread *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  _DWORD *v75;
  turi::thread_pool *v76;
  turi::thread *v77;
  turi::thread_pool *v78;
  turi::thread_pool *v79;
  uint64_t v80;
  double v81;
  turi::thread *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  turi::supervised::xgboost::SFrameSparsePage *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  turi::supervised::xgboost::SFrameSparsePage **v93;
  turi::thread *v94;
  turi::supervised::xgboost::SFrameSparsePage **v95;
  uint64_t *v96;
  turi::supervised::xgboost::SFrameSparsePage *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  turi::supervised::xgboost::SFrameSparsePage *v104;
  uint64_t v105;
  turi::supervised::xgboost::SFrameSparsePage ***v106;
  unint64_t v107;
  unint64_t v108;
  void **v109[26];

  v109[24] = *(void ***)MEMORY[0x24BDAC8D0];
  v104 = a4;
  v7 = turi::thread::cpu_count(a1);
  v8 = *((_QWORD *)a1 + 1);
  v102 = 0;
  v103 = v8;
  v97 = a4;
  v98 = (uint64_t)a4 + 48;
  v99 = &v100;
  v100 = 0;
  v101 = 0;
  std::vector<std::vector<unsigned long>>::resize(&v100, v7);
  v10 = v100;
  if (v101 != v100)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      std::vector<unsigned long>::resize(v10 + v11, a3);
      v10 = *v99;
      v13 = *v99 + v11;
      v9 = *(void **)v13;
      v14 = *(_QWORD *)(v13 + 8) - *(_QWORD *)v13;
      if (v14 >= 1)
        bzero(v9, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
      ++v12;
      v11 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v99[1] - v10) >> 3));
  }
  v15 = *(unsigned int *)a1;
  v93 = a2;
  v94 = a1;
  v95 = &v97;
  instance = (turi::thread_pool *)turi::thread_pool::get_instance((turi::thread_pool *)v9);
  v17 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread *)turi::thread::get_tls_data(v17);
  if (*((_BYTE *)tls_data + 8) || (unint64_t)v17 <= 1)
  {
    if (v15)
    {
      v24 = 0;
      do
      {
        if (((*(_QWORD *)((char *)*v93 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
        {
          tls_data = (turi::thread *)turi::thread::get_tls_data(tls_data);
          v25 = *((_QWORD *)v94 + 2);
          v26 = *(_QWORD *)(v25 + 8 * v24++);
          v27 = *(_QWORD *)(v25 + 8 * v24);
          v28 = (v27 - v26);
          if ((_DWORD)v27 != (_DWORD)v26)
          {
            v29 = (unsigned int *)(*((_QWORD *)v94 + 3) + 8 * v26);
            v30 = *(_DWORD *)tls_data;
            do
            {
              v32 = *v29;
              v29 += 2;
              v31 = v32;
              v33 = (uint64_t *)(*(_QWORD *)v95[2] + 24 * v30);
              v34 = *v33;
              if (v32 >= (unint64_t)((v33[1] - *v33) >> 3))
              {
                v109[0] = 0;
                std::vector<unsigned long>::resize((uint64_t)v33, v31 + 1, v109);
                v34 = *v33;
              }
              ++*(_QWORD *)(v34 + 8 * v31);
              --v28;
            }
            while (v28);
          }
        }
        else
        {
          ++v24;
        }
      }
      while (v24 != v15);
    }
  }
  else
  {
    v19 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v109, v19);
    v20 = 0;
    v21 = (double)v15 / (double)(unint64_t)v17;
    do
    {
      v22 = (turi::thread *)(v20 + 1);
      v23 = (unint64_t)(v21 * (double)(unint64_t)(v20 + 1) + 0.0);
      if ((turi::thread *)v20 == (turi::thread *)((char *)v17 - 1))
        v23 = v15;
      v107 = (unint64_t)(v21 * (double)(unint64_t)v20 + 0.0);
      v108 = v23;
      v105 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0)::stored_vtable
           + 1;
      v106 = &v93;
      turi::parallel_task_queue::launch((uint64_t)v109, (uint64_t)&v105, v20);
      boost::function0<void>::~function0(&v105);
      v20 = (uint64_t)v22;
    }
    while (v22 != v17);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v109);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v109);
  }
  v35 = v99;
  v36 = v99[1];
  if (v36 == *v99)
  {
    v40 = 0xAAAAAAAAAAAAAAABLL * ((v36 - *v99) >> 3);
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v36 = *v99;
    do
    {
      v39 = (uint64_t)(*(_QWORD *)(v36 + v37 + 8) - *(_QWORD *)(v36 + v37)) >> 3;
      if (v39 >= (uint64_t)(*((_QWORD *)v97 + 1) - *(_QWORD *)v97) >> 3)
      {
        std::vector<unsigned long>::resize((uint64_t)v97, v39 + 1);
        v35 = v99;
        v36 = *v99;
      }
      ++v38;
      v40 = 0xAAAAAAAAAAAAAAABLL * ((v35[1] - v36) >> 3);
      v37 += 24;
    }
    while (v38 < v40);
  }
  v41 = *(_QWORD *)v97;
  v42 = *((_QWORD *)v97 + 1) - *(_QWORD *)v97;
  if ((unint64_t)v42 < 9)
  {
    v43 = 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = v42 >> 3;
    if (v45 <= 2)
      v45 = 2;
    v46 = (_QWORD *)(v36 + 8);
    v47 = 1;
    do
    {
      v48 = v47;
      v49 = v46;
      for (i = v40; i; --i)
      {
        v51 = *(v49 - 1);
        if (v44 < (*v49 - v51) >> 3)
        {
          v52 = *(_QWORD *)(v51 + 8 * v44);
          *(_QWORD *)(v51 + 8 * v44) = v43;
          v43 += v52;
        }
        v49 += 3;
      }
      *(_QWORD *)(v41 + 8 * v48) = v43;
      v47 = v48 + 1;
      v44 = v48;
    }
    while (v48 + 1 != v45);
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize(v98, v43);
  v93 = a2;
  v94 = a1;
  v95 = &v97;
  v96 = &v103;
  v54 = (turi::thread_pool *)turi::thread_pool::get_instance(v53);
  v55 = (turi::thread *)turi::thread_pool::size(v54);
  v56 = (turi::thread *)turi::thread::get_tls_data(v55);
  if (*((_BYTE *)v56 + 8) || (unint64_t)v55 <= 1)
  {
    if (v15)
    {
      v62 = 0;
      do
      {
        if (((*(_QWORD *)((char *)*v93 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
        {
          v56 = (turi::thread *)turi::thread::get_tls_data(v56);
          v63 = *((_QWORD *)v94 + 2);
          v64 = *(_QWORD *)(v63 + 8 * v62);
          v65 = v62 + 1;
          v66 = *(_QWORD *)(v63 + 8 * (v62 + 1)) - v64;
          if ((_DWORD)v66)
          {
            v67 = (int *)v96;
            v68 = *(_QWORD *)(*(_QWORD *)v95[2] + 24 * *(int *)v56);
            v69 = *(_QWORD *)v95[1];
            v70 = (int *)(*((_QWORD *)v94 + 3) + 8 * v64 + 4);
            do
            {
              v71 = *(v70 - 1);
              v72 = *v70;
              v73 = *v67;
              v74 = *(_QWORD *)(v68 + 8 * v71);
              v56 = (turi::thread *)(v74 + 1);
              *(_QWORD *)(v68 + 8 * v71) = v74 + 1;
              LODWORD(v71) = v73 + v62;
              v75 = (_DWORD *)(v69 + 8 * v74);
              *v75 = v71;
              v75[1] = v72;
              v70 += 2;
              --v66;
            }
            while (v66);
          }
        }
        else
        {
          v65 = v62 + 1;
        }
        v62 = v65;
      }
      while (v65 != v15);
    }
  }
  else
  {
    v57 = (turi::thread_pool *)turi::thread_pool::get_instance(v56);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v109, v57);
    v58 = 0;
    v59 = (double)v15 / (double)(unint64_t)v55;
    do
    {
      v60 = (turi::thread *)(v58 + 1);
      v61 = (unint64_t)(v59 * (double)(unint64_t)(v58 + 1) + 0.0);
      if ((turi::thread *)v58 == (turi::thread *)((char *)v55 - 1))
        v61 = v15;
      v107 = (unint64_t)(v59 * (double)(unint64_t)v58 + 0.0);
      v108 = v61;
      v105 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1)::stored_vtable
           + 1;
      v106 = &v93;
      turi::parallel_task_queue::launch((uint64_t)v109, (uint64_t)&v105, v58);
      boost::function0<void>::~function0(&v105);
      v58 = (uint64_t)v60;
    }
    while (v60 != v55);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v109);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v109);
  }
  v93 = &v104;
  v76 = (turi::thread_pool *)turi::thread_pool::get_instance(v56);
  v77 = (turi::thread *)turi::thread_pool::size(v76);
  v78 = (turi::thread_pool *)turi::thread::get_tls_data(v77);
  if (*((_BYTE *)v78 + 8) || (unint64_t)v77 <= 1)
  {
    if ((_DWORD)a3)
    {
      v84 = 0;
      v85 = 8 * a3;
      do
      {
        v86 = *v93;
        v87 = (unint64_t *)(*(_QWORD *)*v93 + v84);
        v88 = *v87;
        v89 = v87[1];
        if (v88 < v89)
        {
          v91 = (char *)v86 + 48;
          v90 = *((_QWORD *)v86 + 6);
          if (*((_QWORD *)v91 + 1) == v90)
            v90 = 0;
          v109[0] = (void **)xgboost_old::SparseBatch::Entry::CmpValue;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v90 + 8 * v88, (uint64_t *)(v90 + 8 * v89), (uint64_t (**)(uint64_t *, uint64_t *))v109, 126 - 2 * __clz((uint64_t)(8 * v89 - 8 * v88) >> 3), 1);
        }
        v84 += 8;
      }
      while (v85 != v84);
    }
  }
  else
  {
    v79 = (turi::thread_pool *)turi::thread_pool::get_instance(v78);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v109, v79);
    v80 = 0;
    v81 = (double)a3 / (double)(unint64_t)v77;
    do
    {
      v82 = (turi::thread *)(v80 + 1);
      v83 = (unint64_t)(v81 * (double)(unint64_t)(v80 + 1) + 0.0);
      if ((turi::thread *)v80 == (turi::thread *)((char *)v77 - 1))
        v83 = a3;
      v107 = (unint64_t)(v81 * (double)(unint64_t)v80 + 0.0);
      v108 = v83;
      v105 = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1}>(turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2)::stored_vtable
           + 1;
      v106 = &v93;
      turi::parallel_task_queue::launch((uint64_t)v109, (uint64_t)&v105, v80);
      boost::function0<void>::~function0(&v105);
      v80 = (uint64_t)v82;
    }
    while (v82 != v77);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v109);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v109);
  }
  turi::supervised::xgboost::SFrameSparsePage::save((char *)v104);
  turi::supervised::xgboost::SFrameSparsePage::unload(v104);
  v109[0] = (void **)&v100;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v109);
}

void sub_2185D4360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)&a27);
  a23 = a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

char *turi::supervised::xgboost::SFrameSparsePage::save(char *this)
{
  uint64_t v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  std::string *v18;
  _QWORD **v19;
  uint64_t v20;
  unint64_t v21;
  std::string __p;
  void *v23;
  void *v24;
  _WORD *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  _QWORD v30[3];
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x24BDAC8D0];
  if (!this[96])
    turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator()();
  v1 = (uint64_t)this;
  if (!this[400])
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "index");
    std::string::basic_string[abi:ne180100]<0>(v30, "value");
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v26 = (std::string *)operator new(0x30uLL);
    v27 = v26;
    v28 = v26 + 2;
    v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, &v29, &v31, v26);
    v2 = operator new(2uLL);
    v23 = v2;
    *v2 = 256;
    v24 = v2 + 1;
    v25 = v2 + 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    turi::sframe::open_for_write(v1 + 104, &v26, &v23, &__p, 1, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    v23 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v30[i + 2]) < 0)
        operator delete((void *)v30[i]);
    }
    assert_msg(*(unsigned __int8 *)(v1 + 392), (uint64_t)"Invalid SFrame", v3, v4, v5, v6, v7, v8, (uint64_t)__p.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(v1 + 393))
    {
      v16 = (_QWORD **)(v1 + 312);
      v17 = 15;
    }
    else
    {
      if (!*(_QWORD *)(v1 + 128))
      {
        v18 = 0;
LABEL_16:
        v26 = v18;
        assert_msg(*(unsigned __int8 *)(v1 + 392), (uint64_t)"Invalid SFrame", v10, v11, v12, v13, v14, v15, (uint64_t)__p.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(v1 + 393))
        {
          v19 = (_QWORD **)(v1 + 312);
          v20 = 15;
        }
        else
        {
          if (!*(_QWORD *)(v1 + 128))
          {
            v21 = 0;
            goto LABEL_21;
          }
          v19 = *(_QWORD ***)(v1 + 288);
          v20 = 3;
        }
        v21 = (*(uint64_t (**)(void))(**v19 + 8 * v20))();
LABEL_21:
        *(_QWORD *)&v29 = v1;
        *((_QWORD *)&v29 + 1) = &v26;
        turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(0, v21, (_QWORD **)&v29);
        turi::sframe::close((turi::sframe *)(v1 + 104));
        this = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(v1 + 24), *(char **)v1, *(_QWORD *)(v1 + 8), (uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 3);
        *(_BYTE *)(v1 + 400) = 1;
        return this;
      }
      v16 = *(_QWORD ***)(v1 + 288);
      v17 = 3;
    }
    v18 = (std::string *)(*(uint64_t (**)(void))(**v16 + 8 * v17))();
    goto LABEL_16;
  }
  return this;
}

void sub_2185D4630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v33;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  v33 = 0;
  while (1)
  {
    if (*(&a32 + v33) < 0)
      operator delete(*(void **)((char *)&a27 + v33));
    v33 -= 24;
    if (v33 == -48)
      _Unwind_Resume(a1);
  }
}

void turi::supervised::xgboost::SFrameSparsePage::unload(turi::supervised::xgboost::SFrameSparsePage *this)
{
  if (!*((_BYTE *)this + 400))
    turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator()();
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit((uint64_t)this + 48);
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  std::vector<unsigned long>::shrink_to_fit((uint64_t)this);
  *((_BYTE *)this + 96) = 0;
}

uint64_t turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(uint64_t a1, const turi::ml_data *a2, unsigned __int8 *a3, int a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  double *v19;
  double *v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v29;
  std::locale *v30;
  std::locale *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  cppipc *v37;
  unint64_t v38;
  file_logger *v39;
  file_logger *started;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  const std::locale::facet *v45;
  _QWORD *exception;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  file_logger *v50;
  file_logger *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  int *v57;
  unint64_t v58;
  file_logger *v59;
  file_logger *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  const std::locale::facet *v68;
  file_logger *v69;
  file_logger *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  const std::locale::facet *v75;
  unint64_t v76;
  turi::supervised::xgboost::MLDataBatchIterator *v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  file_logger *v81;
  file_logger *v82;
  _QWORD *v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  uint64_t v86;
  char v87;
  int *v88;
  file_logger *v89;
  file_logger *v90;
  _QWORD *v91;
  _QWORD *v92;
  const std::locale::facet *v93;
  int *v94;
  file_logger *v95;
  file_logger *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  const std::locale::facet *v102;
  int *v103;
  file_logger *v104;
  file_logger *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  int *v112;
  file_logger *v113;
  file_logger *v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  _BYTE *v118;
  const std::locale::facet *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t result;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  BOOL v129;
  uint64_t *v130;
  _QWORD *v131[2];
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::locale v134;
  std::locale *v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 8) = -21760;
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)a1 = &off_24D94ACC8;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v10 = *(_QWORD *)a2;
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v132 = *(_QWORD *)a2;
  v133 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v10 = *(_QWORD *)a2;
  }
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v10 + 64);
  v131[0] = 0;
  v131[1] = 0;
  v130 = (uint64_t *)v131;
  v129 = 0;
  v14 = a3[12];
  if (v14 >= 0xA)
  {
    result = turi::flexible_type_fail(0);
    __break(1u);
    return result;
  }
  v129 = v14 != 7;
  v15 = *((unsigned __int8 *)a2 + 48);
  if (*((_BYTE *)a2 + 48))
  {
    v16 = *(_DWORD *)(*(_QWORD *)(v132 + 24) + 24);
    v17 = v16 > 6;
    v18 = (0x4Au >> v16) & 1;
    if (v17)
      LOBYTE(v18) = 0;
  }
  else
  {
    LOBYTE(v18) = 0;
  }
  v128 = v18;
  if (v14 != 7)
  {
    v19 = *(double **)(*(_QWORD *)a3 + 8);
    v20 = *(double **)(*(_QWORD *)a3 + 16);
    if (v19 != v20)
    {
      v21 = v132;
      do
      {
        v127 = 0;
        v127 = turi::ml_data_internal::column_indexer::immutable_map_value_to_index(*(void ***)(*(_QWORD *)(v21 + 24) + 32), (const turi::flexible_type *)v19);
        v22 = v19[2];
        v134.__locale_ = (std::locale::__imp *)&v127;
        v23 = std::__tree<std::__value_type<unsigned long,float>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,float>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,float>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v130, &v127, (uint64_t)&std::piecewise_construct, &v134);
        v24 = v22;
        *((float *)v23 + 10) = v24;
        v19 += 4;
      }
      while (v19 != v20);
      v15 = *((unsigned __int8 *)a2 + 48);
    }
  }
  if (v15)
  {
    std::vector<float>::resize(a1 + 80, *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2));
    if (v129)
      std::vector<float>::resize(a1 + 128, *((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2));
    v25 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v26 = *(_DWORD *)(v25 + 24);
    v17 = v26 > 6;
    v27 = (1 << v26) & 0x5A;
    if (v17 || v27 == 0)
      v29 = *(_QWORD *)(v25 + 72);
    else
      v29 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 104);
    *(_QWORD *)(a1 + 200) = v29;
    v30 = (std::locale *)operator new(0x30uLL);
    v30->__locale_ = (std::locale::__imp *)&off_24D94AF80;
    v30[1].__locale_ = a2;
    v30[2].__locale_ = (std::locale::__imp *)&v128;
    v30[3].__locale_ = (std::locale::__imp *)a1;
    v30[4].__locale_ = (std::locale::__imp *)&v129;
    v30[5].__locale_ = (std::locale::__imp *)&v130;
    v135 = v30;
    turi::in_parallel((turi::thread_pool *)&v134);
    v31 = v135;
    if (v135 == &v134)
    {
      v32 = 4;
      v31 = &v134;
    }
    else
    {
      if (!v135)
        goto LABEL_29;
      v32 = 5;
    }
    (*((void (**)(void))v31->__locale_ + v32))();
  }
LABEL_29:
  v33 = getenv("TURI_MEMORY_LIMIT_IN_MB");
  if (v33)
  {
    v34 = atoi(v33);
    if (a5)
      goto LABEL_31;
  }
  else
  {
    v34 = (unint64_t)total_mem() >> 20;
    if (a5)
    {
LABEL_31:
      v36 = *((_QWORD *)a2 + 2);
      v35 = *((_QWORD *)a2 + 3);
      v37 = (cppipc *)global_logger();
      v38 = (~v36 + a5 + v35) / a5;
      if (*((int *)v37 + 169) <= 2)
      {
        if (cppipc::must_cancel(v37))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v39 = (file_logger *)global_logger();
        started = file_logger::start_stream(v39, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 737, 1);
        v41 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v41 && *((_BYTE *)v41 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Fixed number of batches: ", 25);
        v42 = file_logger::operator<<<unsigned long>((uint64_t)started);
        v43 = pthread_getspecific(*(_QWORD *)(v42 + 592));
        if (v43 && *((_BYTE *)v43 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)" Max row per batch: ", 20);
        v44 = file_logger::operator<<<unsigned long>(v42);
        v37 = (cppipc *)pthread_getspecific(*(_QWORD *)(v44 + 592));
        if (v37)
        {
          if (*((_BYTE *)v37 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*((_QWORD *)v37 + 2) - 24) + 16));
            v45 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
            std::locale::~locale(&v134);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v44);
            if (*(_DWORD *)(v44 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
      goto LABEL_83;
    }
  }
  v47 = *((_QWORD *)a2 + 5);
  v48 = *((_QWORD *)a2 + 2);
  v126 = *((_QWORD *)a2 + 3);
  v49 = (int *)global_logger();
  if (v49[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v49))
      goto LABEL_151;
    v50 = (file_logger *)global_logger();
    v51 = file_logger::start_stream(v50, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 728, 1);
    v52 = pthread_getspecific(*((_QWORD *)v51 + 74));
    if (v52 && *((_BYTE *)v52 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52 + 2, (uint64_t)"Auto tune batch size... Memory limit (MB): ", 43);
    v53 = file_logger::operator<<<unsigned long>((uint64_t)v51);
    v54 = pthread_getspecific(*(_QWORD *)(v53 + 592));
    if (v54 && *((_BYTE *)v54 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"MB", 2);
    v55 = pthread_getspecific(*(_QWORD *)(v53 + 592));
    if (v55)
    {
      if (*((_BYTE *)v55 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(_QWORD *)(v55[2] - 24) + 16));
        v56 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v53);
        if (*(_DWORD *)(v53 + 600) == 7)
          goto LABEL_153;
      }
    }
  }
  v57 = (int *)global_logger();
  v58 = 8 * v47;
  if (v57[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v57))
      goto LABEL_151;
    v59 = (file_logger *)global_logger();
    v60 = file_logger::start_stream(v59, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 730, 1);
    v61 = pthread_getspecific(*((_QWORD *)v60 + 74));
    if (v61 && *((_BYTE *)v61 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61 + 2, (uint64_t)" Max cache per batch: ", 22);
    v62 = file_logger::operator<<<float>((uint64_t)v60);
    v63 = pthread_getspecific(*(_QWORD *)(v62 + 592));
    if (v63 && *((_BYTE *)v63 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63 + 2, (uint64_t)"MB", 2);
    v64 = pthread_getspecific(*(_QWORD *)(v62 + 592));
    if (v64 && *((_BYTE *)v64 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64 + 2, (uint64_t)" Max row size: ", 15);
    v65 = file_logger::operator<<<unsigned long>(v62);
    v66 = pthread_getspecific(*(_QWORD *)(v65 + 592));
    if (v66 && *((_BYTE *)v66 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66 + 2, (uint64_t)"B", 1);
    v67 = pthread_getspecific(*(_QWORD *)(v65 + 592));
    if (v67)
    {
      if (*((_BYTE *)v67 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(_QWORD *)(v67[2] - 24) + 16));
        v68 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v65);
        if (*(_DWORD *)(v65 + 600) == 7)
        {
LABEL_153:
          __print_back_trace();
          v125 = __cxa_allocate_exception(8uLL);
          *v125 = "LOG_FATAL encountered";
          __cxa_throw(v125, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v37 = (cppipc *)global_logger();
  v38 = 0x20000000 / v58;
  a5 = (~v48 + v126 + 0x20000000 / v58) / (0x20000000 / v58);
  if (*((int *)v37 + 169) > 2)
    goto LABEL_83;
  if (cppipc::must_cancel(v37))
LABEL_151:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v69 = (file_logger *)global_logger();
  v70 = file_logger::start_stream(v69, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 732, 1);
  v71 = pthread_getspecific(*((_QWORD *)v70 + 74));
  if (v71 && *((_BYTE *)v71 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71 + 2, (uint64_t)"Number of batches: ", 19);
  v72 = file_logger::operator<<<unsigned long>((uint64_t)v70);
  v73 = pthread_getspecific(*(_QWORD *)(v72 + 592));
  if (v73 && *((_BYTE *)v73 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73 + 2, (uint64_t)" Max row per batch: ", 20);
  v74 = file_logger::operator<<<unsigned long>(v72);
  v37 = (cppipc *)pthread_getspecific(*(_QWORD *)(v74 + 592));
  if (v37)
  {
    if (*((_BYTE *)v37 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*((_QWORD *)v37 + 2) - 24) + 16));
      v75 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
      std::locale::~locale(&v134);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v74);
      if (*(_DWORD *)(v74 + 600) == 7)
        goto LABEL_153;
    }
  }
LABEL_83:
  v76 = turi::thread::cpu_count(v37);
  v77 = (turi::supervised::xgboost::MLDataBatchIterator *)operator new();
  v78 = (uint64_t)v77;
  if (v76 >> 1 <= 2)
    v79 = 2;
  else
    v79 = v76 >> 1;
  turi::supervised::xgboost::MLDataBatchIterator::MLDataBatchIterator(v77, a2, v38, v79);
  if (!a4 || a4 == 2 && (double)v34 * 0.25 >= (double)((a5 & 0x7FFFFFFFFLL) << 9))
  {
    v88 = (int *)global_logger();
    if (v88[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v88))
        goto LABEL_148;
      v89 = (file_logger *)global_logger();
      v90 = file_logger::start_stream(v89, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 751, 1);
      v91 = pthread_getspecific(*((_QWORD *)v90 + 74));
      if (v91 && *((_BYTE *)v91 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91 + 2, (uint64_t)"Use in memory storage mode", 26);
      v92 = pthread_getspecific(*((_QWORD *)v90 + 74));
      if (v92)
      {
        if (*((_BYTE *)v92 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(_QWORD *)(v92[2] - 24) + 16));
          v93 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
          std::locale::~locale(&v134);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v90);
          if (*((_DWORD *)v90 + 150) == 7)
            goto LABEL_150;
        }
      }
    }
    v86 = operator new();
    v87 = 0;
    *(_QWORD *)v86 = &unk_24D93E128;
    *(_QWORD *)(v86 + 8) = &unk_24D93E1B8;
    *(_OWORD *)(v86 + 16) = 0u;
    *(_OWORD *)(v86 + 32) = 0u;
    *(_OWORD *)(v86 + 48) = 0u;
    *(_OWORD *)(v86 + 64) = 0u;
    *(_OWORD *)(v86 + 80) = 0u;
    *(_OWORD *)(v86 + 136) = 0u;
    *(_OWORD *)(v86 + 152) = 0u;
    *(_OWORD *)(v86 + 168) = 0u;
    *(_QWORD *)(v86 + 120) = v9;
    *(_QWORD *)(v86 + 128) = v78;
  }
  else
  {
    v80 = (int *)global_logger();
    if (v80[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v80))
        goto LABEL_148;
      v81 = (file_logger *)global_logger();
      v82 = file_logger::start_stream(v81, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 756, 1);
      v83 = pthread_getspecific(*((_QWORD *)v82 + 74));
      if (v83 && *((_BYTE *)v83 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83 + 2, (uint64_t)"Use external memory storage mode", 32);
      v84 = pthread_getspecific(*((_QWORD *)v82 + 74));
      if (v84)
      {
        if (*((_BYTE *)v84 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(_QWORD *)(v84[2] - 24) + 16));
          v85 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
          std::locale::~locale(&v134);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v82);
          if (*((_DWORD *)v82 + 150) == 7)
            goto LABEL_150;
        }
      }
    }
    v86 = operator new();
    turi::supervised::xgboost::DiskPagedFMatrix::DiskPagedFMatrix(v86, v78, v9, a5);
    v87 = 1;
  }
  *(_QWORD *)(a1 + 192) = v86;
  *(_BYTE *)(a1 + 184) = v87;
  v94 = (int *)global_logger();
  if (v94[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v94))
      goto LABEL_148;
    v95 = (file_logger *)global_logger();
    v96 = file_logger::start_stream(v95, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 767, 1);
    v97 = pthread_getspecific(*((_QWORD *)v96 + 74));
    if (v97 && *((_BYTE *)v97 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97 + 2, (uint64_t)"Number of columns = ", 20);
    v98 = file_logger::operator<<<unsigned long>((uint64_t)v96);
    v99 = pthread_getspecific(*(_QWORD *)(v98 + 592));
    if (v99 && *((_BYTE *)v99 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99 + 2, (uint64_t)" Number of rows = ", 18);
    v100 = file_logger::operator<<<unsigned long>(v98);
    v101 = pthread_getspecific(*(_QWORD *)(v100 + 592));
    if (v101)
    {
      if (*((_BYTE *)v101 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v101 + *(_QWORD *)(v101[2] - 24) + 16));
        v102 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v102->__vftable[2].~facet_0)(v102, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v100);
        if (*(_DWORD *)(v100 + 600) == 7)
          goto LABEL_150;
      }
    }
  }
  v103 = (int *)global_logger();
  if (v103[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v103))
      goto LABEL_148;
    v104 = (file_logger *)global_logger();
    v105 = file_logger::start_stream(v104, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 769, 1);
    v106 = pthread_getspecific(*((_QWORD *)v105 + 74));
    if (v106 && *((_BYTE *)v106 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106 + 2, (uint64_t)"Number of batches =  ", 21);
    v107 = file_logger::operator<<<unsigned long>((uint64_t)v105);
    v108 = pthread_getspecific(*(_QWORD *)(v107 + 592));
    if (v108 && *((_BYTE *)v108 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108 + 2, (uint64_t)" Batch size = ", 14);
    v109 = file_logger::operator<<<unsigned long>(v107);
    v110 = pthread_getspecific(*(_QWORD *)(v109 + 592));
    if (v110)
    {
      if (*((_BYTE *)v110 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(v110[2] - 24) + 16));
        v111 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v109);
        if (*(_DWORD *)(v109 + 600) == 7)
          goto LABEL_150;
      }
    }
  }
  if (*(_BYTE *)(a1 + 184))
  {
    v112 = (int *)global_logger();
    if (v112[169] <= 4)
    {
      if (!cppipc::must_cancel((cppipc *)v112))
      {
        v113 = (file_logger *)global_logger();
        v114 = file_logger::start_stream(v113, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "DMatrixMLData", 772, 1);
        v115 = pthread_getspecific(*((_QWORD *)v114 + 74));
        if (v115 && *((_BYTE *)v115 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115 + 2, (uint64_t)"External memory mode: ", 22);
        v116 = file_logger::operator<<<unsigned long>((uint64_t)v114);
        v117 = pthread_getspecific(*(_QWORD *)(v116 + 592));
        if (v117 && *((_BYTE *)v117 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117 + 2, (uint64_t)" batches", 8);
        v118 = pthread_getspecific(*(_QWORD *)(v116 + 592));
        if (!v118)
          goto LABEL_141;
        if (!v118[280])
          goto LABEL_141;
        std::ios_base::getloc((const std::ios_base *)&v118[*(_QWORD *)(*((_QWORD *)v118 + 2) - 24) + 16]);
        v119 = std::locale::use_facet(&v134, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
        std::locale::~locale(&v134);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v116);
        if (*(_DWORD *)(v116 + 600) != 7)
          goto LABEL_141;
LABEL_150:
        __print_back_trace();
        v124 = __cxa_allocate_exception(8uLL);
        *v124 = "LOG_FATAL encountered";
        __cxa_throw(v124, MEMORY[0x24BEDB718], 0);
      }
LABEL_148:
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
  }
LABEL_141:
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v130, v131[0]);
  v120 = v133;
  if (v133)
  {
    v121 = (unint64_t *)&v133->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  return a1;
}

void sub_2185D568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  xgboost_old::learner::DMatrix *v21;

  std::locale::~locale(&a18);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a12, a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  xgboost_old::learner::DMatrix::~DMatrix(v21);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::DMatrixMLData::~DMatrixMLData(turi::supervised::xgboost::DMatrixMLData *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D94ACC8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  xgboost_old::learner::DMatrix::~DMatrix(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24D94ACC8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  xgboost_old::learner::DMatrix::~DMatrix(this);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::supervised::xgboost::DMatrixMLData::fmat(turi::supervised::xgboost::DMatrixMLData *this)
{
  return *((_QWORD *)this + 24);
}

void turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"in_memory", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 286, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, _QWORD **a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = (uint64_t)a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185D5AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void sub_2185D5CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()(_QWORD **a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int **v16;
  unsigned int **v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int **v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int **v33;
  unsigned int *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *result;
  uint64_t v78;
  _QWORD v79[3];
  void **v80;
  _BYTE v81[24];
  _BYTE *v82;
  _BYTE v83[24];
  _BYTE *v84;
  _BYTE v85[24];
  _BYTE *v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)*a1;
  turi::sframe::get_output_iterator(*a1 + 13, a2, (uint64_t)v81);
  v6 = *(_QWORD *)(v4 + 48);
  v5 = *(_QWORD *)(v4 + 56);
  v7 = *a1[1];
  std::vector<turi::flexible_type>::vector(v79, 2uLL);
  v8 = ((v5 - v6) >> 3) * a2;
  v9 = (v8 + ((v5 - v6) >> 3)) / v7;
  v10 = v8 / v7;
  if (v10 < v9)
  {
    do
    {
      v11 = *(_QWORD *)(v4 + 48);
      v12 = v79[0];
      switch(*(_BYTE *)(v79[0] + 12))
      {
        case 2:
          v13 = *(unint64_t **)v79[0];
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = *(unsigned int ***)v12;
            if (!*(_QWORD *)v12)
              goto LABEL_44;
            if (*((char *)v16 + 31) < 0)
              operator delete(v16[1]);
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
          break;
        case 3:
          v30 = *(unint64_t **)v79[0];
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = *(unsigned int ***)v12;
            if (!*(_QWORD *)v12)
              goto LABEL_44;
            v34 = v33[1];
            if (v34)
            {
              v33[2] = v34;
              operator delete(v34);
            }
            v17 = v33;
            v18 = 0x1080C409938AC02;
            goto LABEL_43;
          }
          break;
        case 4:
          v19 = *(unint64_t **)v79[0];
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *(unsigned int ***)v12;
            if (!*(_QWORD *)v12)
              goto LABEL_44;
            v80 = (void **)(v22 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v80);
            goto LABEL_36;
          }
          break;
        case 5:
          v35 = *(unint64_t **)v79[0];
          do
          {
            v36 = __ldaxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
          {
            v22 = *(unsigned int ***)v12;
            if (!*(_QWORD *)v12)
              goto LABEL_44;
            v80 = (void **)(v22 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v80);
LABEL_36:
            v17 = v22;
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
          break;
        case 8:
          v38 = *(unint64_t **)v79[0];
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = *(unsigned int ***)v12;
            if (!*(_QWORD *)v12)
              goto LABEL_44;
            boost::detail::shared_count::~shared_count(v41 + 2);
            v17 = v41;
            v29 = -235920773;
            goto LABEL_42;
          }
          break;
        case 9:
          v23 = *(unint64_t **)v79[0];
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = *(unsigned int ***)v12;
            if (*(_QWORD *)v12)
            {
              v27 = v26[6];
              if (v27)
              {
                v26[7] = v27;
                operator delete(v27);
              }
              v28 = v26[3];
              if (v28)
              {
                v26[4] = v28;
                operator delete(v28);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v26 + 1));
              v17 = v26;
              v29 = 2071181815;
LABEL_42:
              v18 = v29 | 0x1030C4000000000;
LABEL_43:
              MEMORY[0x219A19A08](v17, v18);
            }
LABEL_44:
            *(_QWORD *)v12 = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)v12 = 0;
      *(_DWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 12) = 0;
      *(_QWORD *)v12 = *(unsigned int *)(v11 + 8 * v10);
      v42 = *(_QWORD *)(v4 + 48);
      v43 = v79[0];
      switch(*(_BYTE *)(v79[0] + 28))
      {
        case 2:
          v44 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            v47 = *(_QWORD *)(v43 + 16);
            if (!v47)
              goto LABEL_87;
            if (*(char *)(v47 + 31) < 0)
              operator delete(*(void **)(v47 + 8));
            v48 = (_QWORD *)v47;
            v49 = 0x1012C404EF22A49;
            goto LABEL_86;
          }
          break;
        case 3:
          v61 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = *(_QWORD **)(v43 + 16);
            if (!v64)
              goto LABEL_87;
            v65 = (void *)v64[1];
            if (v65)
            {
              v64[2] = v65;
              operator delete(v65);
            }
            v48 = v64;
            v49 = 0x1080C409938AC02;
            goto LABEL_86;
          }
          break;
        case 4:
          v50 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = *(_QWORD *)(v43 + 16);
            if (!v53)
              goto LABEL_87;
            v80 = (void **)(v53 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v80);
            goto LABEL_79;
          }
          break;
        case 5:
          v66 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v53 = *(_QWORD *)(v43 + 16);
            if (!v53)
              goto LABEL_87;
            v80 = (void **)(v53 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v80);
LABEL_79:
            v48 = (_QWORD *)v53;
            v49 = 0x1020C405E66F15BLL;
            goto LABEL_86;
          }
          break;
        case 8:
          v69 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v70 = __ldaxr(v69);
            v71 = v70 - 1;
          }
          while (__stlxr(v71, v69));
          if (!v71)
          {
            v72 = *(_QWORD *)(v43 + 16);
            if (!v72)
              goto LABEL_87;
            boost::detail::shared_count::~shared_count((unsigned int **)(v72 + 16));
            v48 = (_QWORD *)v72;
            v60 = -235920773;
            goto LABEL_85;
          }
          break;
        case 9:
          v54 = *(unint64_t **)(v79[0] + 16);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            v57 = *(_QWORD **)(v43 + 16);
            if (v57)
            {
              v58 = (void *)v57[6];
              if (v58)
              {
                v57[7] = v58;
                operator delete(v58);
              }
              v59 = (void *)v57[3];
              if (v59)
              {
                v57[4] = v59;
                operator delete(v59);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
              v48 = v57;
              v60 = 2071181815;
LABEL_85:
              v49 = v60 | 0x1030C4000000000;
LABEL_86:
              MEMORY[0x219A19A08](v48, v49);
            }
LABEL_87:
            *(_QWORD *)(v43 + 16) = 0;
          }
          break;
        default:
          break;
      }
      *(_QWORD *)(v43 + 16) = 0;
      *(_DWORD *)(v43 + 24) = 0;
      *(_BYTE *)(v43 + 28) = 1;
      *(double *)(v43 + 16) = *(float *)(v42 + 8 * v10 + 4);
      if (!v82)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v82 + 48))(v82, v79);
      ++v10;
    }
    while (v10 != v9);
  }
  v80 = (void **)v79;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v80);
  v73 = v86;
  if (v86 == v85)
  {
    v74 = 4;
    v73 = v85;
  }
  else
  {
    if (!v86)
      goto LABEL_95;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_95:
  v75 = v84;
  if (v84 == v83)
  {
    v76 = 4;
    v75 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_100;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_100:
  result = v82;
  if (v82 == v81)
  {
    v78 = 4;
    result = v81;
  }
  else
  {
    if (!v82)
      return result;
    v78 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v78))();
}

void sub_2185D62B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872D624 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872D624 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
      result = turi::supervised::xgboost::SFrameSparsePage::save(void)::{lambda(unsigned long)#1}::operator()((_QWORD **)*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_saved", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 277, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::unload(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D64C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

turi::supervised::xgboost::MLDataBatchIterator *turi::supervised::xgboost::MLDataBatchIterator::MLDataBatchIterator(turi::supervised::xgboost::MLDataBatchIterator *this, const turi::ml_data *a2, unint64_t a3, unint64_t a4)
{
  turi::ml_data *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[360];

  *(_QWORD *)this = &unk_24D94AD28;
  v8 = (turi::supervised::xgboost::MLDataBatchIterator *)((char *)this + 8);
  turi::ml_data::ml_data((turi::supervised::xgboost::MLDataBatchIterator *)((char *)this + 8), a2);
  *((_OWORD *)this + 14) = 0u;
  if (a3 <= 1)
    v9 = 1;
  else
    v9 = a3;
  *((_OWORD *)this + 15) = 0uLL;
  *((_OWORD *)this + 16) = 0uLL;
  *((_QWORD *)this + 25) = v9;
  *((_QWORD *)this + 26) = a4;
  *((_QWORD *)this + 27) = (~*((_QWORD *)a2 + 2) + v9 + *((_QWORD *)a2 + 3)) / v9;
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::resize((uint64_t *)this + 31, a4);
  if (*((_QWORD *)this + 26))
  {
    v10 = 0;
    do
    {
      turi::ml_data::get_iterator(v8, 0, 1uLL, (uint64_t)v12);
      std::vector<turi::ml_data_iterator>::push_back[abi:ne180100]((uint64_t *)this + 28, (uint64_t)v12);
      turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v12);
      ++v10;
    }
    while (v10 < *((_QWORD *)this + 26));
  }
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  return this;
}

void sub_2185D6704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  turi::ml_data *v2;
  va_list va;

  va_start(va, a2);
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::ml_data::~ml_data(v2);
  _Unwind_Resume(a1);
}

void std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<turi::ml_data_iterator>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0xB60B60B60B60B6)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x4FA4FA4FA4FA4FA5 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x5B05B05B05B05BLL)
      v12 = 0xB60B60B60B60B6;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::ml_data_iterator>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[360 * v9];
    v17 = &v13[360 * v12];
    turi::ml_data_iterator::ml_data_iterator((uint64_t)v15, a2);
    v16 = v15 + 360;
    std::vector<turi::ml_data_iterator>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<turi::ml_data_iterator>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    turi::ml_data_iterator::ml_data_iterator(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 360;
    a1[1] = v7 + 360;
  }
  a1[1] = v8;
}

void sub_2185D68F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::ml_data_iterator>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::BeforeFirst(uint64_t this)
{
  *(_QWORD *)(this + 272) = 0;
  return this;
}

BOOL turi::supervised::xgboost::MLDataBatchIterator::Next(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 34);
  v2 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
  if (v1 != v2)
  {
    if (*((_QWORD *)this + 27) == 1 && *((_QWORD *)this + 35))
      *((_QWORD *)this + 34) = v2;
    else
      turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(this);
  }
  return v1 != v2;
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::Value(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  return (uint64_t)this + 280;
}

void turi::supervised::xgboost::MLDataBatchIterator::~MLDataBatchIterator(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &unk_24D94AD28;
  v3 = (void **)((char *)this + 248);
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 224);
  std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v3 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &unk_24D94AD28;
  v3 = (void **)((char *)this + 248);
  std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 224);
  std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  v3 = (void **)((char *)this + 160);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v3 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  MEMORY[0x219A19A08](this, 0x10F1C40AA42E978);
}

void **std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19[2];
  char *v20;
  char *v21;
  void **v22;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v7 + 48 * a2);
      v14 = 48 * a2;
      do
      {
        result = (void **)turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(v7);
        v7 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = &v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[48 * v11];
    v16 = 3 * a2;
    v17 = &v15[48 * a2];
    v18 = 16 * v16;
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock((turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)v15);
      v15 += 48;
      v18 -= 48;
    }
    while (v18);
    v20 = v17;
    std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer(v19);
  }
  return result;
}

void sub_2185D6C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

turi::supervised::xgboost::MLDataBatchIterator::RowBlock *turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(turi::supervised::xgboost::MLDataBatchIterator::RowBlock *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(this);
  return this;
}

void sub_2185D6CD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock::RowBlock(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(turi::supervised::xgboost::MLDataBatchIterator::RowBlock *this)
{
  std::vector<unsigned long>::resize((uint64_t)this, 1uLL);
  **(_QWORD **)this = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  std::vector<xgboost_old::SparseBatch::Entry>::shrink_to_fit((uint64_t)this + 24);
  std::vector<unsigned long>::shrink_to_fit((uint64_t)this);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>,std::reverse_iterator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100](v4, i - 48);
  }
}

__n128 turi::ml_data_iterator::ml_data_iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  turi::ml_data::ml_data(a1, a2);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_OWORD *)(v3 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(v3 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(v3 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  v4 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(v3 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v3 + 288) = v4;
  *(_OWORD *)(v3 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  v5 = *(_OWORD *)(a2 + 320);
  *(_WORD *)(v3 + 336) = *(_WORD *)(a2 + 336);
  *(_OWORD *)(v3 + 320) = v5;
  result = *(__n128 *)(a2 + 344);
  *(__n128 *)(v3 + 344) = result;
  return result;
}

__n128 turi::ml_data::ml_data(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v3 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 128) = v3;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  result = *(__n128 *)(a2 + 176);
  *(__n128 *)(a1 + 176) = result;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  return result;
}

void std::vector<turi::ml_data_iterator>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 360;
    turi::ml_data_iterator::ml_data_iterator(v6 - 360, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::ml_data_iterator>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xB60B60B60B60B7)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(360 * a2);
}

uint64_t std::__split_buffer<turi::ml_data_iterator>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 360;
    turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)(i - 360));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<turi::supervised::xgboost::MLDataBatchIterator::RowBlock>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::ml_data_iterator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)(v4 - 360));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(turi::supervised::xgboost::MLDataBatchIterator *this)
{
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock *v2;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock *v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  turi::supervised::xgboost::MLDataBatchIterator::RowBlock *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v31[3];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*((_QWORD *)this + 31);
  v3 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)*((_QWORD *)this + 32);
  if (v2 != v3)
  {
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(v2);
      v2 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)((char *)v2 + 48);
    }
    while (v2 != v3);
    v4 = (void **)*((_QWORD *)this + 31);
    v5 = (void **)*((_QWORD *)this + 32);
    while (v4 != v5)
    {
      std::vector<unsigned long>::reserve(v4, *((_QWORD *)this + 25) / *((_QWORD *)this + 26));
      std::vector<turi::ml_data_internal::entry_value>::reserve(v4 + 3, *((_QWORD *)this + 6) * *((_QWORD *)this + 25) / *((_QWORD *)this + 26));
      v4 += 6;
    }
  }
  v33 = *((_QWORD *)this + 34);
  v6 = *((_QWORD *)this + 26);
  v7 = *((_QWORD *)this + 25) + v33;
  v8 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) - v8 < v7)
    v7 = *((_QWORD *)this + 4) - v8;
  v31[2] = (void **)this;
  v32 = v7;
  v31[0] = (void **)&v32;
  v31[1] = (void **)&v33;
  turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(0, v6, (uint64_t)v31);
  v10 = *((_QWORD *)this + 31);
  v9 = *((_QWORD *)this + 32);
  if (v10 == v9)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 31);
    do
    {
      v11 += (uint64_t)(*(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24)) >> 3;
      v12 += 48;
    }
    while (v12 != v9);
  }
  std::vector<turi::ml_data_internal::entry_value>::reserve((void **)(v10 + 24), v11);
  if (*((_QWORD *)this + 26) >= 2uLL)
  {
    v14 = 1;
    do
    {
      v15 = *((_QWORD *)this + 31);
      v16 = (turi::supervised::xgboost::MLDataBatchIterator::RowBlock *)(v15 + 48 * v14);
      v18 = *(_QWORD *)(v10 + 24);
      v17 = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 8) -= 8;
      v19 = *(uint64_t **)v16;
      v20 = (uint64_t *)*((_QWORD *)v16 + 1);
      v31[0] = (void **)v10;
      if (v19 != v20)
      {
        v21 = (v17 - v18) >> 3;
        do
        {
          v22 = *v19++;
          v34 = v22 + v21;
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)v31, &v34);
        }
        while (v19 != v20);
      }
      v23 = v15 + 48 * v14;
      v24 = *(_QWORD **)(v23 + 24);
      v25 = *(_QWORD **)(v23 + 32);
      v31[0] = (void **)(v10 + 24);
      while (v24 != v25)
        std::back_insert_iterator<std::vector<xgboost_old::SparseBatch::Entry>>::operator=[abi:ne180100](v31, v24++);
      turi::supervised::xgboost::MLDataBatchIterator::RowBlock::Reset(v16);
      ++v14;
    }
    while (v14 < *((_QWORD *)this + 26));
  }
  *((_QWORD *)this + 36) = v33;
  v26 = *(void **)v10;
  v27 = *(_QWORD *)(v10 + 8) - *(_QWORD *)v10;
  if (!v27)
    v26 = 0;
  *((_QWORD *)this + 37) = v26;
  if (*(_QWORD *)(v10 + 32) == *(_QWORD *)(v10 + 24))
    v28 = 0;
  else
    v28 = *(_QWORD *)(v10 + 24);
  *((_QWORD *)this + 38) = v28;
  v29 = (v27 >> 3) - 1;
  *((_QWORD *)this + 34) = v32;
  *((_QWORD *)this + 35) = v29;
  return xgboost_old::utils::Assert(v29 != 0, "MLDataBatchIterator", v13, v31[0]);
}

void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  turi::thread_pool *instance;
  turi::thread *v7;
  turi::thread_pool *tls_data;
  BOOL v9;
  turi::thread_pool *v10;
  uint64_t v11;
  double v12;
  double v13;
  turi::thread *v14;
  unint64_t v15;
  uint64_t v16[4];
  _BYTE v17[192];
  uint64_t v18;

  v5 = (unint64_t)a1;
  v18 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v7 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((_BYTE *)tls_data + 8))
    v9 = 0;
  else
    v9 = (unint64_t)v7 > 1;
  if (v9)
  {
    v10 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v17, v10);
    v11 = 0;
    v12 = (double)(a2 - v5) / (double)(unint64_t)v7;
    v13 = (double)v5;
    do
    {
      v14 = (turi::thread *)(v11 + 1);
      v15 = (unint64_t)(v13 + v12 * (double)(unint64_t)(v11 + 1));
      if ((turi::thread *)v11 == (turi::thread *)((char *)v7 - 1))
        v15 = a2;
      v16[2] = (unint64_t)(v13 + v12 * (double)(unint64_t)v11);
      v16[3] = v15;
      v16[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1})::stored_vtable
             + 1;
      v16[1] = a3;
      turi::parallel_task_queue::launch((uint64_t)v17, (uint64_t)v16, v11);
      boost::function0<void>::~function0(v16);
      v11 = (uint64_t)v14;
    }
    while (v14 != v7);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v17);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v17);
  }
  else if (a2 > v5)
  {
    do
      turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(a3, v5++);
    while (a2 != v5);
  }
}

void sub_2185D75E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  turi::ml_data_iterator *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = **(_QWORD **)a1 - v4;
  v6 = *(_QWORD *)(v3 + 208);
  v7 = v5 * a2 / v6 + v4;
  v8 = (v5 + v5 * a2) / v6 + v4;
  v28 = v3;
  v9 = *(_QWORD *)(v3 + 224);
  v10 = (turi::ml_data_iterator *)(v9 + 360 * a2);
  turi::ml_data_iterator::seek(v10, v7);
  v27 = v8;
  if (v7 < v8)
  {
    v11 = *(_QWORD *)(v28 + 248) + 48 * a2;
    v12 = v9 + 360 * a2;
    v13 = (_BYTE *)(v12 + 336);
    v24 = (_BYTE *)(v12 + 192);
    v14 = (_QWORD *)(v12 + 320);
    v15 = (_BYTE *)(v12 + 194);
    v16 = (_QWORD *)(v12 + 200);
    v17 = (uint64_t *)(v12 + 288);
    v18 = (_QWORD *)(v12 + 296);
    v19 = (uint64_t *)(v12 + 328);
    v25 = (_QWORD *)(v12 + 280);
    v26 = v12 + 304;
    do
    {
      turi::supervised::xgboost::MLDataBatchIterator::FetchSingleRow(v28, (uint64_t)v10, v11);
      if (*v13 || *v24)
      {
        v20 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 96) + 8 * *v14);
        if (*v15)
          v20 = v16;
        *v14 += *v20;
      }
      v21 = *v17 + 1;
      *v17 = v21;
      v22 = *((_QWORD *)v10 + 16);
      v23 = v21 - v22 * *v18;
      *v19 = v23;
      if (v23 == v22 && v21 != *v25)
        turi::ml_data_iterator::load_next_block(v10);
      ++v7;
    }
    while (v7 != v27);
  }
}

void turi::supervised::xgboost::MLDataBatchIterator::FetchSingleRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double *v9;
  float v10;
  unint64_t v11;
  float *v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  int v20;
  float v21;
  unint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  double v52;
  double v53;
  int v54;
  float v55;
  unint64_t v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  double v70;
  double v71;
  int v72;
  float v73;
  unint64_t v74;
  float *v75;
  float *v76;
  float *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  float *v83;
  float *v84;
  uint64_t v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void **v115;

  if (*(_BYTE *)(a2 + 336))
  {
    v113 = *(_QWORD *)(a2 + 304);
    v112 = *(_QWORD *)(v113 + 56);
    if (v112)
    {
      v4 = 0;
      v5 = (double *)(*(_QWORD *)(v113 + 96) + 8 * *(_QWORD *)(a2 + 320) + 8 * (*(_BYTE *)(v113 + 18) == 0));
      v114 = a3 + 40;
      v115 = (void **)(a3 + 24);
      while (2)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v113 + 72) + 16 * v4);
        v7 = *(_QWORD *)(v6 + 64);
        v8 = *(_QWORD *)(v6 + 104);
        v9 = v5;
        switch(*(_DWORD *)(v6 + 24))
        {
          case 0:
            v9 = v5 + 1;
            if (!v7)
              goto LABEL_128;
            v10 = *v5;
            v12 = *(float **)(a3 + 32);
            v11 = *(_QWORD *)(a3 + 40);
            if ((unint64_t)v12 < v11)
            {
              *(_DWORD *)v12 = v8;
              v12[1] = v10;
              goto LABEL_11;
            }
            v86 = (float *)*v115;
            v87 = ((char *)v12 - (_BYTE *)*v115) >> 3;
            v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 61)
              goto LABEL_146;
            v89 = v11 - (_QWORD)v86;
            if (v89 >> 2 > v88)
              v88 = v89 >> 2;
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
              v90 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v90 = v88;
            if (v90)
            {
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v90);
              v86 = *(float **)(a3 + 24);
              v12 = *(float **)(a3 + 32);
            }
            else
            {
              v91 = 0;
            }
            v95 = &v91[8 * v87];
            *(_DWORD *)v95 = v8;
            *((float *)v95 + 1) = v10;
            v96 = v95;
            if (v12 == v86)
              goto LABEL_125;
            do
            {
              v97 = *((_QWORD *)v12 - 1);
              v12 -= 2;
              *((_QWORD *)v96 - 1) = v97;
              v96 -= 8;
            }
            while (v12 != v86);
            goto LABEL_124;
          case 1:
            v9 = v5 + 1;
            if (*(_QWORD *)v5 >= v7)
              goto LABEL_128;
            v13 = *(_QWORD *)v5 + v8;
            v12 = *(float **)(a3 + 32);
            v14 = *(_QWORD *)(a3 + 40);
            if ((unint64_t)v12 >= v14)
            {
              v86 = (float *)*v115;
              v92 = ((char *)v12 - (_BYTE *)*v115) >> 3;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
LABEL_146:
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v94 = v14 - (_QWORD)v86;
              if (v94 >> 2 > v93)
                v93 = v94 >> 2;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v93;
              if (v90)
              {
                v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v90);
                v86 = *(float **)(a3 + 24);
                v12 = *(float **)(a3 + 32);
              }
              else
              {
                v91 = 0;
              }
              v95 = &v91[8 * v92];
              *(_DWORD *)v95 = v13;
              *((_DWORD *)v95 + 1) = 1065353216;
              v96 = v95;
              if (v12 != v86)
              {
                do
                {
                  v98 = *((_QWORD *)v12 - 1);
                  v12 -= 2;
                  *((_QWORD *)v96 - 1) = v98;
                  v96 -= 8;
                }
                while (v12 != v86);
LABEL_124:
                v86 = (float *)*v115;
              }
LABEL_125:
              v15 = v95 + 8;
              *(_QWORD *)(a3 + 24) = v96;
              *(_QWORD *)(a3 + 32) = v95 + 8;
              *(_QWORD *)(a3 + 40) = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_DWORD *)v12 = v13;
              v12[1] = 1.0;
LABEL_11:
              v15 = (char *)(v12 + 2);
            }
            *(_QWORD *)(a3 + 32) = v15;
LABEL_128:
            ++v4;
            v5 = v9;
            if (v4 == v112)
              break;
            continue;
          case 2:
            v16 = *(_QWORD *)(v6 + 72);
            if (!v16)
              goto LABEL_100;
            v17 = 0;
            v9 = v5;
            do
            {
              v18 = *v9++;
              v19 = v18;
              if (v17 < v7)
              {
                v20 = v17 + v8;
                v21 = v19;
                v23 = *(float **)(a3 + 32);
                v22 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v23 >= v22)
                {
                  v25 = (float *)*v115;
                  v26 = ((char *)v23 - (_BYTE *)*v115) >> 3;
                  v27 = v26 + 1;
                  if ((unint64_t)(v26 + 1) >> 61)
                    goto LABEL_146;
                  v28 = v22 - (_QWORD)v25;
                  if (v28 >> 2 > v27)
                    v27 = v28 >> 2;
                  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
                    v29 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v29 = v27;
                  if (v29)
                  {
                    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v29);
                    v25 = *(float **)(a3 + 24);
                    v23 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v31 = (float *)&v30[8 * v26];
                  *(_DWORD *)v31 = v20;
                  v31[1] = v21;
                  v32 = v31;
                  if (v23 != v25)
                  {
                    do
                    {
                      v33 = *((_QWORD *)v23 - 1);
                      v23 -= 2;
                      *((_QWORD *)v32 - 1) = v33;
                      v32 -= 2;
                    }
                    while (v23 != v25);
                    v25 = (float *)*v115;
                  }
                  v24 = v31 + 2;
                  *(_QWORD *)(a3 + 24) = v32;
                  *(_QWORD *)(a3 + 32) = v31 + 2;
                  *(_QWORD *)(a3 + 40) = &v30[8 * v29];
                  if (v25)
                    operator delete(v25);
                }
                else
                {
                  *(_DWORD *)v23 = v20;
                  v23[1] = v21;
                  v24 = v23 + 2;
                }
                *(_QWORD *)(a3 + 32) = v24;
              }
              ++v17;
            }
            while (v17 != v16);
            goto LABEL_128;
          case 3:
            v34 = *v5;
            v9 = v5 + 1;
            if (!*(_QWORD *)v5)
              goto LABEL_128;
            v35 = 0;
            do
            {
              if (*(_QWORD *)v9 < v7)
              {
                v36 = *(_QWORD *)v9 + v8;
                v38 = *(char **)(a3 + 32);
                v37 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v38 >= v37)
                {
                  v40 = (char *)*v115;
                  v41 = (v38 - (_BYTE *)*v115) >> 3;
                  v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 61)
                    goto LABEL_146;
                  v43 = v37 - (_QWORD)v40;
                  if (v43 >> 2 > v42)
                    v42 = v43 >> 2;
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
                    v44 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v44 = v42;
                  if (v44)
                  {
                    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v44);
                    v40 = *(char **)(a3 + 24);
                    v38 = *(char **)(a3 + 32);
                  }
                  else
                  {
                    v45 = 0;
                  }
                  v46 = &v45[8 * v41];
                  *(_DWORD *)v46 = v36;
                  *((_DWORD *)v46 + 1) = 1065353216;
                  v47 = v46;
                  if (v38 != v40)
                  {
                    do
                    {
                      v48 = *((_QWORD *)v38 - 1);
                      v38 -= 8;
                      *((_QWORD *)v47 - 1) = v48;
                      v47 -= 8;
                    }
                    while (v38 != v40);
                    v40 = (char *)*v115;
                  }
                  v39 = v46 + 8;
                  *(_QWORD *)(a3 + 24) = v47;
                  *(_QWORD *)(a3 + 32) = v46 + 8;
                  *(_QWORD *)(a3 + 40) = &v45[8 * v44];
                  if (v40)
                    operator delete(v40);
                }
                else
                {
                  *(_DWORD *)v38 = v36;
                  *((_DWORD *)v38 + 1) = 1065353216;
                  v39 = v38 + 8;
                }
                *(_QWORD *)(a3 + 32) = v39;
              }
              ++v35;
              ++v9;
            }
            while (v35 != *(_QWORD *)&v34);
            goto LABEL_128;
          case 4:
            v9 = v5 + 1;
            v49 = *v5;
            if (!*(_QWORD *)v5)
              goto LABEL_128;
            v50 = 0;
            v51 = v5;
            do
            {
              v52 = v51[2];
              v51 += 2;
              v53 = v52;
              if (*(_QWORD *)v9 < v7)
              {
                v54 = *(_QWORD *)v9 + v8;
                v55 = v53;
                v57 = *(float **)(a3 + 32);
                v56 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v57 >= v56)
                {
                  v59 = (float *)*v115;
                  v60 = ((char *)v57 - (_BYTE *)*v115) >> 3;
                  v61 = v60 + 1;
                  if ((unint64_t)(v60 + 1) >> 61)
                    goto LABEL_146;
                  v62 = v56 - (_QWORD)v59;
                  if (v62 >> 2 > v61)
                    v61 = v62 >> 2;
                  if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                    v63 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v63 = v61;
                  if (v63)
                  {
                    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v63);
                    v59 = *(float **)(a3 + 24);
                    v57 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = (float *)&v64[8 * v60];
                  *(_DWORD *)v65 = v54;
                  v65[1] = v55;
                  v66 = v65;
                  if (v57 != v59)
                  {
                    do
                    {
                      v67 = *((_QWORD *)v57 - 1);
                      v57 -= 2;
                      *((_QWORD *)v66 - 1) = v67;
                      v66 -= 2;
                    }
                    while (v57 != v59);
                    v59 = (float *)*v115;
                  }
                  v58 = v65 + 2;
                  *(_QWORD *)(a3 + 24) = v66;
                  *(_QWORD *)(a3 + 32) = v65 + 2;
                  *(_QWORD *)(a3 + 40) = &v64[8 * v63];
                  if (v59)
                    operator delete(v59);
                }
                else
                {
                  *(_DWORD *)v57 = v54;
                  v57[1] = v55;
                  v58 = v57 + 2;
                }
                *(_QWORD *)(a3 + 32) = v58;
              }
              ++v50;
              v9 = v5 + 3;
              v5 = v51;
            }
            while (v50 != *(_QWORD *)&v49);
            goto LABEL_128;
          case 5:
          case 6:
            goto LABEL_128;
          case 7:
            v68 = *(_QWORD *)(v6 + 72);
            if (!v68)
              goto LABEL_100;
            v69 = 0;
            v9 = v5;
            do
            {
              v70 = *v9++;
              v71 = v70;
              if (v69 < v7)
              {
                v72 = v69 + v8;
                v73 = v71;
                v75 = *(float **)(a3 + 32);
                v74 = *(_QWORD *)(a3 + 40);
                if ((unint64_t)v75 >= v74)
                {
                  v77 = (float *)*v115;
                  v78 = ((char *)v75 - (_BYTE *)*v115) >> 3;
                  v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 61)
                    goto LABEL_146;
                  v80 = v74 - (_QWORD)v77;
                  if (v80 >> 2 > v79)
                    v79 = v80 >> 2;
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                    v81 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                  {
                    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v114, v81);
                    v77 = *(float **)(a3 + 24);
                    v75 = *(float **)(a3 + 32);
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v83 = (float *)&v82[8 * v78];
                  *(_DWORD *)v83 = v72;
                  v83[1] = v73;
                  v84 = v83;
                  if (v75 != v77)
                  {
                    do
                    {
                      v85 = *((_QWORD *)v75 - 1);
                      v75 -= 2;
                      *((_QWORD *)v84 - 1) = v85;
                      v84 -= 2;
                    }
                    while (v75 != v77);
                    v77 = (float *)*v115;
                  }
                  v76 = v83 + 2;
                  *(_QWORD *)(a3 + 24) = v84;
                  *(_QWORD *)(a3 + 32) = v83 + 2;
                  *(_QWORD *)(a3 + 40) = &v82[8 * v81];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *(_DWORD *)v75 = v72;
                  v75[1] = v73;
                  v76 = v75 + 2;
                }
                *(_QWORD *)(a3 + 32) = v76;
              }
              ++v69;
            }
            while (v69 != v68);
            goto LABEL_128;
          default:
LABEL_100:
            v9 = v5;
            goto LABEL_128;
        }
        break;
      }
    }
  }
  v99 = *(_QWORD *)(a3 + 16);
  v100 = (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3;
  v101 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v101 >= v99)
  {
    v103 = *(uint64_t **)a3;
    v104 = ((uint64_t)v101 - *(_QWORD *)a3) >> 3;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v106 = v99 - (_QWORD)v103;
    if (v106 >> 2 > v105)
      v105 = v106 >> 2;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
      v107 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    if (v107)
    {
      v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3 + 16, v107);
      v103 = *(uint64_t **)a3;
      v101 = *(uint64_t **)(a3 + 8);
    }
    else
    {
      v108 = 0;
    }
    v109 = (uint64_t *)&v108[8 * v104];
    v110 = &v108[8 * v107];
    *v109 = v100;
    v102 = v109 + 1;
    while (v101 != v103)
    {
      v111 = *--v101;
      *--v109 = v111;
    }
    *(_QWORD *)a3 = v109;
    *(_QWORD *)(a3 + 8) = v102;
    *(_QWORD *)(a3 + 16) = v110;
    if (v103)
      operator delete(v103);
  }
  else
  {
    *v101 = v100;
    v102 = v101 + 1;
  }
  *(_QWORD *)(a3 + 8) = v102;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872D6B3 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872D6B3 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t *a1)
{
  unint64_t i;

  for (i = a1[1]; i < a1[2]; ++i)
    turi::supervised::xgboost::MLDataBatchIterator::FetchToBuffer(void)::{lambda(unsigned long)#1}::operator()(*a1, i);
}

void ***std::back_insert_iterator<std::vector<xgboost_old::SparseBatch::Entry>>::operator=[abi:ne180100](void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::DiskPagedFMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24D94ADA8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  turi::supervised::xgboost::ColBatchIter::ColBatchIter((turi::supervised::xgboost::ColBatchIter *)(a1 + 104));
  *(_QWORD *)(a1 + 272) = a4;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

void sub_2185D8110(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 80);
  if (v5)
  {
    *(_QWORD *)(v1 + 88) = v5;
    operator delete(v5);
  }
  turi::supervised::xgboost::DiskPagedFMatrix::DiskPagedFMatrix(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::RowIterator(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  return *((_QWORD *)this + 2);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::ColIterator(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  uint64_t v2;
  char *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;

  v2 = (*(uint64_t (**)(turi::supervised::xgboost::DiskPagedFMatrix *))(*(_QWORD *)this + 40))(this);
  v4 = (void **)((char *)this + 80);
  v3 = (char *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 11) = v3;
  if (v2)
  {
    v5 = v2;
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 96);
    do
    {
      if ((unint64_t)v3 >= *v7)
      {
        v8 = (char *)*v4;
        v9 = (v3 - (_BYTE *)*v4) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v11 = *v7 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 96, v12);
          v8 = (char *)*((_QWORD *)this + 10);
          v3 = (char *)*((_QWORD *)this + 11);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = v6;
        v15 = v14 + 4;
        while (v3 != v8)
        {
          v16 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v14 - 1) = v16;
          v14 -= 4;
        }
        *((_QWORD *)this + 10) = v14;
        *((_QWORD *)this + 11) = v15;
        *((_QWORD *)this + 12) = &v13[4 * v12];
        if (v8)
          operator delete(v8);
        v3 = v15;
      }
      else
      {
        *(_DWORD *)v3 = v6;
        v3 += 4;
      }
      *((_QWORD *)this + 11) = v3;
      ++v6;
    }
    while (v6 != v5);
    v17 = (char *)*v4;
  }
  else
  {
    v17 = v3;
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 144, v17, (uint64_t)v3, (v3 - v17) >> 2);
  turi::supervised::xgboost::ColBatchIter::BeforeFirst((turi::supervised::xgboost::DiskPagedFMatrix *)((char *)this + 104));
  return (uint64_t)this + 104;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::ColIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = (void **)(a1 + 80);
  v5 = *(char **)(a1 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  v8 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    v22 = v5;
  }
  else
  {
    v9 = v4;
    v10 = 0;
    v11 = (_QWORD *)(a1 + 96);
    do
    {
      v12 = *(unsigned int *)(v8 + 4 * v10);
      if (v9 > v12)
      {
        if ((unint64_t)v5 >= *v11)
        {
          v14 = (char *)*v6;
          v15 = (v5 - (_BYTE *)*v6) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v17 = *v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v18);
            v14 = *(char **)(a1 + 80);
            v5 = *(char **)(a1 + 88);
            LODWORD(v12) = *(_DWORD *)(v8 + 4 * v10);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = v12;
          v13 = v20 + 4;
          while (v5 != v14)
          {
            v21 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *(_QWORD *)(a1 + 80) = v20;
          *(_QWORD *)(a1 + 88) = v13;
          *(_QWORD *)(a1 + 96) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v5 = v12;
          v13 = v5 + 4;
        }
        *(_QWORD *)(a1 + 88) = v13;
        v8 = *a2;
        v7 = a2[1];
        v5 = v13;
      }
      ++v10;
    }
    while (v10 < (v7 - v8) >> 2);
    v22 = (char *)*v6;
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 144), v22, (uint64_t)v5, (v5 - v22) >> 2);
  turi::supervised::xgboost::ColBatchIter::BeforeFirst((turi::supervised::xgboost::ColBatchIter *)(a1 + 104));
  return a1 + 104;
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<unsigned int> *a1, uint64_t a2, float a3)
{
  unint64_t v6;
  int v7;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t i;
  float v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  char *v26;
  uint64_t j;
  _QWORD *v28;
  int *v29;
  file_logger *v30;
  file_logger *started;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  int *v36;
  file_logger *v37;
  file_logger *v38;
  uint64_t v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  uint64_t v42;
  _QWORD *exception;
  _QWORD *v44;
  void *__p;
  char v46;
  _QWORD v47[2];
  _QWORD v48[11];
  char v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  std::locale v54;

  if (((*((uint64_t (**)(std::vector<unsigned int> *))a1->__begin_ + 4))(a1) & 1) != 0)
    return;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 & 0x3F;
  if (v6 > 0x3F || v7 != 0)
  {
    v9 = 0;
    v10 = *(_QWORD **)a2;
    v11 = *(_QWORD *)a2 + 8 * (v6 >> 6);
    do
    {
      if (((*v10 >> v9) & 1) == 0)
        turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator()();
      v10 += v9 == 63;
      if (v9 == 63)
        v9 = 0;
      else
        ++v9;
    }
    while (v9 != v7 || v10 != (_QWORD *)v11);
  }
  turi::supervised::xgboost::DiskPagedFMatrix::InitColData(a1, a3);
  v12 = (*((uint64_t (**)(std::vector<unsigned int> *))a1->__begin_ + 5))(a1);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v14 = (*((float (**)(std::vector<unsigned int> *, uint64_t))a1->__begin_ + 7))(a1, i);
      v15 = v14;
      v16 = v52;
      if (v52 >= v53)
      {
        v18 = v51;
        v19 = v52 - v51;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v21 = (char *)v53 - (char *)v51;
        if (((char *)v53 - (char *)v51) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v53, v22);
          v18 = v51;
          v16 = v52;
        }
        else
        {
          v23 = 0;
        }
        v24 = (float *)&v23[4 * v19];
        *v24 = v15;
        v17 = v24 + 1;
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        v51 = v24;
        v52 = v17;
        v53 = (float *)&v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v52 = v14;
        v17 = v16 + 1;
      }
      v52 = v17;
    }
  }
  std::__sort<std::__less<float,float> &,float *>();
  v26 = (char *)operator new(0x28uLL);
  *(_QWORD *)v26 = 0;
  *(uint64x2_t *)(v26 + 8) = vshlq_u64((uint64x2_t)vdupq_n_s64(v12), (uint64x2_t)xmmword_21872DC70);
  *((_QWORD *)v26 + 3) = (3 * v12) >> 2;
  *((_QWORD *)v26 + 4) = v12 - 1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Feature density quantile (0%, 25%, 50%, 100%): ", 47);
  for (j = 0; j != 40; j += 8)
  {
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  }
  v29 = (int *)global_logger();
  if (v29[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v29))
      goto LABEL_55;
    v30 = (file_logger *)global_logger();
    started = file_logger::start_stream(v30, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColAccess", 556, 1);
    v32 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v32 && *((_BYTE *)v32 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)"Number of features after expand: ", 33);
    v33 = file_logger::operator<<<unsigned long>((uint64_t)started);
    v34 = pthread_getspecific(*(_QWORD *)(v33 + 592));
    if (v34)
    {
      if (*((_BYTE *)v34 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(v34[2] - 24) + 16));
        v35 = std::locale::use_facet(&v54, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v54);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v33);
        if (*(_DWORD *)(v33 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v36 = (int *)global_logger();
  if (v36[169] <= 2)
  {
    if (!cppipc::must_cancel((cppipc *)v36))
    {
      v37 = (file_logger *)global_logger();
      v38 = file_logger::start_stream(v37, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColAccess", 558, 1);
      std::stringbuf::str();
      v39 = file_logger::operator<<<std::string>((uint64_t)v38, (uint64_t)&__p);
      v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
      if (v40)
      {
        if (*((_BYTE *)v40 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(v40[2] - 24) + 16));
          v41 = std::locale::use_facet(&v54, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
          std::locale::~locale(&v54);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v39);
          if (*(_DWORD *)(v39 + 600) == 7)
          {
            __print_back_trace();
            v44 = __cxa_allocate_exception(8uLL);
            *v44 = "LOG_FATAL encountered";
            __cxa_throw(v44, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v46 < 0)
        operator delete(__p);
      goto LABEL_49;
    }
LABEL_55:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_49:
  v47[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v47 + *(_QWORD *)(v47[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v48[0] = v42;
  v48[1] = MEMORY[0x24BEDB848] + 16;
  if (v49 < 0)
    operator delete((void *)v48[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v50);
  operator delete(v26);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_2185D895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;
  void *v18;

  std::locale::~locale((std::locale *)(v16 - 88));
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  operator delete(v15);
  v18 = *(void **)(v16 - 112);
  if (v18)
  {
    *(_QWORD *)(v16 - 104) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

BOOL turi::supervised::xgboost::DiskPagedFMatrix::HaveColAccess(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  return *((_QWORD *)this + 8) != *((_QWORD *)this + 7);
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::NumCol(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  uint64_t v2;
  const char *v3;

  v2 = (*(uint64_t (**)(turi::supervised::xgboost::DiskPagedFMatrix *))(*(_QWORD *)this + 32))(this);
  xgboost_old::utils::Check(v2, "NumCol:need column access", v3);
  return (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
}

uint64_t turi::supervised::xgboost::DiskPagedFMatrix::GetColSize(turi::supervised::xgboost::DiskPagedFMatrix *this, uint64_t a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2);
}

float turi::supervised::xgboost::DiskPagedFMatrix::GetColDensity(turi::supervised::xgboost::DiskPagedFMatrix *this, uint64_t a2)
{
  return 1.0
       - (float)((float)(unint64_t)(*((_QWORD *)this + 6) - *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2))
               / (float)*((unint64_t *)this + 6));
}

void turi::supervised::xgboost::DiskPagedFMatrix::~DiskPagedFMatrix(turi::supervised::xgboost::DiskPagedFMatrix *this)
{
  turi::supervised::xgboost::DiskPagedFMatrix::~DiskPagedFMatrix(this);
  JUMPOUT(0x219A19A08);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &unk_24D94ADA8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  turi::supervised::xgboost::ColBatchIter::~ColBatchIter((turi::thread_pool **)this + 13);
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
}

turi::supervised::xgboost::ColBatchIter *turi::supervised::xgboost::ColBatchIter::ColBatchIter(turi::supervised::xgboost::ColBatchIter *this)
{
  unint64_t *v2;
  char *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *((_QWORD *)this + 2) = 2;
  v2 = (unint64_t *)((char *)this + 16);
  *(_QWORD *)this = &unk_24D94AE28;
  *(_OWORD *)((char *)this + 24) = 0u;
  v3 = (char *)this + 24;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 13) = 0;
  v4 = (unint64_t)turi::thread::cpu_count(this) >> 1;
  if (v4 <= 2)
    v4 = 2;
  *v2 = v4;
  std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long &,void>(v2, &v9);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v3, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return this;
}

void sub_2185D8B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v14;
  void *v15;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 128) = v14;
    operator delete(v14);
  }
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 64);
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](&a10);
  v15 = *(void **)(v10 + 40);
  if (v15)
  {
    *(_QWORD *)(v10 + 48) = v15;
    operator delete(v15);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::ColBatchIter::BeforeFirst(turi::supervised::xgboost::ColBatchIter *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!*((_BYTE *)this + 8))
    turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator()();
  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)*((_QWORD *)this + 9);
  if (v2 != v3)
  {
    v4 = (char *)this + 40;
    do
    {
      turi::supervised::xgboost::SFrameSparsePage::unload((turi::supervised::xgboost::SFrameSparsePage *)v2);
      if (v2 + 72 != v4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v2 + 72, *((char **)this + 5), *((_QWORD *)this + 6), (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
      v2 += 408;
    }
    while (v2 != v3);
  }
  v6 = *((_QWORD *)this + 11);
  for (i = *((_QWORD *)this + 12); i != v6; i = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 12) = v6;
  v7 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3);
  v11 = 0;
  v12 = 0;
  std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::resize((uint64_t)this + 88, v7, &v11);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_QWORD *)this + 14) = 0;
}

void sub_2185D8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL turi::supervised::xgboost::ColBatchIter::Next(turi::supervised::xgboost::ColBatchIter *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  turi::supervised::xgboost::ColBatchIter::PageLoader **v6;
  turi::supervised::xgboost::ColBatchIter::PageLoader *v7;
  turi::supervised::xgboost::ColBatchIter::PageLoader *v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  _QWORD *v12;
  turi::supervised::xgboost::ColBatchIter::PageLoader *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;

  if (!*((_BYTE *)this + 8))
    turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator()();
  v2 = *((_QWORD *)this + 14);
  v3 = *((_QWORD *)this + 8);
  v4 = 0xFAFAFAFAFAFAFAFBLL * ((*((_QWORD *)this + 9) - v3) >> 3);
  if (v2 != v4)
  {
    if (v2)
    {
      turi::supervised::xgboost::SFrameSparsePage::unload((turi::supervised::xgboost::SFrameSparsePage *)(v3 + 408 * v2 - 408));
      v5 = *((_QWORD *)this + 14);
    }
    else
    {
      v5 = 0;
    }
    v6 = (turi::supervised::xgboost::ColBatchIter::PageLoader **)(*((_QWORD *)this + 11) + 16 * v5);
    v7 = *v6;
    if (!*v6)
    {
      v8 = (turi::supervised::xgboost::ColBatchIter::PageLoader *)operator new();
      turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(v8, (turi::supervised::xgboost::SFrameSparsePage *)(*((_QWORD *)this + 8) + 408 * *((_QWORD *)this + 14)), *((turi::thread_pool **)this + 3));
      std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(v6, (uint64_t)v8);
      v7 = *(turi::supervised::xgboost::ColBatchIter::PageLoader **)(*((_QWORD *)this + 11)
                                                                   + 16 * *((_QWORD *)this + 14));
    }
    turi::supervised::xgboost::ColBatchIter::PageLoader::wait(v7);
    v9 = *((_QWORD *)this + 2);
    if (v9)
    {
      for (i = 1; i <= v9; ++i)
      {
        v11 = i + *((_QWORD *)this + 14);
        if (v11 < 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3))
        {
          v12 = (_QWORD *)(*((_QWORD *)this + 11) + 16 * v11);
          if (!*v12)
          {
            v13 = (turi::supervised::xgboost::ColBatchIter::PageLoader *)operator new();
            turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(v13, (turi::supervised::xgboost::SFrameSparsePage *)(*((_QWORD *)this + 8) + 408 * v11), *((turi::thread_pool **)this + 3));
            std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(v12, (uint64_t)v13);
            v9 = *((_QWORD *)this + 2);
          }
        }
      }
    }
    v14 = (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2;
    *(_QWORD *)&v30 = 0;
    DWORD2(v30) = 0;
    std::vector<xgboost_old::SparseBatch::Inst>::resize((uint64_t)this + 120, v14, &v30);
    v15 = *((_QWORD *)this + 14);
    v16 = *((_QWORD *)this + 6);
    if (v16 == *((_QWORD *)this + 5))
    {
      v26 = 0;
      v25 = *((_QWORD *)this + 6);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = (_QWORD *)(*((_QWORD *)this + 8) + 408 * v15);
      v20 = v19 + 6;
      do
      {
        if (v19[7] == *v20)
          v21 = 0;
        else
          v21 = *v20;
        v22 = *v19 + 8 * v18;
        v23 = v21 + 8 * *(_QWORD *)v22;
        ++v18;
        LODWORD(v22) = *(_DWORD *)(v22 + 8) - *(_QWORD *)v22;
        v24 = *((_QWORD *)this + 15) + v17;
        *(_QWORD *)v24 = v23;
        *(_DWORD *)(v24 + 8) = v22;
        v25 = *((_QWORD *)this + 5);
        v16 = *((_QWORD *)this + 6);
        v17 += 16;
      }
      while (v18 < (v16 - v25) >> 2);
      v26 = (v16 - v25) >> 2;
    }
    if (v16 == v25)
      v27 = 0;
    else
      v27 = v25;
    *((_QWORD *)this + 18) = v26;
    *((_QWORD *)this + 19) = v27;
    if (*((_QWORD *)this + 16) == *((_QWORD *)this + 15))
      v28 = 0;
    else
      v28 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 20) = v28;
    *((_QWORD *)this + 14) = v15 + 1;
  }
  return v2 != v4;
}

void sub_2185D8F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A0C406080217BLL);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::ColBatchIter::Value(turi::supervised::xgboost::ColBatchIter *this)
{
  if (!*((_BYTE *)this + 8))
    turi::supervised::xgboost::ColBatchIter::Value(void)const::{lambda(void)#1}::operator()();
  return (uint64_t)this + 144;
}

void turi::supervised::xgboost::ColBatchIter::~ColBatchIter(turi::thread_pool **this)
{
  turi::supervised::xgboost::ColBatchIter::~ColBatchIter(this);
  JUMPOUT(0x219A19A08);
}

{
  turi::thread_pool *v2;
  turi::thread_pool *v3;
  void **v4;

  *this = (turi::thread_pool *)&unk_24D94AE28;
  turi::supervised::xgboost::ColBatchIter::Clear((turi::supervised::xgboost::ColBatchIter *)this);
  turi::thread_pool::join(this[3]);
  v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  v4 = (void **)(this + 11);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(this + 8);
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long &,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x238uLL);
  result = std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<turi::thread_pool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2185D9034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long &,std::allocator<turi::thread_pool>,0>(_QWORD *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_24D920F00;
  turi::thread_pool::thread_pool((turi::thread_pool *)(a1 + 3), *a2, 0);
  return a1;
}

void sub_2185D9088(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 408;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  turi::sframe::~sframe((turi::sframe *)(a2 + 104));
  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(_QWORD *)(a2 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(_QWORD *)(a2 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a2 + 24);
  if (v5)
  {
    *(_QWORD *)(a2 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v6;
    operator delete(v6);
  }
}

void turi::supervised::xgboost::SFrameSparsePage::~SFrameSparsePage(turi::supervised::xgboost::SFrameSparsePage *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  turi::sframe::~sframe((turi::supervised::xgboost::SFrameSparsePage *)((char *)this + 104));
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

void turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 382, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::BeforeFirst(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D92EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 8);
  v5 = (result - *(_QWORD *)a1) >> 4;
  if (a2 > v5)
    return std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__append((char **)a1, a2 - v5, a3);
  if (a2 < v5)
  {
    v6 = *(_QWORD *)a1 + 16 * a2;
    while (result != v6)
      result = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](result - 16);
    *(_QWORD *)(a1 + 8) = v6;
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__append(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;

  v8 = a1[2];
  result = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(char **)(result - 8);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      v16 = &v9[16 * a2];
      do
      {
        *(_QWORD *)v9 = *a3;
        v17 = a3[1];
        *((_QWORD *)v9 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v9 += 16;
      }
      while (v9 != v16);
      v9 = v16;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - *a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v34 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(result, v14);
    else
      v15 = 0;
    v20 = &v15[16 * v12];
    v33 = &v15[16 * v14];
    v21 = &v20[16 * a2];
    v22 = v20;
    do
    {
      *(_QWORD *)v22 = *a3;
      v23 = a3[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v22 += 16;
    }
    while (v22 != v21);
    v32.i64[1] = (uint64_t)&v20[16 * a2];
    v27 = *a1;
    v26 = a1[1];
    if (v26 == *a1)
    {
      v29 = vdupq_n_s64((unint64_t)v26);
    }
    else
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        v26 -= 16;
        *((_OWORD *)v20 - 1) = v28;
        v20 -= 16;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
      }
      while (v26 != v27);
      v29 = *(int64x2_t *)a1;
      v21 = (char *)v32.i64[1];
    }
    *a1 = v20;
    a1[1] = v21;
    v32 = v29;
    v30 = a1[2];
    a1[2] = v33;
    v33 = v30;
    v31 = v29.i64[0];
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v31);
  }
  return result;
}

void turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 392, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::Next(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185D965C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t turi::supervised::xgboost::ColBatchIter::PageLoader::wait(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  pthread_mutex_t *v11;
  char v12;
  uint64_t v13;
  char v14;

  v11 = (pthread_mutex_t *)((char *)this + 56);
  v12 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  while (!*((_BYTE *)this + 128))
  {
    v2 = pthread_cond_wait((pthread_cond_t *)((char *)this + 8), v11);
    assert_msg((_DWORD)v2 == 0, (uint64_t)"Condition variable wait error %d", v3, v4, v5, v6, v7, v8, v2);
    v13 = 0;
    v12 = 1;
    v14 = 0;
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  }
  if (*((_QWORD *)this + 15))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Canceled by user";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
}

void sub_2185D9840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::shared_ptr[abi:ne180100]<turi::supervised::xgboost::ColBatchIter::PageLoader,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D94AE88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2185D98BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100]((turi::supervised::xgboost::ColBatchIter::PageLoader **)va, 0);
  _Unwind_Resume(a1);
}

turi::supervised::xgboost::ColBatchIter::PageLoader *std::__shared_ptr_pointer<turi::supervised::xgboost::ColBatchIter::PageLoader *,std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::__shared_ptr_default_delete<turi::supervised::xgboost::ColBatchIter::PageLoader,turi::supervised::xgboost::ColBatchIter::PageLoader>,std::allocator<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__on_zero_shared(uint64_t a1)
{
  turi::supervised::xgboost::ColBatchIter::PageLoader *result;

  result = *(turi::supervised::xgboost::ColBatchIter::PageLoader **)(a1 + 24);
  if (result)
  {
    turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::supervised::xgboost::ColBatchIter::PageLoader *,std::shared_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::__shared_ptr_default_delete<turi::supervised::xgboost::ColBatchIter::PageLoader,turi::supervised::xgboost::ColBatchIter::PageLoader>,std::allocator<turi::supervised::xgboost::ColBatchIter::PageLoader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
  turi::supervised::xgboost::ColBatchIter::PageLoader::wait(this);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)this + 15);
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 56));
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 8));
}

void sub_2185D9984(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2185D995CLL);
}

turi::supervised::xgboost::ColBatchIter::PageLoader *std::unique_ptr<turi::supervised::xgboost::ColBatchIter::PageLoader>::reset[abi:ne180100](turi::supervised::xgboost::ColBatchIter::PageLoader **a1, turi::supervised::xgboost::ColBatchIter::PageLoader *a2)
{
  turi::supervised::xgboost::ColBatchIter::PageLoader *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::supervised::xgboost::ColBatchIter::PageLoader::~PageLoader(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

turi::supervised::xgboost::ColBatchIter::PageLoader *turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::ColBatchIter::PageLoader *this, turi::supervised::xgboost::SFrameSparsePage *a2, turi::thread_pool *a3)
{
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[4];

  *(_QWORD *)this = a2;
  v5 = (pthread_mutex_t *)((char *)this + 56);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 8));
  v6 = pthread_mutex_init(v5, 0);
  assert_msg((_DWORD)v6 == 0, (uint64_t)"Mutex create error %d", v7, v8, v9, v10, v11, v12, v6);
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  v14[0] = (uint64_t)boost::function0<void>::assign_to<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1}>(turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1})::stored_vtable
         + 1;
  v14[1] = (uint64_t)this;
  turi::thread_pool::launch((uint64_t)a3, (uint64_t)v14, -1);
  boost::function0<void>::~function0(v14);
  return this;
}

void sub_2185D9A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pthread_cond_t *v3;
  pthread_mutex_t *v4;
  std::exception_ptr *v5;
  va_list va;

  va_start(va, a3);
  boost::function0<void>::~function0((uint64_t *)va);
  std::exception_ptr::~exception_ptr(v5);
  turi::mutex::~mutex(v4);
  turi::conditional::~conditional(v3);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1}>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021872D923 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021872D923 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<turi::supervised::xgboost::ColBatchIter::PageLoader::PageLoader(turi::supervised::xgboost::SFrameSparsePage &,turi::thread_pool &)::{lambda(void)#1},void>::invoke(turi::supervised::xgboost::SFrameSparsePage ***a1)
{
  turi::supervised::xgboost::SFrameSparsePage **v1;

  v1 = *a1;
  turi::supervised::xgboost::SFrameSparsePage::load(**a1);
  return turi::supervised::xgboost::ColBatchIter::PageLoader::signal_done((turi::supervised::xgboost::ColBatchIter::PageLoader *)v1);
}

void sub_2185D9B80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr *v10;

  __cxa_begin_catch(a1);
  std::current_exception();
  std::exception_ptr::operator=(v10 + 15, &a10);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x2185D9B68);
}

void turi::supervised::xgboost::SFrameSparsePage::load(turi::supervised::xgboost::SFrameSparsePage *this)
{
  turi::supervised::xgboost::SFrameSparsePage *v1;
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t i;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *size;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char **v83;
  char *v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  float v95;
  float v96;
  turi::sframe_reader *v97;
  std::runtime_error *exception;
  std::string *v99;
  __int128 v100;
  std::runtime_error *v101;
  std::string *v102;
  __int128 v103;
  uint64_t *v104;
  _QWORD *v105;
  turi::supervised::xgboost::SFrameSparsePage *v106;
  turi::sframe_reader *v107;
  uint64_t **v108[3];
  char v109;
  void *__p;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  std::string __str;
  std::string::size_type v119;
  void *v120;
  void *v121;
  std::string v122;
  size_t __idx[2];

  if (!*((_BYTE *)this + 400))
    goto LABEL_137;
  v1 = this;
  if (*((_BYTE *)this + 96))
    turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator()();
  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
    turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator()();
  v3 = (uint64_t *)((char *)this + 48);
  if (*((_QWORD *)this + 6) != *((_QWORD *)this + 7))
    turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator()();
  v5 = (char *)this + 16;
  v4 = *((_QWORD *)this + 2);
  *((_BYTE *)this + 96) = 1;
  if ((unint64_t)v2 >= v4)
  {
    v7 = v4 - (_QWORD)v2;
    v8 = v7 >> 2;
    if ((unint64_t)(v7 >> 2) <= 1)
      v8 = 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)this + 16, v9);
    v11 = *(char **)v1;
    v12 = (char *)*((_QWORD *)v1 + 1);
    v14 = &v10[v13];
    *v10 = 0;
    v6 = (char *)(v10 + 1);
    while (v12 != v11)
    {
      v15 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *--v10 = v15;
    }
    *(_QWORD *)v1 = v10;
    *((_QWORD *)v1 + 1) = v6;
    *((_QWORD *)v1 + 2) = v14;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v2 = 0;
    v6 = (char *)(v2 + 1);
  }
  *((_QWORD *)v1 + 1) = v6;
  v16 = (_DWORD *)*((_QWORD *)v1 + 9);
  v17 = (_DWORD *)*((_QWORD *)v1 + 10);
  v106 = v1;
  for (i = 0; v16 != v17; v6 = v23)
  {
    v19 = *((_QWORD *)v1 + 2);
    v20 = *(_QWORD *)(*((_QWORD *)v1 + 3) + 8 * (*v16 + 1))
        - *(_QWORD *)(*((_QWORD *)v1 + 3) + 8 * *v16);
    v21 = (void **)v1;
    v22 = *((_QWORD *)v6 - 1) + v20;
    if ((unint64_t)v6 >= v19)
    {
      v24 = (char *)*v21;
      v25 = (v6 - (_BYTE *)*v21) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v27 = v19 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v5, v28);
        v24 = *(char **)v106;
        v6 = (char *)*((_QWORD *)v106 + 1);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * v25];
      *(_QWORD *)v30 = v22;
      v23 = v30 + 8;
      if (v6 == v24)
      {
        v1 = v106;
      }
      else
      {
        v1 = v106;
        do
        {
          v31 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v30 - 1) = v31;
          v30 -= 8;
        }
        while (v6 != v24);
      }
      *(_QWORD *)v1 = v30;
      *((_QWORD *)v1 + 1) = v23;
      *((_QWORD *)v1 + 2) = &v29[8 * v28];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v6 = v22;
      v23 = v6 + 8;
      v1 = (turi::supervised::xgboost::SFrameSparsePage *)v21;
    }
    *((_QWORD *)v1 + 1) = v23;
    i += v20;
    ++v16;
  }
  std::vector<xgboost_old::SparseBatch::Entry>::resize((uint64_t)v3, i);
  __p = 0;
  v111 = 0;
  v112 = 0;
  if (*((_QWORD *)v1 + 10) == *((_QWORD *)v1 + 9))
  {
    v32 = 0;
    v44 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    do
    {
      if ((unint64_t)v32 >= v112)
      {
        v34 = (uint64_t *)__p;
        v35 = ((char *)v32 - (_BYTE *)__p) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v37 = v112 - (_QWORD)__p;
        if ((uint64_t)(v112 - (_QWORD)__p) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v112, v38);
          v40 = v39;
          v34 = (uint64_t *)__p;
          v32 = v111;
        }
        else
        {
          v40 = 0;
        }
        v41 = (unint64_t *)(v38 + 8 * v35);
        *v41 = v33;
        v42 = (uint64_t *)(v41 + 1);
        while (v32 != v34)
        {
          v43 = *--v32;
          *--v41 = v43;
        }
        __p = v41;
        v111 = v42;
        v112 = v38 + 8 * v40;
        if (v34)
          operator delete(v34);
        v32 = v42;
      }
      else
      {
        *v32++ = v33;
      }
      v111 = v32;
      ++v33;
    }
    while (v33 < (uint64_t)(*((_QWORD *)v1 + 10) - *((_QWORD *)v1 + 9)) >> 2);
    v44 = (uint64_t *)__p;
  }
  v45 = 126 - 2 * __clz(v32 - v44);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  if (v32 == v44)
    v46 = 0;
  else
    v46 = v45;
  std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>((uint64_t)v44, v32, (uint64_t *)&__str, v46, 1);
  memset(v108, 0, sizeof(v108));
  v109 = 1;
  turi::sframe::get_reader((turi::supervised::xgboost::SFrameSparsePage *)((char *)v1 + 104), &v107);
  v47 = __p;
  v104 = v111;
  if (__p != v111)
  {
    while (1)
    {
      v105 = v47;
      v48 = *v47;
      v49 = (uint64_t *)(*((_QWORD *)v1 + 3) + 8 * *(unsigned int *)(*((_QWORD *)v1 + 9) + 4 * *v47));
      v50 = *v49;
      v51 = v49[1];
      turi::sframe_reader::read_rows(v107, *v49, v51, v108);
      v52 = v51 - v50;
      if (v51 != v50)
        break;
LABEL_127:
      v47 = v105 + 1;
      v1 = v106;
      if (v105 + 1 == v104)
        goto LABEL_128;
    }
    v53 = 0;
    v54 = *v108[0];
    v55 = v108[0][2];
    v56 = *(_QWORD *)(*(_QWORD *)v106 + 8 * v48);
    while (2)
    {
      v57 = *v54 + 16 * v53;
      LODWORD(v58) = 0;
      v59 = *v3;
      switch(*(_BYTE *)(v57 + 12))
      {
        case 0:
          v58 = *(_QWORD *)v57;
          goto LABEL_93;
        case 1:
          v58 = (uint64_t)*(double *)v57;
          goto LABEL_93;
        case 2:
          v64 = *(_QWORD *)v57;
          v65 = (char **)(*(_QWORD *)v57 + 8);
          __idx[0] = 0;
          v66 = (char *)v65;
          if (*(char *)(v64 + 31) < 0)
            v66 = *v65;
          std::string::basic_string[abi:ne180100]<0>(&__str, v66);
          LODWORD(v58) = std::stoll(&__str, __idx, 10);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (*(char *)(v64 + 31) < 0)
            v67 = *(_QWORD *)(v64 + 16);
          else
            v67 = *(unsigned __int8 *)(v64 + 31);
          if (__idx[0] != v67)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v99 = std::string::append(&v122, " cannot be interpreted as an integer");
            v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__str);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_93;
        case 3:
          v60 = *(_QWORD *)v57;
          memset(&__str, 0, sizeof(__str));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v60 + 8), *(_QWORD *)(v60 + 16), (uint64_t)(*(_QWORD *)(v60 + 16) - *(_QWORD *)(v60 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          goto LABEL_92;
        case 4:
          v68 = *(_QWORD *)v57;
          memset(&__str, 0, sizeof(__str));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(_QWORD *)(v68 + 16) - *(_QWORD *)(v68 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
          goto LABEL_92;
        case 5:
          v69 = *(_QWORD *)v57;
          memset(&__str, 0, sizeof(__str));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v69 + 8), *(uint64_t **)(v69 + 16), (uint64_t)(*(_QWORD *)(v69 + 16) - *(_QWORD *)(v69 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
          goto LABEL_92;
        case 6:
          v58 = (uint64_t)(*(_QWORD *)v57 << 8) >> 8;
          goto LABEL_93;
        case 7:
          goto LABEL_93;
        case 8:
          v70 = *(_QWORD *)v57;
          v71 = *(unsigned int **)(v70 + 16);
          v113 = *(_QWORD *)(v70 + 8);
          v114 = v71;
          if (v71)
          {
            v72 = v71 + 2;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v74 = *(_OWORD *)(v70 + 24);
          v75 = *(_OWORD *)(v70 + 56);
          v116 = *(_OWORD *)(v70 + 40);
          v117 = v75;
          v115 = v74;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v114);
          goto LABEL_92;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(_QWORD *)v57 + 8);
          turi::flexible_type_fail(0);
          if (v120)
          {
            v121 = v120;
            operator delete(v120);
          }
          if (__str.__r_.__value_.__r.__words[2])
          {
            v119 = __str.__r_.__value_.__r.__words[2];
            operator delete((void *)__str.__r_.__value_.__r.__words[2]);
          }
          size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v62 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_92:
          LODWORD(v58) = 0;
LABEL_93:
          *(_DWORD *)(v59 + 8 * v56) = v58;
          v76 = *v55 + 16 * v53;
          v77 = 0.0;
          switch(*(_BYTE *)(v76 + 12))
          {
            case 0:
              v77 = (double)*(uint64_t *)v76;
              goto LABEL_126;
            case 1:
              v77 = *(double *)v76;
              goto LABEL_126;
            case 2:
              v82 = *(_QWORD *)v76;
              v83 = (char **)(*(_QWORD *)v76 + 8);
              __idx[0] = 0;
              v84 = (char *)v83;
              if (*(char *)(v82 + 31) < 0)
                v84 = *v83;
              std::string::basic_string[abi:ne180100]<0>(&__str, v84);
              v85 = std::stod(&__str, __idx);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (*(char *)(v82 + 31) < 0)
                v86 = *(_QWORD *)(v82 + 16);
              else
                v86 = *(unsigned __int8 *)(v82 + 31);
              if (__idx[0] != v86)
              {
                v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v102 = std::string::append(&v122, " cannot be interpreted as a float");
                v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v103;
                v102->__r_.__value_.__l.__size_ = 0;
                v102->__r_.__value_.__r.__words[2] = 0;
                v102->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v101, &__str);
                __cxa_throw(v101, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v95 = v85;
              v77 = v95;
              goto LABEL_126;
            case 3:
              v78 = *(_QWORD *)v76;
              memset(&__str, 0, sizeof(__str));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v78 + 8), *(_QWORD *)(v78 + 16), (uint64_t)(*(_QWORD *)(v78 + 16) - *(_QWORD *)(v78 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__str.__r_.__value_.__r.__words[0])
              {
                __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              goto LABEL_126;
            case 4:
              v87 = *(_QWORD *)v76;
              memset(&__str, 0, sizeof(__str));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v87 + 8), *(uint64_t **)(v87 + 16), (uint64_t)(*(_QWORD *)(v87 + 16) - *(_QWORD *)(v87 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
              goto LABEL_126;
            case 5:
              v88 = *(_QWORD *)v76;
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v88 + 8), *(uint64_t **)(v88 + 16), (uint64_t)(*(_QWORD *)(v88 + 16) - *(_QWORD *)(v88 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
              goto LABEL_126;
            case 6:
              v77 = (double)*(int *)(v76 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v76 << 8) >> 8);
              goto LABEL_126;
            case 7:
              goto LABEL_126;
            case 8:
              v89 = *(_QWORD *)v76;
              v90 = *(unsigned int **)(v89 + 16);
              v113 = *(_QWORD *)(v89 + 8);
              v114 = v90;
              if (v90)
              {
                v91 = v90 + 2;
                do
                  v92 = __ldxr(v91);
                while (__stxr(v92 + 1, v91));
              }
              v93 = *(_OWORD *)(v89 + 24);
              v94 = *(_OWORD *)(v89 + 56);
              v116 = *(_OWORD *)(v89 + 40);
              v117 = v94;
              v115 = v93;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v114);
              goto LABEL_126;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(_QWORD *)v76 + 8);
              turi::flexible_type_fail(0);
              if (v120)
              {
                v121 = v120;
                operator delete(v120);
              }
              if (__str.__r_.__value_.__r.__words[2])
              {
                v119 = __str.__r_.__value_.__r.__words[2];
                operator delete((void *)__str.__r_.__value_.__r.__words[2]);
              }
              v79 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_)
              {
                v80 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
LABEL_126:
              v96 = v77;
              *(float *)(v59 + 8 * v56++ + 4) = v96;
              if (++v53 == v52)
                goto LABEL_127;
              continue;
            default:
              goto LABEL_133;
          }
        default:
LABEL_133:
          turi::flexible_type_fail(0);
          __break(1u);
          break;
      }
      break;
    }
LABEL_137:
    turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator()();
  }
LABEL_128:
  v97 = v107;
  v107 = 0;
  if (v97)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v97 + 8))(v97);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (__p)
  {
    v111 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_2185DA59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, boost::detail::shared_count *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 136) = &a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 136));
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::ColBatchIter::PageLoader::signal_done(turi::supervised::xgboost::ColBatchIter::PageLoader *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  *((_BYTE *)this + 128) = 1;
  v3 = pthread_cond_signal((pthread_cond_t *)((char *)this + 8));
  assert_msg((_DWORD)v3 == 0, (uint64_t)"Condition variable signal error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

void sub_2185DA764(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_saved", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 227, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DA874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(in_memory)", 12);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 228, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DA9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"offset.empty()", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 229, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"data.empty()", 12);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 230, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DACF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(_DWORD *)(*(_QWORD *)(*a3 + 72) + 4 * v20) < *(_DWORD *)(*(_QWORD *)(*a3 + 72) + 4 * *v9))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, a2 - 1, (uint64_t)a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t)a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t)a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, (uint64_t)a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, a2, (uint64_t)a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1, (uint64_t)a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t)a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1], (uint64_t)a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(_DWORD *)(*(_QWORD *)(*a3 + 72) + 4 * *(v9 - 1)) >= *(_DWORD *)(*(_QWORD *)(*a3 + 72) + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, (uint64_t)a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, (uint64_t)a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v9, v17, (uint64_t)a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(v17 + 1, a2, (uint64_t)a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *(_QWORD *)(*(_QWORD *)a3 + 72);
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(_DWORD *)(v5 + 4 * v7);
        if (v9 < *(_DWORD *)(v5 + 4 * v8))
        {
          v10 = v4;
          while (1)
          {
            *(uint64_t *)((char *)result + v10 + 8) = v8;
            if (!v10)
              break;
            v8 = *(uint64_t *)((char *)result + v10 - 8);
            v10 -= 8;
            if (v9 >= *(_DWORD *)(v5 + 4 * v8))
            {
              v11 = (uint64_t *)((char *)result + v10 + 8);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v7;
        }
        v3 = v6 + 1;
        v4 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(_QWORD *result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a3 + 72);
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(_DWORD *)(v4 + 4 * v5);
        if (v7 < *(_DWORD *)(v4 + 4 * v6))
        {
          v8 = result;
          do
          {
            *v8 = v6;
            v6 = *(v8 - 2);
            --v8;
          }
          while (v7 < *(_DWORD *)(v4 + 4 * v6));
          *v8 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 72);
  v7 = *(_DWORD *)(v6 + 4 * *a2);
  v8 = *(_DWORD *)(v6 + 4 * *a1);
  v9 = *a3;
  v10 = *(_DWORD *)(v6 + 4 * *a3);
  if (v7 < v8)
  {
    if (v10 < v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    if (*(_DWORD *)(v6 + 4 * *a3) >= v8)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v10 < v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a1;
    if (*(_DWORD *)(v6 + 4 * *a2) >= *(_DWORD *)(v6 + 4 * *a1))
      return 1;
    *a1 = *a2;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 72);
  v5 = *(_DWORD *)(v4 + 4 * *a1);
  if (v5 >= *(_DWORD *)(v4 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(_DWORD *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(_DWORD *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(_DWORD *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(_DWORD *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(_DWORD *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = 0;
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 72);
  v6 = *(_DWORD *)(v5 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(_DWORD *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(_DWORD *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(_DWORD *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = &a1[v3];
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v7;
      do
      {
        v15 = v13[1];
        ++v13;
        v7 = v15;
      }
      while (*(_DWORD *)(v5 + 4 * v15) < v6);
      do
      {
        v16 = *--v14;
        v12 = v16;
      }
      while (*(_DWORD *)(v5 + 4 * v16) >= v6);
    }
    while (v13 < v14);
    v9 = v13 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 72) + 4 * v8) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 72)
                                                                               + 4 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 72);
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(_DWORD *)(v13 + 4 * *v11);
    if (v17 < *(_DWORD *)(v13 + 4 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 >= *(_DWORD *)(v13 + 4 * v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 72);
  if (*(_DWORD *)(v12 + 4 * *a4) < *(_DWORD *)(v12 + 4 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(_DWORD *)(v12 + 4 * *a3) < *(_DWORD *)(v12 + 4 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(_DWORD *)(v12 + 4 * *a2) < *(_DWORD *)(v12 + 4 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 72);
  if (*(_DWORD *)(v14 + 4 * *a5) < *(_DWORD *)(v14 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v13;
    v15 = *a3;
    if (*(_DWORD *)(v14 + 4 * *a4) < *(_DWORD *)(v14 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v15;
      v16 = *a2;
      if (*(_DWORD *)(v14 + 4 * *a3) < *(_DWORD *)(v14 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        if (*(_DWORD *)(v14 + 4 * *a2) < *(_DWORD *)(v14 + 4 * *a1))
        {
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        if (*(_DWORD *)(*(_QWORD *)(*a4 + 72) + 4 * *v14) < *(_DWORD *)(*(_QWORD *)(*a4 + 72) + 4 * *a1))
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>((uint64_t)a1, (uint64_t)(v19 + 1), (uint64_t)a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *v8;
      if (v9 >= a3)
      {
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 72);
      }
      else
      {
        v11 = *(_QWORD *)(*(_QWORD *)a2 + 72);
        if (*(_DWORD *)(v11 + 4 * v10) < *(_DWORD *)(v11 + 4 * v8[1]))
        {
          v10 = v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      v13 = *(_DWORD *)(v11 + 4 * *a4);
      if (*(_DWORD *)(v11 + 4 * v10) >= v13)
      {
        do
        {
          v14 = v8;
          *a4 = v10;
          if (v5 < v7)
            break;
          v15 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 8 * v15);
          v16 = 2 * v7 + 2;
          v10 = *v8;
          if (v16 < a3 && *(_DWORD *)(v11 + 4 * v10) < *(_DWORD *)(v11 + 4 * v8[1]))
          {
            v10 = v8[1];
            ++v8;
            v15 = v16;
          }
          a4 = v14;
          v7 = v15;
        }
        while (*(_DWORD *)(v11 + 4 * v10) >= v13);
        *v14 = v12;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = &a1[v3];
    v10 = v7[1];
    v8 = v7 + 1;
    v9 = v10;
    v11 = (2 * v3) | 1;
    v12 = 2 * v3 + 2;
    if (v12 < a3 && *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * v9) < *(_DWORD *)(*(_QWORD *)(v6 + 72) + 4 * v8[1]))
    {
      v9 = v8[1];
      ++v8;
      v11 = v12;
    }
    *a1 = v9;
    a1 = v8;
    v3 = v11;
  }
  while (v11 <= v5);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::supervised::xgboost::SFrameSparsePage::load(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 72);
    v11 = *(_DWORD *)(v10 + 4 * v9);
    if (*(_DWORD *)(v10 + 4 * *v5) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(_DWORD *)(v10 + 4 * *v5) < v11);
      *v12 = v8;
    }
  }
  return result;
}

void turi::supervised::xgboost::ColBatchIter::Value(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_inited", 9);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 426, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::ColBatchIter::Value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DBB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::ColBatchIter::Clear(turi::supervised::xgboost::ColBatchIter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 11);
  while (v2 != v3)
    v2 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 - 16);
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  v5 = *((_QWORD *)this + 8);
  for (i = *((_QWORD *)this + 9);
        i != v5;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)this + 80, i))
  {
    i -= 408;
  }
  *((_QWORD *)this + 9) = v5;
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"std::all_of(enabled.begin(), enabled.end(), [](BOOL x) { return x; })",
         69);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "operator()", 544, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised::xgboost::DiskPagedFMatrix::InitColAccess(std::vector<BOOL> const&,float,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2185DBDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised::xgboost::DiskPagedFMatrix::InitColData(std::vector<unsigned int> *this, float a2)
{
  std::vector<unsigned int> *v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v24;
  std::vector<unsigned int>::pointer begin;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<unsigned int>::pointer v36;
  unint64_t v37;
  uint64_t v38;
  std::vector<unsigned int>::pointer v39;
  _QWORD *exception;
  void *v41[3];
  __int128 v42;
  unsigned int *v43;
  std::locale v44[2];
  void *v45[2];
  __int128 v46;
  void *v47[2];
  void *__p[2];
  __int128 v49;
  _BYTE v50[304];
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = this + 1;
  this[1].__end_ = this[1].__begin_;
  std::vector<int>::reserve(this + 1, *(_QWORD *)this->__end_);
  this[2].__end_cap_.__value_ = this[2].__end_;
  v5 = *((_QWORD *)this->__end_ + 1);
  v44[0].__locale_ = 0;
  std::vector<unsigned long>::resize((uint64_t)&this[2].__end_, v5, v44);
  v42 = 0uLL;
  v43 = 0;
  (*(void (**)(unsigned int *))(*(_QWORD *)this->__end_cap_.__value_ + 16))(this->__end_cap_.__value_);
  v6 = 0;
  while ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)this->__end_cap_.__value_ + 24))(this->__end_cap_.__value_))
  {
    v7 = (int *)global_logger();
    ++v6;
    if (v7[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v7))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning/xgboost_iterator.cpp", "InitColData", 613, 1);
      v10 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v10 && *((_BYTE *)v10 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Create disk column page ", 24);
      v11 = file_logger::operator<<<unsigned long>((uint64_t)started);
      v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
      if (v12 && *((_BYTE *)v12 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"/", 1);
      v13 = file_logger::operator<<<unsigned long>(v11);
      v14 = pthread_getspecific(*(_QWORD *)(v13 + 592));
      if (v14)
      {
        if (*((_BYTE *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
          v15 = std::locale::use_facet(v44, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(v44);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v13);
          if (*(_DWORD *)(v13 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v16 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this->__end_cap_.__value_ + 32))(this->__end_cap_.__value_);
    v17 = v16[1];
    turi::dense_bitset::dense_bitset((turi::dense_bitset *)v41, *v16);
    if (*v16)
    {
      v18 = 0;
      do
      {
        if (a2 == 1.0 || (double)rand() * 4.65661287e-10 < a2)
        {
          v19 = (unint64_t *)((char *)v41[0] + 8 * (v18 >> 6));
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 | (1 << v18), v19));
          v21 = v18 + v17;
          end = this[1].__end_;
          value = this[1].__end_cap_.__value_;
          if (end >= value)
          {
            begin = v4->__begin_;
            v26 = end - v4->__begin_;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v28 = (char *)value - (char *)begin;
            if (v28 >> 1 > v27)
              v27 = v28 >> 1;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&this[1].__end_cap_, v29);
              begin = this[1].__begin_;
              end = this[1].__end_;
            }
            else
            {
              v30 = 0;
            }
            v31 = (unsigned int *)&v30[4 * v26];
            *v31 = v21;
            v24 = v31 + 1;
            while (end != begin)
            {
              v32 = *--end;
              *--v31 = v32;
            }
            this[1].__begin_ = v31;
            this[1].__end_ = v24;
            this[1].__end_cap_.__value_ = (unsigned int *)&v30[4 * v29];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *end = v21;
            v24 = end + 1;
          }
          this[1].__end_ = v24;
        }
        ++v18;
      }
      while (v18 < *v16);
    }
    v51 = 0;
    v49 = 0u;
    memset(v50, 0, sizeof(v50));
    *(_OWORD *)v47 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v45 = 0u;
    v46 = 0u;
    *(_OWORD *)&v44[0].__locale_ = 0u;
    v50[0] = 1;
    turi::sframe::sframe((turi::sframe *)&v50[8]);
    LOBYTE(v51) = 0;
    v33 = *((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1) >= (unint64_t)v43)
    {
      v34 = std::vector<turi::supervised::xgboost::SFrameSparsePage>::__push_back_slow_path<turi::supervised::xgboost::SFrameSparsePage>((uint64_t *)&v42, (uint64_t)v44);
    }
    else
    {
      turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(*((uint64_t *)&v42 + 1), (uint64_t)v44);
      v34 = v33 + 408;
    }
    *((_QWORD *)&v42 + 1) = v34;
    turi::sframe::~sframe((turi::sframe *)&v50[8]);
    if (__p[1])
    {
      *(void **)&v49 = __p[1];
      operator delete(__p[1]);
    }
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    if (v45[1])
    {
      *(void **)&v46 = v45[1];
      operator delete(v45[1]);
    }
    if (v44[0].__locale_)
    {
      v44[1] = v44[0];
      operator delete(v44[0].__locale_);
    }
    v35 = *((_QWORD *)&v42 + 1);
    turi::supervised::xgboost::MakeColPage((turi::thread *)v16, (turi::supervised::xgboost::SFrameSparsePage **)v41, *((_QWORD *)this->__end_ + 1), (turi::supervised::xgboost::SFrameSparsePage *)(*((_QWORD *)&v42 + 1) - 408));
    v36 = this->__end_;
    if (*((_QWORD *)v36 + 1))
    {
      v37 = 0;
      v38 = *(_QWORD *)(v35 - 384);
      v39 = this[2].__end_;
      do
      {
        *(_QWORD *)&v39[2 * v37] += *(_QWORD *)(v38 + 8 * v37 + 8) - *(_QWORD *)(v38 + 8 * v37);
        ++v37;
      }
      while (v37 < *((_QWORD *)v36 + 1));
    }
    free(v41[0]);
  }
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__vdeallocate((void **)&this[7].__begin_);
  *(_OWORD *)&this[7].__begin_ = v42;
  this[7].__end_cap_.__value_ = v43;
  v43 = 0;
  v42 = 0uLL;
  LOBYTE(this[4].__end_cap_.__value_) = 1;
  this[2].__begin_ = (std::vector<unsigned int>::pointer)(this[1].__end_ - this[1].__begin_);
  v44[0].__locale_ = (std::locale::__imp *)&v42;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
}

void sub_2185DC37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  a12 = &a15;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::supervised::xgboost::SFrameSparsePage>::__push_back_slow_path<turi::supervised::xgboost::SFrameSparsePage>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x50505050505050)
    v9 = 0xA0A0A0A0A0A0A0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[408 * v4];
  v16 = &v10[408 * v9];
  turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage((uint64_t)v14, a2);
  v15 = v14 + 408;
  std::vector<turi::supervised::xgboost::SFrameSparsePage>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer(&v13);
  return v11;
}

void sub_2185DC548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  turi::sframe::sframe((turi::sframe *)(a1 + 104), a2 + 104);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  return a1;
}

void sub_2185DC638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::supervised::xgboost::SFrameSparsePage>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>((uint64_t)(a1 + 2), a1[1], (const turi::supervised::xgboost::SFrameSparsePage *)a1[1], *a1, (const turi::supervised::xgboost::SFrameSparsePage *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(408 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>(uint64_t a1, uint64_t a2, const turi::supervised::xgboost::SFrameSparsePage *a3, uint64_t a4, const turi::supervised::xgboost::SFrameSparsePage *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const turi::supervised::xgboost::SFrameSparsePage *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const turi::supervised::xgboost::SFrameSparsePage *)((char *)v9 - 408);
      turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage((turi::supervised::xgboost::SFrameSparsePage *)(v7 - 408), v9);
      v7 = *((_QWORD *)&v15 + 1) - 408;
      *((_QWORD *)&v15 + 1) -= 408;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_2185DC7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

turi::supervised::xgboost::SFrameSparsePage *turi::supervised::xgboost::SFrameSparsePage::SFrameSparsePage(turi::supervised::xgboost::SFrameSparsePage *this, const turi::supervised::xgboost::SFrameSparsePage *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  turi::sframe::sframe((turi::supervised::xgboost::SFrameSparsePage *)((char *)this + 104), (const turi::supervised::xgboost::SFrameSparsePage *)((char *)a2 + 104));
  *((_BYTE *)this + 400) = *((_BYTE *)a2 + 400);
  return this;
}

void sub_2185DC8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::supervised::xgboost::SFrameSparsePage>,std::reverse_iterator<turi::supervised::xgboost::SFrameSparsePage*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](v3, v1);
      v1 += 408;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::supervised::xgboost::SFrameSparsePage>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 408;
    std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100](v4, i - 408);
  }
}

void std::vector<turi::supervised::xgboost::SFrameSparsePage>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 408;
        std::allocator<turi::supervised::xgboost::SFrameSparsePage>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_0 const&)::{lambda(void)#1},void>::invoke(_QWORD *tls_data)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = tls_data[1];
  if (v1 < tls_data[2])
  {
    v2 = tls_data;
    do
    {
      v3 = (_QWORD **)*v2;
      if (((*(_QWORD *)(**(_QWORD **)*v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1) & 1) != 0)
      {
        tls_data = turi::thread::get_tls_data((turi::thread *)tls_data);
        v4 = v3[1];
        v5 = v4[2];
        v6 = *(_QWORD *)(v5 + 8 * v1++);
        v7 = *(_QWORD *)(v5 + 8 * v1);
        v8 = (v7 - v6);
        if ((_DWORD)v7 != (_DWORD)v6)
        {
          v9 = (unsigned int *)(v4[3] + 8 * v6);
          v10 = *(_DWORD *)tls_data;
          do
          {
            v12 = *v9;
            v9 += 2;
            v11 = v12;
            v13 = (uint64_t *)(*(_QWORD *)v3[2][2] + 24 * v10);
            v14 = *v13;
            if (v12 >= (unint64_t)((v13[1] - *v13) >> 3))
            {
              v15 = 0;
              std::vector<unsigned long>::resize((uint64_t)v13, v11 + 1, &v15);
              v14 = *v13;
            }
            ++*(_QWORD *)(v14 + 8 * v11);
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        ++v1;
      }
    }
    while (v1 < v2[2]);
  }
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

_QWORD *boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_1 const&)::{lambda(void)#1},void>::invoke(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;

  v1 = result[1];
  if (v1 < result[2])
  {
    v2 = result;
    do
    {
      v3 = (_QWORD **)*v2;
      if (((*(_QWORD *)(**(_QWORD **)*v2 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1) & 1) != 0)
      {
        result = turi::thread::get_tls_data((turi::thread *)result);
        v4 = v3[1];
        v5 = v4[2];
        v6 = *(_QWORD *)(v5 + 8 * v1);
        v7 = v1 + 1;
        v8 = *(_QWORD *)(v5 + 8 * (v1 + 1)) - v6;
        if ((_DWORD)v8)
        {
          v9 = v4[3];
          v10 = v3[3];
          v11 = *(_QWORD *)(*(_QWORD *)v3[2][2] + 24 * *(int *)result);
          v12 = *(_QWORD *)v3[2][1];
          v13 = (int *)(v9 + 8 * v6 + 4);
          do
          {
            v14 = *(v13 - 1);
            v15 = *v10 + v1;
            v16 = *(_QWORD *)(v11 + 8 * v14);
            *(_QWORD *)(v11 + 8 * v14) = v16 + 1;
            v17 = *v13;
            v13 += 2;
            v18 = (_DWORD *)(v12 + 8 * v16);
            *v18 = v15;
            v18[1] = v17;
            --v8;
          }
          while (v8);
        }
      }
      else
      {
        v7 = v1 + 1;
      }
      v1 = v7;
    }
    while (v7 < v2[2]);
  }
  return result;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8Row"
                                        "BatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_10supervised7xgboost11MakeColPageERKN11xgboost_old8RowBatchERNS_12dense_bitsetEmPNS2_16SFrameSparsePageEE3$_2EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2>(unsigned long,unsigned long,turi::supervised::xgboost::MakeColPage(xgboost_old::RowBatch const&,turi::dense_bitset &,unsigned long,turi::supervised::xgboost::SFrameSparsePage *)::$_2 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL (*v11)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v2 < v1)
  {
    v3 = result;
    do
    {
      v4 = ***(_QWORD ****)v3;
      v5 = (unint64_t *)(*v4 + 8 * v2);
      v6 = *v5;
      v7 = v5[1];
      if (v6 < v7)
      {
        v9 = v4 + 6;
        v8 = v4[6];
        if (v9[1] == v8)
          v10 = 0;
        else
          v10 = v8;
        v11 = xgboost_old::SparseBatch::Entry::CmpValue;
        result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(xgboost_old::SparseBatch::Entry const&,xgboost_old::SparseBatch::Entry const&),xgboost_old::SparseBatch::Entry*,false>(v10 + 8 * v6, (uint64_t *)(v10 + 8 * v7), (uint64_t (**)(uint64_t *, uint64_t *))&v11, 126 - 2 * __clz((uint64_t)(8 * v7 - 8 * v6) >> 3), 1);
        v1 = *(_QWORD *)(v3 + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

void std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D94AF80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D94AF80;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  double v13;
  BOOL v14;
  _QWORD *v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE v26[128];
  uint64_t v27;
  unsigned __int8 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 24);
  v39 = 0;
  turi::ml_data::get_iterator(*(turi::ml_data **)(a1 + 8), v4, v5, (uint64_t)v26);
  v7 = v32;
  if (v32 != v31)
  {
    v8 = (_QWORD *)(v6 + 80);
    v9 = (_QWORD *)(v6 + 128);
    do
    {
      v10 = *(unsigned __int8 *)(v34 + 17);
      if (!**(_BYTE **)(a1 + 16))
      {
        v13 = 1.0;
        if (*(_BYTE *)(v34 + 16))
          v14 = v10 == 0;
        else
          v14 = 0;
        if (v14)
        {
          v15 = (_QWORD *)(v34 + 24);
          if (!*(_BYTE *)(v34 + 18))
            v15 = (_QWORD *)(*(_QWORD *)(v34 + 96) + 8 * v35);
          v13 = *(double *)(*(_QWORD *)(v34 + 96) + 8 * v35 + 8 * *v15 - 8);
        }
        v16 = v13;
        v17 = v7 - v38;
        v18 = v8;
        goto LABEL_31;
      }
      if (*(_BYTE *)(v34 + 16))
        v11 = v10 == 0;
      else
        v11 = 1;
      if (v11)
      {
        v12 = 0;
      }
      else
      {
        v19 = (_QWORD *)(v34 + 24);
        if (!*(_BYTE *)(v34 + 18))
          v19 = (_QWORD *)(*(_QWORD *)(v34 + 96) + 8 * v35);
        v12 = *(_QWORD *)(*(_QWORD *)(v34 + 96) + 8 * v35 + 8 * *v19 - 8);
      }
      v39 = v12;
      v17 = v7 - v38;
      *(float *)(*v8 + 4 * (v7 - v38)) = (float)v12;
      if (**(_BYTE **)(a1 + 32))
      {
        v20 = *(_QWORD *)(a1 + 40);
        v21 = *(_QWORD **)(v20 + 8);
        v16 = 1.0;
        if (!v21)
          goto LABEL_30;
        while (1)
        {
          v22 = v21[4];
          if (v12 >= v22)
          {
            if (v22 >= v12)
            {
              v16 = *(float *)std::map<unsigned long,turi::flexible_type>::at(v20, &v39);
              v7 = v32;
              v17 = v32 - v38;
LABEL_30:
              v18 = v9;
LABEL_31:
              *(float *)(*v18 + 4 * v17) = v16;
              break;
            }
            ++v21;
          }
          v21 = (_QWORD *)*v21;
          if (!v21)
            goto LABEL_30;
        }
      }
      if (v37 | v28)
      {
        v23 = (uint64_t *)(*(_QWORD *)(v34 + 96) + 8 * v35);
        if (v29)
          v23 = &v30;
        v35 += *v23;
      }
      ++v7;
      v24 = v31;
      v32 = v7;
      v36 = v7 - v27 * v33;
      if (v36 == v27 && v7 != v31)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v26);
        v24 = v31;
        v7 = v32;
      }
    }
    while (v7 != v24);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v26);
}

void sub_2185DD1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0,std::allocator<turi::supervised::xgboost::DMatrixMLData::DMatrixMLData(turi::ml_data const&,turi::flexible_type,turi::supervised::xgboost::storage_mode_enum,unsigned long)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void __cxx_global_var_init_21_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_xgboost_iterator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::model_base *turi::model_base::model_base(turi::model_base *this, const turi::model_base *a2)
{
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24D941790;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t *)this + 4, (const void ***)a2 + 4);
  std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::map[abi:ne180100]((uint64_t *)this + 7, (const void ***)a2 + 7);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 10, (const void ***)a2 + 10);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 13, (const void ***)a2 + 13);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 128), *((__int128 **)a2 + 16), *((__int128 **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3));
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100]((uint64_t *)this + 19, (const void ***)a2 + 19);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 176), *((__int128 **)a2 + 22), *((__int128 **)a2 + 23), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 25, (const void ***)a2 + 25);
  return this;
}

void sub_2185DD498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  cppipc::ipc_object_base *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v7, *((_QWORD **)v2 + 20));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v6, *((_QWORD **)v2 + 14));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v5, *((_QWORD **)v2 + 11));
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(v4, *((_QWORD **)v2 + 8));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v3, *((_QWORD **)v2 + 5));
  cppipc::ipc_object_base::~ipc_object_base(v2);
  _Unwind_Resume(a1);
}

void sub_2185DD520()
{
  JUMPOUT(0x2185DD4F8);
}

void sub_2185DD528()
{
  JUMPOUT(0x2185DD504);
}

void sub_2185DD530()
{
  JUMPOUT(0x2185DD510);
}

uint64_t *std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2185DD574(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::string>>,std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2185DD6E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2185DD84C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<void ()(std::map<std::string,turi::aggregate::groupby_descriptor_type> &,char const*,char const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void sub_2185DDAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_50_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_51_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4FC8 = 0;
    unk_254FD4FB8 = 0u;
    unk_254FD4FA8 = 0u;
    unk_254FD4F98 = 0u;
    unk_254FD4F88 = 0u;
    qword_254FD4F80 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_alias_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)401>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _BOOL8 v5;
  uint64_t *v6;
  _BOOL8 v7;
  uint64_t *v8;
  CoreML *v9;
  int v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  int v32;
  int v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  int v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  _BYTE __p[24];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v53);
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), (uint64_t)__p);
  v53 = *(_QWORD *)__p;
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  v54 = *(_OWORD *)&__p[8];
  v55 = v52;
  v5 = CoreML::Result::good((CoreML::Result *)&v53);
  if (!v5)
    goto LABEL_60;
  if (*(_DWORD *)(a1 + 44) == 401)
    v6 = *(uint64_t **)(a1 + 32);
  else
    v6 = CoreML::Specification::SupportVectorClassifier::default_instance((CoreML::Specification::SupportVectorClassifier *)v5);
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::SupportVectorClassifier>(a1, (uint64_t)v6, 0, 0, (uint64_t)__p);
  v53 = *(_QWORD *)__p;
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  v54 = *(_OWORD *)&__p[8];
  v55 = v52;
  v7 = CoreML::Result::good((CoreML::Result *)&v53);
  if (!v7)
    goto LABEL_60;
  if (*(_DWORD *)(a1 + 44) == 401)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::SupportVectorClassifier::default_instance((CoreML::Specification::SupportVectorClassifier *)v7);
  if (v8[17])
    v9 = (CoreML *)v8[17];
  else
    v9 = (CoreML *)&CoreML::Specification::_Kernel_default_instance_;
  CoreML::validateKernel(v9, (CoreML::Result *)__p);
  v53 = *(_QWORD *)__p;
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
  v54 = *(_OWORD *)&__p[8];
  v55 = v52;
  if (!CoreML::Result::good((CoreML::Result *)&v53))
    goto LABEL_60;
  v10 = *((_DWORD *)v8 + 42);
  switch(v10)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(__p, "Int64 class labels must be supplied for SVM classifier.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_51:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_61;
      v30 = *(void **)__p;
      goto LABEL_92;
    case 100:
      v11 = (int *)(v8[19] + 24);
      goto LABEL_27;
    case 101:
      v11 = (int *)(v8[19] + 16);
LABEL_27:
      v12 = *v11;
      goto LABEL_30;
  }
  v12 = 0;
LABEL_30:
  v13 = *((unsigned int *)v8 + 12);
  if ((_DWORD)v13 != v12 - 1)
  {
    std::to_string(&v48, v12 - 1);
    v20 = std::string::insert(&v48, 0, "coefficient array must be size numberOfClasses - 1 (");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v49, "). Instead it is size ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *((_DWORD *)v8 + 12));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v47;
    else
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
    goto LABEL_82;
  }
  v14 = *((_DWORD *)v8 + 41);
  if (v14 != 4 && v14 != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Must specify sparse or dense support vectors");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_51;
  }
  if (*((_DWORD *)v8 + 4) != v12)
  {
    std::to_string(&v48, v12);
    v26 = std::string::insert(&v48, 0, "numberOfSupportVectoresPerClass array must be size numberOfClasses ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v49, " instead it is size ");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *((_DWORD *)v8 + 4));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v47;
    else
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
    goto LABEL_82;
  }
  v15 = *(_DWORD *)(v8[18] + 24);
  if (v12 < 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = v12;
    v18 = (int *)(v8[3] + 8);
    do
    {
      v19 = *v18++;
      v16 += v19;
      --v17;
    }
    while (v17);
  }
  if (v15 != v16)
  {
    std::to_string(&v48, v16);
    v34 = std::string::insert(&v48, 0, "sum of numberOfSupportVectorsPerClass ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v49, " must sum to total number of support vectors ");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, v15);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v47;
    else
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
    goto LABEL_82;
  }
  if (v12 >= 2)
  {
    v31 = 0;
    while (*(_DWORD *)(*(_QWORD *)(v8[7] + 8 + 8 * v31) + 16) == v15)
    {
      if (v13 == ++v31)
        goto LABEL_59;
    }
    std::to_string(&v48, *(_DWORD *)(v8[18] + 24));
    v41 = std::string::insert(&v48, 0, "Incorrect number of coefficients: There should be ");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    v43 = std::string::append(&v49, " not ");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, *(_DWORD *)(*(_QWORD *)(v8[7] + 8 * v31 + 8) + 16));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v47;
    else
      v24 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      size = v47.__r_.__value_.__l.__size_;
LABEL_82:
    v45 = std::string::append(&v50, (const std::string::value_type *)v24, size);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v45->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      v30 = (void *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_92;
    }
    goto LABEL_61;
  }
LABEL_59:
  v32 = *((_DWORD *)v8 + 22);
  v33 = *((_DWORD *)v8 + 28);
  if (!(v32 | v33))
  {
LABEL_60:
    *(_QWORD *)a2 = v53;
    *(_OWORD *)(a2 + 8) = v54;
    *(_QWORD *)(a2 + 24) = v55;
    v54 = 0uLL;
    v55 = 0;
    goto LABEL_61;
  }
  v38 = v13 * v12 + ((int)v13 * v12 < 0);
  if (v32 != v33)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "probA and probB must be same size");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_51;
  }
  if (v32 == v38 >> 1)
    goto LABEL_60;
  std::to_string(&v50, v38 >> 1);
  v39 = std::string::insert(&v50, 0, "Expected length of probA is number of class pairs: ");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v39->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    v30 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_92:
    operator delete(v30);
  }
LABEL_61:
  if (SHIBYTE(v55) < 0)
    operator delete((void *)v54);
}

void sub_2185DE3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v40 - 49) < 0)
    operator delete(*(void **)(v40 - 72));
  _Unwind_Resume(exception_object);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::SupportVectorClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  CoreML *v9;
  void *v10;
  void *__p;
  __int128 v12;
  uint64_t v13;

  v7 = *(_DWORD *)(a2 + 168);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(_QWORD *)(a1 + 16))
      v9 = *(CoreML **)(a1 + 16);
    else
      v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(_QWORD *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(_QWORD *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
    v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 152) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 152) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return;
  v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_2185DE6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateKernel(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      goto LABEL_12;
    case 2:
      v4 = (uint64_t *)*((_QWORD *)this + 2);
      goto LABEL_10;
    case 3:
      v5 = *((_QWORD *)this + 2);
      if (*(double *)(v5 + 24) < 0.0)
        goto LABEL_11;
      if ((*(_DWORD *)(v5 + 32) & 0x80000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "Degree must be greater than or equal to zero");
        CoreML::Result::Result(a2, 13);
      }
      else
      {
        v4 = CoreML::Specification::RBFKernel::default_instance(this);
LABEL_10:
        if (*((double *)v4 + 2) >= 0.0)
        {
LABEL_12:
          CoreML::Result::Result(a2);
          return;
        }
LABEL_11:
        std::string::basic_string[abi:ne180100]<0>(__p, "Gamma must be greater than or equal to zero");
        CoreML::Result::Result(a2, 13);
      }
LABEL_14:
      if (v7 < 0)
        operator delete(__p[0]);
      return;
    case 4:
      if (*(double *)(*((_QWORD *)this + 2) + 16) < 0.0)
        goto LABEL_11;
      goto LABEL_12;
    default:
      std::string::basic_string[abi:ne180100]<0>(__p, "You must specify a supported kernel type");
      CoreML::Result::Result(a2, 13);
      goto LABEL_14;
  }
}

void sub_2185DE870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::validate<(MLModelType)301>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  _BOOL8 v5;
  uint64_t *v6;
  CoreML *v7;
  int v8;
  uint64_t *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __int128 __p;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)&v13);
  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, (uint64_t)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  __p = v11;
  v15 = v12;
  if (!CoreML::Result::good((CoreML::Result *)&v13))
    goto LABEL_24;
  CoreML::validateRegressorInterface(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  __p = v11;
  v15 = v12;
  v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (!v5)
    goto LABEL_24;
  if (*(_DWORD *)(a1 + 44) == 301)
    v6 = *(uint64_t **)(a1 + 32);
  else
    v6 = CoreML::Specification::SupportVectorRegressor::default_instance((CoreML::Specification::SupportVectorRegressor *)v5);
  if (v6[2])
    v7 = (CoreML *)v6[2];
  else
    v7 = (CoreML *)&CoreML::Specification::_Kernel_default_instance_;
  CoreML::validateKernel(v7, (CoreML::Result *)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  __p = v11;
  v15 = v12;
  if (!CoreML::Result::good((CoreML::Result *)&v13))
    goto LABEL_24;
  v8 = *((_DWORD *)v6 + 13);
  if (v8 == 3 || v8 == 2)
  {
    v9 = (uint64_t *)v6[3];
    if (!v9)
      v9 = &CoreML::Specification::_Coefficients_default_instance_;
    if (*((_DWORD *)v9 + 4) == *(_DWORD *)(v6[5] + 24))
    {
LABEL_24:
      *(_QWORD *)a2 = v13;
      *(_OWORD *)(a2 + 8) = __p;
      *(_QWORD *)(a2 + 24) = v15;
      __p = 0uLL;
      v15 = 0;
      goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "The number of coefficients must match the number of support vectors.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Must specify sparse or dense support vectors");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
LABEL_25:
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
}

void sub_2185DEAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SVMValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_45_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void __cxx_global_var_init_46_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD4FC8 = 0;
    unk_254FD4FB8 = 0u;
    unk_254FD4FA8 = 0u;
    unk_254FD4F98 = 0u;
    unk_254FD4F88 = 0u;
    qword_254FD4F80 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<std::vector<unsigned long>>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_cgs_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DF08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_7_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_17()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DF394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_perplexity_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *turi::any::get_global_registry(turi::any *this)
{
  unsigned __int8 v1;

  {
    qword_254FF5868 = 0;
    qword_254FF5860 = 0;
    turi::any::get_global_registry(void)::global_registry = (uint64_t)&qword_254FF5860;
    __cxa_atexit((void (*)(void *))std::map<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>::~map[abi:ne180100], &turi::any::get_global_registry(void)::global_registry, &dword_217E69000);
  }
  return &turi::any::get_global_registry(void)::global_registry;
}

uint64_t std::map<unsigned long long,turi::any::iholder * (*)(turi::iarchive_soft_fail &)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t _GLOBAL__sub_I_any_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DF77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_11_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_topic_model_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DFA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_42()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_unity_text_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_18()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185DFDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_19_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_data_generators_cpp()
{
  uint64_t i;
  _BYTE v2[40];
  _QWORD v3[5];
  _QWORD v4[5];
  _QWORD v5[3];
  _QWORD v6[2];
  _QWORD v7[4];
  int v8;
  char v9;
  _QWORD v10[4];
  int v11;
  char v12;
  _QWORD v13[4];
  int v14;
  char v15;
  _QWORD v16[4];
  int v17;
  char v18;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "random_seed");
  memset(&v2[24], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v3, "n_factors");
  memset(&v3[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v4, "only_2_factor_terms");
  memset(&v4[3], 0, 13);
  std::string::basic_string[abi:ne180100]<0>(v5, "nmf");
  *(_QWORD *)((char *)v6 + 5) = 0;
  v6[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "noise_sd");
  v9 = 0;
  v8 = 0;
  v7[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v10, "w0_sd");
  v12 = 0;
  v11 = 0;
  v10[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v13, "w_sd");
  v15 = 0;
  v14 = 0;
  v13[3] = 1;
  std::string::basic_string[abi:ne180100]<0>(v16, "V_sd");
  v18 = 0;
  v17 = 0;
  v16[3] = 1;
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v19, "y_mode", "squared_error");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::recsys::default_options, (std::string *)v2, 9);
  for (i = 320; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v2[i]);
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::recsys::default_options, &dword_217E69000);
}

void sub_2185E0118(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 320; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *turi::indexed_column_groupby::indexed_column_groupby(_QWORD *a1, uint64_t *a2, uint64_t *a3, char a4, int a5)
{
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  char *v17;
  uint64_t v18;
  double v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  double v28;
  char *v29;
  uint64_t v30;
  double v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  uint64_t *v38;
  unint64_t v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *result;
  std::runtime_error *v62;
  std::string *v63;
  __int128 v64;
  std::runtime_error *exception;
  std::string *v66;
  __int128 v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::string __p;
  std::string::size_type v76;
  void *v77;
  void *v78;
  std::string v79;
  size_t __idx;
  _QWORD v81[6];
  _QWORD v82[2];
  double v83;
  char v84;
  _QWORD v85[6];
  _QWORD v86[2];
  double v87;
  char v88;
  uint64_t v89;
  uint64_t __src;
  unsigned int *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  v9 = a1 + 4;
  a1[3] = a1 + 4;
  v10 = (uint64_t **)(a1 + 3);
  a1[5] = 0;
  v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 24))(*a2);
  turi::sarray<turi::flexible_type>::get_reader(*a2, &v74);
  v68 = a5;
  turi::sarray<turi::flexible_type>::get_reader(*a3, &v73);
  if (v70)
  {
    v11 = 0;
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v74 + 32))(v86, v74, v11);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v74 + 40))(v85, v74, v11);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v73 + 32))(v82, v73, v11);
      v71 = v11;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v73 + 40))(v81, v73, v11);
      while (v86[0] != v85[0] || v86[1] != v85[1] || v89 != v85[4])
      {
        v72 = 0;
        v12 = 0;
        switch(v88)
        {
          case 0:
            v12 = *(_QWORD *)&v87;
            goto LABEL_35;
          case 1:
            v12 = (uint64_t)v87;
            goto LABEL_35;
          case 2:
            v16 = v87;
            __idx = 0;
            v17 = (char *)(*(_QWORD *)&v87 + 8);
            if (*(char *)(*(_QWORD *)&v87 + 31) < 0)
              v17 = *(char **)(*(_QWORD *)&v87 + 8);
            std::string::basic_string[abi:ne180100]<0>(&__p, v17);
            v12 = std::stoll(&__p, &__idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (*(char *)(*(_QWORD *)&v16 + 31) < 0)
              v18 = *(_QWORD *)(*(_QWORD *)&v16 + 16);
            else
              v18 = *(unsigned __int8 *)(*(_QWORD *)&v16 + 31);
            if (__idx != v18)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v66 = std::string::append(&v79, " cannot be interpreted as an integer");
              v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v67;
              v66->__r_.__value_.__l.__size_ = 0;
              v66->__r_.__value_.__r.__words[2] = 0;
              v66->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_35;
          case 3:
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(*(_QWORD *)&v87 + 8), *(_QWORD *)(*(_QWORD *)&v87 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v87 + 16) - *(_QWORD *)(*(_QWORD *)&v87 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_34;
          case 4:
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(*(_QWORD *)&v87 + 8), *(uint64_t **)(*(_QWORD *)&v87 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v87 + 16) - *(_QWORD *)(*(_QWORD *)&v87 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
            goto LABEL_34;
          case 5:
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(*(_QWORD *)&v87 + 8), *(uint64_t **)(*(_QWORD *)&v87 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v87 + 16) - *(_QWORD *)(*(_QWORD *)&v87 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
            goto LABEL_34;
          case 6:
            v12 = (uint64_t)(*(_QWORD *)&v87 << 8) >> 8;
            goto LABEL_35;
          case 7:
            goto LABEL_35;
          case 8:
            v19 = v87;
            v20 = *(unsigned int **)(*(_QWORD *)&v87 + 16);
            __src = *(_QWORD *)(*(_QWORD *)&v87 + 8);
            v91 = v20;
            if (v20)
            {
              v21 = v20 + 2;
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            v23 = *(_OWORD *)(*(_QWORD *)&v19 + 24);
            v24 = *(_OWORD *)(*(_QWORD *)&v19 + 56);
            v93 = *(_OWORD *)(*(_QWORD *)&v19 + 40);
            v94 = v24;
            v92 = v23;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v91);
            goto LABEL_34;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)&v87 + 8);
            turi::flexible_type_fail(0);
            if (v77)
            {
              v78 = v77;
              operator delete(v77);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v76 = __p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
LABEL_34:
            v12 = 0;
LABEL_35:
            v72 = v12;
            v25 = 0;
            switch(v84)
            {
              case 0:
                v25 = *(_QWORD *)&v83;
                goto LABEL_63;
              case 1:
                v25 = (uint64_t)v83;
                goto LABEL_63;
              case 2:
                v28 = v83;
                __idx = 0;
                v29 = (char *)(*(_QWORD *)&v83 + 8);
                if (*(char *)(*(_QWORD *)&v83 + 31) < 0)
                  v29 = *(char **)(*(_QWORD *)&v83 + 8);
                std::string::basic_string[abi:ne180100]<0>(&__p, v29);
                v25 = std::stoll(&__p, &__idx, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (*(char *)(*(_QWORD *)&v28 + 31) < 0)
                  v30 = *(_QWORD *)(*(_QWORD *)&v28 + 16);
                else
                  v30 = *(unsigned __int8 *)(*(_QWORD *)&v28 + 31);
                if (__idx != v30)
                {
                  v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v63 = std::string::append(&v79, " cannot be interpreted as an integer");
                  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v64;
                  v63->__r_.__value_.__l.__size_ = 0;
                  v63->__r_.__value_.__r.__words[2] = 0;
                  v63->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v62, &__p);
                  __cxa_throw(v62, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_63;
              case 3:
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(*(_QWORD *)&v83 + 8), *(_QWORD *)(*(_QWORD *)&v83 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v83 + 16) - *(_QWORD *)(*(_QWORD *)&v83 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_62;
              case 4:
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(*(_QWORD *)&v83 + 8), *(uint64_t **)(*(_QWORD *)&v83 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v83 + 16) - *(_QWORD *)(*(_QWORD *)&v83 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
                goto LABEL_62;
              case 5:
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(*(_QWORD *)&v83 + 8), *(uint64_t **)(*(_QWORD *)&v83 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v83 + 16) - *(_QWORD *)(*(_QWORD *)&v83 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
                goto LABEL_62;
              case 6:
                v25 = (uint64_t)(*(_QWORD *)&v83 << 8) >> 8;
                goto LABEL_63;
              case 7:
                goto LABEL_63;
              case 8:
                v31 = v83;
                v32 = *(unsigned int **)(*(_QWORD *)&v83 + 16);
                __src = *(_QWORD *)(*(_QWORD *)&v83 + 8);
                v91 = v32;
                if (v32)
                {
                  v33 = v32 + 2;
                  do
                    v34 = __ldxr(v33);
                  while (__stxr(v34 + 1, v33));
                }
                v35 = *(_OWORD *)(*(_QWORD *)&v31 + 24);
                v36 = *(_OWORD *)(*(_QWORD *)&v31 + 56);
                v93 = *(_OWORD *)(*(_QWORD *)&v31 + 40);
                v94 = v36;
                v92 = v35;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v91);
                goto LABEL_62;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(_QWORD *)&v83 + 8);
                turi::flexible_type_fail(0);
                if (v77)
                {
                  v78 = v77;
                  operator delete(v77);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v76 = __p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                v25 = __p.__r_.__value_.__l.__size_;
                if (!__p.__r_.__value_.__l.__size_)
                  goto LABEL_63;
                v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
                }
LABEL_62:
                v25 = 0;
LABEL_63:
                v37 = (_QWORD *)*v9;
                if (!*v9)
                  goto LABEL_74;
                v38 = v9;
                do
                {
                  v39 = v37[4];
                  v40 = v39 >= v72;
                  if (v39 >= v72)
                    v41 = v37;
                  else
                    v41 = v37 + 1;
                  if (v40)
                    v38 = v37;
                  v37 = (_QWORD *)*v41;
                }
                while (*v41);
                if (v38 != v9 && v72 >= v38[4])
                {
                  v43 = v38[7];
                  v44 = (uint64_t *)v38[6];
                  if ((unint64_t)v44 >= v43)
                  {
                    v46 = (uint64_t *)v38[5];
                    v47 = v44 - v46;
                    if ((unint64_t)(v47 + 1) >> 61)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v48 = v43 - (_QWORD)v46;
                    v49 = (uint64_t)(v43 - (_QWORD)v46) >> 2;
                    if (v49 <= v47 + 1)
                      v49 = v47 + 1;
                    if (v48 >= 0x7FFFFFFFFFFFFFF8)
                      v50 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v50 = v49;
                    if (v50)
                    {
                      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v38 + 7), v50);
                      v46 = (uint64_t *)v38[5];
                      v44 = (uint64_t *)v38[6];
                    }
                    else
                    {
                      v51 = 0;
                    }
                    v52 = (uint64_t *)&v51[8 * v47];
                    *v52 = v25;
                    v45 = v52 + 1;
                    while (v44 != v46)
                    {
                      v53 = *--v44;
                      *--v52 = v53;
                    }
                    v38[5] = (uint64_t)v52;
                    v38[6] = (uint64_t)v45;
                    v38[7] = (uint64_t)&v51[8 * v50];
                    if (v46)
                      operator delete(v46);
                  }
                  else
                  {
                    *v44 = v25;
                    v45 = v44 + 1;
                  }
                  v38[6] = (uint64_t)v45;
                }
                else
                {
LABEL_74:
                  __src = v25;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
                  v42 = std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v10, &v72, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v42 + 40, (char *)&__src, (uint64_t)&v91, 1uLL);
                }
                turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v86);
                turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v82);
                break;
              default:
                goto LABEL_115;
            }
            break;
          default:
LABEL_115:
            turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
      }
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v81);
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v82);
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v85);
      turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v86);
      v11 = v71 + 1;
    }
    while (v71 + 1 != v70);
  }
  if ((a4 & 1) != 0)
  {
    v54 = *v10;
    if (*v10 != v9)
    {
      do
      {
        std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        if (v68)
        {
          v55 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::__equal_to &>((uint64_t *)v54[5], (uint64_t *)v54[6]);
          std::vector<unsigned long>::resize((uint64_t)(v54 + 5), ((uint64_t)v55 - v54[5]) >> 3);
        }
        v56 = (uint64_t *)v54[1];
        if (v56)
        {
          do
          {
            v57 = v56;
            v56 = (uint64_t *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            v57 = (uint64_t *)v54[2];
            v58 = *v57 == (_QWORD)v54;
            v54 = v57;
          }
          while (!v58);
        }
        v54 = v57;
      }
      while (v57 != v9);
    }
  }
  v59 = v73;
  v73 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = v74;
  v74 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  return a1;
}

void sub_2185E0A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v45;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy(v43, *(_QWORD **)(a11 + 32));
  v45 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

_QWORD *turi::indexed_column_groupby::dest_group(_QWORD *this, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)this[4];
  if (v2)
  {
    v3 = this + 4;
    do
    {
      v4 = v2[4];
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = v2;
      else
        v6 = v2 + 1;
      if (v5)
        v3 = v2;
      v2 = (_QWORD *)*v6;
    }
    while (*v6);
    if (v3 != this + 4)
    {
      v7 = v3[4];
      v8 = v3 + 5;
      if (v7 <= a2)
        return v8;
    }
  }
  return this;
}

void sub_2185E0E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_39()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_indexed_sframe_tools_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::recsys::precision_and_recall(unint64_t **a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  unint64_t v40;
  __int128 v41;
  char v42;

  if (*a2 == a2[1])
  {
    v40 = (a3[1] - *a3) >> 3;
    v41 = 0uLL;
    std::vector<std::pair<double,double>>::vector(a4, v40, &v41);
  }
  else
  {
    std::vector<std::pair<unsigned long,unsigned long>>::vector(&v41, (a3[1] - *a3) >> 3);
    v8 = *a3;
    v9 = a3[1];
    v10 = v41;
    v11 = v9 - *a3;
    if (v9 != *a3)
    {
      v12 = 0;
      v13 = v11 >> 3;
      if (v13 <= 1)
        v13 = 1;
      v14 = (_QWORD *)(v41 + 8);
      do
      {
        *(v14 - 1) = *(_QWORD *)(v8 + 8 * v12);
        *v14 = v12++;
        v14 += 2;
      }
      while (v13 != v12);
    }
    v15 = 126 - 2 * __clz((*((_QWORD *)&v41 + 1) - v10) >> 4);
    if (*((_QWORD *)&v41 + 1) == v10)
      v16 = 0;
    else
      v16 = v15;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(v10, *((unint64_t **)&v41 + 1), (uint64_t)&v42, v16, 1);
    std::vector<std::pair<double,double>>::vector(a4, (a3[1] - *a3) >> 3);
    v17 = a1[1];
    if (*a1 != v17)
    {
      v18 = *a1 + 1;
      while (v18 != v17)
      {
        v20 = *(v18 - 1);
        v19 = *v18++;
        if (v19 < v20)
        {
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
          break;
        }
      }
    }
    v22 = (uint64_t *)*((_QWORD *)&v41 + 1);
    v21 = (uint64_t *)v41;
    if ((_QWORD)v41 != *((_QWORD *)&v41 + 1))
    {
      v23 = *a2;
      do
      {
        v24 = v21[1];
        if (a2[1] - v23 >= (unint64_t)*v21)
          v25 = *v21;
        else
          v25 = a2[1] - v23;
        std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        v26 = *a1;
        v27 = a1[1];
        v23 = *a2;
        v28 = 0;
        if (v25)
          v29 = v27 == v26;
        else
          v29 = 1;
        if (!v29)
        {
          v30 = *a2;
          v31 = *a1;
          do
          {
            v32 = *v31;
            v33 = *v30;
            v34 = v31 + 1;
            if (*v30 < *v31)
              v35 = v28;
            else
              v35 = v28 + 1;
            if (*v30 >= *v31)
              ++v31;
            if (v32 < v33)
              v31 = v34;
            else
              v28 = v35;
            if (v32 >= v33)
              ++v30;
          }
          while (v31 != v27 && v30 != &v23[v25]);
        }
        v36 = (double)v28;
        if (v25)
          v37 = v36 / (double)(unint64_t)v25;
        else
          v37 = 0.0;
        if (v26 == v27)
          v38 = 1.0;
        else
          v38 = v36 / (double)(unint64_t)(v27 - v26);
        v39 = (double *)(*a4 + 16 * v24);
        *v39 = v37;
        v39[1] = v38;
        v21 += 2;
      }
      while (v21 != v22);
      v21 = (uint64_t *)v41;
    }
    if (v21)
    {
      *((_QWORD *)&v41 + 1) = v21;
      operator delete(v21);
    }
  }
}

void sub_2185E11F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<double,double>>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2185E128C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<double,double>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2185E1300(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_precision_recall_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::validate<(MLModelType)602>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  int *v12;
  double result;
  void *v15;
  void *v16;
  _OWORD *v17;
  void *v18;
  _BYTE __p[24];
  void *v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  _BYTE v24[24];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v18);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v23);
  v18 = v23;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_OWORD *)__p = *(_OWORD *)v24;
  *(_QWORD *)&__p[16] = *(_QWORD *)&v24[16];
  if (CoreML::Result::good((CoreML::Result *)&v18))
  {
    v5 = operator new(0x10uLL);
    v15 = v5;
    *v5 = xmmword_21872DCA0;
    v16 = v5 + 1;
    v17 = v5 + 1;
    CoreML::Result::Result((CoreML::Result *)&v23);
    if (*((int *)v4 + 6) >= 1)
    {
      v6 = 0;
      do
      {
        CoreML::validateSchemaTypes((int **)&v15, *(_QWORD *)(v4[4] + 8 * v6 + 8), (CoreML::Result *)&v20);
        v23 = v20;
        if ((v24[23] & 0x80000000) != 0)
          operator delete(*(void **)v24);
        *(_OWORD *)v24 = v21;
        *(_QWORD *)&v24[16] = v22;
        if (!CoreML::Result::good((CoreML::Result *)&v23))
          break;
        ++v6;
      }
      while (v6 < *((int *)v4 + 6));
    }
    v7 = *(_QWORD *)v24;
    v25[0] = *(_QWORD *)&v24[8];
    *(_QWORD *)((char *)v25 + 7) = *(_QWORD *)&v24[15];
    v8 = v24[23];
    v18 = v23;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    *(_QWORD *)__p = v7;
    *(_QWORD *)&__p[8] = v25[0];
    *(_QWORD *)&__p[15] = *(_QWORD *)((char *)v25 + 7);
    __p[23] = v8;
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (CoreML::Result::good((CoreML::Result *)&v18))
    {
      v9 = operator new(4uLL);
      v20 = v9;
      *v9 = 5;
      *(_QWORD *)&v21 = v9 + 1;
      *((_QWORD *)&v21 + 1) = v9 + 1;
      CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v20, (uint64_t)&v23);
      v18 = v23;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_OWORD *)__p = *(_OWORD *)v24;
      *(_QWORD *)&__p[16] = *(_QWORD *)&v24[16];
      v24[23] = 0;
      v24[0] = 0;
      if (v20)
      {
        *(_QWORD *)&v21 = v20;
        operator delete(v20);
      }
      v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v18);
      if ((_DWORD)v10)
      {
        v11 = 0;
        while (1)
        {
          v12 = *(_DWORD *)(a1 + 44) == 602
              ? *(int **)(a1 + 32)
              : (int *)CoreML::Specification::FeatureVectorizer::default_instance((CoreML::Specification::FeatureVectorizer *)v10);
          if (v11 >= v12[6])
            break;
          if (*(_DWORD *)(a1 + 44) == 602)
            v10 = *(uint64_t **)(a1 + 32);
          else
            v10 = CoreML::Specification::FeatureVectorizer::default_instance((CoreML::Specification::FeatureVectorizer *)v12);
          if (!*(_QWORD *)(*(_QWORD *)(v10[4] + 8 * v11++ + 8) + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v23, "Dimension size must be greater tha zero.");
            CoreML::Result::Result((_DWORD *)a2, 13);
            if ((v24[15] & 0x80000000) != 0)
              operator delete(v23);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            return result;
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = v18;
  result = *(double *)__p;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[16];
  return result;
}

void sub_2185E1658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_FeatureVectorizerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E18C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_random_sframe_generation_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_md5_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E1C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4_41()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, (uint64_t)"Mutex create error %d", v1, v2, v3, v4, v5, v6, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_sframe_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E1F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_5_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_annotation_base_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_annotate_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_data_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_message_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_meta_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_progress_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Result *CoreML::Result::Result(CoreML::Result *this)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "not an error");
  *(_QWORD *)this = 0;
  std::operator+<char>();
  if (v4 < 0)
    operator delete(__p);
  return this;
}

void sub_2185E2224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *CoreML::Result::Result(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  std::operator+<char>();
  return a1;
}

_DWORD *CoreML::Result::Result(_DWORD *a1, int a2)
{
  *a1 = a2;
  a1[1] = 0;
  std::operator+<char>();
  return a1;
}

BOOL CoreML::Result::good(CoreML::Result *this)
{
  return (*(_DWORD *)this & 0xFFFFFFEF) == 0;
}

uint64_t CoreML::Result::featureTypeInvariantError@<X0>(uint64_t *a1@<X0>, CoreML::FeatureType *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  std::string __p;
  _QWORD v19[2];
  _QWORD v20[11];
  char v21;
  uint64_t v22;

  CoreML::Result::Result((CoreML::Result *)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Feature type invariant violation. Expected feature type ", 56);
  CoreML::FeatureType::toString(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" to be one of: ", 15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = *a1;
  if (a1[1] != *a1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      CoreML::FeatureType::toString((CoreML::FeatureType *)(v9 + v10), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      else
        v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v12, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9 = *a1;
      v14 = (a1[1] - *a1) >> 4;
      if (v11 != v14 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
        v9 = *a1;
        v14 = (a1[1] - *a1) >> 4;
      }
      ++v11;
      v10 += 16;
    }
    while (v11 < v14);
  }
  std::stringbuf::str();
  v15 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0)
    operator delete(*v15);
  *(_OWORD *)v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_DWORD *)a3 = 2;
  v19[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v20[0] = v16;
  v20[1] = MEMORY[0x24BEDB848] + 16;
  if (v21 < 0)
    operator delete((void *)v20[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v22);
}

void sub_2185E24BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_Result_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_similarity_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_12_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_class_registrations_cpp_19()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_31_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_image_classification_cpp()
{
  uint64_t i;
  const void *v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(v2, "argmax");
  std::string::basic_string[abi:ne180100]<0>(v3, "argmin");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&turi::registered_arg_functions, v2, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v3[i + 2]) < 0)
      operator delete((void *)v2[i + 3]);
  }
  return __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &turi::registered_arg_functions, &dword_217E69000);
}

void sub_2185E2C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

void sub_2185E2E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_19_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_object_detection_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2185E316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_8_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v2, v3, v4, v5, v6, v7, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_utils_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sarray *a2)
{
  return 5000000;
}

uint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sarray *a2, const turi::gl_sarray *a3)
{
  return 2500000;
}

unint64_t turi::visualization::batch_size(turi::visualization *this, const turi::gl_sframe *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[3];
  void **v6;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 24))(v5);
  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - v5[0]) >> 3);
  v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  return 0x4C4B40 / v3;
}

uint64_t _GLOBAL__sub_I_batch_size_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::visualization::boxes_and_whiskers_result::vega_column_data(turi::visualization::boxes_and_whiskers_result *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  _BYTE v20[16];
  uint64_t *v21;
  _QWORD v22[2];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  turi::visualization::groupby_result<turi::groupby_operators::quantile>::get_grouped((unsigned __int8 *)this + 8, (uint64_t)v20);
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    do
    {
      if (*((_BYTE *)v2 + 28) != 7)
      {
        v4 = v2[2];
        v5 = v2[4];
        v6 = *(uint64_t **)(v5 + 8);
        v7 = *(uint64_t **)(v5 + 16);
        if (v6 == v7)
          goto LABEL_8;
        v8 = 1;
        do
        {
          v9 = *v6++;
          v8 &= (v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        while (v6 != v7);
        if ((v8 & 1) != 0)
        {
LABEL_8:
          if (v3)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"{\"", 2);
          if (byte_254FF5A3F >= 0)
            v11 = &x_name;
          else
            v11 = (uint64_t *)x_name;
          if (byte_254FF5A3F >= 0)
            v12 = byte_254FF5A3F;
          else
            v12 = unk_254FF5A30;
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\": ", 3);
          turi::visualization::extra_label_escape((uint64_t *)(v4 + 8), 1, (uint64_t)__p);
          if ((v19 & 0x80u) == 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          if ((v19 & 0x80u) == 0)
            v15 = v19;
          else
            v15 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v14, v15);
          if ((char)v19 < 0)
            operator delete(__p[0]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"min\": ", 8);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"lower quartile\": ", 19);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"median\": ", 11);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"upper quartile\": ", 19);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\"max\": ", 8);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"}", 1);
          ++v3;
        }
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  std::stringbuf::str();
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v20);
  v22[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v23[0] = v16;
  v23[1] = MEMORY[0x24BEDB848] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v25);
}

void sub_2185E3658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&a17);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::get_grouped@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *i;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void **v33[2];
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = (unsigned __int8 *)*((_QWORD *)result + 3); i; i = *(unsigned __int8 **)i)
  {
    turi::groupby_operators::quantile::emit((turi::groupby_operators::quantile *)(i + 32), &v34);
    result = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::flexible_type>(a2, i + 16, (uint64_t *)i + 2, &v34);
    switch(v35)
    {
      case 2:
        v4 = (unint64_t *)v34;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = v34;
          if (v34)
          {
            if (*(char *)(v34 + 31) < 0)
              operator delete(*(void **)(v34 + 8));
            v8 = v7;
            v9 = 0x1012C404EF22A49;
            goto LABEL_43;
          }
        }
        break;
      case 3:
        v10 = (unint64_t *)v34;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = v34;
          if (v34)
          {
            v14 = *(void **)(v34 + 8);
            if (v14)
            {
              *(_QWORD *)(v34 + 16) = v14;
              operator delete(v14);
            }
            v8 = v13;
            v9 = 0x1080C409938AC02;
            goto LABEL_43;
          }
        }
        break;
      case 4:
        v15 = (unint64_t *)v34;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = v34;
          if (v34)
          {
            v33[0] = (void **)(v34 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v33);
            goto LABEL_27;
          }
        }
        break;
      case 5:
        v19 = (unint64_t *)v34;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v18 = v34;
          if (v34)
          {
            v33[0] = (void **)(v34 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v33);
LABEL_27:
            v8 = v18;
            v9 = 0x1020C405E66F15BLL;
            goto LABEL_43;
          }
        }
        break;
      case 8:
        v22 = (unint64_t *)v34;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v34;
          if (v34)
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v34 + 16));
            v8 = v25;
            v26 = -235920773;
            goto LABEL_42;
          }
        }
        break;
      case 9:
        v27 = (unint64_t *)v34;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = v34;
          if (v34)
          {
            v31 = *(void **)(v34 + 48);
            if (v31)
            {
              *(_QWORD *)(v34 + 56) = v31;
              operator delete(v31);
            }
            v32 = *(void **)(v30 + 24);
            if (v32)
            {
              *(_QWORD *)(v30 + 32) = v32;
              operator delete(v32);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 + 8);
            v8 = v30;
            v26 = 2071181815;
LABEL_42:
            v9 = v26 | 0x1030C4000000000;
LABEL_43:
            result = (unsigned __int8 *)MEMORY[0x219A19A08](v8, v9);
          }
        }
        break;
      default:
        continue;
    }
  }
  return result;
}

void sub_2185E3900(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_2185E3A18()
{
  JUMPOUT(0x2185E3A10);
}

void turi::visualization::plot_boxes_and_whiskers(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, const turi::flexible_type *a4@<X3>, const turi::flexible_type *a5@<X4>, _QWORD *a6@<X8>)
{
  const turi::gl_sarray *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25[6];
  void *__p;
  char v27;
  _QWORD v28[2];
  std::__shared_weak_count *v29;
  _QWORD v30[2];
  uint64_t (**v31)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  char v36;
  double v37;
  std::string v38;

  turi::visualization::boxes_and_whiskers_spec(a3, a4, a5, &v38);
  v37 = (double)(unint64_t)turi::gl_sarray::size(this);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v31);
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v30[0] = &unk_24D94B088;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v28);
  turi::gl_sframe::operator[]((uint64_t)v28, (uint64_t)&x_name, (turi::gl_sarray *)v25);
  turi::gl_sarray_reference::operator=((uint64_t)v25, (uint64_t)this);
  v25[0] = (uint64_t)off_24D91EA30;
  if (v27 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v25);
  turi::gl_sframe::operator[]((uint64_t)v28, (uint64_t)&y_name, (turi::gl_sarray *)v25);
  turi::gl_sarray_reference::operator=((uint64_t)v25, (uint64_t)a2);
  v25[0] = (uint64_t)off_24D91EA30;
  if (v27 < 0)
    operator delete(__p);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v25);
  v11 = turi::visualization::batch_size(this, a2, v10);
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::init((uint64_t)v30, (uint64_t)v28, v11);
  std::allocate_shared[abi:ne180100]<turi::visualization::boxes_and_whiskers,std::allocator<turi::visualization::boxes_and_whiskers>,turi::visualization::boxes_and_whiskers&,void>((uint64_t)v30, &v24);
  *(_OWORD *)v25 = v24;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v38, v25, &v37, a6);
  v12 = (std::__shared_weak_count *)v25[1];
  if (v25[1])
  {
    v13 = (unint64_t *)(v25[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v28[0] = off_24D91E9C0;
  v15 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v30[0] = &unk_24D94B148;
  v18 = v34;
  if (v34)
  {
    v19 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v31 = off_24D91E9C0;
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_2185E3CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)(turi::gl_sframe *__hidden);
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, uint64_t (**)(turi::gl_sframe *__hidden this));
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v15 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  turi::visualization::boxes_and_whiskers::~boxes_and_whiskers((turi::visualization::boxes_and_whiskers *)va2);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  _Unwind_Resume(a1);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  const char **v9;

  *(_QWORD *)&v8 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = (const char **)&v8;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v9);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sframe::operator=(a1 + 16, a2);
  v4 = (char *)operator new(0x60uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24D94B280;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_QWORD *)v4 + 11) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  v4[88] = 7;
  *((_QWORD *)v4 + 4) = &unk_24D94B028;
  *((_QWORD *)&v8 + 1) = v4;
  *((_QWORD *)v4 + 3) = &off_24D94B000;
  *(_QWORD *)&v8 = v4 + 24;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 40, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
}

void turi::visualization::boxes_and_whiskers::~boxes_and_whiskers(turi::visualization::boxes_and_whiskers *this)
{
  *(_QWORD *)this = &unk_24D94B148;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &unk_24D94B148;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::boxes_and_whiskers_result::~boxes_and_whiskers_result(turi::visualization::boxes_and_whiskers_result *this)
{
  *((_QWORD *)this + 1) = &unk_24D94B258;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table((uint64_t)this + 16);
}

{
  *((_QWORD *)this + 1) = &unk_24D94B258;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    *a2 = *(_QWORD *)(a1 + 40);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 56);
  v11 = turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 56)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 56);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94B1B0;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 56) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 48);
  *a2 = *(_QWORD *)(a1 + 40);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_2185E4100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::eof(uint64_t a1)
{
  uint64_t v1;
  const char **v3;
  const char *v4;

  v4 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v3 = &v4;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v3);
  }
  v1 = *(_QWORD *)(a1 + 56);
  return v1 == turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_total_rows(uint64_t a1)
{
  const char **v2;
  const char *v3;

  v3 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v2 = &v3;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v2);
  }
  return turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_rows_processed(uint64_t a1)
{
  const char **v2;
  const char *v3;

  v3 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v2 = &v3;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v2);
  }
  return *(_QWORD *)(a1 + 56);
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get_current@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a2 = &unk_24D94B230;
  *(_QWORD *)(a2 + 8) = &unk_24D94B258;
  result = std::unordered_map<turi::flexible_type,turi::groupby_operators::quantile>::unordered_map(a2 + 16, v3 + 16);
  v5 = *(_QWORD *)(v3 + 56);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(v3 + 64);
  *(_QWORD *)(a2 + 56) = v5;
  *(_QWORD *)a2 = &off_24D94B000;
  *(_QWORD *)(a2 + 8) = &unk_24D94B028;
  return result;
}

_QWORD *turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::boxes_and_whiskers_result>::vector(a2, a1);
}

unsigned __int8 *turi::visualization::groupby<turi::visualization::boxes_and_whiskers_result>::merge_results(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = turi::visualization::groupby_result<turi::groupby_operators::quantile>::combine((unsigned __int8 *)(*((_QWORD *)v4 + 5) + 8), v2 + 8);
      v2 += 72;
    }
    while (v2 != v3);
  }
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94B1B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94B1B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t ***v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  unint64_t v72;
  void **v73;

  v2 = **a1;
  v3 = 0x8E38E38E38E38E39 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    v11 = v3 - 1 == a2 ? v9 : v10;
    turi::gl_sframe::range_iterator((turi::gl_sframe *)a1[1], v8, v11, &v69);
    v68[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v69);
    v68[1] = v12;
    v67 = turi::gl_sframe_range::end((turi::gl_sframe_range *)&v69);
    v66 = v2 + 72 * a2 + 8;
    while (v68[0] != v67)
    {
      v13 = (_QWORD *)turi::gl_sframe_range::iterator::dereference((turi::gl_sframe_range::iterator *)v68);
      v14 = operator new();
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)v14 = 1;
      std::vector<turi::flexible_type>::vector(&v71, (uint64_t)(*(_QWORD *)(*v13 + 8) - *(_QWORD *)*v13) >> 4);
      v15 = v71;
      if (*((_QWORD *)&v71 + 1) != (_QWORD)v71)
      {
        v16 = 0;
        do
        {
          v17 = **(_QWORD **)(*(_QWORD *)*v13 + 16 * v16) + 16 * v13[1];
          v18 = v15 + 16 * v16;
          if (v17 != v18)
          {
            switch(*(_BYTE *)(v18 + 12))
            {
              case 2:
                v19 = *(unint64_t **)v18;
                do
                {
                  v20 = __ldaxr(v19);
                  v21 = v20 - 1;
                }
                while (__stlxr(v21, v19));
                if (!v21)
                {
                  v22 = *(unint64_t **)v18;
                  if (!*(_QWORD *)v18)
                    goto LABEL_52;
                  if (*((char *)v22 + 31) < 0)
                    operator delete((void *)v22[1]);
                  v23 = v22;
                  v24 = 0x1012C404EF22A49;
                  goto LABEL_51;
                }
                break;
              case 3:
                v36 = *(unint64_t **)v18;
                do
                {
                  v37 = __ldaxr(v36);
                  v38 = v37 - 1;
                }
                while (__stlxr(v38, v36));
                if (!v38)
                {
                  v39 = *(unint64_t **)v18;
                  if (!*(_QWORD *)v18)
                    goto LABEL_52;
                  v40 = (void *)v39[1];
                  if (v40)
                  {
                    v39[2] = (unint64_t)v40;
                    operator delete(v40);
                  }
                  v23 = v39;
                  v24 = 0x1080C409938AC02;
                  goto LABEL_51;
                }
                break;
              case 4:
                v25 = *(unint64_t **)v18;
                do
                {
                  v26 = __ldaxr(v25);
                  v27 = v26 - 1;
                }
                while (__stlxr(v27, v25));
                if (!v27)
                {
                  v28 = *(unint64_t **)v18;
                  if (!*(_QWORD *)v18)
                    goto LABEL_52;
                  v73 = (void **)(v28 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
                  goto LABEL_44;
                }
                break;
              case 5:
                v41 = *(unint64_t **)v18;
                do
                {
                  v42 = __ldaxr(v41);
                  v43 = v42 - 1;
                }
                while (__stlxr(v43, v41));
                if (!v43)
                {
                  v28 = *(unint64_t **)v18;
                  if (!*(_QWORD *)v18)
                    goto LABEL_52;
                  v73 = (void **)(v28 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
LABEL_44:
                  v23 = v28;
                  v24 = 0x1020C405E66F15BLL;
                  goto LABEL_51;
                }
                break;
              case 8:
                v44 = *(unint64_t **)v18;
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = v45 - 1;
                }
                while (__stlxr(v46, v44));
                if (!v46)
                {
                  v47 = *(unint64_t **)v18;
                  if (!*(_QWORD *)v18)
                    goto LABEL_52;
                  boost::detail::shared_count::~shared_count((unsigned int **)v47 + 2);
                  v23 = v47;
                  v35 = -235920773;
                  goto LABEL_50;
                }
                break;
              case 9:
                v29 = *(unint64_t **)v18;
                do
                {
                  v30 = __ldaxr(v29);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v29));
                if (!v31)
                {
                  v32 = *(unint64_t **)v18;
                  if (*(_QWORD *)v18)
                  {
                    v33 = (void *)v32[6];
                    if (v33)
                    {
                      v32[7] = (unint64_t)v33;
                      operator delete(v33);
                    }
                    v34 = (void *)v32[3];
                    if (v34)
                    {
                      v32[4] = (unint64_t)v34;
                      operator delete(v34);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
                    v23 = v32;
                    v35 = 2071181815;
LABEL_50:
                    v24 = v35 | 0x1030C4000000000;
LABEL_51:
                    MEMORY[0x219A19A08](v23, v24);
                  }
LABEL_52:
                  *(_QWORD *)v18 = 0;
                }
                break;
              default:
                break;
            }
            v48 = *(_QWORD *)v17;
            *(_QWORD *)(v18 + 5) = *(_QWORD *)(v17 + 5);
            *(_QWORD *)v18 = v48;
            LODWORD(v48) = *(unsigned __int8 *)(v17 + 12);
            *(_BYTE *)(v18 + 12) = v48;
            v49 = v48 > 9;
            v50 = (1 << v48) & 0x33C;
            if (!v49 && v50 != 0)
            {
              v52 = *(unint64_t **)v18;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 + 1, v52));
            }
          }
          ++v16;
          v15 = v71;
        }
        while (v16 < (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 4);
      }
      if (*(_QWORD *)v14 == 1)
      {
        v54 = (unint64_t *)v14;
        v55 = v66;
      }
      else
      {
        v55 = v66;
        v54 = (unint64_t *)operator new();
        v56 = *(uint64_t **)(v14 + 8);
        *v54 = *(_QWORD *)v14;
        v54[2] = 0;
        v54[3] = 0;
        v54[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v54 + 1, v56, *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - (_QWORD)v56) >> 4);
        *v54 = 1;
        do
        {
          v57 = __ldaxr((unint64_t *)v14);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unint64_t *)v14));
        if (!v58)
        {
          v73 = (void **)(v14 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
          MEMORY[0x219A19A08](v14, 0x1020C405E66F15BLL);
        }
      }
      std::vector<turi::flexible_type>::__vdeallocate((void **)v54 + 1);
      *(_OWORD *)(v54 + 1) = v71;
      v54[3] = v72;
      v72 = 0;
      v71 = 0uLL;
      v73 = (void **)&v71;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
      v59 = (unsigned __int8 *)v54[1];
      v60 = v59[28];
      if (v60 != 7)
      {
        if (*(_BYTE *)(v55 + 56) == 7)
          *(_BYTE *)(v55 + 56) = v60;
        turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::flexible_type>(v55, v59, (uint64_t)(v59 + 16));
      }
      do
      {
        v61 = __ldaxr(v54);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v54));
      if (!v62)
      {
        *(_QWORD *)&v71 = v54 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        MEMORY[0x219A19A08](v54, 0x1020C405E66F15BLL);
      }
      turi::gl_sframe_range::iterator::increment((turi::gl_sframe_range::iterator *)v68);
    }
    v63 = v70;
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v65 = __ldaxr(p_shared_owners);
      while (__stlxr(v65 - 1, p_shared_owners));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
}

void sub_2185E48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::flexible_type>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned __int8 *result;

  v6 = (_QWORD *)(a1 + 8);
  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)(a1 + 8), a2);
  if (result)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*((_QWORD *)result + 4) + 16))(result + 32, a3);
  if (*(_QWORD *)(a1 + 32) <= 0x3E7uLL)
  {
    (**(void (***)(uint64_t, unsigned __int8 *))a1)(a1, a2);
    result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v6, a2);
    if (!result)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*((_QWORD *)result + 4) + 16))(result + 32, a3);
  }
  ++*(_QWORD *)(a1 + 48);
  return result;
}

void std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 72;
      v7 = v4 - 72;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 72;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::visualization::groupby_result<turi::groupby_operators::quantile>::insert_category(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _OWORD v10[5];
  __int128 v11;
  void *__p[2];
  __int128 v13;
  __int128 v14;
  void **v15;

  v14 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  memset(v10, 0, sizeof(v10));
  v6 = &unk_24D9307E0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch((uint64_t)v10, 0.005);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::groupby_operators::quantile>(a1 + 8, a2, (uint64_t *)a2, (uint64_t)&v6);
  v6 = &unk_24D9307E0;
  if (__p[1])
  {
    *(void **)&v13 = __p[1];
    operator delete(__p[1]);
  }
  v15 = (void **)&v11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)&v10[1] + 1;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)(a1 + 8), a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return (*(uint64_t (**)(unsigned __int8 *, _QWORD))(*((_QWORD *)v4 + 4) + 112))(v4 + 32, *(char *)(a1 + 56));
}

void sub_2185E4BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12)
{
  turi::groupby_operators::quantile::~quantile((turi::groupby_operators::quantile *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<turi::flexible_type,turi::groupby_operators::quantile>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(a1, i + 16, (uint64_t *)i + 2);
  return a1;
}

void sub_2185E4C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_2185E4EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__construct_node_hash<std::pair<turi::flexible_type const,turi::groupby_operators::quantile> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xD0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2185E4F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 != (uint64_t *)a1)
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(a1 + 12) = v3;
    v4 = v3 > 9;
    v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *(unint64_t **)a1;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  turi::groupby_operators::quantile::quantile((turi::groupby_operators::quantile *)(a1 + 16), (const turi::groupby_operators::quantile *)(a2 + 2));
  return a1;
}

void sub_2185E4FF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

turi::groupby_operators::quantile *turi::groupby_operators::quantile::quantile(turi::groupby_operators::quantile *this, const turi::groupby_operators::quantile *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)this = &unk_24D9307E0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v4 = *((_OWORD *)a2 + 2);
  v5 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = v5;
  *((_OWORD *)this + 2) = v4;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>((_QWORD *)this + 7, *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 6);
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = v6;
  *((_OWORD *)this + 6) = v7;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((_QWORD *)this + 14, *((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 3));
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((_QWORD *)this + 17, *((const void **)a2 + 17), *((_QWORD *)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3));
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  return this;
}

void sub_2185E51A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  void **v34;

  *(_QWORD *)(a1 + 16) = &unk_24D9307E0;
  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v2);
  }
  v34 = (void **)(a1 + 128);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
  v34 = (void **)(a1 + 72);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v34);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v4 = *(unint64_t **)a1;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_46;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)a1;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_46;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)a1;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v34 = (void **)(v18 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v34);
          goto LABEL_30;
        }
      }
      break;
    case 5:
      v19 = *(unint64_t **)a1;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v34 = (void **)(v18 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v34);
LABEL_30:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_46;
        }
      }
      break;
    case 8:
      v22 = *(unint64_t **)a1;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v25 + 2);
          v8 = v25;
          v26 = -235920773;
          goto LABEL_45;
        }
      }
      break;
    case 9:
      v27 = *(unint64_t **)a1;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v31 = (void *)v30[6];
          if (v31)
          {
            v30[7] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (void *)v30[3];
          if (v32)
          {
            v30[4] = (unint64_t)v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 1));
          v8 = v30;
          v26 = 2071181815;
LABEL_45:
          v9 = v26 | 0x1030C4000000000;
LABEL_46:
          MEMORY[0x219A19A08](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::groupby_operators::quantile>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0xD0uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]<turi::flexible_type const&,turi::groupby_operators::quantile,0>((uint64_t)(v17 + 2), a3, a4);
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_2185E5760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::groupby_operators::quantile>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::pair<turi::flexible_type const,turi::groupby_operators::quantile>::pair[abi:ne180100]<turi::flexible_type const&,turi::groupby_operators::quantile,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 != (uint64_t *)a1)
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)a1 = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(a1 + 12) = v3;
    v4 = v3 > 9;
    v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *(unint64_t **)a1;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  *(_QWORD *)(a1 + 16) = &unk_24D9307E0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v9 = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  v10 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  result = *(__n128 *)(a3 + 136);
  *(__n128 *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a3 + 160);
  return result;
}

_QWORD *std::vector<turi::visualization::boxes_and_whiskers_result>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::object_detection::average_precision_calculator::class_data>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 72 * a2;
    v6 = 72 * a2;
    do
    {
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_OWORD *)(v4 + 48) = 0uLL;
      *(_QWORD *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 48) = 1065353216;
      *(_BYTE *)(v4 + 64) = 7;
      *(_QWORD *)v4 = &off_24D94B000;
      *(_QWORD *)(v4 + 8) = &unk_24D94B028;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2185E5914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::combine(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *i;

  v2 = (uint64_t)result;
  if (result[56] == 7)
    result[56] = *(_BYTE *)(a2 + 56);
  for (i = *(unsigned __int8 **)(a2 + 24); i; i = *(unsigned __int8 **)i)
    result = turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::groupby_operators::quantile>(v2, i + 16, (uint64_t)(i + 32));
  return result;
}

unsigned __int8 *turi::visualization::groupby_result<turi::groupby_operators::quantile>::update_or_combine<turi::groupby_operators::quantile>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  uint64_t (*v9)(unsigned __int8 *, uint64_t);
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v6 = (_QWORD *)(a1 + 8);
  result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)(a1 + 8), a2);
  if (result)
  {
    v8 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*((_QWORD *)v8 + 4) + 32);
    v10 = v8 + 32;
    return (unsigned __int8 *)v9(v10, a3);
  }
  if (*(_QWORD *)(a1 + 32) <= 0x3E7uLL)
  {
    (**(void (***)(uint64_t, unsigned __int8 *))a1)(a1, a2);
    v11 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v6, a2);
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v12 = v11;
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*((_QWORD *)v12 + 4) + 32);
    v10 = v12 + 32;
    return (unsigned __int8 *)v9(v10, a3);
  }
  ++*(_QWORD *)(a1 + 48);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,turi::flexible_type>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v9 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x30uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type const&,turi::flexible_type,0>((uint64_t)(v17 + 2), a3, a4);
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11)
          v25 %= v11;
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_2185E5CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type const&,turi::flexible_type,0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    v3 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v3;
    LODWORD(v3) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v3;
    v4 = v3 > 9;
    v5 = (1 << v3) & 0x33C;
    if (!v4 && v5 != 0)
    {
      v7 = *(unint64_t **)result;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  v9 = *a3;
  *(_QWORD *)(result + 21) = *(uint64_t *)((char *)a3 + 5);
  *(_QWORD *)(result + 16) = v9;
  *(_BYTE *)(result + 28) = *((_BYTE *)a3 + 12);
  *((_BYTE *)a3 + 12) = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::boxes_and_whiskers,std::allocator<turi::visualization::boxes_and_whiskers>,turi::visualization::boxes_and_whiskers&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::boxes_and_whiskers&,std::allocator<turi::visualization::boxes_and_whiskers>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2185E5E10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::boxes_and_whiskers&,std::allocator<turi::visualization::boxes_and_whiskers>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D94B2D0;
  a1[1] = 0;
  std::allocator<turi::visualization::boxes_and_whiskers>::construct[abi:ne180100]<turi::visualization::boxes_and_whiskers,turi::visualization::boxes_and_whiskers&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2185E5E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::boxes_and_whiskers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::visualization::boxes_and_whiskers>::construct[abi:ne180100]<turi::visualization::boxes_and_whiskers,turi::visualization::boxes_and_whiskers&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = &unk_24D94B148;
  *(_QWORD *)(a2 + 8) = v5;
  result = turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 16), (const turi::gl_sframe *)(a3 + 16));
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)a2 = &unk_24D94B088;
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>(uint64_t a1@<X1>, uint64_t *a2@<X2>, double *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,std::allocator<turi::visualization::Plot>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_2185E5FC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,std::allocator<turi::visualization::Plot>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, double *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D919E90;
  a1[1] = 0;
  std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2185E6028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a4[1];
  v11 = *a4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  turi::visualization::Plot::Plot(a2, a3, &v11, *a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2185E60CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_boxes_and_whiskers_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&x_name, "x");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &x_name, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(y_name, "y");
  return __cxa_atexit(v0, y_name, &dword_217E69000);
}

_QWORD *turi::visualization::categorical_heatmap::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::categorical_heatmap_result>::vector(a2, a1);
}

uint64_t turi::visualization::categorical_heatmap::merge_results(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 32))(*(_QWORD *)(v4 + 40) + 8, v2 + 8);
      v2 += 56;
    }
    while (v2 != v3);
  }
  return result;
}

void turi::visualization::categorical_heatmap_result::vega_column_data(turi::visualization::categorical_heatmap_result *this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  std::string::size_type v4;
  std::string::size_type v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  std::string *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  std::string *v48;
  std::string::size_type size;
  std::string *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string *v53;
  std::string v54;
  _OWORD v55[2];
  int v56;
  char **v57;
  char *v58[2];
  char **v59;
  char *v60[2];
  unsigned __int8 *v61;
  std::string *v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::string v71;
  uint64_t v72;
  void *__p;
  char v74;
  _QWORD v75[21];

  v75[19] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(std::string *__return_ptr, char *))(*((_QWORD *)this + 1) + 40))(&v71, (char *)this + 8);
  v68 = 0;
  v69 = 0;
  v67 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v67, *(uint64_t **)(v71.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v71.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v71.__r_.__value_.__r.__words[0] + 16) - *(_QWORD *)(v71.__r_.__value_.__r.__words[0] + 8)) >> 5);
  switch(v71.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v1 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v2 = __ldaxr(v1);
        v3 = v2 - 1;
      }
      while (__stlxr(v3, v1));
      if (!v3)
      {
        v4 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v71.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v71.__r_.__value_.__r.__words[0] + 8));
          v5 = v4;
          v6 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v7 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          v11 = *(void **)(v71.__r_.__value_.__r.__words[0] + 8);
          if (v11)
          {
            *(_QWORD *)(v71.__r_.__value_.__r.__words[0] + 16) = v11;
            operator delete(v11);
          }
          v5 = v10;
          v6 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v12 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&v55[0] = v71.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v16 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v15 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&v55[0] = v71.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
LABEL_26:
          v5 = v15;
          v6 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v26 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v71.__r_.__value_.__r.__words[0] + 16));
          v5 = v29;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v71.__r_.__value_.__r.__words[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__r.__words[0])
        {
          v23 = *(void **)(v71.__r_.__value_.__r.__words[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v71.__r_.__value_.__r.__words[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v5 = v22;
          v25 = 2071181815;
LABEL_41:
          v6 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v60[0] = 0;
  v60[1] = 0;
  v58[1] = 0;
  v59 = v60;
  v57 = v58;
  v58[0] = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 1065353216;
  if (v68 != v67)
  {
    v30 = 0;
    if ((unint64_t)((v68 - v67) >> 5) <= 1)
      v31 = 1;
    else
      v31 = (v68 - v67) >> 5;
    do
    {
      v32 = *(_QWORD *)(v67 + v30);
      v33 = *(_QWORD *)(v67 + v30 + 16);
      memset(&v71, 0, sizeof(v71));
      memset(&v54, 0, sizeof(v54));
      v34 = *(_BYTE **)(v32 + 8);
      if (v34[12] == 7)
        MEMORY[0x219A19390](&v71, "(null)");
      else
        std::string::operator=(&v71, (const std::string *)(*(_QWORD *)v34 + 8));
      v35 = *(_QWORD *)(v32 + 8);
      if (*(_BYTE *)(v35 + 28) == 7)
        MEMORY[0x219A19390](&v54, "(null)");
      else
        std::string::operator=(&v54, (const std::string *)(*(_QWORD *)(v35 + 16) + 8));
      if (v60 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v59, (const void **)&v71.__r_.__value_.__l.__data_))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v59, (const void **)&v71.__r_.__value_.__l.__data_, (uint64_t)&v71);
        v36 = v65;
        if ((unint64_t)v65 >= v66)
        {
          v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v64, (__int128 *)&v71);
        }
        else
        {
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v65, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
          }
          else
          {
            v37 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
            v65->__r_.__value_.__r.__words[2] = v71.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
          }
          v38 = v36 + 1;
        }
        v65 = v38;
      }
      if (v58 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v57, (const void **)&v54.__r_.__value_.__l.__data_))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v57, (const void **)&v54.__r_.__value_.__l.__data_, (uint64_t)&v54);
        v39 = v62;
        if ((unint64_t)v62 >= v63)
        {
          v41 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, (__int128 *)&v54);
        }
        else
        {
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v62, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
          }
          else
          {
            v40 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
            v62->__r_.__value_.__r.__words[2] = v54.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          }
          v41 = v39 + 1;
        }
        v62 = v41;
      }
      v70 = &v71;
      v42 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, (unsigned __int8 *)&v71, (uint64_t)&std::piecewise_construct, (__int128 **)&v70);
      v70 = &v54;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v42 + 40), (unsigned __int8 *)&v54, (uint64_t)&std::piecewise_construct, (__int128 **)&v70)+ 5) = v33;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v30 += 32;
      --v31;
    }
    while (v31);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v71);
  v43 = (unsigned __int8 *)v64;
  v53 = v65;
  if (v64 != v65)
  {
    v44 = 0;
    do
    {
      v46 = v61;
      v45 = v62;
      while (v46 != (unsigned __int8 *)v45)
      {
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
        v47 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v54);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v47 + 40), v46, (uint64_t)&std::piecewise_construct, (__int128 **)&v54);
        if (v44)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)",", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)"{\"x\": ", 6);
        turi::visualization::extra_label_escape((uint64_t *)v43, 1, (uint64_t)&v54);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v54;
        else
          v48 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          size = v54.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)v48, size);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)", \"y\": ", 7);
        turi::visualization::extra_label_escape((uint64_t *)v46, 1, (uint64_t)&v54);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v54;
        else
          v50 = (std::string *)v54.__r_.__value_.__r.__words[0];
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        else
          v51 = v54.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)v50, v51);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)", \"count\": ", 11);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71.__r_.__value_.__r.__words[2], (uint64_t)"}", 1);
        ++v44;
        v46 += 24;
      }
      v43 += 24;
    }
    while (v43 != (unsigned __int8 *)v53);
  }
  std::stringbuf::str();
  v71.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v52 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v71.__r_.__value_.__r.__words + *(_QWORD *)(v71.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v71.__r_.__value_.__r.__words[2] = v52;
  v72 = MEMORY[0x24BEDB848] + 16;
  if (v74 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](v75);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::~__hash_table((uint64_t)v55);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v59, v60[0]);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
}

void sub_2185E68D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25,uint64_t a26,char a27,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,int a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::~__hash_table((uint64_t)&a18);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a24, a25);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a27, a28);
  a41 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a41 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a41 = &a36;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::plot_categorical_heatmap@<X0>(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, const turi::flexible_type *a4@<X3>, const turi::flexible_type *a5@<X4>, _QWORD *a6@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  const turi::gl_sarray *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v31[2];
  char v32;
  uint64_t v33[6];
  void *v34;
  char v35;
  _QWORD v36[2];
  std::__shared_weak_count *v37;
  std::string __p;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  char v43;
  double v44;
  void *v45;
  char v46;
  _QWORD v47[2];
  _QWORD v48[11];
  char v49;
  uint64_t v50;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v47);
  turi::visualization::categorical_heatmap_spec(a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v44 = (double)(unint64_t)turi::gl_sarray::size(this);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D94B4A0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&__p.__r_.__value_.__r.__words[2]);
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D94B320;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v36);
  std::string::basic_string[abi:ne180100]<0>(v31, "x");
  turi::gl_sframe::operator[]((uint64_t)v36, (uint64_t)v31, (turi::gl_sarray *)v33);
  turi::gl_sarray_reference::operator=((uint64_t)v33, (uint64_t)this);
  v33[0] = (uint64_t)off_24D91EA30;
  if (v35 < 0)
    operator delete(v34);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
  if (v32 < 0)
    operator delete(v31[0]);
  std::string::basic_string[abi:ne180100]<0>(v31, "y");
  turi::gl_sframe::operator[]((uint64_t)v36, (uint64_t)v31, (turi::gl_sarray *)v33);
  turi::gl_sarray_reference::operator=((uint64_t)v33, (uint64_t)a2);
  v33[0] = (uint64_t)off_24D91EA30;
  if (v35 < 0)
    operator delete(v34);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v33);
  if (v32 < 0)
    operator delete(v31[0]);
  v16 = turi::visualization::batch_size(this, a2, v15);
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::init((uint64_t)&__p, (uint64_t)v36, v16);
  std::allocate_shared[abi:ne180100]<turi::visualization::categorical_heatmap,std::allocator<turi::visualization::categorical_heatmap>,turi::visualization::categorical_heatmap&,void>((uint64_t)&__p, v31);
  *(_OWORD *)v33 = *(_OWORD *)v31;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v45, v33, &v44, a6);
  v17 = (std::__shared_weak_count *)v33[1];
  if (v33[1])
  {
    v18 = (unint64_t *)(v33[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v36[0] = off_24D91E9C0;
  v20 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D94B4A0;
  v23 = v41;
  if (v41)
  {
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24D91E9C0;
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v46 < 0)
    operator delete(v45);
  v47[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v47 + *(_QWORD *)(v47[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v48[0] = v29;
  v48[1] = MEMORY[0x24BEDB848] + 16;
  if (v49 < 0)
    operator delete((void *)v48[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v50);
}

void sub_2185E6DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t (**a26)(turi::gl_sframe *__hidden this),uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a26 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  turi::visualization::categorical_heatmap::~categorical_heatmap((turi::visualization::categorical_heatmap *)&a29);
  if (a47 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  const char **v9;

  *(_QWORD *)&v8 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 64))
  {
    v9 = (const char **)&v8;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v9);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sframe::operator=(a1 + 16, a2);
  v4 = (char *)operator new(0x50uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24D94B508;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_QWORD *)v4 + 4) = &unk_24D94B3E0;
  *((_QWORD *)&v8 + 1) = v4;
  *((_QWORD *)v4 + 3) = &off_24D94B3B8;
  *(_QWORD *)&v8 = v4 + 24;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 40, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
}

void turi::visualization::categorical_heatmap::~categorical_heatmap(turi::visualization::categorical_heatmap *this)
{
  *(_QWORD *)this = &unk_24D94B4A0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &unk_24D94B4A0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    *a2 = *(_QWORD *)(a1 + 40);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 56);
  v11 = turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 56)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 56);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94B5A8;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 56) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 48);
  *a2 = *(_QWORD *)(a1 + 40);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_2185E71C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get_current@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 40);
  *a2 = &unk_24D94B230;
  a2[1] = &unk_24D930AB0;
  result = std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)(a2 + 2), v3 + 16);
  *a2 = &off_24D94B3B8;
  a2[1] = &unk_24D94B3E0;
  return result;
}

void turi::visualization::categorical_heatmap_result::~categorical_heatmap_result(turi::visualization::categorical_heatmap_result *this)
{
  *((_QWORD *)this + 1) = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
}

{
  *((_QWORD *)this + 1) = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'turi::visualization::categorical_heatmap_result::~categorical_heatmap_result(turi::visualization::categorical_heatmap_result *this)
{
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

_QWORD *turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::categorical_heatmap_result>::vector(a2, a1);
}

_QWORD *std::vector<turi::visualization::categorical_heatmap_result>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = 56 * a2;
    v6 = v4 + 56 * a2;
    do
    {
      *(_QWORD *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_OWORD *)(v4 + 32) = 0uLL;
      *(_DWORD *)(v4 + 48) = 1065353216;
      *(_QWORD *)v4 = &off_24D94B3B8;
      *(_QWORD *)(v4 + 8) = &unk_24D94B3E0;
      v4 += 56;
      v5 -= 56;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_2185E73E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<turi::visualization::categorical_heatmap_result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 56;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2185E77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2185E785C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,long long>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::categorical_heatmap_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::categorical_heatmap,std::allocator<turi::visualization::categorical_heatmap>,turi::visualization::categorical_heatmap&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::categorical_heatmap&,std::allocator<turi::visualization::categorical_heatmap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2185E7954(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::categorical_heatmap&,std::allocator<turi::visualization::categorical_heatmap>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D94B558;
  a1[1] = 0;
  std::allocator<turi::visualization::categorical_heatmap>::construct[abi:ne180100]<turi::visualization::categorical_heatmap,turi::visualization::categorical_heatmap&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2185E79B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::categorical_heatmap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::visualization::categorical_heatmap>::construct[abi:ne180100]<turi::visualization::categorical_heatmap,turi::visualization::categorical_heatmap&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = &unk_24D94B4A0;
  *(_QWORD *)(a2 + 8) = v5;
  result = turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 16), (const turi::gl_sframe *)(a3 + 16));
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)a2 = &off_24D94B320;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94B5A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94B5A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::categorical_heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  unint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  _QWORD v131[2];
  uint64_t ***v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  uint64_t v135;
  void **v136;
  _QWORD v137[3];

  v137[2] = *MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = 0x6DB6DB6DB6DB6DB7 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    v11 = v3 - 1 == a2 ? v9 : v10;
    turi::gl_sframe::range_iterator((turi::gl_sframe *)a1[1], v8, v11, &v132);
    v131[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v132);
    v131[1] = v12;
    v13 = turi::gl_sframe_range::end((turi::gl_sframe_range *)&v132);
    v14 = v2 + 56 * a2 + 8;
    while (v131[0] != v13)
    {
      v15 = (_QWORD *)turi::gl_sframe_range::iterator::dereference((turi::gl_sframe_range::iterator *)v131);
      *(_QWORD *)((char *)v137 + 5) = 0x400000000000000;
      v137[0] = 0;
      v16 = (_QWORD *)operator new();
      *v16 = 0;
      v16[2] = 0;
      v16[3] = 0;
      v16[1] = 0;
      v137[0] = v16;
      *v16 = 1;
      std::vector<turi::flexible_type>::vector(&v134, (uint64_t)(*(_QWORD *)(*v15 + 8) - *(_QWORD *)*v15) >> 4);
      v17 = v134;
      if (*((_QWORD *)&v134 + 1) != (_QWORD)v134)
      {
        v18 = 0;
        do
        {
          v19 = **(_QWORD **)(*(_QWORD *)*v15 + 16 * v18) + 16 * v15[1];
          v20 = v17 + 16 * v18;
          if (v19 != v20)
          {
            switch(*(_BYTE *)(v20 + 12))
            {
              case 2:
                v21 = *(unint64_t **)v20;
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  v24 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  if (*((char *)v24 + 31) < 0)
                    operator delete((void *)v24[1]);
                  v25 = v24;
                  v26 = 0x1012C404EF22A49;
                  goto LABEL_51;
                }
                break;
              case 3:
                v38 = *(unint64_t **)v20;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                {
                  v41 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v42 = (void *)v41[1];
                  if (v42)
                  {
                    v41[2] = (unint64_t)v42;
                    operator delete(v42);
                  }
                  v25 = v41;
                  v26 = 0x1080C409938AC02;
                  goto LABEL_51;
                }
                break;
              case 4:
                v27 = *(unint64_t **)v20;
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  v30 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v136 = (void **)(v30 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
                  goto LABEL_44;
                }
                break;
              case 5:
                v43 = *(unint64_t **)v20;
                do
                {
                  v44 = __ldaxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                {
                  v30 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v136 = (void **)(v30 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_44:
                  v25 = v30;
                  v26 = 0x1020C405E66F15BLL;
                  goto LABEL_51;
                }
                break;
              case 8:
                v46 = *(unint64_t **)v20;
                do
                {
                  v47 = __ldaxr(v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, v46));
                if (!v48)
                {
                  v49 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  boost::detail::shared_count::~shared_count((unsigned int **)v49 + 2);
                  v25 = v49;
                  v37 = -235920773;
                  goto LABEL_50;
                }
                break;
              case 9:
                v31 = *(unint64_t **)v20;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  v34 = *(unint64_t **)v20;
                  if (*(_QWORD *)v20)
                  {
                    v35 = (void *)v34[6];
                    if (v35)
                    {
                      v34[7] = (unint64_t)v35;
                      operator delete(v35);
                    }
                    v36 = (void *)v34[3];
                    if (v36)
                    {
                      v34[4] = (unint64_t)v36;
                      operator delete(v36);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
                    v25 = v34;
                    v37 = 2071181815;
LABEL_50:
                    v26 = v37 | 0x1030C4000000000;
LABEL_51:
                    MEMORY[0x219A19A08](v25, v26);
                  }
LABEL_52:
                  *(_QWORD *)v20 = 0;
                }
                break;
              default:
                break;
            }
            v50 = *(_QWORD *)v19;
            *(_QWORD *)(v20 + 5) = *(_QWORD *)(v19 + 5);
            *(_QWORD *)v20 = v50;
            LODWORD(v50) = *(unsigned __int8 *)(v19 + 12);
            *(_BYTE *)(v20 + 12) = v50;
            v51 = v50 > 9;
            v52 = (1 << v50) & 0x33C;
            if (!v51 && v52 != 0)
            {
              v54 = *(unint64_t **)v20;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 + 1, v54));
            }
          }
          ++v18;
          v17 = v134;
        }
        while (v18 < (uint64_t)(*((_QWORD *)&v134 + 1) - v134) >> 4);
      }
      switch(BYTE4(v137[1]))
      {
        case 2:
          v56 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v57 = (_QWORD *)operator new();
            v58 = v137[0];
            *v57 = *(_QWORD *)v137[0];
            v59 = (std::string *)(v57 + 1);
            if (*(char *)(v58 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
            }
            else
            {
              v60 = *(_OWORD *)(v58 + 8);
              v57[3] = *(_QWORD *)(v58 + 24);
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
            }
            v137[0] = v57;
            *v57 = 1;
            do
            {
              v96 = __ldaxr((unint64_t *)v56);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, (unint64_t *)v56));
            if (!v97)
            {
              if (*(char *)(v56 + 31) < 0)
                operator delete(*(void **)(v56 + 8));
              v67 = (unint64_t *)v56;
              v68 = 0x1012C404EF22A49;
              goto LABEL_107;
            }
          }
          break;
        case 3:
          v61 = (unint64_t *)v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v62 = (_QWORD *)operator new();
            v63 = v137[0];
            *v62 = *(_QWORD *)v137[0];
            v62[2] = 0;
            v62[3] = 0;
            v62[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v62 + 1, *(const void **)(v63 + 8), *(_QWORD *)(v63 + 16), (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 3);
            v137[0] = v62;
            *v62 = 1;
            do
            {
              v64 = __ldaxr(v61);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v61));
            if (!v65)
            {
              v66 = (void *)v61[1];
              if (v66)
              {
                v61[2] = (unint64_t)v66;
                operator delete(v66);
              }
              v67 = v61;
              v68 = 0x1080C409938AC02;
              goto LABEL_107;
            }
          }
          break;
        case 4:
          v69 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v70 = (_QWORD *)operator new();
            v71 = v137[0];
            *v70 = *(_QWORD *)v137[0];
            v70[2] = 0;
            v70[3] = 0;
            v70[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v70 + 1, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 4);
            v137[0] = v70;
            *v70 = 1;
            do
            {
              v72 = __ldaxr((unint64_t *)v69);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, (unint64_t *)v69));
            if (!v73)
            {
              v136 = (void **)(v69 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
              goto LABEL_81;
            }
          }
          break;
        case 5:
          v69 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v74 = (_QWORD *)operator new();
            v75 = v137[0];
            *v74 = *(_QWORD *)v137[0];
            v74[2] = 0;
            v74[3] = 0;
            v74[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v74 + 1, *(uint64_t **)(v75 + 8), *(uint64_t **)(v75 + 16), (uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 5);
            v137[0] = v74;
            *v74 = 1;
            do
            {
              v76 = __ldaxr((unint64_t *)v69);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, (unint64_t *)v69));
            if (!v77)
            {
              v136 = (void **)(v69 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_81:
              v67 = (unint64_t *)v69;
              v68 = 0x1020C405E66F15BLL;
              goto LABEL_107;
            }
          }
          break;
        case 8:
          v78 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v79 = operator new();
            v80 = v137[0];
            *(_QWORD *)v79 = *(_QWORD *)v137[0];
            *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
            v81 = *(_QWORD *)(v80 + 16);
            *(_QWORD *)(v79 + 16) = v81;
            if (v81)
            {
              v82 = (unsigned int *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = *(_OWORD *)(v80 + 24);
            v85 = *(_OWORD *)(v80 + 40);
            *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
            *(_OWORD *)(v79 + 40) = v85;
            *(_OWORD *)(v79 + 24) = v84;
            v137[0] = v79;
            *(_QWORD *)v79 = 1;
            do
            {
              v86 = __ldaxr((unint64_t *)v78);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, (unint64_t *)v78));
            if (!v87)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v78 + 16));
              v67 = (unint64_t *)v78;
              v88 = -235920773;
              goto LABEL_99;
            }
          }
          break;
        case 9:
          v89 = (unint64_t *)v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v90 = (_QWORD *)operator new();
            v91 = v137[0] + 8;
            *v90 = *(_QWORD *)v137[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v90 + 1, v91);
            v137[0] = v90;
            *v90 = 1;
            do
            {
              v92 = __ldaxr(v89);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v89));
            if (!v93)
            {
              v94 = (void *)v89[6];
              if (v94)
              {
                v89[7] = (unint64_t)v94;
                operator delete(v94);
              }
              v95 = (void *)v89[3];
              if (v95)
              {
                v89[4] = (unint64_t)v95;
                operator delete(v95);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v89 + 1));
              v67 = v89;
              v88 = 2071181815;
LABEL_99:
              v68 = v88 | 0x1030C4000000000;
LABEL_107:
              MEMORY[0x219A19A08](v67, v68);
            }
          }
          break;
        default:
          break;
      }
      v98 = v137[0];
      std::vector<turi::flexible_type>::__vdeallocate((void **)(v137[0] + 8));
      *(_OWORD *)(v98 + 8) = v134;
      *(_QWORD *)(v98 + 24) = v135;
      v134 = 0uLL;
      v135 = 0;
      v136 = (void **)&v134;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v137);
      switch(BYTE4(v137[1]))
      {
        case 2:
          v99 = (unint64_t *)v137[0];
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = v137[0];
            if (v137[0])
            {
              if (*(char *)(v137[0] + 31) < 0)
                operator delete(*(void **)(v137[0] + 8));
              v103 = v102;
              v104 = 0x1012C404EF22A49;
              goto LABEL_149;
            }
          }
          break;
        case 3:
          v105 = (unint64_t *)v137[0];
          do
          {
            v106 = __ldaxr(v105);
            v107 = v106 - 1;
          }
          while (__stlxr(v107, v105));
          if (!v107)
          {
            v108 = v137[0];
            if (v137[0])
            {
              v109 = *(void **)(v137[0] + 8);
              if (v109)
              {
                *(_QWORD *)(v137[0] + 16) = v109;
                operator delete(v109);
              }
              v103 = v108;
              v104 = 0x1080C409938AC02;
              goto LABEL_149;
            }
          }
          break;
        case 4:
          v110 = (unint64_t *)v137[0];
          do
          {
            v111 = __ldaxr(v110);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v110));
          if (!v112)
          {
            v113 = v137[0];
            if (v137[0])
            {
              *(_QWORD *)&v134 = v137[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              goto LABEL_133;
            }
          }
          break;
        case 5:
          v114 = (unint64_t *)v137[0];
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v113 = v137[0];
            if (v137[0])
            {
              *(_QWORD *)&v134 = v137[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
LABEL_133:
              v103 = v113;
              v104 = 0x1020C405E66F15BLL;
              goto LABEL_149;
            }
          }
          break;
        case 8:
          v117 = (unint64_t *)v137[0];
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (!v119)
          {
            v120 = v137[0];
            if (v137[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
              v103 = v120;
              v121 = -235920773;
              goto LABEL_148;
            }
          }
          break;
        case 9:
          v122 = (unint64_t *)v137[0];
          do
          {
            v123 = __ldaxr(v122);
            v124 = v123 - 1;
          }
          while (__stlxr(v124, v122));
          if (!v124)
          {
            v125 = v137[0];
            if (v137[0])
            {
              v126 = *(void **)(v137[0] + 48);
              if (v126)
              {
                *(_QWORD *)(v137[0] + 56) = v126;
                operator delete(v126);
              }
              v127 = *(void **)(v125 + 24);
              if (v127)
              {
                *(_QWORD *)(v125 + 32) = v127;
                operator delete(v127);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v125 + 8);
              v103 = v125;
              v121 = 2071181815;
LABEL_148:
              v104 = v121 | 0x1030C4000000000;
LABEL_149:
              MEMORY[0x219A19A08](v103, v104);
            }
          }
          break;
        default:
          break;
      }
      turi::gl_sframe_range::iterator::increment((turi::gl_sframe_range::iterator *)v131);
    }
    v128 = v133;
    if (v133)
    {
      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
      do
        v130 = __ldaxr(p_shared_owners);
      while (__stlxr(v130 - 1, p_shared_owners));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
}

void sub_2185E8528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, _QWORD *a18, int a19, char a20)
{
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;

  MEMORY[0x219A19A08](v20, 0x1012C404EF22A49);
  a17 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      v22 = a18;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = a18;
        if (a18)
        {
          if (*((char *)a18 + 31) < 0)
            operator delete((void *)a18[1]);
          MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v26 = a18;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_40;
      v29 = a18;
      if (!a18)
        goto LABEL_39;
      v30 = (void *)a18[1];
      if (v30)
      {
        a18[2] = v30;
        operator delete(v30);
      }
      v31 = v29;
      v32 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v33 = a18;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_40;
      v36 = a18;
      if (!a18)
        goto LABEL_39;
      a17 = (void **)(a18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_26;
    case 5:
      v37 = a18;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      v36 = a18;
      if (!a18)
        goto LABEL_39;
      a17 = (void **)(a18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_26:
      v31 = v36;
      v32 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v40 = a18;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_40;
      v43 = a18;
      if (!a18)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)a18 + 2);
      v31 = v43;
      v44 = -235920773;
      goto LABEL_37;
    case 9:
      v45 = a18;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_40;
      if (!a18)
        goto LABEL_39;
      v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a18);
      v44 = 2071181815;
LABEL_37:
      v32 = v44 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v31, v32);
LABEL_39:
      a18 = 0;
LABEL_40:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t _GLOBAL__sub_I_categorical_heatmap_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::visualization::plot_columnwise_summary(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale::__imp *locale;
  std::locale::__imp *v11;
  unint64_t v12;
  char v13;
  char v14;
  std::string *v15;
  __int128 v16;
  int *v17;
  file_logger *v18;
  file_logger *v19;
  _QWORD *v20;
  __int128 v21;
  int *v22;
  file_logger *v23;
  file_logger *v24;
  _QWORD *v25;
  __int128 v26;
  std::string *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  const char *v31;
  char *v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  const char *v45;
  char *v46;
  _QWORD *v47;
  size_t v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const std::locale::facet *v52;
  _QWORD *v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  const turi::gl_sframe *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  char *v113;
  __int128 v114;
  int64x2_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  __int128 v126;
  int64x2_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;
  __int128 v138;
  int64x2_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  unint64_t *v147;
  std::__shared_weak_count *size;
  unint64_t *v149;
  unint64_t v150;
  std::string *v151;
  unint64_t v152;
  char v153;
  char v154;
  std::locale::__imp *v155;
  _BYTE *v156;
  std::locale::__imp *v157;
  unint64_t v158;
  int64_t v159;
  unint64_t v160;
  size_t v161;
  std::locale::__imp *v162;
  std::locale::__imp *v163;
  _BYTE *v164;
  char *v165;
  char v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *exception;
  _QWORD *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  std::string v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  std::locale *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  std::string v201;
  std::string v202;
  std::string *v203;
  std::string *v204;
  unint64_t v205;
  int64x2_t v206;
  _QWORD v207[2];
  std::locale v208;
  int64x2_t v209;
  uint64_t v210;
  _QWORD *v211;

  v4 = (int *)global_logger();
  if (v4[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 9, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Materializing SFrame", 20);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v208, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v208);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 296))(*a1);
  if (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1))
    turi::visualization::plot_columnwise_summary(std::shared_ptr<turi::unity_sframe_base>)::$_0::operator()();
  v185 = a2;
  v206 = 0uLL;
  v207[0] = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)*a1 + 128))(&v208);
  locale = v208.__locale_;
  v11 = (std::locale::__imp *)v209.i64[0];
  if (v208.__locale_ != (std::locale::__imp *)v209.i64[0])
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      (*(void (**)(std::locale **__return_ptr, _QWORD, std::locale::__imp *))(*(_QWORD *)*a1 + 192))(&v198, *a1, locale);
      if ((v12 < 0x32) | v14 & 1)
      {
        if ((*((unsigned int (**)(std::locale *))v198->__locale_ + 14))(v198) > 2)
        {
          if ((v13 & 1) == 0)
          {
            v22 = (int *)global_logger();
            if (v22[169] <= 4)
            {
              if (cppipc::must_cancel((cppipc *)v22))
LABEL_248:
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              v23 = (file_logger *)global_logger();
              v24 = file_logger::start_stream(v23, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 53, 1);
              v25 = pthread_getspecific(*((_QWORD *)v24 + 74));
              if (v25 && *((_BYTE *)v25 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Warning: Skipping column '", 26);
              if (*((char *)locale + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)locale, *((_QWORD *)locale + 1));
              }
              else
              {
                v26 = *(_OWORD *)locale;
                v201.__r_.__value_.__r.__words[2] = *((_QWORD *)locale + 2);
                *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v26;
              }
              v42 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&v201);
              v43 = pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v43 && *((_BYTE *)v43 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)"'. Unable to show columns of type '", 35);
              v44 = (*((uint64_t (**)(std::locale *))v198->__locale_ + 14))(v198);
              v45 = "undefined";
              if (v44 <= 9)
                v45 = off_24D94BD20[v44];
              v46 = (char *)pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v46)
              {
                if (v46[280])
                {
                  v47 = v46 + 16;
                  v48 = strlen(v45);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v45, v48);
                  v49 = strlen(v45);
                  if (v49)
                  {
                    if (v45[v49 - 1] == 10)
                      file_logger::stream_flush((file_logger *)v42);
                  }
                }
              }
              v50 = pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v50 && *((_BYTE *)v50 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50 + 2, (uint64_t)"'; only [int, float, str] can be shown.",
                  39);
              v51 = pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v51)
              {
                if (*((_BYTE *)v51 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(v51[2] - 24) + 16));
                  v52 = std::locale::use_facet((const std::locale *)&v190, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
                  std::locale::~locale((std::locale *)&v190);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v42);
                  if (*(_DWORD *)(v42 + 600) == 7)
                    goto LABEL_255;
                }
              }
              v53 = pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v53 && *((_BYTE *)v53 + 280))
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Further warnings of unsupported type will be suppressed.", 56);
              v54 = pthread_getspecific(*(_QWORD *)(v42 + 592));
              if (v54)
              {
                if (*((_BYTE *)v54 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(v54[2] - 24) + 16));
                  v55 = std::locale::use_facet((const std::locale *)&v190, MEMORY[0x24BEDB350]);
                  ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
                  std::locale::~locale((std::locale *)&v190);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v42);
                  if (*(_DWORD *)(v42 + 600) == 7)
                  {
LABEL_255:
                    __print_back_trace();
                    v183 = __cxa_allocate_exception(8uLL);
                    *v183 = "LOG_FATAL encountered";
                    __cxa_throw(v183, MEMORY[0x24BEDB718], 0);
                  }
                }
              }
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v201.__r_.__value_.__l.__data_);
            }
          }
          v13 = 1;
        }
        else
        {
          v15 = v204;
          if ((unint64_t)v204 >= v205)
          {
            v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v203, (__int128 *)locale);
          }
          else
          {
            if (*((char *)locale + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v204, *(const std::string::value_type **)locale, *((_QWORD *)locale + 1));
            }
            else
            {
              v16 = *(_OWORD *)locale;
              v204->__r_.__value_.__r.__words[2] = *((_QWORD *)locale + 2);
              *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
            }
            v27 = v15 + 1;
          }
          ++v12;
          v204 = v27;
        }
      }
      else
      {
        v17 = (int *)global_logger();
        if (v17[169] <= 4)
        {
          if (cppipc::must_cancel((cppipc *)v17))
            goto LABEL_248;
          v18 = (file_logger *)global_logger();
          v19 = file_logger::start_stream(v18, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/columnwise_summary.cpp", "plot_columnwise_summary", 30, 1);
          v20 = pthread_getspecific(*((_QWORD *)v19 + 74));
          if (v20 && *((_BYTE *)v20 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20 + 2, (uint64_t)"Warning: Skipping column '", 26);
          if (*((char *)locale + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)locale, *((_QWORD *)locale + 1));
          }
          else
          {
            v21 = *(_OWORD *)locale;
            v202.__r_.__value_.__r.__words[2] = *((_QWORD *)locale + 2);
            *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v21;
          }
          v28 = file_logger::operator<<<std::string>((uint64_t)v19, (uint64_t)&v202);
          v29 = pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v29 && *((_BYTE *)v29 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"' [", 3);
          v30 = (*((uint64_t (**)(std::locale *))v198->__locale_ + 14))(v198);
          v31 = "undefined";
          if (v30 <= 9)
            v31 = off_24D94BD20[v30];
          v32 = (char *)pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v32)
          {
            if (v32[280])
            {
              v33 = v32 + 16;
              v34 = strlen(v31);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v31, v34);
              v35 = strlen(v31);
              if (v35)
              {
                if (v31[v35 - 1] == 10)
                  file_logger::stream_flush((file_logger *)v28);
              }
            }
          }
          v36 = pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v36 && *((_BYTE *)v36 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"]. Unable to show more than 50 columns.", 39);
          v37 = pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v37)
          {
            if (*((_BYTE *)v37 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(v37[2] - 24) + 16));
              v38 = std::locale::use_facet((const std::locale *)&v190, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
              std::locale::~locale((std::locale *)&v190);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v28);
              if (*(_DWORD *)(v28 + 600) == 7)
                goto LABEL_249;
            }
          }
          v39 = pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v39 && *((_BYTE *)v39 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39 + 2, (uint64_t)"Further warnings of more than 50 columns will be suppressed.", 60);
          v40 = pthread_getspecific(*(_QWORD *)(v28 + 592));
          if (v40)
          {
            if (*((_BYTE *)v40 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(v40[2] - 24) + 16));
              v41 = std::locale::use_facet((const std::locale *)&v190, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
              std::locale::~locale((std::locale *)&v190);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v28);
              if (*(_DWORD *)(v28 + 600) == 7)
              {
LABEL_249:
                __print_back_trace();
                v182 = __cxa_allocate_exception(8uLL);
                *v182 = "LOG_FATAL encountered";
                __cxa_throw(v182, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v202.__r_.__value_.__l.__data_);
        }
        v14 = 1;
      }
      v56 = v199;
      if (v199)
      {
        p_shared_owners = (unint64_t *)&v199->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      locale = (std::locale::__imp *)((char *)locale + 24);
    }
    while (locale != v11);
  }
  v198 = &v208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v198);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, std::string **))(*(_QWORD *)*a1 + 184))(&v196, *a1, &v203);
  turi::gl_sframe::gl_sframe(&v198, &v196);
  v60 = v197;
  if (v197)
  {
    v61 = (unint64_t *)&v197->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = turi::visualization::batch_size((turi::visualization *)&v198, v59);
  v64 = v203;
  v65 = v204;
  if (v203 != v204)
  {
    v66 = v63;
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*a1 + 192))(&v190, *a1, v64);
      v67 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v190.__r_.__value_.__l.__data_ + 112))(v190.__r_.__value_.__r.__words[0]);
      if (v67)
      {
        if (v67 == 1)
        {
          _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v195);
          v80 = v195;
          v192 = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
          if (v190.__r_.__value_.__l.__size_)
          {
            v81 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          turi::gl_sarray::gl_sarray(&v208, &v192);
          (*(void (**)(uint64_t, std::locale *, unint64_t))(*(_QWORD *)v80 + 80))(v80, &v208, v66);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v208);
          v83 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v84 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          v86 = v195;
          v193 = v195;
          v87 = *((_QWORD *)&v195 + 1);
          if (*((_QWORD *)&v195 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v90 = v206.i64[1];
          if (v206.i64[1] >= v207[0])
          {
            v186 = v86;
            v104 = (v206.i64[1] - v206.i64[0]) >> 4;
            v105 = v104 + 1;
            if ((unint64_t)(v104 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v106 = v207[0] - v206.i64[0];
            if ((v207[0] - v206.i64[0]) >> 3 > v105)
              v105 = v106 >> 3;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
              v107 = 0xFFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            v211 = v207;
            v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v207, v107);
            v110 = &v108[16 * v104];
            *(_OWORD *)v110 = v186;
            v111 = (_QWORD *)v206.i64[1];
            v112 = (_QWORD *)v206.i64[0];
            if (v206.i64[1] == v206.i64[0])
            {
              v115 = vdupq_n_s64(v206.u64[1]);
              v113 = &v108[16 * v104];
            }
            else
            {
              v113 = &v108[16 * v104];
              do
              {
                v114 = *((_OWORD *)v111 - 1);
                v111 -= 2;
                *((_OWORD *)v113 - 1) = v114;
                v113 -= 16;
                *v111 = 0;
                v111[1] = 0;
              }
              while (v111 != v112);
              v115 = v206;
            }
            v91 = v110 + 16;
            v206.i64[0] = (uint64_t)v113;
            v206.i64[1] = (uint64_t)(v110 + 16);
            v209 = v115;
            v140 = v207[0];
            v207[0] = &v108[16 * v109];
            v210 = v140;
            v208.__locale_ = (std::locale::__imp *)v115.i64[0];
            std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v208);
          }
          else
          {
            *(_QWORD *)v206.i64[1] = v86;
            *(_QWORD *)(v90 + 8) = v87;
            v91 = (_OWORD *)(v90 + 16);
          }
          v206.i64[1] = (uint64_t)v91;
          v141 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
          if (!*((_QWORD *)&v195 + 1))
            goto LABEL_192;
          v142 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
        }
        else
        {
          if (v67 != 2)
            goto LABEL_192;
          _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization14item_frequencyENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v195);
          v68 = v195;
          v191 = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
          if (v190.__r_.__value_.__l.__size_)
          {
            v69 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          turi::gl_sarray::gl_sarray(&v208, &v191);
          (*(void (**)(uint64_t, std::locale *, unint64_t))(*(_QWORD *)v68 + 80))(v68, &v208, v66);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v208);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
          if (*((_QWORD *)&v191 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v74 = v195;
          v193 = v195;
          v75 = *((_QWORD *)&v195 + 1);
          if (*((_QWORD *)&v195 + 1))
          {
            v76 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v78 = v206.i64[1];
          if (v206.i64[1] >= v207[0])
          {
            v188 = v74;
            v128 = (v206.i64[1] - v206.i64[0]) >> 4;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v130 = v207[0] - v206.i64[0];
            if ((v207[0] - v206.i64[0]) >> 3 > v129)
              v129 = v130 >> 3;
            v131 = (unint64_t)v130 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v129;
            v211 = v207;
            v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v207, v131);
            v134 = &v132[16 * v128];
            *(_OWORD *)v134 = v188;
            v135 = (_QWORD *)v206.i64[1];
            v136 = (_QWORD *)v206.i64[0];
            if (v206.i64[1] == v206.i64[0])
            {
              v139 = vdupq_n_s64(v206.u64[1]);
              v137 = &v132[16 * v128];
            }
            else
            {
              v137 = &v132[16 * v128];
              do
              {
                v138 = *((_OWORD *)v135 - 1);
                v135 -= 2;
                *((_OWORD *)v137 - 1) = v138;
                v137 -= 16;
                *v135 = 0;
                v135[1] = 0;
              }
              while (v135 != v136);
              v139 = v206;
            }
            v79 = v134 + 16;
            v206.i64[0] = (uint64_t)v137;
            v206.i64[1] = (uint64_t)(v134 + 16);
            v209 = v139;
            v146 = v207[0];
            v207[0] = &v132[16 * v133];
            v210 = v146;
            v208.__locale_ = (std::locale::__imp *)v139.i64[0];
            std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v208);
          }
          else
          {
            *(_QWORD *)v206.i64[1] = v74;
            *(_QWORD *)(v78 + 8) = v75;
            v79 = (_OWORD *)(v78 + 16);
          }
          v206.i64[1] = (uint64_t)v79;
          v141 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
          if (!*((_QWORD *)&v195 + 1))
            goto LABEL_192;
          v147 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
          do
            v143 = __ldaxr(v147);
          while (__stlxr(v143 - 1, v147));
        }
      }
      else
      {
        _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v195);
        v92 = v195;
        v194 = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
        if (v190.__r_.__value_.__l.__size_)
        {
          v93 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        turi::gl_sarray::gl_sarray(&v208, &v194);
        (*(void (**)(uint64_t, std::locale *, unint64_t))(*(_QWORD *)v92 + 80))(v92, &v208, v66);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v208);
        v95 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
        if (*((_QWORD *)&v194 + 1))
        {
          v96 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = v195;
        v193 = v195;
        v99 = *((_QWORD *)&v195 + 1);
        if (*((_QWORD *)&v195 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v102 = v206.i64[1];
        if (v206.i64[1] >= v207[0])
        {
          v187 = v98;
          v116 = (v206.i64[1] - v206.i64[0]) >> 4;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v118 = v207[0] - v206.i64[0];
          if ((v207[0] - v206.i64[0]) >> 3 > v117)
            v117 = v118 >> 3;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
            v119 = 0xFFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          v211 = v207;
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v207, v119);
          v122 = &v120[16 * v116];
          *(_OWORD *)v122 = v187;
          v123 = (_QWORD *)v206.i64[1];
          v124 = (_QWORD *)v206.i64[0];
          if (v206.i64[1] == v206.i64[0])
          {
            v127 = vdupq_n_s64(v206.u64[1]);
            v125 = &v120[16 * v116];
          }
          else
          {
            v125 = &v120[16 * v116];
            do
            {
              v126 = *((_OWORD *)v123 - 1);
              v123 -= 2;
              *((_OWORD *)v125 - 1) = v126;
              v125 -= 16;
              *v123 = 0;
              v123[1] = 0;
            }
            while (v123 != v124);
            v127 = v206;
          }
          v103 = v122 + 16;
          v206.i64[0] = (uint64_t)v125;
          v206.i64[1] = (uint64_t)(v122 + 16);
          v209 = v127;
          v144 = v207[0];
          v207[0] = &v120[16 * v121];
          v210 = v144;
          v208.__locale_ = (std::locale::__imp *)v127.i64[0];
          std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v208);
        }
        else
        {
          *(_QWORD *)v206.i64[1] = v98;
          *(_QWORD *)(v102 + 8) = v99;
          v103 = (_OWORD *)(v102 + 16);
        }
        v206.i64[1] = (uint64_t)v103;
        v141 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
        if (!*((_QWORD *)&v195 + 1))
          goto LABEL_192;
        v145 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v143 = __ldaxr(v145);
        while (__stlxr(v143 - 1, v145));
      }
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
LABEL_192:
      size = (std::__shared_weak_count *)v190.__r_.__value_.__l.__size_;
      if (v190.__r_.__value_.__l.__size_)
      {
        v149 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v64;
    }
    while (v64 != v65);
  }
  if (v206.i64[1] == v206.i64[0])
    turi::visualization::plot_columnwise_summary(std::shared_ptr<turi::unity_sframe_base>)::$_1::operator()();
  v208.__locale_ = 0;
  v209 = 0uLL;
  v151 = v203;
  if (v204 != v203)
  {
    v152 = 0;
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*a1 + 192))(&v190, *a1, &v151[v152]);
      v153 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v190.__r_.__value_.__l.__data_ + 112))(v190.__r_.__value_.__r.__words[0]);
      v154 = v153;
      v155 = (std::locale::__imp *)v209.i64[0];
      if (v209.i64[0] >= (unint64_t)v209.i64[1])
      {
        v157 = v208.__locale_;
        v158 = v209.i64[0] - (unint64_t)v208.__locale_;
        v159 = v209.i64[0] - (unint64_t)v208.__locale_ + 1;
        if (v159 < 0)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v160 = v209.i64[1] - (unint64_t)v208.__locale_;
        if (2 * (v209.i64[1] - (unint64_t)v208.__locale_) > v159)
          v159 = 2 * v160;
        if (v160 >= 0x3FFFFFFFFFFFFFFFLL)
          v161 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
          v162 = (std::locale::__imp *)operator new(v161);
        else
          v162 = 0;
        v163 = (std::locale::__imp *)((char *)v162 + v158);
        v164 = (char *)v162 + v158;
        *v164 = v154;
        v156 = v164 + 1;
        if (v155 != v157)
        {
          v165 = (char *)v155 + ~(unint64_t)v157;
          do
          {
            v166 = *((_BYTE *)v155 - 1);
            v155 = (std::locale::__imp *)((char *)v155 - 1);
            (v165--)[(_QWORD)v162] = v166;
          }
          while (v155 != v157);
          v163 = v162;
        }
        v208.__locale_ = v163;
        v209.i64[0] = (uint64_t)v156;
        v209.i64[1] = (uint64_t)v162 + v161;
        if (v157)
          operator delete(v157);
      }
      else
      {
        *(_BYTE *)v209.i64[0] = v153;
        v156 = (char *)v155 + 1;
      }
      v209.i64[0] = (uint64_t)v156;
      v167 = (std::__shared_weak_count *)v190.__r_.__value_.__l.__size_;
      if (v190.__r_.__value_.__l.__size_)
      {
        v168 = (unint64_t *)(v190.__r_.__value_.__l.__size_ + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      ++v152;
      v151 = v203;
    }
    while (v152 < 0xAAAAAAAAAAAAAAABLL * (((char *)v204 - (char *)v203) >> 3));
  }
  v190.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  std::allocate_shared[abi:ne180100]<turi::visualization::summary_view_transformation,std::allocator<turi::visualization::summary_view_transformation>,turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long,void>((uint64_t)&v206, (__int128 **)&v203, (uint64_t)&v208, &v190, &v195);
  turi::visualization::summary_view_spec((turi::visualization *)((v206.i64[1] - v206.i64[0]) >> 4), &v190);
  v193 = v195;
  if (*((_QWORD *)&v195 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
  }
  v172 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  v189 = ((v206.i64[1] - v206.i64[0]) >> 4) * v172;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long,void>((uint64_t)&v190, (uint64_t *)&v193, (unint64_t *)&v189, v185);
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
  if (*((_QWORD *)&v193 + 1))
  {
    v174 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  if (v208.__locale_)
  {
    *(std::locale *)v209.i8 = v208;
    operator delete(v208.__locale_);
  }
  v198 = (std::locale *)off_24D91E9C0;
  v179 = v200;
  if (v200)
  {
    v180 = (unint64_t *)&v200->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v208.__locale_ = (std::locale::__imp *)&v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
  v208.__locale_ = (std::locale::__imp *)&v206;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
}

void sub_2185E9A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  std::locale::~locale((std::locale *)(v48 - 144));
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization9histogramIxEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_2185E9CEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization9histogramIxEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D94B628;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D94B710;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D94B678;
  return a1;
}

void sub_2185E9D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::histogram<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::histogram<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::histogram<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::visualization::histogram<long long>::~histogram(_QWORD *a1)
{
  turi::gl_sarray *v2;

  *a1 = &unk_24D94B710;
  v2 = (turi::gl_sarray *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  turi::gl_sarray::~gl_sarray(v2);
  return a1;
}

void turi::visualization::histogram<long long>::~histogram(_QWORD *a1)
{
  turi::gl_sarray *v1;

  *a1 = &unk_24D94B710;
  v1 = (turi::gl_sarray *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  turi::gl_sarray::~gl_sarray(v1);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    *a2 = *(_QWORD *)(a1 + 56);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 72);
  v11 = turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 72)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 72);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94B858;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 72) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 64);
  *a2 = *(_QWORD *)(a1 + 56);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_2185EA028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::eof(uint64_t a1)
{
  uint64_t v1;
  const char **v3;
  const char *v4;

  v4 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v3 = &v4;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v3);
  }
  v1 = *(_QWORD *)(a1 + 72);
  return v1 == turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
}

uint64_t turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get_total_rows(uint64_t a1)
{
  const char **v2;
  const char *v3;

  v3 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v2 = &v3;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v2);
  }
  return turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
}

uint64_t turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get_rows_processed(uint64_t a1)
{
  const char **v2;
  const char *v3;

  v3 = "Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v2 = &v3;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v2);
  }
  return *(_QWORD *)(a1 + 72);
}

uint64_t turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get_current@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return turi::visualization::histogram_result<long long>::histogram_result(a2, *(_QWORD *)(a1 + 56));
}

void turi::visualization::histogram<long long>::split_input(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  turi::gl_sarray *v12;
  uint64_t v13;

  v5 = *(_QWORD **)(a1 + 56);
  v6 = v5[1049];
  v7 = v5[1050];
  v8 = v5[1051];
  v9 = v5[1052];
  std::vector<turi::visualization::histogram_result<long long>>::vector(a3, a2);
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    v12 = (turi::gl_sarray *)(a1 + 16);
    do
    {
      v13 = turi::gl_sarray::dtype(v12);
      turi::visualization::histogram_result<long long>::init(v10, v13, v6, v7, v8, v9);
      v10 += 8424;
    }
    while (v10 != v11);
  }
}

void sub_2185EA210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram<long long>::merge_results(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v5 = *(_QWORD *)(a1 + 56);
    do
    {
      turi::groupby_operators::count::combine(v5 + 8, v2 + 1);
      turi::groupby_operators::count_distinct::combine(*(_QWORD *)(a1 + 56) + 24, v2 + 3);
      turi::groupby_operators::non_null_count::combine(*(_QWORD *)(a1 + 56) + 72, v2 + 9);
      turi::groupby_operators::average::combine(*(_QWORD *)(a1 + 56) + 88, v2 + 11);
      turi::groupby_operators::min::combine(*(_QWORD *)(a1 + 56) + 112, v2 + 14);
      turi::groupby_operators::max::combine(*(_QWORD *)(a1 + 56) + 144, v2 + 18);
      turi::groupby_operators::variance::combine(*(_QWORD *)(a1 + 56) + 352, v2 + 44);
      turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)(v2 + 26));
      turi::groupby_operators::quantile::combine(*(_QWORD *)(a1 + 56) + 176, v2 + 22);
      v6 = *(_QWORD **)(a1 + 56);
      if (v2[1049] >= v6[1049])
        v7 = v6[1049];
      else
        v7 = v2[1049];
      if (v6[1050] <= v2[1050])
        v8 = v2[1050];
      else
        v8 = v6[1050];
      v6[1049] = v7;
      v6[1050] = v8;
      turi::visualization::histogram_result<long long>::rescale(v6, v7, v8);
      turi::visualization::histogram_result<long long>::rescale(v2, v7, v8);
      v5 = *(_QWORD *)(a1 + 56);
      for (i = 49; i != 1049; ++i)
        *(_QWORD *)(v5 + 8 * i) += v2[i];
      v2 += 1053;
    }
    while (v2 != v3);
  }
}

void turi::visualization::histogram<long long>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int **v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int **v28;
  unsigned int *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int **v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int **v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int **v55;
  unsigned int *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int **v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unsigned int **v87;
  char *v88;
  double v89;
  unsigned int *v90;
  unsigned int **v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  __int128 v95;
  __int128 v96;
  size_t v97;
  char *v98;
  double v99;
  uint64_t v100;
  size_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  __int128 v105;
  __int128 v106;
  float v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int **v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int **v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int **v124;
  unsigned int *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int **v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int **v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int **v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int **v150;
  unsigned int *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int **v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int **v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int **v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int **v177;
  unsigned int *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int **v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  void *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int **v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int **v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int **v226;
  unsigned int *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int **v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  float v253;
  double v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  size_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  size_t v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  size_t v272;
  void *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  size_t v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int **v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int **v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int **v297;
  unsigned int *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  unsigned int **v305;
  size_t v306;
  char *v307;
  double v308;
  uint64_t v309;
  size_t v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  float v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  size_t v320;
  _QWORD *v321;
  uint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  unint64_t v325;
  size_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  size_t v333;
  void *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  size_t v341;
  std::runtime_error *v342;
  std::string *v343;
  __int128 v344;
  std::runtime_error *exception;
  std::string *v346;
  __int128 v347;
  std::runtime_error *v348;
  std::string *v349;
  __int128 v350;
  void *__p[2];
  __int128 v352;
  __int128 v353;
  __int128 v354;
  size_t v355;
  std::string v356;
  unsigned int **v357;
  int v358;
  char v359;
  unint64_t *v360;
  int v361;
  char v362;
  unsigned int **v363;
  int v364;
  char v365;
  unint64_t *v366;
  char v367;
  unsigned int **v368;
  int v369;
  char v370;
  unint64_t *v371;
  char v372;
  size_t v373;
  int v374;
  char v375;
  size_t __idx;
  int v377;
  char v378;
  double v379;
  int v380;
  char v381;
  unsigned int **v382;
  char v383;
  uint64_t v384;

  v384 = *MEMORY[0x24BDAC8D0];
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::init(a1, a2, a3);
  v4 = (_QWORD **)(a1 + 16);
  v5 = turi::gl_sarray::dtype((turi::gl_sarray *)(a1 + 16));
  if (v5 >= 2)
    turi::visualization::histogram<long long>::init(turi::gl_sarray const&,unsigned long)::{lambda(void)#1}::operator()();
  v6 = v5;
  v7 = turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
  if (v7 >= 2)
  {
    turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v382);
    if (v383 != 7)
    {
      turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 1uLL, (uint64_t)&v379);
      if (v381 == 7)
      {
        v8 = 0;
      }
      else
      {
        turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&__idx);
        v16 = 0.0;
        switch(v378)
        {
          case 0:
            v16 = (double)(uint64_t)__idx;
            break;
          case 1:
            v16 = *(double *)&__idx;
            break;
          case 2:
            v97 = __idx;
            *(double *)&v373 = 0.0;
            v98 = (char *)(__idx + 8);
            if (*(char *)(__idx + 31) < 0)
              v98 = *(char **)(__idx + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v98);
            v99 = std::stod((const std::string *)__p, &v373);
            if (SBYTE7(v352) < 0)
              operator delete(__p[0]);
            if (*(char *)(v97 + 31) < 0)
              v100 = *(_QWORD *)(v97 + 16);
            else
              v100 = *(unsigned __int8 *)(v97 + 31);
            if (v373 != v100)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v346 = std::string::append(&v356, " cannot be interpreted as a float");
              v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
              *(_QWORD *)&v352 = *((_QWORD *)&v346->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v347;
              v346->__r_.__value_.__l.__size_ = 0;
              v346->__r_.__value_.__r.__words[2] = 0;
              v346->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v253 = v99;
            v16 = v253;
            break;
          case 3:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(__idx + 8), *(_QWORD *)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 4);
            turi::flexible_type_fail(0);
            v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
            break;
          case 5:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 5);
            turi::flexible_type_fail(0);
            v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
            break;
          case 6:
            v16 = (double)v377 / 1000000.0 + (double)((uint64_t)(__idx << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            v101 = __idx;
            v102 = *(unsigned int **)(__idx + 16);
            __p[0] = *(void **)(__idx + 8);
            __p[1] = v102;
            if (v102)
            {
              v103 = v102 + 2;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            v105 = *(_OWORD *)(v101 + 24);
            v106 = *(_OWORD *)(v101 + 56);
            v353 = *(_OWORD *)(v101 + 40);
            v354 = v106;
            v352 = v105;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, __idx + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
            break;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_531;
        }
        if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          v8 = 0;
        }
        else
        {
          turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 1uLL, (uint64_t)&v373);
          v254 = 0.0;
          switch(v375)
          {
            case 0:
              v254 = (double)(uint64_t)v373;
              break;
            case 1:
              v254 = *(double *)&v373;
              break;
            case 2:
              v306 = v373;
              v355 = 0;
              v307 = (char *)(v373 + 8);
              if (*(char *)(v373 + 31) < 0)
                v307 = *(char **)(v373 + 8);
              std::string::basic_string[abi:ne180100]<0>(__p, v307);
              v308 = std::stod((const std::string *)__p, &v355);
              if (SBYTE7(v352) < 0)
                operator delete(__p[0]);
              if (*(char *)(v306 + 31) < 0)
                v309 = *(_QWORD *)(v306 + 16);
              else
                v309 = *(unsigned __int8 *)(v306 + 31);
              if (v355 != v309)
              {
                v348 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v349 = std::string::append(&v356, " cannot be interpreted as a float");
                v350 = *(_OWORD *)&v349->__r_.__value_.__l.__data_;
                *(_QWORD *)&v352 = *((_QWORD *)&v349->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v350;
                v349->__r_.__value_.__l.__size_ = 0;
                v349->__r_.__value_.__r.__words[2] = 0;
                v349->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v348, (const std::string *)__p);
                __cxa_throw(v348, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v316 = v308;
              v254 = v316;
              break;
            case 3:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v373 + 8), *(_QWORD *)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              break;
            case 4:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v373 + 8), *(uint64_t **)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
              break;
            case 5:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v373 + 8), *(uint64_t **)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
              break;
            case 6:
              v254 = (double)v374 / 1000000.0 + (double)((uint64_t)(v373 << 8) >> 8);
              break;
            case 7:
              break;
            case 8:
              v310 = v373;
              v311 = *(unsigned int **)(v373 + 16);
              __p[0] = *(void **)(v373 + 8);
              __p[1] = v311;
              if (v311)
              {
                v312 = v311 + 2;
                do
                  v313 = __ldxr(v312);
                while (__stxr(v313 + 1, v312));
              }
              v314 = *(_OWORD *)(v310 + 24);
              v315 = *(_OWORD *)(v310 + 56);
              v353 = *(_OWORD *)(v310 + 40);
              v354 = v315;
              v352 = v314;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, v373 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
              break;
            default:
              turi::flexible_type_fail(0);
              goto LABEL_531;
          }
          v8 = (*(_QWORD *)&v254 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          switch(v375)
          {
            case 2:
              v317 = (unint64_t *)v373;
              do
              {
                v318 = __ldaxr(v317);
                v319 = v318 - 1;
              }
              while (__stlxr(v319, v317));
              if (!v319)
              {
                v320 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  if (*(char *)(v373 + 31) < 0)
                    operator delete(*(void **)(v373 + 8));
                  v321 = (_QWORD *)v320;
                  v322 = 0x1012C404EF22A49;
                  goto LABEL_517;
                }
              }
              break;
            case 3:
              v330 = (unint64_t *)v373;
              do
              {
                v331 = __ldaxr(v330);
                v332 = v331 - 1;
              }
              while (__stlxr(v332, v330));
              if (!v332)
              {
                v333 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  v334 = *(void **)(v373 + 8);
                  if (v334)
                  {
                    *(_QWORD *)(v373 + 16) = v334;
                    operator delete(v334);
                  }
                  v321 = (_QWORD *)v333;
                  v322 = 0x1080C409938AC02;
                  goto LABEL_517;
                }
              }
              break;
            case 4:
              v323 = (unint64_t *)v373;
              do
              {
                v324 = __ldaxr(v323);
                v325 = v324 - 1;
              }
              while (__stlxr(v325, v323));
              if (!v325)
              {
                v326 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  __p[0] = (void *)(v373 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_516;
                }
              }
              break;
            case 5:
              v335 = (unint64_t *)v373;
              do
              {
                v336 = __ldaxr(v335);
                v337 = v336 - 1;
              }
              while (__stlxr(v337, v335));
              if (!v337)
              {
                v326 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  __p[0] = (void *)(v373 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_516:
                  v321 = (_QWORD *)v326;
                  v322 = 0x1020C405E66F15BLL;
                  goto LABEL_517;
                }
              }
              break;
            case 8:
              v338 = (unint64_t *)v373;
              do
              {
                v339 = __ldaxr(v338);
                v340 = v339 - 1;
              }
              while (__stlxr(v340, v338));
              if (!v340)
              {
                v341 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v373 + 16));
                  MEMORY[0x219A19A08](v341, 0x1030C40F1F0227BLL);
                }
                *(double *)&v373 = 0.0;
              }
              break;
            case 9:
              v327 = (unint64_t *)v373;
              do
              {
                v328 = __ldaxr(v327);
                v329 = v328 - 1;
              }
              while (__stlxr(v329, v327));
              if (!v329 && *(double *)&v373 != 0.0)
              {
                v321 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v373);
                v322 = 0x1030C407B73B9F7;
LABEL_517:
                MEMORY[0x219A19A08](v321, v322);
              }
              break;
            default:
              break;
          }
        }
        switch(v378)
        {
          case 2:
            v255 = (unint64_t *)__idx;
            do
            {
              v256 = __ldaxr(v255);
              v257 = v256 - 1;
            }
            while (__stlxr(v257, v255));
            if (!v257)
            {
              v258 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v259 = (_QWORD *)v258;
                v260 = 0x1012C404EF22A49;
                goto LABEL_427;
              }
            }
            break;
          case 3:
            v269 = (unint64_t *)__idx;
            do
            {
              v270 = __ldaxr(v269);
              v271 = v270 - 1;
            }
            while (__stlxr(v271, v269));
            if (!v271)
            {
              v272 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v273 = *(void **)(__idx + 8);
                if (v273)
                {
                  *(_QWORD *)(__idx + 16) = v273;
                  operator delete(v273);
                }
                v259 = (_QWORD *)v272;
                v260 = 0x1080C409938AC02;
                goto LABEL_427;
              }
            }
            break;
          case 4:
            v261 = (unint64_t *)__idx;
            do
            {
              v262 = __ldaxr(v261);
              v263 = v262 - 1;
            }
            while (__stlxr(v263, v261));
            if (!v263)
            {
              v264 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                __p[0] = (void *)(__idx + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_420;
              }
            }
            break;
          case 5:
            v274 = (unint64_t *)__idx;
            do
            {
              v275 = __ldaxr(v274);
              v276 = v275 - 1;
            }
            while (__stlxr(v276, v274));
            if (!v276)
            {
              v264 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                __p[0] = (void *)(__idx + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_420:
                v259 = (_QWORD *)v264;
                v260 = 0x1020C405E66F15BLL;
                goto LABEL_427;
              }
            }
            break;
          case 8:
            v277 = (unint64_t *)__idx;
            do
            {
              v278 = __ldaxr(v277);
              v279 = v278 - 1;
            }
            while (__stlxr(v279, v277));
            if (!v279)
            {
              v280 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v259 = (_QWORD *)v280;
                v268 = -235920773;
                goto LABEL_426;
              }
            }
            break;
          case 9:
            v265 = (unint64_t *)__idx;
            do
            {
              v266 = __ldaxr(v265);
              v267 = v266 - 1;
            }
            while (__stlxr(v267, v265));
            if (!v267 && *(double *)&__idx != 0.0)
            {
              v259 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)__idx);
              v268 = 2071181815;
LABEL_426:
              v260 = v268 | 0x1030C4000000000;
LABEL_427:
              MEMORY[0x219A19A08](v259, v260);
            }
            break;
          default:
            break;
        }
        switch(v381)
        {
          case 2:
            v281 = *(unint64_t **)&v379;
            do
            {
              v282 = __ldaxr(v281);
              v283 = v282 - 1;
            }
            while (__stlxr(v283, v281));
            if (!v283)
            {
              v284 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v379 + 8));
                v285 = v284;
                v286 = 0x1012C404EF22A49;
                goto LABEL_459;
              }
            }
            break;
          case 3:
            v294 = *(unint64_t **)&v379;
            do
            {
              v295 = __ldaxr(v294);
              v296 = v295 - 1;
            }
            while (__stlxr(v296, v294));
            if (!v296)
            {
              v297 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                v298 = *(unsigned int **)(*(_QWORD *)&v379 + 8);
                if (v298)
                {
                  *(_QWORD *)(*(_QWORD *)&v379 + 16) = v298;
                  operator delete(v298);
                }
                v285 = v297;
                v286 = 0x1080C409938AC02;
                goto LABEL_459;
              }
            }
            break;
          case 4:
            v287 = *(unint64_t **)&v379;
            do
            {
              v288 = __ldaxr(v287);
              v289 = v288 - 1;
            }
            while (__stlxr(v289, v287));
            if (!v289)
            {
              v290 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v379 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_458;
              }
            }
            break;
          case 5:
            v299 = *(unint64_t **)&v379;
            do
            {
              v300 = __ldaxr(v299);
              v301 = v300 - 1;
            }
            while (__stlxr(v301, v299));
            if (!v301)
            {
              v290 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v379 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_458:
                v285 = v290;
                v286 = 0x1020C405E66F15BLL;
                goto LABEL_459;
              }
            }
            break;
          case 8:
            v302 = *(unint64_t **)&v379;
            do
            {
              v303 = __ldaxr(v302);
              v304 = v303 - 1;
            }
            while (__stlxr(v304, v302));
            if (!v304)
            {
              v305 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v379 + 16));
                MEMORY[0x219A19A08](v305, 0x1030C40F1F0227BLL);
              }
              v379 = 0.0;
            }
            break;
          case 9:
            v291 = *(unint64_t **)&v379;
            do
            {
              v292 = __ldaxr(v291);
              v293 = v292 - 1;
            }
            while (__stlxr(v293, v291));
            if (!v293 && v379 != 0.0)
            {
              v285 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v379);
              v286 = 0x1030C407B73B9F7;
LABEL_459:
              MEMORY[0x219A19A08](v285, v286);
            }
            break;
          default:
            break;
        }
      }
      switch(v383)
      {
        case 2:
          v9 = (unint64_t *)v382;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (v11)
            goto LABEL_52;
          v12 = v382;
          if (!v382)
            goto LABEL_50;
          if (*((char *)v382 + 31) < 0)
            operator delete(v382[1]);
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        case 3:
          v25 = (unint64_t *)v382;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (v27)
            goto LABEL_52;
          v28 = v382;
          if (!v382)
            goto LABEL_50;
          v29 = v382[1];
          if (v29)
          {
            v382[2] = v29;
            operator delete(v29);
          }
          v13 = v28;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        case 4:
          v17 = (unint64_t *)v382;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (v19)
            goto LABEL_52;
          v20 = v382;
          if (!v382)
            goto LABEL_50;
          __p[0] = v382 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_42;
        case 5:
          v30 = (unint64_t *)v382;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (v32)
            goto LABEL_52;
          v20 = v382;
          if (!v382)
            goto LABEL_50;
          __p[0] = v382 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_42:
          v13 = v20;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        case 8:
          v33 = (unint64_t *)v382;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_52;
          v36 = v382;
          if (!v382)
            goto LABEL_50;
          boost::detail::shared_count::~shared_count(v382 + 2);
          v13 = v36;
          v24 = -235920773;
          goto LABEL_48;
        case 9:
          v21 = (unint64_t *)v382;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (v23)
            goto LABEL_52;
          if (!v382)
            goto LABEL_50;
          v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v382);
          v24 = 2071181815;
LABEL_48:
          v14 = v24 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
LABEL_50:
          if (!v8)
            goto LABEL_236;
LABEL_53:
          v37 = *(_QWORD *)(a1 + 56);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v371);
          turi::gl_sarray::operator[](v4, 1uLL, (uint64_t)&v368);
          turi::visualization::histogram_result<long long>::init(v37, v6, &v371, &v368);
          switch(v370)
          {
            case 2:
              v38 = (unint64_t *)v368;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = v368;
                if (v368)
                {
                  if (*((char *)v368 + 31) < 0)
                    operator delete(v368[1]);
                  v42 = v41;
                  v43 = 0x1012C404EF22A49;
                  goto LABEL_90;
                }
              }
              break;
            case 3:
              v52 = (unint64_t *)v368;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = v368;
                if (v368)
                {
                  v56 = v368[1];
                  if (v56)
                  {
                    v368[2] = v56;
                    operator delete(v56);
                  }
                  v42 = v55;
                  v43 = 0x1080C409938AC02;
                  goto LABEL_90;
                }
              }
              break;
            case 4:
              v44 = (unint64_t *)v368;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v47 = v368;
                if (v368)
                {
                  __p[0] = v368 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_83;
                }
              }
              break;
            case 5:
              v57 = (unint64_t *)v368;
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
              {
                v47 = v368;
                if (v368)
                {
                  __p[0] = v368 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_83:
                  v42 = v47;
                  v43 = 0x1020C405E66F15BLL;
                  goto LABEL_90;
                }
              }
              break;
            case 8:
              v60 = (unint64_t *)v368;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v63 = v368;
                if (v368)
                {
                  boost::detail::shared_count::~shared_count(v368 + 2);
                  v42 = v63;
                  v51 = -235920773;
                  goto LABEL_89;
                }
              }
              break;
            case 9:
              v48 = (unint64_t *)v368;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50 && v368)
              {
                v42 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v368);
                v51 = 2071181815;
LABEL_89:
                v43 = v51 | 0x1030C4000000000;
LABEL_90:
                MEMORY[0x219A19A08](v42, v43);
              }
              break;
            default:
              break;
          }
          v368 = 0;
          v369 = 0;
          v370 = 0;
          switch(v372)
          {
            case 2:
              v64 = v371;
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                v67 = v371;
                if (v371)
                  goto LABEL_279;
              }
              break;
            case 3:
              v76 = v371;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
              {
                v79 = v371;
                if (v371)
                  goto LABEL_296;
              }
              break;
            case 4:
              v68 = v371;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v71 = v371;
                if (v371)
                  goto LABEL_286;
              }
              break;
            case 5:
              v80 = v371;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v71 = v371;
                if (v371)
                  goto LABEL_303;
              }
              break;
            case 8:
              v83 = v371;
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v86 = v371;
                if (v371)
                  goto LABEL_309;
              }
              break;
            case 9:
              v72 = v371;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                v75 = v371;
                if (v371)
                  goto LABEL_291;
              }
              break;
            default:
              return;
          }
          break;
        default:
LABEL_52:
          if (v8)
            goto LABEL_53;
          goto LABEL_236;
      }
      return;
    }
LABEL_236:
    v159 = *(_QWORD *)(a1 + 56);
    v361 = 0;
    v362 = 1;
    v360 = 0;
    v358 = 0;
    v359 = 1;
    v357 = 0;
    turi::visualization::histogram_result<long long>::init(v159, v6, &v360, &v357);
    switch(v359)
    {
      case 2:
        v160 = (unint64_t *)v357;
        do
        {
          v161 = __ldaxr(v160);
          v162 = v161 - 1;
        }
        while (__stlxr(v162, v160));
        if (!v162)
        {
          v163 = v357;
          if (v357)
          {
            if (*((char *)v357 + 31) < 0)
              operator delete(v357[1]);
            v164 = v163;
            v165 = 0x1012C404EF22A49;
            goto LABEL_273;
          }
        }
        break;
      case 3:
        v174 = (unint64_t *)v357;
        do
        {
          v175 = __ldaxr(v174);
          v176 = v175 - 1;
        }
        while (__stlxr(v176, v174));
        if (!v176)
        {
          v177 = v357;
          if (v357)
          {
            v178 = v357[1];
            if (v178)
            {
              v357[2] = v178;
              operator delete(v178);
            }
            v164 = v177;
            v165 = 0x1080C409938AC02;
            goto LABEL_273;
          }
        }
        break;
      case 4:
        v166 = (unint64_t *)v357;
        do
        {
          v167 = __ldaxr(v166);
          v168 = v167 - 1;
        }
        while (__stlxr(v168, v166));
        if (!v168)
        {
          v169 = v357;
          if (v357)
          {
            __p[0] = v357 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_266;
          }
        }
        break;
      case 5:
        v179 = (unint64_t *)v357;
        do
        {
          v180 = __ldaxr(v179);
          v181 = v180 - 1;
        }
        while (__stlxr(v181, v179));
        if (!v181)
        {
          v169 = v357;
          if (v357)
          {
            __p[0] = v357 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_266:
            v164 = v169;
            v165 = 0x1020C405E66F15BLL;
            goto LABEL_273;
          }
        }
        break;
      case 8:
        v182 = (unint64_t *)v357;
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          v185 = v357;
          if (v357)
          {
            boost::detail::shared_count::~shared_count(v357 + 2);
            v164 = v185;
            v173 = -235920773;
            goto LABEL_272;
          }
        }
        break;
      case 9:
        v170 = (unint64_t *)v357;
        do
        {
          v171 = __ldaxr(v170);
          v172 = v171 - 1;
        }
        while (__stlxr(v172, v170));
        if (!v172 && v357)
        {
          v164 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v357);
          v173 = 2071181815;
LABEL_272:
          v165 = v173 | 0x1030C4000000000;
LABEL_273:
          MEMORY[0x219A19A08](v164, v165);
        }
        break;
      default:
        break;
    }
    v357 = 0;
    v358 = 0;
    v359 = 0;
    switch(v362)
    {
      case 2:
        v186 = v360;
        do
        {
          v187 = __ldaxr(v186);
          v188 = v187 - 1;
        }
        while (__stlxr(v188, v186));
        if (!v188)
        {
          v67 = v360;
          if (v360)
            goto LABEL_279;
        }
        break;
      case 3:
        v198 = v360;
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
        {
          v79 = v360;
          if (v360)
            goto LABEL_296;
        }
        break;
      case 4:
        v191 = v360;
        do
        {
          v192 = __ldaxr(v191);
          v193 = v192 - 1;
        }
        while (__stlxr(v193, v191));
        if (!v193)
        {
          v71 = v360;
          if (v360)
            goto LABEL_286;
        }
        break;
      case 5:
        v202 = v360;
        do
        {
          v203 = __ldaxr(v202);
          v204 = v203 - 1;
        }
        while (__stlxr(v204, v202));
        if (!v204)
        {
          v71 = v360;
          if (v360)
            goto LABEL_303;
        }
        break;
      case 8:
        v205 = v360;
        do
        {
          v206 = __ldaxr(v205);
          v207 = v206 - 1;
        }
        while (__stlxr(v207, v205));
        if (!v207)
        {
          v86 = v360;
          if (v360)
            goto LABEL_309;
        }
        break;
      case 9:
        v194 = v360;
        do
        {
          v195 = __ldaxr(v194);
          v196 = v195 - 1;
        }
        while (__stlxr(v196, v194));
        if (!v196)
        {
          v75 = v360;
          if (v360)
            goto LABEL_291;
        }
        break;
      default:
        return;
    }
    return;
  }
  if (v7 != 1)
    goto LABEL_236;
  turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v382);
  if (v383 == 7)
    goto LABEL_236;
  turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v379);
  v15 = 0.0;
  switch(v381)
  {
    case 0:
      v15 = (double)*(uint64_t *)&v379;
      goto LABEL_159;
    case 1:
      v15 = v379;
      goto LABEL_159;
    case 2:
      v87 = *(unsigned int ***)&v379;
      *(double *)&__idx = 0.0;
      v88 = (char *)(*(_QWORD *)&v379 + 8);
      if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
        v88 = *(char **)(*(_QWORD *)&v379 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v88);
      v89 = std::stod((const std::string *)__p, &__idx);
      if (SBYTE7(v352) < 0)
        operator delete(__p[0]);
      if (*((char *)v87 + 31) < 0)
        v90 = v87[2];
      else
        v90 = (unsigned int *)*((unsigned __int8 *)v87 + 31);
      if ((unsigned int *)__idx != v90)
      {
        v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v343 = std::string::append(&v356, " cannot be interpreted as a float");
        v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
        *(_QWORD *)&v352 = *((_QWORD *)&v343->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v344;
        v343->__r_.__value_.__l.__size_ = 0;
        v343->__r_.__value_.__r.__words[2] = 0;
        v343->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v342, (const std::string *)__p);
        __cxa_throw(v342, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v107 = v89;
      v15 = v107;
      goto LABEL_159;
    case 3:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v379 + 8), *(_QWORD *)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_159;
    case 4:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v379 + 8), *(uint64_t **)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
      goto LABEL_159;
    case 5:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v379 + 8), *(uint64_t **)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
      goto LABEL_159;
    case 6:
      v15 = (double)v380 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v379 << 8) >> 8);
      goto LABEL_159;
    case 7:
      goto LABEL_159;
    case 8:
      v91 = *(unsigned int ***)&v379;
      v92 = *(unsigned int **)(*(_QWORD *)&v379 + 16);
      __p[0] = *(void **)(*(_QWORD *)&v379 + 8);
      __p[1] = v92;
      if (v92)
      {
        v93 = v92 + 2;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = *(_OWORD *)(v91 + 3);
      v96 = *(_OWORD *)(v91 + 7);
      v353 = *(_OWORD *)(v91 + 5);
      v354 = v96;
      v352 = v95;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_159;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)&v379 + 8);
      turi::flexible_type_fail(0);
      turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_159:
      switch(v381)
      {
        case 2:
          v108 = *(unint64_t **)&v379;
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (!v110)
          {
            v111 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v379 + 8));
              v112 = v111;
              v113 = 0x1012C404EF22A49;
              goto LABEL_190;
            }
          }
          break;
        case 3:
          v121 = *(unint64_t **)&v379;
          do
          {
            v122 = __ldaxr(v121);
            v123 = v122 - 1;
          }
          while (__stlxr(v123, v121));
          if (!v123)
          {
            v124 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              v125 = *(unsigned int **)(*(_QWORD *)&v379 + 8);
              if (v125)
              {
                *(_QWORD *)(*(_QWORD *)&v379 + 16) = v125;
                operator delete(v125);
              }
              v112 = v124;
              v113 = 0x1080C409938AC02;
              goto LABEL_190;
            }
          }
          break;
        case 4:
          v114 = *(unint64_t **)&v379;
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v117 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v379 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_189;
            }
          }
          break;
        case 5:
          v126 = *(unint64_t **)&v379;
          do
          {
            v127 = __ldaxr(v126);
            v128 = v127 - 1;
          }
          while (__stlxr(v128, v126));
          if (!v128)
          {
            v117 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v379 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_189:
              v112 = v117;
              v113 = 0x1020C405E66F15BLL;
              goto LABEL_190;
            }
          }
          break;
        case 8:
          v129 = *(unint64_t **)&v379;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
          {
            v132 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v379 + 16));
              MEMORY[0x219A19A08](v132, 0x1030C40F1F0227BLL);
            }
            v379 = 0.0;
          }
          break;
        case 9:
          v118 = *(unint64_t **)&v379;
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120 && v379 != 0.0)
          {
            v112 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v379);
            v113 = 0x1030C407B73B9F7;
LABEL_190:
            MEMORY[0x219A19A08](v112, v113);
          }
          break;
        default:
          break;
      }
      switch(v383)
      {
        case 2:
          v133 = (unint64_t *)v382;
          do
          {
            v134 = __ldaxr(v133);
            v135 = v134 - 1;
          }
          while (__stlxr(v135, v133));
          if (v135)
            goto LABEL_313;
          v136 = v382;
          if (!v382)
            goto LABEL_235;
          if (*((char *)v382 + 31) < 0)
            operator delete(v382[1]);
          v137 = v136;
          v138 = 0x1012C404EF22A49;
          goto LABEL_234;
        case 3:
          v147 = (unint64_t *)v382;
          do
          {
            v148 = __ldaxr(v147);
            v149 = v148 - 1;
          }
          while (__stlxr(v149, v147));
          if (v149)
            goto LABEL_313;
          v150 = v382;
          if (!v382)
            goto LABEL_235;
          v151 = v382[1];
          if (v151)
          {
            v382[2] = v151;
            operator delete(v151);
          }
          v137 = v150;
          v138 = 0x1080C409938AC02;
          goto LABEL_234;
        case 4:
          v139 = (unint64_t *)v382;
          do
          {
            v140 = __ldaxr(v139);
            v141 = v140 - 1;
          }
          while (__stlxr(v141, v139));
          if (v141)
            goto LABEL_313;
          v142 = v382;
          if (!v382)
            goto LABEL_235;
          __p[0] = v382 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_227;
        case 5:
          v152 = (unint64_t *)v382;
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (v154)
            goto LABEL_313;
          v142 = v382;
          if (!v382)
            goto LABEL_235;
          __p[0] = v382 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_227:
          v137 = v142;
          v138 = 0x1020C405E66F15BLL;
          goto LABEL_234;
        case 8:
          v155 = (unint64_t *)v382;
          do
          {
            v156 = __ldaxr(v155);
            v157 = v156 - 1;
          }
          while (__stlxr(v157, v155));
          if (v157)
            goto LABEL_313;
          v158 = v382;
          if (!v382)
            goto LABEL_235;
          boost::detail::shared_count::~shared_count(v382 + 2);
          v137 = v158;
          v146 = -235920773;
          goto LABEL_233;
        case 9:
          v143 = (unint64_t *)v382;
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (v145)
            goto LABEL_313;
          if (!v382)
            goto LABEL_235;
          v137 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v382);
          v146 = 2071181815;
LABEL_233:
          v138 = v146 | 0x1030C4000000000;
LABEL_234:
          MEMORY[0x219A19A08](v137, v138);
LABEL_235:
          if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            goto LABEL_236;
LABEL_314:
          v208 = *(_QWORD *)(a1 + 56);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v366);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v363);
          turi::visualization::histogram_result<long long>::init(v208, v6, &v366, &v363);
          switch(v365)
          {
            case 2:
              v209 = (unint64_t *)v363;
              do
              {
                v210 = __ldaxr(v209);
                v211 = v210 - 1;
              }
              while (__stlxr(v211, v209));
              if (!v211)
              {
                v212 = v363;
                if (v363)
                {
                  if (*((char *)v363 + 31) < 0)
                    operator delete(v363[1]);
                  v213 = v212;
                  v214 = 0x1012C404EF22A49;
                  goto LABEL_351;
                }
              }
              break;
            case 3:
              v223 = (unint64_t *)v363;
              do
              {
                v224 = __ldaxr(v223);
                v225 = v224 - 1;
              }
              while (__stlxr(v225, v223));
              if (!v225)
              {
                v226 = v363;
                if (v363)
                {
                  v227 = v363[1];
                  if (v227)
                  {
                    v363[2] = v227;
                    operator delete(v227);
                  }
                  v213 = v226;
                  v214 = 0x1080C409938AC02;
                  goto LABEL_351;
                }
              }
              break;
            case 4:
              v215 = (unint64_t *)v363;
              do
              {
                v216 = __ldaxr(v215);
                v217 = v216 - 1;
              }
              while (__stlxr(v217, v215));
              if (!v217)
              {
                v218 = v363;
                if (v363)
                {
                  __p[0] = v363 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_344;
                }
              }
              break;
            case 5:
              v228 = (unint64_t *)v363;
              do
              {
                v229 = __ldaxr(v228);
                v230 = v229 - 1;
              }
              while (__stlxr(v230, v228));
              if (!v230)
              {
                v218 = v363;
                if (v363)
                {
                  __p[0] = v363 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_344:
                  v213 = v218;
                  v214 = 0x1020C405E66F15BLL;
                  goto LABEL_351;
                }
              }
              break;
            case 8:
              v231 = (unint64_t *)v363;
              do
              {
                v232 = __ldaxr(v231);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, v231));
              if (!v233)
              {
                v234 = v363;
                if (v363)
                {
                  boost::detail::shared_count::~shared_count(v363 + 2);
                  v213 = v234;
                  v222 = -235920773;
                  goto LABEL_350;
                }
              }
              break;
            case 9:
              v219 = (unint64_t *)v363;
              do
              {
                v220 = __ldaxr(v219);
                v221 = v220 - 1;
              }
              while (__stlxr(v221, v219));
              if (!v221 && v363)
              {
                v213 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v363);
                v222 = 2071181815;
LABEL_350:
                v214 = v222 | 0x1030C4000000000;
LABEL_351:
                MEMORY[0x219A19A08](v213, v214);
              }
              break;
            default:
              break;
          }
          v363 = 0;
          v364 = 0;
          v365 = 0;
          switch(v367)
          {
            case 2:
              v235 = v366;
              do
              {
                v236 = __ldaxr(v235);
                v237 = v236 - 1;
              }
              while (__stlxr(v237, v235));
              if (!v237)
              {
                v67 = v366;
                if (v366)
                {
LABEL_279:
                  if (*((char *)v67 + 31) < 0)
                    operator delete((void *)v67[1]);
                  v189 = v67;
                  v190 = 0x1012C404EF22A49;
                  goto LABEL_311;
                }
              }
              break;
            case 3:
              v244 = v366;
              do
              {
                v245 = __ldaxr(v244);
                v246 = v245 - 1;
              }
              while (__stlxr(v246, v244));
              if (!v246)
              {
                v79 = v366;
                if (v366)
                {
LABEL_296:
                  v201 = (void *)v79[1];
                  if (v201)
                  {
                    v79[2] = (unint64_t)v201;
                    operator delete(v201);
                  }
                  v189 = v79;
                  v190 = 0x1080C409938AC02;
                  goto LABEL_311;
                }
              }
              break;
            case 4:
              v238 = v366;
              do
              {
                v239 = __ldaxr(v238);
                v240 = v239 - 1;
              }
              while (__stlxr(v240, v238));
              if (!v240)
              {
                v71 = v366;
                if (v366)
                {
LABEL_286:
                  __p[0] = v71 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_304;
                }
              }
              break;
            case 5:
              v247 = v366;
              do
              {
                v248 = __ldaxr(v247);
                v249 = v248 - 1;
              }
              while (__stlxr(v249, v247));
              if (!v249)
              {
                v71 = v366;
                if (v366)
                {
LABEL_303:
                  __p[0] = v71 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_304:
                  v189 = v71;
                  v190 = 0x1020C405E66F15BLL;
                  goto LABEL_311;
                }
              }
              break;
            case 8:
              v250 = v366;
              do
              {
                v251 = __ldaxr(v250);
                v252 = v251 - 1;
              }
              while (__stlxr(v252, v250));
              if (!v252)
              {
                v86 = v366;
                if (v366)
                {
LABEL_309:
                  boost::detail::shared_count::~shared_count((unsigned int **)v86 + 2);
                  v189 = v86;
                  v197 = -235920773;
                  goto LABEL_310;
                }
              }
              break;
            case 9:
              v241 = v366;
              do
              {
                v242 = __ldaxr(v241);
                v243 = v242 - 1;
              }
              while (__stlxr(v243, v241));
              if (!v243)
              {
                v75 = v366;
                if (v366)
                {
LABEL_291:
                  v189 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v75);
                  v197 = 2071181815;
LABEL_310:
                  v190 = v197 | 0x1030C4000000000;
LABEL_311:
                  MEMORY[0x219A19A08](v189, v190);
                }
              }
              break;
            default:
              return;
          }
          break;
        default:
LABEL_313:
          if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            goto LABEL_314;
          goto LABEL_236;
      }
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_531:
      __break(1u);
      break;
  }
}

void sub_2185EBFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,char a30,uint64_t a31,int a32,char a33,uint64_t a34,int a35,char a36,uint64_t a37,int a38,char a39,uint64_t a40,int a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned int v149;
  void *v150;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v43 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v44 - 124))
      {
        case 2:
          v46 = *(unint64_t **)(v44 - 136);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (v48)
            goto LABEL_46;
          v49 = *(_QWORD *)(v44 - 136);
          if (!v49)
            goto LABEL_46;
          if (*(char *)(v49 + 31) < 0)
            operator delete(*(void **)(v49 + 8));
          v50 = (_QWORD *)v49;
          v51 = 0x1012C404EF22A49;
          break;
        case 3:
          v60 = *(unint64_t **)(v44 - 136);
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (v62)
            goto LABEL_46;
          v63 = *(_QWORD **)(v44 - 136);
          if (!v63)
            goto LABEL_46;
          v64 = (void *)v63[1];
          if (v64)
          {
            v63[2] = v64;
            operator delete(v64);
          }
          v50 = v63;
          v51 = 0x1080C409938AC02;
          break;
        case 4:
          v52 = *(unint64_t **)(v44 - 136);
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (v54)
            goto LABEL_46;
          v55 = *(_QWORD **)(v44 - 136);
          if (!v55)
            goto LABEL_46;
          a22 = v55 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_38;
        case 5:
          v65 = *(unint64_t **)(v44 - 136);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (v67)
            goto LABEL_46;
          v55 = *(_QWORD **)(v44 - 136);
          if (!v55)
            goto LABEL_46;
          a22 = v55 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_38:
          v50 = v55;
          v51 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v68 = *(unint64_t **)(v44 - 136);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = *(_QWORD *)(v44 - 136);
            if (v71)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v71 + 16));
              MEMORY[0x219A19A08](v71, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 136) = 0;
          }
          goto LABEL_46;
        case 9:
          v56 = *(unint64_t **)(v44 - 136);
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (v58)
            goto LABEL_46;
          v59 = *(_QWORD **)(v44 - 136);
          if (!v59)
            goto LABEL_46;
          v50 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v59);
          v51 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v50, v51);
LABEL_46:
      switch(*(_BYTE *)(v44 - 108))
      {
        case 2:
          v72 = *(unint64_t **)(v44 - 120);
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (v74)
            goto LABEL_84;
          v75 = *(_QWORD *)(v44 - 120);
          if (!v75)
            goto LABEL_84;
          if (*(char *)(v75 + 31) < 0)
            operator delete(*(void **)(v75 + 8));
          v76 = (_QWORD *)v75;
          v77 = 0x1012C404EF22A49;
          break;
        case 3:
          v86 = *(unint64_t **)(v44 - 120);
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (v88)
            goto LABEL_84;
          v89 = *(_QWORD **)(v44 - 120);
          if (!v89)
            goto LABEL_84;
          v90 = (void *)v89[1];
          if (v90)
          {
            v89[2] = v90;
            operator delete(v90);
          }
          v76 = v89;
          v77 = 0x1080C409938AC02;
          break;
        case 4:
          v78 = *(unint64_t **)(v44 - 120);
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (v80)
            goto LABEL_84;
          v81 = *(_QWORD **)(v44 - 120);
          if (!v81)
            goto LABEL_84;
          a22 = v81 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_76;
        case 5:
          v91 = *(unint64_t **)(v44 - 120);
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (v93)
            goto LABEL_84;
          v81 = *(_QWORD **)(v44 - 120);
          if (!v81)
            goto LABEL_84;
          a22 = v81 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_76:
          v76 = v81;
          v77 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v94 = *(unint64_t **)(v44 - 120);
          do
          {
            v95 = __ldaxr(v94);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, v94));
          if (!v96)
          {
            v97 = *(_QWORD *)(v44 - 120);
            if (v97)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v97 + 16));
              MEMORY[0x219A19A08](v97, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 120) = 0;
          }
          goto LABEL_84;
        case 9:
          v82 = *(unint64_t **)(v44 - 120);
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (v84)
            goto LABEL_84;
          v85 = *(_QWORD **)(v44 - 120);
          if (!v85)
            goto LABEL_84;
          v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v85);
          v77 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_84;
      }
      MEMORY[0x219A19A08](v76, v77);
LABEL_84:
      switch(*(_BYTE *)(v44 - 92))
      {
        case 2:
          v98 = *(unint64_t **)(v44 - 104);
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (v100)
            goto LABEL_122;
          v101 = *(_QWORD *)(v44 - 104);
          if (!v101)
            goto LABEL_122;
          if (*(char *)(v101 + 31) < 0)
            operator delete(*(void **)(v101 + 8));
          v102 = (_QWORD *)v101;
          v103 = 0x1012C404EF22A49;
          break;
        case 3:
          v112 = *(unint64_t **)(v44 - 104);
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (v114)
            goto LABEL_122;
          v115 = *(_QWORD **)(v44 - 104);
          if (!v115)
            goto LABEL_122;
          v116 = (void *)v115[1];
          if (v116)
          {
            v115[2] = v116;
            operator delete(v116);
          }
          v102 = v115;
          v103 = 0x1080C409938AC02;
          break;
        case 4:
          v104 = *(unint64_t **)(v44 - 104);
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (v106)
            goto LABEL_122;
          v107 = *(_QWORD **)(v44 - 104);
          if (!v107)
            goto LABEL_122;
          a22 = v107 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_114;
        case 5:
          v117 = *(unint64_t **)(v44 - 104);
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (v119)
            goto LABEL_122;
          v107 = *(_QWORD **)(v44 - 104);
          if (!v107)
            goto LABEL_122;
          a22 = v107 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_114:
          v102 = v107;
          v103 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v120 = *(unint64_t **)(v44 - 104);
          do
          {
            v121 = __ldaxr(v120);
            v122 = v121 - 1;
          }
          while (__stlxr(v122, v120));
          if (!v122)
          {
            v123 = *(_QWORD *)(v44 - 104);
            if (v123)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v123 + 16));
              MEMORY[0x219A19A08](v123, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 104) = 0;
          }
          goto LABEL_122;
        case 9:
          v108 = *(unint64_t **)(v44 - 104);
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (v110)
            goto LABEL_122;
          v111 = *(_QWORD **)(v44 - 104);
          if (!v111)
            goto LABEL_122;
          v102 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v111);
          v103 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_122;
      }
      MEMORY[0x219A19A08](v102, v103);
LABEL_122:
      switch(*(_BYTE *)(v44 - 76))
      {
        case 2:
          v124 = *(unint64_t **)(v44 - 88);
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (v126)
            goto LABEL_164;
          v127 = *(_QWORD *)(v44 - 88);
          if (!v127)
            goto LABEL_164;
          if (*(char *)(v127 + 31) < 0)
            operator delete(*(void **)(v127 + 8));
          v147 = (_QWORD *)v127;
          v148 = 0x1012C404EF22A49;
          goto LABEL_163;
        case 3:
          v136 = *(unint64_t **)(v44 - 88);
          do
          {
            v137 = __ldaxr(v136);
            v138 = v137 - 1;
          }
          while (__stlxr(v138, v136));
          if (v138)
            goto LABEL_164;
          v139 = *(_QWORD **)(v44 - 88);
          if (!v139)
            goto LABEL_164;
          v150 = (void *)v139[1];
          if (v150)
          {
            v139[2] = v150;
            operator delete(v150);
          }
          v147 = v139;
          v148 = 0x1080C409938AC02;
          goto LABEL_163;
        case 4:
          v128 = *(unint64_t **)(v44 - 88);
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (v130)
            goto LABEL_164;
          v131 = *(_QWORD **)(v44 - 88);
          if (!v131)
            goto LABEL_164;
          a22 = v131 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_160;
        case 5:
          v140 = *(unint64_t **)(v44 - 88);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (v142)
            goto LABEL_164;
          v131 = *(_QWORD **)(v44 - 88);
          if (!v131)
            goto LABEL_164;
          a22 = v131 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_160:
          v147 = v131;
          v148 = 0x1020C405E66F15BLL;
          goto LABEL_163;
        case 8:
          v143 = *(unint64_t **)(v44 - 88);
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (v145)
            goto LABEL_164;
          v146 = *(_QWORD *)(v44 - 88);
          if (!v146)
            goto LABEL_164;
          boost::detail::shared_count::~shared_count((unsigned int **)(v146 + 16));
          v147 = (_QWORD *)v146;
          v149 = -235920773;
          goto LABEL_162;
        case 9:
          v132 = *(unint64_t **)(v44 - 88);
          do
          {
            v133 = __ldaxr(v132);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, v132));
          if (v134)
            goto LABEL_164;
          v135 = *(_QWORD **)(v44 - 88);
          if (!v135)
            goto LABEL_164;
          v147 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v135);
          v149 = 2071181815;
LABEL_162:
          v148 = v149 | 0x1030C4000000000;
LABEL_163:
          MEMORY[0x219A19A08](v147, v148);
LABEL_164:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_164;
      }
    }
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

_QWORD *turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::histogram_result<long long>>::vector(a2, a1);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  const char **v8;

  *(_QWORD *)&v7 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = (const char **)&v7;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v8);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sarray::operator=(a1 + 16, a2);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization16histogram_resultIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 56, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
}

_QWORD *std::vector<turi::visualization::histogram_result<long long>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::visualization::histogram_result<long long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = 8424 * a2;
    v6 = v4 + 8424 * a2;
    do
    {
      turi::visualization::histogram_result<long long>::histogram_result(v4);
      v4 += 8424;
      v5 -= 8424;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_2185ED198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::visualization::histogram_result<long long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x7C798EB55D1CFLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::visualization::histogram_result<long long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8424 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::visualization::histogram_result<long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7C798EB55D1CFLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8424 * a2);
}

uint64_t turi::visualization::histogram_result<long long>::histogram_result(uint64_t a1)
{
  char *v2;
  char *v3;

  *(_QWORD *)a1 = &unk_24D94B778;
  *(_QWORD *)(a1 + 8) = &unk_24D92FF70;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = &unk_24D930060;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = &unk_24D930150;
  *(_QWORD *)(a1 + 112) = &unk_24D92FCA0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  *(_QWORD *)(a1 + 184) = 0;
  v2 = (char *)(a1 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(a1 + 208, 0.005);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 352) = &unk_24D930420;
  *(_QWORD *)(a1 + 360) = 0;
  v3 = (char *)operator new(8uLL);
  *(_QWORD *)v3 = 0x3FE0000000000000;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v2, v3, (uint64_t)(v3 + 8), 1uLL);
  operator delete(v3);
  return a1;
}

void sub_2185ED3BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  turi::groupby_operators::min *v3;
  turi::groupby_operators::max *v4;
  turi::groupby_operators::quantile *v5;
  void *v6;
  uint64_t v7;

  operator delete(v6);
  turi::groupby_operators::quantile::~quantile(v5);
  turi::groupby_operators::max::~max(v4);
  turi::groupby_operators::min::~min(v3);
  *(_QWORD *)(v1 + 24) = v7 + 16;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::histogram_result<long long>::~histogram_result(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D94B778;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 232);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  turi::groupby_operators::max::~max((turi::groupby_operators::max *)(a1 + 144));
  turi::groupby_operators::min::~min((turi::groupby_operators::min *)(a1 + 112));
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(a1 + 32);
  return a1;
}

{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D94B778;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 232);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  turi::groupby_operators::max::~max((turi::groupby_operators::max *)(a1 + 144));
  turi::groupby_operators::min::~min((turi::groupby_operators::min *)(a1 + 112));
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(a1 + 32);
  return MEMORY[0x219A19A08](a1, 0x10A3C40313F5341);
}

void turi::visualization::histogram_result<long long>::vega_column_data(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  turi::flexible_type_impl *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  std::string v25;
  void **v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;

  turi::visualization::histogram_result<long long>::get_bins(a1, 0x14uLL, (uint64_t)v22);
  v1 = (v23 - v24) / 0x14uLL;
  v21[0] = v24;
  v21[1] = v23;
  v21[2] = v1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v14 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v15 = (void **)*MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v13 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    v5 = v22[0];
    if (v4 < (uint64_t)(v22[1] - v22[0]) >> 4)
    {
      if (v4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
        v5 = v22[0];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"{\"left\": ", 9);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",\"right\": ", 10);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", \"count\": ", 11);
      v6 = (turi::flexible_type_impl *)(v5 + v3);
      switch(*(_BYTE *)(v5 + v3 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
          std::ostream::operator<<();
          std::stringbuf::str();
          v26[0] = v15;
          *(void ***)((char *)v26 + (_QWORD)*(v15 - 3)) = v14;
          v27 = v16;
          v7 = v13;
          goto LABEL_14;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
          std::ostream::operator<<();
          std::stringbuf::str();
          v26[0] = v15;
          *(void ***)((char *)v26 + (_QWORD)*(v15 - 3)) = v14;
          v7 = MEMORY[0x24BEDB848] + 16;
          v27 = v16;
LABEL_14:
          v28 = v7;
          if (v30 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v31);
          goto LABEL_21;
        case 2:
          v8 = *(_QWORD *)v6;
          if (*(char *)(*(_QWORD *)v6 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
          }
          else
          {
            v9 = *(_OWORD *)(v8 + 8);
            v25.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
            *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
          }
          goto LABEL_21;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v26, (_QWORD *)(*(_QWORD *)v6 + 8));
          goto LABEL_21;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v26, (uint64_t *)(*(_QWORD *)v6 + 8));
          goto LABEL_21;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v26, (_QWORD *)(*(_QWORD *)v6 + 8));
          goto LABEL_21;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v6, &v25);
          goto LABEL_21;
        case 7:
          memset(&v25, 0, sizeof(v25));
          goto LABEL_21;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_21;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v26, (_QWORD *)(*(_QWORD *)v6 + 8));
LABEL_21:
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &v25;
          else
            v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          else
            size = v25.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v10, size);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          v3 += 16;
          v2 += v1;
          ++v4;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"}", 1);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  if (a1[2] != a1[10])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"{\"missing\": true", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", \"count\": ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"}", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)",", 1);
  turi::visualization::bin_specification_object<long long>::serialize((uint64_t)v21, (uint64_t)v17);
  std::stringbuf::str();
  v17[0] = v15;
  *(_QWORD *)((char *)v17 + (_QWORD)*(v15 - 3)) = v14;
  v18[0] = v16;
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v20);
  v26[0] = (void **)v22;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v26);
}

void sub_2185EDA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  a18 = (uint64_t)&a56;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::histogram_result<long long>::vega_summary_data(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  double v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type size;
  _QWORD *v45;
  _QWORD *v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  float v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  double v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  __int128 v107;
  __int128 v108;
  float v109;
  std::string *v110;
  std::string::size_type v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  double v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  __int128 v155;
  __int128 v156;
  float v157;
  std::string *v158;
  std::string::size_type v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  unsigned int v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  __int128 *p_str;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  double v196;
  __int128 *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  void **v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v206;
  __int128 v207;
  std::runtime_error *v208;
  std::string *v209;
  __int128 v210;
  std::runtime_error *v211;
  std::string *v212;
  __int128 v213;
  std::string v214;
  void *v215[2];
  unsigned __int8 v216;
  void *v217[2];
  unsigned __int8 v218;
  void *v219;
  void *v220;
  uint64_t v221;
  _QWORD v222[2];
  _QWORD v223[11];
  char v224;
  uint64_t v225;
  __int128 __str;
  __int128 __str_16;
  __int128 v228;
  __int128 v229;
  void *__p;
  char v231;
  uint64_t v232;
  size_t __idx;
  uint64_t v234;
  int v235;
  char v236;
  std::string v237;
  uint64_t v238;

  v238 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v222);
  turi::groupby_operators::quantile::emit((turi::groupby_operators::quantile *)(a1 + 176), (uint64_t *)&v237);
  v220 = 0;
  v221 = 0;
  v219 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v219, *(const void **)(v237.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16) - *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 8)) >> 3);
  switch(v237.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v2 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v237.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v237.__r_.__value_.__r.__words[0] + 8));
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v19 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          v23 = *(void **)(v237.__r_.__value_.__r.__words[0] + 8);
          if (v23)
          {
            *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16) = v23;
            operator delete(v23);
          }
          v6 = v22;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v8 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&__str = v237.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v24 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v11 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&__str = v237.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_35:
          v6 = v11;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v237.__r_.__value_.__r.__words[0] + 16));
          v6 = v30;
          v18 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v12 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          v16 = *(void **)(v237.__r_.__value_.__r.__words[0] + 48);
          if (v16)
          {
            *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 56) = v16;
            operator delete(v16);
          }
          v17 = *(void **)(v15 + 24);
          if (v17)
          {
            *(_QWORD *)(v15 + 32) = v17;
            operator delete(v17);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v15 + 8);
          v6 = v15;
          v18 = 2071181815;
LABEL_41:
          v7 = v18 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  v31 = *(double *)v219;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(v217, a1, 1);
  v32 = *(char *)(a1 + 384);
  if (v32 > 9)
    v33 = "undefined";
  else
    v33 = off_24D94BD20[v32];
  std::string::basic_string[abi:ne180100]<0>(v215, v33);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"type\": \"", 9);
  if ((v216 & 0x80u) == 0)
    v35 = v215;
  else
    v35 = (void **)v215[0];
  if ((v216 & 0x80u) == 0)
    v36 = v216;
  else
    v36 = (uint64_t)v215[1];
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\",", 2);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"num_unique\": ", 14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  v39 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)&__str = v39;
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&__str + *(_QWORD *)(v39 - 24)) = v41;
  v42 = v40;
  *(_QWORD *)&__str_16 = v40;
  *((_QWORD *)&__str_16 + 1) = MEMORY[0x24BEDB848] + 16;
  if (v231 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v232);
  if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v237;
  else
    v43 = (std::string *)v237.__r_.__value_.__r.__words[0];
  if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  else
    size = v237.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v43, size);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"num_missing\": ", 15);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"mean\": ", 8);
  turi::groupby_operators::average::emit(a1 + 88, (uint64_t)&v234);
  v47 = 0.0;
  switch(v236)
  {
    case 0:
      v47 = (double)v234;
      goto LABEL_92;
    case 1:
      v47 = *(double *)&v234;
      goto LABEL_92;
    case 2:
      v51 = v234;
      __idx = 0;
      v52 = (char *)(v234 + 8);
      if (*(char *)(v234 + 31) < 0)
        v52 = *(char **)(v234 + 8);
      std::string::basic_string[abi:ne180100]<0>(&__str, v52);
      v53 = std::stod((const std::string *)&__str, &__idx);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      if (*(char *)(v51 + 31) < 0)
        v54 = *(_QWORD *)(v51 + 16);
      else
        v54 = *(unsigned __int8 *)(v51 + 31);
      if (__idx != v54)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v206 = std::string::append(&v237, " cannot be interpreted as a float");
        v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str_16 = *((_QWORD *)&v206->__r_.__value_.__l + 2);
        __str = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__str);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v61 = v53;
      v47 = v61;
      goto LABEL_92;
    case 3:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__str)
      {
        *((_QWORD *)&__str + 1) = __str;
        operator delete((void *)__str);
      }
      goto LABEL_92;
    case 4:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
      goto LABEL_92;
    case 5:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
      goto LABEL_92;
    case 6:
      v47 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
      goto LABEL_92;
    case 7:
      goto LABEL_92;
    case 8:
      v55 = v234;
      v56 = *(_QWORD *)(v234 + 16);
      *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
      *((_QWORD *)&__str + 1) = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = *(_OWORD *)(v55 + 24);
      v60 = *(_OWORD *)(v55 + 56);
      v228 = *(_OWORD *)(v55 + 40);
      v229 = v60;
      __str_16 = v59;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
      goto LABEL_92;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v228 + 1))
      {
        *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
        operator delete(*((void **)&v228 + 1));
      }
      if ((_QWORD)__str_16)
      {
        *((_QWORD *)&__str_16 + 1) = __str_16;
        operator delete((void *)__str_16);
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
      if (*((_QWORD *)&__str + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
LABEL_92:
      turi::visualization::escape_float(v47, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v214;
      else
        v62 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v63 = v214.__r_.__value_.__l.__size_;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v62, v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v65 = (unint64_t *)v234;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v69 = v68;
              v70 = 0x1012C404EF22A49;
              goto LABEL_141;
            }
          }
          break;
        case 3:
          v82 = (unint64_t *)v234;
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            v85 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v86 = *(void **)(v234 + 8);
              if (v86)
              {
                *(_QWORD *)(v234 + 16) = v86;
                operator delete(v86);
              }
              v69 = v85;
              v70 = 0x1080C409938AC02;
              goto LABEL_141;
            }
          }
          break;
        case 4:
          v71 = (unint64_t *)v234;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            v74 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_134;
            }
          }
          break;
        case 5:
          v87 = (unint64_t *)v234;
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            v74 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_134:
              v69 = v74;
              v70 = 0x1020C405E66F15BLL;
              goto LABEL_141;
            }
          }
          break;
        case 8:
          v90 = (unint64_t *)v234;
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            v93 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v69 = v93;
              v81 = -235920773;
              goto LABEL_140;
            }
          }
          break;
        case 9:
          v75 = (unint64_t *)v234;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            v78 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v79 = *(void **)(v234 + 48);
              if (v79)
              {
                *(_QWORD *)(v234 + 56) = v79;
                operator delete(v79);
              }
              v80 = *(void **)(v78 + 24);
              if (v80)
              {
                *(_QWORD *)(v78 + 32) = v80;
                operator delete(v80);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v78 + 8);
              v69 = v78;
              v81 = 2071181815;
LABEL_140:
              v70 = v81 | 0x1030C4000000000;
LABEL_141:
              MEMORY[0x219A19A08](v69, v70);
            }
          }
          break;
        default:
          break;
      }
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"min\": ", 7);
      turi::groupby_operators::max::emit(a1 + 112, (uint64_t)&v234);
      v95 = 0.0;
      switch(v236)
      {
        case 0:
          v95 = (double)v234;
          break;
        case 1:
          v95 = *(double *)&v234;
          break;
        case 2:
          v99 = v234;
          __idx = 0;
          v100 = (char *)(v234 + 8);
          if (*(char *)(v234 + 31) < 0)
            v100 = *(char **)(v234 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__str, v100);
          v101 = std::stod((const std::string *)&__str, &__idx);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (*(char *)(v99 + 31) < 0)
            v102 = *(_QWORD *)(v99 + 16);
          else
            v102 = *(unsigned __int8 *)(v99 + 31);
          if (__idx != v102)
          {
            v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v209 = std::string::append(&v237, " cannot be interpreted as a float");
            v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str_16 = *((_QWORD *)&v209->__r_.__value_.__l + 2);
            __str = v210;
            v209->__r_.__value_.__l.__size_ = 0;
            v209->__r_.__value_.__r.__words[2] = 0;
            v209->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v208, (const std::string *)&__str);
            __cxa_throw(v208, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v109 = v101;
          v95 = v109;
          break;
        case 3:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__str)
          {
            *((_QWORD *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          break;
        case 4:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 5:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 6:
          v95 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          v103 = v234;
          v104 = *(_QWORD *)(v234 + 16);
          *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
          *((_QWORD *)&__str + 1) = v104;
          if (v104)
          {
            v105 = (unsigned int *)(v104 + 8);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v107 = *(_OWORD *)(v103 + 24);
          v108 = *(_OWORD *)(v103 + 56);
          v228 = *(_OWORD *)(v103 + 40);
          v229 = v108;
          __str_16 = v107;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v228 + 1))
          {
            *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
            operator delete(*((void **)&v228 + 1));
          }
          if ((_QWORD)__str_16)
          {
            *((_QWORD *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          v96 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v97 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          break;
        default:
LABEL_336:
          result = turi::flexible_type_fail(0);
          goto LABEL_340;
      }
      turi::visualization::escape_float(v95, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v110 = &v214;
      else
        v110 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v111 = v214.__r_.__value_.__l.__size_;
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v110, v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v113 = (unint64_t *)v234;
          do
          {
            v114 = __ldaxr(v113);
            v115 = v114 - 1;
          }
          while (__stlxr(v115, v113));
          if (!v115)
          {
            v116 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v117 = v116;
              v118 = 0x1012C404EF22A49;
              goto LABEL_221;
            }
          }
          break;
        case 3:
          v130 = (unint64_t *)v234;
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            v133 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v134 = *(void **)(v234 + 8);
              if (v134)
              {
                *(_QWORD *)(v234 + 16) = v134;
                operator delete(v134);
              }
              v117 = v133;
              v118 = 0x1080C409938AC02;
              goto LABEL_221;
            }
          }
          break;
        case 4:
          v119 = (unint64_t *)v234;
          do
          {
            v120 = __ldaxr(v119);
            v121 = v120 - 1;
          }
          while (__stlxr(v121, v119));
          if (!v121)
          {
            v122 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_214;
            }
          }
          break;
        case 5:
          v135 = (unint64_t *)v234;
          do
          {
            v136 = __ldaxr(v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, v135));
          if (!v137)
          {
            v122 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_214:
              v117 = v122;
              v118 = 0x1020C405E66F15BLL;
              goto LABEL_221;
            }
          }
          break;
        case 8:
          v138 = (unint64_t *)v234;
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
          {
            v141 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v117 = v141;
              v129 = -235920773;
              goto LABEL_220;
            }
          }
          break;
        case 9:
          v123 = (unint64_t *)v234;
          do
          {
            v124 = __ldaxr(v123);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, v123));
          if (!v125)
          {
            v126 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v127 = *(void **)(v234 + 48);
              if (v127)
              {
                *(_QWORD *)(v234 + 56) = v127;
                operator delete(v127);
              }
              v128 = *(void **)(v126 + 24);
              if (v128)
              {
                *(_QWORD *)(v126 + 32) = v128;
                operator delete(v128);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v126 + 8);
              v117 = v126;
              v129 = 2071181815;
LABEL_220:
              v118 = v129 | 0x1030C4000000000;
LABEL_221:
              MEMORY[0x219A19A08](v117, v118);
            }
          }
          break;
        default:
          break;
      }
      v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"max\": ", 7);
      turi::groupby_operators::max::emit(a1 + 144, (uint64_t)&v234);
      v143 = 0.0;
      switch(v236)
      {
        case 0:
          v143 = (double)v234;
          break;
        case 1:
          v143 = *(double *)&v234;
          break;
        case 2:
          v147 = v234;
          __idx = 0;
          v148 = (char *)(v234 + 8);
          if (*(char *)(v234 + 31) < 0)
            v148 = *(char **)(v234 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__str, v148);
          v149 = std::stod((const std::string *)&__str, &__idx);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (*(char *)(v147 + 31) < 0)
            v150 = *(_QWORD *)(v147 + 16);
          else
            v150 = *(unsigned __int8 *)(v147 + 31);
          if (__idx != v150)
          {
            v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v212 = std::string::append(&v237, " cannot be interpreted as a float");
            v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str_16 = *((_QWORD *)&v212->__r_.__value_.__l + 2);
            __str = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v211, (const std::string *)&__str);
            __cxa_throw(v211, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v157 = v149;
          v143 = v157;
          break;
        case 3:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__str)
          {
            *((_QWORD *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          break;
        case 4:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 5:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 6:
          v143 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          v151 = v234;
          v152 = *(_QWORD *)(v234 + 16);
          *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
          *((_QWORD *)&__str + 1) = v152;
          if (v152)
          {
            v153 = (unsigned int *)(v152 + 8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          v155 = *(_OWORD *)(v151 + 24);
          v156 = *(_OWORD *)(v151 + 56);
          v228 = *(_OWORD *)(v151 + 40);
          v229 = v156;
          __str_16 = v155;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v228 + 1))
          {
            *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
            operator delete(*((void **)&v228 + 1));
          }
          if ((_QWORD)__str_16)
          {
            *((_QWORD *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          v144 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v145 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          break;
        default:
          goto LABEL_336;
      }
      turi::visualization::escape_float(v143, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v214;
      else
        v158 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v159 = v214.__r_.__value_.__l.__size_;
      v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v158, v159);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v161 = (unint64_t *)v234;
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          if (!v163)
          {
            v164 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v165 = v164;
              v166 = 0x1012C404EF22A49;
              goto LABEL_301;
            }
          }
          break;
        case 3:
          v178 = (unint64_t *)v234;
          do
          {
            v179 = __ldaxr(v178);
            v180 = v179 - 1;
          }
          while (__stlxr(v180, v178));
          if (!v180)
          {
            v181 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v182 = *(void **)(v234 + 8);
              if (v182)
              {
                *(_QWORD *)(v234 + 16) = v182;
                operator delete(v182);
              }
              v165 = v181;
              v166 = 0x1080C409938AC02;
              goto LABEL_301;
            }
          }
          break;
        case 4:
          v167 = (unint64_t *)v234;
          do
          {
            v168 = __ldaxr(v167);
            v169 = v168 - 1;
          }
          while (__stlxr(v169, v167));
          if (!v169)
          {
            v170 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_294;
            }
          }
          break;
        case 5:
          v183 = (unint64_t *)v234;
          do
          {
            v184 = __ldaxr(v183);
            v185 = v184 - 1;
          }
          while (__stlxr(v185, v183));
          if (!v185)
          {
            v170 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_294:
              v165 = v170;
              v166 = 0x1020C405E66F15BLL;
              goto LABEL_301;
            }
          }
          break;
        case 8:
          v186 = (unint64_t *)v234;
          do
          {
            v187 = __ldaxr(v186);
            v188 = v187 - 1;
          }
          while (__stlxr(v188, v186));
          if (!v188)
          {
            v189 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v165 = v189;
              v177 = -235920773;
              goto LABEL_300;
            }
          }
          break;
        case 9:
          v171 = (unint64_t *)v234;
          do
          {
            v172 = __ldaxr(v171);
            v173 = v172 - 1;
          }
          while (__stlxr(v173, v171));
          if (!v173)
          {
            v174 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v175 = *(void **)(v234 + 48);
              if (v175)
              {
                *(_QWORD *)(v234 + 56) = v175;
                operator delete(v175);
              }
              v176 = *(void **)(v174 + 24);
              if (v176)
              {
                *(_QWORD *)(v174 + 32) = v176;
                operator delete(v176);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v174 + 8);
              v165 = v174;
              v177 = 2071181815;
LABEL_300:
              v166 = v177 | 0x1030C4000000000;
LABEL_301:
              MEMORY[0x219A19A08](v165, v166);
            }
          }
          break;
        default:
          break;
      }
      v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"median\": ", 10);
      turi::visualization::escape_float(v31, (std::string *)&__str);
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        p_str = &__str;
      else
        p_str = (__int128 *)__str;
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v192 = BYTE7(__str_16);
      else
        v192 = *((_QWORD *)&__str + 1);
      v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)p_str, v192);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)",", 1);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"stdev\": ", 9);
      v195 = *(_QWORD *)(a1 + 360);
      v196 = 0.0;
      if (v195 >= 2)
        v196 = *(double *)(a1 + 376) / (double)v195;
      turi::visualization::escape_float(sqrt(v196), (std::string *)&__str);
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v197 = &__str;
      else
        v197 = (__int128 *)__str;
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v198 = BYTE7(__str_16);
      else
        v198 = *((_QWORD *)&__str + 1);
      v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)v197, v198);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)",", 1);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"numeric\": [", 12);
      if ((v218 & 0x80u) == 0)
        v201 = v217;
      else
        v201 = (void **)v217[0];
      if ((v218 & 0x80u) == 0)
        v202 = v218;
      else
        v202 = (uint64_t)v217[1];
      v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)v201, v202);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"],", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"categorical\": []", 17);
      std::stringbuf::str();
      if ((char)v216 < 0)
        operator delete(v215[0]);
      if ((char)v218 < 0)
        operator delete(v217[0]);
      if (v219)
      {
        v220 = v219;
        operator delete(v219);
      }
      v222[0] = v39;
      *(_QWORD *)((char *)v222 + *(_QWORD *)(v39 - 24)) = v41;
      v223[0] = v42;
      v223[1] = MEMORY[0x24BEDB848] + 16;
      if (v224 < 0)
        operator delete((void *)v223[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x219A198F4](&v225);
      break;
    default:
      result = turi::flexible_type_fail(0);
LABEL_340:
      __break(1u);
      break;
  }
  return result;
}

void sub_2185EEFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  void *v68;
  int v69;
  uint64_t v70;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;

  if (a68 < 0)
    operator delete(__p);
  if (*(char *)(v70 - 121) < 0)
  {
    operator delete(*(void **)(v70 - 144));
    if ((v69 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v69)
  {
LABEL_8:
    switch(*(_BYTE *)(v70 - 148))
    {
      case 2:
        v72 = *(unint64_t **)(v70 - 160);
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (v74)
          goto LABEL_51;
        v93 = *(_QWORD *)(v70 - 160);
        if (!v93)
          goto LABEL_51;
        if (*(char *)(v93 + 31) < 0)
          operator delete(*(void **)(v93 + 8));
        v91 = (_QWORD *)v93;
        v94 = 0x1012C404EF22A49;
        goto LABEL_50;
      case 3:
        v81 = *(unint64_t **)(v70 - 160);
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (v83)
          goto LABEL_51;
        v97 = *(_QWORD **)(v70 - 160);
        if (!v97)
          goto LABEL_51;
        v98 = (void *)v97[1];
        if (v98)
        {
          v97[2] = v98;
          operator delete(v98);
        }
        v91 = v97;
        v94 = 0x1080C409938AC02;
        goto LABEL_50;
      case 4:
        v75 = *(unint64_t **)(v70 - 160);
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (v77)
          goto LABEL_51;
        v95 = *(_QWORD **)(v70 - 160);
        if (!v95)
          goto LABEL_51;
        *(_QWORD *)(v70 - 144) = v95 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v70 - 144));
        goto LABEL_49;
      case 5:
        v84 = *(unint64_t **)(v70 - 160);
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (v86)
          goto LABEL_51;
        v95 = *(_QWORD **)(v70 - 160);
        if (!v95)
          goto LABEL_51;
        *(_QWORD *)(v70 - 144) = v95 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v70 - 144));
LABEL_49:
        v91 = v95;
        v94 = 0x1020C405E66F15BLL;
        goto LABEL_50;
      case 8:
        v87 = *(unint64_t **)(v70 - 160);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (v89)
          goto LABEL_51;
        v90 = *(_QWORD *)(v70 - 160);
        if (!v90)
          goto LABEL_51;
        boost::detail::shared_count::~shared_count((unsigned int **)(v90 + 16));
        v91 = (_QWORD *)v90;
        v92 = -235920773;
        goto LABEL_40;
      case 9:
        v78 = *(unint64_t **)(v70 - 160);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (v80)
          goto LABEL_51;
        v96 = *(_QWORD **)(v70 - 160);
        if (!v96)
          goto LABEL_51;
        v91 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v96);
        v92 = 2071181815;
LABEL_40:
        v94 = v92 | 0x1030C4000000000;
LABEL_50:
        MEMORY[0x219A19A08](v91, v94);
LABEL_51:
        if (a18 < 0)
          operator delete(a13);
        if (a24 < 0)
          operator delete(a19);
        if (a25)
          operator delete(a25);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_51;
    }
  }
  __cxa_free_exception(v68);
  goto LABEL_8;
}

void turi::visualization::histogram_result<long long>::get_bins(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD **v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  double *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  void *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double v100;
  _QWORD *v101;
  double v102;
  std::string *v103;
  __int128 v104;
  unint64_t *v105;
  _QWORD *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  __int128 v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  uint64_t v133;
  void **v134;
  uint64_t v135[3];

  v135[2] = *MEMORY[0x24BDAC8D0];
  if ((uint64_t)a2 <= 0)
    turi::visualization::histogram_result<long long>::get_bins(long long)const::{lambda(void)#1}::operator()();
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = a1[1051];
  v6 = (double)v5;
  v7 = (double)(a1[1052] - v5);
  v8 = vcvtmd_u64_f64(((double)a1[1049] - (double)v5) / v7 * 1000.0);
  if (v8 == 1000)
    v9 = 999;
  else
    v9 = v8;
  v10 = vcvtmd_u64_f64(((double)a1[1050] - v6) / v7 * 1000.0);
  if (v10 == 1000)
    v11 = 999;
  else
    v11 = v10;
  if (a2 >= 0xFB)
    turi::visualization::histogram_result<long long>::get_bins(long long)const::{lambda(void)#2}::operator()();
  v12 = v11 - v9 + 1;
  if (v12 % a2)
  {
    v13 = a2 - v12 % a2;
    v12 += v13;
    v14 = a2;
    v15 = v13 >> 1;
    v16 = (v13 & 1) + (v13 >> 1);
  }
  else
  {
    v14 = a2;
    v15 = 0;
    v16 = 0;
  }
  *(uint64_t *)((char *)v135 + 5) = 0;
  v135[0] = 0;
  std::vector<turi::flexible_type>::vector(&v132, v14, v135);
  v131 = v14;
  v129 = v12 / v14;
  std::vector<turi::flexible_type>::__vdeallocate((void **)a3);
  *(_OWORD *)a3 = v132;
  *(_QWORD *)(a3 + 16) = v133;
  v133 = 0;
  v132 = 0uLL;
  v134 = (void **)&v132;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v134);
  switch(BYTE4(v135[1]))
  {
    case 2:
      v17 = (unint64_t *)v135[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v135[0];
        if (v135[0])
        {
          if (*(char *)(v135[0] + 31) < 0)
            operator delete(*(void **)(v135[0] + 8));
          v21 = v20;
          v22 = 0x1012C404EF22A49;
          goto LABEL_53;
        }
      }
      break;
    case 3:
      v34 = (unint64_t *)v135[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v135[0];
        if (v135[0])
        {
          v38 = *(void **)(v135[0] + 8);
          if (v38)
          {
            *(_QWORD *)(v135[0] + 16) = v38;
            operator delete(v38);
          }
          v21 = v37;
          v22 = 0x1080C409938AC02;
          goto LABEL_53;
        }
      }
      break;
    case 4:
      v23 = (unint64_t *)v135[0];
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = v135[0];
        if (v135[0])
        {
          v134 = (void **)(v135[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v134);
          goto LABEL_46;
        }
      }
      break;
    case 5:
      v39 = (unint64_t *)v135[0];
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v26 = v135[0];
        if (v135[0])
        {
          v134 = (void **)(v135[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v134);
LABEL_46:
          v21 = v26;
          v22 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        }
      }
      break;
    case 8:
      v42 = (unint64_t *)v135[0];
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = v135[0];
        if (v135[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v135[0] + 16));
          v21 = v45;
          v33 = -235920773;
          goto LABEL_52;
        }
      }
      break;
    case 9:
      v27 = (unint64_t *)v135[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v135[0];
        if (v135[0])
        {
          v31 = *(void **)(v135[0] + 48);
          if (v31)
          {
            *(_QWORD *)(v135[0] + 56) = v31;
            operator delete(v31);
          }
          v32 = *(void **)(v30 + 24);
          if (v32)
          {
            *(_QWORD *)(v30 + 32) = v32;
            operator delete(v32);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30 + 8);
          v21 = v30;
          v33 = 2071181815;
LABEL_52:
          v22 = v33 | 0x1030C4000000000;
LABEL_53:
          MEMORY[0x219A19A08](v21, v22);
        }
      }
      break;
    default:
      break;
  }
  v130 = v12;
  v46 = 0;
  v47 = a1[1051];
  v48 = (double)(a1[1052] - v47);
  v128 = v9 - v15;
  v49 = (double)v47;
  if ((uint64_t)(v11 + v16 + 1) < 1000)
    v50 = v11 + v16 + 1;
  else
    v50 = 1000;
  v51.i64[0] = v50;
  v51.i64[1] = (v9 - v15) & ~((uint64_t)(v9 - v15) >> 63);
  *(int64x2_t *)(a3 + 24) = vcvtq_s64_f64(vmlaq_n_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0), vdivq_f64(vcvtq_f64_s64(v51), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)), v48));
  v52 = a1 + 49;
  if (v129 <= 1)
    v53 = 1;
  else
    v53 = v129;
  v54 = v131;
  do
  {
    if (v130 >= v54)
    {
      v55 = 0;
      v56 = v128 + v46 * v129;
      do
      {
        if (v56 + v55 <= 0x3E7)
        {
          v57 = (_QWORD **)(*(_QWORD *)a3 + 16 * v46);
          v58 = v52[v56 + v55];
          switch(*((_BYTE *)v57 + 12))
          {
            case 0:
              v59 = (unint64_t)*v57 + v58;
              goto LABEL_112;
            case 1:
              *(double *)v57 = *(double *)v57 + (double)v58;
              goto LABEL_142;
            case 2:
              v100 = *(double *)v57;
              if (**v57 == 1)
                goto LABEL_141;
              v101 = (_QWORD *)operator new();
              v102 = *(double *)v57;
              *v101 = **v57;
              v103 = (std::string *)(v101 + 1);
              if (*(char *)(*(_QWORD *)&v102 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v103, *(const std::string::value_type **)(*(_QWORD *)&v102 + 8), *(_QWORD *)(*(_QWORD *)&v102 + 16));
              }
              else
              {
                v104 = *(_OWORD *)(*(_QWORD *)&v102 + 8);
                v101[3] = *(_QWORD *)(*(_QWORD *)&v102 + 24);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
              }
              *v57 = v101;
              *v101 = 1;
              do
              {
                v126 = __ldaxr(*(unint64_t **)&v100);
                v127 = v126 - 1;
              }
              while (__stlxr(v127, *(unint64_t **)&v100));
              if (v127)
                goto LABEL_141;
              if (*(char *)(*(_QWORD *)&v100 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v100 + 8));
              v114 = *(unint64_t **)&v100;
              v115 = 0x1012C404EF22A49;
              goto LABEL_140;
            case 3:
              v60 = *v57;
              if (**v57 != 1)
              {
                v61 = (_QWORD *)operator new();
                v62 = *v57;
                *v61 = **v57;
                v61[2] = 0;
                v61[3] = 0;
                v61[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v61 + 1, (const void *)v62[1], v62[2], (uint64_t)(v62[2] - v62[1]) >> 3);
                *v57 = v61;
                *v61 = 1;
                do
                {
                  v63 = __ldaxr(v60);
                  v64 = v63 - 1;
                }
                while (__stlxr(v64, v60));
                if (!v64)
                {
                  v65 = (void *)v60[1];
                  if (v65)
                  {
                    v60[2] = (unint64_t)v65;
                    operator delete(v65);
                  }
                  MEMORY[0x219A19A08](v60, 0x1080C409938AC02);
                }
              }
              v66 = (double *)(*v57)[1];
              v67 = (*v57)[2] - (_QWORD)v66;
              if (v67)
              {
                v68 = v67 >> 3;
                if (v68 <= 1)
                  v68 = 1;
                do
                {
                  *v66 = *v66 + (double)v58;
                  ++v66;
                  --v68;
                }
                while (v68);
              }
              goto LABEL_142;
            case 4:
              v105 = *v57;
              if (**v57 == 1)
                goto LABEL_141;
              v106 = (_QWORD *)operator new();
              v107 = *v57;
              *v106 = **v57;
              v106[2] = 0;
              v106[3] = 0;
              v106[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v106 + 1, (uint64_t *)v107[1], (uint64_t *)v107[2], (uint64_t)(v107[2] - v107[1]) >> 4);
              *v57 = v106;
              *v106 = 1;
              do
              {
                v108 = __ldaxr(v105);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v105));
              if (v109)
                goto LABEL_141;
              *(_QWORD *)&v132 = v105 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
              goto LABEL_124;
            case 5:
              v105 = *v57;
              if (**v57 == 1)
                goto LABEL_141;
              v110 = (_QWORD *)operator new();
              v111 = *v57;
              *v110 = **v57;
              v110[2] = 0;
              v110[3] = 0;
              v110[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v110 + 1, (uint64_t *)v111[1], (uint64_t *)v111[2], (uint64_t)(v111[2] - v111[1]) >> 5);
              *v57 = v110;
              *v110 = 1;
              do
              {
                v112 = __ldaxr(v105);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v105));
              if (v113)
                goto LABEL_141;
              *(_QWORD *)&v132 = v105 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
LABEL_124:
              v114 = v105;
              v115 = 0x1020C405E66F15BLL;
              goto LABEL_140;
            case 6:
              v59 = (unint64_t)*v57 & 0xFF00000000000000 | ((unint64_t)*v57 + v58) & 0xFFFFFFFFFFFFFFLL;
LABEL_112:
              *v57 = (_QWORD *)v59;
              goto LABEL_142;
            case 7:
              goto LABEL_141;
            case 8:
              v116 = *v57;
              if (**v57 == 1)
                goto LABEL_141;
              v117 = operator new();
              v118 = *v57;
              *(_QWORD *)v117 = **v57;
              *(_QWORD *)(v117 + 8) = v118[1];
              v119 = v118[2];
              *(_QWORD *)(v117 + 16) = v119;
              if (v119)
              {
                v120 = (unsigned int *)(v119 + 8);
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
              }
              v122 = *(_OWORD *)(v118 + 3);
              v123 = *(_OWORD *)(v118 + 5);
              *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 7);
              *(_OWORD *)(v117 + 40) = v123;
              *(_OWORD *)(v117 + 24) = v122;
              *v57 = (_QWORD *)v117;
              *(_QWORD *)v117 = 1;
              do
              {
                v124 = __ldaxr(v116);
                v125 = v124 - 1;
              }
              while (__stlxr(v125, v116));
              if (v125)
                goto LABEL_141;
              boost::detail::shared_count::~shared_count((unsigned int **)v116 + 2);
              v114 = v116;
              v115 = 0x1030C40F1F0227BLL;
LABEL_140:
              MEMORY[0x219A19A08](v114, v115);
LABEL_141:
              turi::flexible_type_fail(0);
              goto LABEL_142;
            case 9:
              v69 = *v57;
              if (**v57 != 1)
              {
                v70 = (_QWORD *)operator new();
                v71 = (uint64_t)(*v57 + 1);
                *v70 = **v57;
                turi::flexible_type_impl::ndarray<double>::ndarray(v70 + 1, v71);
                *v57 = v70;
                *v70 = 1;
                do
                {
                  v72 = __ldaxr(v69);
                  v73 = v72 - 1;
                }
                while (__stlxr(v73, v69));
                if (!v73)
                {
                  v74 = (void *)v69[6];
                  if (v74)
                  {
                    v69[7] = (unint64_t)v74;
                    operator delete(v74);
                  }
                  v75 = (void *)v69[3];
                  if (v75)
                  {
                    v69[4] = (unint64_t)v75;
                    operator delete(v75);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v69 + 1));
                  MEMORY[0x219A19A08](v69, 0x1030C407B73B9F7);
                }
              }
              v76 = *v57;
              v78 = (uint64_t *)v76[3];
              v77 = (uint64_t *)v76[4];
              if (v77 == v78)
                goto LABEL_142;
              if (!v76[1])
                goto LABEL_142;
              v79 = 1;
              do
              {
                v80 = *v78++;
                v79 *= v80;
              }
              while (v78 != v77);
              if (!v79)
                goto LABEL_142;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v76 + 1);
              v81 = (v76[4] - v76[3]) >> 3;
              v134 = 0;
              std::vector<unsigned long>::vector(&v132, v81, &v134);
              v83 = *((_QWORD *)&v132 + 1);
              v82 = (uint64_t *)v132;
              break;
            default:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
          }
          do
          {
            v84 = 0;
            v85 = v83 - (_QWORD)v82;
            if (v85)
            {
              v86 = v85 >> 3;
              v87 = (uint64_t *)v76[6];
              if (v86 <= 1)
                v86 = 1;
              do
              {
                v89 = *v82++;
                v88 = v89;
                v90 = *v87++;
                v84 += v90 * v88;
                --v86;
              }
              while (v86);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v76 + 1);
            *(double *)(*(_QWORD *)v76[1] + 8 * (v76[9] + v84)) = *(double *)(*(_QWORD *)v76[1] + 8 * (v76[9] + v84))
                                                                + (double)v58;
            v83 = *((_QWORD *)&v132 + 1);
            v82 = (uint64_t *)v132;
            v91 = (uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 3;
            v92 = v91 - 1;
            if ((uint64_t)(*((_QWORD *)&v132 + 1) - v132) >= 1)
            {
              v93 = v76[3];
              v94 = *(_QWORD *)(v132 + 8 * v92) + 1;
              *(_QWORD *)(v132 + 8 * v92) = v94;
              if (v94 >= *(_QWORD *)(v93 + 8 * v92))
              {
                v95 = (unint64_t *)&v82[v91 - 2];
                v96 = v93 - 16;
                while (1)
                {
                  v97 = v91 - 1;
                  v95[1] = 0;
                  if (v91 - 1 <= 0)
                    goto LABEL_107;
                  v98 = *v95 + 1;
                  *v95-- = v98;
                  v99 = *(_QWORD *)(v96 + 8 * v91--);
                  if (v98 < v99)
                  {
                    v92 = v97 - 1;
                    break;
                  }
                }
              }
              v91 = 1;
            }
          }
          while ((v92 & 0x8000000000000000) == 0 && v91);
          if (!v82)
            goto LABEL_142;
LABEL_107:
          *((_QWORD *)&v132 + 1) = v82;
          operator delete(v82);
        }
LABEL_142:
        ++v55;
      }
      while (v55 != v53);
    }
    ++v46;
    v54 = v131;
  }
  while (v46 != v131);
}

void sub_2185F0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  switch(a20)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)&a18);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)&a18);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    default:
      break;
  }
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

_QWORD *turi::visualization::bin_specification_object<long long>::serialize(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)(a2 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"{\"start\":", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"stop\":", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"step\":", 9);
  v3 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
}

void std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 1053;
        (**v4)(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization16histogram_resultIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2100uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization16histogram_resultIxEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2185F03C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi13visualization16histogram_resultIxEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D94B808;
  a1[1] = 0;
  turi::visualization::histogram_result<long long>::histogram_result((uint64_t)(a1 + 3));
  return a1;
}

void sub_2185F0414(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::histogram_result<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::histogram_result<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::histogram_result<long long>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94B858;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94B858;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<long long>>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  _QWORD v16[2];
  _QWORD *v17[5];

  v17[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = 0x17188DFAA6C6DE35 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    if (v3 - 1 == a2)
      v11 = v9;
    else
      v11 = v10;
    turi::gl_sarray::range_iterator((turi::gl_sarray *)a1[1], v8, v11, v17);
    v16[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)v17);
    v16[1] = v12;
    v13 = turi::gl_sarray_range::end((turi::gl_sarray_range *)v17);
    v14 = (uint64_t *)(v2 + 8424 * a2);
    while (v16[0] != v13)
    {
      v15 = (unsigned __int8 *)turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v16);
      turi::visualization::histogram_result<long long>::add_element_simple(v14, v15);
      turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v16);
    }
    turi::gl_sarray_range::~gl_sarray_range(v17);
  }
}

void sub_2185F0650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)va);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram_result<long long>::add_element_simple(uint64_t *a1, unsigned __int8 *a2)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  std::runtime_error *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char **v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  std::runtime_error *v59;
  std::string *v60;
  __int128 v61;
  std::runtime_error *exception;
  std::string *v63;
  __int128 v64;
  void *__p[2];
  void *v66[2];
  void *v67[2];
  __int128 v68;
  std::string v69;
  size_t __idx;

  ++a1[2];
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)(a1 + 4), a2, (char *)a2);
  if (a2[12] != 7)
    ++a1[10];
  turi::groupby_operators::average::add_element_simple((turi::groupby_operators::average *)(a1 + 11), (const turi::flexible_type *)a2);
  turi::groupby_operators::min::add_element_simple((uint64_t)(a1 + 14), (const turi::flexible_type *)a2, v4);
  turi::groupby_operators::max::add_element_simple((uint64_t)(a1 + 18), (const turi::flexible_type *)a2, v5);
  turi::groupby_operators::quantile::add_element_simple((turi::groupby_operators::quantile *)(a1 + 22), (const turi::flexible_type *)a2, v6);
  turi::groupby_operators::variance::add_element_simple((turi::groupby_operators::variance *)(a1 + 44), (const turi::flexible_type *)a2);
  v7 = a2[12];
  if (v7 != 7)
  {
    if (v7 == 1)
    {
      if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        return;
      if (*(double *)a2 >= (double)a1[1049])
        goto LABEL_39;
      v8 = a1 + 1049;
      goto LABEL_8;
    }
    if (v7 <= 9)
    {
      if (((1 << v7) & 0x33C) != 0)
      {
        turi::flexible_type_fail(0);
LABEL_38:
        v7 = a2[12];
        goto LABEL_39;
      }
      v8 = a1 + 1049;
      v10 = a1[1049];
      if (!a2[12])
      {
        if (*(_QWORD *)a2 >= v10)
        {
LABEL_39:
          v24 = a1[1050];
          switch(v7)
          {
            case 0u:
              if (*(_QWORD *)a2 > v24)
                goto LABEL_49;
              goto LABEL_41;
            case 1u:
              if (*(double *)a2 > (double)v24)
                goto LABEL_49;
              goto LABEL_41;
            case 2u:
            case 3u:
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
              turi::flexible_type_fail(0);
              goto LABEL_41;
            case 6u:
              if (v24 >= (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
              {
LABEL_41:
                v25 = a1[1050];
              }
              else
              {
LABEL_49:
                v25 = 0;
                switch(a2[12])
                {
                  case 0u:
                    v25 = *(_QWORD *)a2;
                    goto LABEL_102;
                  case 1u:
                    v25 = (uint64_t)*(double *)a2;
                    goto LABEL_102;
                  case 2u:
                    v47 = *(_QWORD *)a2;
                    v48 = (char **)(*(_QWORD *)a2 + 8);
                    __idx = 0;
                    v49 = (char *)v48;
                    if (*(char *)(v47 + 31) < 0)
                      v49 = *v48;
                    std::string::basic_string[abi:ne180100]<0>(__p, v49);
                    v25 = std::stoll((const std::string *)__p, &__idx, 10);
                    if (SHIBYTE(v66[0]) < 0)
                      operator delete(__p[0]);
                    if (*(char *)(v47 + 31) < 0)
                      v50 = *(_QWORD *)(v47 + 16);
                    else
                      v50 = *(unsigned __int8 *)(v47 + 31);
                    if (__idx != v50)
                    {
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v63 = std::string::append(&v69, " cannot be interpreted as an integer");
                      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                      v66[0] = (void *)v63->__r_.__value_.__r.__words[2];
                      *(_OWORD *)__p = v64;
                      v63->__r_.__value_.__l.__size_ = 0;
                      v63->__r_.__value_.__r.__words[2] = 0;
                      v63->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(exception, (const std::string *)__p);
                      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                    }
                    goto LABEL_102;
                  case 3u:
                    v46 = *(_QWORD *)a2;
                    __p[1] = 0;
                    v66[0] = 0;
                    __p[0] = 0;
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v46 + 8), *(_QWORD *)(v46 + 16), (uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    goto LABEL_101;
                  case 4u:
                    v51 = *(_QWORD *)a2;
                    __p[1] = 0;
                    v66[0] = 0;
                    __p[0] = 0;
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v51 + 8), *(uint64_t **)(v51 + 16), (uint64_t)(*(_QWORD *)(v51 + 16) - *(_QWORD *)(v51 + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
                    goto LABEL_101;
                  case 5u:
                    v52 = *(_QWORD *)a2;
                    __p[1] = 0;
                    v66[0] = 0;
                    __p[0] = 0;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(_QWORD *)(v52 + 16) - *(_QWORD *)(v52 + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
                    goto LABEL_101;
                  case 6u:
                    v25 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
                    goto LABEL_102;
                  case 7u:
                    goto LABEL_102;
                  case 8u:
                    v53 = *(_QWORD *)a2;
                    v54 = *(unsigned int **)(*(_QWORD *)a2 + 16);
                    __p[0] = *(void **)(*(_QWORD *)a2 + 8);
                    __p[1] = v54;
                    if (v54)
                    {
                      v55 = v54 + 2;
                      do
                        v56 = __ldxr(v55);
                      while (__stxr(v56 + 1, v55));
                    }
                    v57 = *(_OWORD *)(v53 + 24);
                    v58 = *(_OWORD *)(v53 + 56);
                    *(_OWORD *)v67 = *(_OWORD *)(v53 + 40);
                    v68 = v58;
                    *(_OWORD *)v66 = v57;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                    goto LABEL_101;
                  case 9u:
                    turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
                    turi::flexible_type_fail(0);
                    turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_101:
                    v25 = 0;
LABEL_102:
                    a1[1050] = v25;
                    break;
                  default:
                    turi::apply_binary_op_ff();
                }
              }
              turi::visualization::histogram_result<long long>::rescale(a1, a1[1049], v25);
              v26 = 0;
              switch(a2[12])
              {
                case 0u:
                  v26 = *(_QWORD *)a2;
                  goto LABEL_77;
                case 1u:
                  v26 = (uint64_t)*(double *)a2;
                  goto LABEL_77;
                case 2u:
                  v31 = *(_QWORD *)a2;
                  __idx = 0;
                  v32 = (char *)(v31 + 8);
                  if (*(char *)(v31 + 31) < 0)
                    v32 = *(char **)(v31 + 8);
                  std::string::basic_string[abi:ne180100]<0>(__p, v32);
                  v26 = std::stoll((const std::string *)__p, &__idx, 10);
                  if (SHIBYTE(v66[0]) < 0)
                    operator delete(__p[0]);
                  if (*(char *)(v31 + 31) < 0)
                    v33 = *(_QWORD *)(v31 + 16);
                  else
                    v33 = *(unsigned __int8 *)(v31 + 31);
                  if (__idx != v33)
                  {
                    v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v44 = std::string::append(&v69, " cannot be interpreted as an integer");
                    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
                    v66[0] = (void *)v44->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = v45;
                    v44->__r_.__value_.__l.__size_ = 0;
                    v44->__r_.__value_.__r.__words[2] = 0;
                    v44->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v43, (const std::string *)__p);
                    __cxa_throw(v43, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  goto LABEL_77;
                case 3u:
                  v27 = *(_QWORD *)a2;
                  __p[1] = 0;
                  v66[0] = 0;
                  __p[0] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v27 + 8), *(_QWORD *)(v27 + 16), (uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  goto LABEL_76;
                case 4u:
                  v34 = *(_QWORD *)a2;
                  __p[1] = 0;
                  v66[0] = 0;
                  __p[0] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v34 + 8), *(uint64_t **)(v34 + 16), (uint64_t)(*(_QWORD *)(v34 + 16) - *(_QWORD *)(v34 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
                  goto LABEL_76;
                case 5u:
                  v35 = *(_QWORD *)a2;
                  __p[1] = 0;
                  v66[0] = 0;
                  __p[0] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
                  goto LABEL_76;
                case 6u:
                  v26 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
                  goto LABEL_77;
                case 7u:
                  goto LABEL_77;
                case 8u:
                  v36 = *(_QWORD *)a2;
                  v37 = *(unsigned int **)(*(_QWORD *)a2 + 16);
                  __p[0] = *(void **)(*(_QWORD *)a2 + 8);
                  __p[1] = v37;
                  if (v37)
                  {
                    v38 = v37 + 2;
                    do
                      v39 = __ldxr(v38);
                    while (__stxr(v39 + 1, v38));
                  }
                  v40 = *(_OWORD *)(v36 + 24);
                  v41 = *(_OWORD *)(v36 + 56);
                  *(_OWORD *)v67 = *(_OWORD *)(v36 + 40);
                  v68 = v41;
                  *(_OWORD *)v66 = v40;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                  goto LABEL_76;
                case 9u:
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
                  turi::flexible_type_fail(0);
                  if (v67[1])
                  {
                    *(void **)&v68 = v67[1];
                    operator delete(v67[1]);
                  }
                  if (v66[0])
                  {
                    v66[1] = v66[0];
                    operator delete(v66[0]);
                  }
                  v28 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v29 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v30 = __ldaxr(v29);
                    while (__stlxr(v30 - 1, v29));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
LABEL_76:
                  v26 = 0;
LABEL_77:
                  v42 = vcvtmd_u64_f64(((double)v26 - (double)a1[1051]) / (double)(a1[1052] - a1[1051]) * 1000.0);
                  if (v42 == 1000)
                    v42 = 999;
                  ++a1[v42 + 49];
                  break;
                default:
                  turi::apply_binary_op_ff();
              }
              return;
            default:
              turi::apply_binary_op_ff();
          }
          return;
        }
LABEL_8:
        v9 = 0;
        switch(a2[12])
        {
          case 0u:
            v9 = *(_QWORD *)a2;
            goto LABEL_37;
          case 1u:
            v9 = (uint64_t)*(double *)a2;
            goto LABEL_37;
          case 2u:
            v12 = *(_QWORD *)a2;
            v13 = (char **)(*(_QWORD *)a2 + 8);
            __idx = 0;
            v14 = (char *)v13;
            if (*(char *)(v12 + 31) < 0)
              v14 = *v13;
            std::string::basic_string[abi:ne180100]<0>(__p, v14);
            v9 = std::stoll((const std::string *)__p, &__idx, 10);
            if (SHIBYTE(v66[0]) < 0)
              operator delete(__p[0]);
            if (*(char *)(v12 + 31) < 0)
              v15 = *(_QWORD *)(v12 + 16);
            else
              v15 = *(unsigned __int8 *)(v12 + 31);
            if (__idx != v15)
            {
              v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v60 = std::string::append(&v69, " cannot be interpreted as an integer");
              v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              v66[0] = (void *)v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v59, (const std::string *)__p);
              __cxa_throw(v59, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            goto LABEL_37;
          case 3u:
            v11 = *(_QWORD *)a2;
            __p[1] = 0;
            v66[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_36;
          case 4u:
            v16 = *(_QWORD *)a2;
            __p[1] = 0;
            v66[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
            goto LABEL_36;
          case 5u:
            v17 = *(_QWORD *)a2;
            __p[1] = 0;
            v66[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v69.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
            goto LABEL_36;
          case 6u:
            v9 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            goto LABEL_37;
          case 7u:
            goto LABEL_37;
          case 8u:
            v18 = *(_QWORD *)a2;
            v19 = *(unsigned int **)(*(_QWORD *)a2 + 16);
            __p[0] = *(void **)(*(_QWORD *)a2 + 8);
            __p[1] = v19;
            if (v19)
            {
              v20 = v19 + 2;
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = *(_OWORD *)(v18 + 24);
            v23 = *(_OWORD *)(v18 + 56);
            *(_OWORD *)v67 = *(_OWORD *)(v18 + 40);
            v68 = v23;
            *(_OWORD *)v66 = v22;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            goto LABEL_36;
          case 9u:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_36:
            v9 = 0;
LABEL_37:
            *v8 = v9;
            break;
          default:
            turi::apply_binary_op_ff();
        }
        goto LABEL_38;
      }
      if (v7 == 6)
      {
        if (v10 <= (uint64_t)(*(_QWORD *)a2 << 8) >> 8)
          goto LABEL_39;
        goto LABEL_8;
      }
    }
    turi::apply_binary_op_ff();
  }
}

void sub_2185F0FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::visualization::histogram_result<long long>::rescale(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  float64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  const double *v12;
  uint64_t v13;
  float64_t *v14;
  const double *v15;
  float64_t *v16;
  uint64_t *v17;
  float64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2x2_t v24;
  float64x2x2_t v25;

  v6 = a1 + 49;
  v7 = a1 + 799;
  v8 = a1[1051];
  v9 = (float64_t *)(a1 + 549);
  v10 = a1 + 548;
  while (v8 > a2 || a1[1052] < a3)
  {
    v11 = 500;
    do
    {
      v12 = (const double *)&a1[v11 + 45];
      v24 = vld2q_f64(v12);
      v24.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v24.val[1], (int64x2_t)v24.val[0]);
      a1[v11 + 48] = *(_QWORD *)&v24.val[0].f64[1];
      a1[v11 + 46] = *(_QWORD *)&v24.val[0].f64[0];
      v11 -= 4;
    }
    while (v11 * 8);
    v13 = 250;
    v14 = v9;
    v15 = v9;
    do
    {
      v25 = vld2q_f64(v15);
      v15 += 4;
      v25.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v25.val[0], (int64x2_t)v25.val[1]);
      *v14 = v25.val[0].f64[0];
      v14[2] = v25.val[0].f64[1];
      v14 = (float64_t *)v15;
      v13 -= 2;
    }
    while (v13);
    v16 = v9;
    v17 = v10;
    v18 = v9;
    do
    {
      v19 = *(_QWORD *)v16;
      v16 += 2;
      *(_QWORD *)v18++ = v19;
      v20 = *v17;
      v17 -= 2;
      *(uint64_t *)((char *)v10 + v13) = v20;
      v13 -= 8;
    }
    while (v13 != -2000);
    bzero(v7, 0x7D0uLL);
    bzero(v6, 0x7D0uLL);
    v21 = a1[1052];
    v22 = a1[1051];
    v23 = v21 - v22;
    if (v21 < v22)
      ++v23;
    a1[1052] = v21 + (v23 >> 1);
    v8 = v22 - (v23 >> 1);
    a1[1051] = v8;
  }
}

uint64_t turi::visualization::histogram_result<long long>::histogram_result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t **v5;
  unint64_t *v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  __int128 v16;

  *(_QWORD *)a1 = &unk_24D94B778;
  *(_QWORD *)(a1 + 8) = &unk_24D92FF70;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::unordered_set<turi::flexible_type>::unordered_set(a1 + 32, a2 + 32);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = &unk_24D930060;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = &unk_24D930150;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = &unk_24D92FCA0;
  *(_QWORD *)(a1 + 120) = 0;
  v5 = (unint64_t **)(a1 + 120);
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  if (a2 == a1)
  {
    v15 = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
    *(_BYTE *)(a1 + 136) = v15;
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 164) = 0;
  }
  else
  {
    v6 = *(unint64_t **)(a2 + 120);
    *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
    *v5 = v6;
    v7 = *(unsigned __int8 *)(a2 + 132);
    *(_BYTE *)(a1 + 132) = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v8 = *v5;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 136) = v10;
    *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
    *(_DWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 164) = 0;
    v11 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(unsigned __int8 *)(a2 + 164);
    *(_BYTE *)(a1 + 164) = v12;
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
    {
      v13 = *(unint64_t **)(a1 + 152);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  turi::groupby_operators::quantile::quantile((turi::groupby_operators::quantile *)(a1 + 176), (const turi::groupby_operators::quantile *)(a2 + 176));
  *(_QWORD *)(a1 + 352) = &unk_24D930330;
  v16 = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v16;
  *(_QWORD *)(a1 + 352) = &unk_24D930420;
  memcpy((void *)(a1 + 384), (const void *)(a2 + 384), 0x1F68uLL);
  return a1;
}

void sub_2185F1460(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  turi::groupby_operators::min *v3;
  turi::groupby_operators::max *v4;
  uint64_t v5;

  turi::groupby_operators::max::~max(v4);
  turi::groupby_operators::min::~min(v3);
  *(_QWORD *)(v1 + 24) = v5 + 16;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram_result<long long>::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  *(_BYTE *)(a1 + 384) = a2;
  turi::groupby_operators::min::set_input_type(a1 + 112, a2);
  turi::groupby_operators::max::set_input_type(a1 + 144, a2);
  bzero((void *)(a1 + 392), 0x1F40uLL);
  if (a4 >= a3)
    v12 = a3;
  else
    v12 = a4;
  *(_QWORD *)(a1 + 8392) = v12;
  if (a3 <= a4)
    v13 = a4;
  else
    v13 = a3;
  *(_QWORD *)(a1 + 8400) = v13;
  if (a6 >= a5)
    v14 = a5;
  else
    v14 = a6;
  *(_QWORD *)(a1 + 8408) = v14;
  if (a5 <= a6)
    v15 = a6;
  else
    v15 = a5;
  *(_QWORD *)(a1 + 8416) = v15;
  if (v15 == v14)
  {
    if (v14 < 1)
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = 1;
        goto LABEL_19;
      }
      v16 = (double)v14 * 0.0;
    }
    else
    {
      v16 = (double)v14 + (double)v14;
    }
    v15 = (uint64_t)v16;
LABEL_19:
    *(_QWORD *)(a1 + 8416) = v15;
  }
  v17 = v15 - v14;
  if ((((_DWORD)v15 - (_DWORD)v14) & 1) != 0)
  {
    *(_QWORD *)(a1 + 8416) = ++v15;
    v17 = v15 - v14;
  }
  v18 = v17 % 0x3E8;
  if (v18)
  {
    v19 = 1000 - v18;
    *(_QWORD *)(a1 + 8408) = v14 - (v19 >> 1);
    *(_QWORD *)(a1 + 8416) = (v19 & 1) + v15 + (v19 >> 1);
  }
}

void turi::visualization::histogram_result<long long>::init(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  char **v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  __int128 v72;
  __int128 v73;
  std::runtime_error *exception;
  std::string *v75;
  __int128 v76;
  std::runtime_error *v77;
  std::string *v78;
  __int128 v79;
  std::runtime_error *v80;
  std::string *v81;
  __int128 v82;
  std::runtime_error *v83;
  std::string *v84;
  __int128 v85;
  void *__p[2];
  void *v87[2];
  __int128 v88;
  __int128 v89;
  std::string v90;
  size_t __idx;

  v8 = 0;
  switch(a3[12])
  {
    case 0:
      v8 = *(_QWORD *)a3;
      goto LABEL_29;
    case 1:
      v8 = (uint64_t)*(double *)a3;
      goto LABEL_29;
    case 2:
      v12 = *(_QWORD *)a3;
      v13 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v14 = (char *)v13;
      if (*(char *)(v12 + 31) < 0)
        v14 = *v13;
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      v8 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v87[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v12 + 31) < 0)
        v15 = *(_QWORD *)(v12 + 16);
      else
        v15 = *(unsigned __int8 *)(v12 + 31);
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v75 = std::string::append(&v90, " cannot be interpreted as an integer");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v87[0] = (void *)v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      goto LABEL_29;
    case 3:
      v9 = *(_QWORD *)a3;
      __p[1] = 0;
      v87[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_28;
    case 4:
      v16 = *(_QWORD *)a3;
      __p[1] = 0;
      v87[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      goto LABEL_28;
    case 5:
      v17 = *(_QWORD *)a3;
      __p[1] = 0;
      v87[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      goto LABEL_28;
    case 6:
      v8 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      v18 = *(_QWORD *)a3;
      v19 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v19;
      if (v19)
      {
        v20 = v19 + 2;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(_OWORD *)(v18 + 24);
      v23 = *(_OWORD *)(v18 + 56);
      v88 = *(_OWORD *)(v18 + 40);
      v89 = v23;
      *(_OWORD *)v87 = v22;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v88 + 1))
      {
        *(_QWORD *)&v89 = *((_QWORD *)&v88 + 1);
        operator delete(*((void **)&v88 + 1));
      }
      if (v87[0])
      {
        v87[1] = v87[0];
        operator delete(v87[0]);
      }
      v8 = (uint64_t)__p[1];
      if (!__p[1])
        goto LABEL_29;
      v10 = (unint64_t *)((char *)__p[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
LABEL_28:
      v8 = 0;
LABEL_29:
      v24 = 0;
      switch(a4[12])
      {
        case 0:
          v24 = *(_QWORD *)a4;
          goto LABEL_57;
        case 1:
          v24 = (uint64_t)*(double *)a4;
          goto LABEL_57;
        case 2:
          v28 = *(_QWORD *)a4;
          v29 = (char **)(*(_QWORD *)a4 + 8);
          __idx = 0;
          v30 = (char *)v29;
          if (*(char *)(v28 + 31) < 0)
            v30 = *v29;
          std::string::basic_string[abi:ne180100]<0>(__p, v30);
          v24 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v87[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(v28 + 31) < 0)
            v31 = *(_QWORD *)(v28 + 16);
          else
            v31 = *(unsigned __int8 *)(v28 + 31);
          if (__idx != v31)
          {
            v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v78 = std::string::append(&v90, " cannot be interpreted as an integer");
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v87[0] = (void *)v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v77, (const std::string *)__p);
            __cxa_throw(v77, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          goto LABEL_57;
        case 3:
          v25 = *(_QWORD *)a4;
          __p[1] = 0;
          v87[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v25 + 8), *(_QWORD *)(v25 + 16), (uint64_t)(*(_QWORD *)(v25 + 16) - *(_QWORD *)(v25 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_56;
        case 4:
          v32 = *(_QWORD *)a4;
          __p[1] = 0;
          v87[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
          goto LABEL_56;
        case 5:
          v33 = *(_QWORD *)a4;
          __p[1] = 0;
          v87[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
          goto LABEL_56;
        case 6:
          v24 = (uint64_t)(*(_QWORD *)a4 << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          v34 = *(_QWORD *)a4;
          v35 = *(unsigned int **)(*(_QWORD *)a4 + 16);
          __p[0] = *(void **)(*(_QWORD *)a4 + 8);
          __p[1] = v35;
          if (v35)
          {
            v36 = v35 + 2;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = *(_OWORD *)(v34 + 24);
          v39 = *(_OWORD *)(v34 + 56);
          v88 = *(_OWORD *)(v34 + 40);
          v89 = v39;
          *(_OWORD *)v87 = v38;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a4 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v88 + 1))
          {
            *(_QWORD *)&v89 = *((_QWORD *)&v88 + 1);
            operator delete(*((void **)&v88 + 1));
          }
          if (v87[0])
          {
            v87[1] = v87[0];
            operator delete(v87[0]);
          }
          v24 = (uint64_t)__p[1];
          if (!__p[1])
            goto LABEL_57;
          v26 = (unint64_t *)((char *)__p[1] + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v24);
          }
LABEL_56:
          v24 = 0;
LABEL_57:
          v40 = 0;
          switch(a3[12])
          {
            case 0:
              v40 = *(_QWORD *)a3;
              goto LABEL_85;
            case 1:
              v40 = (uint64_t)*(double *)a3;
              goto LABEL_85;
            case 2:
              v45 = *(_QWORD *)a3;
              v46 = (char **)(*(_QWORD *)a3 + 8);
              __idx = 0;
              v47 = (char *)v46;
              if (*(char *)(v45 + 31) < 0)
                v47 = *v46;
              std::string::basic_string[abi:ne180100]<0>(__p, v47);
              v40 = std::stoll((const std::string *)__p, &__idx, 10);
              if (SHIBYTE(v87[0]) < 0)
                operator delete(__p[0]);
              if (*(char *)(v45 + 31) < 0)
                v48 = *(_QWORD *)(v45 + 16);
              else
                v48 = *(unsigned __int8 *)(v45 + 31);
              if (__idx != v48)
              {
                v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v81 = std::string::append(&v90, " cannot be interpreted as an integer");
                v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                v87[0] = (void *)v81->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = v82;
                v81->__r_.__value_.__l.__size_ = 0;
                v81->__r_.__value_.__r.__words[2] = 0;
                v81->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v80, (const std::string *)__p);
                __cxa_throw(v80, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              goto LABEL_85;
            case 3:
              v41 = *(_QWORD *)a3;
              __p[1] = 0;
              v87[0] = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v41 + 8), *(_QWORD *)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              goto LABEL_84;
            case 4:
              v49 = *(_QWORD *)a3;
              __p[1] = 0;
              v87[0] = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v49 + 8), *(uint64_t **)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
              goto LABEL_84;
            case 5:
              v50 = *(_QWORD *)a3;
              __p[1] = 0;
              v87[0] = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v50 + 8), *(uint64_t **)(v50 + 16), (uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)(v50 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
              goto LABEL_84;
            case 6:
              v40 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
              goto LABEL_85;
            case 7:
              goto LABEL_85;
            case 8:
              v51 = *(_QWORD *)a3;
              v52 = *(unsigned int **)(*(_QWORD *)a3 + 16);
              __p[0] = *(void **)(*(_QWORD *)a3 + 8);
              __p[1] = v52;
              if (v52)
              {
                v53 = v52 + 2;
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
              }
              v55 = *(_OWORD *)(v51 + 24);
              v56 = *(_OWORD *)(v51 + 56);
              v88 = *(_OWORD *)(v51 + 40);
              v89 = v56;
              *(_OWORD *)v87 = v55;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              goto LABEL_84;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
              turi::flexible_type_fail(0);
              if (*((_QWORD *)&v88 + 1))
              {
                *(_QWORD *)&v89 = *((_QWORD *)&v88 + 1);
                operator delete(*((void **)&v88 + 1));
              }
              if (v87[0])
              {
                v87[1] = v87[0];
                operator delete(v87[0]);
              }
              v42 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v43 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
LABEL_84:
              v40 = 0;
LABEL_85:
              v57 = 0;
              switch(a4[12])
              {
                case 0:
                  v57 = *(_QWORD *)a4;
                  goto LABEL_113;
                case 1:
                  v57 = (uint64_t)*(double *)a4;
                  goto LABEL_113;
                case 2:
                  v62 = *(_QWORD *)a4;
                  v63 = (char **)(*(_QWORD *)a4 + 8);
                  __idx = 0;
                  v64 = (char *)v63;
                  if (*(char *)(v62 + 31) < 0)
                    v64 = *v63;
                  std::string::basic_string[abi:ne180100]<0>(__p, v64);
                  v57 = std::stoll((const std::string *)__p, &__idx, 10);
                  if (SHIBYTE(v87[0]) < 0)
                    operator delete(__p[0]);
                  if (*(char *)(v62 + 31) < 0)
                    v65 = *(_QWORD *)(v62 + 16);
                  else
                    v65 = *(unsigned __int8 *)(v62 + 31);
                  if (__idx != v65)
                  {
                    v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v84 = std::string::append(&v90, " cannot be interpreted as an integer");
                    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                    v87[0] = (void *)v84->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = v85;
                    v84->__r_.__value_.__l.__size_ = 0;
                    v84->__r_.__value_.__r.__words[2] = 0;
                    v84->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v83, (const std::string *)__p);
                    __cxa_throw(v83, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  goto LABEL_113;
                case 3:
                  v58 = *(_QWORD *)a4;
                  __p[1] = 0;
                  v87[0] = 0;
                  __p[0] = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v58 + 8), *(_QWORD *)(v58 + 16), (uint64_t)(*(_QWORD *)(v58 + 16) - *(_QWORD *)(v58 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  goto LABEL_112;
                case 4:
                  v66 = *(_QWORD *)a4;
                  __p[1] = 0;
                  v87[0] = 0;
                  __p[0] = 0;
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
                  goto LABEL_112;
                case 5:
                  v67 = *(_QWORD *)a4;
                  __p[1] = 0;
                  v87[0] = 0;
                  __p[0] = 0;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v67 + 8), *(uint64_t **)(v67 + 16), (uint64_t)(*(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
                  goto LABEL_112;
                case 6:
                  v57 = (uint64_t)(*(_QWORD *)a4 << 8) >> 8;
                  goto LABEL_113;
                case 7:
                  goto LABEL_113;
                case 8:
                  v68 = *(_QWORD *)a4;
                  v69 = *(unsigned int **)(*(_QWORD *)a4 + 16);
                  __p[0] = *(void **)(*(_QWORD *)a4 + 8);
                  __p[1] = v69;
                  if (v69)
                  {
                    v70 = v69 + 2;
                    do
                      v71 = __ldxr(v70);
                    while (__stxr(v71 + 1, v70));
                  }
                  v72 = *(_OWORD *)(v68 + 24);
                  v73 = *(_OWORD *)(v68 + 56);
                  v88 = *(_OWORD *)(v68 + 40);
                  v89 = v73;
                  *(_OWORD *)v87 = v72;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
                  goto LABEL_112;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a4 + 8);
                  turi::flexible_type_fail(0);
                  if (*((_QWORD *)&v88 + 1))
                  {
                    *(_QWORD *)&v89 = *((_QWORD *)&v88 + 1);
                    operator delete(*((void **)&v88 + 1));
                  }
                  if (v87[0])
                  {
                    v87[1] = v87[0];
                    operator delete(v87[0]);
                  }
                  v59 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v60 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v61 = __ldaxr(v60);
                    while (__stlxr(v61 - 1, v60));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v59);
                    }
                  }
LABEL_112:
                  v57 = 0;
LABEL_113:
                  turi::visualization::histogram_result<long long>::init(a1, a2, v8, v24, v40, v57);
                  return;
                default:
                  turi::apply_binary_op_ff();
              }
            default:
              turi::apply_binary_op_ff();
          }
        default:
          turi::apply_binary_op_ff();
      }
    default:
      turi::apply_binary_op_ff();
  }
}

void sub_2185F20BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization9histogramIdEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_2185F2278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization9histogramIdEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D94B8D8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D94B9C0;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D94B928;
  return a1;
}

void sub_2185F2300(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::histogram<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::histogram<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::histogram<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::visualization::histogram<double>::~histogram(_QWORD *a1)
{
  turi::gl_sarray *v2;

  *a1 = &unk_24D94B9C0;
  v2 = (turi::gl_sarray *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  turi::gl_sarray::~gl_sarray(v2);
  return a1;
}

void turi::visualization::histogram<double>::~histogram(_QWORD *a1)
{
  turi::gl_sarray *v1;

  *a1 = &unk_24D94B9C0;
  v1 = (turi::gl_sarray *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  turi::gl_sarray::~gl_sarray(v1);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    *a2 = *(_QWORD *)(a1 + 56);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 72);
  v11 = turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 72)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 72);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94BAC0;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 72) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 64);
  *a2 = *(_QWORD *)(a1 + 56);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_2185F25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get_current@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return turi::visualization::histogram_result<double>::histogram_result(a2, *(_QWORD *)(a1 + 56));
}

void turi::visualization::histogram<double>::split_input(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  turi::gl_sarray *v12;
  uint64_t v13;

  v5 = *(double **)(a1 + 56);
  v6 = v5[1049];
  v7 = v5[1050];
  v8 = v5[1051];
  v9 = v5[1052];
  std::vector<turi::visualization::histogram_result<double>>::vector(a3, a2);
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    v12 = (turi::gl_sarray *)(a1 + 16);
    do
    {
      v13 = turi::gl_sarray::dtype(v12);
      turi::visualization::histogram_result<double>::init(v10, v13, v6, v7, v8, v9);
      v10 += 8424;
    }
    while (v10 != v11);
  }
}

void sub_2185F26C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram<double>::merge_results(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  float v22;
  double v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  float v37;
  double *v38;
  double v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  float v53;
  double v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  float v68;
  double v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  float v83;
  double v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  __int128 v96;
  __int128 v97;
  float v98;
  uint64_t v99;
  uint64_t i;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  unsigned int v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  unsigned int v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  std::runtime_error *exception;
  std::string *v160;
  __int128 v161;
  std::runtime_error *v162;
  std::string *v163;
  __int128 v164;
  std::runtime_error *v165;
  std::string *v166;
  __int128 v167;
  std::runtime_error *v168;
  std::string *v169;
  __int128 v170;
  std::runtime_error *v171;
  std::string *v172;
  __int128 v173;
  std::runtime_error *v174;
  std::string *v175;
  __int128 v176;
  unsigned int *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  std::string __p;
  std::string::size_type v182;
  void *v183;
  void *v184;
  std::string v185;
  size_t __idx;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  int v191;
  char v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    while (2)
    {
      v5 = a1 + 56;
      turi::groupby_operators::count::combine(*(_QWORD *)(a1 + 56) + 8, v2 + 1);
      turi::groupby_operators::count_distinct::combine(*(_QWORD *)(a1 + 56) + 24, v2 + 3);
      turi::groupby_operators::non_null_count::combine(*(_QWORD *)(a1 + 56) + 72, v2 + 9);
      turi::groupby_operators::average::combine(*(_QWORD *)(a1 + 56) + 88, v2 + 11);
      turi::groupby_operators::min::combine(*(_QWORD *)(a1 + 56) + 112, v2 + 14);
      turi::groupby_operators::max::combine(*(_QWORD *)(a1 + 56) + 144, v2 + 18);
      turi::groupby_operators::variance::combine(*(_QWORD *)(a1 + 56) + 352, v2 + 44);
      turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)(v2 + 26));
      turi::groupby_operators::quantile::combine(*(_QWORD *)(a1 + 56) + 176, v2 + 22);
      if (v2[1049] >= *(double *)(*(_QWORD *)(a1 + 56) + 8392))
        v6 = (_QWORD *)(*(_QWORD *)v5 + 8392);
      else
        v6 = v2 + 1049;
      turi::flexible_type::flexible_type<double>((uint64_t)&v190, v6);
      if (*(double *)(*(_QWORD *)v5 + 8400) >= v2[1050])
        v7 = (_QWORD *)(*(_QWORD *)v5 + 8400);
      else
        v7 = v2 + 1050;
      turi::flexible_type::flexible_type<double>((uint64_t)&v187, v7);
      v8 = 0.0;
      switch(v192)
      {
        case 0:
          v8 = (double)v190;
          goto LABEL_38;
        case 1:
          v8 = *(double *)&v190;
          goto LABEL_38;
        case 2:
          v12 = v190;
          __idx = 0;
          v13 = (char *)(v190 + 8);
          if (*(char *)(v190 + 31) < 0)
            v13 = *(char **)(v190 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__p, v13);
          v14 = std::stod(&__p, &__idx);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*(char *)(v12 + 31) < 0)
            v15 = *(_QWORD *)(v12 + 16);
          else
            v15 = *(unsigned __int8 *)(v12 + 31);
          if (__idx != v15)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v160 = std::string::append(&v185, " cannot be interpreted as a float");
            v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v161;
            v160->__r_.__value_.__l.__size_ = 0;
            v160->__r_.__value_.__r.__words[2] = 0;
            v160->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v22 = v14;
          v8 = v22;
          goto LABEL_38;
        case 3:
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v190 + 8), *(_QWORD *)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_38;
        case 4:
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          goto LABEL_38;
        case 5:
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          goto LABEL_38;
        case 6:
          v8 = (double)v191 / 1000000.0 + (double)(v190 << 8 >> 8);
          goto LABEL_38;
        case 7:
          goto LABEL_38;
        case 8:
          v16 = v190;
          v17 = *(unsigned int **)(v190 + 16);
          v177 = v17;
          if (v17)
          {
            v18 = v17 + 2;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = *(_OWORD *)(v16 + 24);
          v21 = *(_OWORD *)(v16 + 56);
          v179 = *(_OWORD *)(v16 + 40);
          v180 = v21;
          v178 = v20;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v177);
          goto LABEL_38;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v190 + 8);
          turi::flexible_type_fail(0);
          if (v183)
          {
            v184 = v183;
            operator delete(v183);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v182 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
LABEL_38:
          *(double *)(*(_QWORD *)(a1 + 56) + 8392) = v8;
          v23 = 0.0;
          switch(v189)
          {
            case 0:
              v23 = (double)v187;
              goto LABEL_68;
            case 1:
              v23 = *(double *)&v187;
              goto LABEL_68;
            case 2:
              v27 = v187;
              __idx = 0;
              v28 = (char *)(v187 + 8);
              if (*(char *)(v187 + 31) < 0)
                v28 = *(char **)(v187 + 8);
              std::string::basic_string[abi:ne180100]<0>(&__p, v28);
              v29 = std::stod(&__p, &__idx);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (*(char *)(v27 + 31) < 0)
                v30 = *(_QWORD *)(v27 + 16);
              else
                v30 = *(unsigned __int8 *)(v27 + 31);
              if (__idx != v30)
              {
                v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v163 = std::string::append(&v185, " cannot be interpreted as a float");
                v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v164;
                v163->__r_.__value_.__l.__size_ = 0;
                v163->__r_.__value_.__r.__words[2] = 0;
                v163->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v162, &__p);
                __cxa_throw(v162, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v37 = v29;
              v23 = v37;
              goto LABEL_68;
            case 3:
              memset(&__p, 0, sizeof(__p));
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v187 + 8), *(_QWORD *)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_68;
            case 4:
              memset(&__p, 0, sizeof(__p));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
              goto LABEL_68;
            case 5:
              memset(&__p, 0, sizeof(__p));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
              goto LABEL_68;
            case 6:
              v23 = (double)v188 / 1000000.0 + (double)(v187 << 8 >> 8);
              goto LABEL_68;
            case 7:
              goto LABEL_68;
            case 8:
              v31 = v187;
              v32 = *(unsigned int **)(v187 + 16);
              v177 = v32;
              if (v32)
              {
                v33 = v32 + 2;
                do
                  v34 = __ldxr(v33);
                while (__stxr(v34 + 1, v33));
              }
              v35 = *(_OWORD *)(v31 + 24);
              v36 = *(_OWORD *)(v31 + 56);
              v179 = *(_OWORD *)(v31 + 40);
              v180 = v36;
              v178 = v35;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v177);
              goto LABEL_68;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v187 + 8);
              turi::flexible_type_fail(0);
              if (v183)
              {
                v184 = v183;
                operator delete(v183);
              }
              if (__p.__r_.__value_.__r.__words[2])
              {
                v182 = __p.__r_.__value_.__r.__words[2];
                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
              }
              v24 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
LABEL_68:
              v38 = *(double **)(a1 + 56);
              v38[1050] = v23;
              v39 = 0.0;
              switch(v192)
              {
                case 0:
                  v39 = (double)v190;
                  goto LABEL_98;
                case 1:
                  v39 = *(double *)&v190;
                  goto LABEL_98;
                case 2:
                  v43 = v190;
                  __idx = 0;
                  v44 = (char *)(v190 + 8);
                  if (*(char *)(v190 + 31) < 0)
                    v44 = *(char **)(v190 + 8);
                  std::string::basic_string[abi:ne180100]<0>(&__p, v44);
                  v45 = std::stod(&__p, &__idx);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (*(char *)(v43 + 31) < 0)
                    v46 = *(_QWORD *)(v43 + 16);
                  else
                    v46 = *(unsigned __int8 *)(v43 + 31);
                  if (__idx != v46)
                  {
                    v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    v166 = std::string::append(&v185, " cannot be interpreted as a float");
                    v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v167;
                    v166->__r_.__value_.__l.__size_ = 0;
                    v166->__r_.__value_.__r.__words[2] = 0;
                    v166->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v165, &__p);
                    __cxa_throw(v165, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  v53 = v45;
                  v39 = v53;
                  goto LABEL_98;
                case 3:
                  memset(&__p, 0, sizeof(__p));
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v190 + 8), *(_QWORD *)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_98;
                case 4:
                  memset(&__p, 0, sizeof(__p));
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                  goto LABEL_98;
                case 5:
                  memset(&__p, 0, sizeof(__p));
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                  goto LABEL_98;
                case 6:
                  v39 = (double)v191 / 1000000.0 + (double)(v190 << 8 >> 8);
                  goto LABEL_98;
                case 7:
                  goto LABEL_98;
                case 8:
                  v47 = v190;
                  v48 = *(unsigned int **)(v190 + 16);
                  v177 = v48;
                  if (v48)
                  {
                    v49 = v48 + 2;
                    do
                      v50 = __ldxr(v49);
                    while (__stxr(v50 + 1, v49));
                  }
                  v51 = *(_OWORD *)(v47 + 24);
                  v52 = *(_OWORD *)(v47 + 56);
                  v179 = *(_OWORD *)(v47 + 40);
                  v180 = v52;
                  v178 = v51;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count(&v177);
                  goto LABEL_98;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v190 + 8);
                  turi::flexible_type_fail(0);
                  if (v183)
                  {
                    v184 = v183;
                    operator delete(v183);
                  }
                  if (__p.__r_.__value_.__r.__words[2])
                  {
                    v182 = __p.__r_.__value_.__r.__words[2];
                    operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                  }
                  v40 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_)
                  {
                    v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                    do
                      v42 = __ldaxr(v41);
                    while (__stlxr(v42 - 1, v41));
                    if (!v42)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v40);
                    }
                  }
LABEL_98:
                  v54 = 0.0;
                  switch(v189)
                  {
                    case 0:
                      v54 = (double)v187;
                      goto LABEL_128;
                    case 1:
                      v54 = *(double *)&v187;
                      goto LABEL_128;
                    case 2:
                      v58 = v187;
                      __idx = 0;
                      v59 = (char *)(v187 + 8);
                      if (*(char *)(v187 + 31) < 0)
                        v59 = *(char **)(v187 + 8);
                      std::string::basic_string[abi:ne180100]<0>(&__p, v59);
                      v60 = std::stod(&__p, &__idx);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      if (*(char *)(v58 + 31) < 0)
                        v61 = *(_QWORD *)(v58 + 16);
                      else
                        v61 = *(unsigned __int8 *)(v58 + 31);
                      if (__idx != v61)
                      {
                        v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::operator+<char>();
                        v172 = std::string::append(&v185, " cannot be interpreted as a float");
                        v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
                        __p.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v173;
                        v172->__r_.__value_.__l.__size_ = 0;
                        v172->__r_.__value_.__r.__words[2] = 0;
                        v172->__r_.__value_.__r.__words[0] = 0;
                        std::runtime_error::runtime_error(v171, &__p);
                        __cxa_throw(v171, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                      }
                      v68 = v60;
                      v54 = v68;
                      goto LABEL_128;
                    case 3:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v187 + 8), *(_QWORD *)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 3);
                      turi::flexible_type_fail(0);
                      if (__p.__r_.__value_.__r.__words[0])
                      {
                        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_128;
                    case 4:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 4);
                      turi::flexible_type_fail(0);
                      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                      goto LABEL_128;
                    case 5:
                      memset(&__p, 0, sizeof(__p));
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 5);
                      turi::flexible_type_fail(0);
                      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                      goto LABEL_128;
                    case 6:
                      v54 = (double)v188 / 1000000.0 + (double)(v187 << 8 >> 8);
                      goto LABEL_128;
                    case 7:
                      goto LABEL_128;
                    case 8:
                      v62 = v187;
                      v63 = *(unsigned int **)(v187 + 16);
                      v177 = v63;
                      if (v63)
                      {
                        v64 = v63 + 2;
                        do
                          v65 = __ldxr(v64);
                        while (__stxr(v65 + 1, v64));
                      }
                      v66 = *(_OWORD *)(v62 + 24);
                      v67 = *(_OWORD *)(v62 + 56);
                      v179 = *(_OWORD *)(v62 + 40);
                      v180 = v67;
                      v178 = v66;
                      turi::flexible_type_fail(0);
                      boost::detail::shared_count::~shared_count(&v177);
                      goto LABEL_128;
                    case 9:
                      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v187 + 8);
                      turi::flexible_type_fail(0);
                      if (v183)
                      {
                        v184 = v183;
                        operator delete(v183);
                      }
                      if (__p.__r_.__value_.__r.__words[2])
                      {
                        v182 = __p.__r_.__value_.__r.__words[2];
                        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                      }
                      v55 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                      if (__p.__r_.__value_.__l.__size_)
                      {
                        v56 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                        do
                          v57 = __ldaxr(v56);
                        while (__stlxr(v57 - 1, v56));
                        if (!v57)
                        {
                          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                          std::__shared_weak_count::__release_weak(v55);
                        }
                      }
LABEL_128:
                      turi::visualization::histogram_result<double>::rescale(v38, v39, v54);
                      v69 = 0.0;
                      switch(v192)
                      {
                        case 0:
                          v69 = (double)v190;
                          goto LABEL_158;
                        case 1:
                          v69 = *(double *)&v190;
                          goto LABEL_158;
                        case 2:
                          v73 = v190;
                          __idx = 0;
                          v74 = (char *)(v190 + 8);
                          if (*(char *)(v190 + 31) < 0)
                            v74 = *(char **)(v190 + 8);
                          std::string::basic_string[abi:ne180100]<0>(&__p, v74);
                          v75 = std::stod(&__p, &__idx);
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p.__r_.__value_.__l.__data_);
                          if (*(char *)(v73 + 31) < 0)
                            v76 = *(_QWORD *)(v73 + 16);
                          else
                            v76 = *(unsigned __int8 *)(v73 + 31);
                          if (__idx != v76)
                          {
                            v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::operator+<char>();
                            v175 = std::string::append(&v185, " cannot be interpreted as a float");
                            v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
                            __p.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
                            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v176;
                            v175->__r_.__value_.__l.__size_ = 0;
                            v175->__r_.__value_.__r.__words[2] = 0;
                            v175->__r_.__value_.__r.__words[0] = 0;
                            std::runtime_error::runtime_error(v174, &__p);
                            __cxa_throw(v174, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                          }
                          v83 = v75;
                          v69 = v83;
                          goto LABEL_158;
                        case 3:
                          memset(&__p, 0, sizeof(__p));
                          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v190 + 8), *(_QWORD *)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 3);
                          turi::flexible_type_fail(0);
                          if (__p.__r_.__value_.__r.__words[0])
                          {
                            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          goto LABEL_158;
                        case 4:
                          memset(&__p, 0, sizeof(__p));
                          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 4);
                          turi::flexible_type_fail(0);
                          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                          goto LABEL_158;
                        case 5:
                          memset(&__p, 0, sizeof(__p));
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v190 + 8), *(uint64_t **)(v190 + 16), (uint64_t)(*(_QWORD *)(v190 + 16) - *(_QWORD *)(v190 + 8)) >> 5);
                          turi::flexible_type_fail(0);
                          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                          goto LABEL_158;
                        case 6:
                          v69 = (double)v191 / 1000000.0 + (double)(v190 << 8 >> 8);
                          goto LABEL_158;
                        case 7:
                          goto LABEL_158;
                        case 8:
                          v77 = v190;
                          v78 = *(unsigned int **)(v190 + 16);
                          v177 = v78;
                          if (v78)
                          {
                            v79 = v78 + 2;
                            do
                              v80 = __ldxr(v79);
                            while (__stxr(v80 + 1, v79));
                          }
                          v81 = *(_OWORD *)(v77 + 24);
                          v82 = *(_OWORD *)(v77 + 56);
                          v179 = *(_OWORD *)(v77 + 40);
                          v180 = v82;
                          v178 = v81;
                          turi::flexible_type_fail(0);
                          boost::detail::shared_count::~shared_count(&v177);
                          goto LABEL_158;
                        case 9:
                          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v190 + 8);
                          turi::flexible_type_fail(0);
                          if (v183)
                          {
                            v184 = v183;
                            operator delete(v183);
                          }
                          if (__p.__r_.__value_.__r.__words[2])
                          {
                            v182 = __p.__r_.__value_.__r.__words[2];
                            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                          }
                          v70 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                          if (__p.__r_.__value_.__l.__size_)
                          {
                            v71 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                            do
                              v72 = __ldaxr(v71);
                            while (__stlxr(v72 - 1, v71));
                            if (!v72)
                            {
                              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                              std::__shared_weak_count::__release_weak(v70);
                            }
                          }
LABEL_158:
                          v84 = 0.0;
                          switch(v189)
                          {
                            case 0:
                              v84 = (double)v187;
                              goto LABEL_188;
                            case 1:
                              v84 = *(double *)&v187;
                              goto LABEL_188;
                            case 2:
                              v88 = v187;
                              __idx = 0;
                              v89 = (char *)(v187 + 8);
                              if (*(char *)(v187 + 31) < 0)
                                v89 = *(char **)(v187 + 8);
                              std::string::basic_string[abi:ne180100]<0>(&__p, v89);
                              v90 = std::stod(&__p, &__idx);
                              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p.__r_.__value_.__l.__data_);
                              if (*(char *)(v88 + 31) < 0)
                                v91 = *(_QWORD *)(v88 + 16);
                              else
                                v91 = *(unsigned __int8 *)(v88 + 31);
                              if (__idx != v91)
                              {
                                v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::operator+<char>();
                                v169 = std::string::append(&v185, " cannot be interpreted as a float");
                                v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                                __p.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v170;
                                v169->__r_.__value_.__l.__size_ = 0;
                                v169->__r_.__value_.__r.__words[2] = 0;
                                v169->__r_.__value_.__r.__words[0] = 0;
                                std::runtime_error::runtime_error(v168, &__p);
                                __cxa_throw(v168, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                              }
                              v98 = v90;
                              v84 = v98;
                              goto LABEL_188;
                            case 3:
                              memset(&__p, 0, sizeof(__p));
                              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v187 + 8), *(_QWORD *)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 3);
                              turi::flexible_type_fail(0);
                              if (__p.__r_.__value_.__r.__words[0])
                              {
                                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                                operator delete(__p.__r_.__value_.__l.__data_);
                              }
                              goto LABEL_188;
                            case 4:
                              memset(&__p, 0, sizeof(__p));
                              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 4);
                              turi::flexible_type_fail(0);
                              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                              goto LABEL_188;
                            case 5:
                              memset(&__p, 0, sizeof(__p));
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v187 + 8), *(uint64_t **)(v187 + 16), (uint64_t)(*(_QWORD *)(v187 + 16) - *(_QWORD *)(v187 + 8)) >> 5);
                              turi::flexible_type_fail(0);
                              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
                              goto LABEL_188;
                            case 6:
                              v84 = (double)v188 / 1000000.0 + (double)(v187 << 8 >> 8);
                              goto LABEL_188;
                            case 7:
                              goto LABEL_188;
                            case 8:
                              v92 = v187;
                              v93 = *(unsigned int **)(v187 + 16);
                              v177 = v93;
                              if (v93)
                              {
                                v94 = v93 + 2;
                                do
                                  v95 = __ldxr(v94);
                                while (__stxr(v95 + 1, v94));
                              }
                              v96 = *(_OWORD *)(v92 + 24);
                              v97 = *(_OWORD *)(v92 + 56);
                              v179 = *(_OWORD *)(v92 + 40);
                              v180 = v97;
                              v178 = v96;
                              turi::flexible_type_fail(0);
                              boost::detail::shared_count::~shared_count(&v177);
                              goto LABEL_188;
                            case 9:
                              turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v187 + 8);
                              turi::flexible_type_fail(0);
                              if (v183)
                              {
                                v184 = v183;
                                operator delete(v183);
                              }
                              if (__p.__r_.__value_.__r.__words[2])
                              {
                                v182 = __p.__r_.__value_.__r.__words[2];
                                operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                              }
                              v85 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                              if (__p.__r_.__value_.__l.__size_)
                              {
                                v86 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                                do
                                  v87 = __ldaxr(v86);
                                while (__stlxr(v87 - 1, v86));
                                if (!v87)
                                {
                                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                                  std::__shared_weak_count::__release_weak(v85);
                                }
                              }
LABEL_188:
                              turi::visualization::histogram_result<double>::rescale(v2, v69, v84);
                              v99 = *(_QWORD *)(a1 + 56);
                              for (i = 49; i != 1049; ++i)
                                *(_QWORD *)(v99 + 8 * i) += *(_QWORD *)&v2[i];
                              switch(v189)
                              {
                                case 2:
                                  v101 = (unint64_t *)v187;
                                  do
                                  {
                                    v102 = __ldaxr(v101);
                                    v103 = v102 - 1;
                                  }
                                  while (__stlxr(v103, v101));
                                  if (!v103)
                                  {
                                    v104 = v187;
                                    if (v187)
                                    {
                                      if (*(char *)(v187 + 31) < 0)
                                        operator delete(*(void **)(v187 + 8));
                                      v105 = v104;
                                      v106 = 0x1012C404EF22A49;
                                      goto LABEL_231;
                                    }
                                  }
                                  break;
                                case 3:
                                  v118 = (unint64_t *)v187;
                                  do
                                  {
                                    v119 = __ldaxr(v118);
                                    v120 = v119 - 1;
                                  }
                                  while (__stlxr(v120, v118));
                                  if (!v120)
                                  {
                                    v121 = v187;
                                    if (v187)
                                    {
                                      v122 = *(void **)(v187 + 8);
                                      if (v122)
                                      {
                                        *(_QWORD *)(v187 + 16) = v122;
                                        operator delete(v122);
                                      }
                                      v105 = v121;
                                      v106 = 0x1080C409938AC02;
                                      goto LABEL_231;
                                    }
                                  }
                                  break;
                                case 4:
                                  v107 = (unint64_t *)v187;
                                  do
                                  {
                                    v108 = __ldaxr(v107);
                                    v109 = v108 - 1;
                                  }
                                  while (__stlxr(v109, v107));
                                  if (!v109)
                                  {
                                    v110 = v187;
                                    if (v187)
                                    {
                                      __p.__r_.__value_.__r.__words[0] = v187 + 8;
                                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                                      goto LABEL_224;
                                    }
                                  }
                                  break;
                                case 5:
                                  v123 = (unint64_t *)v187;
                                  do
                                  {
                                    v124 = __ldaxr(v123);
                                    v125 = v124 - 1;
                                  }
                                  while (__stlxr(v125, v123));
                                  if (!v125)
                                  {
                                    v110 = v187;
                                    if (v187)
                                    {
                                      __p.__r_.__value_.__r.__words[0] = v187 + 8;
                                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_224:
                                      v105 = v110;
                                      v106 = 0x1020C405E66F15BLL;
                                      goto LABEL_231;
                                    }
                                  }
                                  break;
                                case 8:
                                  v126 = (unint64_t *)v187;
                                  do
                                  {
                                    v127 = __ldaxr(v126);
                                    v128 = v127 - 1;
                                  }
                                  while (__stlxr(v128, v126));
                                  if (!v128)
                                  {
                                    v129 = v187;
                                    if (v187)
                                    {
                                      boost::detail::shared_count::~shared_count((unsigned int **)(v187 + 16));
                                      v105 = v129;
                                      v117 = -235920773;
                                      goto LABEL_230;
                                    }
                                  }
                                  break;
                                case 9:
                                  v111 = (unint64_t *)v187;
                                  do
                                  {
                                    v112 = __ldaxr(v111);
                                    v113 = v112 - 1;
                                  }
                                  while (__stlxr(v113, v111));
                                  if (!v113)
                                  {
                                    v114 = v187;
                                    if (v187)
                                    {
                                      v115 = *(void **)(v187 + 48);
                                      if (v115)
                                      {
                                        *(_QWORD *)(v187 + 56) = v115;
                                        operator delete(v115);
                                      }
                                      v116 = *(void **)(v114 + 24);
                                      if (v116)
                                      {
                                        *(_QWORD *)(v114 + 32) = v116;
                                        operator delete(v116);
                                      }
                                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v114 + 8);
                                      v105 = v114;
                                      v117 = 2071181815;
LABEL_230:
                                      v106 = v117 | 0x1030C4000000000;
LABEL_231:
                                      MEMORY[0x219A19A08](v105, v106);
                                    }
                                  }
                                  break;
                                default:
                                  break;
                              }
                              switch(v192)
                              {
                                case 2:
                                  v130 = (unint64_t *)v190;
                                  do
                                  {
                                    v131 = __ldaxr(v130);
                                    v132 = v131 - 1;
                                  }
                                  while (__stlxr(v132, v130));
                                  if (!v132)
                                  {
                                    v133 = v190;
                                    if (v190)
                                    {
                                      if (*(char *)(v190 + 31) < 0)
                                        operator delete(*(void **)(v190 + 8));
                                      v134 = v133;
                                      v135 = 0x1012C404EF22A49;
                                      goto LABEL_273;
                                    }
                                  }
                                  break;
                                case 3:
                                  v147 = (unint64_t *)v190;
                                  do
                                  {
                                    v148 = __ldaxr(v147);
                                    v149 = v148 - 1;
                                  }
                                  while (__stlxr(v149, v147));
                                  if (!v149)
                                  {
                                    v150 = v190;
                                    if (v190)
                                    {
                                      v151 = *(void **)(v190 + 8);
                                      if (v151)
                                      {
                                        *(_QWORD *)(v190 + 16) = v151;
                                        operator delete(v151);
                                      }
                                      v134 = v150;
                                      v135 = 0x1080C409938AC02;
                                      goto LABEL_273;
                                    }
                                  }
                                  break;
                                case 4:
                                  v136 = (unint64_t *)v190;
                                  do
                                  {
                                    v137 = __ldaxr(v136);
                                    v138 = v137 - 1;
                                  }
                                  while (__stlxr(v138, v136));
                                  if (!v138)
                                  {
                                    v139 = v190;
                                    if (v190)
                                    {
                                      __p.__r_.__value_.__r.__words[0] = v190 + 8;
                                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                                      goto LABEL_266;
                                    }
                                  }
                                  break;
                                case 5:
                                  v152 = (unint64_t *)v190;
                                  do
                                  {
                                    v153 = __ldaxr(v152);
                                    v154 = v153 - 1;
                                  }
                                  while (__stlxr(v154, v152));
                                  if (!v154)
                                  {
                                    v139 = v190;
                                    if (v190)
                                    {
                                      __p.__r_.__value_.__r.__words[0] = v190 + 8;
                                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_266:
                                      v134 = v139;
                                      v135 = 0x1020C405E66F15BLL;
                                      goto LABEL_273;
                                    }
                                  }
                                  break;
                                case 8:
                                  v155 = (unint64_t *)v190;
                                  do
                                  {
                                    v156 = __ldaxr(v155);
                                    v157 = v156 - 1;
                                  }
                                  while (__stlxr(v157, v155));
                                  if (!v157)
                                  {
                                    v158 = v190;
                                    if (v190)
                                    {
                                      boost::detail::shared_count::~shared_count((unsigned int **)(v190 + 16));
                                      v134 = v158;
                                      v146 = -235920773;
                                      goto LABEL_272;
                                    }
                                  }
                                  break;
                                case 9:
                                  v140 = (unint64_t *)v190;
                                  do
                                  {
                                    v141 = __ldaxr(v140);
                                    v142 = v141 - 1;
                                  }
                                  while (__stlxr(v142, v140));
                                  if (!v142)
                                  {
                                    v143 = v190;
                                    if (v190)
                                    {
                                      v144 = *(void **)(v190 + 48);
                                      if (v144)
                                      {
                                        *(_QWORD *)(v190 + 56) = v144;
                                        operator delete(v144);
                                      }
                                      v145 = *(void **)(v143 + 24);
                                      if (v145)
                                      {
                                        *(_QWORD *)(v143 + 32) = v145;
                                        operator delete(v145);
                                      }
                                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v143 + 8);
                                      v134 = v143;
                                      v146 = 2071181815;
LABEL_272:
                                      v135 = v146 | 0x1030C4000000000;
LABEL_273:
                                      MEMORY[0x219A19A08](v134, v135);
                                    }
                                  }
                                  break;
                                default:
                                  break;
                              }
                              v2 += 1053;
                              if (v2 == v3)
                                return;
                              continue;
                            default:
                              goto LABEL_276;
                          }
                        default:
                          goto LABEL_276;
                      }
                    default:
                      goto LABEL_276;
                  }
                default:
                  goto LABEL_276;
              }
            default:
              goto LABEL_276;
          }
        default:
          goto LABEL_276;
      }
    }
LABEL_276:
    turi::flexible_type_fail(0);
    __break(1u);
  }
}

void sub_2185F3CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;

  if (a22 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v37 - 148))
      {
        case 2:
          v39 = *(unint64_t **)(v37 - 160);
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (v41)
            goto LABEL_46;
          v42 = *(_QWORD *)(v37 - 160);
          if (!v42)
            goto LABEL_46;
          if (*(char *)(v42 + 31) < 0)
            operator delete(*(void **)(v42 + 8));
          v43 = (_QWORD *)v42;
          v44 = 0x1012C404EF22A49;
          break;
        case 3:
          v53 = *(unint64_t **)(v37 - 160);
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (v55)
            goto LABEL_46;
          v56 = *(_QWORD **)(v37 - 160);
          if (!v56)
            goto LABEL_46;
          v57 = (void *)v56[1];
          if (v57)
          {
            v56[2] = v57;
            operator delete(v57);
          }
          v43 = v56;
          v44 = 0x1080C409938AC02;
          break;
        case 4:
          v45 = *(unint64_t **)(v37 - 160);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (v47)
            goto LABEL_46;
          v48 = *(_QWORD **)(v37 - 160);
          if (!v48)
            goto LABEL_46;
          a30 = v48 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
          goto LABEL_38;
        case 5:
          v58 = *(unint64_t **)(v37 - 160);
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (v60)
            goto LABEL_46;
          v48 = *(_QWORD **)(v37 - 160);
          if (!v48)
            goto LABEL_46;
          a30 = v48 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
LABEL_38:
          v43 = v48;
          v44 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v61 = *(unint64_t **)(v37 - 160);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = *(_QWORD *)(v37 - 160);
            if (v64)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v64 + 16));
              MEMORY[0x219A19A08](v64, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v37 - 160) = 0;
          }
          goto LABEL_46;
        case 9:
          v49 = *(unint64_t **)(v37 - 160);
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (v51)
            goto LABEL_46;
          v52 = *(_QWORD **)(v37 - 160);
          if (!v52)
            goto LABEL_46;
          v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52);
          v44 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v43, v44);
LABEL_46:
      switch(*(_BYTE *)(v37 - 132))
      {
        case 2:
          v65 = *(unint64_t **)(v37 - 144);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (v67)
            goto LABEL_84;
          v68 = *(_QWORD *)(v37 - 144);
          if (!v68)
            goto LABEL_84;
          if (*(char *)(v68 + 31) < 0)
            operator delete(*(void **)(v68 + 8));
          v69 = (_QWORD *)v68;
          v70 = 0x1012C404EF22A49;
          goto LABEL_83;
        case 3:
          v80 = *(unint64_t **)(v37 - 144);
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (v82)
            goto LABEL_84;
          v83 = *(_QWORD **)(v37 - 144);
          if (!v83)
            goto LABEL_84;
          v84 = (void *)v83[1];
          if (v84)
          {
            v83[2] = v84;
            operator delete(v84);
          }
          v69 = v83;
          v70 = 0x1080C409938AC02;
          goto LABEL_83;
        case 4:
          v71 = *(unint64_t **)(v37 - 144);
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (v73)
            goto LABEL_84;
          v74 = *(_QWORD **)(v37 - 144);
          if (!v74)
            goto LABEL_84;
          a30 = v74 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
          goto LABEL_76;
        case 5:
          v85 = *(unint64_t **)(v37 - 144);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87)
            goto LABEL_84;
          v74 = *(_QWORD **)(v37 - 144);
          if (!v74)
            goto LABEL_84;
          a30 = v74 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
LABEL_76:
          v69 = v74;
          v70 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        case 8:
          v88 = *(unint64_t **)(v37 - 144);
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (v90)
            goto LABEL_84;
          v91 = *(_QWORD *)(v37 - 144);
          if (!v91)
            goto LABEL_84;
          boost::detail::shared_count::~shared_count((unsigned int **)(v91 + 16));
          v69 = (_QWORD *)v91;
          v79 = -235920773;
          goto LABEL_82;
        case 9:
          v75 = *(unint64_t **)(v37 - 144);
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (v77)
            goto LABEL_84;
          v78 = *(_QWORD **)(v37 - 144);
          if (!v78)
            goto LABEL_84;
          v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v78);
          v79 = 2071181815;
LABEL_82:
          v70 = v79 | 0x1030C4000000000;
LABEL_83:
          MEMORY[0x219A19A08](v69, v70);
LABEL_84:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_84;
      }
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void turi::visualization::histogram<double>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int **v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int **v28;
  unsigned int *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int **v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int **v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int **v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int **v55;
  unsigned int *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int **v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unsigned int **v87;
  char *v88;
  double v89;
  unsigned int *v90;
  unsigned int **v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  __int128 v95;
  __int128 v96;
  size_t v97;
  char *v98;
  double v99;
  uint64_t v100;
  size_t v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  __int128 v105;
  __int128 v106;
  float v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int **v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int **v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int **v124;
  unsigned int *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int **v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int **v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int **v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int **v150;
  unsigned int *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int **v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int **v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int **v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int **v177;
  unsigned int *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int **v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  void *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int **v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unsigned int **v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int **v226;
  unsigned int *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int **v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  float v253;
  double v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  size_t v258;
  _QWORD *v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  size_t v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unsigned int v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  size_t v272;
  void *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  size_t v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int **v284;
  _QWORD *v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  unsigned int **v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int **v297;
  unsigned int *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  unsigned int **v305;
  size_t v306;
  char *v307;
  double v308;
  uint64_t v309;
  size_t v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int v313;
  __int128 v314;
  __int128 v315;
  float v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  size_t v320;
  _QWORD *v321;
  uint64_t v322;
  unint64_t *v323;
  unint64_t v324;
  unint64_t v325;
  size_t v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  size_t v333;
  void *v334;
  unint64_t *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  size_t v341;
  std::runtime_error *v342;
  std::string *v343;
  __int128 v344;
  std::runtime_error *exception;
  std::string *v346;
  __int128 v347;
  std::runtime_error *v348;
  std::string *v349;
  __int128 v350;
  void *__p[2];
  __int128 v352;
  __int128 v353;
  __int128 v354;
  size_t v355;
  std::string v356;
  unsigned int **v357;
  int v358;
  char v359;
  unint64_t *v360;
  int v361;
  char v362;
  unsigned int **v363;
  int v364;
  char v365;
  unint64_t *v366;
  char v367;
  unsigned int **v368;
  int v369;
  char v370;
  unint64_t *v371;
  char v372;
  size_t v373;
  int v374;
  char v375;
  size_t __idx;
  int v377;
  char v378;
  double v379;
  int v380;
  char v381;
  unsigned int **v382;
  char v383;
  uint64_t v384;

  v384 = *MEMORY[0x24BDAC8D0];
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::init(a1, a2, a3);
  v4 = (_QWORD **)(a1 + 16);
  v5 = turi::gl_sarray::dtype((turi::gl_sarray *)(a1 + 16));
  if (v5 >= 2)
    turi::visualization::histogram<long long>::init(turi::gl_sarray const&,unsigned long)::{lambda(void)#1}::operator()();
  v6 = v5;
  v7 = turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
  if (v7 >= 2)
  {
    turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v382);
    if (v383 != 7)
    {
      turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 1uLL, (uint64_t)&v379);
      if (v381 == 7)
      {
        v8 = 0;
      }
      else
      {
        turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&__idx);
        v16 = 0.0;
        switch(v378)
        {
          case 0:
            v16 = (double)(uint64_t)__idx;
            break;
          case 1:
            v16 = *(double *)&__idx;
            break;
          case 2:
            v97 = __idx;
            *(double *)&v373 = 0.0;
            v98 = (char *)(__idx + 8);
            if (*(char *)(__idx + 31) < 0)
              v98 = *(char **)(__idx + 8);
            std::string::basic_string[abi:ne180100]<0>(__p, v98);
            v99 = std::stod((const std::string *)__p, &v373);
            if (SBYTE7(v352) < 0)
              operator delete(__p[0]);
            if (*(char *)(v97 + 31) < 0)
              v100 = *(_QWORD *)(v97 + 16);
            else
              v100 = *(unsigned __int8 *)(v97 + 31);
            if (v373 != v100)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v346 = std::string::append(&v356, " cannot be interpreted as a float");
              v347 = *(_OWORD *)&v346->__r_.__value_.__l.__data_;
              *(_QWORD *)&v352 = *((_QWORD *)&v346->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v347;
              v346->__r_.__value_.__l.__size_ = 0;
              v346->__r_.__value_.__r.__words[2] = 0;
              v346->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__p);
              __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
            }
            v253 = v99;
            v16 = v253;
            break;
          case 3:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(__idx + 8), *(_QWORD *)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 4);
            turi::flexible_type_fail(0);
            v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
            break;
          case 5:
            __p[1] = 0;
            *(_QWORD *)&v352 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 5);
            turi::flexible_type_fail(0);
            v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
            break;
          case 6:
            v16 = (double)v377 / 1000000.0 + (double)((uint64_t)(__idx << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            v101 = __idx;
            v102 = *(unsigned int **)(__idx + 16);
            __p[0] = *(void **)(__idx + 8);
            __p[1] = v102;
            if (v102)
            {
              v103 = v102 + 2;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            v105 = *(_OWORD *)(v101 + 24);
            v106 = *(_OWORD *)(v101 + 56);
            v353 = *(_OWORD *)(v101 + 40);
            v354 = v106;
            v352 = v105;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, __idx + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
            break;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_531;
        }
        if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          v8 = 0;
        }
        else
        {
          turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 1uLL, (uint64_t)&v373);
          v254 = 0.0;
          switch(v375)
          {
            case 0:
              v254 = (double)(uint64_t)v373;
              break;
            case 1:
              v254 = *(double *)&v373;
              break;
            case 2:
              v306 = v373;
              v355 = 0;
              v307 = (char *)(v373 + 8);
              if (*(char *)(v373 + 31) < 0)
                v307 = *(char **)(v373 + 8);
              std::string::basic_string[abi:ne180100]<0>(__p, v307);
              v308 = std::stod((const std::string *)__p, &v355);
              if (SBYTE7(v352) < 0)
                operator delete(__p[0]);
              if (*(char *)(v306 + 31) < 0)
                v309 = *(_QWORD *)(v306 + 16);
              else
                v309 = *(unsigned __int8 *)(v306 + 31);
              if (v355 != v309)
              {
                v348 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v349 = std::string::append(&v356, " cannot be interpreted as a float");
                v350 = *(_OWORD *)&v349->__r_.__value_.__l.__data_;
                *(_QWORD *)&v352 = *((_QWORD *)&v349->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v350;
                v349->__r_.__value_.__l.__size_ = 0;
                v349->__r_.__value_.__r.__words[2] = 0;
                v349->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v348, (const std::string *)__p);
                __cxa_throw(v348, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v316 = v308;
              v254 = v316;
              break;
            case 3:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v373 + 8), *(_QWORD *)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              break;
            case 4:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v373 + 8), *(uint64_t **)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
              break;
            case 5:
              __p[1] = 0;
              *(_QWORD *)&v352 = 0;
              __p[0] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v373 + 8), *(uint64_t **)(v373 + 16), (uint64_t)(*(_QWORD *)(v373 + 16) - *(_QWORD *)(v373 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
              break;
            case 6:
              v254 = (double)v374 / 1000000.0 + (double)((uint64_t)(v373 << 8) >> 8);
              break;
            case 7:
              break;
            case 8:
              v310 = v373;
              v311 = *(unsigned int **)(v373 + 16);
              __p[0] = *(void **)(v373 + 8);
              __p[1] = v311;
              if (v311)
              {
                v312 = v311 + 2;
                do
                  v313 = __ldxr(v312);
                while (__stxr(v313 + 1, v312));
              }
              v314 = *(_OWORD *)(v310 + 24);
              v315 = *(_OWORD *)(v310 + 56);
              v353 = *(_OWORD *)(v310 + 40);
              v354 = v315;
              v352 = v314;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
              break;
            case 9:
              turi::flexible_type_impl::ndarray<double>::ndarray(__p, v373 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
              break;
            default:
              turi::flexible_type_fail(0);
              goto LABEL_531;
          }
          v8 = (*(_QWORD *)&v254 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          switch(v375)
          {
            case 2:
              v317 = (unint64_t *)v373;
              do
              {
                v318 = __ldaxr(v317);
                v319 = v318 - 1;
              }
              while (__stlxr(v319, v317));
              if (!v319)
              {
                v320 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  if (*(char *)(v373 + 31) < 0)
                    operator delete(*(void **)(v373 + 8));
                  v321 = (_QWORD *)v320;
                  v322 = 0x1012C404EF22A49;
                  goto LABEL_517;
                }
              }
              break;
            case 3:
              v330 = (unint64_t *)v373;
              do
              {
                v331 = __ldaxr(v330);
                v332 = v331 - 1;
              }
              while (__stlxr(v332, v330));
              if (!v332)
              {
                v333 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  v334 = *(void **)(v373 + 8);
                  if (v334)
                  {
                    *(_QWORD *)(v373 + 16) = v334;
                    operator delete(v334);
                  }
                  v321 = (_QWORD *)v333;
                  v322 = 0x1080C409938AC02;
                  goto LABEL_517;
                }
              }
              break;
            case 4:
              v323 = (unint64_t *)v373;
              do
              {
                v324 = __ldaxr(v323);
                v325 = v324 - 1;
              }
              while (__stlxr(v325, v323));
              if (!v325)
              {
                v326 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  __p[0] = (void *)(v373 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_516;
                }
              }
              break;
            case 5:
              v335 = (unint64_t *)v373;
              do
              {
                v336 = __ldaxr(v335);
                v337 = v336 - 1;
              }
              while (__stlxr(v337, v335));
              if (!v337)
              {
                v326 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  __p[0] = (void *)(v373 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_516:
                  v321 = (_QWORD *)v326;
                  v322 = 0x1020C405E66F15BLL;
                  goto LABEL_517;
                }
              }
              break;
            case 8:
              v338 = (unint64_t *)v373;
              do
              {
                v339 = __ldaxr(v338);
                v340 = v339 - 1;
              }
              while (__stlxr(v340, v338));
              if (!v340)
              {
                v341 = v373;
                if (*(double *)&v373 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v373 + 16));
                  MEMORY[0x219A19A08](v341, 0x1030C40F1F0227BLL);
                }
                *(double *)&v373 = 0.0;
              }
              break;
            case 9:
              v327 = (unint64_t *)v373;
              do
              {
                v328 = __ldaxr(v327);
                v329 = v328 - 1;
              }
              while (__stlxr(v329, v327));
              if (!v329 && *(double *)&v373 != 0.0)
              {
                v321 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v373);
                v322 = 0x1030C407B73B9F7;
LABEL_517:
                MEMORY[0x219A19A08](v321, v322);
              }
              break;
            default:
              break;
          }
        }
        switch(v378)
        {
          case 2:
            v255 = (unint64_t *)__idx;
            do
            {
              v256 = __ldaxr(v255);
              v257 = v256 - 1;
            }
            while (__stlxr(v257, v255));
            if (!v257)
            {
              v258 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                if (*(char *)(__idx + 31) < 0)
                  operator delete(*(void **)(__idx + 8));
                v259 = (_QWORD *)v258;
                v260 = 0x1012C404EF22A49;
                goto LABEL_427;
              }
            }
            break;
          case 3:
            v269 = (unint64_t *)__idx;
            do
            {
              v270 = __ldaxr(v269);
              v271 = v270 - 1;
            }
            while (__stlxr(v271, v269));
            if (!v271)
            {
              v272 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                v273 = *(void **)(__idx + 8);
                if (v273)
                {
                  *(_QWORD *)(__idx + 16) = v273;
                  operator delete(v273);
                }
                v259 = (_QWORD *)v272;
                v260 = 0x1080C409938AC02;
                goto LABEL_427;
              }
            }
            break;
          case 4:
            v261 = (unint64_t *)__idx;
            do
            {
              v262 = __ldaxr(v261);
              v263 = v262 - 1;
            }
            while (__stlxr(v263, v261));
            if (!v263)
            {
              v264 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                __p[0] = (void *)(__idx + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_420;
              }
            }
            break;
          case 5:
            v274 = (unint64_t *)__idx;
            do
            {
              v275 = __ldaxr(v274);
              v276 = v275 - 1;
            }
            while (__stlxr(v276, v274));
            if (!v276)
            {
              v264 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                __p[0] = (void *)(__idx + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_420:
                v259 = (_QWORD *)v264;
                v260 = 0x1020C405E66F15BLL;
                goto LABEL_427;
              }
            }
            break;
          case 8:
            v277 = (unint64_t *)__idx;
            do
            {
              v278 = __ldaxr(v277);
              v279 = v278 - 1;
            }
            while (__stlxr(v279, v277));
            if (!v279)
            {
              v280 = __idx;
              if (*(double *)&__idx != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
                v259 = (_QWORD *)v280;
                v268 = -235920773;
                goto LABEL_426;
              }
            }
            break;
          case 9:
            v265 = (unint64_t *)__idx;
            do
            {
              v266 = __ldaxr(v265);
              v267 = v266 - 1;
            }
            while (__stlxr(v267, v265));
            if (!v267 && *(double *)&__idx != 0.0)
            {
              v259 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)__idx);
              v268 = 2071181815;
LABEL_426:
              v260 = v268 | 0x1030C4000000000;
LABEL_427:
              MEMORY[0x219A19A08](v259, v260);
            }
            break;
          default:
            break;
        }
        switch(v381)
        {
          case 2:
            v281 = *(unint64_t **)&v379;
            do
            {
              v282 = __ldaxr(v281);
              v283 = v282 - 1;
            }
            while (__stlxr(v283, v281));
            if (!v283)
            {
              v284 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
                  operator delete(*(void **)(*(_QWORD *)&v379 + 8));
                v285 = v284;
                v286 = 0x1012C404EF22A49;
                goto LABEL_459;
              }
            }
            break;
          case 3:
            v294 = *(unint64_t **)&v379;
            do
            {
              v295 = __ldaxr(v294);
              v296 = v295 - 1;
            }
            while (__stlxr(v296, v294));
            if (!v296)
            {
              v297 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                v298 = *(unsigned int **)(*(_QWORD *)&v379 + 8);
                if (v298)
                {
                  *(_QWORD *)(*(_QWORD *)&v379 + 16) = v298;
                  operator delete(v298);
                }
                v285 = v297;
                v286 = 0x1080C409938AC02;
                goto LABEL_459;
              }
            }
            break;
          case 4:
            v287 = *(unint64_t **)&v379;
            do
            {
              v288 = __ldaxr(v287);
              v289 = v288 - 1;
            }
            while (__stlxr(v289, v287));
            if (!v289)
            {
              v290 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v379 + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_458;
              }
            }
            break;
          case 5:
            v299 = *(unint64_t **)&v379;
            do
            {
              v300 = __ldaxr(v299);
              v301 = v300 - 1;
            }
            while (__stlxr(v301, v299));
            if (!v301)
            {
              v290 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                __p[0] = (void *)(*(_QWORD *)&v379 + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_458:
                v285 = v290;
                v286 = 0x1020C405E66F15BLL;
                goto LABEL_459;
              }
            }
            break;
          case 8:
            v302 = *(unint64_t **)&v379;
            do
            {
              v303 = __ldaxr(v302);
              v304 = v303 - 1;
            }
            while (__stlxr(v304, v302));
            if (!v304)
            {
              v305 = *(unsigned int ***)&v379;
              if (v379 != 0.0)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v379 + 16));
                MEMORY[0x219A19A08](v305, 0x1030C40F1F0227BLL);
              }
              v379 = 0.0;
            }
            break;
          case 9:
            v291 = *(unint64_t **)&v379;
            do
            {
              v292 = __ldaxr(v291);
              v293 = v292 - 1;
            }
            while (__stlxr(v293, v291));
            if (!v293 && v379 != 0.0)
            {
              v285 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v379);
              v286 = 0x1030C407B73B9F7;
LABEL_459:
              MEMORY[0x219A19A08](v285, v286);
            }
            break;
          default:
            break;
        }
      }
      switch(v383)
      {
        case 2:
          v9 = (unint64_t *)v382;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (v11)
            goto LABEL_52;
          v12 = v382;
          if (!v382)
            goto LABEL_50;
          if (*((char *)v382 + 31) < 0)
            operator delete(v382[1]);
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        case 3:
          v25 = (unint64_t *)v382;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (v27)
            goto LABEL_52;
          v28 = v382;
          if (!v382)
            goto LABEL_50;
          v29 = v382[1];
          if (v29)
          {
            v382[2] = v29;
            operator delete(v29);
          }
          v13 = v28;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        case 4:
          v17 = (unint64_t *)v382;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (v19)
            goto LABEL_52;
          v20 = v382;
          if (!v382)
            goto LABEL_50;
          __p[0] = v382 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_42;
        case 5:
          v30 = (unint64_t *)v382;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (v32)
            goto LABEL_52;
          v20 = v382;
          if (!v382)
            goto LABEL_50;
          __p[0] = v382 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_42:
          v13 = v20;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        case 8:
          v33 = (unint64_t *)v382;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (v35)
            goto LABEL_52;
          v36 = v382;
          if (!v382)
            goto LABEL_50;
          boost::detail::shared_count::~shared_count(v382 + 2);
          v13 = v36;
          v24 = -235920773;
          goto LABEL_48;
        case 9:
          v21 = (unint64_t *)v382;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (v23)
            goto LABEL_52;
          if (!v382)
            goto LABEL_50;
          v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v382);
          v24 = 2071181815;
LABEL_48:
          v14 = v24 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
LABEL_50:
          if (!v8)
            goto LABEL_236;
LABEL_53:
          v37 = *(_QWORD *)(a1 + 56);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v371);
          turi::gl_sarray::operator[](v4, 1uLL, (uint64_t)&v368);
          turi::visualization::histogram_result<double>::init(v37, v6, (int *)&v371, (int *)&v368);
          switch(v370)
          {
            case 2:
              v38 = (unint64_t *)v368;
              do
              {
                v39 = __ldaxr(v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, v38));
              if (!v40)
              {
                v41 = v368;
                if (v368)
                {
                  if (*((char *)v368 + 31) < 0)
                    operator delete(v368[1]);
                  v42 = v41;
                  v43 = 0x1012C404EF22A49;
                  goto LABEL_90;
                }
              }
              break;
            case 3:
              v52 = (unint64_t *)v368;
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                v55 = v368;
                if (v368)
                {
                  v56 = v368[1];
                  if (v56)
                  {
                    v368[2] = v56;
                    operator delete(v56);
                  }
                  v42 = v55;
                  v43 = 0x1080C409938AC02;
                  goto LABEL_90;
                }
              }
              break;
            case 4:
              v44 = (unint64_t *)v368;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v47 = v368;
                if (v368)
                {
                  __p[0] = v368 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_83;
                }
              }
              break;
            case 5:
              v57 = (unint64_t *)v368;
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
              {
                v47 = v368;
                if (v368)
                {
                  __p[0] = v368 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_83:
                  v42 = v47;
                  v43 = 0x1020C405E66F15BLL;
                  goto LABEL_90;
                }
              }
              break;
            case 8:
              v60 = (unint64_t *)v368;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v63 = v368;
                if (v368)
                {
                  boost::detail::shared_count::~shared_count(v368 + 2);
                  v42 = v63;
                  v51 = -235920773;
                  goto LABEL_89;
                }
              }
              break;
            case 9:
              v48 = (unint64_t *)v368;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50 && v368)
              {
                v42 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v368);
                v51 = 2071181815;
LABEL_89:
                v43 = v51 | 0x1030C4000000000;
LABEL_90:
                MEMORY[0x219A19A08](v42, v43);
              }
              break;
            default:
              break;
          }
          v368 = 0;
          v369 = 0;
          v370 = 0;
          switch(v372)
          {
            case 2:
              v64 = v371;
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                v67 = v371;
                if (v371)
                  goto LABEL_279;
              }
              break;
            case 3:
              v76 = v371;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
              {
                v79 = v371;
                if (v371)
                  goto LABEL_296;
              }
              break;
            case 4:
              v68 = v371;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v71 = v371;
                if (v371)
                  goto LABEL_286;
              }
              break;
            case 5:
              v80 = v371;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v71 = v371;
                if (v371)
                  goto LABEL_303;
              }
              break;
            case 8:
              v83 = v371;
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v86 = v371;
                if (v371)
                  goto LABEL_309;
              }
              break;
            case 9:
              v72 = v371;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                v75 = v371;
                if (v371)
                  goto LABEL_291;
              }
              break;
            default:
              return;
          }
          break;
        default:
LABEL_52:
          if (v8)
            goto LABEL_53;
          goto LABEL_236;
      }
      return;
    }
LABEL_236:
    v159 = *(_QWORD *)(a1 + 56);
    v361 = 0;
    v362 = 1;
    v360 = 0;
    v358 = 0;
    v359 = 1;
    v357 = 0;
    turi::visualization::histogram_result<double>::init(v159, v6, (int *)&v360, (int *)&v357);
    switch(v359)
    {
      case 2:
        v160 = (unint64_t *)v357;
        do
        {
          v161 = __ldaxr(v160);
          v162 = v161 - 1;
        }
        while (__stlxr(v162, v160));
        if (!v162)
        {
          v163 = v357;
          if (v357)
          {
            if (*((char *)v357 + 31) < 0)
              operator delete(v357[1]);
            v164 = v163;
            v165 = 0x1012C404EF22A49;
            goto LABEL_273;
          }
        }
        break;
      case 3:
        v174 = (unint64_t *)v357;
        do
        {
          v175 = __ldaxr(v174);
          v176 = v175 - 1;
        }
        while (__stlxr(v176, v174));
        if (!v176)
        {
          v177 = v357;
          if (v357)
          {
            v178 = v357[1];
            if (v178)
            {
              v357[2] = v178;
              operator delete(v178);
            }
            v164 = v177;
            v165 = 0x1080C409938AC02;
            goto LABEL_273;
          }
        }
        break;
      case 4:
        v166 = (unint64_t *)v357;
        do
        {
          v167 = __ldaxr(v166);
          v168 = v167 - 1;
        }
        while (__stlxr(v168, v166));
        if (!v168)
        {
          v169 = v357;
          if (v357)
          {
            __p[0] = v357 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_266;
          }
        }
        break;
      case 5:
        v179 = (unint64_t *)v357;
        do
        {
          v180 = __ldaxr(v179);
          v181 = v180 - 1;
        }
        while (__stlxr(v181, v179));
        if (!v181)
        {
          v169 = v357;
          if (v357)
          {
            __p[0] = v357 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_266:
            v164 = v169;
            v165 = 0x1020C405E66F15BLL;
            goto LABEL_273;
          }
        }
        break;
      case 8:
        v182 = (unint64_t *)v357;
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          v185 = v357;
          if (v357)
          {
            boost::detail::shared_count::~shared_count(v357 + 2);
            v164 = v185;
            v173 = -235920773;
            goto LABEL_272;
          }
        }
        break;
      case 9:
        v170 = (unint64_t *)v357;
        do
        {
          v171 = __ldaxr(v170);
          v172 = v171 - 1;
        }
        while (__stlxr(v172, v170));
        if (!v172 && v357)
        {
          v164 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v357);
          v173 = 2071181815;
LABEL_272:
          v165 = v173 | 0x1030C4000000000;
LABEL_273:
          MEMORY[0x219A19A08](v164, v165);
        }
        break;
      default:
        break;
    }
    v357 = 0;
    v358 = 0;
    v359 = 0;
    switch(v362)
    {
      case 2:
        v186 = v360;
        do
        {
          v187 = __ldaxr(v186);
          v188 = v187 - 1;
        }
        while (__stlxr(v188, v186));
        if (!v188)
        {
          v67 = v360;
          if (v360)
            goto LABEL_279;
        }
        break;
      case 3:
        v198 = v360;
        do
        {
          v199 = __ldaxr(v198);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v198));
        if (!v200)
        {
          v79 = v360;
          if (v360)
            goto LABEL_296;
        }
        break;
      case 4:
        v191 = v360;
        do
        {
          v192 = __ldaxr(v191);
          v193 = v192 - 1;
        }
        while (__stlxr(v193, v191));
        if (!v193)
        {
          v71 = v360;
          if (v360)
            goto LABEL_286;
        }
        break;
      case 5:
        v202 = v360;
        do
        {
          v203 = __ldaxr(v202);
          v204 = v203 - 1;
        }
        while (__stlxr(v204, v202));
        if (!v204)
        {
          v71 = v360;
          if (v360)
            goto LABEL_303;
        }
        break;
      case 8:
        v205 = v360;
        do
        {
          v206 = __ldaxr(v205);
          v207 = v206 - 1;
        }
        while (__stlxr(v207, v205));
        if (!v207)
        {
          v86 = v360;
          if (v360)
            goto LABEL_309;
        }
        break;
      case 9:
        v194 = v360;
        do
        {
          v195 = __ldaxr(v194);
          v196 = v195 - 1;
        }
        while (__stlxr(v196, v194));
        if (!v196)
        {
          v75 = v360;
          if (v360)
            goto LABEL_291;
        }
        break;
      default:
        return;
    }
    return;
  }
  if (v7 != 1)
    goto LABEL_236;
  turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v382);
  if (v383 == 7)
    goto LABEL_236;
  turi::gl_sarray::operator[]((_QWORD **)(a1 + 16), 0, (uint64_t)&v379);
  v15 = 0.0;
  switch(v381)
  {
    case 0:
      v15 = (double)*(uint64_t *)&v379;
      goto LABEL_159;
    case 1:
      v15 = v379;
      goto LABEL_159;
    case 2:
      v87 = *(unsigned int ***)&v379;
      *(double *)&__idx = 0.0;
      v88 = (char *)(*(_QWORD *)&v379 + 8);
      if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
        v88 = *(char **)(*(_QWORD *)&v379 + 8);
      std::string::basic_string[abi:ne180100]<0>(__p, v88);
      v89 = std::stod((const std::string *)__p, &__idx);
      if (SBYTE7(v352) < 0)
        operator delete(__p[0]);
      if (*((char *)v87 + 31) < 0)
        v90 = v87[2];
      else
        v90 = (unsigned int *)*((unsigned __int8 *)v87 + 31);
      if ((unsigned int *)__idx != v90)
      {
        v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v343 = std::string::append(&v356, " cannot be interpreted as a float");
        v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
        *(_QWORD *)&v352 = *((_QWORD *)&v343->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v344;
        v343->__r_.__value_.__l.__size_ = 0;
        v343->__r_.__value_.__r.__words[2] = 0;
        v343->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v342, (const std::string *)__p);
        __cxa_throw(v342, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v107 = v89;
      v15 = v107;
      goto LABEL_159;
    case 3:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v379 + 8), *(_QWORD *)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_159;
    case 4:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v379 + 8), *(uint64_t **)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
      goto LABEL_159;
    case 5:
      __p[1] = 0;
      *(_QWORD *)&v352 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v379 + 8), *(uint64_t **)(*(_QWORD *)&v379 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v379 + 16) - *(_QWORD *)(*(_QWORD *)&v379 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v356.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
      goto LABEL_159;
    case 6:
      v15 = (double)v380 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v379 << 8) >> 8);
      goto LABEL_159;
    case 7:
      goto LABEL_159;
    case 8:
      v91 = *(unsigned int ***)&v379;
      v92 = *(unsigned int **)(*(_QWORD *)&v379 + 16);
      __p[0] = *(void **)(*(_QWORD *)&v379 + 8);
      __p[1] = v92;
      if (v92)
      {
        v93 = v92 + 2;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = *(_OWORD *)(v91 + 3);
      v96 = *(_OWORD *)(v91 + 7);
      v353 = *(_OWORD *)(v91 + 5);
      v354 = v96;
      v352 = v95;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      goto LABEL_159;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)&v379 + 8);
      turi::flexible_type_fail(0);
      turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
LABEL_159:
      switch(v381)
      {
        case 2:
          v108 = *(unint64_t **)&v379;
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (!v110)
          {
            v111 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v379 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v379 + 8));
              v112 = v111;
              v113 = 0x1012C404EF22A49;
              goto LABEL_190;
            }
          }
          break;
        case 3:
          v121 = *(unint64_t **)&v379;
          do
          {
            v122 = __ldaxr(v121);
            v123 = v122 - 1;
          }
          while (__stlxr(v123, v121));
          if (!v123)
          {
            v124 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              v125 = *(unsigned int **)(*(_QWORD *)&v379 + 8);
              if (v125)
              {
                *(_QWORD *)(*(_QWORD *)&v379 + 16) = v125;
                operator delete(v125);
              }
              v112 = v124;
              v113 = 0x1080C409938AC02;
              goto LABEL_190;
            }
          }
          break;
        case 4:
          v114 = *(unint64_t **)&v379;
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v117 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v379 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_189;
            }
          }
          break;
        case 5:
          v126 = *(unint64_t **)&v379;
          do
          {
            v127 = __ldaxr(v126);
            v128 = v127 - 1;
          }
          while (__stlxr(v128, v126));
          if (!v128)
          {
            v117 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              __p[0] = (void *)(*(_QWORD *)&v379 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_189:
              v112 = v117;
              v113 = 0x1020C405E66F15BLL;
              goto LABEL_190;
            }
          }
          break;
        case 8:
          v129 = *(unint64_t **)&v379;
          do
          {
            v130 = __ldaxr(v129);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v129));
          if (!v131)
          {
            v132 = *(unsigned int ***)&v379;
            if (v379 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v379 + 16));
              MEMORY[0x219A19A08](v132, 0x1030C40F1F0227BLL);
            }
            v379 = 0.0;
          }
          break;
        case 9:
          v118 = *(unint64_t **)&v379;
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120 && v379 != 0.0)
          {
            v112 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)&v379);
            v113 = 0x1030C407B73B9F7;
LABEL_190:
            MEMORY[0x219A19A08](v112, v113);
          }
          break;
        default:
          break;
      }
      switch(v383)
      {
        case 2:
          v133 = (unint64_t *)v382;
          do
          {
            v134 = __ldaxr(v133);
            v135 = v134 - 1;
          }
          while (__stlxr(v135, v133));
          if (v135)
            goto LABEL_313;
          v136 = v382;
          if (!v382)
            goto LABEL_235;
          if (*((char *)v382 + 31) < 0)
            operator delete(v382[1]);
          v137 = v136;
          v138 = 0x1012C404EF22A49;
          goto LABEL_234;
        case 3:
          v147 = (unint64_t *)v382;
          do
          {
            v148 = __ldaxr(v147);
            v149 = v148 - 1;
          }
          while (__stlxr(v149, v147));
          if (v149)
            goto LABEL_313;
          v150 = v382;
          if (!v382)
            goto LABEL_235;
          v151 = v382[1];
          if (v151)
          {
            v382[2] = v151;
            operator delete(v151);
          }
          v137 = v150;
          v138 = 0x1080C409938AC02;
          goto LABEL_234;
        case 4:
          v139 = (unint64_t *)v382;
          do
          {
            v140 = __ldaxr(v139);
            v141 = v140 - 1;
          }
          while (__stlxr(v141, v139));
          if (v141)
            goto LABEL_313;
          v142 = v382;
          if (!v382)
            goto LABEL_235;
          __p[0] = v382 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_227;
        case 5:
          v152 = (unint64_t *)v382;
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (v154)
            goto LABEL_313;
          v142 = v382;
          if (!v382)
            goto LABEL_235;
          __p[0] = v382 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_227:
          v137 = v142;
          v138 = 0x1020C405E66F15BLL;
          goto LABEL_234;
        case 8:
          v155 = (unint64_t *)v382;
          do
          {
            v156 = __ldaxr(v155);
            v157 = v156 - 1;
          }
          while (__stlxr(v157, v155));
          if (v157)
            goto LABEL_313;
          v158 = v382;
          if (!v382)
            goto LABEL_235;
          boost::detail::shared_count::~shared_count(v382 + 2);
          v137 = v158;
          v146 = -235920773;
          goto LABEL_233;
        case 9:
          v143 = (unint64_t *)v382;
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (v145)
            goto LABEL_313;
          if (!v382)
            goto LABEL_235;
          v137 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v382);
          v146 = 2071181815;
LABEL_233:
          v138 = v146 | 0x1030C4000000000;
LABEL_234:
          MEMORY[0x219A19A08](v137, v138);
LABEL_235:
          if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            goto LABEL_236;
LABEL_314:
          v208 = *(_QWORD *)(a1 + 56);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v366);
          turi::gl_sarray::operator[](v4, 0, (uint64_t)&v363);
          turi::visualization::histogram_result<double>::init(v208, v6, (int *)&v366, (int *)&v363);
          switch(v365)
          {
            case 2:
              v209 = (unint64_t *)v363;
              do
              {
                v210 = __ldaxr(v209);
                v211 = v210 - 1;
              }
              while (__stlxr(v211, v209));
              if (!v211)
              {
                v212 = v363;
                if (v363)
                {
                  if (*((char *)v363 + 31) < 0)
                    operator delete(v363[1]);
                  v213 = v212;
                  v214 = 0x1012C404EF22A49;
                  goto LABEL_351;
                }
              }
              break;
            case 3:
              v223 = (unint64_t *)v363;
              do
              {
                v224 = __ldaxr(v223);
                v225 = v224 - 1;
              }
              while (__stlxr(v225, v223));
              if (!v225)
              {
                v226 = v363;
                if (v363)
                {
                  v227 = v363[1];
                  if (v227)
                  {
                    v363[2] = v227;
                    operator delete(v227);
                  }
                  v213 = v226;
                  v214 = 0x1080C409938AC02;
                  goto LABEL_351;
                }
              }
              break;
            case 4:
              v215 = (unint64_t *)v363;
              do
              {
                v216 = __ldaxr(v215);
                v217 = v216 - 1;
              }
              while (__stlxr(v217, v215));
              if (!v217)
              {
                v218 = v363;
                if (v363)
                {
                  __p[0] = v363 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_344;
                }
              }
              break;
            case 5:
              v228 = (unint64_t *)v363;
              do
              {
                v229 = __ldaxr(v228);
                v230 = v229 - 1;
              }
              while (__stlxr(v230, v228));
              if (!v230)
              {
                v218 = v363;
                if (v363)
                {
                  __p[0] = v363 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_344:
                  v213 = v218;
                  v214 = 0x1020C405E66F15BLL;
                  goto LABEL_351;
                }
              }
              break;
            case 8:
              v231 = (unint64_t *)v363;
              do
              {
                v232 = __ldaxr(v231);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, v231));
              if (!v233)
              {
                v234 = v363;
                if (v363)
                {
                  boost::detail::shared_count::~shared_count(v363 + 2);
                  v213 = v234;
                  v222 = -235920773;
                  goto LABEL_350;
                }
              }
              break;
            case 9:
              v219 = (unint64_t *)v363;
              do
              {
                v220 = __ldaxr(v219);
                v221 = v220 - 1;
              }
              while (__stlxr(v221, v219));
              if (!v221 && v363)
              {
                v213 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v363);
                v222 = 2071181815;
LABEL_350:
                v214 = v222 | 0x1030C4000000000;
LABEL_351:
                MEMORY[0x219A19A08](v213, v214);
              }
              break;
            default:
              break;
          }
          v363 = 0;
          v364 = 0;
          v365 = 0;
          switch(v367)
          {
            case 2:
              v235 = v366;
              do
              {
                v236 = __ldaxr(v235);
                v237 = v236 - 1;
              }
              while (__stlxr(v237, v235));
              if (!v237)
              {
                v67 = v366;
                if (v366)
                {
LABEL_279:
                  if (*((char *)v67 + 31) < 0)
                    operator delete((void *)v67[1]);
                  v189 = v67;
                  v190 = 0x1012C404EF22A49;
                  goto LABEL_311;
                }
              }
              break;
            case 3:
              v244 = v366;
              do
              {
                v245 = __ldaxr(v244);
                v246 = v245 - 1;
              }
              while (__stlxr(v246, v244));
              if (!v246)
              {
                v79 = v366;
                if (v366)
                {
LABEL_296:
                  v201 = (void *)v79[1];
                  if (v201)
                  {
                    v79[2] = (unint64_t)v201;
                    operator delete(v201);
                  }
                  v189 = v79;
                  v190 = 0x1080C409938AC02;
                  goto LABEL_311;
                }
              }
              break;
            case 4:
              v238 = v366;
              do
              {
                v239 = __ldaxr(v238);
                v240 = v239 - 1;
              }
              while (__stlxr(v240, v238));
              if (!v240)
              {
                v71 = v366;
                if (v366)
                {
LABEL_286:
                  __p[0] = v71 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_304;
                }
              }
              break;
            case 5:
              v247 = v366;
              do
              {
                v248 = __ldaxr(v247);
                v249 = v248 - 1;
              }
              while (__stlxr(v249, v247));
              if (!v249)
              {
                v71 = v366;
                if (v366)
                {
LABEL_303:
                  __p[0] = v71 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_304:
                  v189 = v71;
                  v190 = 0x1020C405E66F15BLL;
                  goto LABEL_311;
                }
              }
              break;
            case 8:
              v250 = v366;
              do
              {
                v251 = __ldaxr(v250);
                v252 = v251 - 1;
              }
              while (__stlxr(v252, v250));
              if (!v252)
              {
                v86 = v366;
                if (v366)
                {
LABEL_309:
                  boost::detail::shared_count::~shared_count((unsigned int **)v86 + 2);
                  v189 = v86;
                  v197 = -235920773;
                  goto LABEL_310;
                }
              }
              break;
            case 9:
              v241 = v366;
              do
              {
                v242 = __ldaxr(v241);
                v243 = v242 - 1;
              }
              while (__stlxr(v243, v241));
              if (!v243)
              {
                v75 = v366;
                if (v366)
                {
LABEL_291:
                  v189 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v75);
                  v197 = 2071181815;
LABEL_310:
                  v190 = v197 | 0x1030C4000000000;
LABEL_311:
                  MEMORY[0x219A19A08](v189, v190);
                }
              }
              break;
            default:
              return;
          }
          break;
        default:
LABEL_313:
          if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            goto LABEL_314;
          goto LABEL_236;
      }
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_531:
      __break(1u);
      break;
  }
}

void sub_2185F5E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,int a29,char a30,uint64_t a31,int a32,char a33,uint64_t a34,int a35,char a36,uint64_t a37,int a38,char a39,uint64_t a40,int a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned int v149;
  void *v150;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v43 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v44 - 124))
      {
        case 2:
          v46 = *(unint64_t **)(v44 - 136);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (v48)
            goto LABEL_46;
          v49 = *(_QWORD *)(v44 - 136);
          if (!v49)
            goto LABEL_46;
          if (*(char *)(v49 + 31) < 0)
            operator delete(*(void **)(v49 + 8));
          v50 = (_QWORD *)v49;
          v51 = 0x1012C404EF22A49;
          break;
        case 3:
          v60 = *(unint64_t **)(v44 - 136);
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (v62)
            goto LABEL_46;
          v63 = *(_QWORD **)(v44 - 136);
          if (!v63)
            goto LABEL_46;
          v64 = (void *)v63[1];
          if (v64)
          {
            v63[2] = v64;
            operator delete(v64);
          }
          v50 = v63;
          v51 = 0x1080C409938AC02;
          break;
        case 4:
          v52 = *(unint64_t **)(v44 - 136);
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (v54)
            goto LABEL_46;
          v55 = *(_QWORD **)(v44 - 136);
          if (!v55)
            goto LABEL_46;
          a22 = v55 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_38;
        case 5:
          v65 = *(unint64_t **)(v44 - 136);
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (v67)
            goto LABEL_46;
          v55 = *(_QWORD **)(v44 - 136);
          if (!v55)
            goto LABEL_46;
          a22 = v55 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_38:
          v50 = v55;
          v51 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v68 = *(unint64_t **)(v44 - 136);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = *(_QWORD *)(v44 - 136);
            if (v71)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v71 + 16));
              MEMORY[0x219A19A08](v71, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 136) = 0;
          }
          goto LABEL_46;
        case 9:
          v56 = *(unint64_t **)(v44 - 136);
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (v58)
            goto LABEL_46;
          v59 = *(_QWORD **)(v44 - 136);
          if (!v59)
            goto LABEL_46;
          v50 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v59);
          v51 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v50, v51);
LABEL_46:
      switch(*(_BYTE *)(v44 - 108))
      {
        case 2:
          v72 = *(unint64_t **)(v44 - 120);
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (v74)
            goto LABEL_84;
          v75 = *(_QWORD *)(v44 - 120);
          if (!v75)
            goto LABEL_84;
          if (*(char *)(v75 + 31) < 0)
            operator delete(*(void **)(v75 + 8));
          v76 = (_QWORD *)v75;
          v77 = 0x1012C404EF22A49;
          break;
        case 3:
          v86 = *(unint64_t **)(v44 - 120);
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (v88)
            goto LABEL_84;
          v89 = *(_QWORD **)(v44 - 120);
          if (!v89)
            goto LABEL_84;
          v90 = (void *)v89[1];
          if (v90)
          {
            v89[2] = v90;
            operator delete(v90);
          }
          v76 = v89;
          v77 = 0x1080C409938AC02;
          break;
        case 4:
          v78 = *(unint64_t **)(v44 - 120);
          do
          {
            v79 = __ldaxr(v78);
            v80 = v79 - 1;
          }
          while (__stlxr(v80, v78));
          if (v80)
            goto LABEL_84;
          v81 = *(_QWORD **)(v44 - 120);
          if (!v81)
            goto LABEL_84;
          a22 = v81 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_76;
        case 5:
          v91 = *(unint64_t **)(v44 - 120);
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (v93)
            goto LABEL_84;
          v81 = *(_QWORD **)(v44 - 120);
          if (!v81)
            goto LABEL_84;
          a22 = v81 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_76:
          v76 = v81;
          v77 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v94 = *(unint64_t **)(v44 - 120);
          do
          {
            v95 = __ldaxr(v94);
            v96 = v95 - 1;
          }
          while (__stlxr(v96, v94));
          if (!v96)
          {
            v97 = *(_QWORD *)(v44 - 120);
            if (v97)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v97 + 16));
              MEMORY[0x219A19A08](v97, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 120) = 0;
          }
          goto LABEL_84;
        case 9:
          v82 = *(unint64_t **)(v44 - 120);
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (v84)
            goto LABEL_84;
          v85 = *(_QWORD **)(v44 - 120);
          if (!v85)
            goto LABEL_84;
          v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v85);
          v77 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_84;
      }
      MEMORY[0x219A19A08](v76, v77);
LABEL_84:
      switch(*(_BYTE *)(v44 - 92))
      {
        case 2:
          v98 = *(unint64_t **)(v44 - 104);
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (v100)
            goto LABEL_122;
          v101 = *(_QWORD *)(v44 - 104);
          if (!v101)
            goto LABEL_122;
          if (*(char *)(v101 + 31) < 0)
            operator delete(*(void **)(v101 + 8));
          v102 = (_QWORD *)v101;
          v103 = 0x1012C404EF22A49;
          break;
        case 3:
          v112 = *(unint64_t **)(v44 - 104);
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (v114)
            goto LABEL_122;
          v115 = *(_QWORD **)(v44 - 104);
          if (!v115)
            goto LABEL_122;
          v116 = (void *)v115[1];
          if (v116)
          {
            v115[2] = v116;
            operator delete(v116);
          }
          v102 = v115;
          v103 = 0x1080C409938AC02;
          break;
        case 4:
          v104 = *(unint64_t **)(v44 - 104);
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (v106)
            goto LABEL_122;
          v107 = *(_QWORD **)(v44 - 104);
          if (!v107)
            goto LABEL_122;
          a22 = v107 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_114;
        case 5:
          v117 = *(unint64_t **)(v44 - 104);
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (v119)
            goto LABEL_122;
          v107 = *(_QWORD **)(v44 - 104);
          if (!v107)
            goto LABEL_122;
          a22 = v107 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_114:
          v102 = v107;
          v103 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v120 = *(unint64_t **)(v44 - 104);
          do
          {
            v121 = __ldaxr(v120);
            v122 = v121 - 1;
          }
          while (__stlxr(v122, v120));
          if (!v122)
          {
            v123 = *(_QWORD *)(v44 - 104);
            if (v123)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v123 + 16));
              MEMORY[0x219A19A08](v123, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v44 - 104) = 0;
          }
          goto LABEL_122;
        case 9:
          v108 = *(unint64_t **)(v44 - 104);
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (v110)
            goto LABEL_122;
          v111 = *(_QWORD **)(v44 - 104);
          if (!v111)
            goto LABEL_122;
          v102 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v111);
          v103 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_122;
      }
      MEMORY[0x219A19A08](v102, v103);
LABEL_122:
      switch(*(_BYTE *)(v44 - 76))
      {
        case 2:
          v124 = *(unint64_t **)(v44 - 88);
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (v126)
            goto LABEL_164;
          v127 = *(_QWORD *)(v44 - 88);
          if (!v127)
            goto LABEL_164;
          if (*(char *)(v127 + 31) < 0)
            operator delete(*(void **)(v127 + 8));
          v147 = (_QWORD *)v127;
          v148 = 0x1012C404EF22A49;
          goto LABEL_163;
        case 3:
          v136 = *(unint64_t **)(v44 - 88);
          do
          {
            v137 = __ldaxr(v136);
            v138 = v137 - 1;
          }
          while (__stlxr(v138, v136));
          if (v138)
            goto LABEL_164;
          v139 = *(_QWORD **)(v44 - 88);
          if (!v139)
            goto LABEL_164;
          v150 = (void *)v139[1];
          if (v150)
          {
            v139[2] = v150;
            operator delete(v150);
          }
          v147 = v139;
          v148 = 0x1080C409938AC02;
          goto LABEL_163;
        case 4:
          v128 = *(unint64_t **)(v44 - 88);
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (v130)
            goto LABEL_164;
          v131 = *(_QWORD **)(v44 - 88);
          if (!v131)
            goto LABEL_164;
          a22 = v131 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
          goto LABEL_160;
        case 5:
          v140 = *(unint64_t **)(v44 - 88);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (v142)
            goto LABEL_164;
          v131 = *(_QWORD **)(v44 - 88);
          if (!v131)
            goto LABEL_164;
          a22 = v131 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
LABEL_160:
          v147 = v131;
          v148 = 0x1020C405E66F15BLL;
          goto LABEL_163;
        case 8:
          v143 = *(unint64_t **)(v44 - 88);
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          if (v145)
            goto LABEL_164;
          v146 = *(_QWORD *)(v44 - 88);
          if (!v146)
            goto LABEL_164;
          boost::detail::shared_count::~shared_count((unsigned int **)(v146 + 16));
          v147 = (_QWORD *)v146;
          v149 = -235920773;
          goto LABEL_162;
        case 9:
          v132 = *(unint64_t **)(v44 - 88);
          do
          {
            v133 = __ldaxr(v132);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, v132));
          if (v134)
            goto LABEL_164;
          v135 = *(_QWORD **)(v44 - 88);
          if (!v135)
            goto LABEL_164;
          v147 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v135);
          v149 = 2071181815;
LABEL_162:
          v148 = v149 | 0x1030C4000000000;
LABEL_163:
          MEMORY[0x219A19A08](v147, v148);
LABEL_164:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_164;
      }
    }
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

_QWORD *turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::histogram_result<double>>::vector(a2, a1);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  const char **v8;

  *(_QWORD *)&v7 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = (const char **)&v7;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v8);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sarray::operator=(a1 + 16, a2);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization16histogram_resultIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 56, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
}

_QWORD *std::vector<turi::visualization::histogram_result<double>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::visualization::histogram_result<long long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = 8424 * a2;
    v6 = v4 + 8424 * a2;
    do
    {
      turi::visualization::histogram_result<double>::histogram_result(v4);
      v4 += 8424;
      v5 -= 8424;
    }
    while (v5);
    a1[1] = v6;
  }
  return a1;
}

void sub_2185F6FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::histogram_result<long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::histogram_result<double>::histogram_result(uint64_t a1)
{
  char *v2;
  char *v3;

  *(_QWORD *)a1 = &unk_24D94BA28;
  *(_QWORD *)(a1 + 8) = &unk_24D92FF70;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_QWORD *)(a1 + 72) = &unk_24D930060;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = &unk_24D930150;
  *(_QWORD *)(a1 + 112) = &unk_24D92FCA0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  *(_QWORD *)(a1 + 184) = 0;
  v2 = (char *)(a1 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(a1 + 208, 0.005);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 352) = &unk_24D930420;
  *(_QWORD *)(a1 + 360) = 0;
  v3 = (char *)operator new(8uLL);
  *(_QWORD *)v3 = 0x3FE0000000000000;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v2, v3, (uint64_t)(v3 + 8), 1uLL);
  operator delete(v3);
  return a1;
}

void sub_2185F715C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  turi::groupby_operators::min *v3;
  turi::groupby_operators::max *v4;
  turi::groupby_operators::quantile *v5;
  void *v6;
  uint64_t v7;

  operator delete(v6);
  turi::groupby_operators::quantile::~quantile(v5);
  turi::groupby_operators::max::~max(v4);
  turi::groupby_operators::min::~min(v3);
  *(_QWORD *)(v1 + 24) = v7 + 16;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::histogram_result<double>::~histogram_result(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D94BA28;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 232);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  turi::groupby_operators::max::~max((turi::groupby_operators::max *)(a1 + 144));
  turi::groupby_operators::min::~min((turi::groupby_operators::min *)(a1 + 112));
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(a1 + 32);
  return a1;
}

{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D94BA28;
  *(_QWORD *)(a1 + 176) = &unk_24D9307E0;
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  v5 = (void **)(a1 + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 232);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    operator delete(v3);
  }
  turi::groupby_operators::max::~max((turi::groupby_operators::max *)(a1 + 144));
  turi::groupby_operators::min::~min((turi::groupby_operators::min *)(a1 + 112));
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(a1 + 32);
  return MEMORY[0x219A19A08](a1, 0x10A3C40313F5341);
}

void turi::visualization::histogram_result<double>::vega_column_data(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  turi::flexible_type_impl *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD v20[3];
  double v21;
  double v22;
  std::string v23;
  void **v24[2];
  uint64_t v25;
  uint64_t v26;
  void *__p;
  char v28;
  uint64_t v29;

  turi::visualization::histogram_result<double>::get_bins((double *)a1, 0x14uLL, (uint64_t)v20);
  *(double *)v19 = v22;
  *(double *)&v19[1] = v21;
  *(double *)&v19[2] = (v21 - v22) / 20.0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  v1 = 0;
  v2 = 0;
  v12 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v13 = (void **)*MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v11 = MEMORY[0x24BEDB848] + 16;
  while (2)
  {
    v3 = v20[0];
    if (v2 < (uint64_t)(v20[1] - v20[0]) >> 4)
    {
      if (v2)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
        v3 = v20[0];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"{\"left\": ", 9);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",\"right\": ", 10);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"count\": ", 11);
      v4 = (turi::flexible_type_impl *)(v3 + v1);
      switch(*(_BYTE *)(v3 + v1 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          v24[0] = v13;
          *(void ***)((char *)v24 + (_QWORD)*(v13 - 3)) = v12;
          v25 = v14;
          v5 = v11;
          goto LABEL_14;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          v24[0] = v13;
          *(void ***)((char *)v24 + (_QWORD)*(v13 - 3)) = v12;
          v5 = MEMORY[0x24BEDB848] + 16;
          v25 = v14;
LABEL_14:
          v26 = v5;
          if (v28 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v29);
          goto LABEL_21;
        case 2:
          v6 = *(_QWORD *)v4;
          if (*(char *)(*(_QWORD *)v4 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
          }
          else
          {
            v7 = *(_OWORD *)(v6 + 8);
            v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 24);
            *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
          }
          goto LABEL_21;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v24, (_QWORD *)(*(_QWORD *)v4 + 8));
          goto LABEL_21;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v24, (uint64_t *)(*(_QWORD *)v4 + 8));
          goto LABEL_21;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v24, (_QWORD *)(*(_QWORD *)v4 + 8));
          goto LABEL_21;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v4, &v23);
          goto LABEL_21;
        case 7:
          memset(&v23, 0, sizeof(v23));
          goto LABEL_21;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_21;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v24, (_QWORD *)(*(_QWORD *)v4 + 8));
LABEL_21:
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v8 = &v23;
          else
            v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
          else
            size = v23.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v8, size);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          v1 += 16;
          ++v2;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"}", 1);
          continue;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
    }
    break;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 80))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"{\"missing\": true", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"count\": ", 11);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"}", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  turi::visualization::bin_specification_object<double>::serialize((uint64_t)v19, (uint64_t)v15);
  std::stringbuf::str();
  v15[0] = v13;
  *(_QWORD *)((char *)v15 + (_QWORD)*(v13 - 3)) = v12;
  v16[0] = v14;
  v16[1] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v18);
  v24[0] = (void **)v20;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_2185F77CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  a18 = (uint64_t)&a56;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::histogram_result<double>::vega_summary_data(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  double v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type size;
  _QWORD *v45;
  _QWORD *v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  __int128 v59;
  __int128 v60;
  float v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  double v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  __int128 v107;
  __int128 v108;
  float v109;
  std::string *v110;
  std::string::size_type v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  unsigned int v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  double v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  __int128 v155;
  __int128 v156;
  float v157;
  std::string *v158;
  std::string::size_type v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  unsigned int v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  __int128 *p_str;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  unint64_t v195;
  double v196;
  __int128 *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  void **v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v206;
  __int128 v207;
  std::runtime_error *v208;
  std::string *v209;
  __int128 v210;
  std::runtime_error *v211;
  std::string *v212;
  __int128 v213;
  std::string v214;
  void *v215[2];
  unsigned __int8 v216;
  void *v217[2];
  unsigned __int8 v218;
  void *v219;
  void *v220;
  uint64_t v221;
  _QWORD v222[2];
  _QWORD v223[11];
  char v224;
  uint64_t v225;
  __int128 __str;
  __int128 __str_16;
  __int128 v228;
  __int128 v229;
  void *__p;
  char v231;
  uint64_t v232;
  size_t __idx;
  uint64_t v234;
  int v235;
  char v236;
  std::string v237;
  uint64_t v238;

  v238 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v222);
  turi::groupby_operators::quantile::emit((turi::groupby_operators::quantile *)(a1 + 176), (uint64_t *)&v237);
  v220 = 0;
  v221 = 0;
  v219 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v219, *(const void **)(v237.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16) - *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 8)) >> 3);
  switch(v237.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v2 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v237.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v237.__r_.__value_.__r.__words[0] + 8));
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v19 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          v23 = *(void **)(v237.__r_.__value_.__r.__words[0] + 8);
          if (v23)
          {
            *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 16) = v23;
            operator delete(v23);
          }
          v6 = v22;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v8 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&__str = v237.__r_.__value_.__r.__words[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v24 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v11 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          *(_QWORD *)&__str = v237.__r_.__value_.__r.__words[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_35:
          v6 = v11;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v237.__r_.__value_.__r.__words[0] + 16));
          v6 = v30;
          v18 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v12 = (unint64_t *)v237.__r_.__value_.__r.__words[0];
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = v237.__r_.__value_.__r.__words[0];
        if (v237.__r_.__value_.__r.__words[0])
        {
          v16 = *(void **)(v237.__r_.__value_.__r.__words[0] + 48);
          if (v16)
          {
            *(_QWORD *)(v237.__r_.__value_.__r.__words[0] + 56) = v16;
            operator delete(v16);
          }
          v17 = *(void **)(v15 + 24);
          if (v17)
          {
            *(_QWORD *)(v15 + 32) = v17;
            operator delete(v17);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v15 + 8);
          v6 = v15;
          v18 = 2071181815;
LABEL_41:
          v7 = v18 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  v31 = *(double *)v219;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(v217, a1, 1);
  v32 = *(char *)(a1 + 384);
  if (v32 > 9)
    v33 = "undefined";
  else
    v33 = off_24D94BD20[v32];
  std::string::basic_string[abi:ne180100]<0>(v215, v33);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"type\": \"", 9);
  if ((v216 & 0x80u) == 0)
    v35 = v215;
  else
    v35 = (void **)v215[0];
  if ((v216 & 0x80u) == 0)
    v36 = v216;
  else
    v36 = (uint64_t)v215[1];
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\",", 2);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"num_unique\": ", 14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
  std::ostream::operator<<();
  std::stringbuf::str();
  v39 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)&__str = v39;
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&__str + *(_QWORD *)(v39 - 24)) = v41;
  v42 = v40;
  *(_QWORD *)&__str_16 = v40;
  *((_QWORD *)&__str_16 + 1) = MEMORY[0x24BEDB848] + 16;
  if (v231 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v232);
  if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = &v237;
  else
    v43 = (std::string *)v237.__r_.__value_.__r.__words[0];
  if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
  else
    size = v237.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v43, size);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"num_missing\": ", 15);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"mean\": ", 8);
  turi::groupby_operators::average::emit(a1 + 88, (uint64_t)&v234);
  v47 = 0.0;
  switch(v236)
  {
    case 0:
      v47 = (double)v234;
      goto LABEL_92;
    case 1:
      v47 = *(double *)&v234;
      goto LABEL_92;
    case 2:
      v51 = v234;
      __idx = 0;
      v52 = (char *)(v234 + 8);
      if (*(char *)(v234 + 31) < 0)
        v52 = *(char **)(v234 + 8);
      std::string::basic_string[abi:ne180100]<0>(&__str, v52);
      v53 = std::stod((const std::string *)&__str, &__idx);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      if (*(char *)(v51 + 31) < 0)
        v54 = *(_QWORD *)(v51 + 16);
      else
        v54 = *(unsigned __int8 *)(v51 + 31);
      if (__idx != v54)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v206 = std::string::append(&v237, " cannot be interpreted as a float");
        v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str_16 = *((_QWORD *)&v206->__r_.__value_.__l + 2);
        __str = v207;
        v206->__r_.__value_.__l.__size_ = 0;
        v206->__r_.__value_.__r.__words[2] = 0;
        v206->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__str);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v61 = v53;
      v47 = v61;
      goto LABEL_92;
    case 3:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__str)
      {
        *((_QWORD *)&__str + 1) = __str;
        operator delete((void *)__str);
      }
      goto LABEL_92;
    case 4:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
      goto LABEL_92;
    case 5:
      *(_QWORD *)&__str_16 = 0;
      __str = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
      goto LABEL_92;
    case 6:
      v47 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
      goto LABEL_92;
    case 7:
      goto LABEL_92;
    case 8:
      v55 = v234;
      v56 = *(_QWORD *)(v234 + 16);
      *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
      *((_QWORD *)&__str + 1) = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = *(_OWORD *)(v55 + 24);
      v60 = *(_OWORD *)(v55 + 56);
      v228 = *(_OWORD *)(v55 + 40);
      v229 = v60;
      __str_16 = v59;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
      goto LABEL_92;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v228 + 1))
      {
        *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
        operator delete(*((void **)&v228 + 1));
      }
      if ((_QWORD)__str_16)
      {
        *((_QWORD *)&__str_16 + 1) = __str_16;
        operator delete((void *)__str_16);
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
      if (*((_QWORD *)&__str + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
LABEL_92:
      turi::visualization::escape_float(v47, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v214;
      else
        v62 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v63 = v214.__r_.__value_.__l.__size_;
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v62, v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v65 = (unint64_t *)v234;
          do
          {
            v66 = __ldaxr(v65);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, v65));
          if (!v67)
          {
            v68 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v69 = v68;
              v70 = 0x1012C404EF22A49;
              goto LABEL_141;
            }
          }
          break;
        case 3:
          v82 = (unint64_t *)v234;
          do
          {
            v83 = __ldaxr(v82);
            v84 = v83 - 1;
          }
          while (__stlxr(v84, v82));
          if (!v84)
          {
            v85 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v86 = *(void **)(v234 + 8);
              if (v86)
              {
                *(_QWORD *)(v234 + 16) = v86;
                operator delete(v86);
              }
              v69 = v85;
              v70 = 0x1080C409938AC02;
              goto LABEL_141;
            }
          }
          break;
        case 4:
          v71 = (unint64_t *)v234;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (!v73)
          {
            v74 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_134;
            }
          }
          break;
        case 5:
          v87 = (unint64_t *)v234;
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            v74 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_134:
              v69 = v74;
              v70 = 0x1020C405E66F15BLL;
              goto LABEL_141;
            }
          }
          break;
        case 8:
          v90 = (unint64_t *)v234;
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            v93 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v69 = v93;
              v81 = -235920773;
              goto LABEL_140;
            }
          }
          break;
        case 9:
          v75 = (unint64_t *)v234;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            v78 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v79 = *(void **)(v234 + 48);
              if (v79)
              {
                *(_QWORD *)(v234 + 56) = v79;
                operator delete(v79);
              }
              v80 = *(void **)(v78 + 24);
              if (v80)
              {
                *(_QWORD *)(v78 + 32) = v80;
                operator delete(v80);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v78 + 8);
              v69 = v78;
              v81 = 2071181815;
LABEL_140:
              v70 = v81 | 0x1030C4000000000;
LABEL_141:
              MEMORY[0x219A19A08](v69, v70);
            }
          }
          break;
        default:
          break;
      }
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"min\": ", 7);
      turi::groupby_operators::max::emit(a1 + 112, (uint64_t)&v234);
      v95 = 0.0;
      switch(v236)
      {
        case 0:
          v95 = (double)v234;
          break;
        case 1:
          v95 = *(double *)&v234;
          break;
        case 2:
          v99 = v234;
          __idx = 0;
          v100 = (char *)(v234 + 8);
          if (*(char *)(v234 + 31) < 0)
            v100 = *(char **)(v234 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__str, v100);
          v101 = std::stod((const std::string *)&__str, &__idx);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (*(char *)(v99 + 31) < 0)
            v102 = *(_QWORD *)(v99 + 16);
          else
            v102 = *(unsigned __int8 *)(v99 + 31);
          if (__idx != v102)
          {
            v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v209 = std::string::append(&v237, " cannot be interpreted as a float");
            v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str_16 = *((_QWORD *)&v209->__r_.__value_.__l + 2);
            __str = v210;
            v209->__r_.__value_.__l.__size_ = 0;
            v209->__r_.__value_.__r.__words[2] = 0;
            v209->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v208, (const std::string *)&__str);
            __cxa_throw(v208, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v109 = v101;
          v95 = v109;
          break;
        case 3:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__str)
          {
            *((_QWORD *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          break;
        case 4:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 5:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 6:
          v95 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          v103 = v234;
          v104 = *(_QWORD *)(v234 + 16);
          *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
          *((_QWORD *)&__str + 1) = v104;
          if (v104)
          {
            v105 = (unsigned int *)(v104 + 8);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v107 = *(_OWORD *)(v103 + 24);
          v108 = *(_OWORD *)(v103 + 56);
          v228 = *(_OWORD *)(v103 + 40);
          v229 = v108;
          __str_16 = v107;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v228 + 1))
          {
            *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
            operator delete(*((void **)&v228 + 1));
          }
          if ((_QWORD)__str_16)
          {
            *((_QWORD *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          v96 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v97 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          break;
        default:
LABEL_336:
          result = turi::flexible_type_fail(0);
          goto LABEL_340;
      }
      turi::visualization::escape_float(v95, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v110 = &v214;
      else
        v110 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v111 = v214.__r_.__value_.__l.__size_;
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v110, v111);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v113 = (unint64_t *)v234;
          do
          {
            v114 = __ldaxr(v113);
            v115 = v114 - 1;
          }
          while (__stlxr(v115, v113));
          if (!v115)
          {
            v116 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v117 = v116;
              v118 = 0x1012C404EF22A49;
              goto LABEL_221;
            }
          }
          break;
        case 3:
          v130 = (unint64_t *)v234;
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            v133 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v134 = *(void **)(v234 + 8);
              if (v134)
              {
                *(_QWORD *)(v234 + 16) = v134;
                operator delete(v134);
              }
              v117 = v133;
              v118 = 0x1080C409938AC02;
              goto LABEL_221;
            }
          }
          break;
        case 4:
          v119 = (unint64_t *)v234;
          do
          {
            v120 = __ldaxr(v119);
            v121 = v120 - 1;
          }
          while (__stlxr(v121, v119));
          if (!v121)
          {
            v122 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_214;
            }
          }
          break;
        case 5:
          v135 = (unint64_t *)v234;
          do
          {
            v136 = __ldaxr(v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, v135));
          if (!v137)
          {
            v122 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_214:
              v117 = v122;
              v118 = 0x1020C405E66F15BLL;
              goto LABEL_221;
            }
          }
          break;
        case 8:
          v138 = (unint64_t *)v234;
          do
          {
            v139 = __ldaxr(v138);
            v140 = v139 - 1;
          }
          while (__stlxr(v140, v138));
          if (!v140)
          {
            v141 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v117 = v141;
              v129 = -235920773;
              goto LABEL_220;
            }
          }
          break;
        case 9:
          v123 = (unint64_t *)v234;
          do
          {
            v124 = __ldaxr(v123);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, v123));
          if (!v125)
          {
            v126 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v127 = *(void **)(v234 + 48);
              if (v127)
              {
                *(_QWORD *)(v234 + 56) = v127;
                operator delete(v127);
              }
              v128 = *(void **)(v126 + 24);
              if (v128)
              {
                *(_QWORD *)(v126 + 32) = v128;
                operator delete(v128);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v126 + 8);
              v117 = v126;
              v129 = 2071181815;
LABEL_220:
              v118 = v129 | 0x1030C4000000000;
LABEL_221:
              MEMORY[0x219A19A08](v117, v118);
            }
          }
          break;
        default:
          break;
      }
      v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"max\": ", 7);
      turi::groupby_operators::max::emit(a1 + 144, (uint64_t)&v234);
      v143 = 0.0;
      switch(v236)
      {
        case 0:
          v143 = (double)v234;
          break;
        case 1:
          v143 = *(double *)&v234;
          break;
        case 2:
          v147 = v234;
          __idx = 0;
          v148 = (char *)(v234 + 8);
          if (*(char *)(v234 + 31) < 0)
            v148 = *(char **)(v234 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__str, v148);
          v149 = std::stod((const std::string *)&__str, &__idx);
          if (SBYTE7(__str_16) < 0)
            operator delete((void *)__str);
          if (*(char *)(v147 + 31) < 0)
            v150 = *(_QWORD *)(v147 + 16);
          else
            v150 = *(unsigned __int8 *)(v147 + 31);
          if (__idx != v150)
          {
            v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v212 = std::string::append(&v237, " cannot be interpreted as a float");
            v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            *(_QWORD *)&__str_16 = *((_QWORD *)&v212->__r_.__value_.__l + 2);
            __str = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v211, (const std::string *)&__str);
            __cxa_throw(v211, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v157 = v149;
          v143 = v157;
          break;
        case 3:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v234 + 8), *(_QWORD *)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__str)
          {
            *((_QWORD *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          break;
        case 4:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 5:
          *(_QWORD *)&__str_16 = 0;
          __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v234 + 8), *(uint64_t **)(v234 + 16), (uint64_t)(*(_QWORD *)(v234 + 16) - *(_QWORD *)(v234 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v237.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v237);
          break;
        case 6:
          v143 = (double)v235 / 1000000.0 + (double)(v234 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          v151 = v234;
          v152 = *(_QWORD *)(v234 + 16);
          *(_QWORD *)&__str = *(_QWORD *)(v234 + 8);
          *((_QWORD *)&__str + 1) = v152;
          if (v152)
          {
            v153 = (unsigned int *)(v152 + 8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          v155 = *(_OWORD *)(v151 + 24);
          v156 = *(_OWORD *)(v151 + 56);
          v228 = *(_OWORD *)(v151 + 40);
          v229 = v156;
          __str_16 = v155;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__str + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, v234 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v228 + 1))
          {
            *(_QWORD *)&v229 = *((_QWORD *)&v228 + 1);
            operator delete(*((void **)&v228 + 1));
          }
          if ((_QWORD)__str_16)
          {
            *((_QWORD *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          v144 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v145 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
            if (!v146)
            {
              ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
              std::__shared_weak_count::__release_weak(v144);
            }
          }
          break;
        default:
          goto LABEL_336;
      }
      turi::visualization::escape_float(v143, &v214);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v214;
      else
        v158 = (std::string *)v214.__r_.__value_.__r.__words[0];
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v159 = v214.__r_.__value_.__l.__size_;
      v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)v158, v159);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)",", 1);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      switch(v236)
      {
        case 2:
          v161 = (unint64_t *)v234;
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          if (!v163)
          {
            v164 = v234;
            if (*(double *)&v234 != 0.0)
            {
              if (*(char *)(v234 + 31) < 0)
                operator delete(*(void **)(v234 + 8));
              v165 = v164;
              v166 = 0x1012C404EF22A49;
              goto LABEL_301;
            }
          }
          break;
        case 3:
          v178 = (unint64_t *)v234;
          do
          {
            v179 = __ldaxr(v178);
            v180 = v179 - 1;
          }
          while (__stlxr(v180, v178));
          if (!v180)
          {
            v181 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v182 = *(void **)(v234 + 8);
              if (v182)
              {
                *(_QWORD *)(v234 + 16) = v182;
                operator delete(v182);
              }
              v165 = v181;
              v166 = 0x1080C409938AC02;
              goto LABEL_301;
            }
          }
          break;
        case 4:
          v167 = (unint64_t *)v234;
          do
          {
            v168 = __ldaxr(v167);
            v169 = v168 - 1;
          }
          while (__stlxr(v169, v167));
          if (!v169)
          {
            v170 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_294;
            }
          }
          break;
        case 5:
          v183 = (unint64_t *)v234;
          do
          {
            v184 = __ldaxr(v183);
            v185 = v184 - 1;
          }
          while (__stlxr(v185, v183));
          if (!v185)
          {
            v170 = v234;
            if (*(double *)&v234 != 0.0)
            {
              *(_QWORD *)&__str = v234 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_294:
              v165 = v170;
              v166 = 0x1020C405E66F15BLL;
              goto LABEL_301;
            }
          }
          break;
        case 8:
          v186 = (unint64_t *)v234;
          do
          {
            v187 = __ldaxr(v186);
            v188 = v187 - 1;
          }
          while (__stlxr(v188, v186));
          if (!v188)
          {
            v189 = v234;
            if (*(double *)&v234 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v234 + 16));
              v165 = v189;
              v177 = -235920773;
              goto LABEL_300;
            }
          }
          break;
        case 9:
          v171 = (unint64_t *)v234;
          do
          {
            v172 = __ldaxr(v171);
            v173 = v172 - 1;
          }
          while (__stlxr(v173, v171));
          if (!v173)
          {
            v174 = v234;
            if (*(double *)&v234 != 0.0)
            {
              v175 = *(void **)(v234 + 48);
              if (v175)
              {
                *(_QWORD *)(v234 + 56) = v175;
                operator delete(v175);
              }
              v176 = *(void **)(v174 + 24);
              if (v176)
              {
                *(_QWORD *)(v174 + 32) = v176;
                operator delete(v176);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v174 + 8);
              v165 = v174;
              v177 = 2071181815;
LABEL_300:
              v166 = v177 | 0x1030C4000000000;
LABEL_301:
              MEMORY[0x219A19A08](v165, v166);
            }
          }
          break;
        default:
          break;
      }
      v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"median\": ", 10);
      turi::visualization::escape_float(v31, (std::string *)&__str);
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        p_str = &__str;
      else
        p_str = (__int128 *)__str;
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v192 = BYTE7(__str_16);
      else
        v192 = *((_QWORD *)&__str + 1);
      v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)p_str, v192);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)",", 1);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"stdev\": ", 9);
      v195 = *(_QWORD *)(a1 + 360);
      v196 = 0.0;
      if (v195 >= 2)
        v196 = *(double *)(a1 + 376) / (double)v195;
      turi::visualization::escape_float(sqrt(v196), (std::string *)&__str);
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v197 = &__str;
      else
        v197 = (__int128 *)__str;
      if ((SBYTE7(__str_16) & 0x80u) == 0)
        v198 = BYTE7(__str_16);
      else
        v198 = *((_QWORD *)&__str + 1);
      v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)v197, v198);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)",", 1);
      if (SBYTE7(__str_16) < 0)
        operator delete((void *)__str);
      v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"numeric\": [", 12);
      if ((v218 & 0x80u) == 0)
        v201 = v217;
      else
        v201 = (void **)v217[0];
      if ((v218 & 0x80u) == 0)
        v202 = v218;
      else
        v202 = (uint64_t)v217[1];
      v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)v201, v202);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"],", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"\"categorical\": []", 17);
      std::stringbuf::str();
      if ((char)v216 < 0)
        operator delete(v215[0]);
      if ((char)v218 < 0)
        operator delete(v217[0]);
      if (v219)
      {
        v220 = v219;
        operator delete(v219);
      }
      v222[0] = v39;
      *(_QWORD *)((char *)v222 + *(_QWORD *)(v39 - 24)) = v41;
      v223[0] = v42;
      v223[1] = MEMORY[0x24BEDB848] + 16;
      if (v224 < 0)
        operator delete((void *)v223[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x219A198F4](&v225);
      break;
    default:
      result = turi::flexible_type_fail(0);
LABEL_340:
      __break(1u);
      break;
  }
  return result;
}

void sub_2185F8D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  void *v68;
  int v69;
  uint64_t v70;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;

  if (a68 < 0)
    operator delete(__p);
  if (*(char *)(v70 - 121) < 0)
  {
    operator delete(*(void **)(v70 - 144));
    if ((v69 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v69)
  {
LABEL_8:
    switch(*(_BYTE *)(v70 - 148))
    {
      case 2:
        v72 = *(unint64_t **)(v70 - 160);
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (v74)
          goto LABEL_51;
        v93 = *(_QWORD *)(v70 - 160);
        if (!v93)
          goto LABEL_51;
        if (*(char *)(v93 + 31) < 0)
          operator delete(*(void **)(v93 + 8));
        v91 = (_QWORD *)v93;
        v94 = 0x1012C404EF22A49;
        goto LABEL_50;
      case 3:
        v81 = *(unint64_t **)(v70 - 160);
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (v83)
          goto LABEL_51;
        v97 = *(_QWORD **)(v70 - 160);
        if (!v97)
          goto LABEL_51;
        v98 = (void *)v97[1];
        if (v98)
        {
          v97[2] = v98;
          operator delete(v98);
        }
        v91 = v97;
        v94 = 0x1080C409938AC02;
        goto LABEL_50;
      case 4:
        v75 = *(unint64_t **)(v70 - 160);
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (v77)
          goto LABEL_51;
        v95 = *(_QWORD **)(v70 - 160);
        if (!v95)
          goto LABEL_51;
        *(_QWORD *)(v70 - 144) = v95 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v70 - 144));
        goto LABEL_49;
      case 5:
        v84 = *(unint64_t **)(v70 - 160);
        do
        {
          v85 = __ldaxr(v84);
          v86 = v85 - 1;
        }
        while (__stlxr(v86, v84));
        if (v86)
          goto LABEL_51;
        v95 = *(_QWORD **)(v70 - 160);
        if (!v95)
          goto LABEL_51;
        *(_QWORD *)(v70 - 144) = v95 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v70 - 144));
LABEL_49:
        v91 = v95;
        v94 = 0x1020C405E66F15BLL;
        goto LABEL_50;
      case 8:
        v87 = *(unint64_t **)(v70 - 160);
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (v89)
          goto LABEL_51;
        v90 = *(_QWORD *)(v70 - 160);
        if (!v90)
          goto LABEL_51;
        boost::detail::shared_count::~shared_count((unsigned int **)(v90 + 16));
        v91 = (_QWORD *)v90;
        v92 = -235920773;
        goto LABEL_40;
      case 9:
        v78 = *(unint64_t **)(v70 - 160);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (v80)
          goto LABEL_51;
        v96 = *(_QWORD **)(v70 - 160);
        if (!v96)
          goto LABEL_51;
        v91 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v96);
        v92 = 2071181815;
LABEL_40:
        v94 = v92 | 0x1030C4000000000;
LABEL_50:
        MEMORY[0x219A19A08](v91, v94);
LABEL_51:
        if (a18 < 0)
          operator delete(a13);
        if (a24 < 0)
          operator delete(a19);
        if (a25)
          operator delete(a25);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
        _Unwind_Resume(a1);
        return;
      default:
        goto LABEL_51;
    }
  }
  __cxa_free_exception(v68);
  goto LABEL_8;
}

void turi::visualization::histogram_result<double>::get_bins(double *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD **v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  void *v62;
  double *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  void *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  _QWORD *v98;
  double v99;
  std::string *v100;
  __int128 v101;
  unint64_t *v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  __int128 v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  uint64_t v130;
  void **v131;
  uint64_t v132[3];

  v132[2] = *MEMORY[0x24BDAC8D0];
  if ((uint64_t)a2 <= 0)
    turi::visualization::histogram_result<long long>::get_bins(long long)const::{lambda(void)#1}::operator()();
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = a1[1051];
  v6 = a1[1052] - v5;
  v7 = vcvtmd_u64_f64((a1[1049] - v5) / v6 * 1000.0);
  if (v7 == 1000)
    v8 = 999;
  else
    v8 = v7;
  v9 = vcvtmd_u64_f64((a1[1050] - v5) / v6 * 1000.0);
  if (v9 == 1000)
    v10 = 999;
  else
    v10 = v9;
  if (a2 >= 0xFB)
    turi::visualization::histogram_result<long long>::get_bins(long long)const::{lambda(void)#2}::operator()();
  v11 = v10 - v8 + 1;
  if (v11 % a2)
  {
    v12 = a2 - v11 % a2;
    v11 += v12;
    v13 = a2;
    v14 = v12 >> 1;
    v15 = (v12 & 1) + (v12 >> 1);
  }
  else
  {
    v13 = a2;
    v14 = 0;
    v15 = 0;
  }
  *(uint64_t *)((char *)v132 + 5) = 0;
  v132[0] = 0;
  std::vector<turi::flexible_type>::vector(&v129, v13, v132);
  v128 = v13;
  v126 = v11 / v13;
  std::vector<turi::flexible_type>::__vdeallocate((void **)a3);
  *(_OWORD *)a3 = v129;
  *(_QWORD *)(a3 + 16) = v130;
  v130 = 0;
  v129 = 0uLL;
  v131 = (void **)&v129;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v131);
  switch(BYTE4(v132[1]))
  {
    case 2:
      v16 = (unint64_t *)v132[0];
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v132[0];
        if (v132[0])
        {
          if (*(char *)(v132[0] + 31) < 0)
            operator delete(*(void **)(v132[0] + 8));
          v20 = v19;
          v21 = 0x1012C404EF22A49;
          goto LABEL_53;
        }
      }
      break;
    case 3:
      v33 = (unint64_t *)v132[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = v132[0];
        if (v132[0])
        {
          v37 = *(void **)(v132[0] + 8);
          if (v37)
          {
            *(_QWORD *)(v132[0] + 16) = v37;
            operator delete(v37);
          }
          v20 = v36;
          v21 = 0x1080C409938AC02;
          goto LABEL_53;
        }
      }
      break;
    case 4:
      v22 = (unint64_t *)v132[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v132[0];
        if (v132[0])
        {
          v131 = (void **)(v132[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v131);
          goto LABEL_46;
        }
      }
      break;
    case 5:
      v38 = (unint64_t *)v132[0];
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v25 = v132[0];
        if (v132[0])
        {
          v131 = (void **)(v132[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v131);
LABEL_46:
          v20 = v25;
          v21 = 0x1020C405E66F15BLL;
          goto LABEL_53;
        }
      }
      break;
    case 8:
      v41 = (unint64_t *)v132[0];
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        v44 = v132[0];
        if (v132[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v132[0] + 16));
          v20 = v44;
          v32 = -235920773;
          goto LABEL_52;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v132[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v132[0];
        if (v132[0])
        {
          v30 = *(void **)(v132[0] + 48);
          if (v30)
          {
            *(_QWORD *)(v132[0] + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v20 = v29;
          v32 = 2071181815;
LABEL_52:
          v21 = v32 | 0x1030C4000000000;
LABEL_53:
          MEMORY[0x219A19A08](v20, v21);
        }
      }
      break;
    default:
      break;
  }
  v127 = v11;
  v45 = 0;
  v125 = v8 - v14;
  v46 = a1[1051];
  if ((uint64_t)(v10 + v15 + 1) < 1000)
    v47 = v10 + v15 + 1;
  else
    v47 = 1000;
  v48 = a1[1052] - v46;
  *(double *)(a3 + 24) = v46 + (double)v47 / 1000.0 * v48;
  *(double *)(a3 + 32) = v46 + (double)(uint64_t)((v8 - v14) & ~((uint64_t)(v8 - v14) >> 63)) / 1000.0 * v48;
  v49 = a1 + 49;
  if (v126 <= 1)
    v50 = 1;
  else
    v50 = v126;
  v51 = v128;
  do
  {
    if (v127 >= v51)
    {
      v52 = 0;
      v53 = v125 + v45 * v126;
      do
      {
        if (v53 + v52 <= 0x3E7)
        {
          v54 = (_QWORD **)(*(_QWORD *)a3 + 16 * v45);
          v55 = *(_QWORD *)&v49[v53 + v52];
          switch(*((_BYTE *)v54 + 12))
          {
            case 0:
              v56 = (unint64_t)*v54 + v55;
              goto LABEL_112;
            case 1:
              *(double *)v54 = *(double *)v54 + (double)v55;
              goto LABEL_142;
            case 2:
              v97 = *(double *)v54;
              if (**v54 == 1)
                goto LABEL_141;
              v98 = (_QWORD *)operator new();
              v99 = *(double *)v54;
              *v98 = **v54;
              v100 = (std::string *)(v98 + 1);
              if (*(char *)(*(_QWORD *)&v99 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)(*(_QWORD *)&v99 + 8), *(_QWORD *)(*(_QWORD *)&v99 + 16));
              }
              else
              {
                v101 = *(_OWORD *)(*(_QWORD *)&v99 + 8);
                v98[3] = *(_QWORD *)(*(_QWORD *)&v99 + 24);
                *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
              }
              *v54 = v98;
              *v98 = 1;
              do
              {
                v123 = __ldaxr(*(unint64_t **)&v97);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, *(unint64_t **)&v97));
              if (v124)
                goto LABEL_141;
              if (*(char *)(*(_QWORD *)&v97 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v97 + 8));
              v111 = *(unint64_t **)&v97;
              v112 = 0x1012C404EF22A49;
              goto LABEL_140;
            case 3:
              v57 = *v54;
              if (**v54 != 1)
              {
                v58 = (_QWORD *)operator new();
                v59 = *v54;
                *v58 = **v54;
                v58[2] = 0;
                v58[3] = 0;
                v58[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v58 + 1, (const void *)v59[1], v59[2], (uint64_t)(v59[2] - v59[1]) >> 3);
                *v54 = v58;
                *v58 = 1;
                do
                {
                  v60 = __ldaxr(v57);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v57));
                if (!v61)
                {
                  v62 = (void *)v57[1];
                  if (v62)
                  {
                    v57[2] = (unint64_t)v62;
                    operator delete(v62);
                  }
                  MEMORY[0x219A19A08](v57, 0x1080C409938AC02);
                }
              }
              v63 = (double *)(*v54)[1];
              v64 = (*v54)[2] - (_QWORD)v63;
              if (v64)
              {
                v65 = v64 >> 3;
                if (v65 <= 1)
                  v65 = 1;
                do
                {
                  *v63 = *v63 + (double)v55;
                  ++v63;
                  --v65;
                }
                while (v65);
              }
              goto LABEL_142;
            case 4:
              v102 = *v54;
              if (**v54 == 1)
                goto LABEL_141;
              v103 = (_QWORD *)operator new();
              v104 = *v54;
              *v103 = **v54;
              v103[2] = 0;
              v103[3] = 0;
              v103[1] = 0;
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v103 + 1, (uint64_t *)v104[1], (uint64_t *)v104[2], (uint64_t)(v104[2] - v104[1]) >> 4);
              *v54 = v103;
              *v103 = 1;
              do
              {
                v105 = __ldaxr(v102);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, v102));
              if (v106)
                goto LABEL_141;
              *(_QWORD *)&v129 = v102 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
              goto LABEL_124;
            case 5:
              v102 = *v54;
              if (**v54 == 1)
                goto LABEL_141;
              v107 = (_QWORD *)operator new();
              v108 = *v54;
              *v107 = **v54;
              v107[2] = 0;
              v107[3] = 0;
              v107[1] = 0;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v107 + 1, (uint64_t *)v108[1], (uint64_t *)v108[2], (uint64_t)(v108[2] - v108[1]) >> 5);
              *v54 = v107;
              *v107 = 1;
              do
              {
                v109 = __ldaxr(v102);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v102));
              if (v110)
                goto LABEL_141;
              *(_QWORD *)&v129 = v102 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
LABEL_124:
              v111 = v102;
              v112 = 0x1020C405E66F15BLL;
              goto LABEL_140;
            case 6:
              v56 = (unint64_t)*v54 & 0xFF00000000000000 | ((unint64_t)*v54 + v55) & 0xFFFFFFFFFFFFFFLL;
LABEL_112:
              *v54 = (_QWORD *)v56;
              goto LABEL_142;
            case 7:
              goto LABEL_141;
            case 8:
              v113 = *v54;
              if (**v54 == 1)
                goto LABEL_141;
              v114 = operator new();
              v115 = *v54;
              *(_QWORD *)v114 = **v54;
              *(_QWORD *)(v114 + 8) = v115[1];
              v116 = v115[2];
              *(_QWORD *)(v114 + 16) = v116;
              if (v116)
              {
                v117 = (unsigned int *)(v116 + 8);
                do
                  v118 = __ldxr(v117);
                while (__stxr(v118 + 1, v117));
              }
              v119 = *(_OWORD *)(v115 + 3);
              v120 = *(_OWORD *)(v115 + 5);
              *(_OWORD *)(v114 + 56) = *(_OWORD *)(v115 + 7);
              *(_OWORD *)(v114 + 40) = v120;
              *(_OWORD *)(v114 + 24) = v119;
              *v54 = (_QWORD *)v114;
              *(_QWORD *)v114 = 1;
              do
              {
                v121 = __ldaxr(v113);
                v122 = v121 - 1;
              }
              while (__stlxr(v122, v113));
              if (v122)
                goto LABEL_141;
              boost::detail::shared_count::~shared_count((unsigned int **)v113 + 2);
              v111 = v113;
              v112 = 0x1030C40F1F0227BLL;
LABEL_140:
              MEMORY[0x219A19A08](v111, v112);
LABEL_141:
              turi::flexible_type_fail(0);
              goto LABEL_142;
            case 9:
              v66 = *v54;
              if (**v54 != 1)
              {
                v67 = (_QWORD *)operator new();
                v68 = (uint64_t)(*v54 + 1);
                *v67 = **v54;
                turi::flexible_type_impl::ndarray<double>::ndarray(v67 + 1, v68);
                *v54 = v67;
                *v67 = 1;
                do
                {
                  v69 = __ldaxr(v66);
                  v70 = v69 - 1;
                }
                while (__stlxr(v70, v66));
                if (!v70)
                {
                  v71 = (void *)v66[6];
                  if (v71)
                  {
                    v66[7] = (unint64_t)v71;
                    operator delete(v71);
                  }
                  v72 = (void *)v66[3];
                  if (v72)
                  {
                    v66[4] = (unint64_t)v72;
                    operator delete(v72);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v66 + 1));
                  MEMORY[0x219A19A08](v66, 0x1030C407B73B9F7);
                }
              }
              v73 = *v54;
              v75 = (uint64_t *)v73[3];
              v74 = (uint64_t *)v73[4];
              if (v74 == v75)
                goto LABEL_142;
              if (!v73[1])
                goto LABEL_142;
              v76 = 1;
              do
              {
                v77 = *v75++;
                v76 *= v77;
              }
              while (v75 != v74);
              if (!v76)
                goto LABEL_142;
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v73 + 1);
              v78 = (v73[4] - v73[3]) >> 3;
              v131 = 0;
              std::vector<unsigned long>::vector(&v129, v78, &v131);
              v80 = *((_QWORD *)&v129 + 1);
              v79 = (uint64_t *)v129;
              break;
            default:
              turi::flexible_type_fail(0);
              __break(1u);
              return;
          }
          do
          {
            v81 = 0;
            v82 = v80 - (_QWORD)v79;
            if (v82)
            {
              v83 = v82 >> 3;
              v84 = (uint64_t *)v73[6];
              if (v83 <= 1)
                v83 = 1;
              do
              {
                v86 = *v79++;
                v85 = v86;
                v87 = *v84++;
                v81 += v87 * v85;
                --v83;
              }
              while (v83);
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v73 + 1);
            *(double *)(*(_QWORD *)v73[1] + 8 * (v73[9] + v81)) = *(double *)(*(_QWORD *)v73[1] + 8 * (v73[9] + v81))
                                                                + (double)v55;
            v80 = *((_QWORD *)&v129 + 1);
            v79 = (uint64_t *)v129;
            v88 = (uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 3;
            v89 = v88 - 1;
            if ((uint64_t)(*((_QWORD *)&v129 + 1) - v129) >= 1)
            {
              v90 = v73[3];
              v91 = *(_QWORD *)(v129 + 8 * v89) + 1;
              *(_QWORD *)(v129 + 8 * v89) = v91;
              if (v91 >= *(_QWORD *)(v90 + 8 * v89))
              {
                v92 = (unint64_t *)&v79[v88 - 2];
                v93 = v90 - 16;
                while (1)
                {
                  v94 = v88 - 1;
                  v92[1] = 0;
                  if (v88 - 1 <= 0)
                    goto LABEL_107;
                  v95 = *v92 + 1;
                  *v92-- = v95;
                  v96 = *(_QWORD *)(v93 + 8 * v88--);
                  if (v95 < v96)
                  {
                    v89 = v94 - 1;
                    break;
                  }
                }
              }
              v88 = 1;
            }
          }
          while ((v89 & 0x8000000000000000) == 0 && v88);
          if (!v79)
            goto LABEL_142;
LABEL_107:
          *((_QWORD *)&v129 + 1) = v79;
          operator delete(v79);
        }
LABEL_142:
        ++v52;
      }
      while (v52 != v50);
    }
    ++v45;
    v51 = v128;
  }
  while (v45 != v128);
}

void sub_2185F9ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  switch(a20)
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)&a18);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)&a18);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a18);
      break;
    default:
      break;
  }
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

_QWORD *turi::visualization::bin_specification_object<double>::serialize(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)(a2 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"{\"start\":", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"stop\":", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", \"step\":", 9);
  v3 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"}", 1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization16histogram_resultIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2100uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization16histogram_resultIdEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2185FA0B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi13visualization16histogram_resultIdEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D94BA70;
  a1[1] = 0;
  turi::visualization::histogram_result<double>::histogram_result((uint64_t)(a1 + 3));
  return a1;
}

void sub_2185FA104(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::histogram_result<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::histogram_result<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::histogram_result<double>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94BAC0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94BAC0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::histogram_result<double>>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _QWORD v16[2];
  _QWORD *v17[5];

  v17[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = 0x17188DFAA6C6DE35 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    if (v3 - 1 == a2)
      v11 = v9;
    else
      v11 = v10;
    turi::gl_sarray::range_iterator((turi::gl_sarray *)a1[1], v8, v11, v17);
    v16[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)v17);
    v16[1] = v12;
    v13 = turi::gl_sarray_range::end((turi::gl_sarray_range *)v17);
    v14 = v2 + 8424 * a2;
    while (v16[0] != v13)
    {
      v15 = (unsigned __int8 *)turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v16);
      turi::visualization::histogram_result<double>::add_element_simple(v14, v15);
      turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v16);
    }
    turi::gl_sarray_range::~gl_sarray_range(v17);
  }
}

void sub_2185FA340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)va);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram_result<double>::add_element_simple(uint64_t a1, unsigned __int8 *a2)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  int v7;
  __n128 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  double *v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::string::size_type v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::string::size_type v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::string::size_type v46;
  double v47;
  double v48;
  double v49;
  char **v50;
  char *v51;
  double v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  float v62;
  __n128 v63;
  unsigned int v64;
  _BOOL4 v65;
  unsigned int v66;
  _BOOL4 v67;
  unsigned int v68;
  double *v69;
  double *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::string::size_type v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  std::string::size_type v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  std::string::size_type v102;
  double v103;
  double v104;
  double v105;
  char **v106;
  char *v107;
  double v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  __int128 v116;
  __int128 v117;
  float v118;
  double v119;
  double v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  double v124;
  char *v125;
  double v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  __int128 v134;
  __int128 v135;
  float v136;
  unint64_t v137;
  double v138;
  double data;
  BOOL v140;
  uint64_t v141;
  double v142;
  double v143;
  uint64_t v144;
  std::runtime_error *v145;
  std::string *v146;
  __int128 v147;
  std::runtime_error *exception;
  std::string *v149;
  __int128 v150;
  std::runtime_error *v151;
  std::string *v152;
  __int128 v153;
  void *__p[2];
  void *v155[2];
  void *v156[2];
  __int128 v157;
  size_t __idx;
  std::string v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  ++*(_QWORD *)(a1 + 16);
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a1 + 32, a2, (char *)a2);
  if (a2[12] != 7)
    ++*(_QWORD *)(a1 + 80);
  turi::groupby_operators::average::add_element_simple((turi::groupby_operators::average *)(a1 + 88), (const turi::flexible_type *)a2);
  turi::groupby_operators::min::add_element_simple(a1 + 112, (const turi::flexible_type *)a2, v4);
  turi::groupby_operators::max::add_element_simple(a1 + 144, (const turi::flexible_type *)a2, v5);
  turi::groupby_operators::quantile::add_element_simple((turi::groupby_operators::quantile *)(a1 + 176), (const turi::flexible_type *)a2, v6);
  turi::groupby_operators::variance::add_element_simple((turi::groupby_operators::variance *)(a1 + 352), (const turi::flexible_type *)a2);
  v7 = a2[12];
  if (v7 != 7 && (v7 != 1 || (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL))
  {
    v159.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v159.__r_.__value_.__r.__words[1]) = 0;
    v159.__r_.__value_.__s.__data_[12] = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v159, (_QWORD *)(a1 + 8392));
    switch(v159.__r_.__value_.__s.__data_[12])
    {
      case 0:
        switch(a2[12])
        {
          case 0u:
            v19 = *(_QWORD *)a2 < (int64_t)v159.__r_.__value_.__r.__words[0];
            goto LABEL_34;
          case 1u:
            v138 = *(double *)a2;
            data = (double)(uint64_t)v159.__r_.__value_.__l.__data_;
            goto LABEL_234;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_38;
          case 6u:
            v20 = (int64_t)v159.__r_.__value_.__r.__words[0] <= (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            goto LABEL_239;
          default:
            goto LABEL_262;
        }
      case 1:
        switch(a2[12])
        {
          case 0u:
            v20 = *(double *)&v159.__r_.__value_.__l.__data_ <= (double)*(uint64_t *)a2;
            goto LABEL_239;
          case 1u:
            v138 = *(double *)a2;
            data = *(double *)&v159.__r_.__value_.__l.__data_;
LABEL_234:
            v140 = v138 < data;
            break;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_38;
          case 6u:
            v140 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) < *(double *)&v159.__r_.__value_.__l.__data_;
            break;
          default:
            goto LABEL_262;
        }
        v10 = v140;
        goto LABEL_39;
      case 2:
        v11 = a2[12];
        if (v11 - 3 < 7 || v11 < 2)
          goto LABEL_38;
        if (v11 == 2)
        {
          v10 = std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)a2 + 8), (_BYTE *)(v159.__r_.__value_.__r.__words[0] + 8)) >> 31;
          goto LABEL_39;
        }
LABEL_262:
        turi::flexible_type_fail(0);
LABEL_270:
        __break(1u);
        return;
      case 3:
        v12 = a2[12];
        if (v12 > 9)
          goto LABEL_262;
        if (v12 != 3)
          goto LABEL_38;
        v13 = *(double **)(*(_QWORD *)a2 + 8);
        v14 = *(double **)(v159.__r_.__value_.__r.__words[0] + 8);
        v15 = (uint64_t)(*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v14) >> 3;
        v16 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v13) >> 3;
        if (*(double **)(*(_QWORD *)a2 + 16) == v13)
          goto LABEL_27;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v13) >> 3;
        v18 = (uint64_t)(*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v14) >> 3;
        break;
      case 4:
        v9 = a2[12];
        if (v9 > 9)
          goto LABEL_262;
        if (v9 == 4)
        {
          v10 = turi::flexible_type_impl::lt_operator::operator()(v8, (uint64_t)__p, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(v159.__r_.__value_.__r.__words[0] + 8));
        }
        else
        {
LABEL_38:
          turi::flexible_type_fail(0);
          v10 = 0;
        }
        goto LABEL_39;
      case 5:
      case 8:
      case 9:
        if (a2[12] >= 0xAu)
          goto LABEL_262;
        goto LABEL_38;
      case 6:
        switch(a2[12])
        {
          case 0u:
            v19 = *(_QWORD *)a2 < (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8;
            goto LABEL_34;
          case 1u:
            v20 = (double)SLODWORD(v159.__r_.__value_.__r.__words[1]) / 1000000.0
                + (double)((uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8) <= *(double *)a2;
LABEL_239:
            v10 = !v20;
            goto LABEL_39;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_38;
          case 6u:
            v141 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            if (v141 < (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8)
              goto LABEL_232;
            if (v141 != (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8)
              goto LABEL_258;
            v19 = *((_DWORD *)a2 + 2) < SLODWORD(v159.__r_.__value_.__r.__words[1]);
LABEL_34:
            v10 = v19;
            break;
          default:
            goto LABEL_262;
        }
        goto LABEL_39;
      case 7:
        if (a2[12] <= 9u)
          goto LABEL_38;
        goto LABEL_262;
      default:
        goto LABEL_262;
    }
    while (v18 && *v13 <= *v14)
    {
      if (*v13 < *v14)
      {
LABEL_232:
        v10 = 1;
        goto LABEL_39;
      }
      --v18;
      ++v13;
      ++v14;
      if (!--v17)
      {
LABEL_27:
        v10 = v16 < v15;
        goto LABEL_39;
      }
    }
LABEL_258:
    v10 = 0;
LABEL_39:
    switch(v159.__r_.__value_.__s.__data_[12])
    {
      case 2:
        v21 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(v159.__r_.__value_.__r.__words[0] + 31) < 0)
              operator delete(*(void **)(v159.__r_.__value_.__r.__words[0] + 8));
            v25 = (_QWORD *)v24;
            v26 = 0x1012C404EF22A49;
            goto LABEL_76;
          }
        }
        break;
      case 3:
        v35 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            v39 = *(void **)(v159.__r_.__value_.__r.__words[0] + 8);
            if (v39)
            {
              *(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) = v39;
              operator delete(v39);
            }
            v25 = (_QWORD *)v38;
            v26 = 0x1080C409938AC02;
            goto LABEL_76;
          }
        }
        break;
      case 4:
        v27 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            __p[0] = (void *)(v159.__r_.__value_.__r.__words[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_69;
          }
        }
        break;
      case 5:
        v40 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          v30 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            __p[0] = (void *)(v159.__r_.__value_.__r.__words[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_69:
            v25 = (_QWORD *)v30;
            v26 = 0x1020C405E66F15BLL;
            goto LABEL_76;
          }
        }
        break;
      case 8:
        v43 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v159.__r_.__value_.__r.__words[0] + 16));
            v25 = (_QWORD *)v46;
            v34 = -235920773;
            goto LABEL_75;
          }
        }
        break;
      case 9:
        v31 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33 && v159.__r_.__value_.__r.__words[0])
        {
          v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v159.__r_.__value_.__l.__data_);
          v34 = 2071181815;
LABEL_75:
          v26 = v34 | 0x1030C4000000000;
LABEL_76:
          MEMORY[0x219A19A08](v25, v26);
        }
        break;
      default:
        break;
    }
    if (v10)
    {
      v47 = 0.0;
      switch(a2[12])
      {
        case 0u:
          v47 = (double)*(uint64_t *)a2;
          break;
        case 1u:
          v47 = *(double *)a2;
          break;
        case 2u:
          v49 = *(double *)a2;
          v50 = (char **)(*(_QWORD *)a2 + 8);
          __idx = 0;
          v51 = (char *)v50;
          if (*(char *)(*(_QWORD *)&v49 + 31) < 0)
            v51 = *v50;
          std::string::basic_string[abi:ne180100]<0>(__p, v51);
          v52 = std::stod((const std::string *)__p, &__idx);
          if (SHIBYTE(v155[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(*(_QWORD *)&v49 + 31) < 0)
            v53 = *(_QWORD *)(*(_QWORD *)&v49 + 16);
          else
            v53 = *(unsigned __int8 *)(*(_QWORD *)&v49 + 31);
          if (__idx != v53)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v149 = std::string::append(&v159, " cannot be interpreted as a float");
            v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
            v155[0] = (void *)v149->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v150;
            v149->__r_.__value_.__l.__size_ = 0;
            v149->__r_.__value_.__r.__words[2] = 0;
            v149->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)__p);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v62 = v52;
          v47 = v62;
          break;
        case 3u:
          v48 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v48 + 8), *(_QWORD *)(*(_QWORD *)&v48 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v48 + 16) - *(_QWORD *)(*(_QWORD *)&v48 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4u:
          v54 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v54 + 8), *(uint64_t **)(*(_QWORD *)&v54 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v54 + 16) - *(_QWORD *)(*(_QWORD *)&v54 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
          break;
        case 5u:
          v55 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v55 + 8), *(uint64_t **)(*(_QWORD *)&v55 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v55 + 16) - *(_QWORD *)(*(_QWORD *)&v55 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
          break;
        case 6u:
          v47 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          break;
        case 7u:
          break;
        case 8u:
          v56 = *(double *)a2;
          v57 = *(unsigned int **)(*(_QWORD *)a2 + 16);
          __p[0] = *(void **)(*(_QWORD *)a2 + 8);
          __p[1] = v57;
          if (v57)
          {
            v58 = v57 + 2;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v60 = *(_OWORD *)(*(_QWORD *)&v56 + 24);
          v61 = *(_OWORD *)(*(_QWORD *)&v56 + 56);
          *(_OWORD *)v156 = *(_OWORD *)(*(_QWORD *)&v56 + 40);
          v157 = v61;
          *(_OWORD *)v155 = v60;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          break;
        case 9u:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      *(double *)(a1 + 8392) = v47;
    }
    v159.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v159.__r_.__value_.__r.__words[1]) = 0;
    v159.__r_.__value_.__s.__data_[12] = 0;
    turi::flexible_type::operator=<double>((uint64_t)&v159, (_QWORD *)(a1 + 8400));
    switch(v159.__r_.__value_.__s.__data_[12])
    {
      case 0:
        switch(a2[12])
        {
          case 0u:
            v75 = *(_QWORD *)a2 <= (int64_t)v159.__r_.__value_.__r.__words[0];
            goto LABEL_249;
          case 1u:
            v142 = *(double *)a2;
            v143 = (double)(uint64_t)v159.__r_.__value_.__l.__data_;
            goto LABEL_248;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_131;
          case 6u:
            v67 = (int64_t)v159.__r_.__value_.__r.__words[0] < (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            goto LABEL_132;
          default:
            goto LABEL_263;
        }
      case 1:
        switch(a2[12])
        {
          case 0u:
            v76 = *(double *)&v159.__r_.__value_.__l.__data_ < (double)*(uint64_t *)a2;
            goto LABEL_253;
          case 1u:
            v142 = *(double *)a2;
            v143 = *(double *)&v159.__r_.__value_.__l.__data_;
LABEL_248:
            v75 = v142 <= v143;
            goto LABEL_249;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_131;
          case 6u:
            v75 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8) <= *(double *)&v159.__r_.__value_.__l.__data_;
            goto LABEL_249;
          default:
            goto LABEL_263;
        }
      case 2:
        v66 = a2[12];
        if (v66 - 3 < 7 || v66 < 2)
          goto LABEL_131;
        if (v66 == 2)
        {
          v65 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v159.__r_.__value_.__r.__words[0] + 8), (_QWORD *)(*(_QWORD *)a2 + 8));
          goto LABEL_111;
        }
LABEL_263:
        turi::flexible_type_fail(0);
        goto LABEL_270;
      case 3:
        v68 = a2[12];
        if (v68 > 9)
          goto LABEL_263;
        if (v68 != 3)
          goto LABEL_131;
        v69 = *(double **)(*(_QWORD *)a2 + 8);
        v70 = *(double **)(v159.__r_.__value_.__r.__words[0] + 8);
        v71 = (uint64_t)(*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v70) >> 3;
        v72 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v69) >> 3;
        if (*(double **)(*(_QWORD *)a2 + 16) == v69)
          goto LABEL_123;
        if (v72 <= 1)
          v73 = 1;
        else
          v73 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v69) >> 3;
        v74 = (uint64_t)(*(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) - (_QWORD)v70) >> 3;
        break;
      case 4:
        v64 = a2[12];
        if (v64 > 9)
          goto LABEL_263;
        if (v64 == 4)
        {
          v65 = turi::flexible_type_impl::gt_operator::operator()(v63, (uint64_t)__p, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(v159.__r_.__value_.__r.__words[0] + 8));
LABEL_111:
          v67 = v65;
        }
        else
        {
LABEL_131:
          turi::flexible_type_fail(0);
          v67 = 0;
        }
        goto LABEL_132;
      case 5:
      case 8:
      case 9:
        if (a2[12] >= 0xAu)
          goto LABEL_263;
        goto LABEL_131;
      case 6:
        switch(a2[12])
        {
          case 0u:
            v75 = *(_QWORD *)a2 <= (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8;
            goto LABEL_249;
          case 1u:
            v76 = (double)SLODWORD(v159.__r_.__value_.__r.__words[1]) / 1000000.0
                + (double)((uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8) < *(double *)a2;
LABEL_253:
            v67 = v76;
            goto LABEL_132;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_131;
          case 6u:
            v144 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
            if (v144 > (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8)
              goto LABEL_246;
            if (v144 != (uint64_t)(v159.__r_.__value_.__r.__words[0] << 8) >> 8)
              goto LABEL_261;
            v75 = *((_DWORD *)a2 + 2) <= SLODWORD(v159.__r_.__value_.__r.__words[1]);
LABEL_249:
            v67 = !v75;
            break;
          default:
            goto LABEL_263;
        }
        goto LABEL_132;
      case 7:
        if (a2[12] <= 9u)
          goto LABEL_131;
        goto LABEL_263;
      default:
        goto LABEL_263;
    }
    while (1)
    {
      if (!v74 || *v69 > *v70)
      {
LABEL_246:
        v67 = 1;
        goto LABEL_132;
      }
      if (*v69 < *v70)
        break;
      --v74;
      ++v69;
      ++v70;
      if (!--v73)
      {
LABEL_123:
        v67 = v72 > v71;
        goto LABEL_132;
      }
    }
LABEL_261:
    v67 = 0;
LABEL_132:
    switch(v159.__r_.__value_.__s.__data_[12])
    {
      case 2:
        v77 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
        {
          v80 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(v159.__r_.__value_.__r.__words[0] + 31) < 0)
              operator delete(*(void **)(v159.__r_.__value_.__r.__words[0] + 8));
            v81 = (_QWORD *)v80;
            v82 = 0x1012C404EF22A49;
            goto LABEL_169;
          }
        }
        break;
      case 3:
        v91 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v94 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            v95 = *(void **)(v159.__r_.__value_.__r.__words[0] + 8);
            if (v95)
            {
              *(_QWORD *)(v159.__r_.__value_.__r.__words[0] + 16) = v95;
              operator delete(v95);
            }
            v81 = (_QWORD *)v94;
            v82 = 0x1080C409938AC02;
            goto LABEL_169;
          }
        }
        break;
      case 4:
        v83 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v84 = __ldaxr(v83);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v83));
        if (!v85)
        {
          v86 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            __p[0] = (void *)(v159.__r_.__value_.__r.__words[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_162;
          }
        }
        break;
      case 5:
        v96 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v97 = __ldaxr(v96);
          v98 = v97 - 1;
        }
        while (__stlxr(v98, v96));
        if (!v98)
        {
          v86 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            __p[0] = (void *)(v159.__r_.__value_.__r.__words[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_162:
            v81 = (_QWORD *)v86;
            v82 = 0x1020C405E66F15BLL;
            goto LABEL_169;
          }
        }
        break;
      case 8:
        v99 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          v102 = v159.__r_.__value_.__r.__words[0];
          if (v159.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v159.__r_.__value_.__r.__words[0] + 16));
            v81 = (_QWORD *)v102;
            v90 = -235920773;
            goto LABEL_168;
          }
        }
        break;
      case 9:
        v87 = (unint64_t *)v159.__r_.__value_.__r.__words[0];
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89 && v159.__r_.__value_.__r.__words[0])
        {
          v81 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v159.__r_.__value_.__l.__data_);
          v90 = 2071181815;
LABEL_168:
          v82 = v90 | 0x1030C4000000000;
LABEL_169:
          MEMORY[0x219A19A08](v81, v82);
        }
        break;
      default:
        break;
    }
    if (v67)
    {
      v103 = 0.0;
      switch(a2[12])
      {
        case 0u:
          v103 = (double)*(uint64_t *)a2;
          break;
        case 1u:
          v103 = *(double *)a2;
          break;
        case 2u:
          v105 = *(double *)a2;
          v106 = (char **)(*(_QWORD *)a2 + 8);
          __idx = 0;
          v107 = (char *)v106;
          if (*(char *)(*(_QWORD *)&v105 + 31) < 0)
            v107 = *v106;
          std::string::basic_string[abi:ne180100]<0>(__p, v107);
          v108 = std::stod((const std::string *)__p, &__idx);
          if (SHIBYTE(v155[0]) < 0)
            operator delete(__p[0]);
          if (*(char *)(*(_QWORD *)&v105 + 31) < 0)
            v109 = *(_QWORD *)(*(_QWORD *)&v105 + 16);
          else
            v109 = *(unsigned __int8 *)(*(_QWORD *)&v105 + 31);
          if (__idx != v109)
          {
            v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v152 = std::string::append(&v159, " cannot be interpreted as a float");
            v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
            v155[0] = (void *)v152->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v153;
            v152->__r_.__value_.__l.__size_ = 0;
            v152->__r_.__value_.__r.__words[2] = 0;
            v152->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v151, (const std::string *)__p);
            __cxa_throw(v151, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v118 = v108;
          v103 = v118;
          break;
        case 3u:
          v104 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v104 + 8), *(_QWORD *)(*(_QWORD *)&v104 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v104 + 16) - *(_QWORD *)(*(_QWORD *)&v104 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4u:
          v110 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v110 + 8), *(uint64_t **)(*(_QWORD *)&v110 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v110 + 16) - *(_QWORD *)(*(_QWORD *)&v110 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
          break;
        case 5u:
          v111 = *(double *)a2;
          __p[1] = 0;
          v155[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v111 + 8), *(uint64_t **)(*(_QWORD *)&v111 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v111 + 16) - *(_QWORD *)(*(_QWORD *)&v111 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
          break;
        case 6u:
          v103 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
          break;
        case 7u:
          break;
        case 8u:
          v112 = *(double *)a2;
          v113 = *(unsigned int **)(*(_QWORD *)a2 + 16);
          __p[0] = *(void **)(*(_QWORD *)a2 + 8);
          __p[1] = v113;
          if (v113)
          {
            v114 = v113 + 2;
            do
              v115 = __ldxr(v114);
            while (__stxr(v115 + 1, v114));
          }
          v116 = *(_OWORD *)(*(_QWORD *)&v112 + 24);
          v117 = *(_OWORD *)(*(_QWORD *)&v112 + 56);
          *(_OWORD *)v156 = *(_OWORD *)(*(_QWORD *)&v112 + 40);
          v157 = v117;
          *(_OWORD *)v155 = v116;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
          break;
        case 9u:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(__p);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      *(double *)(a1 + 8400) = v103;
    }
    turi::visualization::histogram_result<double>::rescale((double *)a1, *(double *)(a1 + 8392), *(double *)(a1 + 8400));
    v119 = 0.0;
    switch(a2[12])
    {
      case 0u:
        v119 = (double)*(uint64_t *)a2;
        break;
      case 1u:
        v119 = *(double *)a2;
        break;
      case 2u:
        v124 = *(double *)a2;
        __idx = 0;
        v125 = (char *)(*(_QWORD *)&v124 + 8);
        if (*(char *)(*(_QWORD *)&v124 + 31) < 0)
          v125 = *(char **)(*(_QWORD *)&v124 + 8);
        std::string::basic_string[abi:ne180100]<0>(__p, v125);
        v126 = std::stod((const std::string *)__p, &__idx);
        if (SHIBYTE(v155[0]) < 0)
          operator delete(__p[0]);
        if (*(char *)(*(_QWORD *)&v124 + 31) < 0)
          v127 = *(_QWORD *)(*(_QWORD *)&v124 + 16);
        else
          v127 = *(unsigned __int8 *)(*(_QWORD *)&v124 + 31);
        if (__idx != v127)
        {
          v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v146 = std::string::append(&v159, " cannot be interpreted as a float");
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          v155[0] = (void *)v146->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v145, (const std::string *)__p);
          __cxa_throw(v145, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v136 = v126;
        v119 = v136;
        break;
      case 3u:
        v120 = *(double *)a2;
        __p[1] = 0;
        v155[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v120 + 8), *(_QWORD *)(*(_QWORD *)&v120 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v120 + 16) - *(_QWORD *)(*(_QWORD *)&v120 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        break;
      case 4u:
        v128 = *(double *)a2;
        __p[1] = 0;
        v155[0] = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v128 + 8), *(uint64_t **)(*(_QWORD *)&v128 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v128 + 16) - *(_QWORD *)(*(_QWORD *)&v128 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
        break;
      case 5u:
        v129 = *(double *)a2;
        __p[1] = 0;
        v155[0] = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v129 + 8), *(uint64_t **)(*(_QWORD *)&v129 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v129 + 16) - *(_QWORD *)(*(_QWORD *)&v129 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v159.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
        break;
      case 6u:
        v119 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8);
        break;
      case 7u:
        break;
      case 8u:
        v130 = *(double *)a2;
        v131 = *(unsigned int **)(*(_QWORD *)a2 + 16);
        __p[0] = *(void **)(*(_QWORD *)a2 + 8);
        __p[1] = v131;
        if (v131)
        {
          v132 = v131 + 2;
          do
            v133 = __ldxr(v132);
          while (__stxr(v133 + 1, v132));
        }
        v134 = *(_OWORD *)(*(_QWORD *)&v130 + 24);
        v135 = *(_OWORD *)(*(_QWORD *)&v130 + 56);
        *(_OWORD *)v156 = *(_OWORD *)(*(_QWORD *)&v130 + 40);
        v157 = v135;
        *(_OWORD *)v155 = v134;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
        break;
      case 9u:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a2 + 8);
        turi::flexible_type_fail(0);
        if (v156[1])
        {
          *(void **)&v157 = v156[1];
          operator delete(v156[1]);
        }
        if (v155[0])
        {
          v155[1] = v155[0];
          operator delete(v155[0]);
        }
        v121 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v122 = (unint64_t *)((char *)__p[1] + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        break;
      default:
        turi::apply_binary_op_ff();
    }
    v137 = vcvtmd_u64_f64((v119 - *(double *)(a1 + 8408)) / (*(double *)(a1 + 8416) - *(double *)(a1 + 8408)) * 1000.0);
    if (v137 == 1000)
      v137 = 999;
    ++*(_QWORD *)(a1 + 8 * v137 + 392);
  }
}

void sub_2185FB5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a22);
    if ((v29 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void turi::visualization::histogram_result<double>::rescale(double *a1, double a2, double a3)
{
  double v6;
  void *v7;
  void *v8;
  float64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  const double *v12;
  uint64_t v13;
  float64_t *v14;
  const double *v15;
  float64_t *v16;
  uint64_t *v17;
  float64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  float64x2x2_t v23;
  float64x2x2_t v24;

  v6 = a1[1051];
  v7 = a1 + 49;
  v8 = a1 + 799;
  v9 = a1 + 549;
  v10 = (uint64_t *)(a1 + 548);
  while (v6 > a2 || a1[1052] < a3)
  {
    v11 = 500;
    do
    {
      v12 = &a1[v11 + 45];
      v23 = vld2q_f64(v12);
      v23.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v23.val[1], (int64x2_t)v23.val[0]);
      a1[v11 + 48] = v23.val[0].f64[1];
      a1[v11 + 46] = v23.val[0].f64[0];
      v11 -= 4;
    }
    while (v11 * 8);
    v13 = 250;
    v14 = v9;
    v15 = v9;
    do
    {
      v24 = vld2q_f64(v15);
      v15 += 4;
      v24.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v24.val[0], (int64x2_t)v24.val[1]);
      *v14 = v24.val[0].f64[0];
      v14[2] = v24.val[0].f64[1];
      v14 = (float64_t *)v15;
      v13 -= 2;
    }
    while (v13);
    v16 = v9;
    v17 = v10;
    v18 = v9;
    do
    {
      v19 = *(_QWORD *)v16;
      v16 += 2;
      *(_QWORD *)v18++ = v19;
      v20 = *v17;
      v17 -= 2;
      *(uint64_t *)((char *)v10 + v13) = v20;
      v13 -= 8;
    }
    while (v13 != -2000);
    bzero(v8, 0x7D0uLL);
    bzero(v7, 0x7D0uLL);
    v21 = a1[1052];
    v22 = (v21 - v6) * 0.5;
    a1[1052] = v21 + v22;
    v6 = v6 - v22;
    a1[1051] = v6;
  }
}

uint64_t turi::visualization::histogram_result<double>::histogram_result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t **v5;
  unint64_t *v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  __int128 v16;

  *(_QWORD *)a1 = &unk_24D94BA28;
  *(_QWORD *)(a1 + 8) = &unk_24D92FF70;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = &unk_24D9308D0;
  std::unordered_set<turi::flexible_type>::unordered_set(a1 + 32, a2 + 32);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = &unk_24D930060;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 88) = &unk_24D930150;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = &unk_24D92FCA0;
  *(_QWORD *)(a1 + 120) = 0;
  v5 = (unint64_t **)(a1 + 120);
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  if (a2 == a1)
  {
    v15 = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
    *(_BYTE *)(a1 + 136) = v15;
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 164) = 0;
  }
  else
  {
    v6 = *(unint64_t **)(a2 + 120);
    *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
    *v5 = v6;
    v7 = *(unsigned __int8 *)(a2 + 132);
    *(_BYTE *)(a1 + 132) = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v8 = *v5;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 136) = v10;
    *(_QWORD *)(a1 + 144) = &unk_24D92FBB0;
    *(_DWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 164) = 0;
    v11 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 157) = *(_QWORD *)(a2 + 157);
    *(_QWORD *)(a1 + 152) = v11;
    v12 = *(unsigned __int8 *)(a2 + 164);
    *(_BYTE *)(a1 + 164) = v12;
    if (v12 <= 9 && ((1 << v12) & 0x33C) != 0)
    {
      v13 = *(unint64_t **)(a1 + 152);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  turi::groupby_operators::quantile::quantile((turi::groupby_operators::quantile *)(a1 + 176), (const turi::groupby_operators::quantile *)(a2 + 176));
  *(_QWORD *)(a1 + 352) = &unk_24D930330;
  v16 = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v16;
  *(_QWORD *)(a1 + 352) = &unk_24D930420;
  memcpy((void *)(a1 + 384), (const void *)(a2 + 384), 0x1F68uLL);
  return a1;
}

void sub_2185FBCB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  turi::groupby_operators::min *v3;
  turi::groupby_operators::max *v4;
  uint64_t v5;

  turi::groupby_operators::max::~max(v4);
  turi::groupby_operators::min::~min(v3);
  *(_QWORD *)(v1 + 24) = v5 + 16;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void turi::visualization::histogram_result<double>::init(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  *(_BYTE *)(a1 + 384) = a2;
  turi::groupby_operators::min::set_input_type(a1 + 112, a2);
  turi::groupby_operators::max::set_input_type(a1 + 144, a2);
  bzero((void *)(a1 + 392), 0x1F40uLL);
  if (a4 >= a3)
    v12 = a3;
  else
    v12 = a4;
  *(double *)(a1 + 8392) = v12;
  if (a3 >= a4)
    v13 = a3;
  else
    v13 = a4;
  *(double *)(a1 + 8400) = v13;
  if (a6 >= a5)
    v14 = a5;
  else
    v14 = a6;
  *(double *)(a1 + 8408) = v14;
  if (a5 >= a6)
    v15 = a5;
  else
    v15 = a6;
  *(double *)(a1 + 8416) = v15;
  if (v15 == v14)
  {
    if (v15 <= 0.0)
    {
      if (v15 >= 0.0)
      {
        v17 = v15 + 0.01;
LABEL_20:
        *(double *)(a1 + 8416) = v17;
        return;
      }
      v16 = 0.99;
    }
    else
    {
      v16 = 1.01;
    }
    v17 = v15 * v16;
    goto LABEL_20;
  }
}

void turi::visualization::histogram_result<double>::init(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  double v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  float v26;
  double v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  float v45;
  double v46;
  double v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  double v51;
  char **v52;
  char *v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  __int128 v62;
  __int128 v63;
  float v64;
  double v65;
  double v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  double v70;
  char **v71;
  char *v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  __int128 v81;
  __int128 v82;
  float v83;
  std::runtime_error *exception;
  std::string *v85;
  __int128 v86;
  std::runtime_error *v87;
  std::string *v88;
  __int128 v89;
  std::runtime_error *v90;
  std::string *v91;
  __int128 v92;
  std::runtime_error *v93;
  std::string *v94;
  __int128 v95;
  void *__p[2];
  void *v97[2];
  __int128 v98;
  __int128 v99;
  std::string v100;
  size_t __idx;

  v8 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v8 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v8 = *(double *)a3;
      break;
    case 2:
      v13 = *(_QWORD *)a3;
      v14 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v15 = (char *)v14;
      if (*(char *)(v13 + 31) < 0)
        v15 = *v14;
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      v16 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v97[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v13 + 31) < 0)
        v17 = *(_QWORD *)(v13 + 16);
      else
        v17 = *(unsigned __int8 *)(v13 + 31);
      if (__idx != v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v85 = std::string::append(&v100, " cannot be interpreted as a float");
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v97[0] = (void *)v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v26 = v16;
      v8 = v26;
      break;
    case 3:
      v9 = *(_QWORD *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v18 = *(_QWORD *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 5:
      v19 = *(_QWORD *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 6:
      v8 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v20 = *(_QWORD *)a3;
      v21 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v21;
      if (v21)
      {
        v22 = v21 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *(_OWORD *)(v20 + 24);
      v25 = *(_OWORD *)(v20 + 56);
      v98 = *(_OWORD *)(v20 + 40);
      v99 = v25;
      *(_OWORD *)v97 = v24;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v98 + 1))
      {
        *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
        operator delete(*((void **)&v98 + 1));
      }
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v10 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v11 = (unint64_t *)((char *)__p[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v27 = 0.0;
  switch(*((_BYTE *)a4 + 12))
  {
    case 0:
      v27 = (double)*(uint64_t *)a4;
      break;
    case 1:
      v27 = *(double *)a4;
      break;
    case 2:
      v32 = *(_QWORD *)a4;
      v33 = (char **)(*(_QWORD *)a4 + 8);
      __idx = 0;
      v34 = (char *)v33;
      if (*(char *)(v32 + 31) < 0)
        v34 = *v33;
      std::string::basic_string[abi:ne180100]<0>(__p, v34);
      v35 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v97[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(v32 + 31) < 0)
        v36 = *(_QWORD *)(v32 + 16);
      else
        v36 = *(unsigned __int8 *)(v32 + 31);
      if (__idx != v36)
      {
        v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v88 = std::string::append(&v100, " cannot be interpreted as a float");
        v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v97[0] = (void *)v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v87, (const std::string *)__p);
        __cxa_throw(v87, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v45 = v35;
      v27 = v45;
      break;
    case 3:
      v28 = *(_QWORD *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v28 + 8), *(_QWORD *)(v28 + 16), (uint64_t)(*(_QWORD *)(v28 + 16) - *(_QWORD *)(v28 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v37 = *(_QWORD *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 5:
      v38 = *(_QWORD *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(_QWORD *)(v38 + 16) - *(_QWORD *)(v38 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 6:
      v27 = (double)a4[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a4 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v39 = *(_QWORD *)a4;
      v40 = *(unsigned int **)(*(_QWORD *)a4 + 16);
      __p[0] = *(void **)(*(_QWORD *)a4 + 8);
      __p[1] = v40;
      if (v40)
      {
        v41 = v40 + 2;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = *(_OWORD *)(v39 + 24);
      v44 = *(_OWORD *)(v39 + 56);
      v98 = *(_OWORD *)(v39 + 40);
      v99 = v44;
      *(_OWORD *)v97 = v43;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a4 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v98 + 1))
      {
        *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
        operator delete(*((void **)&v98 + 1));
      }
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v29 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v30 = (unint64_t *)((char *)__p[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v46 = 0.0;
  switch(*((_BYTE *)a3 + 12))
  {
    case 0:
      v46 = (double)*(uint64_t *)a3;
      break;
    case 1:
      v46 = *(double *)a3;
      break;
    case 2:
      v51 = *(double *)a3;
      v52 = (char **)(*(_QWORD *)a3 + 8);
      __idx = 0;
      v53 = (char *)v52;
      if (*(char *)(*(_QWORD *)&v51 + 31) < 0)
        v53 = *v52;
      std::string::basic_string[abi:ne180100]<0>(__p, v53);
      v54 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v97[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(*(_QWORD *)&v51 + 31) < 0)
        v55 = *(_QWORD *)(*(_QWORD *)&v51 + 16);
      else
        v55 = *(unsigned __int8 *)(*(_QWORD *)&v51 + 31);
      if (__idx != v55)
      {
        v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v91 = std::string::append(&v100, " cannot be interpreted as a float");
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v97[0] = (void *)v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v90, (const std::string *)__p);
        __cxa_throw(v90, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v64 = v54;
      v46 = v64;
      break;
    case 3:
      v47 = *(double *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v47 + 8), *(_QWORD *)(*(_QWORD *)&v47 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v47 + 16) - *(_QWORD *)(*(_QWORD *)&v47 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v56 = *(double *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v56 + 8), *(uint64_t **)(*(_QWORD *)&v56 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v56 + 16) - *(_QWORD *)(*(_QWORD *)&v56 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 5:
      v57 = *(double *)a3;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v57 + 8), *(uint64_t **)(*(_QWORD *)&v57 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v57 + 16) - *(_QWORD *)(*(_QWORD *)&v57 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 6:
      v46 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v58 = *(double *)a3;
      v59 = *(unsigned int **)(*(_QWORD *)a3 + 16);
      __p[0] = *(void **)(*(_QWORD *)a3 + 8);
      __p[1] = v59;
      if (v59)
      {
        v60 = v59 + 2;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = *(_OWORD *)(*(_QWORD *)&v58 + 24);
      v63 = *(_OWORD *)(*(_QWORD *)&v58 + 56);
      v98 = *(_OWORD *)(*(_QWORD *)&v58 + 40);
      v99 = v63;
      *(_OWORD *)v97 = v62;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v98 + 1))
      {
        *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
        operator delete(*((void **)&v98 + 1));
      }
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v48 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v49 = (unint64_t *)((char *)__p[1] + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  v65 = 0.0;
  switch(*((_BYTE *)a4 + 12))
  {
    case 0:
      v65 = (double)*(uint64_t *)a4;
      break;
    case 1:
      v65 = *(double *)a4;
      break;
    case 2:
      v70 = *(double *)a4;
      v71 = (char **)(*(_QWORD *)a4 + 8);
      __idx = 0;
      v72 = (char *)v71;
      if (*(char *)(*(_QWORD *)&v70 + 31) < 0)
        v72 = *v71;
      std::string::basic_string[abi:ne180100]<0>(__p, v72);
      v73 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v97[0]) < 0)
        operator delete(__p[0]);
      if (*(char *)(*(_QWORD *)&v70 + 31) < 0)
        v74 = *(_QWORD *)(*(_QWORD *)&v70 + 16);
      else
        v74 = *(unsigned __int8 *)(*(_QWORD *)&v70 + 31);
      if (__idx != v74)
      {
        v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v94 = std::string::append(&v100, " cannot be interpreted as a float");
        v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        v97[0] = (void *)v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v93, (const std::string *)__p);
        __cxa_throw(v93, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v83 = v73;
      v65 = v83;
      break;
    case 3:
      v66 = *(double *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(_QWORD *)&v66 + 8), *(_QWORD *)(*(_QWORD *)&v66 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v66 + 16) - *(_QWORD *)(*(_QWORD *)&v66 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      v75 = *(double *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(_QWORD *)&v75 + 8), *(uint64_t **)(*(_QWORD *)&v75 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v75 + 16) - *(_QWORD *)(*(_QWORD *)&v75 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 5:
      v76 = *(double *)a4;
      __p[1] = 0;
      v97[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(_QWORD *)&v76 + 8), *(uint64_t **)(*(_QWORD *)&v76 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v76 + 16) - *(_QWORD *)(*(_QWORD *)&v76 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      break;
    case 6:
      v65 = (double)a4[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a4 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      v77 = *(double *)a4;
      v78 = *(unsigned int **)(*(_QWORD *)a4 + 16);
      __p[0] = *(void **)(*(_QWORD *)a4 + 8);
      __p[1] = v78;
      if (v78)
      {
        v79 = v78 + 2;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = *(_OWORD *)(*(_QWORD *)&v77 + 24);
      v82 = *(_OWORD *)(*(_QWORD *)&v77 + 56);
      v98 = *(_OWORD *)(*(_QWORD *)&v77 + 40);
      v99 = v82;
      *(_OWORD *)v97 = v81;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a4 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v98 + 1))
      {
        *(_QWORD *)&v99 = *((_QWORD *)&v98 + 1);
        operator delete(*((void **)&v98 + 1));
      }
      if (v97[0])
      {
        v97[1] = v97[0];
        operator delete(v97[0]);
      }
      v67 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v68 = (unint64_t *)((char *)__p[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      break;
    default:
      turi::apply_binary_op_ff();
  }
  turi::visualization::histogram_result<double>::init(a1, a2, v8, v27, v46, v65);
}

void sub_2185FC93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization14item_frequencyENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization14item_frequencyENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_2185FCAE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization14item_frequencyENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D94BB40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24D94BB90;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 40));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 24) = &off_24D94C1A0;
  return a1;
}

void sub_2185FCB68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::item_frequency>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::item_frequency>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::item_frequency>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 80))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 64);
    *a2 = *(_QWORD *)(a1 + 56);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 72);
  v11 = turi::gl_sarray::size((turi::gl_sarray *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 72)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 72);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94BC10;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 72) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 64);
  *a2 = *(_QWORD *)(a1 + 56);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::item_frequency_result>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_2185FCD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::item_frequency_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get_current@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 56);
  *a2 = &unk_24D94B7D8;
  a2[1] = &unk_24D930AB0;
  std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)(a2 + 2), v3 + 16);
  *a2 = &off_24D94C220;
  a2[1] = &unk_24D94C260;
  v4 = *(_QWORD *)(v3 + 64);
  a2[7] = &unk_24D92FF70;
  a2[8] = v4;
  a2[9] = &unk_24D9308D0;
  result = std::unordered_set<turi::flexible_type>::unordered_set((uint64_t)(a2 + 10), v3 + 80);
  v6 = *(_QWORD *)(v3 + 128);
  a2[15] = &unk_24D930060;
  a2[16] = v6;
  return result;
}

void sub_2185FCE8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v3;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

_QWORD *turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::item_frequency_result>::vector(a2, a1);
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  const char **v9;

  *(_QWORD *)&v8 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = (const char **)&v8;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v9);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sarray::operator=(a1 + 16, a2);
  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24D94BC90;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_QWORD *)v4 + 4) = &unk_24D94C260;
  *((_QWORD *)v4 + 10) = &unk_24D92FF70;
  *((_QWORD *)v4 + 12) = &unk_24D9308D0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = &unk_24D930060;
  *((_DWORD *)v4 + 34) = 1065353216;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)&v8 + 1) = v4;
  *((_QWORD *)v4 + 3) = &off_24D94C220;
  *(_QWORD *)&v8 = v4 + 24;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 56, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94BC10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94BC10;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD *v17[5];

  v17[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = 0xF0F0F0F0F0F0F0F1 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    if (v3 - 1 == a2)
      v11 = v9;
    else
      v11 = v10;
    turi::gl_sarray::range_iterator((turi::gl_sarray *)a1[1], v8, v11, v17);
    v16[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)v17);
    v16[1] = v12;
    v13 = turi::gl_sarray_range::end((turi::gl_sarray_range *)v17);
    v14 = v2 + 136 * a2;
    while (v16[0] != v13)
    {
      v15 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v15);
      turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v16);
    }
    turi::gl_sarray_range::~gl_sarray_range(v17);
  }
}

void sub_2185FD1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)va);
  _Unwind_Resume(a1);
}

void std::vector<turi::visualization::item_frequency_result>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 136;
      v7 = v4 - 136;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 136;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<turi::visualization::item_frequency_result>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 136 * a2;
    v6 = 136 * a2;
    v7 = v4 + 72;
    do
    {
      *(_OWORD *)(v7 - 24) = 0uLL;
      *(_OWORD *)(v7 - 8) = 0uLL;
      *(_OWORD *)(v7 - 40) = 0uLL;
      *(_OWORD *)(v7 - 56) = 0uLL;
      *(_DWORD *)(v7 - 24) = 1065353216;
      *(_QWORD *)(v7 - 72) = &off_24D94C220;
      *(_QWORD *)(v7 - 64) = &unk_24D94C260;
      *(_QWORD *)(v7 - 16) = &unk_24D92FF70;
      *(_QWORD *)v7 = &unk_24D9308D0;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = &unk_24D930060;
      *(_DWORD *)(v7 + 40) = 1065353216;
      *(_QWORD *)(v7 + 56) = 0;
      v7 += 136;
      v6 -= 136;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2185FD34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::item_frequency_result>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::item_frequency_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::item_frequency_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::item_frequency_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::summary_view_transformation,std::allocator<turi::visualization::summary_view_transformation>,turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long,void>@<X0>(uint64_t a1@<X1>, __int128 **a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<turi::visualization::summary_view_transformation>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long,std::allocator<turi::visualization::summary_view_transformation>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_2185FD41C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::summary_view_transformation>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long,std::allocator<turi::visualization::summary_view_transformation>,0>(_QWORD *a1, uint64_t a2, __int128 **a3, uint64_t a4, _QWORD *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_24D94BCE0;
  a1[1] = 0;
  std::allocator<turi::visualization::summary_view_transformation>::construct[abi:ne180100]<turi::visualization::summary_view_transformation,turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_2185FD488(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::summary_view_transformation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BCE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::summary_view_transformation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BCE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::summary_view_transformation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::visualization::summary_view_transformation>::construct[abi:ne180100]<turi::visualization::summary_view_transformation,turi::visualization::transformation_collection &,std::vector<std::string> &,std::vector<turi::flex_type_enum> &,unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4, uint64_t a5, _QWORD *a6)
{
  void *__p;
  void *v11;
  uint64_t v12;
  std::string v13;
  std::string *v14;

  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&__p, *(const void **)a5, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 8) - *(_QWORD *)a5);
  turi::visualization::summary_view_transformation::summary_view_transformation(a2, a3, &v13, &__p, *a6);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  v14 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_2185FD5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v13 - 40) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long,void>(uint64_t a1@<X1>, uint64_t *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long,std::allocator<turi::visualization::Plot>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_2185FD63C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long,std::allocator<turi::visualization::Plot>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D919E90;
  a1[1] = 0;
  std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2185FD6A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a4[1];
  v11 = *a4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  turi::visualization::Plot::Plot(a2, a3, &v11, (double)*a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2185FD74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_columnwise_summary_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

BOOL turi::visualization::is_system_dark_mode(turi::visualization *this)
{
  CFPropertyListRef v1;
  const void *v2;
  _BOOL8 v3;

  v1 = CFPreferencesCopyValue(CFSTR("AppleInterfaceStyle"), (CFStringRef)*MEMORY[0x24BDBD568], (CFStringRef)*MEMORY[0x24BDBD590], (CFStringRef)*MEMORY[0x24BDBD570]);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFEqual(v1, CFSTR("Dark")) != 0;
  CFRelease(v2);
  return v3;
}

uint64_t _GLOBAL__sub_I_dark_mode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::string *turi::visualization::escape_float@<X0>(double __val@<D0>, std::string *retstr@<X8>)
{
  char *v3;

  if (fabs(__val) != INFINITY)
    return std::to_string(retstr, __val);
  if (__val <= 0.0)
    v3 = "\"-inf\"";
  else
    v3 = "\"inf\"";
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v3);
}

uint64_t turi::visualization::escape_image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  std::string::size_type v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::string::size_type v43;
  void *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::string::size_type v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unsigned int v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  _QWORD *v90;
  uint64_t v91;
  std::string *v92;
  __int128 v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  __int128 v124;
  unsigned int *v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  const turi::flexible_type *v130;
  void *v131;
  __int128 v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int *v135;
  unsigned int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  unsigned int v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  void *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  unsigned int v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t image_data;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  void **v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t result;
  void *__p[2];
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  _QWORD v218[2];
  _QWORD v219[11];
  char v220;
  uint64_t v221;
  std::string *v222;
  _BYTE v223[13];
  __int128 v224;
  char v225;
  std::string v226;
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v218);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)((char *)&v224 + 5) = 0x800000000000000;
  *(_QWORD *)&v224 = 0;
  v9 = operator new();
  *(_QWORD *)v9 = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 64) = 3;
  *(_QWORD *)&v224 = v9;
  *(_QWORD *)v9 = 1;
  if (*(_QWORD *)v9 != 1)
  {
    v10 = operator new();
    v11 = v224;
    *(_QWORD *)v10 = *(_QWORD *)v224;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 16) = v12;
    if (v12)
    {
      v13 = (unsigned int *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_OWORD *)(v11 + 24);
    v16 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 40) = v16;
    *(_OWORD *)(v10 + 24) = v15;
    *(_QWORD *)&v224 = v10;
    *(_QWORD *)v10 = 1;
    do
    {
      v17 = __ldaxr((unint64_t *)v9);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unint64_t *)v9));
    if (!v18)
    {
      boost::detail::shared_count::~shared_count((unsigned int **)(v9 + 16));
      MEMORY[0x219A19A08](v9, 0x1030C40F1F0227BLL);
    }
  }
  v19 = v224;
  boost::shared_ptr<char []>::operator=((__int128 *)(v224 + 8), (uint64_t *)a1);
  v21 = *(_OWORD *)(a1 + 32);
  v20 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v19 + 40) = v21;
  *(_OWORD *)(v19 + 56) = v20;
  turi::image_util::resize_image((turi::image_util *)&v224, (const turi::flexible_type *)(int)((double)v8 / (double)v7 * (double)(unint64_t)a2), a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56) == 2, 0, (uint64_t)&v226);
  switch(v226.__r_.__value_.__s.__data_[12])
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_16;
    case 2:
      if (*(char *)(v226.__r_.__value_.__r.__words[0] + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v226.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v226.__r_.__value_.__r.__words[0] + 8);
        *(_QWORD *)&v211 = *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 24);
        *(_OWORD *)__p = v23;
      }
      turi::flexible_type_fail(0);
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = 3;
      if ((SBYTE7(v211) & 0x80000000) == 0)
        goto LABEL_27;
      v22 = __p[0];
      break;
    case 3:
      __p[1] = 0;
      *(_QWORD *)&v211 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v226.__r_.__value_.__r.__words[0] + 8), *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 8)) >> 3);
      turi::flexible_type_fail(0);
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = 3;
      v22 = __p[0];
      if (!__p[0])
        goto LABEL_27;
      __p[1] = __p[0];
      break;
    case 4:
      __p[1] = 0;
      *(_QWORD *)&v211 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v226.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v226.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 8)) >> 4);
      turi::flexible_type_fail(0);
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = 3;
      *(_QWORD *)v223 = __p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
      goto LABEL_27;
    case 5:
      __p[1] = 0;
      *(_QWORD *)&v211 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v226.__r_.__value_.__r.__words[0] + 8), *(uint64_t **)(v226.__r_.__value_.__r.__words[0] + 16), (uint64_t)(*(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16)- *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 8)) >> 5);
      turi::flexible_type_fail(0);
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = 3;
      *(_QWORD *)v223 = __p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
      goto LABEL_27;
    case 7:
LABEL_16:
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      *(_QWORD *)&v217 = 0;
      *((_QWORD *)&v217 + 1) = 3;
      goto LABEL_27;
    case 8:
      v24 = v226.__r_.__value_.__r.__words[0];
      v25 = *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16);
      *(_QWORD *)&v214 = *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 8);
      *((_QWORD *)&v214 + 1) = v25;
      if (v25)
      {
        v26 = (unsigned int *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(_OWORD *)(v24 + 24);
      v29 = *(_OWORD *)(v24 + 56);
      v216 = *(_OWORD *)(v24 + 40);
      v217 = v29;
      v215 = v28;
      goto LABEL_27;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(v226.__r_.__value_.__r.__words[0] + 8, (turi::image_type *)&v214);
      goto LABEL_27;
    default:
      result = turi::flexible_type_fail(0);
LABEL_272:
      __break(1u);
      return result;
  }
  operator delete(v22);
LABEL_27:
  switch(v226.__r_.__value_.__s.__data_[12])
  {
    case 2:
      v30 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v226.__r_.__value_.__r.__words[0] + 31) < 0)
            operator delete(*(void **)(v226.__r_.__value_.__r.__words[0] + 8));
          v34 = v33;
          v35 = 0x1012C404EF22A49;
          goto LABEL_62;
        }
      }
      break;
    case 3:
      v46 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v49 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          v50 = *(void **)(v226.__r_.__value_.__r.__words[0] + 8);
          if (v50)
          {
            *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 16) = v50;
            operator delete(v50);
          }
          v34 = v49;
          v35 = 0x1080C409938AC02;
          goto LABEL_62;
        }
      }
      break;
    case 4:
      v36 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          __p[0] = (void *)(v226.__r_.__value_.__r.__words[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_61;
        }
      }
      break;
    case 5:
      v51 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v39 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          __p[0] = (void *)(v226.__r_.__value_.__r.__words[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_61:
          v34 = v39;
          v35 = 0x1020C405E66F15BLL;
          goto LABEL_62;
        }
      }
      break;
    case 8:
      v54 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v226.__r_.__value_.__r.__words[0] + 16));
          MEMORY[0x219A19A08](v57, 0x1030C40F1F0227BLL);
        }
        v226.__r_.__value_.__r.__words[0] = 0;
      }
      break;
    case 9:
      v40 = (unint64_t *)v226.__r_.__value_.__r.__words[0];
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        v43 = v226.__r_.__value_.__r.__words[0];
        if (v226.__r_.__value_.__r.__words[0])
        {
          v44 = *(void **)(v226.__r_.__value_.__r.__words[0] + 48);
          if (v44)
          {
            *(_QWORD *)(v226.__r_.__value_.__r.__words[0] + 56) = v44;
            operator delete(v44);
          }
          v45 = *(void **)(v43 + 24);
          if (v45)
          {
            *(_QWORD *)(v43 + 32) = v45;
            operator delete(v45);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v43 + 8);
          v34 = v43;
          v35 = 0x1030C407B73B9F7;
LABEL_62:
          MEMORY[0x219A19A08](v34, v35);
        }
      }
      break;
    default:
      break;
  }
  v226.__r_.__value_.__r.__words[0] = 0;
  LODWORD(v226.__r_.__value_.__r.__words[1]) = 0;
  v226.__r_.__value_.__s.__data_[12] = 0;
  switch(BYTE12(v224))
  {
    case 2:
      v58 = (unint64_t *)v224;
      do
      {
        v59 = __ldaxr(v58);
        v60 = v59 - 1;
      }
      while (__stlxr(v60, v58));
      if (!v60)
      {
        v61 = v224;
        if ((_QWORD)v224)
        {
          if (*(char *)(v224 + 31) < 0)
            operator delete(*(void **)(v224 + 8));
          v62 = v61;
          v63 = 0x1012C404EF22A49;
          goto LABEL_110;
        }
      }
      break;
    case 3:
      v75 = (unint64_t *)v224;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        v78 = v224;
        if ((_QWORD)v224)
        {
          v79 = *(void **)(v224 + 8);
          if (v79)
          {
            *(_QWORD *)(v224 + 16) = v79;
            operator delete(v79);
          }
          v62 = v78;
          v63 = 0x1080C409938AC02;
          goto LABEL_110;
        }
      }
      break;
    case 4:
      v64 = (unint64_t *)v224;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v224;
        if ((_QWORD)v224)
        {
          __p[0] = (void *)(v224 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_103;
        }
      }
      break;
    case 5:
      v80 = (unint64_t *)v224;
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        v67 = v224;
        if ((_QWORD)v224)
        {
          __p[0] = (void *)(v224 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_103:
          v62 = v67;
          v63 = 0x1020C405E66F15BLL;
          goto LABEL_110;
        }
      }
      break;
    case 8:
      v83 = (unint64_t *)v224;
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        v86 = v224;
        if ((_QWORD)v224)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224 + 16));
          v62 = v86;
          v74 = -235920773;
          goto LABEL_109;
        }
      }
      break;
    case 9:
      v68 = (unint64_t *)v224;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v71 = v224;
        if ((_QWORD)v224)
        {
          v72 = *(void **)(v224 + 48);
          if (v72)
          {
            *(_QWORD *)(v224 + 56) = v72;
            operator delete(v72);
          }
          v73 = *(void **)(v71 + 24);
          if (v73)
          {
            *(_QWORD *)(v71 + 32) = v73;
            operator delete(v73);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v71 + 8);
          v62 = v71;
          v74 = 2071181815;
LABEL_109:
          v63 = v74 | 0x1030C4000000000;
LABEL_110:
          MEMORY[0x219A19A08](v62, v63);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v223[5] = 0x800000000000000;
  *(_QWORD *)v223 = 0;
  v87 = operator new();
  v88 = v87;
  *(_QWORD *)v87 = 0;
  *(_OWORD *)(v87 + 8) = 0u;
  v89 = (void **)(v87 + 8);
  *(_OWORD *)(v87 + 24) = 0u;
  *(_OWORD *)(v87 + 40) = 0u;
  *(_QWORD *)(v87 + 56) = 0;
  *(_QWORD *)(v87 + 64) = 3;
  *(_QWORD *)v223 = v87;
  *(_QWORD *)v87 = 1;
  switch(v223[12])
  {
    case 2:
      if (*(_QWORD *)v87 != 1)
      {
        v90 = (_QWORD *)operator new();
        v91 = *(_QWORD *)v223;
        *v90 = **(_QWORD **)v223;
        v92 = (std::string *)(v90 + 1);
        if (*(char *)(v91 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v92, *(const std::string::value_type **)(v91 + 8), *(_QWORD *)(v91 + 16));
        }
        else
        {
          v93 = *(_OWORD *)(v91 + 8);
          v90[3] = *(_QWORD *)(v91 + 24);
          *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
        }
        *(_QWORD *)v223 = v90;
        *v90 = 1;
        do
        {
          v121 = __ldaxr((unint64_t *)v88);
          v122 = v121 - 1;
        }
        while (__stlxr(v122, (unint64_t *)v88));
        if (!v122)
        {
          v98 = 0x1012C404EF22A49;
          if ((*(char *)(v88 + 31) & 0x80000000) == 0)
            goto LABEL_151;
          v107 = *v89;
          goto LABEL_150;
        }
      }
      break;
    case 3:
      if (*(_QWORD *)v87 != 1)
      {
        v103 = (_QWORD *)operator new();
        v104 = *(_QWORD *)v223;
        *v103 = **(_QWORD **)v223;
        v103[2] = 0;
        v103[3] = 0;
        v103[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v103 + 1, *(const void **)(v104 + 8), *(_QWORD *)(v104 + 16), (uint64_t)(*(_QWORD *)(v104 + 16) - *(_QWORD *)(v104 + 8)) >> 3);
        *(_QWORD *)v223 = v103;
        *v103 = 1;
        do
        {
          v105 = __ldaxr((unint64_t *)v88);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, (unint64_t *)v88));
        if (!v106)
        {
          v98 = 0x1080C409938AC02;
          v107 = *v89;
          if (*v89)
          {
            *(_QWORD *)(v88 + 16) = v107;
LABEL_150:
            operator delete(v107);
          }
          goto LABEL_151;
        }
      }
      break;
    case 4:
      if (*(_QWORD *)v87 != 1)
      {
        v94 = (_QWORD *)operator new();
        v95 = *(_QWORD *)v223;
        *v94 = **(_QWORD **)v223;
        v94[2] = 0;
        v94[3] = 0;
        v94[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v94 + 1, *(uint64_t **)(v95 + 8), *(uint64_t **)(v95 + 16), (uint64_t)(*(_QWORD *)(v95 + 16) - *(_QWORD *)(v95 + 8)) >> 4);
        *(_QWORD *)v223 = v94;
        *v94 = 1;
        do
        {
          v96 = __ldaxr((unint64_t *)v88);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, (unint64_t *)v88));
        if (!v97)
        {
          v98 = 0x1020C405E66F15BLL;
          v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
          goto LABEL_151;
        }
      }
      break;
    case 5:
      if (*(_QWORD *)v87 != 1)
      {
        v108 = (_QWORD *)operator new();
        v109 = *(_QWORD *)v223;
        *v108 = **(_QWORD **)v223;
        v108[2] = 0;
        v108[3] = 0;
        v108[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v108 + 1, *(uint64_t **)(v109 + 8), *(uint64_t **)(v109 + 16), (uint64_t)(*(_QWORD *)(v109 + 16) - *(_QWORD *)(v109 + 8)) >> 5);
        *(_QWORD *)v223 = v108;
        *v108 = 1;
        do
        {
          v110 = __ldaxr((unint64_t *)v88);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, (unint64_t *)v88));
        if (!v111)
        {
          v98 = 0x1020C405E66F15BLL;
          v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
          goto LABEL_151;
        }
      }
      break;
    case 8:
      if (*(_QWORD *)v87 != 1)
      {
        v112 = operator new();
        v113 = *(_QWORD *)v223;
        *(_QWORD *)v112 = **(_QWORD **)v223;
        *(_QWORD *)(v112 + 8) = *(_QWORD *)(v113 + 8);
        v114 = *(_QWORD *)(v113 + 16);
        *(_QWORD *)(v112 + 16) = v114;
        if (v114)
        {
          v115 = (unsigned int *)(v114 + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        v117 = *(_OWORD *)(v113 + 24);
        v118 = *(_OWORD *)(v113 + 40);
        *(_OWORD *)(v112 + 56) = *(_OWORD *)(v113 + 56);
        *(_OWORD *)(v112 + 40) = v118;
        *(_OWORD *)(v112 + 24) = v117;
        *(_QWORD *)v223 = v112;
        *(_QWORD *)v112 = 1;
        do
        {
          v119 = __ldaxr((unint64_t *)v88);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, (unint64_t *)v88));
        if (!v120)
        {
          v98 = 0x1030C40F1F0227BLL;
          boost::detail::shared_count::~shared_count((unsigned int **)(v88 + 16));
          goto LABEL_151;
        }
      }
      break;
    case 9:
      if (*(_QWORD *)v87 != 1)
      {
        v99 = (_QWORD *)operator new();
        v100 = *(_QWORD *)v223 + 8;
        *v99 = **(_QWORD **)v223;
        turi::flexible_type_impl::ndarray<double>::ndarray(v99 + 1, v100);
        *(_QWORD *)v223 = v99;
        *v99 = 1;
        do
        {
          v101 = __ldaxr((unint64_t *)v88);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, (unint64_t *)v88));
        if (!v102)
        {
          v98 = 0x1030C407B73B9F7;
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v88);
LABEL_151:
          MEMORY[0x219A19A08](v88, v98);
        }
      }
      break;
    default:
      break;
  }
  v123 = *(_QWORD *)v223;
  v124 = v214;
  if (*((_QWORD *)&v214 + 1))
  {
    v125 = (unsigned int *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = *(_OWORD *)(v123 + 8);
  *(_OWORD *)(v123 + 8) = v124;
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v127;
  boost::detail::shared_count::~shared_count((unsigned int **)&v226.__r_.__value_.__l.__size_);
  v128 = v215;
  v129 = v216;
  *(_OWORD *)(v123 + 56) = v217;
  *(_OWORD *)(v123 + 40) = v129;
  *(_OWORD *)(v123 + 24) = v128;
  turi::image_util::encode_image((uint64_t)v223, v130, (uint64_t *)&v224);
  switch(BYTE12(v224))
  {
    case 0:
    case 1:
    case 6:
      turi::flexible_type_fail(0);
      goto LABEL_162;
    case 2:
      if (*(char *)(v224 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v226, *(const std::string::value_type **)(v224 + 8), *(_QWORD *)(v224 + 16));
      }
      else
      {
        v132 = *(_OWORD *)(v224 + 8);
        v226.__r_.__value_.__r.__words[2] = *(_QWORD *)(v224 + 24);
        *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v132;
      }
      turi::flexible_type_fail(0);
      v211 = 0u;
      v212 = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = 3;
      if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      v131 = (void *)v226.__r_.__value_.__r.__words[0];
      goto LABEL_172;
    case 3:
      memset(&v226, 0, sizeof(v226));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v226, *(const void **)(v224 + 8), *(_QWORD *)(v224 + 16), (uint64_t)(*(_QWORD *)(v224 + 16) - *(_QWORD *)(v224 + 8)) >> 3);
      turi::flexible_type_fail(0);
      v211 = 0u;
      v212 = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = 3;
      v131 = (void *)v226.__r_.__value_.__r.__words[0];
      if (!v226.__r_.__value_.__r.__words[0])
        break;
      v226.__r_.__value_.__l.__size_ = v226.__r_.__value_.__r.__words[0];
LABEL_172:
      operator delete(v131);
      break;
    case 4:
      memset(&v226, 0, sizeof(v226));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v226, *(uint64_t **)(v224 + 8), *(uint64_t **)(v224 + 16), (uint64_t)(*(_QWORD *)(v224 + 16) - *(_QWORD *)(v224 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v211 = 0u;
      v212 = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = 3;
      v222 = &v226;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
      break;
    case 5:
      memset(&v226, 0, sizeof(v226));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v226, *(uint64_t **)(v224 + 8), *(uint64_t **)(v224 + 16), (uint64_t)(*(_QWORD *)(v224 + 16) - *(_QWORD *)(v224 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v211 = 0u;
      v212 = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = 3;
      v222 = &v226;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
      break;
    case 7:
LABEL_162:
      v211 = 0u;
      v212 = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)&v213 = 0;
      *((_QWORD *)&v213 + 1) = 3;
      break;
    case 8:
      v133 = v224;
      v134 = *(unsigned int **)(v224 + 16);
      __p[0] = *(void **)(v224 + 8);
      __p[1] = v134;
      if (v134)
      {
        v135 = v134 + 2;
        do
          v136 = __ldxr(v135);
        while (__stxr(v136 + 1, v135));
      }
      v137 = *(_OWORD *)(v133 + 24);
      v138 = *(_OWORD *)(v133 + 56);
      v212 = *(_OWORD *)(v133 + 40);
      v213 = v138;
      v211 = v137;
      break;
    case 9:
      turi::flexible_type_impl::get_img_visitor::operator()(v224 + 8, (turi::image_type *)__p);
      break;
    default:
      result = turi::flexible_type_fail(0);
      goto LABEL_272;
  }
  v139 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v140 = v214;
  v214 = v139;
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v140;
  boost::detail::shared_count::~shared_count((unsigned int **)&v226.__r_.__value_.__l.__size_);
  v215 = v211;
  v216 = v212;
  v217 = v213;
  boost::detail::shared_count::~shared_count((unsigned int **)&__p[1]);
  switch(BYTE12(v224))
  {
    case 2:
      v141 = (unint64_t *)v224;
      do
      {
        v142 = __ldaxr(v141);
        v143 = v142 - 1;
      }
      while (__stlxr(v143, v141));
      if (!v143)
      {
        v144 = v224;
        if ((_QWORD)v224)
        {
          if (*(char *)(v224 + 31) < 0)
            operator delete(*(void **)(v224 + 8));
          v145 = v144;
          v146 = 0x1012C404EF22A49;
          goto LABEL_214;
        }
      }
      break;
    case 3:
      v158 = (unint64_t *)v224;
      do
      {
        v159 = __ldaxr(v158);
        v160 = v159 - 1;
      }
      while (__stlxr(v160, v158));
      if (!v160)
      {
        v161 = v224;
        if ((_QWORD)v224)
        {
          v162 = *(void **)(v224 + 8);
          if (v162)
          {
            *(_QWORD *)(v224 + 16) = v162;
            operator delete(v162);
          }
          v145 = v161;
          v146 = 0x1080C409938AC02;
          goto LABEL_214;
        }
      }
      break;
    case 4:
      v147 = (unint64_t *)v224;
      do
      {
        v148 = __ldaxr(v147);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v147));
      if (!v149)
      {
        v150 = v224;
        if ((_QWORD)v224)
        {
          v226.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
          goto LABEL_207;
        }
      }
      break;
    case 5:
      v163 = (unint64_t *)v224;
      do
      {
        v164 = __ldaxr(v163);
        v165 = v164 - 1;
      }
      while (__stlxr(v165, v163));
      if (!v165)
      {
        v150 = v224;
        if ((_QWORD)v224)
        {
          v226.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
LABEL_207:
          v145 = v150;
          v146 = 0x1020C405E66F15BLL;
          goto LABEL_214;
        }
      }
      break;
    case 8:
      v166 = (unint64_t *)v224;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v169 = v224;
        if ((_QWORD)v224)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224 + 16));
          v145 = v169;
          v157 = -235920773;
          goto LABEL_213;
        }
      }
      break;
    case 9:
      v151 = (unint64_t *)v224;
      do
      {
        v152 = __ldaxr(v151);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, v151));
      if (!v153)
      {
        v154 = v224;
        if ((_QWORD)v224)
        {
          v155 = *(void **)(v224 + 48);
          if (v155)
          {
            *(_QWORD *)(v224 + 56) = v155;
            operator delete(v155);
          }
          v156 = *(void **)(v154 + 24);
          if (v156)
          {
            *(_QWORD *)(v154 + 32) = v156;
            operator delete(v156);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v154 + 8);
          v145 = v154;
          v157 = 2071181815;
LABEL_213:
          v146 = v157 | 0x1030C4000000000;
LABEL_214:
          MEMORY[0x219A19A08](v145, v146);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)&v224 = 0;
  DWORD2(v224) = 0;
  BYTE12(v224) = 0;
  switch(v223[12])
  {
    case 2:
      v170 = *(unint64_t **)v223;
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        v173 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          if (*(char *)(*(_QWORD *)v223 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v223 + 8));
          v174 = v173;
          v175 = 0x1012C404EF22A49;
          goto LABEL_256;
        }
      }
      break;
    case 3:
      v187 = *(unint64_t **)v223;
      do
      {
        v188 = __ldaxr(v187);
        v189 = v188 - 1;
      }
      while (__stlxr(v189, v187));
      if (!v189)
      {
        v190 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          v191 = *(void **)(*(_QWORD *)v223 + 8);
          if (v191)
          {
            *(_QWORD *)(*(_QWORD *)v223 + 16) = v191;
            operator delete(v191);
          }
          v174 = v190;
          v175 = 0x1080C409938AC02;
          goto LABEL_256;
        }
      }
      break;
    case 4:
      v176 = *(unint64_t **)v223;
      do
      {
        v177 = __ldaxr(v176);
        v178 = v177 - 1;
      }
      while (__stlxr(v178, v176));
      if (!v178)
      {
        v179 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          v226.__r_.__value_.__r.__words[0] = *(_QWORD *)v223 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
          goto LABEL_249;
        }
      }
      break;
    case 5:
      v192 = *(unint64_t **)v223;
      do
      {
        v193 = __ldaxr(v192);
        v194 = v193 - 1;
      }
      while (__stlxr(v194, v192));
      if (!v194)
      {
        v179 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          v226.__r_.__value_.__r.__words[0] = *(_QWORD *)v223 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
LABEL_249:
          v174 = v179;
          v175 = 0x1020C405E66F15BLL;
          goto LABEL_256;
        }
      }
      break;
    case 8:
      v195 = *(unint64_t **)v223;
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        v198 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v223 + 16));
          v174 = v198;
          v186 = -235920773;
          goto LABEL_255;
        }
      }
      break;
    case 9:
      v180 = *(unint64_t **)v223;
      do
      {
        v181 = __ldaxr(v180);
        v182 = v181 - 1;
      }
      while (__stlxr(v182, v180));
      if (!v182)
      {
        v183 = *(_QWORD *)v223;
        if (*(_QWORD *)v223)
        {
          v184 = *(void **)(*(_QWORD *)v223 + 48);
          if (v184)
          {
            *(_QWORD *)(*(_QWORD *)v223 + 56) = v184;
            operator delete(v184);
          }
          v185 = *(void **)(v183 + 24);
          if (v185)
          {
            *(_QWORD *)(v183 + 32) = v185;
            operator delete(v185);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v183 + 8);
          v174 = v183;
          v186 = 2071181815;
LABEL_255:
          v175 = v186 | 0x1030C4000000000;
LABEL_256:
          MEMORY[0x219A19A08](v174, v175);
        }
      }
      break;
    default:
      break;
  }
  image_data = turi::image_type::get_image_data((turi::image_type *)&v214);
  v200 = *((_QWORD *)&v216 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"{\"width\": ", 10);
  v201 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\"height\": ", 10);
  v202 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\"idx\": ", 7);
  v203 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)", ", 2);
  v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\"column\": ", 10);
  turi::visualization::extra_label_escape(a4, 1, (uint64_t)__p);
  if ((SBYTE7(v211) & 0x80u) == 0)
    v205 = __p;
  else
    v205 = (void **)__p[0];
  if ((SBYTE7(v211) & 0x80u) == 0)
    v206 = BYTE7(v211);
  else
    v206 = (uint64_t)__p[1];
  v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)v205, v206);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)", ", 2);
  if (SBYTE7(v211) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\"data\": \"", 9);
  v226.__r_.__value_.__r.__words[0] = image_data;
  LOWORD(v226.__r_.__value_.__r.__words[1]) = 0;
  v226.__r_.__value_.__s.__data_[10] = 0;
  HIDWORD(v226.__r_.__value_.__r.__words[1]) = 0;
  v226.__r_.__value_.__s.__data_[16] = 0;
  *(_QWORD *)&v224 = image_data + v200;
  WORD4(v224) = 0;
  BYTE10(v224) = 0;
  HIDWORD(v224) = 0;
  v225 = 0;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>,0>((uint64_t *)&v226, (uint64_t *)&v224, (uint64_t)v219, 0, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\", \"format\": \"", 14);
  if (*((_QWORD *)&v217 + 1) < 4uLL)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)off_24D94BD70[*((_QWORD *)&v217 + 1)], qword_21872F2B8[*((_QWORD *)&v217 + 1)]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"\"}", 2);
  std::stringbuf::str();
  boost::detail::shared_count::~shared_count((unsigned int **)&v214 + 1);
  v218[0] = *MEMORY[0x24BEDB7F0];
  v208 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v218 + *(_QWORD *)(v218[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v219[0] = v208;
  v219[1] = MEMORY[0x24BEDB848] + 16;
  if (v220 < 0)
    operator delete((void *)v219[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v221);
}

void sub_2185FECA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;

  MEMORY[0x219A19A08](v28, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v29 - 180))
  {
    case 2:
      v31 = *(unint64_t **)(v29 - 192);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(_QWORD *)(v29 - 192);
        if (v34)
        {
          if (*(char *)(v34 + 31) < 0)
            operator delete(*(void **)(v34 + 8));
          MEMORY[0x219A19A08](v34, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v45 = *(unint64_t **)(v29 - 192);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_40;
      v48 = *(_QWORD **)(v29 - 192);
      if (!v48)
        goto LABEL_39;
      v49 = (void *)v48[1];
      if (v49)
      {
        v48[2] = v49;
        operator delete(v49);
      }
      v43 = v48;
      v50 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v35 = *(unint64_t **)(v29 - 192);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_40;
      v38 = *(_QWORD **)(v29 - 192);
      if (!v38)
        goto LABEL_39;
      *(_QWORD *)(v29 - 144) = v38 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
      goto LABEL_31;
    case 5:
      v51 = *(unint64_t **)(v29 - 192);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (v53)
        goto LABEL_40;
      v38 = *(_QWORD **)(v29 - 192);
      if (!v38)
        goto LABEL_39;
      *(_QWORD *)(v29 - 144) = v38 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
LABEL_31:
      v43 = v38;
      v50 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v54 = *(unint64_t **)(v29 - 192);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_40;
      v57 = *(_QWORD *)(v29 - 192);
      if (!v57)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v57 + 16));
      v43 = (_QWORD *)v57;
      v44 = -235920773;
      goto LABEL_37;
    case 9:
      v39 = *(unint64_t **)(v29 - 192);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_40;
      v42 = *(_QWORD **)(v29 - 192);
      if (!v42)
        goto LABEL_39;
      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v42);
      v44 = 2071181815;
LABEL_37:
      v50 = v44 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v43, v50);
LABEL_39:
      *(_QWORD *)(v29 - 192) = 0;
LABEL_40:
      boost::detail::shared_count::~shared_count((unsigned int **)&a21);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

void turi::visualization::extra_label_escape(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  std::string v12;
  __int128 v13;
  uint64_t v14;

  turi::visualization::escape_string(a1, a2, (std::string *)a3);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v12 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v10, "\\n");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\\n");
  turi::visualization::replace_all(&v12, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v13);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v7 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v10, "\\t");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\\t");
  turi::visualization::replace_all(&v7, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v13);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v6 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v10, "\\b");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\\b");
  turi::visualization::replace_all(&v6, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v13);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v5 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v10, "\\r");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\\r");
  turi::visualization::replace_all(&v5, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v13);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v4 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(v10, "\\x");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\\x");
  turi::visualization::replace_all(&v4, (uint64_t)v10, (uint64_t)__p, (uint64_t)&v13);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_2185FFAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 + 23) < 0)
    operator delete(*(void **)v42);
  _Unwind_Resume(exception_object);
}

uint64_t turi::visualization::escapeForTable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  const char *v23;
  uint64_t v24;
  double v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::string::size_type v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  void *v58;
  void *v59;
  unsigned int v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::string::size_type v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::string::size_type v72;
  double v73;
  turi::flexible_type_impl *v74;
  std::string::size_type v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  std::string *v80;
  std::string::size_type v81;
  void **v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  double v90;
  __int128 v91;
  int v92;
  int v93;
  int v94;
  std::string *v95;
  std::string::size_type size;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::string *v105;
  std::string::size_type v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  std::string *v127;
  std::string::size_type v128;
  std::string *v129;
  __int128 v130;
  uint64_t v131;
  unsigned int *v132;
  std::string::size_type v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t result;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  unsigned int *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  unsigned int *v150[2];
  unsigned int *v151;
  std::string v152;
  unsigned int *v153;
  unsigned int *v154;
  void *v155[2];
  _QWORD v156[11];
  char v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  std::string v161;
  void *__p[2];
  void *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void *v168;
  char v169;
  uint64_t v170;
  std::string v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  if ((v6 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    std::string::basic_string[abi:ne180100]<0>(v155, "");
    std::string::basic_string[abi:ne180100]<0>(&v161, "");
    std::string::basic_string[abi:ne180100]<0>(&v171, "");
    boost::date_time::time_zone_names_base<char>::time_zone_names_base((std::string *)&turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_timezone, (__int128 *)__p, (__int128 *)v155, (__int128 *)&v161, (__int128 *)&v171);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v156[0]) < 0)
      operator delete(v155[0]);
    if (SHIBYTE(v163) < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))boost::date_time::time_zone_names_base<char>::~time_zone_names_base, &turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_timezone, &dword_217E69000);
  }
  if ((v7 & 1) == 0
  {
    turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_utc_offset = 0;
  }
  if ((v8 & 1) == 0
  {
    turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_adj_offsets = 0;
    *(_QWORD *)algn_254FF5B18 = 0;
    qword_254FF5B20 = 0;
  }
  if ((v9 & 1) == 0
  {
    v139 = operator new();
    v159 = 0;
    v160 = 0;
    boost::local_time::custom_time_zone_base<char>::custom_time_zone_base(v139, (__int128 *)&turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_timezone, &turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_utc_offset, &turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_adj_offsets, &v159);
    boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::custom_time_zone_base<char>>(&turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_tz, v139);
    boost::detail::shared_count::~shared_count(&v160);
    __cxa_atexit((void (*)(void *))boost::filesystem::directory_iterator::~directory_iterator, &turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_tz, &dword_217E69000);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v155);
  v10 = MEMORY[0x24BEDB7F0];
  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_169;
    case 1:
      v22 = *(double *)a1;
      if (fabs(*(double *)a1) == INFINITY)
      {
        if (v22 <= 0.0)
          v23 = "\"-inf\"";
        else
          v23 = "\"inf\"";
        if (v22 <= 0.0)
          v24 = 6;
        else
          v24 = 5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v23, v24);
        goto LABEL_260;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_169:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)__p);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v161;
      else
        v95 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        size = v161.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v95, size);
      goto LABEL_185;
    case 3:
      v11 = *(double *)a1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"[", 1);
      if (*(_QWORD *)(*(_QWORD *)&v11 + 16) != *(_QWORD *)(*(_QWORD *)&v11 + 8))
      {
        v12 = 0;
        do
        {
          std::ostream::operator<<();
          ++v12;
          v13 = *(_QWORD *)(*(_QWORD *)&v11 + 16) - *(_QWORD *)(*(_QWORD *)&v11 + 8);
          if (v12 < v13 >> 3)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)", ", 2);
            v13 = *(_QWORD *)(*(_QWORD *)&v11 + 16) - *(_QWORD *)(*(_QWORD *)&v11 + 8);
          }
        }
        while (v12 < v13 >> 3);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"]", 1);
      goto LABEL_260;
    case 4:
      v33 = *(double *)a1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"[", 1);
      v34 = *(_QWORD *)(*(_QWORD *)&v33 + 8);
      if (*(_QWORD *)(*(_QWORD *)&v33 + 16) != v34)
      {
        v35 = 0;
        do
        {
          v171.__r_.__value_.__r.__words[0] = 0;
          LODWORD(v171.__r_.__value_.__r.__words[1]) = 0;
          v171.__r_.__value_.__s.__data_[12] = 0;
          v36 = v34 + 16 * v35;
          *(std::string::size_type *)((char *)v171.__r_.__value_.__r.__words + 5) = *(_QWORD *)(v36 + 5);
          v171.__r_.__value_.__r.__words[0] = *(_QWORD *)v36;
          LODWORD(v36) = *(unsigned __int8 *)(v36 + 12);
          v171.__r_.__value_.__s.__data_[12] = v36;
          v37 = v36 > 9;
          v38 = (1 << v36) & 0x33C;
          if (!v37 && v38 != 0)
          {
            v40 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 + 1, v40));
          }
          std::string::basic_string[abi:ne180100]<0>(&v161, "");
          turi::visualization::escapeForTable(__p, &v171, -1, &v161);
          if (SHIBYTE(v163) >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          if (SHIBYTE(v163) >= 0)
            v43 = HIBYTE(v163);
          else
            v43 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v42, v43);
          if (SHIBYTE(v163) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v161.__r_.__value_.__l.__data_);
          if (++v35 < (uint64_t)(*(_QWORD *)(*(_QWORD *)&v33 + 16) - *(_QWORD *)(*(_QWORD *)&v33 + 8)) >> 4)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)", ", 2);
          switch(v171.__r_.__value_.__s.__data_[12])
          {
            case 2:
              v44 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v47 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(v171.__r_.__value_.__r.__words[0] + 31) < 0)
                    operator delete(*(void **)(v171.__r_.__value_.__r.__words[0] + 8));
                  v48 = v47;
                  v49 = 0x1012C404EF22A49;
                  goto LABEL_105;
                }
              }
              break;
            case 3:
              v61 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v62 = __ldaxr(v61);
                v63 = v62 - 1;
              }
              while (__stlxr(v63, v61));
              if (!v63)
              {
                v64 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  v65 = *(void **)(v171.__r_.__value_.__r.__words[0] + 8);
                  if (v65)
                  {
                    *(_QWORD *)(v171.__r_.__value_.__r.__words[0] + 16) = v65;
                    operator delete(v65);
                  }
                  v48 = v64;
                  v49 = 0x1080C409938AC02;
                  goto LABEL_105;
                }
              }
              break;
            case 4:
              v50 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v51 = __ldaxr(v50);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, v50));
              if (!v52)
              {
                v53 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  __p[0] = (void *)(v171.__r_.__value_.__r.__words[0] + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_98;
                }
              }
              break;
            case 5:
              v66 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v67 = __ldaxr(v66);
                v68 = v67 - 1;
              }
              while (__stlxr(v68, v66));
              if (!v68)
              {
                v53 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  __p[0] = (void *)(v171.__r_.__value_.__r.__words[0] + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_98:
                  v48 = v53;
                  v49 = 0x1020C405E66F15BLL;
                  goto LABEL_105;
                }
              }
              break;
            case 8:
              v69 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v72 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v171.__r_.__value_.__r.__words[0] + 16));
                  v48 = v72;
                  v60 = -235920773;
                  goto LABEL_104;
                }
              }
              break;
            case 9:
              v54 = (unint64_t *)v171.__r_.__value_.__r.__words[0];
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                v57 = v171.__r_.__value_.__r.__words[0];
                if (v171.__r_.__value_.__r.__words[0])
                {
                  v58 = *(void **)(v171.__r_.__value_.__r.__words[0] + 48);
                  if (v58)
                  {
                    *(_QWORD *)(v171.__r_.__value_.__r.__words[0] + 56) = v58;
                    operator delete(v58);
                  }
                  v59 = *(void **)(v57 + 24);
                  if (v59)
                  {
                    *(_QWORD *)(v57 + 32) = v59;
                    operator delete(v59);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v57 + 8);
                  v48 = v57;
                  v60 = 2071181815;
LABEL_104:
                  v49 = v60 | 0x1030C4000000000;
LABEL_105:
                  MEMORY[0x219A19A08](v48, v49);
                }
              }
              break;
            default:
              break;
          }
          v34 = *(_QWORD *)(*(_QWORD *)&v33 + 8);
        }
        while (v35 < (*(_QWORD *)(*(_QWORD *)&v33 + 16) - v34) >> 4);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"]", 1);
      v10 = MEMORY[0x24BEDB7F0];
      goto LABEL_260;
    case 5:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"{", 1);
      v73 = *(double *)a1;
      memset(&v161, 0, sizeof(v161));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v161, *(uint64_t **)(*(_QWORD *)&v73 + 8), *(uint64_t **)(*(_QWORD *)&v73 + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v73 + 16) - *(_QWORD *)(*(_QWORD *)&v73 + 8)) >> 5);
      v75 = v161.__r_.__value_.__l.__size_;
      v74 = (turi::flexible_type_impl *)v161.__r_.__value_.__r.__words[0];
      if (v161.__r_.__value_.__r.__words[0] != v161.__r_.__value_.__l.__size_)
      {
        v143 = (void *)*MEMORY[0x24BEDB7F0];
        v76 = 1;
        v141 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
        v142 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
        v140 = MEMORY[0x24BEDB848] + 16;
        do
        {
          switch(*((_BYTE *)v74 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              __p[0] = v143;
              *(void **)((char *)__p + *((_QWORD *)v143 - 3)) = v142;
              v163 = v141;
              v77 = v140;
              goto LABEL_119;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
              std::ostream::operator<<();
              std::stringbuf::str();
              __p[0] = v143;
              *(void **)((char *)__p + *((_QWORD *)v143 - 3)) = v142;
              v77 = MEMORY[0x24BEDB848] + 16;
              v163 = v141;
LABEL_119:
              v164 = (uint64_t *)v77;
              if (v169 < 0)
                operator delete(v168);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x219A198F4](&v170);
              break;
            case 2:
              v78 = *(_QWORD *)v74;
              if (*(char *)(*(_QWORD *)v74 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)(v78 + 8), *(_QWORD *)(v78 + 16));
              }
              else
              {
                v79 = *(_OWORD *)(v78 + 8);
                v152.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 + 24);
                *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v79;
              }
              break;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v74 + 8));
              break;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v74 + 8));
              break;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v74 + 8));
              break;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v74, &v152);
              break;
            case 7:
              memset(&v152, 0, sizeof(v152));
              break;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              break;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v74 + 8));
              break;
            default:
              result = turi::flexible_type_fail(0);
              goto LABEL_281;
          }
          turi::visualization::extra_label_escape((uint64_t *)&v152, 1, (uint64_t)&v171);
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &v171;
          else
            v80 = (std::string *)v171.__r_.__value_.__r.__words[0];
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          else
            v81 = v171.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v80, v81);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v152.__r_.__value_.__l.__data_);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)" : ", 3);
          std::string::basic_string[abi:ne180100]<0>(&v171, "");
          turi::visualization::escapeForTable(__p, (char *)v74 + 16, -1, &v171);
          if (SHIBYTE(v163) >= 0)
            v82 = __p;
          else
            v82 = (void **)__p[0];
          if (SHIBYTE(v163) >= 0)
            v83 = HIBYTE(v163);
          else
            v83 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v82, v83);
          if (SHIBYTE(v163) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          if (v76 < (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 5)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)", ", 2);
          v74 = (turi::flexible_type_impl *)((char *)v74 + 32);
          ++v76;
        }
        while (v74 != (turi::flexible_type_impl *)v75);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"}", 1);
      __p[0] = &v161;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v10 = MEMORY[0x24BEDB7F0];
      goto LABEL_260;
    case 6:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"\"", 1);
      v14 = *(uint64_t *)a1 >> 56;
      if ((int)v14 < 0)
        v15 = 25;
      else
        v15 = -25;
      if (v15 + (_DWORD)v14 == 64)
      {
        v16 = (void *)turi::flexible_type_impl::ptime_from_time_t((uint64_t)(*(_QWORD *)a1 << 8) >> 8, *(_DWORD *)(a1 + 8));
        v17 = (void *)turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_tz;
        v18 = *(void **)algn_254FF5B38;
        v149 = turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_tz;
        v150[0] = *(unsigned int **)algn_254FF5B38;
        if (*(_QWORD *)algn_254FF5B38)
        {
          v19 = (unsigned int *)(*(_QWORD *)algn_254FF5B38 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
          __p[0] = v16;
          __p[1] = v17;
          v163 = v18;
          do
            v21 = __ldxr(v19);
          while (__stxr(v21 + 1, v19));
        }
        else
        {
          __p[0] = v16;
          __p[1] = (void *)turi::visualization::escapeForTable(turi::flexible_type const&,unsigned long,std::string const&)::empty_tz;
          v163 = 0;
        }
        boost::detail::shared_count::~shared_count(v150);
        boost::local_time::operator<<<char,std::char_traits<char>>(v156, (uint64_t *)__p);
        boost::detail::shared_count::~shared_count((unsigned int **)&v163);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "0.");
        v92 = *(char *)(a1 + 7);
        if (v92 < 0)
          v93 = 25;
        else
          v93 = -25;
        if (v93 + v92 < 0)
        {
          MEMORY[0x219A19390](__p, "-0.");
          v94 = -15;
        }
        else
        {
          v94 = 15;
        }
        v124 = operator new();
        std::operator+<char>();
        v125 = *(char *)(a1 + 7);
        if (v125 < 0)
          v126 = 25;
        else
          v126 = -25;
        std::to_string(&v152, v94 * (v126 + v125));
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = &v152;
        else
          v127 = (std::string *)v152.__r_.__value_.__r.__words[0];
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v128 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        else
          v128 = v152.__r_.__value_.__l.__size_;
        v129 = std::string::append(&v171, (const std::string::value_type *)v127, v128);
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(v124, (uint64_t *)&v161);
        boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::posix_time_zone_base<char>>((uint64_t *)&v153, v124);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v152.__r_.__value_.__l.__data_);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v171.__r_.__value_.__l.__data_);
        v131 = turi::flexible_type_impl::ptime_from_time_t((uint64_t)(*(_QWORD *)a1 << 8) >> 8, *(_DWORD *)(a1 + 8));
        v133 = (std::string::size_type)v153;
        v132 = v154;
        v150[1] = v153;
        v151 = v154;
        if (v154)
        {
          v134 = v154 + 2;
          do
            v135 = __ldxr(v134);
          while (__stxr(v135 + 1, v134));
          v161.__r_.__value_.__r.__words[0] = v131;
          v161.__r_.__value_.__l.__size_ = v133;
          v161.__r_.__value_.__r.__words[2] = (std::string::size_type)v132;
          do
            v136 = __ldxr(v134);
          while (__stxr(v136 + 1, v134));
        }
        else
        {
          v161.__r_.__value_.__r.__words[0] = v131;
          *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = (unint64_t)v153;
        }
        boost::detail::shared_count::~shared_count(&v151);
        boost::local_time::operator<<<char,std::char_traits<char>>(v156, (uint64_t *)&v161);
        boost::detail::shared_count::~shared_count((unsigned int **)&v161.__r_.__value_.__r.__words[2]);
        boost::detail::shared_count::~shared_count(&v154);
        if (SHIBYTE(v163) < 0)
          operator delete(__p[0]);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"\"", 1);
      goto LABEL_260;
    case 7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"null", 4);
      goto LABEL_260;
    case 8:
      v25 = *(double *)a1;
      v26 = *(unsigned int **)(*(_QWORD *)a1 + 16);
      v144 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v145 = v26;
      if (v26)
      {
        v27 = v26 + 2;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(_OWORD *)(*(_QWORD *)&v25 + 24);
      v30 = *(_OWORD *)(*(_QWORD *)&v25 + 56);
      v147 = *(_OWORD *)(*(_QWORD *)&v25 + 40);
      v148 = v30;
      v146 = v29;
      turi::visualization::escape_image((uint64_t)&v144, 40, a2, a3);
      if (SHIBYTE(v163) >= 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if (SHIBYTE(v163) >= 0)
        v32 = HIBYTE(v163);
      else
        v32 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v31, v32);
      if (SHIBYTE(v163) < 0)
        operator delete(__p[0]);
      boost::detail::shared_count::~shared_count(&v145);
      goto LABEL_260;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)a1 + 8);
      v171.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(&v161, ((char *)v164 - (_BYTE *)v163) >> 3, &v171);
      v84 = (uint64_t *)v163;
      if (v164 == v163)
        goto LABEL_155;
      if (!__p[0])
        goto LABEL_155;
      v85 = 1;
      do
      {
        v86 = *v84++;
        v85 *= v86;
      }
      while (v84 != v164);
      if (!v85)
LABEL_155:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"[]", 2);
      v87 = (uint64_t *)v161.__r_.__value_.__l.__size_;
      if (v161.__r_.__value_.__l.__size_ == v161.__r_.__value_.__r.__words[0])
      {
        v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
      }
      else
      {
        v88 = 0;
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"[", 1);
          ++v88;
          v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
          v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
        }
        while (v88 < (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3);
      }
      while (2)
      {
        v99 = 0;
        if (v89 != v87)
        {
          v100 = v89 - v87;
          v101 = (uint64_t *)v165;
          if (v100 <= 1)
            v100 = 1;
          do
          {
            v103 = *v87++;
            v102 = v103;
            v104 = *v101++;
            v99 += v104 * v102;
            --v100;
          }
          while (v100);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)__p);
        turi::visualization::escape_float(*(double *)(*(_QWORD *)__p[0] + 8 * (v167 + v99)), &v171);
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &v171;
        else
          v105 = (std::string *)v171.__r_.__value_.__r.__words[0];
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
        else
          v106 = v171.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v105, v106);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v171.__r_.__value_.__l.__data_);
        v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
        v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
        v107 = (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3;
        v108 = v107 - 1;
        if ((uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) < 1)
        {
          v111 = (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3;
        }
        else
        {
          v109 = v163;
          v110 = *(_QWORD *)(v161.__r_.__value_.__r.__words[0] + 8 * v108) + 1;
          *(_QWORD *)(v161.__r_.__value_.__r.__words[0] + 8 * v108) = v110;
          v111 = v107;
          if (v110 >= v109[v108])
          {
            v112 = (unint64_t *)&v87[v107 - 2];
            v113 = (char *)(v109 - 2);
            v114 = v107;
            do
            {
              v111 = v114 - 1;
              v112[1] = 0;
              if ((uint64_t)(v114 - 1) <= 0)
                goto LABEL_218;
              v115 = *v112 + 1;
              *v112-- = v115;
              v116 = *(_QWORD *)&v113[8 * v114--];
            }
            while (v115 >= v116);
            v108 = v111 - 1;
          }
        }
        if ((v108 & 0x8000000000000000) == 0 && v111)
        {
          v117 = v111;
          if (v111 < v107)
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"]", 1);
              ++v117;
              v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
              v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
            }
            while (v117 < (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3);
            v107 = (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3;
          }
          if (v111 < v107)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)",", 1);
            v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
            v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
          }
          v118 = (char *)v89 - (char *)v87;
          v119 = v111;
          if (v111 < v89 - v87)
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"[", 1);
              ++v119;
              v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
              v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
              v118 = v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0];
            }
            while (v119 < (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3);
          }
          if (v111 >= v118 >> 3)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)",", 1);
            v89 = (uint64_t *)v161.__r_.__value_.__l.__size_;
            v87 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
          }
          continue;
        }
        break;
      }
LABEL_218:
      if (v89 != v87)
      {
        v120 = 0;
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"]", 1);
          ++v120;
          v89 = (uint64_t *)v161.__r_.__value_.__r.__words[0];
        }
        while (v120 < (uint64_t)(v161.__r_.__value_.__l.__size_ - v161.__r_.__value_.__r.__words[0]) >> 3);
      }
      if (v89)
      {
        v161.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
        operator delete(v89);
      }
      if (v165)
      {
        v166 = v165;
        operator delete(v165);
      }
      if (v163)
      {
        v164 = (uint64_t *)v163;
        operator delete(v163);
      }
      v121 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v122 = (unint64_t *)((char *)__p[1] + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      goto LABEL_260;
    default:
      if (*(_BYTE *)(a1 + 12) == 2)
      {
        v90 = *(double *)a1;
        if (*(char *)(*(_QWORD *)a1 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(*(_QWORD *)&v90 + 8), *(_QWORD *)(*(_QWORD *)&v90 + 16));
        }
        else
        {
          v91 = *(_OWORD *)(*(_QWORD *)&v90 + 8);
          v161.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v90 + 24);
          *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v91;
        }
        turi::visualization::extra_label_escape((uint64_t *)&v161, 1, (uint64_t)__p);
        if (SHIBYTE(v163) >= 0)
          v97 = __p;
        else
          v97 = (void **)__p[0];
        if (SHIBYTE(v163) >= 0)
          v98 = HIBYTE(v163);
        else
          v98 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v97, v98);
        if (SHIBYTE(v163) < 0)
          operator delete(__p[0]);
LABEL_185:
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
LABEL_260:
        std::stringbuf::str();
        v155[0] = *(void **)v10;
        v137 = *(_QWORD *)(v10 + 72);
        *(void **)((char *)v155 + *((_QWORD *)v155[0] - 3)) = *(void **)(v10 + 64);
        v156[0] = v137;
        v156[1] = MEMORY[0x24BEDB848] + 16;
        if (v157 < 0)
          operator delete((void *)v156[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        return MEMORY[0x219A198F4](&v158);
      }
      else
      {
        result = turi::flexible_type_fail(0);
LABEL_281:
        __break(1u);
      }
      return result;
  }
}

void sub_218600EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a70;

  boost::detail::shared_count::~shared_count(&a70);
  _Unwind_Resume(a1);
}

void turi::visualization::escape_string(uint64_t *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type __n;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  __n = 0;
  turi::escape_string(a1, 92, 1, 34, a2, 0, a3, &__n);
  std::string::resize(a3, __n, 0);
}

void sub_218601450(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 turi::visualization::replace_all@<Q0>(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type i;
  std::string::size_type size;
  std::string *v10;
  int v11;
  char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  char *v19;
  char *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  uint64_t v24;
  __n128 result;

  for (i = 0; ; i += v24)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (std::string *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v10 = this;
    }
    v11 = *(char *)(a2 + 23);
    v12 = v11 >= 0 ? (char *)a2 : *(char **)a2;
    v13 = v11 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    if (size < i)
      break;
    if (v13)
    {
      v14 = (char *)v10 + i;
      v15 = (char *)v10 + size;
      v16 = size - i;
      if (v16 >= v13)
      {
        v17 = *v12;
        while (1)
        {
          v18 = v16 - v13;
          if (v18 == -1)
            break;
          v19 = (char *)memchr(v14, v17, v18 + 1);
          if (!v19)
            break;
          v20 = v19;
          if (!memcmp(v19, v12, v13))
          {
            if (v20 == v15)
              goto LABEL_32;
            i = v20 - (char *)v10;
            goto LABEL_22;
          }
          v14 = v20 + 1;
          v16 = v15 - (v20 + 1);
          if (v16 < v13)
            goto LABEL_32;
        }
      }
      break;
    }
LABEL_22:
    if (i == -1)
      break;
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)a3;
    else
      v22 = *(const std::string::value_type **)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    std::string::replace(this, i, v13, v22, v23);
    v24 = *(unsigned __int8 *)(a3 + 23);
    if ((v24 & 0x80u) != 0)
      v24 = *(_QWORD *)(a3 + 8);
  }
LABEL_32:
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a4 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t boost::local_time::custom_time_zone_base<char>::custom_time_zone_base(uint64_t a1, __int128 *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  *(_QWORD *)a1 = &unk_24D932488;
  boost::date_time::time_zone_names_base<char>::time_zone_names_base((std::string *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 104) = *a3;
  *(_QWORD *)(a1 + 112) = *a4;
  *(_QWORD *)(a1 + 120) = a4[1];
  v10 = *a5;
  v9 = a5[1];
  *(_QWORD *)(a1 + 128) = a4[2];
  *(_QWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 144) = v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void OUTLINED_FUNCTION_1_5()
{
  JUMPOUT(0x219A19A08);
}

uint64_t _GLOBAL__sub_I_escape_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)555>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  _BOOL8 v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  uint64_t v21;

  if (*(_DWORD *)(a1 + 44) != 555)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "Model not an a CustomModel.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      return;
    v7 = v19;
    goto LABEL_26;
  }
  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v19);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)v20);
  v20 = v17;
  v21 = v18;
  v5 = CoreML::Result::good((CoreML::Result *)&v19);
  if (!v5)
    goto LABEL_23;
  if (*(_DWORD *)(a1 + 44) == 555)
    v6 = *(_QWORD **)(a1 + 32);
  else
    v6 = CoreML::Specification::CustomModel::default_instance((CoreML::Specification::CustomModel *)v5);
  v8 = v6[6];
  if ((*(char *)(v8 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v8 + 23))
      goto LABEL_15;
LABEL_29:
    std::string::basic_string[abi:ne180100]<0>(&v16, "CustomModel must have non-empty className.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v17) < 0)
    {
      v10 = v16;
LABEL_37:
      operator delete(v10);
    }
    goto LABEL_24;
  }
  if (!*(_QWORD *)(v8 + 8))
    goto LABEL_29;
LABEL_15:
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(v6 + 3), &v16);
  while (v16)
  {
    v9 = v16[3];
    if (*(char *)(v9 + 23) < 0)
    {
      if (!*(_QWORD *)(v9 + 8))
      {
LABEL_31:
        std::string::basic_string[abi:ne180100]<0>(__p, "CustomModel.parameters must have non-empty string keys.");
        CoreML::Result::Result((_DWORD *)a2, 13);
        if ((SHIBYTE(v15) & 0x80000000) == 0)
          goto LABEL_24;
        v10 = __p[0];
        goto LABEL_37;
      }
    }
    else if (!*(_BYTE *)(v9 + 23))
    {
      goto LABEL_31;
    }
    if (!*(_DWORD *)(v9 + 52))
    {
      std::operator+<char>();
      v11 = std::string::append(&v13, "'] does not have a set value");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v15 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a2, 13);
      if (SHIBYTE(v15) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      {
        v10 = (void *)v13.__r_.__value_.__r.__words[0];
        goto LABEL_37;
      }
      goto LABEL_24;
    }
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(&v16);
  }
LABEL_23:
  *(_QWORD *)a2 = v19;
  *(_OWORD *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 24) = v21;
  v20 = 0uLL;
  v21 = 0;
LABEL_24:
  if ((SHIBYTE(v21) & 0x80000000) == 0)
    return;
  v7 = (void *)v20;
LABEL_26:
  operator delete(v7);
}

void sub_2186018E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_CustomModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::visualization::groupby_quantile_result::insert_category(turi::visualization::groupby_quantile_result *this, const turi::flexible_type *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _QWORD *v6;

  turi::visualization::groupby_result<turi::groupby_operators::quantile>::insert_category((uint64_t)this, (unsigned __int8 *)a2);
  v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = v4;
  v6 = operator new(0x28uLL);
  v6[4] = 0x3FF0000000000000;
  *(_OWORD *)v6 = xmmword_21872F2D8;
  *((_OWORD *)v6 + 1) = unk_21872F2E8;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v5 + 40, (char *)v6, (uint64_t)(v6 + 5), 5uLL);
  operator delete(v6);
}

void sub_218601A48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_groupby_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::visualization::plot_heatmap@<X0>(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::gl_sarray *a3@<X2>, const turi::flexible_type *a4@<X3>, const turi::flexible_type *a5@<X4>, _QWORD *a6@<X8>)
{
  turi::gl_sarray *v13;
  turi::gl_sarray *v14;
  std::string *p_p;
  std::string::size_type size;
  const turi::gl_sarray *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34[6];
  void *v35;
  char v36;
  _QWORD v37[2];
  std::__shared_weak_count *v38;
  std::string __p;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  char v44;
  double v45;
  void *v46;
  char v47;
  _QWORD v48[2];
  _QWORD v49[11];
  char v50;
  uint64_t v51;
  _BYTE v52[40];
  _BYTE v53[47];

  if (turi::gl_sarray::dtype(this) >= 2
    || (v13 = (turi::gl_sarray *)turi::gl_sarray::gl_sarray((turi::gl_sarray *)v53, this),
        turi::gl_sarray::~gl_sarray(v13),
        turi::gl_sarray::dtype(a2) >= 2))
  {
    validate_dtype(turi::gl_sarray const&)::{lambda(void)#1}::operator()();
  }
  v14 = (turi::gl_sarray *)turi::gl_sarray::gl_sarray((turi::gl_sarray *)v52, a2);
  turi::gl_sarray::~gl_sarray(v14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v48);
  turi::visualization::heatmap_spec(a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v45 = (double)(unint64_t)turi::gl_sarray::size(this);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D94BF90;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&__p.__r_.__value_.__r.__words[2]);
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D94BEE0;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v37);
  turi::gl_sframe::operator[]((uint64_t)v37, (uint64_t)&x_name, (turi::gl_sarray *)v34);
  turi::gl_sarray_reference::operator=((uint64_t)v34, (uint64_t)this);
  v34[0] = (uint64_t)off_24D91EA30;
  if (v36 < 0)
    operator delete(v35);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v34);
  turi::gl_sframe::operator[]((uint64_t)v37, (uint64_t)&y_name, (turi::gl_sarray *)v34);
  turi::gl_sarray_reference::operator=((uint64_t)v34, (uint64_t)a2);
  v34[0] = (uint64_t)off_24D91EA30;
  if (v36 < 0)
    operator delete(v35);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v34);
  v18 = turi::visualization::batch_size(this, a2, v17);
  turi::visualization::heatmap::init((turi::visualization::heatmap *)&__p, (const turi::gl_sframe *)v37, v18);
  std::allocate_shared[abi:ne180100]<turi::visualization::heatmap,std::allocator<turi::visualization::heatmap>,turi::visualization::heatmap&,void>((uint64_t)&__p, &v33);
  *(_OWORD *)v34 = v33;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v46, v34, &v45, a6);
  v19 = (std::__shared_weak_count *)v34[1];
  if (v34[1])
  {
    v20 = (unint64_t *)(v34[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v37[0] = off_24D91E9C0;
  v22 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D94BF90;
  v25 = v42;
  if (v42)
  {
    v26 = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)off_24D91E9C0;
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v47 < 0)
    operator delete(v46);
  v48[0] = *MEMORY[0x24BEDB7F0];
  v31 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v48 + *(_QWORD *)(v48[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v49[0] = v31;
  v49[1] = MEMORY[0x24BEDB848] + 16;
  if (v50 < 0)
    operator delete((void *)v49[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v51);
}

void sub_218601E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (**a21)(turi::gl_sframe *__hidden this),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a21 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  turi::visualization::heatmap::~heatmap((turi::visualization::heatmap *)&a24);
  if (a42 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void turi::visualization::heatmap::init(turi::visualization::heatmap *this, const turi::gl_sframe *a2, uint64_t a3)
{
  double *v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  float v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  double v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  float v35;
  double v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  double v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  float v50;
  double v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  double v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  float v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  size_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  size_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  size_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  size_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  size_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  size_t v108;
  void *v109;
  void *v110;
  unsigned int v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  size_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  size_t v127;
  size_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  size_t v137;
  void *v138;
  void *v139;
  unsigned int v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  size_t v144;
  void *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  size_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  unsigned int v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *p_shared_owners;
  unint64_t v184;
  std::runtime_error *exception;
  std::string *v186;
  __int128 v187;
  std::runtime_error *v188;
  std::string *v189;
  __int128 v190;
  std::runtime_error *v191;
  std::string *v192;
  __int128 v193;
  std::runtime_error *v194;
  std::string *v195;
  __int128 v196;
  _QWORD v197[8];
  char v198;
  _QWORD v199[8];
  char v200;
  _QWORD v201[2];
  std::__shared_weak_count *v202;
  __int128 __p;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  std::string v207;
  size_t v208;
  size_t v209;
  int v210;
  char v211;
  size_t v212;
  int v213;
  char v214;
  size_t __idx;
  int v216;
  char v217;
  uint64_t v218;
  int v219;
  char v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::init((uint64_t)this, (uint64_t)a2, a3);
  turi::gl_sframe::head(a2, 10000, v201);
  turi::gl_sframe::operator[]((uint64_t)v201, (uint64_t)&x_name, (turi::gl_sarray *)v199);
  turi::gl_sframe::operator[]((uint64_t)v201, (uint64_t)&y_name, (turi::gl_sarray *)v197);
  v5 = (double *)*((_QWORD *)this + 5);
  turi::gl_sarray::min((turi::gl_sarray *)v199);
  v6 = 0.0;
  switch(v220)
  {
    case 0:
      v6 = (double)v218;
      goto LABEL_31;
    case 1:
      v6 = *(double *)&v218;
      goto LABEL_31;
    case 2:
      v10 = v218;
      __idx = 0;
      v11 = (char *)(v218 + 8);
      if (*(char *)(v218 + 31) < 0)
        v11 = *(char **)(v218 + 8);
      std::string::basic_string[abi:ne180100]<0>(&__p, v11);
      v12 = std::stod((const std::string *)&__p, &__idx);
      if (SBYTE7(v204) < 0)
        operator delete((void *)__p);
      if (*(char *)(v10 + 31) < 0)
        v13 = *(_QWORD *)(v10 + 16);
      else
        v13 = *(unsigned __int8 *)(v10 + 31);
      if (__idx != v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v186 = std::string::append(&v207, " cannot be interpreted as a float");
        v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
        *(_QWORD *)&v204 = *((_QWORD *)&v186->__r_.__value_.__l + 2);
        __p = v187;
        v186->__r_.__value_.__l.__size_ = 0;
        v186->__r_.__value_.__r.__words[2] = 0;
        v186->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v20 = v12;
      v6 = v20;
      goto LABEL_31;
    case 3:
      *(_QWORD *)&v204 = 0;
      __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v218 + 8), *(_QWORD *)(v218 + 16), (uint64_t)(*(_QWORD *)(v218 + 16) - *(_QWORD *)(v218 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_31;
    case 4:
      *(_QWORD *)&v204 = 0;
      __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v218 + 8), *(uint64_t **)(v218 + 16), (uint64_t)(*(_QWORD *)(v218 + 16) - *(_QWORD *)(v218 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      goto LABEL_31;
    case 5:
      *(_QWORD *)&v204 = 0;
      __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v218 + 8), *(uint64_t **)(v218 + 16), (uint64_t)(*(_QWORD *)(v218 + 16) - *(_QWORD *)(v218 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
      goto LABEL_31;
    case 6:
      v6 = (double)v219 / 1000000.0 + (double)(v218 << 8 >> 8);
      goto LABEL_31;
    case 7:
      goto LABEL_31;
    case 8:
      v14 = v218;
      v15 = *(_QWORD *)(v218 + 16);
      *(_QWORD *)&__p = *(_QWORD *)(v218 + 8);
      *((_QWORD *)&__p + 1) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_OWORD *)(v14 + 24);
      v19 = *(_OWORD *)(v14 + 56);
      v205 = *(_OWORD *)(v14 + 40);
      v206 = v19;
      v204 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
      goto LABEL_31;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v218 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v205 + 1))
      {
        *(_QWORD *)&v206 = *((_QWORD *)&v205 + 1);
        operator delete(*((void **)&v205 + 1));
      }
      if ((_QWORD)v204)
      {
        *((_QWORD *)&v204 + 1) = v204;
        operator delete((void *)v204);
      }
      v7 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_31:
      turi::gl_sarray::max((turi::gl_sarray *)v199);
      v21 = 0.0;
      switch(v217)
      {
        case 0:
          v21 = (double)(uint64_t)__idx;
          break;
        case 1:
          v21 = *(double *)&__idx;
          break;
        case 2:
          v25 = __idx;
          v212 = 0;
          v26 = (char *)(__idx + 8);
          if (*(char *)(__idx + 31) < 0)
            v26 = *(char **)(__idx + 8);
          std::string::basic_string[abi:ne180100]<0>(&__p, v26);
          v27 = std::stod((const std::string *)&__p, &v212);
          if (SBYTE7(v204) < 0)
            operator delete((void *)__p);
          if (*(char *)(v25 + 31) < 0)
            v28 = *(_QWORD *)(v25 + 16);
          else
            v28 = *(unsigned __int8 *)(v25 + 31);
          if (v212 != v28)
          {
            v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v189 = std::string::append(&v207, " cannot be interpreted as a float");
            v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
            *(_QWORD *)&v204 = *((_QWORD *)&v189->__r_.__value_.__l + 2);
            __p = v190;
            v189->__r_.__value_.__l.__size_ = 0;
            v189->__r_.__value_.__r.__words[2] = 0;
            v189->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v188, (const std::string *)&__p);
            __cxa_throw(v188, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v35 = v27;
          v21 = v35;
          break;
        case 3:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(__idx + 8), *(_QWORD *)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          break;
        case 4:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 4);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 5:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(__idx + 8), *(uint64_t **)(__idx + 16), (uint64_t)(*(_QWORD *)(__idx + 16) - *(_QWORD *)(__idx + 8)) >> 5);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 6:
          v21 = (double)v216 / 1000000.0 + (double)((uint64_t)(__idx << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v29 = __idx;
          v30 = *(_QWORD *)(__idx + 16);
          *(_QWORD *)&__p = *(_QWORD *)(__idx + 8);
          *((_QWORD *)&__p + 1) = v30;
          if (v30)
          {
            v31 = (unsigned int *)(v30 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v33 = *(_OWORD *)(v29 + 24);
          v34 = *(_OWORD *)(v29 + 56);
          v205 = *(_OWORD *)(v29 + 40);
          v206 = v34;
          v204 = v33;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, __idx + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v205 + 1))
          {
            *(_QWORD *)&v206 = *((_QWORD *)&v205 + 1);
            operator delete(*((void **)&v205 + 1));
          }
          if ((_QWORD)v204)
          {
            *((_QWORD *)&v204 + 1) = v204;
            operator delete((void *)v204);
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          break;
        default:
          goto LABEL_299;
      }
      turi::gl_sarray::min((turi::gl_sarray *)v197);
      v36 = 0.0;
      switch(v214)
      {
        case 0:
          v36 = (double)(uint64_t)v212;
          break;
        case 1:
          v36 = *(double *)&v212;
          break;
        case 2:
          v40 = v212;
          v209 = 0;
          v41 = (char *)(v212 + 8);
          if (*(char *)(v212 + 31) < 0)
            v41 = *(char **)(v212 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__p, v41);
          v42 = std::stod((const std::string *)&__p, &v209);
          if (SBYTE7(v204) < 0)
            operator delete((void *)__p);
          if (*(char *)(v40 + 31) < 0)
            v43 = *(_QWORD *)(v40 + 16);
          else
            v43 = *(unsigned __int8 *)(v40 + 31);
          if (v209 != v43)
          {
            v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v192 = std::string::append(&v207, " cannot be interpreted as a float");
            v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
            *(_QWORD *)&v204 = *((_QWORD *)&v192->__r_.__value_.__l + 2);
            __p = v193;
            v192->__r_.__value_.__l.__size_ = 0;
            v192->__r_.__value_.__r.__words[2] = 0;
            v192->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v191, (const std::string *)&__p);
            __cxa_throw(v191, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v50 = v42;
          v36 = v50;
          break;
        case 3:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v212 + 8), *(_QWORD *)(v212 + 16), (uint64_t)(*(_QWORD *)(v212 + 16) - *(_QWORD *)(v212 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          break;
        case 4:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v212 + 8), *(uint64_t **)(v212 + 16), (uint64_t)(*(_QWORD *)(v212 + 16) - *(_QWORD *)(v212 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 5:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v212 + 8), *(uint64_t **)(v212 + 16), (uint64_t)(*(_QWORD *)(v212 + 16) - *(_QWORD *)(v212 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 6:
          v36 = (double)v213 / 1000000.0 + (double)((uint64_t)(v212 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v44 = v212;
          v45 = *(_QWORD *)(v212 + 16);
          *(_QWORD *)&__p = *(_QWORD *)(v212 + 8);
          *((_QWORD *)&__p + 1) = v45;
          if (v45)
          {
            v46 = (unsigned int *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = *(_OWORD *)(v44 + 24);
          v49 = *(_OWORD *)(v44 + 56);
          v205 = *(_OWORD *)(v44 + 40);
          v206 = v49;
          v204 = v48;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v212 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v205 + 1))
          {
            *(_QWORD *)&v206 = *((_QWORD *)&v205 + 1);
            operator delete(*((void **)&v205 + 1));
          }
          if ((_QWORD)v204)
          {
            *((_QWORD *)&v204 + 1) = v204;
            operator delete((void *)v204);
          }
          v37 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v38 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          break;
        default:
          goto LABEL_299;
      }
      turi::gl_sarray::max((turi::gl_sarray *)v197);
      v51 = 0.0;
      switch(v211)
      {
        case 0:
          v51 = (double)(uint64_t)v209;
          break;
        case 1:
          v51 = *(double *)&v209;
          break;
        case 2:
          v55 = v209;
          v208 = 0;
          v56 = (char *)(v209 + 8);
          if (*(char *)(v209 + 31) < 0)
            v56 = *(char **)(v209 + 8);
          std::string::basic_string[abi:ne180100]<0>(&__p, v56);
          v57 = std::stod((const std::string *)&__p, &v208);
          if (SBYTE7(v204) < 0)
            operator delete((void *)__p);
          if (*(char *)(v55 + 31) < 0)
            v58 = *(_QWORD *)(v55 + 16);
          else
            v58 = *(unsigned __int8 *)(v55 + 31);
          if (v208 != v58)
          {
            v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v195 = std::string::append(&v207, " cannot be interpreted as a float");
            v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
            *(_QWORD *)&v204 = *((_QWORD *)&v195->__r_.__value_.__l + 2);
            __p = v196;
            v195->__r_.__value_.__l.__size_ = 0;
            v195->__r_.__value_.__r.__words[2] = 0;
            v195->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v194, (const std::string *)&__p);
            __cxa_throw(v194, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          v65 = v57;
          v51 = v65;
          break;
        case 3:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v209 + 8), *(_QWORD *)(v209 + 16), (uint64_t)(*(_QWORD *)(v209 + 16) - *(_QWORD *)(v209 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          break;
        case 4:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v209 + 8), *(uint64_t **)(v209 + 16), (uint64_t)(*(_QWORD *)(v209 + 16) - *(_QWORD *)(v209 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 5:
          *(_QWORD *)&v204 = 0;
          __p = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v209 + 8), *(uint64_t **)(v209 + 16), (uint64_t)(*(_QWORD *)(v209 + 16) - *(_QWORD *)(v209 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          break;
        case 6:
          v51 = (double)v210 / 1000000.0 + (double)((uint64_t)(v209 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          v59 = v209;
          v60 = *(_QWORD *)(v209 + 16);
          *(_QWORD *)&__p = *(_QWORD *)(v209 + 8);
          *((_QWORD *)&__p + 1) = v60;
          if (v60)
          {
            v61 = (unsigned int *)(v60 + 8);
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          v63 = *(_OWORD *)(v59 + 24);
          v64 = *(_OWORD *)(v59 + 56);
          v205 = *(_OWORD *)(v59 + 40);
          v206 = v64;
          v204 = v63;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((unsigned int **)&__p + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, v209 + 8);
          turi::flexible_type_fail(0);
          if (*((_QWORD *)&v205 + 1))
          {
            *(_QWORD *)&v206 = *((_QWORD *)&v205 + 1);
            operator delete(*((void **)&v205 + 1));
          }
          if ((_QWORD)v204)
          {
            *((_QWORD *)&v204 + 1) = v204;
            operator delete((void *)v204);
          }
          v52 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          break;
        default:
          goto LABEL_299;
      }
      turi::visualization::heatmap_result::init(v5, v6, v21, v36, v51);
      switch(v211)
      {
        case 2:
          v66 = (unint64_t *)v209;
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (!v68)
          {
            v69 = v209;
            if (v209)
            {
              if (*(char *)(v209 + 31) < 0)
                operator delete(*(void **)(v209 + 8));
              v70 = v69;
              v71 = 0x1012C404EF22A49;
              goto LABEL_162;
            }
          }
          break;
        case 3:
          v83 = (unint64_t *)v209;
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = v209;
            if (v209)
            {
              v87 = *(void **)(v209 + 8);
              if (v87)
              {
                *(_QWORD *)(v209 + 16) = v87;
                operator delete(v87);
              }
              v70 = v86;
              v71 = 0x1080C409938AC02;
              goto LABEL_162;
            }
          }
          break;
        case 4:
          v72 = (unint64_t *)v209;
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (!v74)
          {
            v75 = v209;
            if (v209)
            {
              *(_QWORD *)&__p = v209 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_155;
            }
          }
          break;
        case 5:
          v88 = (unint64_t *)v209;
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (!v90)
          {
            v75 = v209;
            if (v209)
            {
              *(_QWORD *)&__p = v209 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_155:
              v70 = v75;
              v71 = 0x1020C405E66F15BLL;
              goto LABEL_162;
            }
          }
          break;
        case 8:
          v91 = (unint64_t *)v209;
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = v209;
            if (v209)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v209 + 16));
              v70 = v94;
              v82 = -235920773;
              goto LABEL_161;
            }
          }
          break;
        case 9:
          v76 = (unint64_t *)v209;
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            v79 = v209;
            if (v209)
            {
              v80 = *(void **)(v209 + 48);
              if (v80)
              {
                *(_QWORD *)(v209 + 56) = v80;
                operator delete(v80);
              }
              v81 = *(void **)(v79 + 24);
              if (v81)
              {
                *(_QWORD *)(v79 + 32) = v81;
                operator delete(v81);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v79 + 8);
              v70 = v79;
              v82 = 2071181815;
LABEL_161:
              v71 = v82 | 0x1030C4000000000;
LABEL_162:
              MEMORY[0x219A19A08](v70, v71);
            }
          }
          break;
        default:
          break;
      }
      switch(v214)
      {
        case 2:
          v95 = (unint64_t *)v212;
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97)
          {
            v98 = v212;
            if (v212)
            {
              if (*(char *)(v212 + 31) < 0)
                operator delete(*(void **)(v212 + 8));
              v99 = v98;
              v100 = 0x1012C404EF22A49;
              goto LABEL_204;
            }
          }
          break;
        case 3:
          v112 = (unint64_t *)v212;
          do
          {
            v113 = __ldaxr(v112);
            v114 = v113 - 1;
          }
          while (__stlxr(v114, v112));
          if (!v114)
          {
            v115 = v212;
            if (v212)
            {
              v116 = *(void **)(v212 + 8);
              if (v116)
              {
                *(_QWORD *)(v212 + 16) = v116;
                operator delete(v116);
              }
              v99 = v115;
              v100 = 0x1080C409938AC02;
              goto LABEL_204;
            }
          }
          break;
        case 4:
          v101 = (unint64_t *)v212;
          do
          {
            v102 = __ldaxr(v101);
            v103 = v102 - 1;
          }
          while (__stlxr(v103, v101));
          if (!v103)
          {
            v104 = v212;
            if (v212)
            {
              *(_QWORD *)&__p = v212 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_197;
            }
          }
          break;
        case 5:
          v117 = (unint64_t *)v212;
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (!v119)
          {
            v104 = v212;
            if (v212)
            {
              *(_QWORD *)&__p = v212 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_197:
              v99 = v104;
              v100 = 0x1020C405E66F15BLL;
              goto LABEL_204;
            }
          }
          break;
        case 8:
          v120 = (unint64_t *)v212;
          do
          {
            v121 = __ldaxr(v120);
            v122 = v121 - 1;
          }
          while (__stlxr(v122, v120));
          if (!v122)
          {
            v123 = v212;
            if (v212)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v212 + 16));
              v99 = v123;
              v111 = -235920773;
              goto LABEL_203;
            }
          }
          break;
        case 9:
          v105 = (unint64_t *)v212;
          do
          {
            v106 = __ldaxr(v105);
            v107 = v106 - 1;
          }
          while (__stlxr(v107, v105));
          if (!v107)
          {
            v108 = v212;
            if (v212)
            {
              v109 = *(void **)(v212 + 48);
              if (v109)
              {
                *(_QWORD *)(v212 + 56) = v109;
                operator delete(v109);
              }
              v110 = *(void **)(v108 + 24);
              if (v110)
              {
                *(_QWORD *)(v108 + 32) = v110;
                operator delete(v110);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v108 + 8);
              v99 = v108;
              v111 = 2071181815;
LABEL_203:
              v100 = v111 | 0x1030C4000000000;
LABEL_204:
              MEMORY[0x219A19A08](v99, v100);
            }
          }
          break;
        default:
          break;
      }
      switch(v217)
      {
        case 2:
          v124 = (unint64_t *)__idx;
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
          {
            v127 = __idx;
            if (__idx)
            {
              if (*(char *)(__idx + 31) < 0)
                operator delete(*(void **)(__idx + 8));
              v128 = v127;
              v129 = 0x1012C404EF22A49;
              goto LABEL_246;
            }
          }
          break;
        case 3:
          v141 = (unint64_t *)__idx;
          do
          {
            v142 = __ldaxr(v141);
            v143 = v142 - 1;
          }
          while (__stlxr(v143, v141));
          if (!v143)
          {
            v144 = __idx;
            if (__idx)
            {
              v145 = *(void **)(__idx + 8);
              if (v145)
              {
                *(_QWORD *)(__idx + 16) = v145;
                operator delete(v145);
              }
              v128 = v144;
              v129 = 0x1080C409938AC02;
              goto LABEL_246;
            }
          }
          break;
        case 4:
          v130 = (unint64_t *)__idx;
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            v133 = __idx;
            if (__idx)
            {
              *(_QWORD *)&__p = __idx + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_239;
            }
          }
          break;
        case 5:
          v146 = (unint64_t *)__idx;
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          if (!v148)
          {
            v133 = __idx;
            if (__idx)
            {
              *(_QWORD *)&__p = __idx + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_239:
              v128 = v133;
              v129 = 0x1020C405E66F15BLL;
              goto LABEL_246;
            }
          }
          break;
        case 8:
          v149 = (unint64_t *)__idx;
          do
          {
            v150 = __ldaxr(v149);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, v149));
          if (!v151)
          {
            v152 = __idx;
            if (__idx)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(__idx + 16));
              v128 = v152;
              v140 = -235920773;
              goto LABEL_245;
            }
          }
          break;
        case 9:
          v134 = (unint64_t *)__idx;
          do
          {
            v135 = __ldaxr(v134);
            v136 = v135 - 1;
          }
          while (__stlxr(v136, v134));
          if (!v136)
          {
            v137 = __idx;
            if (__idx)
            {
              v138 = *(void **)(__idx + 48);
              if (v138)
              {
                *(_QWORD *)(__idx + 56) = v138;
                operator delete(v138);
              }
              v139 = *(void **)(v137 + 24);
              if (v139)
              {
                *(_QWORD *)(v137 + 32) = v139;
                operator delete(v139);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v137 + 8);
              v128 = v137;
              v140 = 2071181815;
LABEL_245:
              v129 = v140 | 0x1030C4000000000;
LABEL_246:
              MEMORY[0x219A19A08](v128, v129);
            }
          }
          break;
        default:
          break;
      }
      switch(v220)
      {
        case 2:
          v153 = (unint64_t *)v218;
          do
          {
            v154 = __ldaxr(v153);
            v155 = v154 - 1;
          }
          while (__stlxr(v155, v153));
          if (!v155)
          {
            v156 = v218;
            if (v218)
            {
              if (*(char *)(v218 + 31) < 0)
                operator delete(*(void **)(v218 + 8));
              v157 = v156;
              v158 = 0x1012C404EF22A49;
              goto LABEL_288;
            }
          }
          break;
        case 3:
          v170 = (unint64_t *)v218;
          do
          {
            v171 = __ldaxr(v170);
            v172 = v171 - 1;
          }
          while (__stlxr(v172, v170));
          if (!v172)
          {
            v173 = v218;
            if (v218)
            {
              v174 = *(void **)(v218 + 8);
              if (v174)
              {
                *(_QWORD *)(v218 + 16) = v174;
                operator delete(v174);
              }
              v157 = v173;
              v158 = 0x1080C409938AC02;
              goto LABEL_288;
            }
          }
          break;
        case 4:
          v159 = (unint64_t *)v218;
          do
          {
            v160 = __ldaxr(v159);
            v161 = v160 - 1;
          }
          while (__stlxr(v161, v159));
          if (!v161)
          {
            v162 = v218;
            if (v218)
            {
              *(_QWORD *)&__p = v218 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_281;
            }
          }
          break;
        case 5:
          v175 = (unint64_t *)v218;
          do
          {
            v176 = __ldaxr(v175);
            v177 = v176 - 1;
          }
          while (__stlxr(v177, v175));
          if (!v177)
          {
            v162 = v218;
            if (v218)
            {
              *(_QWORD *)&__p = v218 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_281:
              v157 = v162;
              v158 = 0x1020C405E66F15BLL;
              goto LABEL_288;
            }
          }
          break;
        case 8:
          v178 = (unint64_t *)v218;
          do
          {
            v179 = __ldaxr(v178);
            v180 = v179 - 1;
          }
          while (__stlxr(v180, v178));
          if (!v180)
          {
            v181 = v218;
            if (v218)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v218 + 16));
              v157 = v181;
              v169 = -235920773;
              goto LABEL_287;
            }
          }
          break;
        case 9:
          v163 = (unint64_t *)v218;
          do
          {
            v164 = __ldaxr(v163);
            v165 = v164 - 1;
          }
          while (__stlxr(v165, v163));
          if (!v165)
          {
            v166 = v218;
            if (v218)
            {
              v167 = *(void **)(v218 + 48);
              if (v167)
              {
                *(_QWORD *)(v218 + 56) = v167;
                operator delete(v167);
              }
              v168 = *(void **)(v166 + 24);
              if (v168)
              {
                *(_QWORD *)(v166 + 32) = v168;
                operator delete(v168);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v166 + 8);
              v157 = v166;
              v169 = 2071181815;
LABEL_287:
              v158 = v169 | 0x1030C4000000000;
LABEL_288:
              MEMORY[0x219A19A08](v157, v158);
            }
          }
          break;
        default:
          break;
      }
      v197[0] = off_24D91EA58;
      if (v198 < 0)
        operator delete((void *)v197[6]);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v197);
      v199[0] = off_24D91EA58;
      if (v200 < 0)
        operator delete((void *)v199[6]);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v199);
      v201[0] = off_24D91E9C0;
      v182 = v202;
      if (v202)
      {
        p_shared_owners = (unint64_t *)&v202->__shared_owners_;
        do
          v184 = __ldaxr(p_shared_owners);
        while (__stlxr(v184 - 1, p_shared_owners));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      break;
    default:
LABEL_299:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_2186032CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t (**a28)(turi::gl_sframe *__hidden this),uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;
  uint64_t v38;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  void *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 161) < 0)
  {
    operator delete(*(void **)(v38 - 184));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v38 - 140))
      {
        case 2:
          v40 = *(unint64_t **)(v38 - 152);
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (v42)
            goto LABEL_46;
          v43 = *(_QWORD *)(v38 - 152);
          if (!v43)
            goto LABEL_46;
          if (*(char *)(v43 + 31) < 0)
            operator delete(*(void **)(v43 + 8));
          v44 = (_QWORD *)v43;
          v45 = 0x1012C404EF22A49;
          break;
        case 3:
          v54 = *(unint64_t **)(v38 - 152);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (v56)
            goto LABEL_46;
          v57 = *(_QWORD **)(v38 - 152);
          if (!v57)
            goto LABEL_46;
          v58 = (void *)v57[1];
          if (v58)
          {
            v57[2] = v58;
            operator delete(v58);
          }
          v44 = v57;
          v45 = 0x1080C409938AC02;
          break;
        case 4:
          v46 = *(unint64_t **)(v38 - 152);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (v48)
            goto LABEL_46;
          v49 = *(_QWORD **)(v38 - 152);
          if (!v49)
            goto LABEL_46;
          *(_QWORD *)(v38 - 184) = v49 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
          goto LABEL_38;
        case 5:
          v59 = *(unint64_t **)(v38 - 152);
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61)
            goto LABEL_46;
          v49 = *(_QWORD **)(v38 - 152);
          if (!v49)
            goto LABEL_46;
          *(_QWORD *)(v38 - 184) = v49 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
LABEL_38:
          v44 = v49;
          v45 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v62 = *(unint64_t **)(v38 - 152);
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = *(_QWORD *)(v38 - 152);
            if (v65)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
              MEMORY[0x219A19A08](v65, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v38 - 152) = 0;
          }
          goto LABEL_46;
        case 9:
          v50 = *(unint64_t **)(v38 - 152);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (v52)
            goto LABEL_46;
          v53 = *(_QWORD **)(v38 - 152);
          if (!v53)
            goto LABEL_46;
          v44 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v53);
          v45 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_46;
      }
      MEMORY[0x219A19A08](v44, v45);
LABEL_46:
      switch(*(_BYTE *)(v38 - 124))
      {
        case 2:
          v66 = *(unint64_t **)(v38 - 136);
          do
          {
            v67 = __ldaxr(v66);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, v66));
          if (v68)
            goto LABEL_84;
          v69 = *(_QWORD *)(v38 - 136);
          if (!v69)
            goto LABEL_84;
          if (*(char *)(v69 + 31) < 0)
            operator delete(*(void **)(v69 + 8));
          v70 = (_QWORD *)v69;
          v71 = 0x1012C404EF22A49;
          break;
        case 3:
          v80 = *(unint64_t **)(v38 - 136);
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (v82)
            goto LABEL_84;
          v83 = *(_QWORD **)(v38 - 136);
          if (!v83)
            goto LABEL_84;
          v84 = (void *)v83[1];
          if (v84)
          {
            v83[2] = v84;
            operator delete(v84);
          }
          v70 = v83;
          v71 = 0x1080C409938AC02;
          break;
        case 4:
          v72 = *(unint64_t **)(v38 - 136);
          do
          {
            v73 = __ldaxr(v72);
            v74 = v73 - 1;
          }
          while (__stlxr(v74, v72));
          if (v74)
            goto LABEL_84;
          v75 = *(_QWORD **)(v38 - 136);
          if (!v75)
            goto LABEL_84;
          *(_QWORD *)(v38 - 184) = v75 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
          goto LABEL_76;
        case 5:
          v85 = *(unint64_t **)(v38 - 136);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87)
            goto LABEL_84;
          v75 = *(_QWORD **)(v38 - 136);
          if (!v75)
            goto LABEL_84;
          *(_QWORD *)(v38 - 184) = v75 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
LABEL_76:
          v70 = v75;
          v71 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v88 = *(unint64_t **)(v38 - 136);
          do
          {
            v89 = __ldaxr(v88);
            v90 = v89 - 1;
          }
          while (__stlxr(v90, v88));
          if (!v90)
          {
            v91 = *(_QWORD *)(v38 - 136);
            if (v91)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v91 + 16));
              MEMORY[0x219A19A08](v91, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v38 - 136) = 0;
          }
          goto LABEL_84;
        case 9:
          v76 = *(unint64_t **)(v38 - 136);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (v78)
            goto LABEL_84;
          v79 = *(_QWORD **)(v38 - 136);
          if (!v79)
            goto LABEL_84;
          v70 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v79);
          v71 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_84;
      }
      MEMORY[0x219A19A08](v70, v71);
LABEL_84:
      switch(*(_BYTE *)(v38 - 108))
      {
        case 2:
          v92 = *(unint64_t **)(v38 - 120);
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (v94)
            goto LABEL_122;
          v95 = *(_QWORD *)(v38 - 120);
          if (!v95)
            goto LABEL_122;
          if (*(char *)(v95 + 31) < 0)
            operator delete(*(void **)(v95 + 8));
          v96 = (_QWORD *)v95;
          v97 = 0x1012C404EF22A49;
          break;
        case 3:
          v106 = *(unint64_t **)(v38 - 120);
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (v108)
            goto LABEL_122;
          v109 = *(_QWORD **)(v38 - 120);
          if (!v109)
            goto LABEL_122;
          v110 = (void *)v109[1];
          if (v110)
          {
            v109[2] = v110;
            operator delete(v110);
          }
          v96 = v109;
          v97 = 0x1080C409938AC02;
          break;
        case 4:
          v98 = *(unint64_t **)(v38 - 120);
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (v100)
            goto LABEL_122;
          v101 = *(_QWORD **)(v38 - 120);
          if (!v101)
            goto LABEL_122;
          *(_QWORD *)(v38 - 184) = v101 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
          goto LABEL_114;
        case 5:
          v111 = *(unint64_t **)(v38 - 120);
          do
          {
            v112 = __ldaxr(v111);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, v111));
          if (v113)
            goto LABEL_122;
          v101 = *(_QWORD **)(v38 - 120);
          if (!v101)
            goto LABEL_122;
          *(_QWORD *)(v38 - 184) = v101 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
LABEL_114:
          v96 = v101;
          v97 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v114 = *(unint64_t **)(v38 - 120);
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v117 = *(_QWORD *)(v38 - 120);
            if (v117)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v117 + 16));
              MEMORY[0x219A19A08](v117, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v38 - 120) = 0;
          }
          goto LABEL_122;
        case 9:
          v102 = *(unint64_t **)(v38 - 120);
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (v104)
            goto LABEL_122;
          v105 = *(_QWORD **)(v38 - 120);
          if (!v105)
            goto LABEL_122;
          v96 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v105);
          v97 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_122;
      }
      MEMORY[0x219A19A08](v96, v97);
LABEL_122:
      switch(*(_BYTE *)(v38 - 92))
      {
        case 2:
          v118 = *(unint64_t **)(v38 - 104);
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (v120)
            goto LABEL_160;
          v121 = *(_QWORD *)(v38 - 104);
          if (!v121)
            goto LABEL_160;
          if (*(char *)(v121 + 31) < 0)
            operator delete(*(void **)(v121 + 8));
          v122 = (_QWORD *)v121;
          v123 = 0x1012C404EF22A49;
          break;
        case 3:
          v132 = *(unint64_t **)(v38 - 104);
          do
          {
            v133 = __ldaxr(v132);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, v132));
          if (v134)
            goto LABEL_160;
          v135 = *(_QWORD **)(v38 - 104);
          if (!v135)
            goto LABEL_160;
          v136 = (void *)v135[1];
          if (v136)
          {
            v135[2] = v136;
            operator delete(v136);
          }
          v122 = v135;
          v123 = 0x1080C409938AC02;
          break;
        case 4:
          v124 = *(unint64_t **)(v38 - 104);
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (v126)
            goto LABEL_160;
          v127 = *(_QWORD **)(v38 - 104);
          if (!v127)
            goto LABEL_160;
          *(_QWORD *)(v38 - 184) = v127 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
          goto LABEL_152;
        case 5:
          v137 = *(unint64_t **)(v38 - 104);
          do
          {
            v138 = __ldaxr(v137);
            v139 = v138 - 1;
          }
          while (__stlxr(v139, v137));
          if (v139)
            goto LABEL_160;
          v127 = *(_QWORD **)(v38 - 104);
          if (!v127)
            goto LABEL_160;
          *(_QWORD *)(v38 - 184) = v127 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 184));
LABEL_152:
          v122 = v127;
          v123 = 0x1020C405E66F15BLL;
          break;
        case 8:
          v140 = *(unint64_t **)(v38 - 104);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (!v142)
          {
            v143 = *(_QWORD *)(v38 - 104);
            if (v143)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v143 + 16));
              MEMORY[0x219A19A08](v143, 0x1030C40F1F0227BLL);
            }
            *(_QWORD *)(v38 - 104) = 0;
          }
          goto LABEL_160;
        case 9:
          v128 = *(unint64_t **)(v38 - 104);
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (v130)
            goto LABEL_160;
          v131 = *(_QWORD **)(v38 - 104);
          if (!v131)
            goto LABEL_160;
          v122 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v131);
          v123 = 0x1030C407B73B9F7;
          break;
        default:
          goto LABEL_160;
      }
      MEMORY[0x219A19A08](v122, v123);
LABEL_160:
      turi::const_gl_sarray_reference::~const_gl_sarray_reference(&a10);
      turi::const_gl_sarray_reference::~const_gl_sarray_reference(&a19);
      a28 = off_24D91E9C0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void sub_218603D60()
{
  JUMPOUT(0x218603D34);
}

void sub_218603D68()
{
  JUMPOUT(0x218603D3CLL);
}

void sub_218603D70()
{
  JUMPOUT(0x218603D58);
}

void turi::visualization::heatmap::~heatmap(turi::visualization::heatmap *this)
{
  *(_QWORD *)this = &unk_24D94BF90;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &unk_24D94BF90;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  *((_QWORD *)this + 2) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  JUMPOUT(0x219A19A08);
}

turi::visualization::heatmap_result *turi::visualization::heatmap_result::heatmap_result(turi::visualization::heatmap_result *this)
{
  uint64_t v3;
  void *__p[3];

  *(_QWORD *)this = off_24D94BDB8;
  *((_QWORD *)this + 1) = &unk_24D94BE20;
  v3 = 0;
  std::vector<long long>::vector(__p, 0x3CuLL, &v3);
  std::vector<std::vector<long long>>::vector((_QWORD *)this + 2, 0x3CuLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)((char *)this + 40) = xmmword_21872F730;
  *(_OWORD *)((char *)this + 56) = xmmword_21872F730;
  return this;
}

void sub_218603E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *turi::visualization::heatmap_result::init(double *this, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = this[6];
  if (v5 > a2)
  {
    this[6] = a2;
    v5 = a2;
  }
  v6 = this[5];
  if (v6 < a2)
  {
    this[5] = a2;
    v6 = a2;
  }
  if (v5 > a3)
    this[6] = a3;
  if (v6 < a3)
    this[5] = a3;
  v7 = this[8];
  if (v7 > a4)
  {
    this[8] = a4;
    v7 = a4;
  }
  v8 = this[7];
  if (v8 < a4)
  {
    this[7] = a4;
    v8 = a4;
  }
  if (v7 > a5)
    this[8] = a5;
  if (v8 < a5)
    this[7] = a5;
  return this;
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  const char **v8;

  *(_QWORD *)&v7 = "Transformer is already initialized.";
  if (*(_BYTE *)(a1 + 64))
  {
    v8 = (const char **)&v7;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(&v8);
  }
  *(_QWORD *)(a1 + 8) = a3;
  turi::gl_sframe::operator=(a1 + 16, a2);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization14heatmap_resultENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 40, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
}

double **turi::visualization::heatmap::split_input@<X0>(turi::visualization::heatmap *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double **result;
  double *v5;
  double *v6;

  result = (double **)std::vector<turi::visualization::heatmap_result>::vector(a3, a2);
  v5 = *result;
  v6 = result[1];
  while (v5 != v6)
  {
    result = (double **)turi::visualization::heatmap_result::init(v5, *(double *)(*((_QWORD *)this + 5) + 48), *(double *)(*((_QWORD *)this + 5) + 40), *(double *)(*((_QWORD *)this + 5) + 64), *(double *)(*((_QWORD *)this + 5) + 56));
    v5 += 9;
  }
  return result;
}

_QWORD *turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::heatmap_result>::vector(a2, a1);
}

uint64_t turi::visualization::heatmap_result::new_instance(turi::visualization::heatmap_result *this)
{
  uint64_t v2;

  v2 = operator new();
  turi::visualization::heatmap_result::heatmap_result((turi::visualization::heatmap_result *)v2);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)((char *)this + 56);
  return v2 + 8;
}

void sub_21860403C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C1C5F98DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'turi::visualization::heatmap_result::new_instance(turi::visualization::heatmap_result *this)
{
  return turi::visualization::heatmap_result::new_instance((turi::visualization::heatmap_result *)((char *)this - 8));
}

void turi::visualization::heatmap_result::widen_x(turi::visualization::heatmap_result *this, double a2)
{
  double v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  uint64_t j;
  uint64_t v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v4 = *((double *)this + 6);
  while (v4 > a2 || *((double *)this + 5) < a2)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = 29;
    do
    {
      v7 = 0;
      v8 = (uint64_t *)(v5 + 24 * v6);
      v9 = *(v8 - 3);
      v10 = *v8;
      do
      {
        *(_QWORD *)(v10 + v7) += *(_QWORD *)(v9 + v7);
        v7 += 8;
      }
      while (v7 != 480);
      v11 = v6 > 2;
      v6 -= 2;
    }
    while (v11);
    v12 = 30;
    do
    {
      v13 = 0;
      v14 = *(_QWORD *)(v5 + 24 * (v12 | 1));
      v15 = *(_QWORD *)(v5 + 24 * v12);
      do
      {
        *(_QWORD *)(v15 + v13) += *(_QWORD *)(v14 + v13);
        v13 += 8;
      }
      while (v13 != 480);
      v16 = v12 >= 0x3A;
      v12 += 2;
    }
    while (!v16);
    v17 = 696;
    v18 = 728;
    v19 = 720;
    v20 = 696;
    do
    {
      if (v20 != 696)
      {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*((_QWORD *)this + 2) + v19), *(char **)(*((_QWORD *)this + 2) + v18 - 8), *(_QWORD *)(*((_QWORD *)this + 2) + v18), (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + v18) - *(_QWORD *)(*((_QWORD *)this + 2) + v18 - 8)) >> 3);
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*((_QWORD *)this + 2) + v17), *(char **)(*((_QWORD *)this + 2) + v20), *(_QWORD *)(*((_QWORD *)this + 2) + v20 + 8), (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 2) + v20 + 8) - *(_QWORD *)(*((_QWORD *)this + 2) + v20)) >> 3);
      }
      v20 -= 48;
      v19 += 24;
      v18 += 48;
      v17 -= 24;
    }
    while (v20 != -24);
    for (i = 1080; i != 1440; i += 24)
    {
      v32 = 0;
      std::vector<long long>::vector(&v33, 0x3CuLL, &v32);
      v22 = *((_QWORD *)this + 2) + i;
      v23 = *(void **)v22;
      if (*(_QWORD *)v22)
      {
        *(_QWORD *)(v22 + 8) = v23;
        operator delete(v23);
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
      }
      *(_OWORD *)v22 = v33;
      *(_QWORD *)(v22 + 16) = v34;
    }
    for (j = 0; j != 360; j += 24)
    {
      v32 = 0;
      std::vector<long long>::vector(&v33, 0x3CuLL, &v32);
      v25 = *((_QWORD *)this + 2) + j;
      v26 = *(void **)v25;
      if (*(_QWORD *)v25)
      {
        *(_QWORD *)(v25 + 8) = v26;
        operator delete(v26);
        *(_QWORD *)v25 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 16) = 0;
      }
      *(_OWORD *)v25 = v33;
      *(_QWORD *)(v25 + 16) = v34;
    }
    v27 = *((double *)this + 5);
    v4 = *((double *)this + 6);
    v28 = v27 - v4;
    v29 = v4 + (v27 - v4) * -0.5;
    if (v29 < v4)
    {
      *((double *)this + 6) = v29;
      v4 = v4 + (v27 - v4) * -0.5;
    }
    v30 = v27;
    if (v29 > v27)
    {
      *((double *)this + 5) = v29;
      v30 = v29;
    }
    v31 = v27 + v28 * 0.5;
    if (v31 < v4)
    {
      *((double *)this + 6) = v31;
      v4 = v31;
    }
    if (v31 > v30)
      *((double *)this + 5) = v31;
  }
}

uint64_t turi::visualization::heatmap_result::widen_y(uint64_t this, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v2 = *(double *)(this + 64);
  while (v2 > a2 || *(double *)(this + 56) < a2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(this + 16);
    do
    {
      v5 = 0;
      v6 = *(_QWORD *)(v4 + 24 * v3);
      do
      {
        *(_QWORD *)(v6 + 8 * v5 + 232) += *(_QWORD *)(v6 + 8 * v5 + 224);
        v7 = v5 + 29;
        v5 -= 2;
      }
      while (v7 > 2);
      v8 = 0;
      do
      {
        *(_QWORD *)(v6 + 8 * v8 + 240) += *(_QWORD *)(v6 + 8 * v8 + 248);
        v9 = v8 + 30;
        v8 += 2;
      }
      while (v9 < 0x3A);
      v10 = 240;
      v11 = 232;
      v12 = 240;
      v13 = 232;
      do
      {
        *(_QWORD *)(v6 + v12) = *(_QWORD *)(v6 + v10);
        *(_QWORD *)(v6 + v13) = *(_QWORD *)(v6 + v11);
        v13 -= 8;
        v12 += 8;
        v11 -= 16;
        v10 += 16;
      }
      while (v13 != 112);
      *(_QWORD *)(v6 + 472) = 0;
      *(_OWORD *)(v6 + 440) = 0uLL;
      *(_OWORD *)(v6 + 456) = 0uLL;
      *(_OWORD *)(v6 + 408) = 0uLL;
      *(_OWORD *)(v6 + 424) = 0uLL;
      *(_OWORD *)(v6 + 376) = 0uLL;
      *(_OWORD *)(v6 + 392) = 0uLL;
      *(_OWORD *)(v6 + 360) = 0uLL;
      *(_OWORD *)v6 = 0uLL;
      *(_OWORD *)(v6 + 16) = 0uLL;
      *(_OWORD *)(v6 + 32) = 0uLL;
      *(_OWORD *)(v6 + 48) = 0uLL;
      *(_OWORD *)(v6 + 64) = 0uLL;
      *(_OWORD *)(v6 + 80) = 0uLL;
      *(_OWORD *)(v6 + 96) = 0uLL;
      ++v3;
      *(_QWORD *)(v6 + 112) = 0;
    }
    while (v3 != 60);
    v14 = *(double *)(this + 56);
    v15 = v14 - v2;
    v16 = v2 + (v14 - v2) * -0.5;
    if (v16 < v2)
    {
      *(double *)(this + 64) = v16;
      v2 = v2 + (v14 - v2) * -0.5;
    }
    v17 = v14;
    if (v16 > v14)
    {
      *(double *)(this + 56) = v16;
      v17 = v16;
    }
    v18 = v14 + v15 * 0.5;
    if (v18 < v2)
    {
      *(double *)(this + 64) = v18;
      v2 = v18;
    }
    if (v18 > v17)
      *(double *)(this + 56) = v18;
  }
  return this;
}

void turi::visualization::heatmap_result::add_element_simple(turi::visualization::heatmap_result *this, const turi::flexible_type *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t v7;
  unint64_t *v8;
  unsigned int v9;
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  _QWORD v19[3];
  void **v20;

  v3 = *(_QWORD *)a2;
  memset(v19, 0, sizeof(v19));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v19, *(uint64_t **)(v3 + 8), *(uint64_t **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 4);
  v4 = *(unint64_t **)v19[0];
  v5 = *(unsigned __int8 *)(v19[0] + 12);
  if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
  {
    do
      v7 = __ldaxr(v4);
    while (__stlxr(v7 + 1, v4));
  }
  v8 = *(unint64_t **)(v19[0] + 16);
  v9 = *(unsigned __int8 *)(v19[0] + 28);
  if (v9 <= 9 && ((1 << v9) & 0x33C) != 0)
  {
    do
      v11 = __ldaxr(v8);
    while (__stlxr(v11 + 1, v8));
  }
  if (v5)
  {
    if (v5 != 1)
      goto LABEL_23;
    v12 = *(double *)&v4;
    if (v9)
    {
LABEL_14:
      if (v9 == 1)
      {
        v13 = *(double *)&v8;
        goto LABEL_18;
      }
LABEL_23:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Expected X axis to be int or float in heatmap.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  else
  {
    v12 = (double)(uint64_t)v4;
    if (v9)
      goto LABEL_14;
  }
  v13 = (double)(uint64_t)v8;
LABEL_18:
  turi::visualization::heatmap_result::widen_x(this, v12);
  turi::visualization::heatmap_result::widen_y((uint64_t)this, v13);
  v14 = vcvtmd_u64_f64((v12 - *((double *)this + 6)) / (*((double *)this + 5) - *((double *)this + 6)) * 60.0);
  v15 = 59;
  if (v14 == 60)
    v14 = 59;
  v16 = vcvtmd_u64_f64((v13 - *((double *)this + 8)) / (*((double *)this + 7) - *((double *)this + 8)) * 60.0);
  if (v16 != 60)
    v15 = v16;
  v17 = *(_QWORD *)(*((_QWORD *)this + 2) + 24 * v14);
  ++*(_QWORD *)(v17 + 8 * v15);
  v20 = (void **)v19;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_2186045D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;

  __cxa_free_exception(v14);
  switch(v16)
  {
    case 2:
      do
      {
        v18 = __ldaxr((unint64_t *)v13);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unint64_t *)v13));
      if (v19)
        v20 = 1;
      else
        v20 = v13 == 0;
      if (v20)
        goto LABEL_45;
      if (*(char *)(v13 + 31) < 0)
        operator delete(*(void **)(v13 + 8));
      v21 = (_QWORD *)v13;
      v22 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      do
      {
        v30 = __ldaxr((unint64_t *)v13);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unint64_t *)v13));
      if (v31)
        v32 = 1;
      else
        v32 = v13 == 0;
      if (v32)
        goto LABEL_45;
      v33 = *(void **)(v13 + 8);
      if (v33)
      {
        *(_QWORD *)(v13 + 16) = v33;
        operator delete(v33);
      }
      v21 = (_QWORD *)v13;
      v22 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      do
      {
        v23 = __ldaxr((unint64_t *)v13);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unint64_t *)v13));
      if (v24)
        v25 = 1;
      else
        v25 = v13 == 0;
      if (v25)
        goto LABEL_45;
      a12 = (uint64_t *)(v13 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_36;
    case 5:
      do
      {
        v34 = __ldaxr((unint64_t *)v13);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unint64_t *)v13));
      if (v35)
        v36 = 1;
      else
        v36 = v13 == 0;
      if (v36)
        goto LABEL_45;
      a12 = (uint64_t *)(v13 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_36:
      v21 = (_QWORD *)v13;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      do
      {
        v37 = __ldaxr((unint64_t *)v13);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, (unint64_t *)v13));
      if (v38)
        v39 = 1;
      else
        v39 = v13 == 0;
      if (v39)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)(v13 + 16));
      v21 = (_QWORD *)v13;
      v29 = -235920773;
      goto LABEL_43;
    case 9:
      do
      {
        v26 = __ldaxr((unint64_t *)v13);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)v13));
      if (v27)
        v28 = 1;
      else
        v28 = v13 == 0;
      if (v28)
        goto LABEL_45;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v13);
      v29 = 2071181815;
LABEL_43:
      v22 = v29 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v21, v22);
LABEL_45:
      switch(v15)
      {
        case 2:
          do
          {
            v40 = __ldaxr((unint64_t *)v12);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, (unint64_t *)v12));
          if (v41)
            v42 = 1;
          else
            v42 = v12 == 0;
          if (v42)
            goto LABEL_89;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)(v12 + 8));
          v43 = (_QWORD *)v12;
          v44 = 0x1012C404EF22A49;
          goto LABEL_88;
        case 3:
          do
          {
            v52 = __ldaxr((unint64_t *)v12);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, (unint64_t *)v12));
          if (v53)
            v54 = 1;
          else
            v54 = v12 == 0;
          if (v54)
            goto LABEL_89;
          v55 = *(void **)(v12 + 8);
          if (v55)
          {
            *(_QWORD *)(v12 + 16) = v55;
            operator delete(v55);
          }
          v43 = (_QWORD *)v12;
          v44 = 0x1080C409938AC02;
          goto LABEL_88;
        case 4:
          do
          {
            v45 = __ldaxr((unint64_t *)v12);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, (unint64_t *)v12));
          if (v46)
            v47 = 1;
          else
            v47 = v12 == 0;
          if (v47)
            goto LABEL_89;
          a12 = (uint64_t *)(v12 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
          goto LABEL_80;
        case 5:
          do
          {
            v56 = __ldaxr((unint64_t *)v12);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, (unint64_t *)v12));
          if (v57)
            v58 = 1;
          else
            v58 = v12 == 0;
          if (v58)
            goto LABEL_89;
          a12 = (uint64_t *)(v12 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_80:
          v43 = (_QWORD *)v12;
          v44 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        case 8:
          do
          {
            v59 = __ldaxr((unint64_t *)v12);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, (unint64_t *)v12));
          if (v60)
            v61 = 1;
          else
            v61 = v12 == 0;
          if (v61)
            goto LABEL_89;
          boost::detail::shared_count::~shared_count((unsigned int **)(v12 + 16));
          v43 = (_QWORD *)v12;
          v51 = -235920773;
          goto LABEL_87;
        case 9:
          do
          {
            v48 = __ldaxr((unint64_t *)v12);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, (unint64_t *)v12));
          if (v49)
            v50 = 1;
          else
            v50 = v12 == 0;
          if (v50)
            goto LABEL_89;
          v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
          v51 = 2071181815;
LABEL_87:
          v44 = v51 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v43, v44);
LABEL_89:
          a12 = &a9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_89;
      }
    default:
      goto LABEL_45;
  }
}

void `non-virtual thunk to'turi::visualization::heatmap_result::add_element_simple(turi::visualization::heatmap_result *this, const turi::flexible_type *a2)
{
  turi::visualization::heatmap_result::add_element_simple((turi::visualization::heatmap_result *)((char *)this - 8), a2);
}

void turi::visualization::heatmap_result::combine(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(turi::visualization::heatmap_result *__hidden);
  void *v17;
  _QWORD v18[3];
  __int128 v19;
  __int128 v20;
  void **v21;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v16 = off_24D94BDB8;
  v17 = &unk_24D94BE20;
  memset(v18, 0, sizeof(v18));
  std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(v18, v3[2], v3[3], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[3] - v3[2]) >> 3));
  v5 = *(_OWORD *)(v4 + 7);
  v19 = *(_OWORD *)(v4 + 5);
  v20 = v5;
  if (*((double *)&v19 + 1) >= *(double *)(a1 + 48))
    v6 = *(double *)(a1 + 48);
  else
    v6 = *((double *)&v19 + 1);
  if (*(double *)(a1 + 40) >= *(double *)&v19)
    v7 = *(double *)(a1 + 40);
  else
    v7 = *(double *)&v19;
  if (*((double *)&v20 + 1) >= *(double *)(a1 + 64))
    v8 = *(double *)(a1 + 64);
  else
    v8 = *((double *)&v20 + 1);
  if (*(double *)(a1 + 56) >= *(double *)&v20)
    v9 = *(double *)(a1 + 56);
  else
    v9 = *(double *)&v20;
  turi::visualization::heatmap_result::widen_x((turi::visualization::heatmap_result *)a1, v6);
  turi::visualization::heatmap_result::widen_x((turi::visualization::heatmap_result *)a1, v7);
  turi::visualization::heatmap_result::widen_y(a1, v8);
  turi::visualization::heatmap_result::widen_y(a1, v9);
  turi::visualization::heatmap_result::widen_x((turi::visualization::heatmap_result *)&v16, v6);
  turi::visualization::heatmap_result::widen_x((turi::visualization::heatmap_result *)&v16, v7);
  turi::visualization::heatmap_result::widen_y((uint64_t)&v16, v8);
  turi::visualization::heatmap_result::widen_y((uint64_t)&v16, v9);
  v10 = 0;
  v11 = v18[0];
  v12 = *(_QWORD *)(a1 + 16);
  do
  {
    v13 = 0;
    v14 = *(_QWORD *)(v11 + 24 * v10);
    v15 = *(_QWORD *)(v12 + 24 * v10);
    do
    {
      *(_QWORD *)(v15 + v13) += *(_QWORD *)(v14 + v13);
      v13 += 8;
    }
    while (v13 != 480);
    ++v10;
  }
  while (v10 != 60);
  v16 = off_24D94BDB8;
  v17 = &unk_24D94BE20;
  v21 = (void **)v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_218604AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::visualization::heatmap_result::~heatmap_result(turi::visualization::heatmap_result *this)
{
  void **v1;

  *(_QWORD *)this = off_24D94BDB8;
  *((_QWORD *)this + 1) = &unk_24D94BE20;
  v1 = (void **)((char *)this + 16);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_24D94BDB8;
  *((_QWORD *)this + 1) = &unk_24D94BE20;
  v2 = (void **)((char *)this + 16);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](this, 0x10A1C40C1C5F98DLL);
}

void `non-virtual thunk to'turi::visualization::heatmap_result::combine(uint64_t a1, void *a2)
{
  turi::visualization::heatmap_result::combine(a1 - 8, a2);
}

void turi::visualization::heatmap_result::emit(turi::visualization::heatmap_result *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  unsigned int v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123[2];
  _BYTE v124[13];
  _BYTE v125[13];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v121 = 0uLL;
  v122 = 0;
  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = 0;
    v5 = v2 / 24;
    v6 = (double)v5;
    if (v5 <= 1)
      v5 = 1;
    v116 = v5;
    do
    {
      v117 = v4;
      v7 = (_QWORD *)(*((_QWORD *)this + 2) + 24 * v4);
      v8 = v7[1] - *v7;
      if (v8)
      {
        v9 = 0;
        v10 = *((double *)this + 6);
        v11 = *((double *)this + 5) - v10;
        v12 = *((double *)this + 7) - *((double *)this + 8);
        v13 = v10 + (double)v4 / v6 * v11;
        v14 = v13 + v11 / 60.0;
        v15 = v8 >> 3;
        v16 = (double)v15;
        if (v15 <= 1)
          v17 = 1;
        else
          v17 = v15;
        do
        {
          v118 = 0;
          v119 = 0;
          v120 = 0;
          v18 = *(_QWORD *)(*v7 + 8 * v9);
          v19 = *((double *)this + 8);
          turi::flexible_type::flexible_type((turi::flexible_type *)v124, "x_left");
          *(_DWORD *)&v125[8] = 0;
          v125[12] = 1;
          *(double *)v125 = v13;
          v20 = v119;
          if ((unint64_t)v119 >= v120)
          {
            v23 = (uint64_t *)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v118, (uint64_t *)v124);
          }
          else
          {
            *v119 = 0;
            *((_DWORD *)v20 + 2) = 0;
            *((_BYTE *)v20 + 12) = 0;
            v21 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v20 + 5) = *(_QWORD *)&v124[5];
            *v20 = v21;
            *((_BYTE *)v20 + 12) = v124[12];
            v124[12] = 0;
            v20[2] = 0;
            *((_DWORD *)v20 + 6) = 0;
            *((_BYTE *)v20 + 28) = 0;
            v22 = *(_QWORD *)v125;
            *(uint64_t *)((char *)v20 + 21) = *(_QWORD *)&v125[5];
            v20[2] = v22;
            *((_BYTE *)v20 + 28) = v125[12];
            v125[12] = 0;
            v23 = v20 + 4;
          }
          v119 = v23;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v124);
          turi::flexible_type::flexible_type((turi::flexible_type *)v124, "x_right");
          *(_DWORD *)&v125[8] = 0;
          v125[12] = 1;
          *(double *)v125 = v14;
          v24 = v119;
          if ((unint64_t)v119 >= v120)
          {
            v27 = (uint64_t *)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v118, (uint64_t *)v124);
          }
          else
          {
            *v119 = 0;
            *((_DWORD *)v24 + 2) = 0;
            *((_BYTE *)v24 + 12) = 0;
            v25 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v24 + 5) = *(_QWORD *)&v124[5];
            *v24 = v25;
            *((_BYTE *)v24 + 12) = v124[12];
            v124[12] = 0;
            v24[2] = 0;
            *((_DWORD *)v24 + 6) = 0;
            *((_BYTE *)v24 + 28) = 0;
            v26 = *(_QWORD *)v125;
            *(uint64_t *)((char *)v24 + 21) = *(_QWORD *)&v125[5];
            v24[2] = v26;
            *((_BYTE *)v24 + 28) = v125[12];
            v125[12] = 0;
            v27 = v24 + 4;
          }
          v119 = v27;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v124);
          turi::flexible_type::flexible_type((turi::flexible_type *)v124, "y_left");
          v28 = v19 + (double)v9 / v16 * v12;
          *(_DWORD *)&v125[8] = 0;
          v125[12] = 1;
          *(double *)v125 = v28;
          v29 = v119;
          if ((unint64_t)v119 >= v120)
          {
            v32 = (uint64_t *)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v118, (uint64_t *)v124);
          }
          else
          {
            *v119 = 0;
            *((_DWORD *)v29 + 2) = 0;
            *((_BYTE *)v29 + 12) = 0;
            v30 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v29 + 5) = *(_QWORD *)&v124[5];
            *v29 = v30;
            *((_BYTE *)v29 + 12) = v124[12];
            v124[12] = 0;
            v29[2] = 0;
            *((_DWORD *)v29 + 6) = 0;
            *((_BYTE *)v29 + 28) = 0;
            v31 = *(_QWORD *)v125;
            *(uint64_t *)((char *)v29 + 21) = *(_QWORD *)&v125[5];
            v29[2] = v31;
            *((_BYTE *)v29 + 28) = v125[12];
            v125[12] = 0;
            v32 = v29 + 4;
          }
          v119 = v32;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v124);
          turi::flexible_type::flexible_type((turi::flexible_type *)v124, "y_right");
          *(_DWORD *)&v125[8] = 0;
          v125[12] = 1;
          *(double *)v125 = v12 / 60.0 + v28;
          v33 = v119;
          if ((unint64_t)v119 >= v120)
          {
            v36 = (uint64_t *)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v118, (uint64_t *)v124);
          }
          else
          {
            *v119 = 0;
            *((_DWORD *)v33 + 2) = 0;
            *((_BYTE *)v33 + 12) = 0;
            v34 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v33 + 5) = *(_QWORD *)&v124[5];
            *v33 = v34;
            *((_BYTE *)v33 + 12) = v124[12];
            v124[12] = 0;
            v33[2] = 0;
            *((_DWORD *)v33 + 6) = 0;
            *((_BYTE *)v33 + 28) = 0;
            v35 = *(_QWORD *)v125;
            *(uint64_t *)((char *)v33 + 21) = *(_QWORD *)&v125[5];
            v33[2] = v35;
            *((_BYTE *)v33 + 28) = v125[12];
            v125[12] = 0;
            v36 = v33 + 4;
          }
          v119 = v36;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v124);
          turi::flexible_type::flexible_type((turi::flexible_type *)v124, "count");
          v125[12] = 0;
          *(_DWORD *)&v125[8] = 0;
          *(_QWORD *)v125 = v18;
          v37 = v119;
          if ((unint64_t)v119 >= v120)
          {
            v40 = (uint64_t *)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__push_back_slow_path<std::pair<turi::flexible_type,turi::flexible_type>>((uint64_t *)&v118, (uint64_t *)v124);
          }
          else
          {
            *v119 = 0;
            *((_DWORD *)v37 + 2) = 0;
            *((_BYTE *)v37 + 12) = 0;
            v38 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v37 + 5) = *(_QWORD *)&v124[5];
            *v37 = v38;
            *((_BYTE *)v37 + 12) = v124[12];
            v124[12] = 0;
            v37[2] = 0;
            *((_DWORD *)v37 + 6) = 0;
            *((_BYTE *)v37 + 28) = 0;
            v39 = *(_QWORD *)v125;
            *(uint64_t *)((char *)v37 + 21) = *(_QWORD *)&v125[5];
            v37[2] = v39;
            *((_BYTE *)v37 + 28) = v125[12];
            v125[12] = 0;
            v40 = v37 + 4;
          }
          v119 = v40;
          std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v124);
          *(uint64_t *)((char *)v123 + 5) = 0x500000000000000;
          v123[0] = 0;
          v41 = (_QWORD *)operator new();
          v42 = v41;
          *v41 = 0;
          v41[1] = 0;
          v43 = (void **)(v41 + 1);
          v41[2] = 0;
          v41[3] = 0;
          v123[0] = (uint64_t)v41;
          *v41 = 1;
          switch(BYTE4(v123[1]))
          {
            case 2:
              if (*v41 != 1)
              {
                v44 = (_QWORD *)operator new();
                v45 = v123[0];
                *v44 = *(_QWORD *)v123[0];
                v46 = (std::string *)(v44 + 1);
                if (*(char *)(v45 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)(v45 + 8), *(_QWORD *)(v45 + 16));
                }
                else
                {
                  v47 = *(_OWORD *)(v45 + 8);
                  v44[3] = *(_QWORD *)(v45 + 24);
                  *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                }
                v123[0] = (uint64_t)v44;
                *v44 = 1;
                do
                {
                  v78 = __ldaxr(v42);
                  v79 = v78 - 1;
                }
                while (__stlxr(v79, v42));
                if (!v79)
                {
                  v64 = 0x1012C404EF22A49;
                  if (*((char *)v42 + 31) < 0)
                  {
                    operator delete(*v43);
                    v64 = 0x1012C404EF22A49;
                  }
                  goto LABEL_69;
                }
              }
              break;
            case 3:
              if (*v41 != 1)
              {
                v59 = (_QWORD *)operator new();
                v60 = v123[0];
                *v59 = *(_QWORD *)v123[0];
                v59[2] = 0;
                v59[3] = 0;
                v59[1] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v59 + 1, *(const void **)(v60 + 8), *(_QWORD *)(v60 + 16), (uint64_t)(*(_QWORD *)(v60 + 16) - *(_QWORD *)(v60 + 8)) >> 3);
                v123[0] = (uint64_t)v59;
                *v59 = 1;
                do
                {
                  v61 = __ldaxr(v42);
                  v62 = v61 - 1;
                }
                while (__stlxr(v62, v42));
                if (!v62)
                {
                  v63 = *v43;
                  v64 = 0x1080C409938AC02;
                  if (*v43)
                  {
                    v42[2] = v63;
                    operator delete(v63);
                    v64 = 0x1080C409938AC02;
                  }
                  goto LABEL_69;
                }
              }
              break;
            case 4:
              if (*v41 != 1)
              {
                v48 = (_QWORD *)operator new();
                v49 = v123[0];
                *v48 = *(_QWORD *)v123[0];
                v48[2] = 0;
                v48[3] = 0;
                v48[1] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v48 + 1, *(uint64_t **)(v49 + 8), *(uint64_t **)(v49 + 16), (uint64_t)(*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 8)) >> 4);
                v123[0] = (uint64_t)v48;
                *v48 = 1;
                do
                {
                  v50 = __ldaxr(v42);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v42));
                if (!v51)
                {
                  *(_QWORD *)v124 = v43;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
                  goto LABEL_53;
                }
              }
              break;
            case 5:
              if (*v41 != 1)
              {
                v65 = (_QWORD *)operator new();
                v66 = v123[0];
                *v65 = *(_QWORD *)v123[0];
                v65[2] = 0;
                v65[3] = 0;
                v65[1] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v65 + 1, *(uint64_t **)(v66 + 8), *(uint64_t **)(v66 + 16), (uint64_t)(*(_QWORD *)(v66 + 16) - *(_QWORD *)(v66 + 8)) >> 5);
                v123[0] = (uint64_t)v65;
                *v65 = 1;
                do
                {
                  v67 = __ldaxr(v42);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v42));
                if (!v68)
                {
                  *(_QWORD *)v124 = v43;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
LABEL_53:
                  v64 = 0x1020C405E66F15BLL;
                  goto LABEL_69;
                }
              }
              break;
            case 8:
              if (*v41 != 1)
              {
                v69 = operator new();
                v70 = v123[0];
                *(_QWORD *)v69 = *(_QWORD *)v123[0];
                *(_QWORD *)(v69 + 8) = *(_QWORD *)(v70 + 8);
                v71 = *(_QWORD *)(v70 + 16);
                *(_QWORD *)(v69 + 16) = v71;
                if (v71)
                {
                  v72 = (unsigned int *)(v71 + 8);
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                }
                v74 = *(_OWORD *)(v70 + 24);
                v75 = *(_OWORD *)(v70 + 40);
                *(_OWORD *)(v69 + 56) = *(_OWORD *)(v70 + 56);
                *(_OWORD *)(v69 + 40) = v75;
                *(_OWORD *)(v69 + 24) = v74;
                v123[0] = v69;
                *(_QWORD *)v69 = 1;
                do
                {
                  v76 = __ldaxr(v42);
                  v77 = v76 - 1;
                }
                while (__stlxr(v77, v42));
                if (!v77)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v42 + 2);
                  v58 = -235920773;
                  goto LABEL_62;
                }
              }
              break;
            case 9:
              if (*v41 != 1)
              {
                v52 = (_QWORD *)operator new();
                v53 = v123[0] + 8;
                *v52 = *(_QWORD *)v123[0];
                turi::flexible_type_impl::ndarray<double>::ndarray(v52 + 1, v53);
                v123[0] = (uint64_t)v52;
                *v52 = 1;
                do
                {
                  v54 = __ldaxr(v42);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v42));
                if (!v55)
                {
                  v56 = (void *)v42[6];
                  if (v56)
                  {
                    v42[7] = v56;
                    operator delete(v56);
                  }
                  v57 = (void *)v42[3];
                  if (v57)
                  {
                    v42[4] = v57;
                    operator delete(v57);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v43);
                  v58 = 2071181815;
LABEL_62:
                  v64 = v58 | 0x1030C4000000000;
LABEL_69:
                  MEMORY[0x219A19A08](v42, v64);
                }
              }
              break;
            default:
              break;
          }
          if ((uint64_t **)(v123[0] + 8) != &v118)
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)(v123[0] + 8), v118, v119, ((char *)v119 - (char *)v118) >> 5);
          std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)&v121, v123);
          switch(BYTE4(v123[1]))
          {
            case 2:
              v80 = (unint64_t *)v123[0];
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v83 = v123[0];
                if (v123[0])
                {
                  if (*(char *)(v123[0] + 31) < 0)
                    operator delete(*(void **)(v123[0] + 8));
                  v84 = v83;
                  v85 = 0x1012C404EF22A49;
                  goto LABEL_113;
                }
              }
              break;
            case 3:
              v97 = (unint64_t *)v123[0];
              do
              {
                v98 = __ldaxr(v97);
                v99 = v98 - 1;
              }
              while (__stlxr(v99, v97));
              if (!v99)
              {
                v100 = v123[0];
                if (v123[0])
                {
                  v101 = *(void **)(v123[0] + 8);
                  if (v101)
                  {
                    *(_QWORD *)(v123[0] + 16) = v101;
                    operator delete(v101);
                  }
                  v84 = v100;
                  v85 = 0x1080C409938AC02;
                  goto LABEL_113;
                }
              }
              break;
            case 4:
              v86 = (unint64_t *)v123[0];
              do
              {
                v87 = __ldaxr(v86);
                v88 = v87 - 1;
              }
              while (__stlxr(v88, v86));
              if (!v88)
              {
                v89 = v123[0];
                if (v123[0])
                {
                  *(_QWORD *)v124 = v123[0] + 8;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
                  goto LABEL_106;
                }
              }
              break;
            case 5:
              v102 = (unint64_t *)v123[0];
              do
              {
                v103 = __ldaxr(v102);
                v104 = v103 - 1;
              }
              while (__stlxr(v104, v102));
              if (!v104)
              {
                v89 = v123[0];
                if (v123[0])
                {
                  *(_QWORD *)v124 = v123[0] + 8;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
LABEL_106:
                  v84 = v89;
                  v85 = 0x1020C405E66F15BLL;
                  goto LABEL_113;
                }
              }
              break;
            case 8:
              v105 = (unint64_t *)v123[0];
              do
              {
                v106 = __ldaxr(v105);
                v107 = v106 - 1;
              }
              while (__stlxr(v107, v105));
              if (!v107)
              {
                v108 = v123[0];
                if (v123[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v123[0] + 16));
                  v84 = v108;
                  v96 = -235920773;
                  goto LABEL_112;
                }
              }
              break;
            case 9:
              v90 = (unint64_t *)v123[0];
              do
              {
                v91 = __ldaxr(v90);
                v92 = v91 - 1;
              }
              while (__stlxr(v92, v90));
              if (!v92)
              {
                v93 = v123[0];
                if (v123[0])
                {
                  v94 = *(void **)(v123[0] + 48);
                  if (v94)
                  {
                    *(_QWORD *)(v123[0] + 56) = v94;
                    operator delete(v94);
                  }
                  v95 = *(void **)(v93 + 24);
                  if (v95)
                  {
                    *(_QWORD *)(v93 + 32) = v95;
                    operator delete(v95);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v93 + 8);
                  v84 = v93;
                  v96 = 2071181815;
LABEL_112:
                  v85 = v96 | 0x1030C4000000000;
LABEL_113:
                  MEMORY[0x219A19A08](v84, v85);
                }
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v124 = &v118;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
          ++v9;
        }
        while (v9 != v17);
      }
      v4 = v117 + 1;
    }
    while (v117 + 1 != v116);
  }
  *(uint64_t *)((char *)a2 + 5) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 12) = 4;
  v109 = operator new();
  *(_QWORD *)v109 = 0;
  *(_QWORD *)(v109 + 8) = 0;
  *(_QWORD *)(v109 + 16) = 0;
  *(_QWORD *)(v109 + 24) = 0;
  *a2 = v109;
  *(_QWORD *)v109 = 1;
  if (*(_QWORD *)v109 != 1)
  {
    v110 = (_QWORD *)operator new();
    v111 = *(uint64_t **)(v109 + 8);
    *v110 = *(_QWORD *)v109;
    v110[2] = 0;
    v110[3] = 0;
    v110[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v110 + 1, v111, *(uint64_t **)(v109 + 16), (uint64_t)(*(_QWORD *)(v109 + 16) - (_QWORD)v111) >> 4);
    *a2 = (uint64_t)v110;
    *v110 = 1;
    do
    {
      v112 = __ldaxr((unint64_t *)v109);
      v113 = v112 - 1;
    }
    while (__stlxr(v113, (unint64_t *)v109));
    if (!v113)
    {
      *(_QWORD *)v124 = v109 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
      MEMORY[0x219A19A08](v109, 0x1020C405E66F15BLL);
    }
  }
  v114 = *a2;
  std::vector<turi::flexible_type>::__vdeallocate((void **)(*a2 + 8));
  *(_OWORD *)(v114 + 8) = v121;
  *(_QWORD *)(v114 + 24) = v122;
  v121 = 0uLL;
  v122 = 0;
  *(_QWORD *)v124 = &v121;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
}

void sub_2186056A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  unint64_t *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  MEMORY[0x219A19A08](v22, 0x1020C405E66F15BLL);
  do
  {
    v24 = __ldaxr(v21);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v21));
  if (!v25)
  {
    v26 = *a9;
    if (*a9)
    {
      a21 = (void **)(v26 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
      MEMORY[0x219A19A08](v26, 0x1020C405E66F15BLL);
    }
    *a9 = 0;
  }
  *a9 = 0;
  *((_DWORD *)a9 + 2) = 0;
  *((_BYTE *)a9 + 12) = 0;
  a21 = (void **)&a15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'turi::visualization::heatmap_result::emit(turi::visualization::heatmap_result *this@<X0>, uint64_t *a2@<X8>)
{
  turi::visualization::heatmap_result::emit((turi::visualization::heatmap_result *)((char *)this - 8), a2);
}

BOOL turi::visualization::heatmap_result::support_type(uint64_t a1, int a2)
{
  return a2 == 4;
}

BOOL `non-virtual thunk to'turi::visualization::heatmap_result::support_type(uint64_t a1, int a2)
{
  return a2 == 4;
}

_QWORD *turi::visualization::heatmap_result::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "2d Heatmap");
}

_QWORD *`non-virtual thunk to'turi::visualization::heatmap_result::name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "2d Heatmap");
}

void turi::visualization::heatmap_result::save()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "save not supported for heatmap result");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_218605B38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'turi::visualization::heatmap_result::save()
{
  turi::visualization::heatmap_result::save();
}

void turi::visualization::heatmap_result::load()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "load not supported for heatmap result");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_218605B94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'turi::visualization::heatmap_result::load()
{
  turi::visualization::heatmap_result::load();
}

uint64_t turi::visualization::heatmap_result::vega_column_data(turi::visualization::heatmap_result *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  turi::flexible_type_impl *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type size;
  unint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[11];
  char v53;
  uint64_t v54;
  std::string v55;
  void **v56[2];
  uint64_t v57;
  uint64_t v58;
  void *__p;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
  (*(void (**)(uint64_t *__return_ptr, turi::visualization::heatmap_result *))(*(_QWORD *)this + 48))(&v62, this);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v48, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(_QWORD *)(v62 + 16) - *(_QWORD *)(v62 + 8)) >> 4);
  v2 = v48;
  if (v49 != v48)
  {
    v3 = 0;
    v4 = 0;
    v5 = (void **)*MEMORY[0x24BEDB7F0];
    v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v47 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v45 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v6 = (turi::flexible_type_impl *)(v2 + v3);
      switch(*(_BYTE *)(v2 + v3 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v56);
          std::ostream::operator<<();
          std::stringbuf::str();
          v56[0] = v5;
          *(void ***)((char *)v56 + (_QWORD)*(v5 - 3)) = v47;
          v57 = v46;
          v7 = v45;
          goto LABEL_12;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v56);
          std::ostream::operator<<();
          std::stringbuf::str();
          v56[0] = v5;
          *(void ***)((char *)v56 + (_QWORD)*(v5 - 3)) = v47;
          v7 = MEMORY[0x24BEDB848] + 16;
          v57 = v46;
LABEL_12:
          v58 = v7;
          if (v60 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v61);
          break;
        case 2:
          v8 = *(_QWORD *)v6;
          if (*(char *)(*(_QWORD *)v6 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
          }
          else
          {
            v9 = *(_OWORD *)(v8 + 8);
            v55.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
            *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v9;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v56, (_QWORD *)(*(_QWORD *)v6 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v56, (uint64_t *)(*(_QWORD *)v6 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v56, (_QWORD *)(*(_QWORD *)v6 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v6, &v55);
          break;
        case 7:
          memset(&v55, 0, sizeof(v55));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v56, (_QWORD *)(*(_QWORD *)v6 + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v55;
      else
        v10 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v10, size);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v2 = v48;
      v12 = (v49 - v48) >> 4;
      if (v4 != v12 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)",", 1);
        v2 = v48;
        v12 = (v49 - v48) >> 4;
      }
      ++v4;
      v3 += 16;
    }
    while (v4 < v12);
  }
  std::stringbuf::str();
  v56[0] = (void **)&v48;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v56);
  v13 = (_QWORD *)MEMORY[0x24BEDB7F0];
  switch(v63)
  {
    case 2:
      v14 = (unint64_t *)v62;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v62;
        if (v62)
        {
          if (*(char *)(v62 + 31) < 0)
            operator delete(*(void **)(v62 + 8));
          v18 = v17;
          v19 = 0x1012C404EF22A49;
          goto LABEL_71;
        }
      }
      break;
    case 3:
      v31 = (unint64_t *)v62;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v62;
        if (v62)
        {
          v35 = *(void **)(v62 + 8);
          if (v35)
          {
            *(_QWORD *)(v62 + 16) = v35;
            operator delete(v35);
          }
          v18 = v34;
          v19 = 0x1080C409938AC02;
          goto LABEL_71;
        }
      }
      break;
    case 4:
      v20 = (unint64_t *)v62;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v62;
        if (v62)
        {
          v56[0] = (void **)(v62 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v56);
          goto LABEL_64;
        }
      }
      break;
    case 5:
      v36 = (unint64_t *)v62;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v23 = v62;
        if (v62)
        {
          v56[0] = (void **)(v62 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v56);
LABEL_64:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          goto LABEL_71;
        }
      }
      break;
    case 8:
      v39 = (unint64_t *)v62;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = v62;
        if (v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v62 + 16));
          v18 = v42;
          v30 = -235920773;
          goto LABEL_70;
        }
      }
      break;
    case 9:
      v24 = (unint64_t *)v62;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v62;
        if (v62)
        {
          v28 = *(void **)(v62 + 48);
          if (v28)
          {
            *(_QWORD *)(v62 + 56) = v28;
            operator delete(v28);
          }
          v29 = *(void **)(v27 + 24);
          if (v29)
          {
            *(_QWORD *)(v27 + 32) = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27 + 8);
          v18 = v27;
          v30 = 2071181815;
LABEL_70:
          v19 = v30 | 0x1030C4000000000;
LABEL_71:
          MEMORY[0x219A19A08](v18, v19);
        }
      }
      break;
    default:
      break;
  }
  v51[0] = *v13;
  v43 = v13[9];
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = v13[8];
  v52[0] = v43;
  v52[1] = MEMORY[0x24BEDB848] + 16;
  if (v53 < 0)
    operator delete((void *)v52[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v54);
}

void sub_218606154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char a60)
{
  uint64_t v60;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;

  *(_QWORD *)(v60 - 136) = &a15;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v60 - 136));
  switch(*(_BYTE *)(v60 - 116))
  {
    case 2:
      v62 = *(unint64_t **)(v60 - 128);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_39;
      v65 = *(_QWORD *)(v60 - 128);
      if (!v65)
        goto LABEL_39;
      if (*(char *)(v65 + 31) < 0)
        operator delete(*(void **)(v65 + 8));
      v66 = (_QWORD *)v65;
      v67 = 0x1012C404EF22A49;
      break;
    case 3:
      v76 = *(unint64_t **)(v60 - 128);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (v78)
        goto LABEL_39;
      v79 = *(_QWORD **)(v60 - 128);
      if (!v79)
        goto LABEL_39;
      v80 = (void *)v79[1];
      if (v80)
      {
        v79[2] = v80;
        operator delete(v80);
      }
      v66 = v79;
      v67 = 0x1080C409938AC02;
      break;
    case 4:
      v68 = *(unint64_t **)(v60 - 128);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (v70)
        goto LABEL_39;
      v71 = *(_QWORD **)(v60 - 128);
      if (!v71)
        goto LABEL_39;
      a15 = v71 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      goto LABEL_31;
    case 5:
      v81 = *(unint64_t **)(v60 - 128);
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (v83)
        goto LABEL_39;
      v71 = *(_QWORD **)(v60 - 128);
      if (!v71)
        goto LABEL_39;
      a15 = v71 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
LABEL_31:
      v66 = v71;
      v67 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v84 = *(unint64_t **)(v60 - 128);
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = *(_QWORD *)(v60 - 128);
        if (v87)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v87 + 16));
          MEMORY[0x219A19A08](v87, 0x1030C40F1F0227BLL);
        }
        *(_QWORD *)(v60 - 128) = 0;
      }
      goto LABEL_39;
    case 9:
      v72 = *(unint64_t **)(v60 - 128);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (v74)
        goto LABEL_39;
      v75 = *(_QWORD **)(v60 - 128);
      if (!v75)
        goto LABEL_39;
      v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v75);
      v67 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_39;
  }
  MEMORY[0x219A19A08](v66, v67);
LABEL_39:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  turi::thread_pool *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::thread_pool *instance;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void ***v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19[3];
  void **v20[3];
  void ***v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = (void **)"Transformer must be initialized before performing this operation.";
  if (!*(_BYTE *)(a1 + 64))
  {
    v19[0] = (const char **)v20;
    turi::visualization::transformation<turi::gl_sframe,turi::visualization::boxes_and_whiskers_result>::check_init(char const*,BOOL)const::{lambda(void)#1}::operator()(v19);
  }
  v4 = (turi::thread_pool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    *a2 = *(_QWORD *)(a1 + 40);
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(v4);
  v9 = turi::thread_pool::size(instance);
  v10 = *(void ***)(a1 + 56);
  v11 = turi::gl_sframe::size((turi::gl_sframe *)(a1 + 16));
  if ((unint64_t)(v11 - *(_QWORD *)(a1 + 56)) >= *(_QWORD *)(a1 + 8))
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11 - *(_QWORD *)(a1 + 56);
  (*(void (**)(const char ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(v19, a1, v9);
  v13 = (void ***)operator new(0x28uLL);
  *v13 = (void **)&unk_24D94C098;
  v13[1] = (void **)v19;
  v13[2] = (void **)(a1 + 16);
  v13[3] = (void **)v12;
  v13[4] = v10;
  v21 = v13;
  turi::in_parallel((turi::thread_pool *)v20);
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
    goto LABEL_14;
  }
  if (v21)
  {
    v15 = 5;
LABEL_14:
    ((void (*)(void))(*v14)[v15])();
  }
  (*(void (**)(uint64_t, const char ***))(*(_QWORD *)a1 + 72))(a1, v19);
  *(_QWORD *)(a1 + 56) = (char *)v10 + v12;
  v16 = *(_QWORD *)(a1 + 48);
  *a2 = *(_QWORD *)(a1 + 40);
  a2[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v20[0] = (void **)v19;
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](v20);
}

void sub_218606584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__n128 turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get_current@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a2 = off_24D94BDB8;
  *(_QWORD *)(a2 + 8) = &unk_24D94BE20;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((_QWORD *)(a2 + 16), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3));
  result = *(__n128 *)(v3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(v3 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t turi::visualization::groupby<turi::visualization::heatmap_result>::merge_results(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 40) + 40))(*(_QWORD *)(v4 + 40), v2 + 8);
      v2 += 72;
    }
    while (v2 != v3);
  }
  return result;
}

void `non-virtual thunk to'turi::visualization::heatmap_result::~heatmap_result(turi::visualization::heatmap_result *this)
{
  void **v1;

  *((_QWORD *)this - 1) = off_24D94BDB8;
  *(_QWORD *)this = &unk_24D94BE20;
  v1 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  char *v1;
  void **v2;

  *((_QWORD *)this - 1) = off_24D94BDB8;
  v1 = (char *)this - 8;
  *(_QWORD *)this = &unk_24D94BE20;
  v2 = (void **)((char *)this + 8);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x219A19A08](v1, 0x10A1C40C1C5F98DLL);
}

_QWORD *std::vector<std::vector<long long>>::__init_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2186067F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2186068AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::vector<long long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::heatmap,std::allocator<turi::visualization::heatmap>,turi::visualization::heatmap&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<turi::visualization::heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::heatmap&,std::allocator<turi::visualization::heatmap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218606938(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::heatmap>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::heatmap&,std::allocator<turi::visualization::heatmap>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D94BFF8;
  a1[1] = 0;
  std::allocator<turi::visualization::heatmap>::construct[abi:ne180100]<turi::visualization::heatmap,turi::visualization::heatmap&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_218606998(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BFF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::heatmap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94BFF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::heatmap>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<turi::visualization::heatmap>::construct[abi:ne180100]<turi::visualization::heatmap,turi::visualization::heatmap&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = &unk_24D94BF90;
  *(_QWORD *)(a2 + 8) = v5;
  result = turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 16), (const turi::gl_sframe *)(a3 + 16));
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)a2 = &off_24D94BEE0;
  return result;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_218606AE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<long long>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_218606B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization14heatmap_resultENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi13visualization14heatmap_resultENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_218606BEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi13visualization14heatmap_resultENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D94C048;
  a1[1] = 0;
  turi::visualization::heatmap_result::heatmap_result((turi::visualization::heatmap_result *)(a1 + 3));
  return a1;
}

void sub_218606C38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::heatmap_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::heatmap_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::vector<turi::visualization::heatmap_result>::vector(_QWORD *a1, unint64_t a2)
{
  turi::visualization::heatmap_result *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::object_detection::average_precision_calculator::class_data>::__vallocate[abi:ne180100](a1, a2);
    v4 = (turi::visualization::heatmap_result *)a1[1];
    v5 = 9 * a2;
    v6 = (char *)v4 + 72 * a2;
    v7 = 8 * v5;
    do
    {
      turi::visualization::heatmap_result::heatmap_result(v4);
      v4 = (turi::visualization::heatmap_result *)((char *)v4 + 72);
      v7 -= 72;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_218606D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::visualization::boxes_and_whiskers_result>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &unk_24D94C098;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D94C098;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::visualization::transformation<turi::gl_sframe,turi::visualization::heatmap_result>::get(void)::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  unint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  _QWORD v131[2];
  uint64_t ***v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  uint64_t v135;
  void **v136;
  _QWORD v137[3];

  v137[2] = *MEMORY[0x24BDAC8D0];
  v2 = **a1;
  v3 = 0x8E38E38E38E38E39 * (((*a1)[1] - v2) >> 3);
  if (v3 > a2)
  {
    v5 = a1[2];
    v6 = (unint64_t)v5 / v3;
    v7 = a1[3];
    v8 = (unint64_t)v7 + (unint64_t)v5 / v3 * a2;
    v9 = (unint64_t)v5 + (_QWORD)v7;
    v10 = v8 + v6;
    v11 = v3 - 1 == a2 ? v9 : v10;
    turi::gl_sframe::range_iterator((turi::gl_sframe *)a1[1], v8, v11, &v132);
    v131[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v132);
    v131[1] = v12;
    v13 = turi::gl_sframe_range::end((turi::gl_sframe_range *)&v132);
    v14 = v2 + 72 * a2;
    while (v131[0] != v13)
    {
      v15 = (_QWORD *)turi::gl_sframe_range::iterator::dereference((turi::gl_sframe_range::iterator *)v131);
      *(_QWORD *)((char *)v137 + 5) = 0x400000000000000;
      v137[0] = 0;
      v16 = (_QWORD *)operator new();
      *v16 = 0;
      v16[2] = 0;
      v16[3] = 0;
      v16[1] = 0;
      v137[0] = v16;
      *v16 = 1;
      std::vector<turi::flexible_type>::vector(&v134, (uint64_t)(*(_QWORD *)(*v15 + 8) - *(_QWORD *)*v15) >> 4);
      v17 = v134;
      if (*((_QWORD *)&v134 + 1) != (_QWORD)v134)
      {
        v18 = 0;
        do
        {
          v19 = **(_QWORD **)(*(_QWORD *)*v15 + 16 * v18) + 16 * v15[1];
          v20 = v17 + 16 * v18;
          if (v19 != v20)
          {
            switch(*(_BYTE *)(v20 + 12))
            {
              case 2:
                v21 = *(unint64_t **)v20;
                do
                {
                  v22 = __ldaxr(v21);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v21));
                if (!v23)
                {
                  v24 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  if (*((char *)v24 + 31) < 0)
                    operator delete((void *)v24[1]);
                  v25 = v24;
                  v26 = 0x1012C404EF22A49;
                  goto LABEL_51;
                }
                break;
              case 3:
                v38 = *(unint64_t **)v20;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                {
                  v41 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v42 = (void *)v41[1];
                  if (v42)
                  {
                    v41[2] = (unint64_t)v42;
                    operator delete(v42);
                  }
                  v25 = v41;
                  v26 = 0x1080C409938AC02;
                  goto LABEL_51;
                }
                break;
              case 4:
                v27 = *(unint64_t **)v20;
                do
                {
                  v28 = __ldaxr(v27);
                  v29 = v28 - 1;
                }
                while (__stlxr(v29, v27));
                if (!v29)
                {
                  v30 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v136 = (void **)(v30 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
                  goto LABEL_44;
                }
                break;
              case 5:
                v43 = *(unint64_t **)v20;
                do
                {
                  v44 = __ldaxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                {
                  v30 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  v136 = (void **)(v30 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_44:
                  v25 = v30;
                  v26 = 0x1020C405E66F15BLL;
                  goto LABEL_51;
                }
                break;
              case 8:
                v46 = *(unint64_t **)v20;
                do
                {
                  v47 = __ldaxr(v46);
                  v48 = v47 - 1;
                }
                while (__stlxr(v48, v46));
                if (!v48)
                {
                  v49 = *(unint64_t **)v20;
                  if (!*(_QWORD *)v20)
                    goto LABEL_52;
                  boost::detail::shared_count::~shared_count((unsigned int **)v49 + 2);
                  v25 = v49;
                  v37 = -235920773;
                  goto LABEL_50;
                }
                break;
              case 9:
                v31 = *(unint64_t **)v20;
                do
                {
                  v32 = __ldaxr(v31);
                  v33 = v32 - 1;
                }
                while (__stlxr(v33, v31));
                if (!v33)
                {
                  v34 = *(unint64_t **)v20;
                  if (*(_QWORD *)v20)
                  {
                    v35 = (void *)v34[6];
                    if (v35)
                    {
                      v34[7] = (unint64_t)v35;
                      operator delete(v35);
                    }
                    v36 = (void *)v34[3];
                    if (v36)
                    {
                      v34[4] = (unint64_t)v36;
                      operator delete(v36);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v34 + 1));
                    v25 = v34;
                    v37 = 2071181815;
LABEL_50:
                    v26 = v37 | 0x1030C4000000000;
LABEL_51:
                    MEMORY[0x219A19A08](v25, v26);
                  }
LABEL_52:
                  *(_QWORD *)v20 = 0;
                }
                break;
              default:
                break;
            }
            v50 = *(_QWORD *)v19;
            *(_QWORD *)(v20 + 5) = *(_QWORD *)(v19 + 5);
            *(_QWORD *)v20 = v50;
            LODWORD(v50) = *(unsigned __int8 *)(v19 + 12);
            *(_BYTE *)(v20 + 12) = v50;
            v51 = v50 > 9;
            v52 = (1 << v50) & 0x33C;
            if (!v51 && v52 != 0)
            {
              v54 = *(unint64_t **)v20;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 + 1, v54));
            }
          }
          ++v18;
          v17 = v134;
        }
        while (v18 < (uint64_t)(*((_QWORD *)&v134 + 1) - v134) >> 4);
      }
      switch(BYTE4(v137[1]))
      {
        case 2:
          v56 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v57 = (_QWORD *)operator new();
            v58 = v137[0];
            *v57 = *(_QWORD *)v137[0];
            v59 = (std::string *)(v57 + 1);
            if (*(char *)(v58 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)(v58 + 8), *(_QWORD *)(v58 + 16));
            }
            else
            {
              v60 = *(_OWORD *)(v58 + 8);
              v57[3] = *(_QWORD *)(v58 + 24);
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
            }
            v137[0] = v57;
            *v57 = 1;
            do
            {
              v96 = __ldaxr((unint64_t *)v56);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, (unint64_t *)v56));
            if (!v97)
            {
              if (*(char *)(v56 + 31) < 0)
                operator delete(*(void **)(v56 + 8));
              v67 = (unint64_t *)v56;
              v68 = 0x1012C404EF22A49;
              goto LABEL_107;
            }
          }
          break;
        case 3:
          v61 = (unint64_t *)v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v62 = (_QWORD *)operator new();
            v63 = v137[0];
            *v62 = *(_QWORD *)v137[0];
            v62[2] = 0;
            v62[3] = 0;
            v62[1] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v62 + 1, *(const void **)(v63 + 8), *(_QWORD *)(v63 + 16), (uint64_t)(*(_QWORD *)(v63 + 16) - *(_QWORD *)(v63 + 8)) >> 3);
            v137[0] = v62;
            *v62 = 1;
            do
            {
              v64 = __ldaxr(v61);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v61));
            if (!v65)
            {
              v66 = (void *)v61[1];
              if (v66)
              {
                v61[2] = (unint64_t)v66;
                operator delete(v66);
              }
              v67 = v61;
              v68 = 0x1080C409938AC02;
              goto LABEL_107;
            }
          }
          break;
        case 4:
          v69 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v70 = (_QWORD *)operator new();
            v71 = v137[0];
            *v70 = *(_QWORD *)v137[0];
            v70[2] = 0;
            v70[3] = 0;
            v70[1] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v70 + 1, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 4);
            v137[0] = v70;
            *v70 = 1;
            do
            {
              v72 = __ldaxr((unint64_t *)v69);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, (unint64_t *)v69));
            if (!v73)
            {
              v136 = (void **)(v69 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
              goto LABEL_81;
            }
          }
          break;
        case 5:
          v69 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v74 = (_QWORD *)operator new();
            v75 = v137[0];
            *v74 = *(_QWORD *)v137[0];
            v74[2] = 0;
            v74[3] = 0;
            v74[1] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v74 + 1, *(uint64_t **)(v75 + 8), *(uint64_t **)(v75 + 16), (uint64_t)(*(_QWORD *)(v75 + 16) - *(_QWORD *)(v75 + 8)) >> 5);
            v137[0] = v74;
            *v74 = 1;
            do
            {
              v76 = __ldaxr((unint64_t *)v69);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, (unint64_t *)v69));
            if (!v77)
            {
              v136 = (void **)(v69 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v136);
LABEL_81:
              v67 = (unint64_t *)v69;
              v68 = 0x1020C405E66F15BLL;
              goto LABEL_107;
            }
          }
          break;
        case 8:
          v78 = v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v79 = operator new();
            v80 = v137[0];
            *(_QWORD *)v79 = *(_QWORD *)v137[0];
            *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
            v81 = *(_QWORD *)(v80 + 16);
            *(_QWORD *)(v79 + 16) = v81;
            if (v81)
            {
              v82 = (unsigned int *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            v84 = *(_OWORD *)(v80 + 24);
            v85 = *(_OWORD *)(v80 + 40);
            *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
            *(_OWORD *)(v79 + 40) = v85;
            *(_OWORD *)(v79 + 24) = v84;
            v137[0] = v79;
            *(_QWORD *)v79 = 1;
            do
            {
              v86 = __ldaxr((unint64_t *)v78);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, (unint64_t *)v78));
            if (!v87)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v78 + 16));
              v67 = (unint64_t *)v78;
              v88 = -235920773;
              goto LABEL_99;
            }
          }
          break;
        case 9:
          v89 = (unint64_t *)v137[0];
          if (*(_QWORD *)v137[0] != 1)
          {
            v90 = (_QWORD *)operator new();
            v91 = v137[0] + 8;
            *v90 = *(_QWORD *)v137[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v90 + 1, v91);
            v137[0] = v90;
            *v90 = 1;
            do
            {
              v92 = __ldaxr(v89);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v89));
            if (!v93)
            {
              v94 = (void *)v89[6];
              if (v94)
              {
                v89[7] = (unint64_t)v94;
                operator delete(v94);
              }
              v95 = (void *)v89[3];
              if (v95)
              {
                v89[4] = (unint64_t)v95;
                operator delete(v95);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v89 + 1));
              v67 = v89;
              v88 = 2071181815;
LABEL_99:
              v68 = v88 | 0x1030C4000000000;
LABEL_107:
              MEMORY[0x219A19A08](v67, v68);
            }
          }
          break;
        default:
          break;
      }
      v98 = v137[0];
      std::vector<turi::flexible_type>::__vdeallocate((void **)(v137[0] + 8));
      *(_OWORD *)(v98 + 8) = v134;
      *(_QWORD *)(v98 + 24) = v135;
      v134 = 0uLL;
      v135 = 0;
      v136 = (void **)&v134;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v136);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 32))(v14, v137);
      switch(BYTE4(v137[1]))
      {
        case 2:
          v99 = (unint64_t *)v137[0];
          do
          {
            v100 = __ldaxr(v99);
            v101 = v100 - 1;
          }
          while (__stlxr(v101, v99));
          if (!v101)
          {
            v102 = v137[0];
            if (v137[0])
            {
              if (*(char *)(v137[0] + 31) < 0)
                operator delete(*(void **)(v137[0] + 8));
              v103 = v102;
              v104 = 0x1012C404EF22A49;
              goto LABEL_149;
            }
          }
          break;
        case 3:
          v105 = (unint64_t *)v137[0];
          do
          {
            v106 = __ldaxr(v105);
            v107 = v106 - 1;
          }
          while (__stlxr(v107, v105));
          if (!v107)
          {
            v108 = v137[0];
            if (v137[0])
            {
              v109 = *(void **)(v137[0] + 8);
              if (v109)
              {
                *(_QWORD *)(v137[0] + 16) = v109;
                operator delete(v109);
              }
              v103 = v108;
              v104 = 0x1080C409938AC02;
              goto LABEL_149;
            }
          }
          break;
        case 4:
          v110 = (unint64_t *)v137[0];
          do
          {
            v111 = __ldaxr(v110);
            v112 = v111 - 1;
          }
          while (__stlxr(v112, v110));
          if (!v112)
          {
            v113 = v137[0];
            if (v137[0])
            {
              *(_QWORD *)&v134 = v137[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              goto LABEL_133;
            }
          }
          break;
        case 5:
          v114 = (unint64_t *)v137[0];
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v113 = v137[0];
            if (v137[0])
            {
              *(_QWORD *)&v134 = v137[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
LABEL_133:
              v103 = v113;
              v104 = 0x1020C405E66F15BLL;
              goto LABEL_149;
            }
          }
          break;
        case 8:
          v117 = (unint64_t *)v137[0];
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (!v119)
          {
            v120 = v137[0];
            if (v137[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v137[0] + 16));
              v103 = v120;
              v121 = -235920773;
              goto LABEL_148;
            }
          }
          break;
        case 9:
          v122 = (unint64_t *)v137[0];
          do
          {
            v123 = __ldaxr(v122);
            v124 = v123 - 1;
          }
          while (__stlxr(v124, v122));
          if (!v124)
          {
            v125 = v137[0];
            if (v137[0])
            {
              v126 = *(void **)(v137[0] + 48);
              if (v126)
              {
                *(_QWORD *)(v137[0] + 56) = v126;
                operator delete(v126);
              }
              v127 = *(void **)(v125 + 24);
              if (v127)
              {
                *(_QWORD *)(v125 + 32) = v127;
                operator delete(v127);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v125 + 8);
              v103 = v125;
              v121 = 2071181815;
LABEL_148:
              v104 = v121 | 0x1030C4000000000;
LABEL_149:
              MEMORY[0x219A19A08](v103, v104);
            }
          }
          break;
        default:
          break;
      }
      turi::gl_sframe_range::iterator::increment((turi::gl_sframe_range::iterator *)v131);
    }
    v128 = v133;
    if (v133)
    {
      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
      do
        v130 = __ldaxr(p_shared_owners);
      while (__stlxr(v130 - 1, p_shared_owners));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
}

void sub_2186077C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, _QWORD *a18, int a19, char a20)
{
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;

  MEMORY[0x219A19A08](v20, 0x1012C404EF22A49);
  a17 = (void **)&a13;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
  switch(a20)
  {
    case 2:
      v22 = a18;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = a18;
        if (a18)
        {
          if (*((char *)a18 + 31) < 0)
            operator delete((void *)a18[1]);
          MEMORY[0x219A19A08](v25, 0x1012C404EF22A49);
        }
      }
      goto LABEL_40;
    case 3:
      v26 = a18;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_40;
      v29 = a18;
      if (!a18)
        goto LABEL_39;
      v30 = (void *)a18[1];
      if (v30)
      {
        a18[2] = v30;
        operator delete(v30);
      }
      v31 = v29;
      v32 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v33 = a18;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35)
        goto LABEL_40;
      v36 = a18;
      if (!a18)
        goto LABEL_39;
      a17 = (void **)(a18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a17);
      goto LABEL_26;
    case 5:
      v37 = a18;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      v36 = a18;
      if (!a18)
        goto LABEL_39;
      a17 = (void **)(a18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a17);
LABEL_26:
      v31 = v36;
      v32 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v40 = a18;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_40;
      v43 = a18;
      if (!a18)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)a18 + 2);
      v31 = v43;
      v44 = -235920773;
      goto LABEL_37;
    case 9:
      v45 = a18;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_40;
      if (!a18)
        goto LABEL_39;
      v31 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a18);
      v44 = 2071181815;
LABEL_37:
      v32 = v44 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v31, v32);
LABEL_39:
      a18 = 0;
LABEL_40:
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t _GLOBAL__sub_I_heatmap_cpp()
{
  void (*v0)(void *);

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(x_name, "x");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], x_name, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(y_name, "y");
  return __cxa_atexit(v0, y_name, &dword_217E69000);
}

void turi::visualization::plot_histogram(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::flexible_type *a3@<X2>, const turi::flexible_type *a4@<X3>, _QWORD *a5@<X8>)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  int v17;
  std::string::size_type v18;
  turi::gl_sarray *v19;
  const turi::gl_sarray *v20;
  uint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v25;
  turi::gl_sarray *v26;
  const turi::gl_sarray *v27;
  uint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *exception;
  double v38;
  std::string v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  turi::gl_sarray *v42;
  std::__shared_weak_count *v43;

  v11 = (int *)global_logger();
  if (v11[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/histogram.cpp", "plot_histogram", 22, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Materializing SArray", 20);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet((const std::locale *)&v39, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v39);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::gl_sarray::materialize(this);
  if (!turi::gl_sarray::size(this))
    turi::visualization::plot_histogram(turi::gl_sarray const&,turi::flexible_type const&,turi::flexible_type const&,turi::flexible_type const&)::$_0::operator()();
  std::allocate_shared[abi:ne180100]<turi::gl_sarray const,std::allocator<turi::gl_sarray const>,turi::gl_sarray const&,void>(this, &v42);
  v40 = 0;
  v41 = 0;
  v17 = turi::gl_sarray::dtype(this);
  if (v17)
  {
    if (v17 != 1)
      goto LABEL_21;
    _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIdEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v39);
    v18 = v39.__r_.__value_.__r.__words[0];
    v19 = v42;
    v21 = turi::visualization::batch_size(this, v20);
    (*(void (**)(std::string::size_type, turi::gl_sarray *, uint64_t))(*(_QWORD *)v18 + 80))(v18, v19, v21);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v40, (uint64_t *)&v39);
    size = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
    if (!v39.__r_.__value_.__l.__size_)
      goto LABEL_21;
    v23 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4turi13visualization9histogramIxEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v39);
    v25 = v39.__r_.__value_.__r.__words[0];
    v26 = v42;
    v28 = turi::visualization::batch_size(this, v27);
    (*(void (**)(std::string::size_type, turi::gl_sarray *, uint64_t))(*(_QWORD *)v25 + 80))(v25, v26, v28);
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v40, (uint64_t *)&v39);
    size = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
    if (!v39.__r_.__value_.__l.__size_)
      goto LABEL_21;
    v29 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v29);
    while (__stlxr(v24 - 1, v29));
  }
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
LABEL_21:
  v30 = turi::gl_sarray::dtype(v42);
  turi::visualization::histogram_spec((unsigned __int8 *)a4, (unsigned __int8 *)a2, (unsigned __int8 *)a3, v30, &v39);
  v38 = (double)(unint64_t)turi::gl_sarray::size(v42);
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v39, &v40, &v38, a5);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v31 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_218607F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::gl_sarray const,std::allocator<turi::gl_sarray const>,turi::gl_sarray const&,void>@<X0>(const turi::gl_sarray *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<turi::gl_sarray const>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray const&,std::allocator<turi::gl_sarray const>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_218607FD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::gl_sarray const>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray const&,std::allocator<turi::gl_sarray const>,0>(_QWORD *a1, const turi::gl_sarray *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D94C118;
  a1[1] = 0;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 3), a2);
  return a1;
}

void sub_21860801C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::gl_sarray const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::gl_sarray const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::gl_sarray const>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t _GLOBAL__sub_I_histogram_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::visualization::io_buffer::read(std::mutex *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  __int128 v5;

  std::mutex::lock(this);
  if (*(_QWORD *)&this[1].__m_.__opaque[32])
  {
    v4 = *(_QWORD *)(*(_QWORD *)this[1].__m_.__opaque + 8 * (*(_QWORD *)&this[1].__m_.__opaque[24] / 0xAAuLL))
       + 24 * (*(_QWORD *)&this[1].__m_.__opaque[24] % 0xAAuLL);
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
    std::deque<std::string>::pop_front(&this[1].__m_.__sig);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  std::mutex::unlock(this);
}

void sub_21860816C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void turi::visualization::io_buffer::write(std::mutex *a1, __int128 *a2)
{
  std::mutex::lock(a1);
  std::deque<std::string>::push_back(&a1[1].__m_.__sig, a2);
  std::mutex::unlock(a1);
}

void sub_2186081CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::io_buffer::size(turi::visualization::io_buffer *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t _GLOBAL__sub_I_io_buffer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::visualization::item_frequency::split_input@<X0>(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return std::vector<turi::visualization::item_frequency_result>::vector(a2, a1);
}

uint64_t turi::visualization::item_frequency::merge_results(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 56) + 40))(*(_QWORD *)(v4 + 56), v2 + 8);
      v2 += 136;
    }
    while (v2 != v3);
  }
  return result;
}

unsigned __int8 *turi::visualization::item_frequency_result::add_element_simple(turi::visualization::item_frequency_result *this, const turi::flexible_type *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *result;
  void *v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 16, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v6);
  ++*((_QWORD *)v4 + 4);
  ++*((_QWORD *)this + 8);
  result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)this + 80, (unsigned __int8 *)a2, (char *)a2);
  if (*((_BYTE *)a2 + 12) != 7)
    ++*((_QWORD *)this + 16);
  return result;
}

unsigned __int8 *`non-virtual thunk to'turi::visualization::item_frequency_result::add_element_simple(turi::visualization::item_frequency_result *this, const turi::flexible_type *a2)
{
  return turi::visualization::item_frequency_result::add_element_simple((turi::visualization::item_frequency_result *)((char *)this - 8), a2);
}

uint64_t turi::visualization::item_frequency_result::combine(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[40];
  _QWORD v10[2];
  void *v11;
  _BYTE v12[40];
  _QWORD v13[2];

  turi::groupby_operators::frequency_count::combine(a1 + 8, a2);
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v9, (uint64_t)(v4 + 2));
  v6 = v5[8];
  v10[0] = &unk_24D92FF70;
  v10[1] = v6;
  v11 = &unk_24D9308D0;
  std::unordered_set<turi::flexible_type>::unordered_set((uint64_t)v12, (uint64_t)(v5 + 10));
  v7 = v5[16];
  v13[0] = &unk_24D930060;
  v13[1] = v7;
  turi::groupby_operators::count::combine(a1 + 56, v10);
  turi::groupby_operators::count_distinct::combine(a1 + 72, &v11);
  turi::groupby_operators::non_null_count::combine(a1 + 120, v13);
  v11 = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)v12);
  return std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v9);
}

void sub_218608454(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void turi::visualization::item_frequency_result::~item_frequency_result(turi::visualization::item_frequency_result *this)
{
  *(_QWORD *)this = &off_24D94C220;
  *((_QWORD *)this + 1) = &unk_24D94C260;
  *((_QWORD *)this + 9) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 80);
  *((_QWORD *)this + 1) = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24D94C220;
  *((_QWORD *)this + 1) = &unk_24D94C260;
  *((_QWORD *)this + 9) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 80);
  *((_QWORD *)this + 1) = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 16);
  JUMPOUT(0x219A19A08);
}

uint64_t `non-virtual thunk to'turi::visualization::item_frequency_result::combine(uint64_t a1, void *a2)
{
  return turi::visualization::item_frequency_result::combine(a1 - 8, a2);
}

uint64_t turi::visualization::item_frequency_result::vega_summary_data(turi::visualization::item_frequency_result *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  void *v14[2];
  unsigned __int8 v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  void *v20[2];
  unsigned __int8 v21;
  _QWORD v22[13];
  char v23;
  uint64_t v24;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  (*(void (**)(void **__return_ptr, turi::visualization::item_frequency_result *, uint64_t))(*(_QWORD *)this + 16))(v14, this, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"type\": \"str\",", 14);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"num_unique\": ", 14);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3 = *MEMORY[0x24BEDB7F0];
  v22[0] = v3;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v3 - 24)) = v5;
  v22[2] = v4;
  v22[3] = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete((void *)v22[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v24);
  if ((v21 & 0x80u) == 0)
    v6 = v20;
  else
    v6 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (uint64_t)v20[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v6, v7);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"num_missing\": ", 15);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"categorical\": [", 16);
  if ((v15 & 0x80u) == 0)
    v10 = v14;
  else
    v10 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (uint64_t)v14[1];
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"],", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"numeric\": []", 13);
  std::stringbuf::str();
  if ((char)v15 < 0)
    operator delete(v14[0]);
  v16[0] = v3;
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v3 - 24)) = v5;
  v17[0] = v4;
  v17[1] = MEMORY[0x24BEDB848] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v19);
}

void sub_218608750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a56 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::item_frequency_result::vega_column_data(turi::visualization::item_frequency_result *this, int a2)
{
  __n128 v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t **v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void *__p[2];
  _QWORD v53[11];
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD v59[13];
  char v60;
  uint64_t v61;
  uint64_t **v62;
  char v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v59);
  (*(void (**)(uint64_t ***__return_ptr, char *))(*((_QWORD *)this + 1) + 40))(&v62, (char *)this + 8);
  v57 = 0;
  v58 = 0;
  v56 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v56, v62[1], v62[2], ((char *)v62[2] - (char *)v62[1]) >> 5);
  switch(v63)
  {
    case 2:
      v5 = (unint64_t *)v62;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = v62;
        if (v62)
        {
          if (*((char *)v62 + 31) < 0)
            operator delete(v62[1]);
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v62;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v62;
        if (v62)
        {
          v15 = v62[1];
          if (v15)
          {
            v62[2] = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v62;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = v62;
        if (v62)
        {
          __p[0] = v62 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_35;
        }
      }
      break;
    case 5:
      v27 = (unint64_t *)v62;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v19 = v62;
        if (v62)
        {
          __p[0] = v62 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_35:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v30 = (unint64_t *)v62;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v62;
        if (v62)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v62 + 2);
          v9 = v33;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v62;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v62;
        if (v62)
        {
          v24 = v62[6];
          if (v24)
          {
            v62[7] = v24;
            operator delete(v24);
          }
          v25 = v23[3];
          if (v25)
          {
            v23[4] = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v23 + 1));
          v9 = v23;
          v26 = 2071181815;
LABEL_41:
          v10 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v9, v10);
        }
      }
      break;
    default:
      break;
  }
  v34 = 126 - 2 * __clz((uint64_t)(v57 - v56) >> 5);
  if (v57 == v56)
    v35 = 0;
  else
    v35 = v34;
  v36 = 12;
  if (a2)
    v36 = 10;
  if (v36 >= (uint64_t)(v57 - v56) >> 5)
    v37 = (uint64_t)(v57 - v56) >> 5;
  else
    v37 = v36;
  std::__introsort<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,false>(v56, v57, v35, 1, v4);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = *((_QWORD *)this + 8);
  v42 = -1;
  while (32 * v37 != v38)
  {
    v43 = v40;
    v44 = v42;
    v45 = *(_QWORD *)(v56 + v38 + 16);
    if (*(_BYTE *)(v56 + v38 + 12) == 7)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "(null)");
      add_item_and_count((uint64_t)v59, (uint64_t)__p, v43);
      if (SHIBYTE(v53[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      add_item_and_count((uint64_t)v59, *(_QWORD *)(v56 + v38) + 8, v40);
    }
    v39 += v45;
    if ((unint64_t)(v44 + ((uint64_t)(v57 - v56) >> 5)) < 5 || (double)(v41 - v39) / (double)v41 >= 0.05)
    {
      v46 = v38 + 32;
      v42 = v44 - 1;
      v40 = v43 + 1;
      v47 = 32 * v37 - 32 == v38;
      v38 += 32;
      if (!v47)
        continue;
      v38 = v46;
      if ((uint64_t)(v57 - v56) >> 5 == v37)
        continue;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Other (", 7);
    v48 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" labels)", 8);
    std::stringbuf::str();
    add_item_and_count((uint64_t)v59, (uint64_t)&v62, v43 + 1);
    if (v64 < 0)
      operator delete(v62);
    __p[0] = *(void **)MEMORY[0x24BEDB7F0];
    v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v53[0] = v49;
    v53[1] = MEMORY[0x24BEDB848] + 16;
    if (v54 < 0)
      operator delete((void *)v53[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](&v55);
    break;
  }
  std::stringbuf::str();
  __p[0] = &v56;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v59[0] = *MEMORY[0x24BEDB7F0];
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v59 + *(_QWORD *)(v59[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v59[2] = v50;
  v59[3] = MEMORY[0x24BEDB848] + 16;
  if (v60 < 0)
    operator delete((void *)v59[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v61);
}

void sub_218608CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  if (*(char *)(v52 - 113) < 0)
    operator delete(*(void **)(v52 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  __p = &a49;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

_QWORD *add_item_and_count(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *p_p;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string v17;
  std::string v18;
  void *v19[2];
  std::string::size_type v20;
  std::string __p;

  if (a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 16), (uint64_t)",", 1);
  v6 = (_QWORD *)(a1 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\"label\": ", 10);
  if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) >= 0xC8uLL)
  {
    std::string::basic_string(&v18, (const std::string *)a2, 0, 0xC7uLL, (std::allocator<char> *)&v17);
    std::to_string(&v17, a3);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v17;
    else
      v7 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    else
      size = v17.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v18, (const std::string::value_type *)v7, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)v19 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    turi::visualization::escape_string((uint64_t *)v19, 1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v12 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)v18.__r_.__value_.__r.__words[0];
LABEL_33:
      operator delete(v13);
    }
  }
  else
  {
    turi::visualization::escape_string((uint64_t *)a2, 1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__p;
    else
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v15 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",\"label_idx\": ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",\"count\": ", 10);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",\"percentage\": \"", 16);
  std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"%\"}", 3);
}

void sub_218609080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void turi::visualization::plot_item_frequency(turi::visualization *this@<X0>, const turi::gl_sarray *a2@<X1>, const turi::flexible_type *a3@<X2>, const turi::flexible_type *a4@<X3>, _QWORD *a5@<X8>)
{
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  turi::gl_sarray *v17;
  const turi::gl_sarray *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *exception;
  __int128 v69;
  double v70;
  std::string __p;
  void *lpsrc;
  std::__shared_weak_count *v73;
  uint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::locale v77;
  _QWORD v78[6];
  std::__shared_weak_count *v79;
  uint64_t v80;
  char v81;
  turi::gl_sarray *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v11 = (int *)global_logger();
  if (v11[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/item_frequency.cpp", "plot_item_frequency", 164, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Materializing SArray", 20);
    v15 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v77, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v77);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  turi::gl_sarray::materialize(this);
  if (!turi::gl_sarray::size(this))
    turi::visualization::plot_item_frequency(turi::gl_sarray const&,turi::flexible_type const&,turi::flexible_type const&,turi::flexible_type const&)::$_0::operator()();
  std::allocate_shared[abi:ne180100]<turi::gl_sarray const,std::allocator<turi::gl_sarray const>,turi::gl_sarray const&,void>(this, &v82);
  v77.__locale_ = (std::locale::__imp *)&unk_24D94BB90;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v78);
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v78[5] = 0;
  v77.__locale_ = (std::locale::__imp *)&off_24D94C1A0;
  v17 = v82;
  v19 = turi::visualization::batch_size(this, v18);
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::init((uint64_t)&v77, (uint64_t)v17, v19);
  turi::visualization::transformation<turi::gl_sarray,turi::visualization::item_frequency_result>::get((uint64_t)&v77, &lpsrc);
  if (lpsrc
  {
    v75 = v20;
    v76 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  v23 = v73;
  if (v73)
  {
    v24 = (unint64_t *)&v73->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(v75[1] + 40))(&v84, v75 + 1);
  v73 = 0;
  v74 = 0;
  lpsrc = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&lpsrc, *(uint64_t **)(v84 + 8), *(uint64_t **)(v84 + 16), (uint64_t)(*(_QWORD *)(v84 + 16) - *(_QWORD *)(v84 + 8)) >> 5);
  switch(BYTE12(v84))
  {
    case 2:
      v26 = (unint64_t *)v84;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v84;
        if ((_QWORD)v84)
        {
          if (*(char *)(v84 + 31) < 0)
            operator delete(*(void **)(v84 + 8));
          v30 = v29;
          v31 = 0x1012C404EF22A49;
          goto LABEL_63;
        }
      }
      break;
    case 3:
      v43 = (unint64_t *)v84;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = v84;
        if ((_QWORD)v84)
        {
          v47 = *(void **)(v84 + 8);
          if (v47)
          {
            *(_QWORD *)(v84 + 16) = v47;
            operator delete(v47);
          }
          v30 = v46;
          v31 = 0x1080C409938AC02;
          goto LABEL_63;
        }
      }
      break;
    case 4:
      v32 = (unint64_t *)v84;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v84;
        if ((_QWORD)v84)
        {
          __p.__r_.__value_.__r.__words[0] = v84 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_56;
        }
      }
      break;
    case 5:
      v48 = (unint64_t *)v84;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v35 = v84;
        if ((_QWORD)v84)
        {
          __p.__r_.__value_.__r.__words[0] = v84 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_56:
          v30 = v35;
          v31 = 0x1020C405E66F15BLL;
          goto LABEL_63;
        }
      }
      break;
    case 8:
      v51 = (unint64_t *)v84;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v54 = v84;
        if ((_QWORD)v84)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v84 + 16));
          v30 = v54;
          v42 = -235920773;
          goto LABEL_62;
        }
      }
      break;
    case 9:
      v36 = (unint64_t *)v84;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v84;
        if ((_QWORD)v84)
        {
          v40 = *(void **)(v84 + 48);
          if (v40)
          {
            *(_QWORD *)(v84 + 56) = v40;
            operator delete(v40);
          }
          v41 = *(void **)(v39 + 24);
          if (v41)
          {
            *(_QWORD *)(v39 + 32) = v41;
            operator delete(v41);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v39 + 8);
          v30 = v39;
          v42 = 2071181815;
LABEL_62:
          v31 = v42 | 0x1030C4000000000;
LABEL_63:
          MEMORY[0x219A19A08](v30, v31);
        }
      }
      break;
    default:
      break;
  }
  v55 = turi::gl_sarray::dtype(v82);
  turi::visualization::categorical_spec((unsigned __int8 *)a4, (unsigned __int8 *)a2, (unsigned __int8 *)a3, v55, &__p);
  v70 = (double)(unint64_t)turi::gl_sarray::size(v82);
  std::allocate_shared[abi:ne180100]<turi::visualization::item_frequency,std::allocator<turi::visualization::item_frequency>,turi::visualization::item_frequency&,void>((uint64_t)&v77, &v69);
  v84 = v69;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&__p, (uint64_t *)&v84, &v70, a5);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v59 = v76;
  if (v76)
  {
    v60 = (unint64_t *)&v76->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v77.__locale_ = (std::locale::__imp *)&unk_24D94BB90;
  v62 = v79;
  if (v79)
  {
    v63 = (unint64_t *)&v79->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v78);
  v65 = v83;
  if (v83)
  {
    v66 = (unint64_t *)&v83->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_218609718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,std::locale a24)
{
  std::locale::~locale(&a24);
  _Unwind_Resume(a1);
}

void turi::visualization::item_frequency::~item_frequency(turi::visualization::item_frequency *this)
{
  turi::gl_sarray *v1;

  *(_QWORD *)this = &unk_24D94BB90;
  v1 = (turi::visualization::item_frequency *)((char *)this + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  turi::gl_sarray::~gl_sarray(v1);
}

{
  turi::gl_sarray *v1;

  *(_QWORD *)this = &unk_24D94BB90;
  v1 = (turi::visualization::item_frequency *)((char *)this + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  turi::gl_sarray::~gl_sarray(v1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'turi::visualization::item_frequency_result::~item_frequency_result(turi::visualization::item_frequency_result *this)
{
  *((_QWORD *)this - 1) = &off_24D94C220;
  *(_QWORD *)this = &unk_24D94C260;
  *((_QWORD *)this + 8) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 72);
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  *((_QWORD *)this - 1) = &off_24D94C220;
  *(_QWORD *)this = &unk_24D94C260;
  *((_QWORD *)this + 8) = &unk_24D9308D0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 72);
  *(_QWORD *)this = &unk_24D930AB0;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t *v36;
  __n128 v37;
  char v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  unint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  char v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  BOOL v84;
  __n128 v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  __n128 v97;
  __n128 v99;
  _BYTE v100[13];
  __n128 v101;
  _BYTE v102[13];
  uint64_t v103;

  v7 = result;
  v103 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v8 = (unint64_t *)(a2 - 32);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v8, v7, a5);
        if ((_DWORD)result)
        {
          v101 = *(__n128 *)v7;
          v50 = *v8;
          *(_QWORD *)(v7 + 5) = *(_QWORD *)(a2 - 27);
          *(_QWORD *)v7 = v50;
          v51 = v101.n128_u64[0];
          *(_QWORD *)(a2 - 27) = *(unint64_t *)((char *)v101.n128_u64 + 5);
          *v8 = v51;
          v101 = *(__n128 *)(v7 + 16);
          v52 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(v7 + 21) = *(_QWORD *)(a2 - 11);
          *(_QWORD *)(v7 + 16) = v52;
          v53 = v101.n128_u64[0];
          *(_QWORD *)(a2 - 11) = *(unint64_t *)((char *)v101.n128_u64 + 5);
          *(_QWORD *)(a2 - 16) = v53;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7, (_QWORD *)(v7 + 32), v8, a5);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7, v7 + 32, v7 + 64, v8, a5);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,0>(v7, v7 + 32, v7 + 64, v7 + 96, v8, a5);
      default:
        if (v10 <= 767)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v54 = v7 + 32;
              if (v7 + 32 != a2)
              {
                v55 = 0;
                v56 = v7;
                do
                {
                  v57 = (unint64_t *)v54;
                  result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v54, v56, a5);
                  if ((_DWORD)result)
                  {
                    v58 = *v57;
                    *(unint64_t *)((char *)v101.n128_u64 + 5) = *(unint64_t *)((char *)v57 + 5);
                    v101.n128_u64[0] = v58;
                    v101.n128_u8[12] = *(_BYTE *)(v56 + 44);
                    *(_BYTE *)(v56 + 44) = 0;
                    *(_QWORD *)&v102[5] = *(_QWORD *)(v56 + 53);
                    *(_QWORD *)v102 = *(_QWORD *)(v56 + 48);
                    v102[12] = *(_BYTE *)(v56 + 60);
                    v59 = v55;
                    *(_BYTE *)(v56 + 60) = 0;
                    while (1)
                    {
                      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v7 + v59 + 32, (uint64_t *)(v7 + v59));
                      if (!v59)
                        break;
                      v61 = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, v7 + v59 - 32, v60);
                      v59 -= 32;
                      if ((v61 & 1) == 0)
                      {
                        v62 = v7 + v59 + 32;
                        goto LABEL_69;
                      }
                    }
                    v62 = v7;
LABEL_69:
                    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v62, (uint64_t *)&v101);
                    result = std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
                  }
                  v54 = (uint64_t)(v57 + 4);
                  v55 += 32;
                  v56 = (uint64_t)v57;
                }
                while (v57 + 4 != (unint64_t *)a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v94 = v7 + 32;
            if (v7 + 32 != a2)
            {
              do
              {
                v95 = (unint64_t *)v94;
                result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v94, v7, a5);
                if ((_DWORD)result)
                {
                  v96 = *v95;
                  *(unint64_t *)((char *)v101.n128_u64 + 5) = *(unint64_t *)((char *)v95 + 5);
                  v101.n128_u64[0] = v96;
                  v101.n128_u8[12] = *(_BYTE *)(v7 + 44);
                  *(_BYTE *)(v7 + 44) = 0;
                  *(_QWORD *)&v102[5] = *(_QWORD *)(v7 + 53);
                  *(_QWORD *)v102 = *(_QWORD *)(v7 + 48);
                  v102[12] = *(_BYTE *)(v7 + 60);
                  *(_BYTE *)(v7 + 60) = 0;
                  do
                  {
                    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v7 + 32, (uint64_t *)v7);
                    v7 -= 32;
                  }
                  while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, v7, v97) & 1) != 0);
                  std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v7 + 32, (uint64_t *)&v101);
                  result = std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
                }
                v94 = (uint64_t)(v95 + 4);
                v7 = (uint64_t)v95;
              }
              while (v95 + 4 != (unint64_t *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v63 = (unint64_t)(v11 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = (uint64_t *)(v7 + 32 * v66);
                if (2 * v64 + 2 < v11
                  && turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v7 + 32 * v66, (uint64_t)(v67 + 4), a5))
                {
                  v67 += 4;
                  v66 = 2 * v65 + 2;
                }
                v68 = v7 + 32 * v65;
                if ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v67, v68, a5) & 1) == 0)
                {
                  v69 = *(_QWORD *)v68;
                  *(unint64_t *)((char *)v101.n128_u64 + 5) = *(_QWORD *)(v68 + 5);
                  v101.n128_u64[0] = v69;
                  v101.n128_u8[12] = *(_BYTE *)(v68 + 12);
                  *(_BYTE *)(v68 + 12) = 0;
                  v70 = v7 + 32 * v65;
                  v71 = *(_QWORD *)(v70 + 16);
                  *(_QWORD *)&v102[5] = *(_QWORD *)(v70 + 21);
                  *(_QWORD *)v102 = v71;
                  v102[12] = *(_BYTE *)(v70 + 28);
                  *(_BYTE *)(v70 + 28) = 0;
                  do
                  {
                    v72 = (uint64_t)v67;
                    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v68, v67);
                    if (v63 < v66)
                      break;
                    v74 = (2 * v66) | 1;
                    v67 = (uint64_t *)(v7 + 32 * v74);
                    v66 = 2 * v66 + 2;
                    if (v66 >= v11)
                    {
                      v66 = v74;
                    }
                    else if (turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v7 + 32 * v74, (uint64_t)(v67 + 4), v73))
                    {
                      v67 += 4;
                    }
                    else
                    {
                      v66 = v74;
                    }
                    v68 = v72;
                  }
                  while (!turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v67, (uint64_t)&v101, v73));
                  std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v72, (uint64_t *)&v101);
                  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v75 = (unint64_t)v10 >> 5;
            do
            {
              v76 = 0;
              v77 = *(_QWORD *)v7;
              *(unint64_t *)((char *)v99.n128_u64 + 5) = *(_QWORD *)(v7 + 5);
              v99.n128_u64[0] = v77;
              v99.n128_u8[12] = *(_BYTE *)(v7 + 12);
              *(_BYTE *)(v7 + 12) = 0;
              v78 = *(_QWORD *)(v7 + 16);
              *(_QWORD *)&v100[5] = *(_QWORD *)(v7 + 21);
              *(_QWORD *)v100 = v78;
              v100[12] = *(_BYTE *)(v7 + 28);
              *(_BYTE *)(v7 + 28) = 0;
              v79 = v7;
              do
              {
                v80 = v79 + 32 * v76 + 32;
                v81 = (2 * v76) | 1;
                v82 = 2 * v76 + 2;
                if (v82 < v75
                  && turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v79 + 32 * v76 + 32, v79 + 32 * v76 + 64, a5))
                {
                  v80 += 32;
                  v81 = v82;
                }
                std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v79, (uint64_t *)v80);
                v79 = v80;
                v76 = v81;
              }
              while (v81 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              v83 = (uint64_t *)(a2 - 32);
              v84 = v80 == a2 - 32;
              a2 -= 32;
              if (v84)
              {
                std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v80, (uint64_t *)&v99);
              }
              else
              {
                std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v80, v83);
                std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v83, (uint64_t *)&v99);
                v86 = v80 - v7 + 32;
                if (v86 >= 33)
                {
                  v87 = (((unint64_t)v86 >> 5) - 2) >> 1;
                  v88 = (uint64_t *)(v7 + 32 * v87);
                  if (turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v88, v80, v85))
                  {
                    v89 = *(_QWORD *)v80;
                    *(unint64_t *)((char *)v101.n128_u64 + 5) = *(_QWORD *)(v80 + 5);
                    v101.n128_u64[0] = v89;
                    v101.n128_u8[12] = *(_BYTE *)(v80 + 12);
                    *(_BYTE *)(v80 + 12) = 0;
                    v90 = *(_QWORD *)(v80 + 16);
                    *(_QWORD *)&v102[5] = *(_QWORD *)(v80 + 21);
                    *(_QWORD *)v102 = v90;
                    v102[12] = *(_BYTE *)(v80 + 28);
                    *(_BYTE *)(v80 + 28) = 0;
                    do
                    {
                      v91 = (uint64_t)v88;
                      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v80, v88);
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = (uint64_t *)(v7 + 32 * v87);
                      v80 = v91;
                    }
                    while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v88, (uint64_t)&v101, v92) & 1) != 0);
                    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v91, (uint64_t *)&v101);
                    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
                  }
                }
              }
              result = std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v99);
            }
            while (v75-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unint64_t *)(v7 + 32 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>((uint64_t)v13, (_QWORD *)v7, v8, a5);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7, v13, v8, a5);
          v14 = (_QWORD *)(v7 + 32 * v12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7 + 32, v14 - 4, (_QWORD *)(a2 - 64), v15);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7 + 64, v14 + 4, (_QWORD *)(a2 - 96), v16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>((uint64_t)(v14 - 4), v13, v14 + 4, v17);
          v18 = *(__n128 *)v7;
          v19 = *(__n128 *)(v7 + 16);
          v101 = *(__n128 *)v7;
          v20 = *v13;
          *(_QWORD *)(v7 + 5) = *(unint64_t *)((char *)v13 + 5);
          *(_QWORD *)v7 = v20;
          v21 = v101.n128_u64[0];
          *(unint64_t *)((char *)v13 + 5) = *(unint64_t *)((char *)v101.n128_u64 + 5);
          *v13 = v21;
          v101 = v19;
          v22 = v14[2];
          *(_QWORD *)(v7 + 21) = *(_QWORD *)((char *)v14 + 21);
          *(_QWORD *)(v7 + 16) = v22;
          v23 = v101.n128_u64[0];
          *(_QWORD *)((char *)v14 + 21) = *(unint64_t *)((char *)v101.n128_u64 + 5);
          v14[2] = v23;
        }
        --a3;
        if ((a4 & 1) == 0
          && (turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v7 - 32, v7, v18) & 1) == 0)
        {
          v40 = *(_QWORD *)v7;
          *(unint64_t *)((char *)v101.n128_u64 + 5) = *(_QWORD *)(v7 + 5);
          v101.n128_u64[0] = v40;
          v101.n128_u8[12] = *(_BYTE *)(v7 + 12);
          *(_BYTE *)(v7 + 12) = 0;
          v41 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)&v102[5] = *(_QWORD *)(v7 + 21);
          *(_QWORD *)v102 = v41;
          v102[12] = *(_BYTE *)(v7 + 28);
          *(_BYTE *)(v7 + 28) = 0;
          if ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, (uint64_t)v8, v18) & 1) != 0)
          {
            v9 = v7;
            do
              v9 += 32;
            while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, v9, v42) & 1) == 0);
          }
          else
          {
            v43 = v7 + 32;
            do
            {
              v9 = v43;
              if (v43 >= a2)
                break;
              v44 = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, v43, v42);
              v43 = v9 + 32;
            }
            while (!v44);
          }
          v45 = (uint64_t *)a2;
          if (v9 < a2)
          {
            v45 = (uint64_t *)a2;
            do
              v45 -= 4;
            while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, (uint64_t)v45, v42) & 1) != 0);
          }
          while (v9 < (unint64_t)v45)
          {
            v99 = *(__n128 *)v9;
            v46 = *v45;
            *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)v45 + 5);
            *(_QWORD *)v9 = v46;
            v47 = v99.n128_u64[0];
            *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)v99.n128_i64 + 5);
            *v45 = v47;
            v48 = *(__n128 *)(v9 + 16);
            v99 = v48;
            v49 = *(uint64_t *)((char *)v45 + 21);
            *(_QWORD *)(v9 + 16) = v45[2];
            *(_QWORD *)(v9 + 21) = v49;
            *(uint64_t *)((char *)v45 + 21) = *(uint64_t *)((char *)v99.n128_i64 + 5);
            v45[2] = v99.n128_u64[0];
            do
              v9 += 32;
            while (!turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, v9, v48));
            do
              v45 -= 4;
            while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v101, (uint64_t)v45, v48) & 1) != 0);
          }
          if (v9 - 32 != v7)
            std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v7, (uint64_t *)(v9 - 32));
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v9 - 32, (uint64_t *)&v101);
          result = std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
          a4 = 0;
          continue;
        }
        v24 = 0;
        v25 = *(_QWORD *)v7;
        *(unint64_t *)((char *)v101.n128_u64 + 5) = *(_QWORD *)(v7 + 5);
        v101.n128_u64[0] = v25;
        v101.n128_u8[12] = *(_BYTE *)(v7 + 12);
        *(_BYTE *)(v7 + 12) = 0;
        v26 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)&v102[5] = *(_QWORD *)(v7 + 21);
        *(_QWORD *)v102 = v26;
        v102[12] = *(_BYTE *)(v7 + 28);
        *(_BYTE *)(v7 + 28) = 0;
        do
        {
          v27 = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v7 + v24 + 32, (uint64_t)&v101, v18);
          v24 += 32;
        }
        while ((v27 & 1) != 0);
        v28 = v7 + v24;
        v29 = a2;
        if (v24 == 32)
        {
          v29 = a2;
          do
          {
            if (v28 >= v29)
              break;
            v29 -= 32;
          }
          while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v29, (uint64_t)&v101, v18) & 1) == 0);
        }
        else
        {
          do
            v29 -= 32;
          while (!turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v29, (uint64_t)&v101, v18));
        }
        if (v28 >= v29)
        {
          v36 = (uint64_t *)(v28 - 32);
        }
        else
        {
          v30 = v7 + v24;
          v31 = (uint64_t *)v29;
          do
          {
            v99 = *(__n128 *)v30;
            v32 = *v31;
            *(_QWORD *)(v30 + 5) = *(uint64_t *)((char *)v31 + 5);
            *(_QWORD *)v30 = v32;
            v33 = v99.n128_u64[0];
            *(uint64_t *)((char *)v31 + 5) = *(uint64_t *)((char *)v99.n128_i64 + 5);
            *v31 = v33;
            v34 = *(__n128 *)(v30 + 16);
            v99 = v34;
            v35 = *(uint64_t *)((char *)v31 + 21);
            *(_QWORD *)(v30 + 16) = v31[2];
            *(_QWORD *)(v30 + 21) = v35;
            *(uint64_t *)((char *)v31 + 21) = *(uint64_t *)((char *)v99.n128_i64 + 5);
            v31[2] = v99.n128_u64[0];
            do
              v30 += 32;
            while ((turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v30, (uint64_t)&v101, v34) & 1) != 0);
            do
              v31 -= 4;
            while (!turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)v31, (uint64_t)&v101, v34));
          }
          while (v30 < (unint64_t)v31);
          v36 = (uint64_t *)(v30 - 32);
        }
        if (v36 != (uint64_t *)v7)
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v7, v36);
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v36, (uint64_t *)&v101);
        std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v101);
        if (v28 < v29)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,false>(v7, v36, a3, a4 & 1);
          a4 = 0;
          v9 = (unint64_t)(v36 + 4);
          continue;
        }
        v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(v7, (uint64_t)v36, v37);
        v9 = (unint64_t)(v36 + 4);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>((uint64_t)(v36 + 4), a2, v39);
        if (!(_DWORD)result)
        {
          if ((v38 & 1) != 0)
            continue;
          goto LABEL_32;
        }
        a2 = (unint64_t)v36;
        if ((v38 & 1) == 0)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_21860A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(uint64_t a1, uint64_t a2, __n128 a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  double *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  double v60;
  BOOL v61;
  _QWORD *v62;
  double v63;
  uint64_t result;
  _QWORD *v65;
  double v66;
  double *v67;
  double *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  int v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  double v87;
  double v88;
  double v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  double *v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;

  switch(*(_BYTE *)(a2 + 28))
  {
    case 0:
      switch(*(_BYTE *)(a1 + 28))
      {
        case 0:
          if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
            goto LABEL_122;
          goto LABEL_73;
        case 1:
          a3.n128_u64[0] = *(_QWORD *)(a1 + 16);
          v50 = *(_QWORD *)(a2 + 16);
          goto LABEL_116;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_73;
        case 6:
          if (*(_QWORD *)(a2 + 16) == (uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8 && !*(_DWORD *)(a1 + 24))
            goto LABEL_122;
          goto LABEL_73;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*(_BYTE *)(a1 + 28))
      {
        case 0:
          a3.n128_u64[0] = *(_QWORD *)(a2 + 16);
          v50 = *(_QWORD *)(a1 + 16);
LABEL_116:
          v35 = (double)v50;
          goto LABEL_117;
        case 1:
          a3.n128_u64[0] = *(_QWORD *)(a1 + 16);
          v35 = *(double *)(a2 + 16);
          goto LABEL_117;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_73;
        case 6:
          a3.n128_f64[0] = vabdd_f64((double)*(int *)(a1 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8), *(double *)(a2 + 16));
          goto LABEL_121;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v45 = *(unsigned __int8 *)(a1 + 28);
      if (v45 - 3 < 7 || v45 < 2)
        goto LABEL_73;
      if (v45 != 2)
        turi::apply_binary_op_ff();
      v47 = *(_QWORD *)(a2 + 16);
      v48 = *(_QWORD *)(a1 + 16);
      v49 = *(char *)(v48 + 31) < 0 ? *(_QWORD *)(v48 + 16) : *(unsigned __int8 *)(v48 + 31);
      v93 = *(char *)(v47 + 31) < 0 ? *(_QWORD *)(v47 + 16) : *(unsigned __int8 *)(v47 + 31);
      if (v49 != v93)
        goto LABEL_73;
      v94 = (unsigned __int8 *)(v48 + 8);
      if ((*(_BYTE *)(v48 + 31) & 0x80) != 0)
        v94 = *(unsigned __int8 **)v94;
      v95 = (unsigned __int8 *)(v47 + 8);
      if ((*(_BYTE *)(v47 + 31) & 0x80) != 0)
        v95 = *(unsigned __int8 **)v95;
      if ((*(_BYTE *)(v48 + 31) & 0x80) != 0)
      {
        if (memcmp(v94, v95, v49))
          goto LABEL_73;
      }
      else
      {
        if (!v49)
          goto LABEL_122;
        do
        {
          if (*v94 != *v95)
            goto LABEL_73;
          ++v94;
          ++v95;
          --v49;
        }
        while (v49);
      }
      goto LABEL_122;
    case 3:
      v51 = *(unsigned __int8 *)(a1 + 28);
      if (v51 > 9)
        turi::apply_binary_op_ff();
      if (v51 != 3)
        goto LABEL_73;
      v52 = *(unint64_t **)(*(_QWORD *)(a1 + 16) + 8);
      v53 = *(unint64_t **)(*(_QWORD *)(a1 + 16) + 16);
      v54 = v53 - v52;
      v55 = *(double **)(*(_QWORD *)(a2 + 16) + 8);
      if (v54 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) - (_QWORD)v55) >> 3)
        goto LABEL_73;
      if (v53 == v52)
        goto LABEL_122;
      if (v54 <= 1)
        v54 = 1;
      while (1)
      {
        a3.n128_u64[0] = *v52;
        if (*(double *)v52 != *v55)
          goto LABEL_73;
        ++v55;
        ++v52;
        if (!--v54)
          goto LABEL_122;
      }
    case 4:
      v5 = *(unsigned __int8 *)(a1 + 28);
      if (v5 > 9)
        turi::apply_binary_op_ff();
      if (v5 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v101, (uint64_t *)(*(_QWORD *)(a1 + 16) + 8), (_QWORD *)(*(_QWORD *)(a2 + 16) + 8)) & 1) != 0)
      {
        goto LABEL_122;
      }
      goto LABEL_73;
    case 5:
      v57 = *(unsigned __int8 *)(a1 + 28);
      if (v57 > 9)
        turi::apply_binary_op_ff();
      if (v57 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v101, (uint64_t **)(*(_QWORD *)(a1 + 16) + 8), (uint64_t **)(*(_QWORD *)(a2 + 16) + 8)))
      {
        goto LABEL_122;
      }
      goto LABEL_73;
    case 6:
      switch(*(_BYTE *)(a1 + 28))
      {
        case 0:
          if (*(_QWORD *)(a1 + 16) == (uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8 && !*(_DWORD *)(a2 + 24))
            goto LABEL_122;
          goto LABEL_73;
        case 1:
          a3.n128_f64[0] = vabdd_f64(*(double *)(a1 + 16), (double)*(int *)(a2 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8));
LABEL_121:
          if (a3.n128_f64[0] < 0.0000005)
            goto LABEL_122;
          goto LABEL_73;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_73;
        case 6:
          if (((*(_QWORD *)(a2 + 16) ^ *(_QWORD *)(a1 + 16)) & 0xFFFFFFFFFFFFFFLL) == 0
            && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
          {
            goto LABEL_122;
          }
          goto LABEL_73;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v56 = *(unsigned __int8 *)(a1 + 28);
      if (v56 < 7 || v56 - 8 < 2)
        goto LABEL_73;
      if (v56 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_122;
    case 8:
      v58 = *(unsigned __int8 *)(a1 + 28);
      if (v58 < 8)
        goto LABEL_73;
      if (v58 != 8)
      {
        if (v58 != 9)
          turi::apply_binary_op_ff();
        goto LABEL_73;
      }
      if (!turi::image_type::operator==(*(_QWORD *)(a1 + 16) + 8, *(_QWORD *)(a2 + 16) + 8))
        goto LABEL_73;
      goto LABEL_122;
    case 9:
      v6 = *(unsigned __int8 *)(a1 + 28);
      if (v6 < 9)
        goto LABEL_73;
      if (v6 != 9)
        turi::apply_binary_op_ff();
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD **)(a1 + 16);
      if ((_QWORD *)v7 == v8)
        goto LABEL_122;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), v7 + 8))
        goto LABEL_73;
      v10 = (char *)v8[3];
      v9 = (char *)v8[4];
      v11 = v9 - v10;
      if (v9 == v10)
        goto LABEL_122;
      if (!v8[1])
        goto LABEL_122;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12)
        goto LABEL_122;
      v102 = 0;
      std::vector<unsigned long>::vector(&v103, v11 >> 3, &v102);
      v14 = v103;
      v15 = v104;
      v16 = **(_QWORD **)(v7 + 8);
      v17 = (char *)v104 - (char *)v103;
      v18 = v104 - v103;
      v19 = v18 - 1;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = v104 - v103;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v15 == v14)
    {
      v28 = 0;
      a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v8[1] + 8 * v8[9]);
    }
    else
    {
      v21 = 0;
      v22 = (uint64_t *)v8[6];
      v23 = v14;
      v24 = v20;
      do
      {
        v26 = *v23++;
        v25 = v26;
        v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      v28 = 0;
      a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v8[1] + 8 * (v8[9] + v21));
      v29 = *(uint64_t **)(v7 + 48);
      v30 = v14;
      v31 = v20;
      do
      {
        v33 = *v30++;
        v32 = v33;
        v34 = *v29++;
        v28 += v34 * v32;
        --v31;
      }
      while (v31);
    }
    v35 = *(double *)(v16 + 8 * (*(_QWORD *)(v7 + 72) + v28));
    if (a3.n128_f64[0] != v35)
      break;
    v36 = v18;
    v37 = v18 - 1;
    if (v17 >= 1)
    {
      v38 = v8[3];
      v39 = v14[v19] + 1;
      v14[v19] = v39;
      v40 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
      v37 = v18 - 1;
      if (v39 >= *(_QWORD *)(v38 + 8 * v19))
      {
        while (1)
        {
          *(uint64_t *)((char *)v14 + v40 + 8) = 0;
          if (v37 <= 0)
            break;
          --v37;
          v41 = *(uint64_t *)((char *)v14 + v40) + 1;
          *(uint64_t *)((char *)v14 + v40) = v41;
          v42 = *(_QWORD *)(v38 + v40);
          v40 -= 8;
          if (v41 < v42)
          {
            v36 = 1;
            goto LABEL_36;
          }
        }
        v104 = v14;
        operator delete(v14);
        goto LABEL_122;
      }
      v36 = 1;
      v37 = v18 - 1;
    }
LABEL_36:
    ;
  }
  while ((v37 & 0x8000000000000000) == 0 && v36);
  if (v14)
  {
    v104 = v14;
    v43 = a3.n128_f64[0];
    v44 = v35;
    operator delete(v14);
    if (v43 != v44)
    {
LABEL_73:
      switch(*(_BYTE *)(a2 + 28))
      {
        case 0:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
              v59 = *(double *)(a1 + 16);
              v60 = *(double *)(a2 + 16);
LABEL_76:
              v61 = *(_QWORD *)&v59 <= *(_QWORD *)&v60;
              goto LABEL_140;
            case 1:
              v85 = *(double *)(a1 + 16);
              v86 = *(_QWORD *)(a2 + 16);
LABEL_137:
              v87 = (double)v86;
              goto LABEL_139;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 6:
              v78 = *(double *)(a1 + 16);
              v79 = *(_QWORD *)(a2 + 16);
              return v79 < (uint64_t)(*(_QWORD *)&v78 << 8) >> 8;
            default:
              turi::apply_binary_op_ff();
          }
        case 1:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
              v73 = *(double *)(a2 + 16);
              v74 = *(_QWORD *)(a1 + 16);
              return v73 < (double)v74;
            case 1:
              v85 = *(double *)(a1 + 16);
              v87 = *(double *)(a2 + 16);
LABEL_139:
              v61 = v85 <= v87;
              goto LABEL_140;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 6:
              v80 = *(double *)(a1 + 16);
              v81 = *(_DWORD *)(a1 + 24);
              v82 = *(double *)(a2 + 16);
LABEL_133:
              v61 = (double)v81 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v80 << 8) >> 8) <= v82;
              goto LABEL_140;
            default:
              turi::apply_binary_op_ff();
          }
        case 2:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 2:
              v65 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
              v66 = *(double *)(a1 + 16);
              return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v65, (_QWORD *)(*(_QWORD *)&v66 + 8));
            default:
              turi::apply_binary_op_ff();
          }
        case 3:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 3:
              v67 = *(double **)(*(_QWORD *)(a1 + 16) + 8);
              v68 = *(double **)(*(_QWORD *)(a2 + 16) + 8);
              v69 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) - (_QWORD)v68) >> 3;
              v70 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) - (_QWORD)v67) >> 3;
              if (*(double **)(*(_QWORD *)(a1 + 16) + 16) == v67)
                return v70 > v69;
              if (v70 <= 1)
                v71 = 1;
              else
                v71 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) - (_QWORD)v67) >> 3;
              v72 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) - (_QWORD)v68) >> 3;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return result;
        case 4:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 4:
              v62 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
              v63 = *(double *)(a1 + 16);
              return turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v103, (uint64_t *)(*(_QWORD *)&v63 + 8), v62);
            default:
              turi::apply_binary_op_ff();
          }
        case 5:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_104;
        case 6:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
              v76 = *(_QWORD *)(a1 + 16);
              v77 = *(double *)(a2 + 16);
LABEL_102:
              v61 = v76 <= (uint64_t)(*(_QWORD *)&v77 << 8) >> 8;
              goto LABEL_140;
            case 1:
              v88 = *(double *)(a1 + 16);
              v89 = *(double *)(a2 + 16);
              v90 = *(_DWORD *)(a2 + 24);
              return (double)v90 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v89 << 8) >> 8) < v88;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            case 6:
              v83 = (uint64_t)(*(_QWORD *)(a1 + 16) << 8) >> 8;
              v84 = *(_QWORD *)(a2 + 16);
              if (v83 > v84 << 8 >> 8)
                return 1;
              if (v83 != v84 << 8 >> 8)
                return 0;
              v91 = *(_DWORD *)(a1 + 24);
              v92 = *(_DWORD *)(a2 + 24);
LABEL_150:
              v61 = v91 <= v92;
LABEL_140:
              result = !v61;
              break;
            default:
              turi::apply_binary_op_ff();
          }
          return result;
        case 7:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_104;
        case 8:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              goto LABEL_104;
            default:
              turi::apply_binary_op_ff();
          }
          goto LABEL_104;
        case 9:
          switch(*(_BYTE *)(a1 + 28))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              break;
            default:
              turi::apply_binary_op_ff();
          }
LABEL_104:
          turi::flexible_type_fail(0);
          return 0;
        default:
          turi::apply_binary_op_ff();
      }
      while (v72 && *v67 <= *v68)
      {
        if (*v67 < *v68)
          return 0;
        --v72;
        ++v67;
        ++v68;
        if (!--v71)
          return v70 > v69;
      }
      return 1;
    }
  }
  else
  {
LABEL_117:
    if (a3.n128_f64[0] != v35)
      goto LABEL_73;
  }
LABEL_122:
  if (*(_BYTE *)(a1 + 12) == 7 || *(_BYTE *)(a2 + 12) == 7)
    return 0;
  switch(*(_BYTE *)(a1 + 12))
  {
    case 0:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          v59 = *(double *)a2;
          v60 = *(double *)a1;
          goto LABEL_76;
        case 1:
          v85 = *(double *)a2;
          v86 = *(_QWORD *)a1;
          goto LABEL_137;
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_104;
        case 6:
          v78 = *(double *)a2;
          v79 = *(_QWORD *)a1;
          return v79 < (uint64_t)(*(_QWORD *)&v78 << 8) >> 8;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          v73 = *(double *)a1;
          v74 = *(_QWORD *)a2;
          return v73 < (double)v74;
        case 1:
          v85 = *(double *)a2;
          v87 = *(double *)a1;
          goto LABEL_139;
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_104;
        case 6:
          v80 = *(double *)a2;
          v81 = *(_DWORD *)(a2 + 8);
          v82 = *(double *)a1;
          goto LABEL_133;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        case 2:
          v65 = (_QWORD *)(*(_QWORD *)a1 + 8);
          v66 = *(double *)a2;
          return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v65, (_QWORD *)(*(_QWORD *)&v66 + 8));
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        case 3:
          v96 = *(double **)(*(_QWORD *)a2 + 8);
          v97 = *(double **)(*(_QWORD *)a1 + 8);
          v69 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v97) >> 3;
          v70 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v96) >> 3;
          if (*(double **)(*(_QWORD *)a2 + 16) == v96)
            return v70 > v69;
          if (v70 <= 1)
            v98 = 1;
          else
            v98 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v96) >> 3;
          v99 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - (_QWORD)v97) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        case 4:
          v62 = (_QWORD *)(*(_QWORD *)a1 + 8);
          v63 = *(double *)a2;
          return turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v103, (uint64_t *)(*(_QWORD *)&v63 + 8), v62);
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_104;
    case 6:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
          v76 = *(_QWORD *)a2;
          v77 = *(double *)a1;
          goto LABEL_102;
        case 1:
          v88 = *(double *)a2;
          v89 = *(double *)a1;
          v90 = *(_DWORD *)(a1 + 8);
          return (double)v90 / 1000000.0 + (double)((uint64_t)(*(_QWORD *)&v89 << 8) >> 8) < v88;
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_104;
        case 6:
          v100 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
          if (v100 > (uint64_t)(*(_QWORD *)a1 << 8) >> 8)
            return 1;
          if (v100 != (uint64_t)(*(_QWORD *)a1 << 8) >> 8)
            return 0;
          v91 = *(_DWORD *)(a2 + 8);
          v92 = *(_DWORD *)(a1 + 8);
          break;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_150;
    case 8:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_104;
    case 9:
      switch(*(_BYTE *)(a2 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_104;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_104;
    default:
      turi::apply_binary_op_ff();
  }
  while (v99 && *v96 <= *v97)
  {
    if (*v96 < *v97)
      return 0;
    --v99;
    ++v96;
    ++v97;
    if (!--v98)
      return v70 > v69;
  }
  return 1;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, __n128 a6)
{
  __n128 v11;
  uint64_t result;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(a1, a2, a3, (_QWORD *)a4, a6);
  result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a5, a4, v11);
  if ((_DWORD)result)
  {
    v24 = *(_OWORD *)a4;
    v13 = *(_QWORD *)((char *)a5 + 5);
    *(_QWORD *)a4 = *a5;
    *(_QWORD *)(a4 + 5) = v13;
    *(_QWORD *)((char *)a5 + 5) = *(_QWORD *)((char *)&v24 + 5);
    *a5 = v24;
    v14 = *(__n128 *)(a4 + 16);
    v15 = *(_QWORD *)((char *)a5 + 21);
    *(_QWORD *)(a4 + 16) = a5[2];
    *(_QWORD *)(a4 + 21) = v15;
    *(_QWORD *)((char *)a5 + 21) = *(_OWORD *)&v14 >> 40;
    a5[2] = v14.n128_u64[0];
    result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a4, a3, v14);
    if ((_DWORD)result)
    {
      v25 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a4 + 5);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)(a3 + 5) = v16;
      *(_QWORD *)(a4 + 5) = *(_QWORD *)((char *)&v25 + 5);
      *(_QWORD *)a4 = v25;
      v17 = *(__n128 *)(a3 + 16);
      v18 = *(_QWORD *)(a4 + 21);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 21) = v18;
      *(_QWORD *)(a4 + 21) = *(_OWORD *)&v17 >> 40;
      *(_QWORD *)(a4 + 16) = v17.n128_u64[0];
      result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a3, a2, v17);
      if ((_DWORD)result)
      {
        v26 = *(_OWORD *)a2;
        v19 = *(_QWORD *)(a3 + 5);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)(a2 + 5) = v19;
        *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)&v26 + 5);
        *(_QWORD *)a3 = v26;
        v20 = *(__n128 *)(a2 + 16);
        v21 = *(_QWORD *)(a3 + 21);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 21) = v21;
        *(_QWORD *)(a3 + 21) = *(_OWORD *)&v20 >> 40;
        *(_QWORD *)(a3 + 16) = v20.n128_u64[0];
        result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a2, a1, v20);
        if ((_DWORD)result)
        {
          v27 = *(_OWORD *)a1;
          v22 = *(_QWORD *)(a2 + 5);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 5) = v22;
          *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v27 + 5);
          *(_QWORD *)a2 = v27;
          v28 = *(_OWORD *)(a1 + 16);
          v23 = *(_QWORD *)(a2 + 21);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 21) = v23;
          *(_QWORD *)(a2 + 21) = *(_QWORD *)((char *)&v28 + 5);
          *(_QWORD *)(a2 + 16) = v28;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, __n128 a4)
{
  char v7;
  __n128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;

  v7 = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a2, a1, a4);
  result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a3, (uint64_t)a2, v8);
  if ((v7 & 1) != 0)
  {
    v10 = a1 + 16;
    if ((_DWORD)result)
    {
      v24 = *(_OWORD *)a1;
      v11 = *(_QWORD *)((char *)a3 + 5);
      *(_QWORD *)a1 = *a3;
      *(_QWORD *)(a1 + 5) = v11;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v24 + 5);
      *a3 = v24;
      v25 = *(__n128 *)v10;
      v12 = *(_QWORD *)((char *)a3 + 21);
      *(_QWORD *)v10 = a3[2];
      *(_QWORD *)(a1 + 21) = v12;
    }
    else
    {
      v29 = *(_OWORD *)a1;
      v18 = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 5) = v18;
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v29 + 5);
      *a2 = v29;
      v19 = (__n128 *)(a2 + 2);
      v20 = *(__n128 *)v10;
      v30 = *(__n128 *)v10;
      v21 = *(_QWORD *)((char *)a2 + 21);
      *(_QWORD *)v10 = a2[2];
      *(_QWORD *)(v10 + 5) = v21;
      *(_QWORD *)((char *)a2 + 21) = *(unint64_t *)((char *)v30.n128_u64 + 5);
      a2[2] = v30.n128_u64[0];
      result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a3, (uint64_t)a2, v20);
      if (!(_DWORD)result)
        return result;
      v31 = *(_OWORD *)a2;
      v22 = *(_QWORD *)((char *)a3 + 5);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 5) = v22;
      *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v31 + 5);
      *a3 = v31;
      v25 = *v19;
      v23 = *(_QWORD *)((char *)a3 + 21);
      v19->n128_u64[0] = a3[2];
      *(_QWORD *)((char *)a2 + 21) = v23;
    }
    *(_QWORD *)((char *)a3 + 21) = *(unint64_t *)((char *)v25.n128_u64 + 5);
    a3[2] = v25.n128_u64[0];
  }
  else if ((_DWORD)result)
  {
    v26 = *(_OWORD *)a2;
    v13 = *(_QWORD *)((char *)a3 + 5);
    *a2 = *a3;
    *(_QWORD *)((char *)a2 + 5) = v13;
    *(_QWORD *)((char *)a3 + 5) = *(_QWORD *)((char *)&v26 + 5);
    *a3 = v26;
    v14 = *((__n128 *)a2 + 1);
    v15 = *(_QWORD *)((char *)a3 + 21);
    a2[2] = a3[2];
    *(_QWORD *)((char *)a2 + 21) = v15;
    *(_QWORD *)((char *)a3 + 21) = *(_OWORD *)&v14 >> 40;
    a3[2] = v14.n128_u64[0];
    result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a2, a1, v14);
    if ((_DWORD)result)
    {
      v27 = *(_OWORD *)a1;
      v16 = *(_QWORD *)((char *)a2 + 5);
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 5) = v16;
      *(_QWORD *)((char *)a2 + 5) = *(_QWORD *)((char *)&v27 + 5);
      *a2 = v27;
      v28 = *(_OWORD *)(a1 + 16);
      v17 = *(_QWORD *)((char *)a2 + 21);
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 21) = v17;
      *(_QWORD *)((char *)a2 + 21) = *(_QWORD *)((char *)&v28 + 5);
      a2[2] = v28;
    }
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  _BOOL8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  __int128 v19;
  _BYTE v20[13];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v5;
    case 2:
      v6 = (_QWORD *)(a2 - 32);
      if (turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a2 - 32, a1, a3))
      {
        v19 = *(_OWORD *)a1;
        v7 = *(_QWORD *)(a2 - 27);
        *(_QWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 5) = v7;
        *(_QWORD *)(a2 - 27) = *(_QWORD *)((char *)&v19 + 5);
        *v6 = v19;
        v19 = *(_OWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a2 - 11);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a1 + 21) = v8;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)((char *)&v19 + 5);
        *(_QWORD *)(a2 - 16) = v19;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(a1, (_QWORD *)(a1 + 32), (_QWORD *)(a2 - 32), a3);
      return v5;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(a1, a1 + 32, a1 + 64, (_QWORD *)(a2 - 32), a3);
      return v5;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *,0>(a1, a1 + 32, a1 + 64, a1 + 96, (_QWORD *)(a2 - 32), a3);
      return v5;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(a1, (_QWORD *)(a1 + 32), (_QWORD *)(a1 + 64), a3);
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (!turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(v11, v9, v10))
  {
LABEL_14:
    v9 = v11;
    v12 += 32;
    v11 += 32;
    if (v11 == a2)
      return 1;
  }
  *(_QWORD *)((char *)&v19 + 5) = *(_QWORD *)(v11 + 5);
  *(_QWORD *)&v19 = *(_QWORD *)v11;
  BYTE12(v19) = *(_BYTE *)(v11 + 12);
  *(_BYTE *)(v11 + 12) = 0;
  *(_QWORD *)&v20[5] = *(_QWORD *)(v11 + 21);
  *(_QWORD *)v20 = *(_QWORD *)(v11 + 16);
  v20[12] = *(_BYTE *)(v11 + 28);
  v14 = v12;
  *(_BYTE *)(v11 + 28) = 0;
  while (1)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](a1 + v14 + 96, (uint64_t *)(a1 + v14 + 64));
    if (v14 == -64)
      break;
    v16 = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)&v19, a1 + v14 + 32, v15);
    v14 -= 32;
    if ((v16 & 1) == 0)
    {
      v17 = a1 + v14 + 96;
      goto LABEL_12;
    }
  }
  v17 = a1;
LABEL_12:
  std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v17, (uint64_t *)&v19);
  if (++v13 != 8)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v19);
    goto LABEL_14;
  }
  v5 = v11 + 32 == a2;
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v19);
  return v5;
}

void sub_21860B7A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, __n128 a5)
{
  __n128 v9;
  uint64_t result;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::visualization::item_frequency_result::vega_column_data(BOOL)::$_0 &,std::pair<turi::flexible_type,turi::flexible_type> *>(a1, (_QWORD *)a2, (_QWORD *)a3, a5);
  result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()((uint64_t)a4, a3, v9);
  if ((_DWORD)result)
  {
    v19 = *(_OWORD *)a3;
    v11 = *(_QWORD *)((char *)a4 + 5);
    *(_QWORD *)a3 = *a4;
    *(_QWORD *)(a3 + 5) = v11;
    *(_QWORD *)((char *)a4 + 5) = *(_QWORD *)((char *)&v19 + 5);
    *a4 = v19;
    v12 = *(__n128 *)(a3 + 16);
    v13 = *(_QWORD *)((char *)a4 + 21);
    *(_QWORD *)(a3 + 16) = a4[2];
    *(_QWORD *)(a3 + 21) = v13;
    *(_QWORD *)((char *)a4 + 21) = *(_OWORD *)&v12 >> 40;
    a4[2] = v12.n128_u64[0];
    result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a3, a2, v12);
    if ((_DWORD)result)
    {
      v20 = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a3 + 5);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)(a2 + 5) = v14;
      *(_QWORD *)(a3 + 5) = *(_QWORD *)((char *)&v20 + 5);
      *(_QWORD *)a3 = v20;
      v15 = *(__n128 *)(a2 + 16);
      v16 = *(_QWORD *)(a3 + 21);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 21) = v16;
      *(_QWORD *)(a3 + 21) = *(_OWORD *)&v15 >> 40;
      *(_QWORD *)(a3 + 16) = v15.n128_u64[0];
      result = turi::visualization::item_frequency_result::vega_column_data(BOOL)const::$_0::operator()(a2, a1, v15);
      if ((_DWORD)result)
      {
        v21 = *(_OWORD *)a1;
        v17 = *(_QWORD *)(a2 + 5);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 5) = v17;
        *(_QWORD *)(a2 + 5) = *(_QWORD *)((char *)&v21 + 5);
        *(_QWORD *)a2 = v21;
        v22 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a2 + 21);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 21) = v18;
        *(_QWORD *)(a2 + 21) = *(_QWORD *)((char *)&v22 + 5);
        *(_QWORD *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::item_frequency,std::allocator<turi::visualization::item_frequency>,turi::visualization::item_frequency&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<turi::visualization::item_frequency>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::item_frequency&,std::allocator<turi::visualization::item_frequency>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_21860B990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::item_frequency>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::item_frequency&,std::allocator<turi::visualization::item_frequency>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D94BB40;
  a1[1] = 0;
  std::allocator<turi::visualization::item_frequency>::construct[abi:ne180100]<turi::visualization::item_frequency,turi::visualization::item_frequency&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_21860B9F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<turi::visualization::item_frequency>::construct[abi:ne180100]<turi::visualization::item_frequency,turi::visualization::item_frequency&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = &unk_24D94BB90;
  *(_QWORD *)(a2 + 8) = v5;
  result = turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a2 + 16), (const turi::gl_sarray *)(a3 + 16));
  v7 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 64) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a3 + 72);
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a3 + 80);
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)a2 = &off_24D94C1A0;
  return result;
}

uint64_t _GLOBAL__sub_I_item_frequency_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::visualization::Plot::Plot(turi::visualization::Plot *this)
{
  double result;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *(_QWORD *)this = &unk_24D94C2E8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  return result;
}

uint64_t turi::visualization::Plot::Plot(uint64_t a1, __int128 *a2, _QWORD *a3, double a4)
{
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)a1 = &unk_24D94C2E8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v7 = (std::string *)(a1 + 248);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(double *)(a1 + 272) = a4;
  v9 = a3[1];
  *(_QWORD *)(a1 + 280) = *a3;
  *(_QWORD *)(a1 + 288) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return a1;
}

void sub_21860BC4C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[247] < 0)
    operator delete(*v2);
  turi::model_base::~model_base((turi::model_base *)v1);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::Plot::get_id(turi::visualization::Plot *this)
{
  unsigned __int8 v2;
  void **v3;
  uint64_t v4;
  std::string v6;
  std::bad_cast v7;
  void *v8;
  std::type_info *v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if ((v2 & 1) == 0
  {
    turi::visualization::Plot::get_id(void)const::uuid_generator = 0;
    boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&turi::visualization::Plot::get_id(void)const::uuid_generator);
    __cxa_atexit((void (*)(void *))boost::uuids::random_generator_pure::~random_generator_pure, &turi::visualization::Plot::get_id(void)const::uuid_generator, &dword_217E69000);
  }
  v3 = (void **)((char *)this + 224);
  if (*((char *)this + 247) < 0)
  {
    if (*((_QWORD *)this + 29))
      return (uint64_t)this + 224;
  }
  else if (*((_BYTE *)this + 247))
  {
    return (uint64_t)this + 224;
  }
  v10[0] = boost::uuids::random_generator_pure::operator()((uint64_t)&turi::visualization::Plot::get_id(void)const::uuid_generator);
  v10[1] = v4;
  memset(&v6, 0, sizeof(v6));
  if ((boost::conversion::detail::try_lexical_convert<std::string,boost::uuids::uuid>((uint64_t)v10, &v6) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v7);
  }
  if (*((char *)this + 247) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 30) = *((_QWORD *)&v6.__r_.__value_.__l + 2);
  return (uint64_t)this + 224;
}

void sub_21860BDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::exception a16)
{
  _Unwind_Resume(a1);
}

void boost::uuids::random_generator_pure::~random_generator_pure(boost::uuids::random_generator_pure *this)
{
  boost::uuids::detail::random_provider_base::destroy(this);
}

void turi::visualization::Plot::show(turi::model_base *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  char *v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::string __p;
  uint64_t v16;
  __int128 v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,turi::visualization::Plot&,void>(a1, &v17);
  v14 = v17;
  if (*((_QWORD *)&v17 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v16 = a3;
  v19 = 0;
  v7 = (char *)operator new(0x38uLL);
  *(_QWORD *)v7 = off_24D94C338;
  v8 = (std::string *)(v7 + 24);
  *(_OWORD *)(v7 + 8) = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    a3 = v16;
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v7 + 5) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_QWORD *)v7 + 6) = a3;
  v19 = v7;
  turi::visualization::run_thread((uint64_t)v18);
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_15;
    v10 = 5;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_21860BFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v16);
  operator delete(v15);
  std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::Plot::materialize(uint64_t this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *__p;
  char v8;

  if (*(_QWORD *)(this + 280))
  {
    v1 = this;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v1 + 280) + 16))(&v5);
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(&__p, v5, 0);
      if (v8 < 0)
        operator delete(__p);
      v2 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 280) + 24))(*(_QWORD *)(v1 + 280));
    }
    while ((this & 1) == 0);
  }
  return this;
}

void sub_21860C12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::Plot::finished_streaming(turi::visualization::Plot *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 35);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 1;
}

uint64_t turi::visualization::Plot::get_next_data(turi::visualization::Plot *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  turi::visualization::transformation_base *v5;
  double percent_complete;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  _QWORD v15[13];
  char v16;
  uint64_t v17;

  if (!*((_QWORD *)this + 35))
    turi::visualization::Plot::get_next_data(void)const::$_0::operator()();
  turi::visualization::vega_data::vega_data((turi::visualization::vega_data *)v14);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 35) + 16))(&v10);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(__p, v10, 0);
  turi::visualization::vega_data::operator<<((uint64_t)v14, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (turi::visualization::transformation_base *)*((_QWORD *)this + 35);
  if (v5)
    percent_complete = turi::visualization::transformation_base::get_percent_complete(v5);
  else
    percent_complete = 100.0;
  turi::visualization::vega_data::get_data_spec((turi::visualization::vega_data *)v14, percent_complete);
  v7 = *MEMORY[0x24BEDB7F0];
  v14[0] = &off_24D94D8A8;
  v15[0] = v7;
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v15[2] = v8;
  v15[3] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v17);
}

void sub_21860C2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  turi::visualization::vega_data::~vega_data((turi::visualization::vega_data *)&a17);
  _Unwind_Resume(a1);
}

void turi::visualization::vega_data::~vega_data(turi::visualization::vega_data *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x24BEDB7F0];
  *(_QWORD *)this = &off_24D94D8A8;
  v3 = *v2;
  *((_QWORD *)this + 2) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = v2[8];
  *((_QWORD *)this + 5) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)this + 4) = v4;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4]((char *)this + 144);
}

uint64_t turi::visualization::Plot::get_data(turi::visualization::Plot *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  _QWORD v13[13];
  char v14;
  uint64_t v15;

  if (!*((_QWORD *)this + 35))
    turi::visualization::Plot::get_data(void)const::$_0::operator()();
  turi::visualization::Plot::materialize((uint64_t)this);
  turi::visualization::vega_data::vega_data((turi::visualization::vega_data *)v12);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 35) + 16))(&v8);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(__p, v8, 0);
  turi::visualization::vega_data::operator<<((uint64_t)v12, (uint64_t)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  v2 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  turi::visualization::vega_data::get_data_spec((turi::visualization::vega_data *)v12, 100.0);
  v5 = *MEMORY[0x24BEDB7F0];
  v12[0] = &off_24D94D8A8;
  v13[0] = v5;
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[2] = v6;
  v13[3] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_21860C4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  turi::visualization::vega_data::~vega_data((turi::visualization::vega_data *)&a17);
  _Unwind_Resume(a1);
}

void turi::visualization::Plot::get_spec(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  unsigned __int8 v8;
  turi::visualization *v9;
  const char *v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  void *v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28;
  _BYTE v29[15];
  char v30;
  std::string v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  std::string v36;
  std::string v37;
  std::string v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  std::string v43;
  std::string __str;
  std::string v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  void *__p;
  char v55;
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[7];
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 271) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(a1 + 248), *(_QWORD *)(a1 + 256));
  else
    v52 = *(std::string *)(a1 + 248);
  if ((v8 & 1) == 0
  {
    turi::visualization::make_format_string((turi::visualization *)vega_spec_config_json, vega_spec_config_json_len, (uint64_t)&turi::visualization::Plot::get_spec(tc_plot_variation,BOOL)const::config_str);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::visualization::Plot::get_spec(tc_plot_variation,BOOL)const::config_str, &dword_217E69000);
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(&v53, "{{config}}", &turi::visualization::Plot::get_spec(tc_plot_variation,BOOL)const::config_str);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&v50, (unsigned __int8 *)&v53, 1);
  turi::visualization::format((uint64_t)&v52, (uint64_t)&v50, &v51);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v52 = v51;
  *((_BYTE *)&v51.__r_.__value_.__s + 23) = 0;
  v51.__r_.__value_.__s.__data_[0] = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v50);
  if (v55 < 0)
    operator delete(__p);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v53, "rgba(204,204,204,1.0)");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &v51);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v48, "20");
  std::string::basic_string[abi:ne180100]<0>(v46, "14");
  std::string::basic_string[abi:ne180100]<0>(&v53, "normal");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &v45);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v53, "rgba(0,0,0,0.847)");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &__str);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v53, "\"San Francisco\", HelveticaNeue, Arial");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &v43);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v41, "12");
  std::string::basic_string[abi:ne180100]<0>(v39, "10");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v38 = __str;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v37, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v37 = v43;
  std::string::basic_string[abi:ne180100]<0>(&v53, "normal");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &v36);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v34, "18");
  std::string::basic_string[abi:ne180100]<0>(v32, "30");
  std::string::basic_string[abi:ne180100]<0>(&v53, "rgb(136,136,136)");
  turi::visualization::escape_string((uint64_t *)&v53, 1, &v31);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  std::string::basic_string[abi:ne180100]<0>(v26, "720");
  v9 = (turi::visualization *)std::string::basic_string[abi:ne180100]<0>(v24, "550");
  if ((a2 & 0xF0) == 0x20 || (a2 & 0xF0) == 0 && turi::visualization::is_system_dark_mode(v9))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "rgba(255,255,255,0.847)");
    turi::visualization::escape_string((uint64_t *)&v50, 1, &v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v50, "rgba(255,255,255,0.098)");
    turi::visualization::escape_string((uint64_t *)&v50, 1, &v53);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    v51 = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    std::string::operator=(&v38, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v50, "#A4AAAD");
    turi::visualization::escape_string((uint64_t *)&v50, 1, &v53);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v31 = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((a2 & 0xF) == 3)
  {
    MEMORY[0x219A19390](v26, "960");
    MEMORY[0x219A19390](v24, "840");
    MEMORY[0x219A19390](v46, "22");
    std::string::basic_string[abi:ne180100]<0>(&v50, "bold");
    turi::visualization::escape_string((uint64_t *)&v50, 1, &v53);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v45 = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    MEMORY[0x219A19390](v48, "18");
    MEMORY[0x219A19390](v41, "18");
    MEMORY[0x219A19390](v39, "18");
    MEMORY[0x219A19390](v34, "26");
    std::string::basic_string[abi:ne180100]<0>(&v50, "bold");
    turi::visualization::escape_string((uint64_t *)&v50, 1, &v53);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v36 = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    v10 = "30";
    goto LABEL_56;
  }
  if ((a2 & 0xF) == 1)
  {
    MEMORY[0x219A19390](v26, "320");
    MEMORY[0x219A19390](v24, "280");
    MEMORY[0x219A19390](v46, "11");
    MEMORY[0x219A19390](v48, "8");
    MEMORY[0x219A19390](v41, "9");
    MEMORY[0x219A19390](v39, "4");
    MEMORY[0x219A19390](v34, "13");
    v10 = "16";
LABEL_56:
    MEMORY[0x219A19390](v32, v10);
  }
  if (a3)
  {
    v11 = *(_QWORD *)(a1 + 280);
    if (v11)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 16))(&v22);
      (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v22 + 16))(&v50, v22, 0);
      v12 = std::string::insert(&v50, 0, ", \"values\": [");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v53, "]");
      v15 = (void *)v14->__r_.__value_.__r.__words[0];
      v72[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (v30 < 0)
        operator delete(v28);
      v28 = v15;
      *(_QWORD *)v29 = v72[0];
      *(_QWORD *)&v29[7] = *(_QWORD *)((char *)v72 + 7);
      v30 = v16;
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      v17 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
  }
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(&v53, "{{gridColor}}", (__int128 *)&v51);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v56, "{{axisTitlePadding}}", (__int128 *)v48);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v57, "{{axisTitleFontSize}}", (__int128 *)v46);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v58, "{{axisTitleFontWeight}}", (__int128 *)&v45);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v59, "{{labelColor}}", (__int128 *)&__str);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v60, "{{labelFont}}", (__int128 *)&v43);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v61, "{{labelFontSize}}", (__int128 *)v41);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v62, "{{labelPadding}}", (__int128 *)v39);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v63, "{{titleColor}}", (__int128 *)&v38);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v64, "{{titleFont}}", (__int128 *)&v37);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v65, "{{titleFontSize}}", (__int128 *)v34);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v66, "{{titleFontWeight}}", (__int128 *)&v36);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v67, "{{titleOffset}}", (__int128 *)v32);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v68, "{{tickColor}}", (__int128 *)&v31);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v69, "{{width}}", (__int128 *)v26);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v70, "{{height}}", (__int128 *)v24);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(v71, "{{pre_filled_data_values}}", (__int128 *)&v28);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&v50, (unsigned __int8 *)&v53, 17);
  turi::visualization::format((uint64_t)&v52, (uint64_t)&v50, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v50);
  v20 = 816;
  do
  {
    v21 = (void **)((char *)&v53.__r_.__value_.__l.__data_ + v20);
    if (v53.__r_.__value_.__s.__data_[v20 - 1] < 0)
      operator delete(*(v21 - 3));
    if (*((char *)v21 - 25) < 0)
      operator delete(*(v21 - 6));
    v20 -= 48;
  }
  while (v20);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (v30 < 0)
    operator delete(v28);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_21860CFE8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  _Unwind_Resume(a1);
}

const char *turi::visualization::Plot::name(turi::visualization::Plot *this)
{
  return "_Plot";
}

_QWORD *turi::visualization::Plot::uid(turi::visualization::Plot *this)
{
  unsigned __int8 v1;

  {
    std::string::basic_string[abi:ne180100]<0>(turi::visualization::Plot::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/plot.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::visualization::Plot::uid(void)::_uid, &dword_217E69000);
  }
  return turi::visualization::Plot::uid(void)::_uid;
}

void sub_21860D3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void turi::visualization::Plot::~Plot(void **this)
{
  *this = &unk_24D94C2E8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 35));
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  turi::model_base::~model_base((turi::model_base *)this);
}

{
  *this = &unk_24D94C2E8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 35));
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  turi::model_base::~model_base((turi::model_base *)this);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::Plot::perform_registration(turi::visualization::Plot *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string __str;
  std::string *v18;
  std::string *v19;
  void **p_data;
  std::string __p;
  void ***v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;

  *(_QWORD *)&v37 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 24))
    return;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Plot::show");
  std::string::basic_string[abi:ne180100]<0>(&v34, "path_to_client");
  std::string::basic_string[abi:ne180100]<0>(v36, "variation");
  v18 = 0;
  v19 = 0;
  p_data = 0;
  v22 = (void ***)&v18;
  v23 = 0;
  v18 = (std::string *)operator new(0x30uLL);
  v19 = v18;
  p_data = (void **)&v18[2].__r_.__value_.__l.__data_;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v34, &v37, v18);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>("path_to_client", (std::string::size_type)turi::visualization::Plot::show, 0, "variation", (uint64_t)v32);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v18, (uint64_t)v32);
  v2 = v33;
  if (v33 == v32)
  {
    v3 = 4;
    v2 = v32;
    goto LABEL_6;
  }
  if (v33)
  {
    v3 = 5;
LABEL_6:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v22 = (void ***)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v36[i + 2]) < 0)
      operator delete((void *)v36[i]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "Plot::materialize");
  v34 = 0uLL;
  v35 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::visualization::Plot::materialize, 0, (uint64_t)v30);
  turi::model_base::register_function((uint64_t)this, &__str, (uint64_t)&v34, (uint64_t)v30);
  v5 = v31;
  if (v31 == v30)
  {
    v6 = 4;
    v5 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_18;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_18:
  v18 = (std::string *)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "Plot::get_spec");
  std::string::basic_string[abi:ne180100]<0>(&v34, "variation");
  std::string::basic_string[abi:ne180100]<0>(v36, "include_data");
  v18 = 0;
  v19 = 0;
  p_data = 0;
  v22 = (void ***)&v18;
  v23 = 0;
  v18 = (std::string *)operator new(0x30uLL);
  v19 = v18;
  p_data = (void **)&v18[2].__r_.__value_.__l.__data_;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v34, &v37, v18);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>("variation", (std::string::size_type)turi::visualization::Plot::get_spec, 0, "include_data", (uint64_t)v28);
  turi::model_base::register_function((uint64_t)this, &v16, (uint64_t)&v18, (uint64_t)v28);
  v7 = v29;
  if (v29 == v28)
  {
    v8 = 4;
    v7 = v28;
    goto LABEL_24;
  }
  if (v29)
  {
    v8 = 5;
LABEL_24:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v22 = (void ***)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v36[j + 2]) < 0)
      operator delete((void *)v36[j]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v15, "Plot::get_data");
  v34 = 0uLL;
  v35 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEJEJEEENS4_8functionIFN5boost7variantINSC_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSJ_INS_10model_baseEEENSJ_INS_17unity_sframe_baseEEENSJ_INS_17unity_sarray_baseEEENS4_3mapISA_NSC_18recursive_variant_ENS4_4lessISA_EENS8_INS4_4pairIKSA_SU_EEEEEENS4_6vectorISU_NS8_ISU_EEEENSC_17recursive_wrapperINS_21function_closure_infoEEEEEEPSN_NST_ISA_S18_SW_NS8_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::visualization::Plot::get_data, 0, (uint64_t)v26);
  turi::model_base::register_function((uint64_t)this, &v15, (uint64_t)&v34, (uint64_t)v26);
  v10 = v27;
  if (v27 == v26)
  {
    v11 = 4;
    v10 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_36;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_36:
  v18 = (std::string *)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v14, "Plot::get_url");
  v34 = 0uLL;
  v35 = 0;
  _ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEJEJEEENS4_8functionIFN5boost7variantINSC_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSJ_INS_10model_baseEEENSJ_INS_17unity_sframe_baseEEENSJ_INS_17unity_sarray_baseEEENS4_3mapISA_NSC_18recursive_variant_ENS4_4lessISA_EENS8_INS4_4pairIKSA_SU_EEEEEENS4_6vectorISU_NS8_ISU_EEEENSC_17recursive_wrapperINS_21function_closure_infoEEEEEEPSN_NST_ISA_S18_SW_NS8_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_((std::string::size_type)turi::visualization::Plot::get_url, 0, (uint64_t)v24);
  turi::model_base::register_function((uint64_t)this, &v14, (uint64_t)&v34, (uint64_t)v24);
  v12 = v25;
  if (v25 == v24)
  {
    v13 = 4;
    v12 = v24;
    goto LABEL_42;
  }
  if (v25)
  {
    v13 = 5;
LABEL_42:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v18 = (std::string *)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 24) = 1;
}

void sub_21860D90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  char *v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;

  v39 = a36;
  if (a36 == v36)
  {
    v40 = 4;
    v39 = &a33;
  }
  else
  {
    if (!a36)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_6:
  a25 = (void **)(v37 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,turi::visualization::Plot&,void>(turi::model_base *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x140uLL);
  std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::Plot&,std::allocator<turi::visualization::Plot>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_21860DBDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::Plot>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::Plot&,std::allocator<turi::visualization::Plot>,0>(_QWORD *a1, turi::model_base *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D919E90;
  a1[1] = 0;
  std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,turi::visualization::Plot&>((int)&v4, (turi::model_base *)(a1 + 3), a2);
  return a1;
}

void sub_21860DC3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::visualization::Plot>::construct[abi:ne180100]<turi::visualization::Plot,turi::visualization::Plot&>(int a1, turi::model_base *this, turi::model_base *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  turi::model_base::model_base(this, a3);
  *(_QWORD *)this = &unk_24D94C2E8;
  if (*((char *)a3 + 247) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 224), *((const std::string::value_type **)a3 + 28), *((_QWORD *)a3 + 29));
  }
  else
  {
    v5 = *((_OWORD *)a3 + 14);
    *((_QWORD *)this + 30) = *((_QWORD *)a3 + 30);
    *((_OWORD *)this + 14) = v5;
  }
  v6 = (std::string *)((char *)this + 248);
  if (*((char *)a3 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 31), *((_QWORD *)a3 + 32));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a3 + 248);
    *((_QWORD *)this + 33) = *((_QWORD *)a3 + 33);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_QWORD *)this + 34) = *((_QWORD *)a3 + 34);
  v8 = *((_QWORD *)a3 + 36);
  *((_QWORD *)this + 35) = *((_QWORD *)a3 + 35);
  *((_QWORD *)this + 36) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void sub_21860DD18(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[247] < 0)
    operator delete(*v2);
  turi::model_base::~model_base((turi::model_base *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D94C338;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

void std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24D94C338;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 8);
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_24D94C338;
  std::__compressed_pair_elem<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_21860DE1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24D94C338;
  return std::__compressed_pair_elem<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

uint64_t std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>(a1 + 8);
}

void std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  __int128 v18;
  _QWORD v19[13];
  char v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  std::string v24;
  _BYTE v25[376];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  turi::visualization::process_wrapper::process_wrapper(v25, a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v18, "{\"vega_spec\": ");
  v2 = turi::visualization::process_wrapper::operator<<((uint64_t)v25, &v18);
  turi::visualization::Plot::get_spec(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 48), 1, &v24);
  v3 = turi::visualization::process_wrapper::operator<<(v2, (__int128 *)&v24);
  std::string::basic_string[abi:ne180100]<0>(__p, "}\n");
  turi::visualization::process_wrapper::operator<<(v3, (__int128 *)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19[0]) < 0)
    operator delete((void *)v18);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
  if (v4)
  {
    v5 = *MEMORY[0x24BEDB7F0];
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v8 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) & 1) != 0
        || !turi::visualization::process_wrapper::good((turi::visualization::process_wrapper *)v25))
      {
        break;
      }
      turi::visualization::vega_data::vega_data((turi::visualization::vega_data *)&v18);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 280) + 16))(__p);
      (*(void (**)(std::string *__return_ptr, void *, _QWORD))(*(_QWORD *)__p[0] + 16))(&v24, __p[0], 0);
      turi::visualization::vega_data::operator<<((uint64_t)&v18, (uint64_t)&v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v9 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v10 = (unint64_t *)((char *)__p[1] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 280) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 280));
      v13 = *(double *)(*(_QWORD *)(a1 + 8) + 272);
      std::string::basic_string[abi:ne180100]<0>(&v24, "{\"data_spec\": ");
      v14 = turi::visualization::process_wrapper::operator<<((uint64_t)v25, (__int128 *)&v24);
      turi::visualization::vega_data::get_data_spec((uint64_t *)__p, (turi::visualization::vega_data *)&v18, (double)v12 / v13);
      v15 = turi::visualization::process_wrapper::operator<<(v14, (__int128 *)__p);
      std::string::basic_string[abi:ne180100]<0>(v16, "}\n");
      turi::visualization::process_wrapper::operator<<(v15, (__int128 *)v16);
      if (v17 < 0)
        operator delete(v16[0]);
      if (v23 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      *(_QWORD *)&v18 = &off_24D94D8A8;
      v19[0] = v5;
      *(_QWORD *)((char *)v19 + *(_QWORD *)(v5 - 24)) = v6;
      v19[2] = v7;
      v19[3] = v8;
      if (v20 < 0)
        operator delete((void *)v19[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v21);
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
    }
    while (v4);
  }
  turi::visualization::process_wrapper::~process_wrapper((turi::visualization::process_wrapper *)v25);
}

void sub_21860E18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a58 < 0)
    operator delete(__p);
  if (a64 < 0)
    operator delete(a59);
  if (a18 < 0)
    operator delete(a13);
  turi::visualization::process_wrapper::~process_wrapper((turi::visualization::process_wrapper *)&a65);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,std::allocator<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0>,void ()(void)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::visualization::Plot::show(std::string const&,tc_plot_variation)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    a1[4] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[5] = *(_QWORD *)(a2 + 40);
  return a1;
}

void sub_21860E3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],std::string&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_21860E43C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D94C448;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_21860E640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D94C548;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_21860E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__int128 *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string **v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  __int128 v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v23, __s);
  std::string::basic_string[abi:ne180100]<0>(v24, a4);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = &v16;
  v20 = 0;
  v16 = (std::string *)operator new(0x30uLL);
  v17 = v16;
  v18 = v16 + 2;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, &v23, &v25, v16);
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(a2, a3, (uint64_t)&v16, (uint64_t)&v25);
  v19 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  v10 = (uint64_t)v26;
  if (!v26)
    goto LABEL_8;
  if (v26 != &v25)
  {
    v10 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v26 + 16))(v26);
LABEL_8:
    v22 = (_BYTE *)v10;
    goto LABEL_10;
  }
  v22 = v21;
  (*(void (**)(__int128 *, _BYTE *))(v25 + 24))(&v25, v21);
LABEL_10:
  *(_QWORD *)(a5 + 24) = 0;
  v11 = operator new(0x28uLL);
  *v11 = &unk_24D94C648;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v21);
  *(_QWORD *)(a5 + 24) = v11;
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  result = v26;
  if (v26 == &v25)
  {
    v15 = 4;
    result = &v25;
  }
  else
  {
    if (!v26)
      return result;
    v15 = 5;
  }
  return (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
}

void sub_21860EAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 64);
  if (v25 == (_QWORD *)(v23 - 88))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 88);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEJEJEEENS4_8functionIFN5boost7variantINSC_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSJ_INS_10model_baseEEENSJ_INS_17unity_sframe_baseEEENSJ_INS_17unity_sarray_baseEEENS4_3mapISA_NSC_18recursive_variant_ENS4_4lessISA_EENS8_INS4_4pairIKSA_SU_EEEEEENS4_6vectorISU_NS8_ISU_EEEENSC_17recursive_wrapperINS_21function_closure_infoEEEEEEPSN_NST_ISA_S18_SW_NS8_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_@<X0>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  void **v11;
  _BYTE v12[24];
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, sizeof(v10));
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,std::string>(a1, a2, (uint64_t)v10, (uint64_t)v14);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v4 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    v13 = (_BYTE *)v4;
    goto LABEL_6;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _BYTE *))(v14[0] + 24))(v14, v12);
LABEL_6:
  *(_QWORD *)(a3 + 24) = 0;
  v5 = operator new(0x28uLL);
  *v5 = &unk_24D94C748;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v12);
  *(_QWORD *)(a3 + 24) = v5;
  v6 = v13;
  if (v13 == v12)
  {
    v7 = 4;
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v15;
  if (v15 == v14)
  {
    v9 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_21860ED10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D94C3B8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_21860EFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C3B8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C3B8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D94C3B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_21860F110(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D94C3B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_21860F28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::visualization::Plot,void,std::string const&,tc_plot_variation>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *, void **, _QWORD);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  std::string v12;
  uint64_t v13;
  uint64_t *v14;
  std::vector<std::string> v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  __int128 v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  char *v25[2];
  void **v26[3];

  v26[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v20 = 1;
  v21 = 0;
  v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23 = 0;
  v24 = v25;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v16 = a3;
  v17 = a2;
  memset(&v15, 0, sizeof(v15));
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v15.__begin_;
    end = (__int128 *)v15.__end_;
  }
  v14 = &v17;
  v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v11);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,std::string,tc_plot_variation>>::operator()<2>(&v11);
  v26[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  v8 = *(void (**)(_QWORD *, void **, _QWORD))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v17 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *, void **, _QWORD))(*v10 + v8);
  v8(v10, __p, *((_QWORD *)&v19 + 1));
  memset(v26, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v26, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v26 + 5);
  *(void ***)(a4 + 8) = v26[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v26[1]);
  *(_DWORD *)a4 = 0;
  v26[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v24, v25[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v21);
}

void sub_21860F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 88) = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 88));
  if (a26 < 0)
    operator delete(__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a28);
  _Unwind_Resume(a1);
}

_QWORD *turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,std::string,tc_plot_variation>>::operator()<2>(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v1 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - v1) >> 3) >= 3)
  {
    v2 = result;
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(result[4], (const void **)(v1 + 48));
    if (v2[4] + 8 == v3)
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    result = (_QWORD *)turi::variant_converter<tc_plot_variation,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(_QWORD *)(*v2 + 32) = result;
  }
  return result;
}

void sub_21860F5AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  int *v10;

  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_21860F5D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::variant_converter<tc_plot_variation,void>::get(uint64_t a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v39[3];
  void **v40[3];
  _QWORD v41[3];

  v41[2] = *MEMORY[0x24BDAC8D0];
  memset(v41, 0, 13);
  v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((_QWORD *)v2 != v41)
  {
    v4 = *(_QWORD *)v2;
    *(_QWORD *)((char *)v41 + 5) = *(_QWORD *)(v2 + 5);
    v41[0] = v4;
    BYTE4(v41[1]) = *(_BYTE *)(v2 + 12);
    if (BYTE4(v41[1]) <= 9u && ((1 << SBYTE4(v41[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v41[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  v39[0] = 0;
  turi::flexible_type_internals::ft_converter<13>::get<tc_plot_variation>(v39, (turi::flexible_type_internals *)v41, v3);
  v8 = v39[0];
  switch(BYTE4(v41[1]))
  {
    case 2:
      v9 = (unint64_t *)v41[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v41[0];
        if (v41[0])
        {
          if (*(char *)(v41[0] + 31) < 0)
            operator delete(*(void **)(v41[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v41[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v41[0];
        if (v41[0])
        {
          v30 = *(void **)(v41[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v41[0] + 16) = v30;
            operator delete(v30);
          }
          v13 = v29;
          v14 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v15 = (unint64_t *)v41[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v40);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v31 = (unint64_t *)v41[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v18 = v41[0];
        if (v41[0])
        {
          v40[0] = (void **)(v41[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v40);
LABEL_42:
          v13 = v18;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v34 = (unint64_t *)v41[0];
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = v41[0];
        if (v41[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v41[0] + 16));
          v13 = v37;
          v25 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v19 = (unint64_t *)v41[0];
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v41[0];
        if (v41[0])
        {
          v23 = *(void **)(v41[0] + 48);
          if (v23)
          {
            *(_QWORD *)(v41[0] + 56) = v23;
            operator delete(v23);
          }
          v24 = *(void **)(v22 + 24);
          if (v24)
          {
            *(_QWORD *)(v22 + 32) = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22 + 8);
          v13 = v22;
          v25 = 2071181815;
LABEL_48:
          v14 = v25 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_21860F884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  switch(*(_BYTE *)(v18 - 28))
  {
    case 2:
      v20 = *(unint64_t **)(v18 - 40);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_39;
      v23 = *(_QWORD *)(v18 - 40);
      if (!v23)
        goto LABEL_39;
      if (*(char *)(v23 + 31) < 0)
        operator delete(*(void **)(v23 + 8));
      v24 = (_QWORD *)v23;
      v25 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v35 = *(unint64_t **)(v18 - 40);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_39;
      v38 = *(_QWORD **)(v18 - 40);
      if (!v38)
        goto LABEL_39;
      v39 = (void *)v38[1];
      if (v39)
      {
        v38[2] = v39;
        operator delete(v39);
      }
      v24 = v38;
      v25 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v26 = *(unint64_t **)(v18 - 40);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (v28)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      v40 = *(unint64_t **)(v18 - 40);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v29 = *(_QWORD **)(v18 - 40);
      if (!v29)
        goto LABEL_39;
      a18 = v29 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      v24 = v29;
      v25 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v43 = *(unint64_t **)(v18 - 40);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (v45)
        goto LABEL_39;
      v46 = *(_QWORD *)(v18 - 40);
      if (!v46)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v46 + 16));
      v24 = (_QWORD *)v46;
      v34 = -235920773;
      goto LABEL_37;
    case 9:
      v30 = *(unint64_t **)(v18 - 40);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_39;
      v33 = *(_QWORD **)(v18 - 40);
      if (!v33)
        goto LABEL_39;
      v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v33);
      v34 = 2071181815;
LABEL_37:
      v25 = v34 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v24, v25);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

_QWORD *turi::flexible_type_internals::ft_converter<13>::get<tc_plot_variation>(_QWORD *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((_BYTE *)this + 12))
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer / enum.", a3);
  *result = *(_QWORD *)this;
  return result;
}

void sub_21860FB74()
{
  turi::flexible_type_internals::ft_converter<13>::get<turi::ml_column_mode>(turi::ml_column_mode &,turi::flexible_type const&)::{lambda(void)#1}::operator()();
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D94C448;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D94C448;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D94C448;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21860FC94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D94C448;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = (_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(char ***)a3;
  v8 = (char *)v6;
  if (*(_QWORD *)(a3 + 16))
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *(_QWORD *)a3 = v5;
    *v5 = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(v4, a1, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_21860FE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(void *lpsrc@<X1>, uint64_t a2@<X0>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  uint64_t v8;
  uint64_t v9[3];
  std::string *v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  if (lpsrc)
  else
    v7 = 0;
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v9, a3);
  v10 = v7;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, uint64_t *))(*(_QWORD *)v8 + 48))(&v11, v8, &v10, v9);
  v10 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v11, v11 ^ ((int)v11 >> 31), &v10, (uint64_t)v12);
  *(_DWORD *)a4 = v11 ^ ((int)v11 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v11);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v9, (char *)v9[1]);
}

void sub_21860FF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D94C4C8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_2186101E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C4C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C4C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D94C4C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_218610340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D94C4C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotEvJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISV_NST_ISV_EEEEEUlPS6_S1F_E_NST_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2186104BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,void>(void (turi::visualization::Plot::*)()const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  void (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;
  std::string v11;
  uint64_t v12;
  uint64_t *v13;
  std::vector<std::string> v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  void **v23[3];

  v23[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v17 = 1;
  __p = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v15 = a3;
  v16 = a2;
  memset(&v14, 0, sizeof(v14));
  if (&v14 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v14.__begin_;
    end = (__int128 *)v14.__end_;
  }
  v13 = &v16;
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v12 = v15;
  v23[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  v8 = *(void (**)(_QWORD *))a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_QWORD *)(v16 + (v9 >> 1));
  if ((v9 & 1) != 0)
    v8 = *(void (**)(_QWORD *))(*v10 + v8);
  v8(v10);
  memset(v23, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v23, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v23 + 5);
  *(void ***)(a4 + 8) = v23[0];
  *(_BYTE *)(a4 + 20) = BYTE4(v23[1]);
  *(_DWORD *)a4 = 0;
  v23[0] = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_21861066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  *(_QWORD *)(v14 - 72) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D94C548;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D94C548;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D94C548;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2186107A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D94C548;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotEvJEJEEENS_8functionIFN5boost7variantINS8_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSF_INS2_10model_baseEEENSF_INS2_17unity_sframe_baseEEENSF_INS2_17unity_sarray_baseEEENS_3mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS8_18recursive_variant_ENS_4lessISV_EENST_INS_4pairIKSV_SW_EEEEEENS_6vectorISW_NST_ISW_EEEENS8_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSJ_NSP_ISV_S1A_SY_NST_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NST_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotEvJEJEEENSt3__18functionIFN5boost7variantINS6_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSD_INS_10model_baseEEENSD_INS_17unity_sframe_baseEEENSD_INS_17unity_sarray_baseEEENS4_3mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS6_18recursive_variant_ENS4_4lessIST_EENSR_INS4_4pairIKST_SU_EEEEEENS4_6vectorISU_NSR_ISU_EEEENS6_17recursive_wrapperINS_21function_closure_infoEEEEEEPSH_NSN_IST_S18_SW_NSR_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D94C5C8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_218610ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C5C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C5C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D94C5C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_218610C28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D94C5C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  char *v8;

  v4 = *a2;
  v5 = a3 + 1;
  v6 = a3[1];
  v7 = (char **)*a3;
  v8 = (char *)v6;
  if (a3[2])
  {
    *(_QWORD *)(v6 + 16) = &v8;
    *a3 = v5;
    *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_218610DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *begin;
  __int128 *end;
  std::string __p;
  _QWORD *v9;
  std::string v10;
  uint64_t v11;
  _QWORD *v12;
  std::vector<std::string> v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22[2];
  _BYTE v23[13];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = 1;
  v18 = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v16 = 0;
  v15[0] = a2;
  v15[1] = 0;
  memset(&v13, 0, sizeof(v13));
  v14 = a3;
  if (&v13 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *(std::string **)(a1 + 16), *(__int128 **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
    begin = (__int128 *)v13.__begin_;
    end = (__int128 *)v13.__end_;
  }
  v12 = v15;
  v9 = v15;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  v11 = v14;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,tc_plot_variation,BOOL>>::operator()<1>(&v9);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,tc_plot_variation,BOOL>>::operator()<2>((_BOOL8)&v9);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::string>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>((uint64_t)&__p, a1, (uint64_t)v15);
  turi::flexible_type_converter<std::string>::set(&__p, (uint64_t)v23);
  *(_QWORD *)(a4 + 13) = *(_QWORD *)&v23[5];
  *(_QWORD *)(a4 + 8) = *(_QWORD *)v23;
  *(_BYTE *)(a4 + 20) = v23[12];
  *(_DWORD *)a4 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
}

void sub_218610F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a29);
  _Unwind_Resume(a1);
}

double turi::toolkit_function_wrapper_impl::result_of_function_wrapper<std::string>::call<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::visualization::Plot *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<2ul,turi::visualization::Plot,std::string,tc_plot_variation,BOOL>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,std::vector<std::string>)::{lambda(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator() const(turi::visualization::Plot*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD);
  _QWORD *v6;
  double result;
  __int128 v8;
  uint64_t v9;

  v5 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD))a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(*(_QWORD *)a3 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v6 + v5);
  v5(&v8, v6, *(_QWORD *)(a3 + 8), *(unsigned __int8 *)(a3 + 16));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *(double *)&v8;
  *(_OWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

_QWORD *turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,tc_plot_variation,BOOL>>::operator()<1>(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v1 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - v1) >> 3) >= 2)
  {
    v2 = result;
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(result[4], (const void **)(v1 + 24));
    if (v2[4] + 8 == v3)
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>(mpl_::integral_c<int,1>)const::{lambda(void)#1}::operator()();
    result = (_QWORD *)turi::variant_converter<tc_plot_variation,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(_QWORD *)(*v2 + 8) = result;
  }
  return result;
}

BOOL turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::visualization::Plot *,tc_plot_variation,BOOL>>::operator()<2>(_BOOL8 result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 16) - v1) >> 3) >= 3)
  {
    v2 = (_QWORD *)result;
    v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*(_QWORD *)(result + 32), (const void **)(v1 + 48));
    if (v2[4] + 8 == v3)
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    result = turi::variant_converter<BOOL,void>::get((uint64_t)&v4, (int *)(v3 + 56));
    *(_BYTE *)(*v2 + 16) = result;
  }
  return result;
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D94C648;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D94C648;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D94C648;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_218611238(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D94C648;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,std::string,tc_plot_variation,BOOL,char const*,char const*>(std::string (turi::visualization::Plot::*)(tc_plot_variation,BOOL)const,char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::visualization::Plot,std::string>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const std::string *v8;
  std::vector<std::string>::const_iterator v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[4];
  std::vector<std::string>::value_type __x;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28[2];
  _QWORD **v29;
  _QWORD *v30[2];
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v25 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v26 = 0;
  v27 = v28;
  v29 = v30;
  v30[0] = 0;
  v30[1] = 0;
  v32 = 0;
  v34 = 0;
  v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v10 = __x.__r_.__value_.__r.__words[2];
  v11 = v21;
  v12 = v22;
  v21 = 0;
  v22 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(_QWORD *)(a4 + 24) = 0;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = &unk_24D94C6C8;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 3) = v10;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v12;
  memset(v19, 0, 24);
  *(_QWORD *)(a4 + 24) = v13;
  v23 = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v23 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 8 * v16))(v15, v14);
LABEL_8:
  v17 = v32;
  if (v32 == v31)
  {
    v18 = 4;
    v17 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v17 + 8 * v18))(v17, v14);
LABEL_13:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v29, v30[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v27, v28[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
}

void sub_21861155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  turi::toolkit_function_specification::~toolkit_function_specification((turi::toolkit_function_specification *)&a24);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EED1Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C6C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EED0Ev(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24D94C6C8;
  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x219A19A08](a1, 0xA1C40C7E57C1ALL);
}

char *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEv(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &unk_24D94C6C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2186116B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE7__cloneEPNS0_6__baseIS1S_EE(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &unk_24D94C6C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(__int128 **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE7destroyEv(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE18destroy_deallocateEv(void **a1)
{
  void **v2;

  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EEclEOS1P_OS1F_(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::proprietary::style_transfer::style_transfer *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_const_member_function_wrapper<0ul,turi::proprietary::style_transfer::style_transfer,std::string>(std::string (turi::proprietary::style_transfer::style_transfer::*)()const,std::vector<std::string>)::{lambda(turi::proprietary::style_transfer::style_transfer*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi29toolkit_function_wrapper_impl38generate_const_member_function_wrapperILm0ENS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPT0_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMS1B_KFT1_DpT2_ENS14_ISC_NSA_ISC_EEEEEUlPS6_S1F_E_NSA_IS1Q_EEFS1A_S1P_S1F_EE11target_typeEv()
{
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_ED1Ev(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24D94C748;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_ED0Ev(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24D94C748;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x219A19A08);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E7__cloneEv(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24D94C748;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2186118D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E7__cloneEPNS0_6__baseIS1F_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24D94C748;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *_ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E7destroyEv(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E18destroy_deallocateEv(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_EclEOS1B_OS1E_(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::visualization::Plot,void,std::string const&,tc_plot_variation,char const*,char const*>(void (turi::visualization::Plot::*)(std::string const&,tc_plot_variation),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t _ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEJEJEEENS4_8functionIFN5boost7variantINSC_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSJ_INS_10model_baseEEENSJ_INS_17unity_sframe_baseEEENSJ_INS_17unity_sarray_baseEEENS4_3mapISA_NSC_18recursive_variant_ENS4_4lessISA_EENS8_INS4_4pairIKSA_SU_EEEEEENS4_6vectorISU_NS8_ISU_EEEENSC_17recursive_wrapperINS_21function_closure_infoEEEEEEPSN_NST_ISA_S18_SW_NS8_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS19_S1C_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS2_13visualization4PlotENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEJEJEEENS_8functionIFN5boost7variantINSE_6detail7variant14recursive_flagINS2_13flexible_typeEEEJNS_10shared_ptrINS2_17unity_sgraph_baseEEENS2_11dataframe_tENSL_INS2_10model_baseEEENSL_INS2_17unity_sframe_baseEEENSL_INS2_17unity_sarray_baseEEENS_3mapISC_NSE_18recursive_variant_ENS_4lessISC_EENSA_INS_4pairIKSC_SW_EEEEEENS_6vectorISW_NSA_ISW_EEEENSE_17recursive_wrapperINS2_21function_closure_infoEEEEEEPSP_NSV_ISC_S1A_SY_NSA_INSZ_IS10_S1A_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS1B_S1E_E_NSA_IS1P_EES1F_E11target_typeEv()
{
  return &_ZTIZN4turi26toolkit_class_wrapper_impl41generate_member_function_wrapper_indirectINS_13visualization4PlotENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEJEJEEENS4_8functionIFN5boost7variantINSC_6detail7variant14recursive_flagINS_13flexible_typeEEEJNS4_10shared_ptrINS_17unity_sgraph_baseEEENS_11dataframe_tENSJ_INS_10model_baseEEENSJ_INS_17unity_sframe_baseEEENSJ_INS_17unity_sarray_baseEEENS4_3mapISA_NSC_18recursive_variant_ENS4_4lessISA_EENS8_INS4_4pairIKSA_SU_EEEEEENS4_6vectorISU_NS8_ISU_EEEENSC_17recursive_wrapperINS_21function_closure_infoEEEEEEPSN_NST_ISA_S18_SW_NS8_INSX_ISY_S18_EEEEEEEEEMT_KFT0_DpT1_EDpT2_EUlS19_S1C_E_;
}

uint64_t _GLOBAL__sub_I_plot_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::visualization::process_wrapper::process_wrapper(uint64_t a1, char *a2)
{
  pthread_cond_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  std::__thread_struct *v14;
  _QWORD *v15;
  int v16;
  std::__thread_struct *v17;
  _QWORD *v18;
  std::runtime_error *exception;
  pthread_t v20[3];
  void *__p[2];
  char v22;
  pthread_t *v23;

  *(_BYTE *)a1 = 1;
  v4 = (pthread_cond_t *)(a1 + 72);
  v5 = pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0);
  assert_msg((_DWORD)v5 == 0, (uint64_t)"Mutex create error %d", v6, v7, v8, v9, v10, v11, v5);
  turi::conditional::conditional(v4);
  *(_QWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 850045863;
  v12 = (_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 256) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (a2[23] >= 0)
    v13 = a2;
  else
    v13 = *(char **)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, v13);
  memset(v20, 0, sizeof(v20));
  turi::process::popen(a1 + 120, (uint64_t)__p, (uint64_t **)v20, 1, 1);
  v23 = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if ((turi::process::exists((turi::process *)(a1 + 120)) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Turi Create visualization process was unable to launch.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  turi::process::set_nonblocking((turi::process *)(a1 + 120), 1);
  turi::process::autoreap(a1 + 120);
  v14 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v14);
  v15 = (_QWORD *)operator new();
  *v15 = v14;
  v15[1] = a1;
  __p[0] = v15;
  v16 = pthread_create(v20, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>, v15);
  if (!v16)
  {
    __p[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)__p);
    if (*v12)
      goto LABEL_12;
    *v12 = v20[0];
    v20[0] = 0;
    std::thread::~thread((std::thread *)v20);
    v17 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v17);
    v18 = (_QWORD *)operator new();
    *v18 = v17;
    v18[1] = a1;
    __p[0] = v18;
    v16 = pthread_create(v20, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_1>>, v18);
    if (!v16)
    {
      __p[0] = 0;
      std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)__p);
      if (!*(_QWORD *)(a1 + 368))
      {
        *(pthread_t *)(a1 + 368) = v20[0];
        v20[0] = 0;
        std::thread::~thread((std::thread *)v20);
        return;
      }
LABEL_12:
      std::terminate();
    }
  }
  std::__throw_system_error(v16, "thread constructor failed");
  __break(1u);
}

void sub_218611CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  pthread_mutex_t *v19;
  uint64_t v20;
  pthread_cond_t *v21;
  turi::process *v22;
  std::mutex *v23;
  std::thread *v24;
  std::mutex *v25;
  std::thread *v26;
  void *v27;

  __cxa_free_exception(v27);
  std::thread::~thread(v26);
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)(v20 + 320));
  std::mutex::~mutex(v25);
  std::thread::~thread(v24);
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)(v20 + 200));
  std::mutex::~mutex(v23);
  turi::process::~process(v22);
  turi::conditional::~conditional(v21);
  turi::mutex::~mutex(v19);
  _Unwind_Resume(a1);
}

void turi::visualization::process_wrapper::~process_wrapper(turi::visualization::process_wrapper *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *(_BYTE *)this = 0;
  v3 = pthread_cond_signal((pthread_cond_t *)((char *)this + 72));
  assert_msg((_DWORD)v3 == 0, (uint64_t)"Condition variable signal error %d", v4, v5, v6, v7, v8, v9, v3);
  pthread_mutex_unlock(v2);
  std::thread::join((std::thread *)this + 31);
  std::thread::join((std::thread *)this + 46);
  std::thread::~thread((std::thread *)this + 46);
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)this + 40);
  std::mutex::~mutex((std::mutex *)this + 4);
  std::thread::~thread((std::thread *)this + 31);
  std::deque<std::string>::~deque[abi:ne180100]((_QWORD *)this + 25);
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  turi::process::~process((turi::visualization::process_wrapper *)((char *)this + 120));
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 72));
  turi::mutex::~mutex(v2);
}

uint64_t turi::visualization::process_wrapper::operator<<(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)a1 && turi::process::exists((turi::process *)(a1 + 120)))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
    turi::visualization::io_buffer::write((std::mutex *)(a1 + 256), a2);
    v4 = pthread_cond_signal((pthread_cond_t *)(a1 + 72));
    assert_msg((_DWORD)v4 == 0, (uint64_t)"Condition variable signal error %d", v5, v6, v7, v8, v9, v10, v4);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 8));
  }
  return a1;
}

void sub_218611F64(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::process_wrapper::good(turi::visualization::process_wrapper *this)
{
  if (*(_BYTE *)this)
    return turi::process::exists((turi::visualization::process_wrapper *)((char *)this + 120));
  else
    return 0;
}

uint64_t turi::visualization::process_wrapper::operator>>(uint64_t a1, uint64_t a2)
{
  std::string v5;

  if (*(_BYTE *)a1 && turi::process::exists((turi::process *)(a1 + 120)))
  {
    turi::visualization::io_buffer::read((std::mutex *)(a1 + 136), &v5);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v5;
  }
  return a1;
}

void sub_218612194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  void *v13;
  std::string::size_type v15;
  std::string::size_type v16;
  const void **v17;
  std::string __str;
  void *__p[2];
  uint64_t v20;
  std::string v21;
  uint64_t v22[8];
  std::string v23;
  uint64_t v24;
  std::string v25;
  __int128 v26;
  uint64_t v27;

  v17 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v17;
  *v17 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (uint64_t)v17[1];
  v26 = 0uLL;
  v27 = 0;
  if (*(_BYTE *)v3)
  {
    v4 = *MEMORY[0x24BEDB7F0];
    v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v5 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (!turi::process::exists((turi::process *)(v3 + 120)))
        break;
      turi::process::read_from_child((turi::process *)(v3 + 120), v6);
      if (v27 >= 0)
        v7 = (const std::string::value_type *)&v26;
      else
        v7 = (const std::string::value_type *)v26;
      if (v27 >= 0)
        v8 = HIBYTE(v27);
      else
        v8 = *((_QWORD *)&v26 + 1);
      v9 = std::string::insert(&v21, 0, v7, v8);
      v25 = *v9;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v25.__r_.__value_.__l.__size_;
      if (size)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v25;
        else
          v11 = (std::string *)v25.__r_.__value_.__r.__words[0];
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        else
          v12 = v25.__r_.__value_.__l.__size_;
        for (; v12; --v12)
        {
          if (v11->__r_.__value_.__s.__data_[0] == 10)
          {
            std::stringbuf::str();
            v13 = (void *)HIBYTE(v20);
            if (v20 < 0)
              v13 = __p[1];
            if (v13)
              turi::visualization::io_buffer::write((std::mutex *)(v3 + 136), (__int128 *)__p);
            memset(&__str, 0, sizeof(__str));
            std::string::operator=(&v23, &__str);
            std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v22);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v20) < 0)
              operator delete(__p[0]);
          }
          else
          {
            LOBYTE(__p[0]) = v11->__r_.__value_.__s.__data_[0];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21.__r_.__value_.__r.__words[2], (uint64_t)__p, 1);
          }
          v11 = (std::string *)((char *)v11 + 1);
        }
        std::stringbuf::str();
        if (SHIBYTE(v27) < 0)
          operator delete((void *)v26);
        v26 = *(_OWORD *)__p;
        v27 = v20;
        v21.__r_.__value_.__r.__words[0] = v4;
        *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + *(_QWORD *)(v4 - 24)) = v15;
        v21.__r_.__value_.__r.__words[2] = v16;
        v22[0] = v5;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x219A198F4](&v24);
      }
      else
      {
        v21.__r_.__value_.__r.__words[0] = 100000000;
        std::this_thread::sleep_for ((const std::chrono::nanoseconds *)&v21);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
    }
    while (*(_BYTE *)v3);
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)&v17);
  return 0;
}

void sub_2186124E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x219A19A08](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_1>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t v3;
  std::string *p_p;
  size_t size;
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  const void **v16;
  std::string __p;
  pthread_mutex_t *v18;
  char v19;

  v16 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v16;
  *v16 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (uint64_t)v16[1];
  v18 = (pthread_mutex_t *)(v3 + 8);
  v19 = 1;
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 8));
  while (1)
  {
    while (turi::process::exists((turi::process *)(v3 + 120))
         && turi::visualization::io_buffer::size((turi::visualization::io_buffer *)(v3 + 256)))
    {
      turi::visualization::io_buffer::read((std::mutex *)(v3 + 256), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      turi::process::write_to_child((turi::process *)(v3 + 120), (char *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!*(_BYTE *)v3 || !turi::process::exists((turi::process *)(v3 + 120)))
      break;
    v6 = v18;
    v18 = 0;
    v19 = 0;
    v7 = pthread_cond_wait((pthread_cond_t *)(v3 + 72), v6);
    assert_msg((_DWORD)v7 == 0, (uint64_t)"Condition variable wait error %d", v8, v9, v10, v11, v12, v13, v7);
    v14 = v18;
    v18 = v6;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    LOBYTE(v14) = v19;
    v19 = 1;
    __p.__r_.__value_.__s.__data_[8] = (char)v14;
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
  }
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)&v16);
  return 0;
}

void sub_218612798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,turi::visualization::process_wrapper::process_wrapper(std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_process_wrapper_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_registration_cpp_0()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::visualization::scatter::get@<D0>(turi::visualization::scatter *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<turi::visualization::scatter_result,std::allocator<turi::visualization::scatter_result>,turi::gl_sframe &,void>((turi::visualization::scatter *)((char *)this + 8), v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t turi::visualization::scatter::eof(turi::visualization::scatter *this)
{
  return 1;
}

uint64_t turi::visualization::scatter::get_rows_processed(turi::visualization::scatter *this)
{
  return turi::gl_sframe::size((turi::visualization::scatter *)((char *)this + 8));
}

uint64_t turi::visualization::scatter::get_total_rows(turi::visualization::scatter *this)
{
  return turi::gl_sframe::size((turi::visualization::scatter *)((char *)this + 8));
}

uint64_t turi::visualization::scatter::get_batch_size(turi::visualization::scatter *this)
{
  return turi::gl_sframe::size((turi::visualization::scatter *)((char *)this + 8));
}

uint64_t turi::visualization::scatter_result::vega_column_data(turi::visualization::scatter_result *this)
{
  turi::gl_sframe *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::string::size_type v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  void *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::string::size_type v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::string::size_type v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  std::string::size_type v57;
  unsigned int v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::string::size_type v62;
  void *v63;
  void *v64;
  int v65;
  unint64_t *v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  std::string::size_type v75;
  unint64_t v76;
  unint64_t v77;
  std::string::size_type v78;
  void *v79;
  void *v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  std::string::size_type v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  std::string::size_type v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  std::string::size_type v94;
  std::string::size_type v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::string::size_type v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  std::string::size_type v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  std::string::size_type v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  std::string::size_type v117;
  void *v118;
  void *v119;
  int v120;
  unint64_t *v121;
  BOOL v122;
  unint64_t v123;
  unint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  std::string::size_type v130;
  unint64_t v131;
  unint64_t v132;
  std::string::size_type v133;
  void *v134;
  void *v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  std::string::size_type v139;
  void *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  std::string::size_type v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  std::string::size_type v149;
  std::string::size_type v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::string::size_type v155;
  void *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  std::string::size_type v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  std::string::size_type v167;
  unsigned int v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  std::string::size_type v172;
  void *v173;
  void *v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  std::string::size_type size;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  __int128 v184;
  void **v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  void *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  void *v214;
  void *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  void *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  void *v243;
  void *v244;
  uint64_t v245;
  void *v247[2];
  char v248;
  std::string v249;
  void *v250[2];
  char v251;
  std::string v252;
  std::string v253;
  _QWORD *v254[6];
  void *__p;
  char v256;
  void *v257[2];
  int64_t v258;
  _QWORD *v259[6];
  void *v260;
  char v261;
  _QWORD v262[2];
  _QWORD v263[11];
  char v264;
  uint64_t v265;
  void **v266;
  uint64_t v267;
  int v268;
  char v269;
  uint64_t v270;
  int v271;
  char v272;
  std::string v273;
  std::string v274;
  uint64_t v275;

  v275 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v262);
  v2 = (turi::visualization::scatter_result *)((char *)this + 8);
  v3 = turi::gl_sframe::size(v2);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v257, "x");
      turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)v257, (turi::gl_sarray *)v259);
      turi::gl_sarray::operator[](v259, v4, (uint64_t)&v274);
      if (v274.__r_.__value_.__s.__data_[12] == 7)
      {
        v6 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v253, "y");
        turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)&v253, (turi::gl_sarray *)v254);
        turi::gl_sarray::operator[](v254, v4, (uint64_t)&v273);
        v6 = v273.__r_.__value_.__s.__data_[12] == 7;
        switch(v273.__r_.__value_.__s.__data_[12])
        {
          case 2:
            v7 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v273.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v273.__r_.__value_.__r.__words[0] + 8));
                v11 = v10;
                v12 = 0x1012C404EF22A49;
                goto LABEL_46;
              }
            }
            break;
          case 3:
            v13 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v17 = *(void **)(v273.__r_.__value_.__r.__words[0] + 8);
                if (v17)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 16) = v17;
                  operator delete(v17);
                }
                v11 = v16;
                v12 = 0x1080C409938AC02;
                goto LABEL_46;
              }
            }
            break;
          case 4:
            v18 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                goto LABEL_30;
              }
            }
            break;
          case 5:
            v22 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
LABEL_30:
                v11 = v21;
                v12 = 0x1020C405E66F15BLL;
                goto LABEL_46;
              }
            }
            break;
          case 8:
            v25 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v273.__r_.__value_.__r.__words[0] + 16));
                v11 = v28;
                v29 = -235920773;
                goto LABEL_45;
              }
            }
            break;
          case 9:
            v30 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v34 = *(void **)(v273.__r_.__value_.__r.__words[0] + 48);
                if (v34)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 56) = v34;
                  operator delete(v34);
                }
                v35 = *(void **)(v33 + 24);
                if (v35)
                {
                  *(_QWORD *)(v33 + 32) = v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
                v11 = v33;
                v29 = 2071181815;
LABEL_45:
                v12 = v29 | 0x1030C4000000000;
LABEL_46:
                MEMORY[0x219A19A08](v11, v12);
              }
            }
            break;
          default:
            break;
        }
        v273.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
        v273.__r_.__value_.__s.__data_[12] = 0;
        v254[0] = off_24D91EA58;
        if (v256 < 0)
          operator delete(__p);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v254);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        switch(v274.__r_.__value_.__s.__data_[12])
        {
          case 2:
            v36 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              v39 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v274.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v274.__r_.__value_.__r.__words[0] + 8));
                v40 = v39;
                v41 = 0x1012C404EF22A49;
                goto LABEL_92;
              }
            }
            break;
          case 3:
            v42 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              v45 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                v46 = *(void **)(v274.__r_.__value_.__r.__words[0] + 8);
                if (v46)
                {
                  *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 16) = v46;
                  operator delete(v46);
                }
                v40 = v45;
                v41 = 0x1080C409938AC02;
                goto LABEL_92;
              }
            }
            break;
          case 4:
            v47 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v48 = __ldaxr(v47);
              v49 = v48 - 1;
            }
            while (__stlxr(v49, v47));
            if (!v49)
            {
              v50 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
                goto LABEL_76;
              }
            }
            break;
          case 5:
            v51 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v52 = __ldaxr(v51);
              v53 = v52 - 1;
            }
            while (__stlxr(v53, v51));
            if (!v53)
            {
              v50 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
LABEL_76:
                v40 = v50;
                v41 = 0x1020C405E66F15BLL;
                goto LABEL_92;
              }
            }
            break;
          case 8:
            v54 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              v57 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v274.__r_.__value_.__r.__words[0] + 16));
                v40 = v57;
                v58 = -235920773;
                goto LABEL_91;
              }
            }
            break;
          case 9:
            v59 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
            {
              v62 = v274.__r_.__value_.__r.__words[0];
              if (v274.__r_.__value_.__r.__words[0])
              {
                v63 = *(void **)(v274.__r_.__value_.__r.__words[0] + 48);
                if (v63)
                {
                  *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 56) = v63;
                  operator delete(v63);
                }
                v64 = *(void **)(v62 + 24);
                if (v64)
                {
                  *(_QWORD *)(v62 + 32) = v64;
                  operator delete(v64);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v62 + 8);
                v40 = v62;
                v58 = 2071181815;
LABEL_91:
                v41 = v58 | 0x1030C4000000000;
LABEL_92:
                MEMORY[0x219A19A08](v40, v41);
              }
            }
            break;
          default:
            break;
        }
      }
      v274.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v274.__r_.__value_.__r.__words[1]) = 0;
      v274.__r_.__value_.__s.__data_[12] = 0;
      v259[0] = off_24D91EA58;
      if (v261 < 0)
        operator delete(v260);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v259);
      if (SHIBYTE(v258) < 0)
      {
        operator delete(v257[0]);
        if (v6)
          goto LABEL_400;
      }
      else if (v6)
      {
        goto LABEL_400;
      }
      std::string::basic_string[abi:ne180100]<0>(v257, "x");
      turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)v257, (turi::gl_sarray *)v259);
      turi::gl_sarray::operator[](v259, v4, (uint64_t)&v274);
      v65 = v274.__r_.__value_.__s.__data_[12];
      if (v274.__r_.__value_.__s.__data_[12] == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v253, "x");
        turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)&v253, (turi::gl_sarray *)v254);
        turi::gl_sarray::operator[](v254, v4, (uint64_t)&v273);
        v66 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
        v67 = (v273.__r_.__value_.__r.__words[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
        switch(v273.__r_.__value_.__s.__data_[12])
        {
          case 2:
            do
            {
              v68 = __ldaxr(v66);
              v69 = v68 - 1;
            }
            while (__stlxr(v69, v66));
            if (!v69)
            {
              v70 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v273.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v273.__r_.__value_.__r.__words[0] + 8));
                v71 = v70;
                v72 = 0x1012C404EF22A49;
                goto LABEL_135;
              }
            }
            break;
          case 3:
            do
            {
              v82 = __ldaxr(v66);
              v83 = v82 - 1;
            }
            while (__stlxr(v83, v66));
            if (!v83)
            {
              v84 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v85 = *(void **)(v273.__r_.__value_.__r.__words[0] + 8);
                if (v85)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 16) = v85;
                  operator delete(v85);
                }
                v71 = v84;
                v72 = 0x1080C409938AC02;
                goto LABEL_135;
              }
            }
            break;
          case 4:
            do
            {
              v73 = __ldaxr(v66);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, v66));
            if (!v74)
            {
              v75 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                goto LABEL_129;
              }
            }
            break;
          case 5:
            do
            {
              v86 = __ldaxr(v66);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v66));
            if (!v87)
            {
              v75 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
LABEL_129:
                v71 = v75;
                v72 = 0x1020C405E66F15BLL;
                goto LABEL_135;
              }
            }
            break;
          case 8:
            do
            {
              v88 = __ldaxr(v66);
              v89 = v88 - 1;
            }
            while (__stlxr(v89, v66));
            if (!v89)
            {
              v90 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v273.__r_.__value_.__r.__words[0] + 16));
                v71 = v90;
                v81 = -235920773;
                goto LABEL_134;
              }
            }
            break;
          case 9:
            do
            {
              v76 = __ldaxr(v66);
              v77 = v76 - 1;
            }
            while (__stlxr(v77, v66));
            if (!v77)
            {
              v78 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v79 = *(void **)(v273.__r_.__value_.__r.__words[0] + 48);
                if (v79)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 56) = v79;
                  operator delete(v79);
                }
                v80 = *(void **)(v78 + 24);
                if (v80)
                {
                  *(_QWORD *)(v78 + 32) = v80;
                  operator delete(v80);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v78 + 8);
                v71 = v78;
                v81 = 2071181815;
LABEL_134:
                v72 = v81 | 0x1030C4000000000;
LABEL_135:
                MEMORY[0x219A19A08](v71, v72);
              }
            }
            break;
          default:
            break;
        }
        v273.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
        v273.__r_.__value_.__s.__data_[12] = 0;
        v254[0] = off_24D91EA58;
        if (v256 < 0)
          operator delete(__p);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v254);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        v65 = v274.__r_.__value_.__s.__data_[12];
      }
      else
      {
        v67 = 0;
      }
      switch(v65)
      {
        case 2:
          v91 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            v94 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v274.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v274.__r_.__value_.__r.__words[0] + 8));
              v95 = v94;
              v96 = 0x1012C404EF22A49;
              goto LABEL_183;
            }
          }
          break;
        case 3:
          v97 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v98 = __ldaxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
          {
            v100 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v101 = *(void **)(v274.__r_.__value_.__r.__words[0] + 8);
              if (v101)
              {
                *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 16) = v101;
                operator delete(v101);
              }
              v95 = v100;
              v96 = 0x1080C409938AC02;
              goto LABEL_183;
            }
          }
          break;
        case 4:
          v102 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v103 = __ldaxr(v102);
            v104 = v103 - 1;
          }
          while (__stlxr(v104, v102));
          if (!v104)
          {
            v105 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
              goto LABEL_167;
            }
          }
          break;
        case 5:
          v106 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            v105 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
LABEL_167:
              v95 = v105;
              v96 = 0x1020C405E66F15BLL;
              goto LABEL_183;
            }
          }
          break;
        case 8:
          v109 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v110 = __ldaxr(v109);
            v111 = v110 - 1;
          }
          while (__stlxr(v111, v109));
          if (!v111)
          {
            v112 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v274.__r_.__value_.__r.__words[0] + 16));
              v95 = v112;
              v113 = -235920773;
              goto LABEL_182;
            }
          }
          break;
        case 9:
          v114 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v115 = __ldaxr(v114);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v114));
          if (!v116)
          {
            v117 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v118 = *(void **)(v274.__r_.__value_.__r.__words[0] + 48);
              if (v118)
              {
                *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 56) = v118;
                operator delete(v118);
              }
              v119 = *(void **)(v117 + 24);
              if (v119)
              {
                *(_QWORD *)(v117 + 32) = v119;
                operator delete(v119);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v117 + 8);
              v95 = v117;
              v113 = 2071181815;
LABEL_182:
              v96 = v113 | 0x1030C4000000000;
LABEL_183:
              MEMORY[0x219A19A08](v95, v96);
            }
          }
          break;
        default:
          break;
      }
      v274.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v274.__r_.__value_.__r.__words[1]) = 0;
      v274.__r_.__value_.__s.__data_[12] = 0;
      v259[0] = off_24D91EA58;
      if (v261 < 0)
        operator delete(v260);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v259);
      if (SHIBYTE(v258) < 0)
      {
        operator delete(v257[0]);
        if (v67)
          goto LABEL_400;
      }
      else if (v67)
      {
        goto LABEL_400;
      }
      std::string::basic_string[abi:ne180100]<0>(v257, "y");
      turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)v257, (turi::gl_sarray *)v259);
      turi::gl_sarray::operator[](v259, v4, (uint64_t)&v274);
      v120 = v274.__r_.__value_.__s.__data_[12];
      if (v274.__r_.__value_.__s.__data_[12] == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v253, "y");
        turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)&v253, (turi::gl_sarray *)v254);
        turi::gl_sarray::operator[](v254, v4, (uint64_t)&v273);
        v121 = (unint64_t *)v273.__r_.__value_.__r.__words[0];
        v122 = (v273.__r_.__value_.__r.__words[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
        switch(v273.__r_.__value_.__s.__data_[12])
        {
          case 2:
            do
            {
              v123 = __ldaxr(v121);
              v124 = v123 - 1;
            }
            while (__stlxr(v124, v121));
            if (!v124)
            {
              v125 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                if (*(char *)(v273.__r_.__value_.__r.__words[0] + 31) < 0)
                  operator delete(*(void **)(v273.__r_.__value_.__r.__words[0] + 8));
                v126 = v125;
                v127 = 0x1012C404EF22A49;
                goto LABEL_226;
              }
            }
            break;
          case 3:
            do
            {
              v137 = __ldaxr(v121);
              v138 = v137 - 1;
            }
            while (__stlxr(v138, v121));
            if (!v138)
            {
              v139 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v140 = *(void **)(v273.__r_.__value_.__r.__words[0] + 8);
                if (v140)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 16) = v140;
                  operator delete(v140);
                }
                v126 = v139;
                v127 = 0x1080C409938AC02;
                goto LABEL_226;
              }
            }
            break;
          case 4:
            do
            {
              v128 = __ldaxr(v121);
              v129 = v128 - 1;
            }
            while (__stlxr(v129, v121));
            if (!v129)
            {
              v130 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                goto LABEL_220;
              }
            }
            break;
          case 5:
            do
            {
              v141 = __ldaxr(v121);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, v121));
            if (!v142)
            {
              v130 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v252.__r_.__value_.__r.__words[0] = v273.__r_.__value_.__r.__words[0] + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
LABEL_220:
                v126 = v130;
                v127 = 0x1020C405E66F15BLL;
                goto LABEL_226;
              }
            }
            break;
          case 8:
            do
            {
              v143 = __ldaxr(v121);
              v144 = v143 - 1;
            }
            while (__stlxr(v144, v121));
            if (!v144)
            {
              v145 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v273.__r_.__value_.__r.__words[0] + 16));
                v126 = v145;
                v136 = -235920773;
                goto LABEL_225;
              }
            }
            break;
          case 9:
            do
            {
              v131 = __ldaxr(v121);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v121));
            if (!v132)
            {
              v133 = v273.__r_.__value_.__r.__words[0];
              if (v273.__r_.__value_.__r.__words[0])
              {
                v134 = *(void **)(v273.__r_.__value_.__r.__words[0] + 48);
                if (v134)
                {
                  *(_QWORD *)(v273.__r_.__value_.__r.__words[0] + 56) = v134;
                  operator delete(v134);
                }
                v135 = *(void **)(v133 + 24);
                if (v135)
                {
                  *(_QWORD *)(v133 + 32) = v135;
                  operator delete(v135);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v133 + 8);
                v126 = v133;
                v136 = 2071181815;
LABEL_225:
                v127 = v136 | 0x1030C4000000000;
LABEL_226:
                MEMORY[0x219A19A08](v126, v127);
              }
            }
            break;
          default:
            break;
        }
        v273.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v273.__r_.__value_.__r.__words[1]) = 0;
        v273.__r_.__value_.__s.__data_[12] = 0;
        v254[0] = off_24D91EA58;
        if (v256 < 0)
          operator delete(__p);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v254);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        v120 = v274.__r_.__value_.__s.__data_[12];
      }
      else
      {
        v122 = 0;
      }
      switch(v120)
      {
        case 2:
          v146 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          if (!v148)
          {
            v149 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v274.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v274.__r_.__value_.__r.__words[0] + 8));
              v150 = v149;
              v151 = 0x1012C404EF22A49;
              goto LABEL_274;
            }
          }
          break;
        case 3:
          v152 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (!v154)
          {
            v155 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v156 = *(void **)(v274.__r_.__value_.__r.__words[0] + 8);
              if (v156)
              {
                *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 16) = v156;
                operator delete(v156);
              }
              v150 = v155;
              v151 = 0x1080C409938AC02;
              goto LABEL_274;
            }
          }
          break;
        case 4:
          v157 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v158 = __ldaxr(v157);
            v159 = v158 - 1;
          }
          while (__stlxr(v159, v157));
          if (!v159)
          {
            v160 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
              goto LABEL_258;
            }
          }
          break;
        case 5:
          v161 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          if (!v163)
          {
            v160 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v254[0] = (_QWORD *)(v274.__r_.__value_.__r.__words[0] + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
LABEL_258:
              v150 = v160;
              v151 = 0x1020C405E66F15BLL;
              goto LABEL_274;
            }
          }
          break;
        case 8:
          v164 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v165 = __ldaxr(v164);
            v166 = v165 - 1;
          }
          while (__stlxr(v166, v164));
          if (!v166)
          {
            v167 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v274.__r_.__value_.__r.__words[0] + 16));
              v150 = v167;
              v168 = -235920773;
              goto LABEL_273;
            }
          }
          break;
        case 9:
          v169 = (unint64_t *)v274.__r_.__value_.__r.__words[0];
          do
          {
            v170 = __ldaxr(v169);
            v171 = v170 - 1;
          }
          while (__stlxr(v171, v169));
          if (!v171)
          {
            v172 = v274.__r_.__value_.__r.__words[0];
            if (v274.__r_.__value_.__r.__words[0])
            {
              v173 = *(void **)(v274.__r_.__value_.__r.__words[0] + 48);
              if (v173)
              {
                *(_QWORD *)(v274.__r_.__value_.__r.__words[0] + 56) = v173;
                operator delete(v173);
              }
              v174 = *(void **)(v172 + 24);
              if (v174)
              {
                *(_QWORD *)(v172 + 32) = v174;
                operator delete(v174);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v172 + 8);
              v150 = v172;
              v168 = 2071181815;
LABEL_273:
              v151 = v168 | 0x1030C4000000000;
LABEL_274:
              MEMORY[0x219A19A08](v150, v151);
            }
          }
          break;
        default:
          break;
      }
      v274.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v274.__r_.__value_.__r.__words[1]) = 0;
      v274.__r_.__value_.__s.__data_[12] = 0;
      v259[0] = off_24D91EA58;
      if (v261 < 0)
        operator delete(v260);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v259);
      if (SHIBYTE(v258) < 0)
      {
        operator delete(v257[0]);
        if (!v122)
        {
LABEL_281:
          if (v5)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, (uint64_t)",", 1);
          std::string::basic_string[abi:ne180100]<0>(v250, "x");
          turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)v250, (turi::gl_sarray *)v259);
          turi::gl_sarray::operator[](v259, v4, (uint64_t)&v270);
          to_string((uint64_t)&v270, &v252);
          v175 = std::string::insert(&v252, 0, "{\"x\": ");
          v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
          v273.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v176;
          v175->__r_.__value_.__l.__size_ = 0;
          v175->__r_.__value_.__r.__words[2] = 0;
          v175->__r_.__value_.__r.__words[0] = 0;
          v177 = std::string::append(&v273, ", \"y\": ");
          v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
          v274.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v178;
          v177->__r_.__value_.__l.__size_ = 0;
          v177->__r_.__value_.__r.__words[2] = 0;
          v177->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(v247, "y");
          turi::gl_sframe::operator[]((uint64_t)v2, (uint64_t)v247, (turi::gl_sarray *)v254);
          turi::gl_sarray::operator[](v254, v4, (uint64_t)&v267);
          to_string((uint64_t)&v267, &v249);
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v179 = &v249;
          else
            v179 = (std::string *)v249.__r_.__value_.__r.__words[0];
          if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v249.__r_.__value_.__r.__words[2]);
          else
            size = v249.__r_.__value_.__l.__size_;
          v181 = std::string::append(&v274, (const std::string::value_type *)v179, size);
          v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
          v253.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v182;
          v181->__r_.__value_.__l.__size_ = 0;
          v181->__r_.__value_.__r.__words[2] = 0;
          v181->__r_.__value_.__r.__words[0] = 0;
          v183 = std::string::append(&v253, "}");
          v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v258 = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)v257 = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          if (v258 >= 0)
            v185 = v257;
          else
            v185 = (void **)v257[0];
          if (v258 >= 0)
            v186 = HIBYTE(v258);
          else
            v186 = (uint64_t)v257[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, (uint64_t)v185, v186);
          if (SHIBYTE(v258) < 0)
            operator delete(v257[0]);
          if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v253.__r_.__value_.__l.__data_);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v249.__r_.__value_.__l.__data_);
          switch(v269)
          {
            case 2:
              v187 = (unint64_t *)v267;
              do
              {
                v188 = __ldaxr(v187);
                v189 = v188 - 1;
              }
              while (__stlxr(v189, v187));
              if (!v189)
              {
                v190 = v267;
                if (v267)
                {
                  if (*(char *)(v267 + 31) < 0)
                    operator delete(*(void **)(v267 + 8));
                  v191 = v190;
                  v192 = 0x1012C404EF22A49;
                  goto LABEL_342;
                }
              }
              break;
            case 3:
              v193 = (unint64_t *)v267;
              do
              {
                v194 = __ldaxr(v193);
                v195 = v194 - 1;
              }
              while (__stlxr(v195, v193));
              if (!v195)
              {
                v196 = v267;
                if (v267)
                {
                  v197 = *(void **)(v267 + 8);
                  if (v197)
                  {
                    *(_QWORD *)(v267 + 16) = v197;
                    operator delete(v197);
                  }
                  v191 = v196;
                  v192 = 0x1080C409938AC02;
                  goto LABEL_342;
                }
              }
              break;
            case 4:
              v198 = (unint64_t *)v267;
              do
              {
                v199 = __ldaxr(v198);
                v200 = v199 - 1;
              }
              while (__stlxr(v200, v198));
              if (!v200)
              {
                v201 = v267;
                if (v267)
                {
                  v266 = (void **)(v267 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v266);
                  goto LABEL_326;
                }
              }
              break;
            case 5:
              v202 = (unint64_t *)v267;
              do
              {
                v203 = __ldaxr(v202);
                v204 = v203 - 1;
              }
              while (__stlxr(v204, v202));
              if (!v204)
              {
                v201 = v267;
                if (v267)
                {
                  v266 = (void **)(v267 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v266);
LABEL_326:
                  v191 = v201;
                  v192 = 0x1020C405E66F15BLL;
                  goto LABEL_342;
                }
              }
              break;
            case 8:
              v205 = (unint64_t *)v267;
              do
              {
                v206 = __ldaxr(v205);
                v207 = v206 - 1;
              }
              while (__stlxr(v207, v205));
              if (!v207)
              {
                v208 = v267;
                if (v267)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v267 + 16));
                  v191 = v208;
                  v209 = -235920773;
                  goto LABEL_341;
                }
              }
              break;
            case 9:
              v210 = (unint64_t *)v267;
              do
              {
                v211 = __ldaxr(v210);
                v212 = v211 - 1;
              }
              while (__stlxr(v212, v210));
              if (!v212)
              {
                v213 = v267;
                if (v267)
                {
                  v214 = *(void **)(v267 + 48);
                  if (v214)
                  {
                    *(_QWORD *)(v267 + 56) = v214;
                    operator delete(v214);
                  }
                  v215 = *(void **)(v213 + 24);
                  if (v215)
                  {
                    *(_QWORD *)(v213 + 32) = v215;
                    operator delete(v215);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v213 + 8);
                  v191 = v213;
                  v209 = 2071181815;
LABEL_341:
                  v192 = v209 | 0x1030C4000000000;
LABEL_342:
                  MEMORY[0x219A19A08](v191, v192);
                }
              }
              break;
            default:
              break;
          }
          v267 = 0;
          v268 = 0;
          v269 = 0;
          v254[0] = off_24D91EA58;
          if (v256 < 0)
            operator delete(__p);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v254);
          if (v248 < 0)
            operator delete(v247[0]);
          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v274.__r_.__value_.__l.__data_);
          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v273.__r_.__value_.__l.__data_);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v252.__r_.__value_.__l.__data_);
          switch(v272)
          {
            case 2:
              v216 = (unint64_t *)v270;
              do
              {
                v217 = __ldaxr(v216);
                v218 = v217 - 1;
              }
              while (__stlxr(v218, v216));
              if (!v218)
              {
                v219 = v270;
                if (v270)
                {
                  if (*(char *)(v270 + 31) < 0)
                    operator delete(*(void **)(v270 + 8));
                  v220 = v219;
                  v221 = 0x1012C404EF22A49;
                  goto LABEL_394;
                }
              }
              break;
            case 3:
              v222 = (unint64_t *)v270;
              do
              {
                v223 = __ldaxr(v222);
                v224 = v223 - 1;
              }
              while (__stlxr(v224, v222));
              if (!v224)
              {
                v225 = v270;
                if (v270)
                {
                  v226 = *(void **)(v270 + 8);
                  if (v226)
                  {
                    *(_QWORD *)(v270 + 16) = v226;
                    operator delete(v226);
                  }
                  v220 = v225;
                  v221 = 0x1080C409938AC02;
                  goto LABEL_394;
                }
              }
              break;
            case 4:
              v227 = (unint64_t *)v270;
              do
              {
                v228 = __ldaxr(v227);
                v229 = v228 - 1;
              }
              while (__stlxr(v229, v227));
              if (!v229)
              {
                v230 = v270;
                if (v270)
                {
                  v254[0] = (_QWORD *)(v270 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
                  goto LABEL_378;
                }
              }
              break;
            case 5:
              v231 = (unint64_t *)v270;
              do
              {
                v232 = __ldaxr(v231);
                v233 = v232 - 1;
              }
              while (__stlxr(v233, v231));
              if (!v233)
              {
                v230 = v270;
                if (v270)
                {
                  v254[0] = (_QWORD *)(v270 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v254);
LABEL_378:
                  v220 = v230;
                  v221 = 0x1020C405E66F15BLL;
                  goto LABEL_394;
                }
              }
              break;
            case 8:
              v234 = (unint64_t *)v270;
              do
              {
                v235 = __ldaxr(v234);
                v236 = v235 - 1;
              }
              while (__stlxr(v236, v234));
              if (!v236)
              {
                v237 = v270;
                if (v270)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v270 + 16));
                  v220 = v237;
                  v238 = -235920773;
                  goto LABEL_393;
                }
              }
              break;
            case 9:
              v239 = (unint64_t *)v270;
              do
              {
                v240 = __ldaxr(v239);
                v241 = v240 - 1;
              }
              while (__stlxr(v241, v239));
              if (!v241)
              {
                v242 = v270;
                if (v270)
                {
                  v243 = *(void **)(v270 + 48);
                  if (v243)
                  {
                    *(_QWORD *)(v270 + 56) = v243;
                    operator delete(v243);
                  }
                  v244 = *(void **)(v242 + 24);
                  if (v244)
                  {
                    *(_QWORD *)(v242 + 32) = v244;
                    operator delete(v244);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v242 + 8);
                  v220 = v242;
                  v238 = 2071181815;
LABEL_393:
                  v221 = v238 | 0x1030C4000000000;
LABEL_394:
                  MEMORY[0x219A19A08](v220, v221);
                }
              }
              break;
            default:
              break;
          }
          v270 = 0;
          v271 = 0;
          v272 = 0;
          v259[0] = off_24D91EA58;
          if (v261 < 0)
            operator delete(v260);
          turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v259);
          if (v251 < 0)
            operator delete(v250[0]);
          ++v5;
        }
      }
      else if (!v122)
      {
        goto LABEL_281;
      }
LABEL_400:
      ++v4;
    }
    while (v4 != v3);
  }
  std::stringbuf::str();
  v262[0] = *MEMORY[0x24BEDB7F0];
  v245 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v262 + *(_QWORD *)(v262[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v263[0] = v245;
  v263[1] = MEMORY[0x24BEDB848] + 16;
  if (v264 < 0)
    operator delete((void *)v263[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v265);
}

void sub_218613D58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *to_string@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::runtime_error *exception;

  if (*(_BYTE *)(a1 + 12) == 1)
    return std::to_string(a2, *(double *)a1);
  if (*(_BYTE *)(a1 + 12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected flexible_type type. Expected INTEGER or FLOAT.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return std::to_string(a2, *(_QWORD *)a1);
}

void sub_218614620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::visualization::plot_scatter@<X0>(turi::gl_sarray *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, const std::string *a5@<X4>, _QWORD *a6@<X8>)
{
  std::string *v12;
  std::string::size_type size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int **v17;
  unsigned int **v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int **v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int **v34;
  unsigned int *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int **v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void **v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  void **v56;
  void *v57;
  void *v58;
  unsigned int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  void **v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  void (**v75)(turi::visualization::scatter *__hidden);
  void (**v76)(turi::visualization::scatter *__hidden);
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  void (**v81)(turi::visualization::scatter *__hidden);
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  void (**v85)(turi::visualization::scatter *__hidden);
  void (*v86)(turi::visualization::scatter *__hidden);
  void (*v87)(turi::visualization::scatter *__hidden);
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void (**v92)(turi::visualization::scatter *__hidden);
  void (*v93)(turi::visualization::scatter *__hidden);
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  void (**v100)(turi::visualization::scatter *__hidden);
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD v115[2];
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  std::string __p[2];
  void *v120;
  char v121;
  double v122;
  _QWORD v123[2];
  _QWORD v124[11];
  char v125;
  uint64_t v126;
  unsigned int **v127;
  char v128;
  std::__shared_weak_count *v129;
  void (**v130)(turi::visualization::scatter *__hidden);
  _QWORD v131[2];
  std::__shared_weak_count *v132;
  void **v133;
  char v134;
  char v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v123);
  turi::flexible_type::flexible_type<std::string>((uint64_t)&v130, a3);
  turi::flexible_type::flexible_type<std::string>((uint64_t)&v133, a4);
  turi::flexible_type::flexible_type<std::string>((uint64_t)&v127, a5);
  turi::visualization::scatter_spec((turi::visualization *)&v130, (const turi::flexible_type *)&v133, (const turi::flexible_type *)&v127, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = __p;
  else
    v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    size = __p[0].__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)v12, size);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  switch(v128)
  {
    case 2:
      v14 = (unint64_t *)v127;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v127;
        if (v127)
        {
          if (*((char *)v127 + 31) < 0)
            operator delete(v127[1]);
          v18 = v17;
          v19 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v31 = (unint64_t *)v127;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v127;
        if (v127)
        {
          v35 = v127[1];
          if (v35)
          {
            v127[2] = v35;
            operator delete(v35);
          }
          v18 = v34;
          v19 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v20 = (unint64_t *)v127;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v127;
        if (v127)
        {
          v117[0] = v127 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
          goto LABEL_43;
        }
      }
      break;
    case 5:
      v36 = (unint64_t *)v127;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v23 = v127;
        if (v127)
        {
          v117[0] = v127 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v117);
LABEL_43:
          v18 = v23;
          v19 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 8:
      v39 = (unint64_t *)v127;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        v42 = v127;
        if (v127)
        {
          boost::detail::shared_count::~shared_count(v127 + 2);
          v18 = v42;
          v30 = -235920773;
          goto LABEL_49;
        }
      }
      break;
    case 9:
      v24 = (unint64_t *)v127;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = v127;
        if (v127)
        {
          v28 = v127[6];
          if (v28)
          {
            v127[7] = v28;
            operator delete(v28);
          }
          v29 = v27[3];
          if (v29)
          {
            v27[4] = v29;
            operator delete(v29);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v27 + 1));
          v18 = v27;
          v30 = 2071181815;
LABEL_49:
          v19 = v30 | 0x1030C4000000000;
LABEL_50:
          MEMORY[0x219A19A08](v18, v19);
        }
      }
      break;
    default:
      break;
  }
  switch(v134)
  {
    case 2:
      v43 = (unint64_t *)v133;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = v133;
        if (v133)
        {
          if (*((char *)v133 + 31) < 0)
            operator delete(v133[1]);
          v47 = v46;
          v48 = 0x1012C404EF22A49;
          goto LABEL_92;
        }
      }
      break;
    case 3:
      v60 = (unint64_t *)v133;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = v133;
        if (v133)
        {
          v64 = v133[1];
          if (v64)
          {
            v133[2] = v64;
            operator delete(v64);
          }
          v47 = v63;
          v48 = 0x1080C409938AC02;
          goto LABEL_92;
        }
      }
      break;
    case 4:
      v49 = (unint64_t *)v133;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = v133;
        if (v133)
        {
          v127 = (unsigned int **)(v133 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
          goto LABEL_85;
        }
      }
      break;
    case 5:
      v65 = (unint64_t *)v133;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v52 = v133;
        if (v133)
        {
          v127 = (unsigned int **)(v133 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
LABEL_85:
          v47 = v52;
          v48 = 0x1020C405E66F15BLL;
          goto LABEL_92;
        }
      }
      break;
    case 8:
      v68 = (unint64_t *)v133;
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v71 = v133;
        if (v133)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v133 + 2);
          v47 = v71;
          v59 = -235920773;
          goto LABEL_91;
        }
      }
      break;
    case 9:
      v53 = (unint64_t *)v133;
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        v56 = v133;
        if (v133)
        {
          v57 = v133[6];
          if (v57)
          {
            v133[7] = v57;
            operator delete(v57);
          }
          v58 = v56[3];
          if (v58)
          {
            v56[4] = v58;
            operator delete(v58);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v56 + 1));
          v47 = v56;
          v59 = 2071181815;
LABEL_91:
          v48 = v59 | 0x1030C4000000000;
LABEL_92:
          MEMORY[0x219A19A08](v47, v48);
        }
      }
      break;
    default:
      break;
  }
  switch(BYTE4(v131[0]))
  {
    case 2:
      v72 = (unint64_t *)v130;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v130;
        if (v130)
        {
          if (*((char *)v130 + 31) < 0)
            operator delete(v130[1]);
          v76 = v75;
          v77 = 0x1012C404EF22A49;
          goto LABEL_134;
        }
      }
      break;
    case 3:
      v89 = (unint64_t *)v130;
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = v130;
        if (v130)
        {
          v93 = v130[1];
          if (v93)
          {
            v130[2] = v93;
            operator delete(v93);
          }
          v76 = v92;
          v77 = 0x1080C409938AC02;
          goto LABEL_134;
        }
      }
      break;
    case 4:
      v78 = (unint64_t *)v130;
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = v130;
        if (v130)
        {
          v133 = (void **)(v130 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v133);
          goto LABEL_127;
        }
      }
      break;
    case 5:
      v94 = (unint64_t *)v130;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        v81 = v130;
        if (v130)
        {
          v133 = (void **)(v130 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v133);
LABEL_127:
          v76 = v81;
          v77 = 0x1020C405E66F15BLL;
          goto LABEL_134;
        }
      }
      break;
    case 8:
      v97 = (unint64_t *)v130;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = v130;
        if (v130)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v130 + 2);
          v76 = v100;
          v88 = -235920773;
          goto LABEL_133;
        }
      }
      break;
    case 9:
      v82 = (unint64_t *)v130;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v85 = v130;
        if (v130)
        {
          v86 = v130[6];
          if (v86)
          {
            v130[7] = v86;
            operator delete(v86);
          }
          v87 = v85[3];
          if (v87)
          {
            v85[4] = v87;
            operator delete(v87);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v85 + 1));
          v76 = v85;
          v88 = 2071181815;
LABEL_133:
          v77 = v88 | 0x1030C4000000000;
LABEL_134:
          MEMORY[0x219A19A08](v76, v77);
        }
      }
      break;
    default:
      break;
  }
  std::stringbuf::str();
  v122 = (double)(unint64_t)turi::gl_sarray::size(a1);
  v130 = &off_24D94C808;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v131);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v127);
  std::string::basic_string[abi:ne180100]<0>(v117, "x");
  turi::gl_sframe::operator[]((uint64_t)&v127, (uint64_t)v117, (turi::gl_sarray *)__p);
  turi::gl_sarray_reference::operator=((uint64_t)__p, (uint64_t)a1);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
  if (v121 < 0)
    operator delete(v120);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
  if (v118 < 0)
    operator delete(v117[0]);
  std::string::basic_string[abi:ne180100]<0>(v117, "y");
  turi::gl_sframe::operator[]((uint64_t)&v127, (uint64_t)v117, (turi::gl_sarray *)__p);
  turi::gl_sarray_reference::operator=((uint64_t)__p, a2);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
  if (v121 < 0)
    operator delete(v120);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__p);
  if (v118 < 0)
    operator delete(v117[0]);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v115, (const turi::gl_sframe *)&v127);
  turi::gl_sframe::operator=((uint64_t)v131, (uint64_t)v115);
  v115[0] = off_24D91E9C0;
  v101 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  std::allocate_shared[abi:ne180100]<turi::visualization::scatter,std::allocator<turi::visualization::scatter>,turi::visualization::scatter&,void>((uint64_t)&v130, v117);
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)v117;
  std::allocate_shared[abi:ne180100]<turi::visualization::Plot,std::allocator<turi::visualization::Plot>,std::string &,std::shared_ptr<turi::visualization::transformation_base> &,double &,void>((uint64_t)&v133, (uint64_t *)__p, &v122, a6);
  v104 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v105 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v127 = (unsigned int **)off_24D91E9C0;
  v107 = v129;
  if (v129)
  {
    v108 = (unint64_t *)&v129->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v130 = &off_24D94C808;
  v131[0] = off_24D91E9C0;
  v110 = v132;
  if (v132)
  {
    v111 = (unint64_t *)&v132->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (v135 < 0)
    operator delete(v133);
  v123[0] = *MEMORY[0x24BEDB7F0];
  v113 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v123 + *(_QWORD *)(v123[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v124[0] = v113;
  v124[1] = MEMORY[0x24BEDB848] + 16;
  if (v125 < 0)
    operator delete((void *)v124[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v126);
}

void sub_218614F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  *(_QWORD *)(v35 - 152) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 - 144);
  *(_QWORD *)(v35 - 128) = v34;
  *(_QWORD *)(v35 - 120) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 - 112);
  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_218615588()
{
  JUMPOUT(0x218615580);
}

void turi::visualization::scatter::~scatter(turi::visualization::scatter *this)
{
  *(_QWORD *)this = &off_24D94C808;
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24D94C808;
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x219A19A08);
}

void turi::visualization::scatter_result::~scatter_result(turi::visualization::scatter_result *this)
{
  *(_QWORD *)this = &off_24D94C7C8;
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_24D94C7C8;
  *((_QWORD *)this + 1) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x219A19A08);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::scatter_result,std::allocator<turi::visualization::scatter_result>,turi::gl_sframe &,void>@<X0>(turi::gl_sframe *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<turi::visualization::scatter_result>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sframe &,std::allocator<turi::visualization::scatter_result>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2186156E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::scatter_result>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sframe &,std::allocator<turi::visualization::scatter_result>,0>(_QWORD *a1, turi::gl_sframe *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D94C868;
  a1[1] = 0;
  std::allocator<turi::visualization::scatter_result>::construct[abi:ne180100]<turi::visualization::scatter_result,turi::gl_sframe &>((int)&v4, a1 + 3, a2);
  return a1;
}

void sub_218615744(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::scatter_result>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::scatter_result>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::scatter_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::visualization::scatter_result>::construct[abi:ne180100]<turi::visualization::scatter_result,turi::gl_sframe &>(int a1, _QWORD *a2, turi::gl_sframe *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v7[2];
  std::__shared_weak_count *v8;

  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v7, a3);
  *a2 = &off_24D94C7C8;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a2 + 1), (const turi::gl_sframe *)v7);
  v7[0] = off_24D91E9C0;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_218615844(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 8);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::visualization::scatter,std::allocator<turi::visualization::scatter>,turi::visualization::scatter&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = std::__shared_ptr_emplace<turi::visualization::scatter>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::scatter&,std::allocator<turi::visualization::scatter>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2186158AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::visualization::scatter>::__shared_ptr_emplace[abi:ne180100]<turi::visualization::scatter&,std::allocator<turi::visualization::scatter>,0>(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_24D94C8B8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &off_24D94C808;
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)(a1 + 4), (const turi::gl_sframe *)(a2 + 8));
  return a1;
}

void sub_218615908(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::visualization::scatter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::visualization::scatter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94C8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::visualization::scatter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t _GLOBAL__sub_I_scatter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void fail(uint64_t a1, uint64_t a2, const char *a3)
{
  int *v6;
  file_logger *v7;
  pthread_key_t *started;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *exception;
  void *__p[2];
  char v20;
  std::locale v21;

  v6 = (int *)global_logger();
  if (v6[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v7, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "fail", 50, 1);
    v9 = pthread_getspecific(started[74]);
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Web server error: ", 18);
    v10 = (char *)pthread_getspecific(started[74]);
    if (v10)
    {
      if (v10[280])
      {
        v11 = v10 + 16;
        v12 = strlen(a3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a3, v12);
        v13 = strlen(a3);
        if (v13)
        {
          if (a3[v13 - 1] == 10)
            file_logger::stream_flush((file_logger *)started);
        }
      }
    }
    v14 = pthread_getspecific(started[74]);
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)": ", 2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(__p, a2, a1);
    v15 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)__p);
    v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
    if (v16)
    {
      if (*((_BYTE *)v16 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(v16[2] - 24) + 16));
        v17 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
        std::locale::~locale(&v21);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v15);
        if (*(_DWORD *)(v15 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v20 < 0)
      operator delete(__p[0]);
  }
}

void sub_218615BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *mime_type(uint64_t a1, uint64_t a2)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  _BOOL4 v57;
  std::locale v58;
  char *v59;
  uint64_t v60;
  uint64_t v61[2];
  std::locale v62;

  v61[0] = a1;
  v61[1] = a2;
  v2 = boost::basic_string_view<char,std::char_traits<char>>::rfind(v61, ".", 1uLL, 0xFFFFFFFFFFFFFFFFLL);
  if (v2 == -1)
  {
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = (char *)boost::basic_string_view<char,std::char_traits<char>>::substr(v61, v2);
  }
  v59 = v3;
  v60 = v4;
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v5 = v59;
  v6 = v60;
  if (v60)
  {
    v7 = v60 - 1;
    if ((unint64_t)(v60 - 1) >= 3)
      v7 = 3;
    v8 = v7 + 1;
    v9 = ".htm";
    v10 = v59;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v10, v9))
    {
      ++v10;
      ++v9;
      if (!--v8)
        goto LABEL_12;
    }
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
  }
  else
  {
    v9 = ".htm";
    v10 = v59;
LABEL_12:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v10 == &v5[v6] && v9 == "")
      return "text/html";
  }
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v11 = v59;
  v12 = v60;
  if (v60)
  {
    v13 = v60 - 1;
    if ((unint64_t)(v60 - 1) >= 4)
      v13 = 4;
    v14 = v13 + 1;
    v15 = ".html";
    v16 = v59;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v16, v15))
    {
      ++v16;
      ++v15;
      if (!--v14)
        goto LABEL_24;
    }
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
  }
  else
  {
    v15 = ".html";
    v16 = v59;
LABEL_24:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v16 == &v11[v12] && v15 == "")
      return "text/html";
  }
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v17 = v59;
  v18 = v60;
  if (!v60)
  {
    v21 = ".php";
    v22 = v59;
LABEL_36:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v22 != &v17[v18] || v21 != "")
      goto LABEL_41;
    return "text/html";
  }
  v19 = v60 - 1;
  if ((unint64_t)(v60 - 1) >= 3)
    v19 = 3;
  v20 = v19 + 1;
  v21 = ".php";
  v22 = v59;
  while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v22, v21))
  {
    ++v22;
    ++v21;
    if (!--v20)
      goto LABEL_36;
  }
  std::locale::~locale(&v62);
  std::locale::~locale(&v58);
LABEL_41:
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v25 = v59;
  v26 = v60;
  if (v60)
  {
    v27 = v60 - 1;
    if ((unint64_t)(v60 - 1) >= 3)
      v27 = 3;
    v28 = v27 + 1;
    v29 = ".css";
    v30 = v59;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v30, v29))
    {
      ++v30;
      ++v29;
      if (!--v28)
        goto LABEL_49;
    }
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
  }
  else
  {
    v29 = ".css";
    v30 = v59;
LABEL_49:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v30 == &v25[v26] && v29 == "")
      return "text/css";
  }
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v31 = v59;
  v32 = v60;
  if (v60)
  {
    v33 = v60 - 1;
    if ((unint64_t)(v60 - 1) >= 3)
      v33 = 3;
    v34 = v33 + 1;
    v35 = ".txt";
    v36 = v59;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v36, v35))
    {
      ++v36;
      ++v35;
      if (!--v34)
        goto LABEL_61;
    }
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
  }
  else
  {
    v35 = ".txt";
    v36 = v59;
LABEL_61:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v36 == &v31[v32] && v35 == "")
      return "text/plain";
  }
  MEMORY[0x219A19828](&v58);
  std::locale::locale(&v62, &v58);
  v37 = v59;
  v38 = v60;
  if (v60)
  {
    v39 = v60 - 1;
    if ((unint64_t)(v60 - 1) >= 2)
      v39 = 2;
    v40 = v39 + 1;
    v41 = ".js";
    v42 = v59;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v62, v42, v41))
    {
      ++v42;
      ++v41;
      if (!--v40)
        goto LABEL_73;
    }
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
  }
  else
  {
    v41 = ".js";
    v42 = v59;
LABEL_73:
    std::locale::~locale(&v62);
    std::locale::~locale(&v58);
    if (v42 == &v37[v38] && v41 == "")
      return "application/javascript";
  }
  MEMORY[0x219A19828](&v62);
  v43 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".json", &v62);
  std::locale::~locale(&v62);
  if (v43)
    return "application/json";
  MEMORY[0x219A19828](&v62);
  v44 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".xml", &v62);
  std::locale::~locale(&v62);
  if (v44)
    return "application/xml";
  MEMORY[0x219A19828](&v62);
  v45 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".swf", &v62);
  std::locale::~locale(&v62);
  if (v45)
    return "application/x-shockwave-flash";
  MEMORY[0x219A19828](&v62);
  v46 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".flv", &v62);
  std::locale::~locale(&v62);
  if (v46)
    return "video/x-flv";
  MEMORY[0x219A19828](&v62);
  v47 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".png", &v62);
  std::locale::~locale(&v62);
  if (v47)
    return "image/png";
  MEMORY[0x219A19828](&v62);
  v48 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".jpe", &v62);
  std::locale::~locale(&v62);
  if (v48)
    return "image/jpeg";
  MEMORY[0x219A19828](&v62);
  v49 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".jpeg", &v62);
  std::locale::~locale(&v62);
  if (v49)
    return "image/jpeg";
  MEMORY[0x219A19828](&v62);
  v50 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".jpg", &v62);
  std::locale::~locale(&v62);
  if (v50)
    return "image/jpeg";
  MEMORY[0x219A19828](&v62);
  v51 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".gif", &v62);
  std::locale::~locale(&v62);
  if (v51)
    return "image/gif";
  MEMORY[0x219A19828](&v62);
  v52 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".bmp", &v62);
  std::locale::~locale(&v62);
  if (v52)
    return "image/bmp";
  MEMORY[0x219A19828](&v62);
  v53 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".ico", &v62);
  std::locale::~locale(&v62);
  if (v53)
    return "image/vnd.microsoft.icon";
  MEMORY[0x219A19828](&v62);
  v54 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".tiff", &v62);
  std::locale::~locale(&v62);
  if (v54)
    return "image/tiff";
  MEMORY[0x219A19828](&v62);
  v55 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".tif", &v62);
  std::locale::~locale(&v62);
  if (v55)
    return "image/tiff";
  MEMORY[0x219A19828](&v62);
  v56 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".svg", &v62);
  std::locale::~locale(&v62);
  v23 = "image/svg+xml";
  if (!v56)
  {
    MEMORY[0x219A19828](&v62);
    v57 = boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(&v59, ".svgz", &v62);
    std::locale::~locale(&v62);
    if (!v57)
      return "application/text";
  }
  return v23;
}

void sub_2186163F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::iequals<boost::basic_string_view<char,std::char_traits<char>>,char [5]>(char **a1, const char *a2, std::locale *a3)
{
  char *v5;
  char *v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  _BOOL8 v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  std::locale v18;

  std::locale::locale(&v18, a3);
  v5 = *a1;
  v6 = a1[1];
  v7 = strlen(a2);
  v8 = v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v15 = v5;
    v14 = (char *)a2;
LABEL_7:
    v11 = v15 == &v6[(_QWORD)v5] && v14 == &a2[v8];
  }
  else
  {
    v12 = v7 - 1;
    v13 = v6 - 1;
    v14 = (char *)a2;
    v15 = v5;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v18, v15, v14))
    {
      ++v15;
      ++v14;
      if (v13)
      {
        v16 = v12--;
        --v13;
        if (v16)
          continue;
      }
      goto LABEL_7;
    }
    v11 = 0;
  }
  std::locale::~locale(&v18);
  return v11;
}

void sub_218616548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

turi::visualization::WebServer *turi::visualization::WebServer::WebServer(turi::visualization::WebServer *this)
{
  char *v2;
  unsigned __int16 *v3;
  int *v4;
  file_logger *v5;
  pthread_key_t *started;
  _QWORD *v7;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  v2 = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v3 = (unsigned __int16 *)operator new();
  turi::visualization::WebServer::Impl::Impl(v3, (uint64_t)this, (uint64_t)v2);
  *((_QWORD *)this + 8) = v3;
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "WebServer", 635, 1);
    v7 = pthread_getspecific(started[74]);
    if (v7 && *((_BYTE *)v7 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"WebServer: starting WebServer\n", 30);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  return this;
}

void sub_218616654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;
  MEMORY[0x219A19A08](v4, 0x1020C40E712517BLL);
  std::vector<turi::visualization::WebServer::table>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<std::string,turi::visualization::Plot>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::visualization::Plot>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void turi::visualization::WebServer::~WebServer(turi::visualization::WebServer::Impl **this)
{
  int *v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  void **v6;

  v2 = (int *)global_logger();
  if (v2[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v2))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "~WebServer", 638, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"WebServer: destroying WebServer\n", 32);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  std::unique_ptr<turi::visualization::WebServer::Impl>::reset[abi:ne180100](this + 8, 0);
  v6 = (void **)(this + 5);
  std::vector<turi::visualization::WebServer::table>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<std::string,turi::visualization::Plot>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::visualization::Plot>>>::~__hash_table((uint64_t)this);
}

uint64_t turi::visualization::WebServer::get_instance(turi::visualization::WebServer *this)
{
  unsigned __int8 v1;
  uint64_t result;
  turi::visualization::WebServer *v3;

  if ((v1 & 1) == 0
  {
    turi::visualization::WebServer::get_instance(void)::server = 0;
    __cxa_atexit((void (*)(void *))std::unique_ptr<turi::visualization::WebServer>::~unique_ptr[abi:ne180100], &turi::visualization::WebServer::get_instance(void)::server, &dword_217E69000);
  }
  result = turi::visualization::WebServer::get_instance(void)::server;
  if (!turi::visualization::WebServer::get_instance(void)::server)
  {
    v3 = (turi::visualization::WebServer *)operator new();
    turi::visualization::WebServer::WebServer(v3);
    std::unique_ptr<turi::visualization::WebServer>::reset[abi:ne180100]((turi::visualization::WebServer::Impl ***)&turi::visualization::WebServer::get_instance(void)::server, (turi::visualization::WebServer::Impl **)v3);
    return turi::visualization::WebServer::get_instance(void)::server;
  }
  return result;
}

void sub_218616820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A0C4038D0F75BLL);
  _Unwind_Resume(a1);
}

turi::visualization::WebServer::Impl ***std::unique_ptr<turi::visualization::WebServer>::~unique_ptr[abi:ne180100](turi::visualization::WebServer::Impl ***a1)
{
  std::unique_ptr<turi::visualization::WebServer>::reset[abi:ne180100](a1, 0);
  return a1;
}

void turi::visualization::WebServer::get_base_url(turi::visualization::WebServer *this)
{
  uint64_t instance;
  std::string v2;

  instance = turi::visualization::WebServer::get_instance(this);
  std::to_string(&v2, **(unsigned __int16 **)(instance + 64));
  std::operator+<char>();
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
}

void sub_2186168C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::visualization::WebServer::get_url_for_plot(turi::visualization::WebServer *this@<X0>, std::string *a2@<X8>)
{
  turi::visualization::WebServer *instance;
  turi::visualization::WebServer *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string v12;
  std::string v13;
  std::string v14;

  instance = (turi::visualization::WebServer *)turi::visualization::WebServer::get_instance(this);
  turi::visualization::WebServer::add_plot(instance, this, &v14);
  turi::visualization::WebServer::get_base_url(v6);
  v7 = std::string::append(&v12, "/index.html?type=plot&id=");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v14;
  else
    v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v13, (const std::string::value_type *)v9, size);
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_2186169B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void turi::visualization::WebServer::add_plot(turi::visualization::WebServer *this@<X0>, const turi::visualization::Plot *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t id;
  std::string *v7;
  __int128 v8;
  __int128 *v9;

  id = turi::visualization::Plot::get_id(a2);
  v9 = (__int128 *)id;
  v7 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,turi::visualization::Plot>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::visualization::Plot>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::visualization::Plot>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this, (unsigned __int8 *)id, (uint64_t)&std::piecewise_construct, &v9);
  turi::model_base::operator=((uint64_t)&v7[1].__r_.__value_.__r.__words[2], (uint64_t)a2);
  std::string::operator=(v7 + 11, (const std::string *)((char *)a2 + 224));
  std::string::operator=(v7 + 12, (const std::string *)((char *)a2 + 248));
  v7[13].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 34);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v7[13].__r_.__value_.__l.__size_, (uint64_t *)a2 + 35);
  if (*(char *)(id + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)id, *(_QWORD *)(id + 8));
  }
  else
  {
    v8 = *(_OWORD *)id;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(id + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
  }
}

void turi::visualization::WebServer::add_table(_QWORD *a1@<X0>, turi::unity_sframe **a2@<X1>, __int128 *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  turi::sframe_reader *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  turi::sframe_reader *v17;
  turi::sframe *v18;
  std::__shared_weak_count *v19;

  v9 = a1[5];
  v10 = a1[6];
  v8 = a1 + 5;
  turi::unity_sframe::get_underlying_sframe(*a2, &v18);
  turi::sframe::get_reader(v18, &v17);
  v11 = a1[6];
  if (v11 >= a1[7])
  {
    v12 = std::vector<turi::visualization::WebServer::table>::__emplace_back_slow_path<std::shared_ptr<turi::unity_sframe> const&,std::unique_ptr<turi::sframe_reader>,std::string const&>(v8, (std::string::size_type *)a2, (std::string::size_type *)&v17, a3);
  }
  else
  {
    std::allocator<turi::visualization::WebServer::table>::construct[abi:ne180100]<turi::visualization::WebServer::table,std::shared_ptr<turi::unity_sframe> const&,std::unique_ptr<turi::sframe_reader>,std::string const&>((uint64_t)(a1 + 7), (std::string *)a1[6], (std::string::size_type *)a2, (std::string::size_type *)&v17, a3);
    v12 = v11 + 48;
    a1[6] = v11 + 48;
  }
  a1[6] = v12;
  std::to_string(a4, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 4));
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(turi::sframe_reader *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_218616BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  *(_QWORD *)(v3 + 48) = v4;
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *turi::visualization::WebServer::table::table(std::string *a1, std::string::size_type *a2, std::string::size_type *a3, __int128 *a4)
{
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;

  v5 = a2[1];
  a1->__r_.__value_.__r.__words[0] = *a2;
  a1->__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a3;
  *a3 = 0;
  a1->__r_.__value_.__r.__words[2] = v8;
  v9 = a1 + 1;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_218616CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

pthread_key_t *boost::asio::detail::tss_ptr<boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::context>::~tss_ptr(pthread_key_t *a1)
{
  pthread_key_delete(*a1);
  return a1;
}

const char *boost::asio::error::detail::netdb_category::name(boost::asio::error::detail::netdb_category *this)
{
  return "asio.netdb";
}

_QWORD *boost::asio::error::detail::netdb_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 1) > 3)
    v3 = "asio.netdb error";
  else
    v3 = off_24D94D5D8[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

const char *boost::asio::error::detail::addrinfo_category::name(boost::asio::error::detail::addrinfo_category *this)
{
  return "asio.addrinfo";
}

_QWORD *boost::asio::error::detail::addrinfo_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  const char *v4;
  char *v5;

  v4 = "asio.addrinfo error";
  if (a1 == 10)
    v4 = "Socket type not supported";
  if (a1 == 9)
    v5 = "Service not found";
  else
    v5 = (char *)v4;
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

const char *boost::asio::error::detail::misc_category::name(boost::asio::error::detail::misc_category *this)
{
  return "asio.misc";
}

_QWORD *boost::asio::error::detail::misc_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 1) > 3)
    v3 = "asio.misc error";
  else
    v3 = off_24D94D5F8[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

unint64_t boost::basic_string_view<char,std::char_traits<char>>::substr(_QWORD *a1, unint64_t a2)
{
  std::logic_error v3;

  if (a1[1] < a2)
  {
    std::logic_error::logic_error(&v3, "string_view::substr");
    v3.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    boost::exception_detail::throw_exception_<std::out_of_range>(&v3, (uint64_t)"basic_string_view<charT, traits> boost::basic_string_view<char>::substr(size_type, size_type) const [charT = char, traits = std::char_traits<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/utility/string_view.hpp", 192);
  }
  return *a1 + a2;
}

void sub_218616E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

size_t boost::basic_string_view<char,std::char_traits<char>>::rfind(uint64_t *a1, const void *a2, size_t __n, size_t a4)
{
  size_t v4;
  BOOL v5;
  size_t v6;
  size_t v7;
  uint64_t v10;
  const void *v11;

  v4 = a1[1];
  v5 = v4 >= __n;
  v6 = v4 - __n;
  if (!v5)
    return -1;
  if (v6 >= a4)
    v7 = a4;
  else
    v7 = v6;
  if (__n)
  {
    v10 = *a1;
    v11 = (const void *)(*a1 + v7);
    if (!memcmp(v11, a2, __n))
      return (size_t)v11 - v10;
    while (v7)
    {
      if (!memcmp((const void *)(--v7 + v10), a2, __n))
      {
        v11 = (const void *)(v10 + v7);
        return (size_t)v11 - v10;
      }
    }
    return -1;
  }
  return v7;
}

unsigned __int16 *turi::visualization::WebServer::Impl::Impl(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  file_logger *v5;
  pthread_key_t *started;
  _QWORD *v7;
  unsigned int i;
  int *v9;
  file_logger *v10;
  file_logger *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  int v16;
  int v17;
  boost::system::detail *v18;
  int *v19;
  file_logger *v20;
  file_logger *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  boost::system::detail *v36;
  int v37;
  uint64_t *v38;
  std::__shared_weak_count *locale;
  unint64_t *v40;
  unint64_t v41;
  uint64_t j;
  unint64_t v43;
  std::locale::__imp **v44;
  std::locale *v45;
  std::locale::__imp **v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  std::locale *v52;
  char *v53;
  std::locale::__imp *v54;
  __int128 v55;
  uint64_t *v56;
  int *v57;
  file_logger *v58;
  pthread_key_t *v59;
  _QWORD *v60;
  _QWORD *exception;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v68;
  listener **v69;
  std::locale::__imp ***v70;
  _OWORD v71[2];
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _BYTE v75[24];
  uint64_t *v76;
  unsigned __int16 *v77;
  uint64_t v78;
  uint64_t v79;
  std::locale v80[2];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v68 = (uint64_t *)(a1 + 4);
  boost::asio::io_context::io_context((boost::asio::io_context *)(a1 + 4), 6);
  *(_OWORD *)(a1 + 12) = 0u;
  v69 = (listener **)(a1 + 24);
  v70 = (std::locale::__imp ***)(a1 + 12);
  *((_QWORD *)a1 + 7) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
LABEL_79:
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "Impl", 603, 1);
    v7 = pthread_getspecific(started[74]);
    if (v7 && *((_BYTE *)v7 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"WebServer: starting WebServer::Impl\n", 36);
      file_logger::stream_flush((file_logger *)started);
    }
  }
  for (i = 8000; ; ++i)
  {
    v9 = (int *)global_logger();
    if (v9[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v9))
        goto LABEL_79;
      v10 = (file_logger *)global_logger();
      v11 = file_logger::start_stream(v10, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "find_port", 568, 1);
      v12 = pthread_getspecific(*((_QWORD *)v11 + 74));
      if (v12 && *((_BYTE *)v12 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"WebServer: checking port ", 25);
      v13 = file_logger::operator<<<unsigned short>((uint64_t)v11);
      v14 = pthread_getspecific(*(_QWORD *)(v13 + 592));
      if (v14)
      {
        if (*((_BYTE *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
          v15 = std::locale::use_facet((const std::locale *)v75, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale((std::locale *)v75);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v13);
          if (*(_DWORD *)(v13 + 600) == 7)
          {
LABEL_80:
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
    }
    v16 = socket(2, 1, 6);
    v17 = v16;
    if (v16 < 0)
    {
      if (*__error() == 24)
        find_port(void)::$_0::operator()();
      find_port(void)::$_1::operator()();
    }
    LODWORD(v72) = 1;
    setsockopt(v16, 0xFFFF, 4, &v72, 4u);
    *(_QWORD *)v75 = 512;
    *(_QWORD *)&v75[8] = 0;
    *(_DWORD *)&v75[2] = bswap32(i) >> 16;
    *(_DWORD *)&v75[4] = bswap32(inet_addr("0.0.0.0"));
    v18 = (boost::system::detail *)bind(v17, (const sockaddr *)v75, 0x10u);
    if (!(_DWORD)v18)
      break;
    v19 = (int *)global_logger();
    if (v19[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v19))
        goto LABEL_79;
      v20 = (file_logger *)global_logger();
      v21 = file_logger::start_stream(v20, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "find_port", 587, 1);
      v22 = pthread_getspecific(*((_QWORD *)v21 + 74));
      if (v22 && *((_BYTE *)v22 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)"WebServer: return was ", 22);
      v23 = file_logger::operator<<<int>((uint64_t)v21);
      v24 = pthread_getspecific(*(_QWORD *)(v23 + 592));
      if (v24 && *((_BYTE *)v24 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)", error was ", 12);
      __error();
      v25 = file_logger::operator<<<int>(v23);
      v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
      if (v26 && *((_BYTE *)v26 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" (", 2);
      v27 = __error();
      v28 = strerror(*v27);
      v29 = file_logger::operator<<<char *>(v25, v28);
      v30 = pthread_getspecific(*(_QWORD *)(v29 + 592));
      if (v30 && *((_BYTE *)v30 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)")", 1);
      v31 = pthread_getspecific(*(_QWORD *)(v29 + 592));
      if (v31)
      {
        if (*((_BYTE *)v31 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(v31[2] - 24) + 16));
          v32 = std::locale::use_facet(v80, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
          std::locale::~locale(v80);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v29);
          if (*(_DWORD *)(v29 + 600) == 7)
            goto LABEL_80;
        }
      }
    }
    v33 = (unsigned __int16)i >> 3;
    if (v33 >= 0x465)
      find_port(void)::$_2::operator()();
  }
  *a1 = i;
  LODWORD(v72) = 0;
  v73 = boost::system::detail::system_category_ncx(v18);
  v74 = 0;
  if ((int)boost::asio::detail::socket_ops::inet_pton(30, "127.0.0.1", v75, &v74, &v72) <= 0)
  {
    v34 = 0;
    v80[0].__locale_ = 0;
    v80[1].__locale_ = 0;
  }
  else
  {
    v34 = v74;
    *(_OWORD *)&v80[0].__locale_ = *(_OWORD *)v75;
  }
  if (!(_DWORD)v72)
  {
    *(_QWORD *)&v71[0] = 1;
    *(_OWORD *)((char *)v71 + 8) = *(_OWORD *)&v80[0].__locale_;
    *((_QWORD *)&v71[1] + 1) = v34;
    goto LABEL_44;
  }
  *__error() = 0;
  v35 = inet_pton(2, "127.0.0.1", v75);
  v36 = (boost::system::detail *)__error();
  v37 = *(_DWORD *)v36;
  v38 = boost::system::detail::system_category_ncx(v36);
  LODWORD(v72) = v37;
  v73 = v38;
  if (v35 <= 0)
  {
    if (!v37)
    {
      v63 = boost::system::detail::system_category_ncx((boost::system::detail *)v38);
      v72 = 22;
      v73 = v63;
    }
LABEL_84:
    memset(v71, 0, sizeof(v71));
    v64 = v72;
    v65 = v73;
    std::runtime_error::runtime_error((std::runtime_error *)v75, "");
    *(_QWORD *)v75 = &unk_24D921E98;
    *(_QWORD *)&v75[16] = v64;
    v76 = v65;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)v75);
  }
  if (v37)
    goto LABEL_84;
  LODWORD(v71[0]) = 0;
  DWORD1(v71[0]) = *(_DWORD *)v75;
  memset((char *)v71 + 8, 0, 24);
LABEL_44:
  boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>::basic_endpoint((uint64_t)v75, (uint64_t)v71, *a1);
  std::allocate_shared[abi:ne180100]<listener,std::allocator<listener>,boost::asio::io_context &,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,void>(v68, (uint64_t)v75, a2, a3, v80);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v69, (__int128 *)v80);
  locale = (std::__shared_weak_count *)v80[1].__locale_;
  if (v80[1].__locale_)
  {
    v40 = (unint64_t *)((char *)v80[1].__locale_ + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  if (*((_DWORD *)*v69 + 6) != -1)
    listener::do_accept(*v69);
  for (j = 0; j != 6; ++j)
  {
    v72 = (uint64_t)a1;
    _ZNSt3__16threadC2IZN4turi13visualization9WebServer4ImplC1ERKNS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS3_4PlotENS_4hashISC_EENS_8equal_toISC_EENSA_INS_4pairIKSC_SD_EEEEEERKNS_6vectorINS4_5tableENSA_ISQ_EEEEEUlvE_JEvEEOT_DpOT0_((pthread_t *)v80, &v72);
    v44 = (std::locale::__imp **)*((_QWORD *)a1 + 4);
    v43 = *((_QWORD *)a1 + 5);
    if ((unint64_t)v44 >= v43)
    {
      v46 = *v70;
      v47 = v44 - *v70;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v49 = v43 - (_QWORD)v46;
      if (v49 >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      v77 = a1 + 20;
      if (v50)
      {
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 20), v50);
        v46 = (std::locale::__imp **)*((_QWORD *)a1 + 3);
        v44 = (std::locale::__imp **)*((_QWORD *)a1 + 4);
      }
      else
      {
        v51 = 0;
      }
      v52 = (std::locale *)&v51[8 * v47];
      v53 = &v51[8 * v50];
      v76 = (uint64_t *)v53;
      v52->__locale_ = (std::locale::__imp *)v80[0];
      v80[0].__locale_ = 0;
      *(_QWORD *)&v75[16] = v52 + 1;
      if (v44 == v46)
      {
        v45 = v52 + 1;
      }
      else
      {
        do
        {
          v54 = *--v44;
          v52[-1].__locale_ = v54;
          --v52;
          *v44 = 0;
        }
        while (v44 != v46);
        v45 = *(std::locale **)&v75[16];
        v53 = (char *)v76;
      }
      v55 = *(_OWORD *)(a1 + 12);
      *((_QWORD *)a1 + 3) = v52;
      *((_QWORD *)a1 + 4) = v45;
      *(_OWORD *)&v75[8] = v55;
      v56 = (uint64_t *)*((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 5) = v53;
      v76 = v56;
      *(_QWORD *)v75 = v55;
      std::__split_buffer<std::thread>::~__split_buffer((uint64_t)v75);
    }
    else
    {
      *v44 = v80[0].__locale_;
      v45 = (std::locale *)(v44 + 1);
      v80[0].__locale_ = 0;
    }
    *((_QWORD *)a1 + 4) = v45;
    std::thread::~thread((std::thread *)v80);
  }
  v57 = (int *)global_logger();
  if (v57[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v57))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v58 = (file_logger *)global_logger();
    v59 = (pthread_key_t *)file_logger::start_stream(v58, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/visualization/server/server.cpp", "Impl", 622, 1);
    v60 = pthread_getspecific(v59[74]);
    if (v60 && *((_BYTE *)v60 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60 + 2, (uint64_t)"WebServer: finished starting WebServer::Impl\n", 45);
      file_logger::stream_flush((file_logger *)v59);
    }
  }
  return a1;
}

void sub_2186176A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, boost::asio::io_context *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22)
{
  boost::system::system_error::~system_error(&a22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a13);
  a15 = a14;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  boost::asio::io_context::~io_context(a12);
  _Unwind_Resume(a1);
}

void boost::asio::io_context::~io_context(boost::asio::io_context *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD **)(*(_QWORD *)this + 80);
  if (!v3)
    goto LABEL_6;
  do
  {
    (*(void (**)(_QWORD *))(*v3 + 16))(v3);
    v3 = (_QWORD *)v3[4];
  }
  while (v3);
  v2 = *(_QWORD *)this;
  v4 = *(_QWORD **)(*(_QWORD *)this + 80);
  if (!v4)
    goto LABEL_6;
  do
  {
    v5 = (_QWORD *)v4[4];
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
    *(_QWORD *)(v2 + 80) = v5;
    v4 = v5;
  }
  while (v5);
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
LABEL_6:
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    MEMORY[0x219A19A08](v2, 0x1020C40964A64A0);
  }
}

boost::asio::io_context *boost::asio::io_context::io_context(boost::asio::io_context *this, int a2)
{
  uint64_t v4;
  boost::system::detail *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t *v14;
  std::runtime_error v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = operator new();
  v5 = (boost::system::detail *)pthread_mutex_init((pthread_mutex_t *)(v4 + 8), 0);
  v6 = v5;
  v7 = boost::system::detail::system_category_ncx(v5);
  if (v6)
  {
    v14 = v7;
    std::runtime_error::runtime_error(&v15, "mutex");
    v15.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
    v16 = v6;
    v17 = v14;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v15);
  }
  *(_QWORD *)(v4 + 72) = this;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)this = v4;
  v8 = operator new();
  v9 = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = this;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = &unk_24D94CD78;
  *(_QWORD *)(v8 + 8) = 0;
  v10 = (a2 & 0xFFFF0004) == -1525678080;
  if ((a2 & 0xFFFF0001) == 0xA5100000)
    v10 = 1;
  v11 = a2 == 1 || v10;
  *(_BYTE *)(v8 + 40) = v11;
  boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex((boost::asio::detail::conditionally_enabled_mutex *)(v8 + 48), (a2 & 0xFFFF0001) != -1525678080);
  boost::asio::detail::conditionally_enabled_event::conditionally_enabled_event((boost::asio::detail::conditionally_enabled_event *)(v9 + 128));
  *(_QWORD *)(v9 + 192) = 0;
  *(_QWORD *)(v9 + 200) = 0;
  *(_DWORD *)(v9 + 216) = 0;
  *(_QWORD *)(v9 + 208) = 0;
  *(_BYTE *)(v9 + 224) = 1;
  *(_QWORD *)(v9 + 240) = 0;
  *(_QWORD *)(v9 + 248) = 0;
  *(_QWORD *)(v9 + 232) = 0;
  *(_WORD *)(v9 + 256) = 0;
  *(_DWORD *)(v9 + 260) = a2;
  v12 = *(_QWORD *)this;
  v15.__imp_.__imp_ = 0;
  boost::asio::detail::service_registry::do_add_service(v12, (uint64_t *)&v15, v9);
  *((_QWORD *)this + 1) = v9;
  return this;
}

void sub_218617938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  uint64_t v10;

  boost::system::system_error::~system_error(&a10);
  MEMORY[0x219A19A08](v10, 0x1020C40964A64A0);
  _Unwind_Resume(a1);
}

void boost::asio::execution_context::~execution_context(boost::asio::execution_context *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD **)(*(_QWORD *)this + 80);
  if (!v3)
    goto LABEL_7;
  do
  {
    (*(void (**)(_QWORD *))(*v3 + 16))(v3);
    v3 = (_QWORD *)v3[4];
  }
  while (v3);
  v2 = *(_QWORD *)this;
  v4 = *(_QWORD **)(*(_QWORD *)this + 80);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)v4[4];
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
      *(_QWORD *)(v2 + 80) = v5;
      v4 = v5;
    }
    while (v5);
    v2 = *(_QWORD *)this;
  }
  if (v2)
  {
LABEL_7:
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    MEMORY[0x219A19A08](v2, 0x1020C40964A64A0);
  }
}

uint64_t boost::asio::detail::service_registry::do_add_service(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  std::logic_error v12;
  std::logic_error v13;

  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a3 + 24))
  {
    std::logic_error::logic_error(&v13, "Invalid service owner.");
    v13.__vftable = (std::logic_error_vtbl *)&unk_24D94CBB0;
    boost::throw_exception<boost::asio::invalid_service_owner>(&v13);
  }
  v13.__vftable = (std::logic_error_vtbl *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  LOBYTE(v13.__imp_.__imp_) = 1;
  for (i = *(_QWORD **)(a1 + 80); i; i = (_QWORD *)i[4])
  {
    v7 = i[2];
    if (!v7 || ((v8 = a2[1]) != 0 ? (v9 = v7 == v8) : (v9 = 0), !v9))
    {
      v10 = i[1];
      if (!v10 || !*a2 || !std::type_info::operator==[abi:ne180100](v10, *a2))
        continue;
    }
    std::logic_error::logic_error(&v12, "Service already exists.");
    v12.__vftable = (std::logic_error_vtbl *)&unk_24D94CD50;
    boost::throw_exception<boost::asio::service_already_exists>(&v12);
  }
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a3;
  return boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&v13);
}

void sub_218617B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::logic_error a11)
{
  std::logic_error::~logic_error(&a11);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::asio::invalid_service_owner>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D94CB68;
  v4 = &unk_24D94CB90;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_218617C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::asio::service_already_exists>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D94CD08;
  v4 = &unk_24D94CD30;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_218617D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D94CBB0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D94CAC8;
  *(_QWORD *)(a1 + 16) = &unk_24D94CB00;
  *(_QWORD *)(a1 + 56) = &unk_24D94CB38;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D94CBB0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D94CAC8;
  *(_QWORD *)(a1 + 16) = &unk_24D94CB00;
  *(_QWORD *)(a1 + 56) = &unk_24D94CB38;
  return a1;
}

void sub_218617E28(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218617EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone_impl((uint64_t)exception, a1);
}

void sub_218617F00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::invalid_service_owner>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_218617FD0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D94CD50;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D94CC68;
  *(_QWORD *)(a1 + 16) = &unk_24D94CCA0;
  *(_QWORD *)(a1 + 56) = &unk_24D94CCD8;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D94CD50;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D94CC68;
  *(_QWORD *)(a1 + 16) = &unk_24D94CCA0;
  *(_QWORD *)(a1 + 56) = &unk_24D94CCD8;
  return a1;
}

void sub_2186180A8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_218618120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone_impl((uint64_t)exception, a1);
}

void sub_218618180(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::service_already_exists>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_218618250(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return a1;
}

void boost::asio::detail::scheduler::~scheduler(boost::asio::detail::scheduler *this)
{
  pthread_cond_t *v2;

  *(_QWORD *)this = &unk_24D94CD78;
  v2 = (pthread_cond_t *)((char *)this + 136);
  boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::asio::detail::scheduler *)((char *)this + 240));
  pthread_cond_destroy(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
}

{
  pthread_cond_t *v2;

  *(_QWORD *)this = &unk_24D94CD78;
  v2 = (pthread_cond_t *)((char *)this + 136);
  boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::asio::detail::scheduler *)((char *)this + 240));
  pthread_cond_destroy(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  JUMPOUT(0x219A19A08);
}

void boost::asio::detail::scheduler::shutdown(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD, _QWORD *, int *, _QWORD);
  char *v5;
  char v6;
  int v7;
  uint64_t *v8;

  v1 = this;
  v5 = (char *)(this + 48);
  if (*(_BYTE *)(this + 120))
  {
    this = pthread_mutex_lock((pthread_mutex_t *)(this + 56));
    v6 = 1;
    *(_BYTE *)(v1 + 257) = 1;
    if (*(_BYTE *)(v1 + 120))
      this = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
    v6 = 0;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(this + 257) = 1;
  }
  v2 = *(_QWORD **)(v1 + 240);
  if (v2)
  {
    do
    {
      while (1)
      {
        v3 = (_QWORD *)*v2;
        *(_QWORD *)(v1 + 240) = *v2;
        if (!v3)
          *(_QWORD *)(v1 + 248) = 0;
        *v2 = 0;
        if (v2 == (_QWORD *)(v1 + 200))
          break;
        v4 = (uint64_t (*)(_QWORD, _QWORD *, int *, _QWORD))v2[1];
        v7 = 0;
        v8 = boost::system::detail::system_category_ncx((boost::system::detail *)this);
        this = v4(0, v2, &v7, 0);
        v2 = *(_QWORD **)(v1 + 240);
        if (!v2)
          goto LABEL_13;
      }
      v2 = v3;
    }
    while (v3);
  }
LABEL_13:
  *(_QWORD *)(v1 + 192) = 0;
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v5);
}

void sub_218618434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

boost::asio::detail::conditionally_enabled_mutex *boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex(boost::asio::detail::conditionally_enabled_mutex *this, char a2)
{
  boost::system::detail *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v8;
  std::runtime_error v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (boost::system::detail *)pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  v5 = v4;
  v6 = boost::system::detail::system_category_ncx(v4);
  if (v5)
  {
    v8 = v6;
    std::runtime_error::runtime_error(&v9, "mutex");
    v9.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
    v10 = v5;
    v11 = v8;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v9);
  }
  *((_BYTE *)this + 72) = a2;
  return this;
}

void sub_2186184DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

boost::asio::detail::conditionally_enabled_event *boost::asio::detail::conditionally_enabled_event::conditionally_enabled_event(boost::asio::detail::conditionally_enabled_event *this)
{
  boost::system::detail *v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  std::runtime_error v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_QWORD *)this + 7) = 0;
  v2 = (boost::system::detail *)pthread_cond_init((pthread_cond_t *)((char *)this + 8), 0);
  v3 = v2;
  v4 = boost::system::detail::system_category_ncx(v2);
  if (v3)
  {
    v6 = v3;
    v7 = v4;
    std::runtime_error::runtime_error(&v8, "event");
    v8.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
    v9 = v6;
    v10 = v7;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v8);
  }
  return this;
}

void sub_218618574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

boost::system::detail *boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue(boost::system::detail *a1)
{
  boost::system::detail *v1;
  uint64_t *i;
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t *, int *, _QWORD);
  int v6;
  uint64_t *v7;

  v1 = a1;
  for (i = *(uint64_t **)a1; *(_QWORD *)v1; i = *(uint64_t **)v1)
  {
    v3 = *i;
    *(_QWORD *)v1 = *i;
    if (!v3)
      *((_QWORD *)v1 + 1) = 0;
    *i = 0;
    v4 = (uint64_t (*)(_QWORD, uint64_t *, int *, _QWORD))i[1];
    v6 = 0;
    v7 = boost::system::detail::system_category_ncx(a1);
    a1 = (boost::system::detail *)v4(0, i, &v6, 0);
  }
  return v1;
}

void boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock(boost::asio::detail::conditionally_enabled_mutex::scoped_lock *this)
{
  if (*((_BYTE *)this + 8))
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)this + 8));
}

uint64_t file_logger::operator<<<unsigned short>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

uint64_t boost::asio::detail::socket_ops::inet_pton(int a1, char *a2, unsigned __int8 *a3, _QWORD *a4, _QWORD *a5)
{
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  boost::system::detail *v16;
  int v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  _BYTE __dst[64];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *__error() = 0;
  if (a1 != 30)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v10 = strchr(a2, 37);
  v11 = v10;
  if (!v10)
  {
LABEL_6:
    v15 = 1;
    goto LABEL_7;
  }
  v12 = v10 - a2;
  if (v10 - a2 >= 64)
  {
    v13 = boost::system::detail::system_category_ncx((boost::system::detail *)v10);
    v14 = 0;
LABEL_17:
    *a5 = 22;
    a5[1] = v13;
    return v14;
  }
  memcpy(__dst, a2, v10 - a2);
  v15 = 0;
  __dst[v12] = 0;
  a2 = __dst;
LABEL_7:
  v14 = inet_pton(a1, a2, a3);
  v16 = (boost::system::detail *)__error();
  v17 = *(_DWORD *)v16;
  v18 = boost::system::detail::system_category_ncx(v16);
  *(_DWORD *)a5 = v17;
  a5[1] = v18;
  if ((int)v14 <= 0)
  {
    if (!v17)
    {
      v13 = boost::system::detail::system_category_ncx((boost::system::detail *)v18);
      goto LABEL_17;
    }
  }
  else if (a1 == 30)
  {
    if (a4)
    {
      *a4 = 0;
      if ((v15 & 1) == 0)
      {
        v19 = *a3;
        if (v19 == 254)
        {
          if ((a3[1] & 0xC0) != 0x80)
            goto LABEL_21;
        }
        else if (v19 != 255 || (a3[1] & 0xF) != 2)
        {
          goto LABEL_21;
        }
        v20 = if_nametoindex(v11 + 1);
        *a4 = v20;
        if (v20)
          return v14;
LABEL_21:
        *a4 = atoi(v11 + 1);
      }
    }
  }
  return v14;
}

void std::allocate_shared[abi:ne180100]<listener,std::allocator<listener>,boost::asio::io_context &,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x78uLL);
  std::__shared_ptr_emplace<listener>::__shared_ptr_emplace[abi:ne180100]<boost::asio::io_context &,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,std::allocator<listener>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a5, v10 + 3, (uint64_t)(v10 + 3));
}

void sub_218618890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<listener>::__shared_ptr_emplace[abi:ne180100]<boost::asio::io_context &,boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,std::allocator<listener>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sockaddr v7[2];

  a1[2] = 0;
  *a1 = &unk_24D94CE40;
  a1[1] = 0;
  v7[0] = *(sockaddr *)a3;
  *(sockaddr *)&v7[0].sa_data[10] = *(sockaddr *)(a3 + 12);
  listener::listener((uint64_t)(a1 + 3), a2, v7, a4, a5);
  return a1;
}

void sub_2186188F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<listener>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94CE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<listener>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94CE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<listener>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<listener>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t listener::listener(uint64_t a1, uint64_t *a2, const sockaddr *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  boost::system::detail **v12;
  uint64_t v13;
  boost::system::detail *v14;
  int v15;
  uint64_t v16;
  const char *v17;
  int v19;
  void *v20;
  uint64_t *v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *a2;
  v21 = 0;
  v11 = boost::asio::detail::service_registry::do_use_service(v10, (uint64_t *)&v20, (uint64_t (*)(uint64_t))boost::asio::detail::service_registry::create<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,boost::asio::io_context>, (uint64_t)a2);
  v12 = (boost::system::detail **)(a1 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 40) = 2;
  *(_BYTE *)(a1 + 28) = 0;
  v13 = *a2;
  v21 = 0;
  v14 = (boost::system::detail *)boost::asio::detail::service_registry::do_use_service(v13, (uint64_t *)&v20, (uint64_t (*)(uint64_t))boost::asio::detail::service_registry::create<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,boost::asio::io_context>, (uint64_t)a2);
  *(_QWORD *)(a1 + 48) = v14;
  *(_DWORD *)(a1 + 72) = 2;
  *(_DWORD *)(a1 + 56) = -1;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = a5;
  LODWORD(v20) = 0;
  v21 = boost::system::detail::system_category_ncx(v14);
  if (a3->sa_family == 2)
    v15 = 2;
  else
    v15 = 30;
  v19 = v15;
  boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::open(*(_QWORD *)(a1 + 16), a1 + 24, &v19, &v20);
  if ((_DWORD)v20)
  {
    v16 = (uint64_t)v21;
    v17 = "open";
LABEL_13:
    fail((uint64_t)v20, v16, v17);
    return a1;
  }
  v19 = 1;
  boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::set_option<boost::asio::detail::socket_option::BOOLean<65535,4>>(*v12, a1 + 24, &v19, &v20);
  if ((_DWORD)v20)
  {
    v16 = (uint64_t)v21;
    v17 = "set_option";
    goto LABEL_13;
  }
  boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::bind(*v12, (int *)(a1 + 24), a3, &v20);
  if ((_DWORD)v20)
  {
    v17 = "bind";
LABEL_12:
    v16 = (uint64_t)v21;
    goto LABEL_13;
  }
  boost::asio::detail::reactive_socket_service_base::listen((boost::system::detail *)((char *)*v12 + 40), (int *)(a1 + 24), 128, &v20);
  if ((_DWORD)v20)
  {
    v17 = "listen";
    goto LABEL_12;
  }
  return a1;
}

void sub_218618B28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(v3 + 24);
  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(v2);
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

_QWORD *boost::asio::detail::service_registry::create<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,boost::asio::io_context>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::reactive_socket_service(v2, a1);
  return v2;
}

void sub_218618BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0xE1C402A40691ELL);
  _Unwind_Resume(a1);
}

_QWORD *boost::asio::detail::service_registry::do_use_service(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  pthread_mutex_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  pthread_mutex_t *v21;
  char v22;

  v8 = (pthread_mutex_t *)(a1 + 8);
  v21 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v22 = 1;
  v9 = *(_QWORD **)(a1 + 80);
  if (v9)
  {
    while (1)
    {
      v10 = v9[2];
      if (v10)
      {
        v11 = a2[1];
        if (v11 && v10 == v11)
          break;
      }
      v13 = v9[1];
      if (v13)
      {
        if (*a2 && std::type_info::operator==[abi:ne180100](v13, *a2))
          break;
      }
      v9 = (_QWORD *)v9[4];
      if (!v9)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    pthread_mutex_unlock(v8);
    v22 = 0;
    v9 = (_QWORD *)a3(a4);
    *(_OWORD *)(v9 + 1) = *(_OWORD *)a2;
    if (!v22)
    {
      pthread_mutex_lock(v21);
      v22 = 1;
    }
    v14 = *(_QWORD **)(a1 + 80);
    if (v14)
    {
      while (1)
      {
        v15 = v14[2];
        if (v15)
        {
          v16 = a2[1];
          if (v16 && v15 == v16)
            break;
        }
        v18 = v14[1];
        if (v18)
        {
          if (*a2 && std::type_info::operator==[abi:ne180100](v18, *a2))
            break;
        }
        v14 = (_QWORD *)v14[4];
        if (!v14)
        {
          v19 = *(_QWORD *)(a1 + 80);
          goto LABEL_25;
        }
      }
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
      v9 = v14;
    }
    else
    {
      v19 = 0;
LABEL_25:
      v9[4] = v19;
      *(_QWORD *)(a1 + 80) = v9;
    }
  }
  boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&v21);
  return v9;
}

void sub_218618D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::reactive_socket_service(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6[2];

  a1[2] = 0;
  a1[3] = a2;
  *a1 = &unk_24D94CF58;
  a1[1] = 0;
  a1[4] = 0;
  a1[5] = a2;
  v3 = *a2;
  v6[1] = 0;
  v4 = boost::asio::detail::service_registry::do_use_service(v3, v6, (uint64_t (*)(uint64_t))boost::asio::detail::service_registry::create<boost::asio::detail::kqueue_reactor,boost::asio::io_context>, (uint64_t)a2);
  a1[6] = v4;
  boost::asio::detail::scheduler::init_task((boost::asio::detail::scheduler *)v4[5]);
  *a1 = &unk_24D94CEA0;
  return a1;
}

void boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::~reactive_socket_service()
{
  JUMPOUT(0x219A19A08);
}

void boost::asio::detail::service_base<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>>::~service_base()
{
  JUMPOUT(0x219A19A08);
}

uint64_t boost::asio::io_context::service::shutdown(boost::asio::io_context::service *this)
{
  return (*(uint64_t (**)(boost::asio::io_context::service *))(*(_QWORD *)this + 32))(this);
}

boost::asio::detail::kqueue_reactor *boost::asio::detail::service_registry::create<boost::asio::detail::kqueue_reactor,boost::asio::io_context>(boost::asio::execution_context *a1)
{
  boost::asio::detail::kqueue_reactor *v2;

  v2 = (boost::asio::detail::kqueue_reactor *)operator new();
  boost::asio::detail::kqueue_reactor::kqueue_reactor(v2, a1);
  return v2;
}

void sub_218618E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E1C40EADA4543);
  _Unwind_Resume(a1);
}

boost::asio::detail::kqueue_reactor *boost::asio::detail::kqueue_reactor::kqueue_reactor(boost::asio::detail::kqueue_reactor *this, boost::asio::execution_context *a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;
  std::runtime_error v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  kevent changelist;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = &unk_24D94CFA8;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_QWORD *)a2;
  v16.__imp_.__imp_ = 0;
  v4 = boost::asio::detail::service_registry::do_use_service(v3, (uint64_t *)&v16, boost::asio::detail::service_registry::create<boost::asio::detail::scheduler,boost::asio::execution_context>, *(_QWORD *)(v3 + 72));
  *((_QWORD *)this + 5) = v4;
  boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex((boost::asio::detail::kqueue_reactor *)((char *)this + 48), (*((_DWORD *)v4 + 65) & 0xFFFF0002) != -1525678080);
  v5 = kqueue();
  if (v5 == -1)
  {
    v6 = __error();
    v7 = *v6;
    v8 = boost::system::detail::system_category_ncx((boost::system::detail *)v6);
    if ((_DWORD)v7)
    {
      v14 = v8;
      std::runtime_error::runtime_error(&v16, "kqueue");
      v16.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
      v17 = v7;
      v18 = v14;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      boost::throw_exception<boost::system::system_error>((uint64_t)&v16);
    }
  }
  *((_DWORD *)this + 32) = v5;
  boost::asio::detail::pipe_select_interrupter::open_descriptors((boost::asio::detail::kqueue_reactor *)((char *)this + 132));
  *((_QWORD *)this + 18) = 0;
  *((_BYTE *)this + 152) = 0;
  boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex((boost::asio::detail::kqueue_reactor *)((char *)this + 160), *((_BYTE *)this + 120));
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  v9 = *((_DWORD *)this + 32);
  changelist.ident = *((int *)this + 33);
  *(_QWORD *)&changelist.filter = 0x1FFFFLL;
  changelist.data = 0;
  changelist.udata = (char *)this + 132;
  if (kevent(v9, &changelist, 1, 0, 0, 0) == -1)
  {
    v10 = __error();
    v11 = *v10;
    v12 = boost::system::detail::system_category_ncx((boost::system::detail *)v10);
    if ((_DWORD)v11)
    {
      v15 = v12;
      std::runtime_error::runtime_error(&v16, "");
      v16.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
      v17 = v11;
      v18 = v15;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      boost::throw_exception<boost::system::system_error>((uint64_t)&v16);
    }
  }
  return this;
}

void sub_218619038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  uint64_t v9;
  boost::asio::detail::pipe_select_interrupter *v10;
  uint64_t v11;

  boost::system::system_error::~system_error(&a9);
  boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool(v11);
  pthread_mutex_destroy((pthread_mutex_t *)(v9 + 168));
  boost::asio::detail::pipe_select_interrupter::~pipe_select_interrupter(v10);
  pthread_mutex_destroy((pthread_mutex_t *)(v9 + 56));
  _Unwind_Resume(a1);
}

void boost::asio::detail::pipe_select_interrupter::~pipe_select_interrupter(boost::asio::detail::pipe_select_interrupter *this)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)this;
  if (v2 != -1)
    close(v2);
  v3 = *((_DWORD *)this + 1);
  if (v3 != -1)
    close(v3);
}

void boost::asio::detail::kqueue_reactor::~kqueue_reactor(boost::asio::detail::kqueue_reactor *this)
{
  boost::asio::detail::kqueue_reactor::~kqueue_reactor(this);
  JUMPOUT(0x219A19A08);
}

{
  int v2;
  int v3;

  *(_QWORD *)this = &unk_24D94CFA8;
  close(*((_DWORD *)this + 32));
  boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool((uint64_t)this + 240);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 168));
  v2 = *((_DWORD *)this + 33);
  if (v2 != -1)
    close(v2);
  v3 = *((_DWORD *)this + 34);
  if (v3 != -1)
    close(v3);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
}

void boost::asio::detail::kqueue_reactor::shutdown(boost::asio::detail::kqueue_reactor *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *j;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;

  v10 = (char *)this + 48;
  if (*((_BYTE *)this + 120))
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
    v11 = 1;
    *((_BYTE *)this + 152) = 1;
    if (*((_BYTE *)this + 120))
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 56));
    v11 = 0;
  }
  else
  {
    v11 = 0;
    *((_BYTE *)this + 152) = 1;
  }
  v8 = 0;
  v9 = 0;
  v2 = (uint64_t *)((char *)this + 240);
  while (1)
  {
    v3 = *v2;
    if (!*v2)
      break;
    for (i = 0; i != 48; i += 16)
    {
      v5 = *(_QWORD *)(v3 + i + 104);
      if (v5)
      {
        v6 = v9;
        if (!v9)
          v6 = &v8;
        *v6 = v5;
        v9 = *(uint64_t **)(v3 + i + 112);
        *(_QWORD *)(v3 + i + 104) = 0;
        *(_QWORD *)(v3 + i + 112) = 0;
      }
    }
    *(_BYTE *)(v3 + 152) = 1;
    boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::free((_QWORD *)this + 30, (_QWORD *)v3);
  }
  for (j = (_QWORD *)*((_QWORD *)this + 18); j; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(*j + 48))(j, &v8);
  v12 = 0;
  v13 = 0;
  if (v8)
  {
    v12 = v8;
    v13 = v9;
    v8 = 0;
    v9 = 0;
  }
  boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)&v12);
  boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)&v8);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v10);
}

void sub_218619254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::kqueue_reactor::notify_fork(uint64_t a1, int a2)
{
  unint64_t v3;
  int *v4;
  intptr_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  uint64_t *v11;
  char v12;
  int *i;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  std::runtime_error v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  kevent changelist;
  uintptr_t ident;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a2 == 2)
  {
    *(_DWORD *)(a1 + 128) = -1;
    v3 = kqueue();
    if ((_DWORD)v3 == -1)
    {
      v4 = __error();
      v5 = *v4;
      v6 = boost::system::detail::system_category_ncx((boost::system::detail *)v4);
      if ((_DWORD)v5)
      {
        v19 = v6;
        std::runtime_error::runtime_error((std::runtime_error *)&changelist, "kqueue");
        changelist.ident = (uintptr_t)&unk_24D921E98;
        changelist.data = v5;
        changelist.udata = v19;
        ident = 0;
        v31 = 0;
        v32 = 0;
        boost::throw_exception<boost::system::system_error>((uint64_t)&changelist);
      }
    }
    v7 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(a1 + 128) = v3;
    if (v7 != -1)
      close(v7);
    v8 = *(_DWORD *)(a1 + 136);
    if (v8 != -1)
      close(v8);
    *(_QWORD *)(a1 + 132) = -1;
    boost::asio::detail::pipe_select_interrupter::open_descriptors((boost::asio::detail::pipe_select_interrupter *)(a1 + 132));
    v9 = *(_DWORD *)(a1 + 128);
    changelist.ident = *(int *)(a1 + 132);
    *(_QWORD *)&changelist.filter = 0x1FFFFLL;
    changelist.data = 0;
    changelist.udata = (void *)(a1 + 132);
    if (kevent(v9, &changelist, 1, 0, 0, 0) == -1)
    {
      v10 = __error();
      v3 = *v10;
      v11 = boost::system::detail::system_category_ncx((boost::system::detail *)v10);
      if ((_DWORD)v3)
      {
        v20 = v11;
        std::runtime_error::runtime_error(&v23, "kqueue interrupter registration");
        v23.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
        v24 = v3;
        v25 = v20;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        boost::throw_exception<boost::system::system_error>((uint64_t)&v23);
      }
    }
    v21 = a1 + 160;
    v12 = *(_BYTE *)(a1 + 232);
    if (v12)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 168));
      v12 = 1;
    }
    v22 = v12;
    for (i = *(int **)(a1 + 240); i; i = *(int **)i)
    {
      v14 = i[25];
      if (v14 >= 1)
      {
        changelist.ident = i[24];
        *(_QWORD *)&changelist.filter = 2228223;
        changelist.data = 0;
        changelist.udata = i;
        ident = changelist.ident;
        v31 = 2228222;
        v32 = 0;
        v33 = i;
        if (kevent(*(_DWORD *)(a1 + 128), &changelist, v14, 0, 0, 0) == -1)
        {
          v15 = __error();
          v16 = *v15;
          v17 = boost::system::detail::system_category_ncx((boost::system::detail *)v15);
          v3 = v3 & 0xFFFFFFFF00000000 | v16;
          if ((_DWORD)v16)
          {
            v18 = v17;
            std::runtime_error::runtime_error(&v23, "kqueue re-registration");
            v23.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
            v24 = v3;
            v25 = v18;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            boost::throw_exception<boost::system::system_error>((uint64_t)&v23);
          }
        }
      }
    }
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v21);
  }
}

void sub_2186194E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::runtime_error a17)
{
  boost::system::system_error::~system_error(&a11);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::detail::service_registry::create<boost::asio::detail::scheduler,boost::asio::execution_context>(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &unk_24D94CD78;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 40) = 0;
  boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex((boost::asio::detail::conditionally_enabled_mutex *)(v2 + 48), 1);
  boost::asio::detail::conditionally_enabled_event::conditionally_enabled_event((boost::asio::detail::conditionally_enabled_event *)(v2 + 128));
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_BYTE *)(v2 + 224) = 1;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_WORD *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 260) = 0;
  return v2;
}

void sub_2186195C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 56));
  MEMORY[0x219A19A08](v1, 0x10E1C40CA236648);
  _Unwind_Resume(a1);
}

uint64_t *boost::asio::detail::pipe_select_interrupter::open_descriptors(boost::asio::detail::pipe_select_interrupter *this)
{
  int *v2;
  uint64_t v3;
  uint64_t *result;
  uint64_t *v5;
  int v6;
  int v7;
  std::runtime_error v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (pipe(v14))
  {
    v2 = __error();
    v3 = *v2;
    result = boost::system::detail::system_category_ncx((boost::system::detail *)v2);
    if ((_DWORD)v3)
    {
      v5 = result;
      std::runtime_error::runtime_error(&v8, "pipe_select_interrupter");
      v8.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
      v9 = v3;
      v10 = v5;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      boost::throw_exception<boost::system::system_error>((uint64_t)&v8);
    }
  }
  else
  {
    v6 = v14[0];
    *(_DWORD *)this = v14[0];
    fcntl(v6, 4, 4);
    v7 = v14[1];
    *((_DWORD *)this + 1) = v14[1];
    fcntl(v7, 4, 4);
    fcntl(*(_DWORD *)this, 2, 1);
    return (uint64_t *)fcntl(*((_DWORD *)this + 1), 2, 1);
  }
  return result;
}

void sub_2186196FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>((uint64_t)v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>((uint64_t)v4);
      v4 = v5;
    }
    while (v5);
  }
  return a1;
}

uint64_t boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  if (result)
  {
    v1 = result;
    for (i = 136; i != 88; i -= 16)
      boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)(v1 + i));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 24));
    JUMPOUT(0x219A19A08);
  }
  return result;
}

_QWORD *boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::free(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;

  if ((_QWORD *)*result == a2)
    *result = *a2;
  v2 = (_QWORD *)a2[1];
  if (v2)
    *v2 = *a2;
  if (*a2)
    *(_QWORD *)(*a2 + 8) = a2[1];
  *a2 = result[1];
  a2[1] = 0;
  result[1] = a2;
  return result;
}

void boost::asio::detail::scheduler::init_task(boost::asio::detail::scheduler *this)
{
  char v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t __buf[2];

  v7 = (char *)this + 48;
  v2 = *((_BYTE *)this + 120);
  if (v2)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
    v2 = 1;
  }
  v8 = v2;
  if (!*((_BYTE *)this + 257) && !*((_QWORD *)this + 24))
  {
    v3 = **((_QWORD **)this + 3);
    __buf[1] = 0;
    v4 = boost::asio::detail::service_registry::do_use_service(v3, __buf, (uint64_t (*)(uint64_t))boost::asio::detail::service_registry::create<boost::asio::detail::kqueue_reactor,boost::asio::execution_context>, *(_QWORD *)(v3 + 72));
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 24) = v4;
    v5 = (_QWORD *)((char *)this + 240);
    if (*((_QWORD *)this + 31))
      v5 = (_QWORD *)*((_QWORD *)this + 31);
    *v5 = (char *)this + 200;
    *((_QWORD *)this + 31) = (char *)this + 200;
    if (!v7[72]
      || !boost::asio::detail::posix_event::maybe_unlock_and_signal_one<boost::asio::detail::conditionally_enabled_mutex::scoped_lock>((pthread_cond_t *)((char *)this + 136), &v7))
    {
      if (!*((_BYTE *)this + 224))
      {
        v6 = *((_QWORD *)this + 24);
        if (v6)
        {
          *((_BYTE *)this + 224) = 1;
          LOBYTE(__buf[0]) = 0;
          write(*(_DWORD *)(v6 + 136), __buf, 1uLL);
        }
      }
      if (v8)
      {
        if (v7[72])
          pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
        v8 = 0;
      }
    }
  }
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v7);
}

void sub_2186199A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

boost::asio::detail::kqueue_reactor *boost::asio::detail::service_registry::create<boost::asio::detail::kqueue_reactor,boost::asio::execution_context>(boost::asio::execution_context *a1)
{
  boost::asio::detail::kqueue_reactor *v2;

  v2 = (boost::asio::detail::kqueue_reactor *)operator new();
  boost::asio::detail::kqueue_reactor::kqueue_reactor(v2, a1);
  return v2;
}

void sub_2186199F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E1C40EADA4543);
  _Unwind_Resume(a1);
}

BOOL boost::asio::detail::posix_event::maybe_unlock_and_signal_one<boost::asio::detail::conditionally_enabled_mutex::scoped_lock>(pthread_cond_t *a1, _BYTE *a2)
{
  unint64_t sig;

  sig = a1[1].__sig;
  a1[1].__sig = sig | 1;
  if (sig >= 2)
  {
    if (a2[8])
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 72))
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a2 + 8));
      a2[8] = 0;
    }
    pthread_cond_signal(a1);
  }
  return sig > 1;
}

uint64_t boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::open(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  if (!boost::asio::detail::reactive_socket_service_base::do_open(a1 + 40, a2, *a3, 1, 6, a4))
    *(_DWORD *)(a2 + 16) = *a3;
  return *a4;
}

uint64_t boost::asio::detail::reactive_socket_service_base::do_open(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _QWORD *a6)
{
  uint64_t v7;
  int v13;
  boost::system::detail *v14;
  int v15;
  uint64_t *v16;
  int v17;
  boost::system::detail *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  char v24;
  boost::system::detail *v25;
  int v26;
  char v27;
  uint64_t *v28;
  int v30;
  _QWORD *v31;
  char v32;

  if (*(_DWORD *)a2 == -1)
  {
    *__error() = 0;
    v13 = socket(a3, a4, a5);
    v14 = (boost::system::detail *)__error();
    v15 = *(_DWORD *)v14;
    v16 = boost::system::detail::system_category_ncx(v14);
    *(_DWORD *)a6 = v15;
    a6[1] = v16;
    if (v13 != -1)
    {
      LODWORD(v31) = 1;
      v17 = setsockopt(v13, 0xFFFF, 4130, &v31, 4u);
      v18 = (boost::system::detail *)__error();
      v19 = *(_DWORD *)v18;
      v20 = boost::system::detail::system_category_ncx(v18);
      *(_DWORD *)a6 = v19;
      a6[1] = v20;
      if (!v17)
      {
        v30 = v13;
        v21 = *(_QWORD *)(a1 + 8);
        v31 = (_QWORD *)(v21 + 160);
        v22 = *(_BYTE *)(v21 + 232);
        if (v22)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v21 + 168));
          v22 = 1;
        }
        v32 = v22;
        v23 = boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::alloc<BOOL>((_QWORD *)(v21 + 240), (*(_DWORD *)(*(_QWORD *)(v21 + 40) + 260) & 0xFFFF0004) != -1525678080);
        boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v31);
        *(_QWORD *)(a2 + 8) = v23;
        v31 = v23 + 2;
        v24 = *((_BYTE *)v23 + 88);
        if (v24)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v23 + 3));
          v23 = *(_QWORD **)(a2 + 8);
          v24 = 1;
        }
        v32 = v24;
        *((_DWORD *)v23 + 24) = v13;
        *((_DWORD *)v23 + 25) = 0;
        *((_BYTE *)v23 + 152) = 0;
        boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v31);
        v26 = v30;
        v30 = -1;
        *(_DWORD *)a2 = v26;
        v27 = 32 * (a4 == 2);
        if (a4 == 1)
          v27 = 16;
        *(_BYTE *)(a2 + 4) = v27;
        v28 = boost::system::detail::system_category_ncx(v25);
        *(_DWORD *)a6 = 0;
        a6[1] = v28;
        goto LABEL_14;
      }
      close(v13);
    }
    v30 = -1;
LABEL_14:
    v7 = *a6;
    boost::asio::detail::socket_holder::~socket_holder((boost::asio::detail::socket_holder *)&v30);
    return v7;
  }
  boost::system::error_code::operator=<boost::asio::error::misc_errors>(a6, 1u);
  return *a6;
}

void sub_218619CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, __int16 a12, char a13)
{
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&a13);
  boost::asio::detail::socket_holder::~socket_holder((boost::asio::detail::socket_holder *)&a11);
  _Unwind_Resume(a1);
}

_QWORD *boost::system::error_code::operator=<boost::asio::error::misc_errors>(_QWORD *result, unsigned int a2)
{
  unsigned __int8 v2;
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;

  if ((v2 & 1) == 0)
  {
    v6 = result;
    v5 = a2;
    a2 = v5;
    v4 = v3;
    result = v6;
    if (v4)
    {
      qword_254FD5628 = (uint64_t)&boost::asio::error::get_misc_category(void)::instance;
      boost::asio::error::get_misc_category(void)::instance = (uint64_t)&unk_24D94C9C8;
      unk_254FD5620 = &unk_24D938C40;
      __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::asio::error::get_misc_category(void)::instance, &dword_217E69000);
      a2 = v5;
      result = v6;
    }
  }
  *result = a2;
  result[1] = &boost::asio::error::get_misc_category(void)::instance;
  return result;
}

_QWORD *boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::alloc<BOOL>(_QWORD *a1, char a2)
{
  _QWORD *result;

  result = (_QWORD *)a1[1];
  if (result)
    a1[1] = *result;
  else
    result = (_QWORD *)boost::asio::detail::object_pool_access::create<boost::asio::detail::kqueue_reactor::descriptor_state,BOOL>(a2);
  *result = *a1;
  result[1] = 0;
  if (*a1)
    *(_QWORD *)(*a1 + 8) = result;
  *a1 = result;
  return result;
}

uint64_t boost::asio::detail::object_pool_access::create<boost::asio::detail::kqueue_reactor::descriptor_state,BOOL>(char a1)
{
  uint64_t v2;

  v2 = operator new();
  boost::asio::detail::conditionally_enabled_mutex::conditionally_enabled_mutex((boost::asio::detail::conditionally_enabled_mutex *)(v2 + 16), a1);
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  return v2;
}

void sub_218619E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1020C40A0B10BD8);
  _Unwind_Resume(a1);
}

void boost::asio::detail::socket_holder::~socket_holder(boost::asio::detail::socket_holder *this)
{
  char v2;
  int v3;
  uint64_t *v4;

  if (*(_DWORD *)this != -1)
  {
    v3 = 0;
    v4 = boost::system::detail::system_category_ncx(this);
    v2 = 0;
    boost::asio::detail::socket_ops::close((uint64_t *)*(unsigned int *)this, &v2, 1, (uint64_t)&v3);
  }
}

uint64_t boost::asio::detail::socket_ops::close(uint64_t *a1, _BYTE *a2, int a3, uint64_t a4)
{
  int v6;
  int v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  boost::system::detail *v11;
  int v12;
  uint64_t *v13;
  boost::system::detail *v14;
  int v15;
  uint64_t *v16;
  int v18;
  uint64_t v19;

  if ((_DWORD)a1 == -1)
    goto LABEL_12;
  v6 = (int)a1;
  if (a3)
  {
    if ((*a2 & 8) != 0)
    {
      v19 = 0;
      boost::system::detail::system_category_ncx((boost::system::detail *)a1);
      *a2 |= 8u;
      *__error() = 0;
      v7 = setsockopt(v6, 0xFFFF, 128, &v19, 8u);
      v8 = __error();
      v9 = boost::system::detail::system_category_ncx((boost::system::detail *)v8);
      if (!v7)
        boost::system::detail::system_category_ncx((boost::system::detail *)v9);
    }
  }
  *__error() = 0;
  v10 = close(v6);
  v11 = (boost::system::detail *)__error();
  v12 = *(_DWORD *)v11;
  a1 = boost::system::detail::system_category_ncx(v11);
  *(_DWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = a1;
  if (!(_DWORD)v10)
    goto LABEL_12;
  if ((v13 = boost::system::detail::system_category_ncx((boost::system::detail *)a1), *(uint64_t **)(a4 + 8) == v13)
    && *(_DWORD *)a4 == 35
    || *(uint64_t **)(a4 + 8) == boost::system::detail::system_category_ncx((boost::system::detail *)v13)
    && *(_DWORD *)a4 == 35)
  {
    v18 = 0;
    ioctl(v6, 0x8004667EuLL, &v18);
    *a2 &= 0xFCu;
    *__error() = 0;
    v10 = close(v6);
    v14 = (boost::system::detail *)__error();
    v15 = *(_DWORD *)v14;
    a1 = boost::system::detail::system_category_ncx(v14);
    *(_DWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = a1;
    if (!(_DWORD)v10)
    {
LABEL_12:
      v16 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
      v10 = 0;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = v16;
    }
  }
  return v10;
}

uint64_t boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::set_option<boost::asio::detail::socket_option::BOOLean<65535,4>>(boost::system::detail *a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  int v5;
  int v8;
  boost::system::detail *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == -1)
  {
    v13 = boost::system::detail::system_category_ncx(a1);
    *a4 = 9;
    a4[1] = v13;
  }
  else
  {
    *__error() = 0;
    v8 = setsockopt(v5, 0xFFFF, 4, a3, 4u);
    v9 = (boost::system::detail *)__error();
    v10 = *(_DWORD *)v9;
    v11 = boost::system::detail::system_category_ncx(v9);
    *(_DWORD *)a4 = v10;
    a4[1] = v11;
    if (!v8)
    {
      v12 = boost::system::detail::system_category_ncx((boost::system::detail *)v11);
      *(_DWORD *)a4 = 0;
      a4[1] = v12;
      if ((*(_BYTE *)(a2 + 4) & 0x20) != 0)
        setsockopt(v5, 0xFFFF, 512, a3, 4u);
    }
  }
  return *a4;
}

uint64_t boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::bind(boost::system::detail *a1, int *a2, const sockaddr *a3, _QWORD *a4)
{
  int v5;
  int sa_family;
  socklen_t v8;
  int v9;
  boost::system::detail *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;

  v5 = *a2;
  if (*a2 == -1)
  {
    v13 = boost::system::detail::system_category_ncx(a1);
    *a4 = 9;
    goto LABEL_8;
  }
  sa_family = a3->sa_family;
  *__error() = 0;
  if (sa_family == 2)
    v8 = 16;
  else
    v8 = 28;
  v9 = bind(v5, a3, v8);
  v10 = (boost::system::detail *)__error();
  v11 = *(_DWORD *)v10;
  v12 = boost::system::detail::system_category_ncx(v10);
  *(_DWORD *)a4 = v11;
  a4[1] = v12;
  if (!v9)
  {
    v13 = boost::system::detail::system_category_ncx((boost::system::detail *)v12);
    *(_DWORD *)a4 = 0;
LABEL_8:
    a4[1] = v13;
  }
  return *a4;
}

uint64_t boost::asio::detail::reactive_socket_service_base::listen(boost::system::detail *a1, int *a2, int a3, _QWORD *a4)
{
  int v5;
  int v7;
  boost::system::detail *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = *a2;
  if (*a2 == -1)
  {
    v11 = boost::system::detail::system_category_ncx(a1);
    *a4 = 9;
    goto LABEL_5;
  }
  *__error() = 0;
  v7 = listen(v5, a3);
  v8 = (boost::system::detail *)__error();
  v9 = *(_DWORD *)v8;
  v10 = boost::system::detail::system_category_ncx(v8);
  *(_DWORD *)a4 = v9;
  a4[1] = v10;
  if (!v7)
  {
    v11 = boost::system::detail::system_category_ncx((boost::system::detail *)v10);
    *(_DWORD *)a4 = 0;
LABEL_5:
    a4[1] = v11;
  }
  return *a4;
}

uint64_t boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(uint64_t a1)
{
  boost::asio::detail::reactive_socket_service_base::destroy(*(_QWORD *)a1 + 40, (unsigned int *)(a1 + 8));
  return a1;
}

void boost::asio::detail::reactive_socket_service_base::destroy(uint64_t a1, unsigned int *a2)
{
  int v3;
  _QWORD *v5;
  boost::system::detail *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v3 = *a2;
  if (v3 != -1)
  {
    v5 = a2 + 2;
    boost::asio::detail::kqueue_reactor::deregister_descriptor(*(uint64_t **)(a1 + 8), v3, (uint64_t *)a2 + 1, (a2[1] & 0x40) == 0);
    v10 = 0;
    v11 = boost::system::detail::system_category_ncx(v6);
    boost::asio::detail::socket_ops::close((uint64_t *)*a2, (_BYTE *)a2 + 4, 1, (uint64_t)&v10);
    v7 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v12 = v8 + 160;
      v9 = *(_BYTE *)(v8 + 232);
      if (v9)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v8 + 168));
        v9 = 1;
      }
      v13 = v9;
      boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::free((_QWORD *)(v8 + 240), v7);
      boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v12);
      *v5 = 0;
    }
  }
}

void sub_21861A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::kqueue_reactor::deregister_descriptor(uint64_t *a1, int a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t *v8;
  char v9;
  kevent *v10;
  uint64_t v11;
  kevent *v12;
  kevent *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  kevent *p_changelist;
  uint64_t v21;
  char v22;
  kevent changelist;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  if (*a3)
  {
    v8 = a1;
    v21 = v4 + 16;
    v9 = *(_BYTE *)(v4 + 88);
    if (v9)
    {
      a1 = (uint64_t *)pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
      v4 = *a3;
      v9 = 1;
    }
    v22 = v9;
    if (*(_BYTE *)(v4 + 152))
    {
      *a3 = 0;
    }
    else
    {
      if ((a4 & 1) == 0)
      {
        changelist.ident = a2;
        *(_DWORD *)&changelist.filter = 196607;
        memset(&changelist.fflags, 0, 20);
        v24 = a2;
        v25 = 196606;
        v27 = 0;
        v26 = 0;
        v28 = 0;
        a1 = (uint64_t *)kevent(*((_DWORD *)v8 + 32), &changelist, *(_DWORD *)(v4 + 100), 0, 0, 0);
        v4 = *a3;
      }
      v10 = 0;
      v11 = 0;
      changelist.ident = 0;
      *(_QWORD *)&changelist.filter = 0;
      do
      {
        v12 = *(kevent **)(v4 + 16 * v11 + 104);
        if (v12)
        {
          do
          {
            v13 = v12;
            a1 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
            v13->udata = (void *)89;
            v13[1].ident = (uintptr_t)a1;
            v14 = *a3;
            v15 = *a3 + 16 * v11;
            v18 = *(uint64_t **)(v15 + 104);
            v17 = (uint64_t *)(v15 + 104);
            v16 = v18;
            if (v18)
            {
              v19 = *v16;
              *v17 = *v16;
              if (!v19)
                *(_QWORD *)(v14 + 16 * v11 + 112) = 0;
              *v16 = 0;
            }
            v13->ident = 0;
            if (v10)
              p_changelist = v10;
            else
              p_changelist = &changelist;
            p_changelist->ident = (uintptr_t)v13;
            *(_QWORD *)&changelist.filter = v13;
            v4 = *a3;
            v12 = *(kevent **)(*a3 + 16 * v11 + 104);
            v10 = v13;
          }
          while (v12);
          v10 = v13;
        }
        ++v11;
      }
      while (v11 != 3);
      *(_DWORD *)(v4 + 96) = -1;
      *(_BYTE *)(v4 + 152) = 1;
      if (v22)
      {
        if (*(_BYTE *)(v21 + 72))
          pthread_mutex_unlock((pthread_mutex_t *)(v21 + 8));
        v22 = 0;
      }
      boost::asio::detail::scheduler::post_deferred_completions(v8[5], &changelist);
      boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)&changelist);
    }
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v21);
  }
}

void sub_21861A520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::scheduler::post_deferred_completions(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char __buf;

  if (*a2)
  {
    if (*(_BYTE *)(a1 + 40)
      && (v4 = boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::contains(a1)) != 0)
    {
      if (*a2)
      {
        v5 = v4 + 2;
        if (v4[3])
          v5 = (_QWORD *)v4[3];
        *v5 = *a2;
        v4[3] = a2[1];
        *a2 = 0;
        a2[1] = 0;
      }
    }
    else
    {
      v9 = a1 + 48;
      v6 = *(_BYTE *)(a1 + 120);
      if (v6)
      {
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
        v6 = 1;
      }
      v10 = v6;
      if (*a2)
      {
        v7 = (_QWORD *)(a1 + 240);
        if (*(_QWORD *)(a1 + 248))
          v7 = *(_QWORD **)(a1 + 248);
        *v7 = *a2;
        *(_QWORD *)(a1 + 248) = a2[1];
        *a2 = 0;
        a2[1] = 0;
      }
      if (!*(_BYTE *)(a1 + 120)
        || !boost::asio::detail::posix_event::maybe_unlock_and_signal_one<boost::asio::detail::conditionally_enabled_mutex::scoped_lock>((pthread_cond_t *)(a1 + 136), &v9))
      {
        if (!*(_BYTE *)(a1 + 224))
        {
          v8 = *(_QWORD *)(a1 + 192);
          if (v8)
          {
            *(_BYTE *)(a1 + 224) = 1;
            __buf = 0;
            write(*(_DWORD *)(v8 + 136), &__buf, 1uLL);
          }
        }
        if (v10)
        {
          if (*(_BYTE *)(v9 + 72))
            pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
          v10 = 0;
        }
      }
      boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v9);
    }
  }
}

void sub_21861A668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::contains(uint64_t a1)
{
  _QWORD *result;

  result = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (result)
  {
    while (*result != a1)
    {
      result = (_QWORD *)result[2];
      if (!result)
        return result;
    }
    return (_QWORD *)result[1];
  }
  return result;
}

void std::allocator<listener>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;

  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(a2 + 48);
  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(a2 + 16);
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>::basic_endpoint(uint64_t result, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  uint64_t v4;
  std::bad_cast v5;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  v3 = __rev16(a3);
  if (*(_DWORD *)a2)
  {
    *(_BYTE *)(result + 1) = 30;
    *(_WORD *)(result + 2) = v3;
    *(_DWORD *)(result + 4) = 0;
    if (*(_DWORD *)a2 != 1)
    {
      std::bad_cast::bad_cast(&v5);
      v5.__vftable = (std::bad_cast_vtbl *)&unk_24D94D008;
      boost::throw_exception<boost::asio::ip::bad_address_cast>();
    }
    v4 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(result + 24) = v4;
  }
  else
  {
    *(_BYTE *)(result + 1) = 2;
    *(_WORD *)(result + 2) = v3;
    if (*(_DWORD *)a2)
    {
      std::bad_cast::bad_cast(&v5);
      v5.__vftable = (std::bad_cast_vtbl *)&unk_24D94D008;
      boost::throw_exception<boost::asio::ip::bad_address_cast>();
    }
    *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
  }
  return result;
}

void sub_21861A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::asio::ip::bad_address_cast>()
{
  void *exception;
  _QWORD v1[5];
  int v2;

  exception = __cxa_allocate_exception(0x38uLL);
  memset(&v1[2], 0, 24);
  v2 = -1;
  v1[0] = &unk_24D94D160;
  v1[1] = &unk_24D94D188;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone_impl((uint64_t)exception, (uint64_t)v1);
}

void sub_21861A85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  void *v11;
  int v12;

  a10 = &unk_24D918C48;
  if (a11 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a11 + 32))(a11))
    a11 = 0;
  std::exception::~exception((std::exception *)&a9);
  if (v12)
    __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void boost::asio::ip::bad_address_cast::~bad_address_cast(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A19A08);
}

const char *boost::asio::ip::bad_address_cast::what(boost::asio::ip::bad_address_cast *this)
{
  return "bad address cast";
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D94D008;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)a1 = &unk_24D94D0C0;
  *(_QWORD *)(a1 + 8) = &unk_24D94D0F8;
  *(_QWORD *)(a1 + 48) = &unk_24D94D130;
  boost::exception_detail::copy_boost_exception(v4, a2 + 8);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D94D008;
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = &unk_24D94D0C0;
  *(_QWORD *)(a1 + 8) = &unk_24D94D0F8;
  *(_QWORD *)(a1 + 48) = &unk_24D94D130;
  return a1;
}

void sub_21861A9D8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_21861AA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40F6FF0CB6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone_impl((uint64_t)exception, a1);
}

void sub_21861AAFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 1);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl(a1 - 8);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 1) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 2);
  std::exception::~exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::asio::ip::bad_address_cast>::~error_info_injector(a1 - 8);
}

void sub_21861ACA4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void listener::do_accept(listener *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v8, this);
  v9[0] = listener::on_accept;
  v9[1] = 0;
  v10 = v8;
  v8 = 0uLL;
  boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::async_accept<boost::asio::basic_socket<boost::asio::ip::tcp>,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>(*((_QWORD *)this + 2), (uint64_t)this + 24, (uint64_t)this + 48, 0, (uint64_t)v9);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_21861AD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t listener::on_accept(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  session *v8;
  std::__shared_weak_count *v9;

  if ((_DWORD)a2)
  {
    fail(a2, a3, "accept");
  }
  else
  {
    std::allocate_shared[abi:ne180100]<session,std::allocator<session>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,void>(a1 + 6, a1[10], a1[11], &v8);
    session::do_read(v8);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return listener::do_accept((listener *)a1);
}

void sub_21861AE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::async_accept<boost::asio::basic_socket<boost::asio::ip::tcp>,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  v11 = a5;
  v14 = a5;
  v10 = boost::asio::detail::hook_allocator<std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>,boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>>::allocate((uint64_t)&v14, 1);
  v12 = v10;
  v13 = 0;
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::reactive_socket_accept_op((uint64_t)v10, *(_DWORD *)a2, *(_BYTE *)(a2 + 4), a3, (_DWORD *)(a2 + 16), a4, a5);
  v13 = v10;
  if (*(_DWORD *)(a3 + 8) == -1)
  {
    boost::asio::detail::reactive_socket_service_base::start_op((uint64_t *)(a1 + 40), a2, 0, v10, 0, 1, 0);
  }
  else
  {
    boost::system::error_code::operator=<boost::asio::error::misc_errors>((_QWORD *)v10 + 3, 1u);
    boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40), v10, 0);
  }
  v12 = 0;
  v13 = 0;
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset(&v11);
}

void sub_21861AF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::asio::detail::hook_allocator<std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>,boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>>::allocate(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (v3)
    v3 = (unsigned __int8 **)v3[1];
  return boost::asio::detail::thread_info_base::allocate<boost::asio::detail::thread_info_base::default_tag>(v3, 136 * a2);
}

unsigned __int8 *boost::asio::detail::thread_info_base::allocate<boost::asio::detail::thread_info_base::default_tag>(unsigned __int8 **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *result;
  unint64_t v7;

  v3 = a2 + 3;
  v4 = (unint64_t)(a2 + 3) >> 2;
  if (a1)
  {
    result = *a1;
    if (result)
    {
      *a1 = 0;
      v7 = *result;
      if (v4 <= v7)
        goto LABEL_8;
      operator delete(result);
    }
  }
  result = (unsigned __int8 *)operator new(v3 & 0xFFFFFFFFFFFFFFFCLL | 1);
  if (v3 >= 0x400)
    LOBYTE(v7) = 0;
  else
    LOBYTE(v7) = v4;
LABEL_8:
  result[a2] = v7;
  return result;
}

uint64_t boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::reactive_socket_accept_op(uint64_t a1, int a2, char a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::do_complete;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  *(_QWORD *)(a1 + 48) = boost::asio::detail::reactive_socket_accept_op_base<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp>::do_perform;
  *(_QWORD *)(a1 + 72) = a4;
  v14 = 28;
  if (!a6)
    v14 = 0;
  *(_QWORD *)(a1 + 88) = a6;
  v15 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 60) = a3;
  *(_DWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 80) = *a5;
  *(_QWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  return a1;
}

void boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::do_complete(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void (*v5)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13[3];

  v13[0] = a2 + 104;
  v13[1] = a2;
  v13[2] = a2;
  if (a1)
    boost::asio::detail::reactive_socket_accept_op_base<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp>::do_assign(a2);
  v4 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 104);
  v11 = v4;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v12 = *(_OWORD *)(a2 + 24);
  v13[0] = (uint64_t)&v10;
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset(v13);
  if (a1)
  {
    v5 = (void (*)(_QWORD *, _QWORD, _QWORD))v10;
    v6 = (_QWORD *)(v11 + (*((uint64_t *)&v10 + 1) >> 1));
    if ((BYTE8(v10) & 1) != 0)
      v5 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v10);
    v5(v6, v12, *((_QWORD *)&v12 + 1));
    __dmb(0xBu);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset(v13);
}

void sub_21861B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  __dmb(0xBu);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v8 + 16);
  boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::detail::reactive_socket_accept_op_base<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp>::do_assign(uint64_t result)
{
  int v1;
  uint64_t v2;
  boost::system::detail *v3;
  uint64_t v4;
  int v5;

  v1 = *(_DWORD *)(result + 64);
  if (v1 != -1)
  {
    v2 = result;
    v3 = *(boost::system::detail **)(result + 88);
    if (v3)
    {
      boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>::resize(v3, *(_QWORD *)(v2 + 96));
      v1 = *(_DWORD *)(v2 + 64);
    }
    v4 = *(_QWORD *)(v2 + 72);
    v5 = v1;
    result = boost::asio::basic_socket<boost::asio::ip::tcp>::assign(v4, (_DWORD *)(v2 + 80), &v5, (_QWORD *)(v2 + 24));
    if (!*(_DWORD *)(v2 + 24))
      *(_DWORD *)(v2 + 64) = -1;
  }
  return result;
}

void boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>::ptr::reset(uint64_t *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 120);
    boost::asio::detail::socket_holder::~socket_holder((boost::asio::detail::socket_holder *)(v2 + 64));
    a1[2] = 0;
  }
  v3 = (_BYTE *)a1[1];
  if (v3)
  {
    v4 = *a1;
    boost::asio::detail::hook_allocator<std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>,boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>>::deallocate((uint64_t)&v4, v3, 1);
    a1[1] = 0;
  }
}

boost::system::detail *boost::asio::ip::basic_endpoint<boost::asio::ip::tcp>::resize(boost::system::detail *result, unint64_t a2)
{
  uint64_t *v2;
  std::runtime_error v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= 0x81)
  {
    v2 = boost::system::detail::system_category_ncx(result);
    std::runtime_error::runtime_error(&v3, "");
    v3.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
    v4 = 22;
    v5 = v2;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v3);
  }
  return result;
}

void sub_21861B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::basic_socket<boost::asio::ip::tcp>::assign(uint64_t a1, _DWORD *a2, int *a3, _QWORD *a4)
{
  if (!boost::asio::detail::reactive_socket_service_base::do_assign(*(_QWORD *)a1 + 40, a1 + 8, 1, a3, a4))*(_DWORD *)(a1 + 24) = *a2;
  return *a4;
}

uint64_t boost::asio::detail::reactive_socket_service_base::do_assign(uint64_t a1, uint64_t a2, int a3, int *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  char v11;
  _QWORD *v12;
  char v13;
  boost::system::detail *v14;
  char v15;
  uint64_t *v16;
  _QWORD *v18;
  char v19;

  if (*(_DWORD *)a2 == -1)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *a4;
    v18 = (_QWORD *)(v9 + 160);
    v11 = *(_BYTE *)(v9 + 232);
    if (v11)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v9 + 168));
      v11 = 1;
    }
    v19 = v11;
    v12 = boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::alloc<BOOL>((_QWORD *)(v9 + 240), (*(_DWORD *)(*(_QWORD *)(v9 + 40) + 260) & 0xFFFF0004) != -1525678080);
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v18);
    *(_QWORD *)(a2 + 8) = v12;
    v18 = v12 + 2;
    v13 = *((_BYTE *)v12 + 88);
    if (v13)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v12 + 3));
      v12 = *(_QWORD **)(a2 + 8);
      v13 = 1;
    }
    v19 = v13;
    *((_DWORD *)v12 + 24) = v10;
    *((_DWORD *)v12 + 25) = 0;
    *((_BYTE *)v12 + 152) = 0;
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v18);
    *(_DWORD *)a2 = *a4;
    if (a3 == 2)
      v15 = 96;
    else
      v15 = 64;
    if (a3 == 1)
      v15 = 80;
    *(_BYTE *)(a2 + 4) = v15;
    v16 = boost::system::detail::system_category_ncx(v14);
    *(_DWORD *)a5 = 0;
    a5[1] = v16;
  }
  else
  {
    boost::system::error_code::operator=<boost::asio::error::misc_errors>(a5, 1u);
  }
  return *a5;
}

void sub_21861B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

void boost::asio::detail::hook_allocator<std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>,boost::asio::detail::reactive_socket_accept_op<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp,std::__bind<void (listener::*)(boost::system::error_code),std::shared_ptr<listener>,std::placeholders::__ph<1> const&>>>::deallocate(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v5 = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (!v5 || ((v6 = (_QWORD *)v5[1], (unint64_t)(136 * a3) <= 0x3FC) ? (v7 = v6 == 0) : (v7 = 1), v7 || *v6))
  {
    operator delete(a2);
  }
  else
  {
    *a2 = a2[136 * a3];
    *v6 = a2;
  }
}

uint64_t boost::asio::detail::reactive_socket_accept_op_base<boost::asio::basic_socket<boost::asio::ip::tcp>,boost::asio::ip::tcp>::do_perform(uint64_t a1)
{
  boost::system::detail *v2;
  char v3;
  sockaddr *v4;
  _QWORD *v5;
  _QWORD *v6;
  boost::system::detail *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;

  v2 = (boost::system::detail *)*(unsigned int *)(a1 + 56);
  v3 = *(_BYTE *)(a1 + 60);
  v4 = *(sockaddr **)(a1 + 88);
  if (v4)
    v5 = (_QWORD *)(a1 + 96);
  else
    v5 = 0;
  v6 = (_QWORD *)(a1 + 24);
  do
  {
    v7 = (boost::system::detail *)boost::asio::detail::socket_ops::accept(v2, v4, v5, v6);
    v8 = (int)v7;
    if ((_DWORD)v7 != -1)
      goto LABEL_18;
    v9 = boost::system::detail::system_category_ncx(v7);
  }
  while (*(uint64_t **)(a1 + 32) == v9 && *(_DWORD *)(a1 + 24) == 4);
  v11 = boost::system::detail::system_category_ncx((boost::system::detail *)v9);
  if (*(uint64_t **)(a1 + 32) == v11 && *(_DWORD *)(a1 + 24) == 35
    || (v12 = boost::system::detail::system_category_ncx((boost::system::detail *)v11), *(uint64_t **)(a1 + 32) == v12)
    && *(_DWORD *)(a1 + 24) == 35)
  {
LABEL_14:
    v13 = 0;
    goto LABEL_19;
  }
  v14 = boost::system::detail::system_category_ncx((boost::system::detail *)v12);
  v15 = *(_DWORD *)(a1 + 24);
  if (*(uint64_t **)(a1 + 32) == v14 && v15 == 53)
  {
    if ((v3 & 4) == 0)
      goto LABEL_14;
LABEL_18:
    v13 = 1;
  }
  else
  {
    v13 = 1;
    if ((v3 & 4) == 0 && v15 == 100)
      goto LABEL_14;
  }
LABEL_19:
  boost::asio::detail::socket_holder::reset((boost::system::detail *)(a1 + 64));
  *(_DWORD *)(a1 + 64) = v8;
  return v13;
}

uint64_t boost::asio::detail::socket_ops::accept(boost::system::detail *a1, sockaddr *a2, _QWORD *a3, _QWORD *a4)
{
  int v7;
  uint64_t v8;
  uint64_t *v9;
  boost::system::detail *v10;
  int v11;
  uint64_t *v12;
  int v13;
  boost::system::detail *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  int v19;
  socklen_t v20;

  if ((_DWORD)a1 == -1)
  {
    v9 = boost::system::detail::system_category_ncx(a1);
    *a4 = 9;
    a4[1] = v9;
    return 0xFFFFFFFFLL;
  }
  v7 = (int)a1;
  *__error() = 0;
  if (a3)
  {
    v20 = *a3;
    v8 = accept(v7, a2, &v20);
    *a3 = v20;
  }
  else
  {
    v8 = accept(v7, a2, 0);
  }
  v10 = (boost::system::detail *)__error();
  v11 = *(_DWORD *)v10;
  v12 = boost::system::detail::system_category_ncx(v10);
  *(_DWORD *)a4 = v11;
  a4[1] = v12;
  if ((_DWORD)v8 != -1)
  {
    v19 = 1;
    v13 = setsockopt(v8, 0xFFFF, 4130, &v19, 4u);
    v14 = (boost::system::detail *)__error();
    v15 = *(_DWORD *)v14;
    v16 = boost::system::detail::system_category_ncx(v14);
    *(_DWORD *)a4 = v15;
    a4[1] = v16;
    if (!v13)
    {
      v17 = boost::system::detail::system_category_ncx((boost::system::detail *)v16);
      *(_DWORD *)a4 = 0;
      a4[1] = v17;
      return v8;
    }
    close(v8);
    return 0xFFFFFFFFLL;
  }
  return v8;
}

boost::system::detail *boost::asio::detail::socket_holder::reset(boost::system::detail *this)
{
  boost::system::detail *v1;
  char v2;
  int v3;
  uint64_t *v4;

  if (*(_DWORD *)this != -1)
  {
    v1 = this;
    v3 = 0;
    v4 = boost::system::detail::system_category_ncx(this);
    v2 = 0;
    this = (boost::system::detail *)boost::asio::detail::socket_ops::close((uint64_t *)*(unsigned int *)v1, &v2, 1, (uint64_t)&v3);
    *(_DWORD *)v1 = -1;
  }
  return this;
}

void boost::asio::detail::reactive_socket_service_base::start_op(uint64_t *a1, uint64_t a2, int a3, _QWORD *a4, int a5, int a6, char a7)
{
  int v13;
  int v14;
  boost::system::detail *v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;

  if ((a7 & 1) != 0)
    goto LABEL_2;
  if ((*(_BYTE *)(a2 + 4) & 3) == 0)
  {
    v13 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == -1)
    {
      v19 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
      a4[3] = 9;
      a4[4] = v19;
    }
    else
    {
      *__error() = 0;
      v20 = 1;
      v14 = ioctl(v13, 0x8004667EuLL, &v20);
      v15 = (boost::system::detail *)__error();
      v16 = *(_DWORD *)v15;
      v17 = boost::system::detail::system_category_ncx(v15);
      *((_DWORD *)a4 + 6) = v16;
      a4[4] = v17;
      if ((v14 & 0x80000000) == 0)
      {
        v18 = boost::system::detail::system_category_ncx((boost::system::detail *)v17);
        *((_DWORD *)a4 + 6) = 0;
        a4[4] = v18;
        *(_BYTE *)(a2 + 4) |= 2u;
        goto LABEL_4;
      }
    }
LABEL_2:
    boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(a1[1] + 40), a4, a5);
    return;
  }
LABEL_4:
  boost::asio::detail::kqueue_reactor::start_op(a1[1], a3, *(_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t)a4, a5, a6);
}

void boost::asio::detail::kqueue_reactor::start_op(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v10;
  char v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  boost::system::detail *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  kevent changelist;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  if (!*a4)
  {
    v16 = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
    *(_QWORD *)(a5 + 24) = 9;
    *(_QWORD *)(a5 + 32) = v16;
    boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(a1 + 40), (_QWORD *)a5, a6);
    return;
  }
  v27 = v10 + 16;
  v15 = *(_BYTE *)(v10 + 88);
  if (v15)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v10 + 24));
    v10 = *a4;
    v15 = 1;
  }
  v28 = v15;
  if (*(_BYTE *)(v10 + 152))
    goto LABEL_5;
  if (*(_QWORD *)(v10 + 16 * a2 + 104))
  {
LABEL_20:
    v19 = v10 + 16 * a2;
    v20 = (_QWORD *)(v19 + 104);
    *(_QWORD *)a5 = 0;
    if (*(_QWORD *)(v19 + 112))
      v20 = *(_QWORD **)(v19 + 112);
    *v20 = a5;
    *(_QWORD *)(v19 + 112) = a5;
    v21 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 232);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    goto LABEL_24;
  }
  if (!a7 || !a2 && *(_QWORD *)(v10 + 136))
  {
    v17 = *(_DWORD *)(v10 + 100);
    v18 = boost::asio::detail::kqueue_reactor::start_op(int,int,boost::asio::detail::kqueue_reactor::descriptor_state *&,boost::asio::detail::reactor_op *,BOOL,BOOL)::num_kevents[a2];
    if (v17 < v18)
    {
      *(_DWORD *)(v10 + 100) = v18;
      v17 = v18;
    }
    changelist.ident = a3;
    *(_QWORD *)&changelist.filter = 2228223;
    changelist.data = 0;
    changelist.udata = (void *)v10;
    v30 = a3;
    v31 = 2228222;
    v32 = 0;
    v33 = v10;
    kevent(*(_DWORD *)(a1 + 128), &changelist, v17, 0, 0, 0);
    v10 = *a4;
    goto LABEL_20;
  }
  if (!(*(unsigned int (**)(uint64_t))(a5 + 48))(a5))
  {
    v10 = *a4;
    v23 = boost::asio::detail::kqueue_reactor::start_op(int,int,boost::asio::detail::kqueue_reactor::descriptor_state *&,boost::asio::detail::reactor_op *,BOOL,BOOL)::num_kevents[a2];
    if (*(_DWORD *)(*a4 + 100) < v23)
    {
      changelist.ident = a3;
      *(_QWORD *)&changelist.filter = 2228223;
      changelist.data = 0;
      changelist.udata = (void *)v10;
      v30 = a3;
      v31 = 2228222;
      v32 = 0;
      v33 = v10;
      if (kevent(*(_DWORD *)(a1 + 128), &changelist, v23, 0, 0, 0) == -1)
      {
        v24 = (boost::system::detail *)__error();
        v25 = *(_DWORD *)v24;
        v26 = boost::system::detail::system_category_ncx(v24);
        *(_DWORD *)(a5 + 24) = v25;
        *(_QWORD *)(a5 + 32) = v26;
        boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(a1 + 40), (_QWORD *)a5, a6);
        goto LABEL_24;
      }
      v10 = *a4;
      *(_DWORD *)(*a4 + 100) = v23;
    }
    goto LABEL_20;
  }
  if (v28)
  {
    if (*(_BYTE *)(v27 + 72))
      pthread_mutex_unlock((pthread_mutex_t *)(v27 + 8));
    v28 = 0;
  }
LABEL_5:
  boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(a1 + 40), (_QWORD *)a5, a6);
LABEL_24:
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v27);
}

void sub_21861BB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::scheduler::post_immediate_completion(uint64_t a1, _QWORD *a2, int a3)
{
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char __buf;

  if (*(_BYTE *)(a1 + 40))
    v5 = 0;
  else
    v5 = a3 == 0;
  if (v5
    || (v6 = boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::contains(a1)) == 0)
  {
    v8 = (unint64_t *)(a1 + 232);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v14 = a1 + 48;
    if (*(_BYTE *)(a1 + 120))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
      v10 = *(_BYTE *)(a1 + 120) == 0;
      v11 = 1;
    }
    else
    {
      v11 = 0;
      v10 = 1;
    }
    v15 = v11;
    v12 = (_QWORD *)(a1 + 240);
    *a2 = 0;
    if (*(_QWORD *)(a1 + 248))
      v12 = *(_QWORD **)(a1 + 248);
    *v12 = a2;
    *(_QWORD *)(a1 + 248) = a2;
    if (v10
      || !boost::asio::detail::posix_event::maybe_unlock_and_signal_one<boost::asio::detail::conditionally_enabled_mutex::scoped_lock>((pthread_cond_t *)(a1 + 136), &v14))
    {
      if (!*(_BYTE *)(a1 + 224))
      {
        v13 = *(_QWORD *)(a1 + 192);
        if (v13)
        {
          *(_BYTE *)(a1 + 224) = 1;
          __buf = 0;
          write(*(_DWORD *)(v13 + 136), &__buf, 1uLL);
        }
      }
      if (v15)
      {
        if (*(_BYTE *)(v14 + 72))
          pthread_mutex_unlock((pthread_mutex_t *)(v14 + 8));
        v15 = 0;
      }
    }
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v14);
  }
  else
  {
    ++v6[4];
    v7 = v6 + 2;
    *a2 = 0;
    if (v6[3])
      v7 = (_QWORD *)v6[3];
    *v7 = a2;
    v6[3] = a2;
  }
}

void sub_21861BCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<session,std::allocator<session>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,void>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x130uLL);
  std::__shared_ptr_emplace<session>::__shared_ptr_emplace[abi:ne180100]<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,std::allocator<session>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 3, (uint64_t)(v8 + 3));
}

void sub_21861BD30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<session>::__shared_ptr_emplace[abi:ne180100]<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&,std::allocator<session>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D94D1A8;
  a1[1] = 0;
  std::allocator<session>::construct[abi:ne180100]<session,boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21861BD98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<session>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94D1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<session>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D94D1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<session>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<session>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t std::allocator<session>::construct[abi:ne180100]<session,boost::asio::basic_stream_socket<boost::asio::ip::tcp>,std::unordered_map<std::string,turi::visualization::Plot> const&,std::vector<turi::visualization::WebServer::table> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;

  v6 = *a3;
  v7 = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = -1;
  v8 = *((_BYTE *)a3 + 12);
  *((_BYTE *)a3 + 12) = 0;
  v9 = a3[2];
  a3[2] = 0;
  v10 = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 2;
  session::session(a2, (uint64_t)&v6, a4, a5);
  return boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object((uint64_t)&v6);
}

void sub_21861BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t session::session(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 40) = 2;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = -1;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a2 + 12) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 2;
  v8 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 24);
  boost::asio::strand<boost::asio::io_context::executor_type>::strand((uint64_t **)(a1 + 48), &v8);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = a1 + 128;
  *(_OWORD *)(a1 + 112) = xmmword_2187009A0;
  *(_QWORD *)(a1 + 160) = a1 + 160;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 11;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = a1;
  *(_QWORD *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 272) = a4;
  return a1;
}

void sub_21861BF9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

uint64_t boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::~message(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  return boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields(a1);
}

uint64_t **boost::asio::strand<boost::asio::io_context::executor_type>::strand(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v8[2];

  v3 = *a2;
  *a1 = *a2;
  v4 = a1 + 1;
  v5 = *v3;
  v8[1] = 0;
  v6 = (pthread_mutex_t *)boost::asio::detail::service_registry::do_use_service(v5, v8, boost::asio::detail::service_registry::create<boost::asio::detail::strand_executor_service,boost::asio::io_context>, (uint64_t)v3);
  boost::asio::detail::strand_executor_service::create_implementation(v6, v4);
  return a1;
}

uint64_t boost::asio::detail::strand_executor_service::create_implementation@<X0>(pthread_mutex_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t **v6;
  char *v7;
  pthread_mutex_t *v8;
  pthread_mutex_t **v9;
  pthread_mutex_t *v10;
  pthread_mutex_t *v11;
  boost::system::detail *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v17;
  char *v18;
  char v19;
  std::runtime_error v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = operator new();
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  std::shared_ptr<boost::asio::detail::strand_executor_service::strand_impl>::shared_ptr[abi:ne180100]<boost::asio::detail::strand_executor_service::strand_impl,void>(a2, v4);
  *(_WORD *)(*a2 + 8) = 0;
  v18 = &this->__opaque[32];
  pthread_mutex_lock((pthread_mutex_t *)&this->__opaque[32]);
  v19 = 1;
  v5 = *(_QWORD *)&this[25].__opaque[40];
  *(_QWORD *)&this[25].__opaque[40] = v5 + 1;
  v6 = (pthread_mutex_t **)*a2;
  v7 = (char *)(&this->__sig
              + ((unint64_t)(v5 + ((*a2 + (*a2 >> 3)) << 6) + ((*a2 + (*a2 >> 3)) >> 2) + 2654435769) ^ (*a2 + (*a2 >> 3)))
              % 0xC1);
  v10 = (pthread_mutex_t *)*((_QWORD *)v7 + 13);
  v9 = (pthread_mutex_t **)(v7 + 104);
  v8 = v10;
  if (!v10)
  {
    v11 = (pthread_mutex_t *)operator new();
    v12 = (boost::system::detail *)pthread_mutex_init(v11, 0);
    v13 = v12;
    v14 = boost::system::detail::system_category_ncx(v12);
    if (v13)
    {
      v17 = v14;
      std::runtime_error::runtime_error(&v20, "mutex");
      v20.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
      v21 = v13;
      v22 = v17;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      boost::throw_exception<boost::system::system_error>((uint64_t)&v20);
    }
    boost::asio::detail::scoped_ptr<boost::asio::detail::posix_mutex>::reset(v9, v11);
    v8 = *v9;
    v6 = (pthread_mutex_t **)*a2;
  }
  *v6 = v8;
  v15 = *(_QWORD *)&this[25].__opaque[48];
  v6[6] = (pthread_mutex_t *)v15;
  v6[7] = 0;
  if (v15)
    *(_QWORD *)(v15 + 56) = v6;
  *(_QWORD *)&this[25].__opaque[48] = v6;
  v6[8] = this;
  return boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&v18);
}

void sub_21861C1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::runtime_error a12)
{
  uint64_t v12;
  uint64_t v13;

  boost::system::system_error::~system_error(&a12);
  MEMORY[0x219A19A08](v13, 0x1000C40FA0F61DDLL);
  boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&a10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t boost::asio::detail::service_registry::create<boost::asio::detail::strand_executor_service,boost::asio::io_context>(uint64_t a1)
{
  uint64_t v2;
  boost::system::detail *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v7;
  std::runtime_error v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = &unk_24D94D208;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = (boost::system::detail *)pthread_mutex_init((pthread_mutex_t *)(v2 + 40), 0);
  v4 = v3;
  v5 = boost::system::detail::system_category_ncx(v3);
  if (v4)
  {
    v7 = v5;
    std::runtime_error::runtime_error(&v8, "mutex");
    v8.__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
    v9 = v4;
    v10 = v7;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    boost::throw_exception<boost::system::system_error>((uint64_t)&v8);
  }
  bzero((void *)(v2 + 104), 0x618uLL);
  return v2;
}

void sub_21861C2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  uint64_t v10;

  boost::system::system_error::~system_error(&a10);
  MEMORY[0x219A19A08](v10, 0x10E1C4065D9B2D2);
  _Unwind_Resume(a1);
}

void boost::asio::detail::strand_executor_service::~strand_executor_service(boost::asio::detail::strand_executor_service *this)
{
  uint64_t i;

  *(_QWORD *)this = &unk_24D94D208;
  for (i = 1640; i != 96; i -= 8)
    boost::asio::detail::scoped_ptr<boost::asio::detail::posix_mutex>::~scoped_ptr((pthread_mutex_t **)((char *)this + i));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
}

{
  uint64_t i;

  *(_QWORD *)this = &unk_24D94D208;
  for (i = 1640; i != 96; i -= 8)
    boost::asio::detail::scoped_ptr<boost::asio::detail::posix_mutex>::~scoped_ptr((pthread_mutex_t **)((char *)this + i));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
  JUMPOUT(0x219A19A08);
}

boost::system::detail *boost::asio::detail::strand_executor_service::shutdown(boost::asio::detail::strand_executor_service *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v8 = (char *)this + 40;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  v9 = 1;
  for (i = *((_QWORD *)this + 207); i; i = *(_QWORD *)(i + 48))
  {
    pthread_mutex_lock(*(pthread_mutex_t **)i);
    v3 = *(_QWORD *)(i + 16);
    *(_BYTE *)(i + 9) = 1;
    if (v3)
    {
      v4 = v11;
      if (!v11)
        v4 = &v10;
      *v4 = v3;
      v11 = *(uint64_t **)(i + 24);
      *(_QWORD *)(i + 16) = 0;
      *(_QWORD *)(i + 24) = 0;
    }
    v5 = *(_QWORD *)(i + 32);
    if (v5)
    {
      v6 = v11;
      if (!v11)
        v6 = &v10;
      *v6 = v5;
      v11 = *(uint64_t **)(i + 40);
      *(_QWORD *)(i + 32) = 0;
      *(_QWORD *)(i + 40) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)i);
  }
  boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&v8);
  return boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)&v10);
}

void sub_21861C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)va);
  _Unwind_Resume(a1);
}

pthread_mutex_t **boost::asio::detail::scoped_ptr<boost::asio::detail::posix_mutex>::~scoped_ptr(pthread_mutex_t **a1)
{
  pthread_mutex_t *v2;

  v2 = *a1;
  if (*a1)
  {
    pthread_mutex_destroy(*a1);
    MEMORY[0x219A19A08](v2, 0x1000C40FA0F61DDLL);
  }
  return a1;
}

pthread_mutex_t **boost::asio::detail::scoped_ptr<boost::asio::detail::posix_mutex>::reset(pthread_mutex_t **result, pthread_mutex_t *a2)
{
  pthread_mutex_t **v3;
  pthread_mutex_t *v4;

  v3 = result;
  v4 = *result;
  if (*result)
  {
    pthread_mutex_destroy(*result);
    result = (pthread_mutex_t **)MEMORY[0x219A19A08](v4, 0x1000C40FA0F61DDLL);
  }
  *v3 = a2;
  return result;
}

_QWORD *std::shared_ptr<boost::asio::detail::strand_executor_service::strand_impl>::shared_ptr[abi:ne180100]<boost::asio::detail::strand_executor_service::strand_impl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D94D268;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21861C5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  if (v10)
    std::default_delete<boost::asio::detail::strand_executor_service::strand_impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<boost::asio::detail::strand_executor_service::strand_impl *,std::shared_ptr<boost::asio::detail::strand_executor_service::strand_impl>::__shared_ptr_default_delete<boost::asio::detail::strand_executor_service::strand_impl,boost::asio::detail::strand_executor_service::strand_impl>,std::allocator<boost::asio::detail::strand_executor_service::strand_impl>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<boost::asio::detail::strand_executor_service::strand_impl>::operator()[abi:ne180100](a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<boost::asio::detail::strand_executor_service::strand_impl *,std::shared_ptr<boost::asio::detail::strand_executor_service::strand_impl>::__shared_ptr_default_delete<boost::asio::detail::strand_executor_service::strand_impl,boost::asio::detail::strand_executor_service::strand_impl>,std::allocator<boost::asio::detail::strand_executor_service::strand_impl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<boost::asio::detail::strand_executor_service::strand_impl>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  pthread_mutex_t *v7;
  char v8;

  if (a2)
  {
    v7 = (pthread_mutex_t *)(a2[8] + 40);
    pthread_mutex_lock(v7);
    v8 = 1;
    v3 = a2[8];
    if (*(_QWORD **)(v3 + 1656) == a2)
      *(_QWORD *)(v3 + 1656) = a2[6];
    v4 = a2[7];
    if (v4)
      *(_QWORD *)(v4 + 48) = a2[6];
    v5 = a2[6];
    if (v5)
      *(_QWORD *)(v5 + 56) = v4;
    boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock((uint64_t)&v7);
    boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)(a2 + 4));
    boost::asio::detail::op_queue<boost::asio::detail::scheduler_operation>::~op_queue((boost::system::detail *)(a2 + 2));
    return MEMORY[0x219A19A08](a2, 0x1020C4024154ADFLL);
  }
  return result;
}

uint64_t boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(a1 + 40);
  if (v2 != v3)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v4;
    }
    while (v4 != v3);
  }
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(a1, a1 + 56, 0, 0);
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(a1, a1 + 72, 0, 0);
  return a1;
}

void boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(int a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v4;
  void *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;

  v9 = a3;
  v10 = __sz;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 | __sz)
  {
    if (__sz)
    {
      v7 = operator new(__sz);
      boost::basic_string_view<char,std::char_traits<char>>::copy(&v9, v7, __sz, 0);
      if (!*(_QWORD *)(a2 + 8))
        goto LABEL_5;
    }
    else
    {
      v7 = 0;
      if (!v4)
      {
LABEL_5:
        if (v7)
        {
          v8 = v10;
          *(_QWORD *)a2 = v7;
          *(_QWORD *)(a2 + 8) = v8;
        }
        else
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
        }
        return;
      }
    }
    operator delete(*(void **)a2);
    goto LABEL_5;
  }
}

size_t boost::basic_string_view<char,std::char_traits<char>>::copy(_QWORD *a1, void *__dst, size_t a3, unint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  size_t v6;
  size_t v7;
  std::logic_error v9;

  v4 = a1[1];
  v5 = v4 >= a4;
  v6 = v4 - a4;
  if (!v5)
  {
    std::logic_error::logic_error(&v9, "string_view::copy");
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    boost::exception_detail::throw_exception_<std::out_of_range>(&v9, (uint64_t)"size_type boost::basic_string_view<char>::copy(charT *, size_type, size_type) const [charT = char, traits = std::char_traits<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/utility/string_view.hpp", 184);
  }
  if (v6 >= a3)
    v7 = a3;
  else
    v7 = v6;
  if (v7)
    memmove(__dst, (const void *)(*a1 + a4), v7);
  return v7;
}

void sub_21861C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void std::allocator<session>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 240);
  if (*(char *)(a2 + 239) < 0)
    operator delete(*(void **)(a2 + 216));
  boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields(a2 + 120);
  v3 = *(void **)(a2 + 72);
  if (v3)
    operator delete(v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2 + 56);
  boost::asio::basic_io_object<boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>,true>::~basic_io_object(a2 + 16);
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void session::do_read(session *this)
{
  char *v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  _OWORD v29[3];
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  v26 = 0;
  *((_QWORD *)&v28 + 1) = 0;
  v27 = (std::__shared_weak_count *)&v26;
  *(_QWORD *)&v28 = &v26;
  v25 = 0;
  *(_QWORD *)&v29[0] = v29;
  *((_QWORD *)&v29[0] + 1) = v29;
  memset(&v29[1], 0, 32);
  v31 = 0uLL;
  v32 = 0;
  v2 = (char *)this + 120;
  v30 = 11;
  v33 = 0;
  boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator=((uint64_t)this + 120, (uint64_t)&v25);
  if (SHIBYTE(v33) < 0)
    operator delete(*(void **)((char *)&v31 + 4));
  boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields((uint64_t)&v25);
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v20, this);
  v21 = session::on_read;
  v22 = 0;
  v3 = v20;
  v20 = 0uLL;
  v4 = *((_QWORD *)this + 7);
  v25 = *((_QWORD *)this + 6);
  v26 = v4;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  v27 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v28 = (unint64_t)session::on_read;
  v29[0] = v3;
  v23 = 0;
  v24 = 0;
  boost::beast::http::async_read<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>((uint64_t)this + 16, (uint64_t)this + 72, (uint64_t)v2, &v25);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v29[0] + 1);
  if (*((_QWORD *)&v29[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v29[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v27;
  if (v27)
  {
    v12 = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_21861CAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;

  boost::beast::http::basic_fields<std::allocator<char>>::operator=(a1, a2);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 119) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  return a1;
}

void **boost::beast::http::async_read<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  boost::system::detail *v4;
  uint64_t *v5;
  int v7;
  void *v8[9];

  v8[8] = *(void **)MEMORY[0x24BDAC8D0];
  v7 = 0;
  v4 = (boost::system::detail *)boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr<boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &>(v8, a4, a1, a2, a3);
  v5 = boost::system::detail::system_category_ncx(v4);
  boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::operator()(&v7, 0, (uint64_t)v5, 0, 0);
  return boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(v8);
}

void sub_21861CC24(_Unwind_Exception *a1)
{
  void **v1;

  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(v1);
  _Unwind_Resume(a1);
}

void session::on_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  boost::system::detail *v6;
  uint64_t v8;
  uint64_t *v9;

  v6 = (boost::system::detail *)boost::system::error_code::operator=<boost::beast::http::error>(&v8, 1u);
  if (v9 == (uint64_t *)a3 && (_DWORD)v8 == (_DWORD)a2)
  {
    LODWORD(v8) = 0;
    v9 = boost::system::detail::system_category_ncx(v6);
    boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::shutdown(*(boost::system::detail **)(a1 + 16), (int *)(a1 + 24), 1, &v8);
  }
  else if ((_DWORD)a2)
  {
    fail(a2, a3, "read");
  }
  else
  {
    handle_request<boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,session::send_lambda &>(a1 + 120, (_QWORD **)(a1 + 256), *(_QWORD **)(a1 + 264), *(_QWORD **)(a1 + 272));
  }
}

uint64_t boost::beast::http::basic_fields<std::allocator<char>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    boost::beast::http::basic_fields<std::allocator<char>>::clear_all(a1);
    v6 = (uint64_t *)(a2 + 8);
    v7 = (uint64_t *)(a1 + 8);
    boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::swap_tree(&v7, &v6);
    v4 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v4;
    v6 = (uint64_t *)(a2 + 40);
    v7 = (uint64_t *)(a1 + 40);
    boost::intrusive::circular_list_algorithms<boost::intrusive::list_node_traits<void *>>::swap_nodes(&v7, &v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
  }
  return a1;
}

void boost::beast::http::basic_fields<std::allocator<char>>::clear_all(uint64_t a1)
{
  boost::beast::http::basic_fields<std::allocator<char>>::clear(a1);
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(a1, a1 + 56, 0, 0);
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(a1, a1 + 72, 0, 0);
}

_QWORD *boost::beast::http::basic_fields<std::allocator<char>>::clear(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 40);
  if (result != v3)
  {
    do
    {
      v4 = (_QWORD *)*result;
      operator delete(result);
      result = v4;
    }
    while (v4 != v3);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = a1 + 8;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = v3;
  return result;
}

uint64_t **boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::swap_tree(uint64_t **result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  _QWORD *v9;

  v2 = *result;
  if (*result != *a2)
  {
    v3 = *v2;
    *v2 = **a2;
    **a2 = v3;
    v4 = (*result)[1];
    (*result)[1] = (*a2)[1];
    (*a2)[1] = v4;
    v5 = (*result)[2];
    (*result)[2] = (*a2)[2];
    (*a2)[2] = v5;
    v6 = *result;
    v7 = (uint64_t **)**result;
    if (v7)
    {
      *v7 = v6;
    }
    else
    {
      v6[1] = (uint64_t)v6;
      (*result)[2] = (uint64_t)*result;
    }
    v8 = *a2;
    v9 = (_QWORD *)**a2;
    if (v9)
    {
      *v9 = v8;
    }
    else
    {
      v8[1] = (uint64_t)v8;
      (*a2)[2] = (uint64_t)*a2;
    }
  }
  return result;
}

uint64_t **boost::intrusive::circular_list_algorithms<boost::intrusive::list_node_traits<void *>>::swap_nodes(uint64_t **result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *result;
  if (*a2 == *result)
    return result;
  v4 = *v3;
  v5 = *v2;
  if (!*v3)
  {
    *v3 = (uint64_t)v3;
    (*result)[1] = (uint64_t)*result;
    v2 = *a2;
    if (v5)
      goto LABEL_4;
LABEL_8:
    *v2 = (uint64_t)v2;
    (*a2)[1] = (uint64_t)*a2;
    v2 = *a2;
    goto LABEL_4;
  }
  if (!v5)
    goto LABEL_8;
LABEL_4:
  v7 = **result;
  v6 = (uint64_t *)(*result)[1];
  v9 = *v2;
  v8 = (uint64_t *)v2[1];
  v10 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v9 + 8) = v10;
  v11 = *v6;
  *v6 = *v8;
  *v8 = v11;
  v12 = **result;
  **result = **a2;
  **a2 = v12;
  v13 = (*result)[1];
  (*result)[1] = (*a2)[1];
  (*a2)[1] = v13;
  if (v4)
  {
    if (v5)
      return result;
LABEL_10:
    **result = 0;
    (*result)[1] = 0;
    return result;
  }
  **a2 = 0;
  (*a2)[1] = 0;
  if (!v5)
    goto LABEL_10;
  return result;
}

_BYTE *boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::operator()(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _DWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v5 = result;
  v14[0] = a2;
  v14[1] = a3;
  v6 = (void **)(result + 8);
  v7 = *((_QWORD *)result + 1);
  *(_BYTE *)(v7 + 304) = a5;
  if (*(_DWORD *)result != 433)
  {
    if (!*(_DWORD *)result)
      goto LABEL_3;
LABEL_12:
    *v5 = -1;
    return result;
  }
  if ((_DWORD)a2)
  {
LABEL_11:
    v13 = *(_QWORD *)(v7 + 296);
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_BYTE *)(v7 + 16);
    *(_BYTE *)(v7 + 16) = 0;
    boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::invoke<boost::system::error_code&,unsigned long &>(v6, v14, &v13);
    result = boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v8);
    goto LABEL_12;
  }
  *(_QWORD *)(v7 + 296) += a4;
  if (*(_DWORD *)(v7 + 88) == 10)
  {
    boost::beast::http::basic_fields<std::allocator<char>>::basic_fields(&v8, (uint64_t *)(v7 + 96));
    v10 = *(_QWORD *)(v7 + 184);
    *(_OWORD *)__p = *(_OWORD *)(v7 + 192);
    v12 = *(_QWORD *)(v7 + 208);
    *(_QWORD *)(v7 + 192) = 0;
    *(_QWORD *)(v7 + 200) = 0;
    *(_QWORD *)(v7 + 208) = 0;
    boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>>::operator=(*(_QWORD *)(v7 + 32), (uint64_t)&v8);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields((uint64_t)&v8);
    goto LABEL_11;
  }
LABEL_3:
  *(_DWORD *)result = 433;
  do
    result = boost::beast::http::async_read_some<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>(*(_QWORD *)v7, *(_QWORD *)(v7 + 24), v7 + 40, (uint64_t)v5);
  while (!*v5);
  return result;
}

void sub_21861D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _DWORD *v9;

  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&a9);
  *v9 = -1;
  _Unwind_Resume(a1);
}

_QWORD *boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr<boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v12[3];
  char v13;
  char v14;

  *a1 = 0;
  v13 = 0;
  v12[0] = operator new(0x138uLL);
  v12[1] = &v14;
  v12[2] = &v13;
  boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data::data((uint64_t)v12[0], (uint64_t)a2, a3, a4, a5);
  v13 = 1;
  boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>::executor_binder((uint64_t)(a1 + 1), a2);
  v10 = v12[0];
  v12[0] = 0;
  *a1 = v10;
  std::unique_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr<boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &>(boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>> &&,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &)::{lambda(boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data*)#1}>::reset[abi:ne180100](v12, 0);
  return a1;
}

void sub_21861D190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  std::unique_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr<boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &>(boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>> &&,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &)::{lambda(boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data*)#1}>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data::data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 1;
  v7 = (unint64_t *)(*(_QWORD *)(v6 + 8) + 232);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  _ZN5boost5beast4http6parserILb1ENS1_17basic_string_bodyIcNSt3__111char_traitsIcEENS4_9allocatorIcEEEES8_EC2INS1_7messageILb1ES9_NS1_12basic_fieldsIS8_EEEEJEvEEOT_DpOT0_(a1 + 40, a5);
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 92) |= 2u;
  return a1;
}

void sub_21861D220(_Unwind_Exception *a1)
{
  _BYTE *v1;

  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN5boost5beast4http6parserILb1ENS1_17basic_string_bodyIcNSt3__111char_traitsIcEENS4_9allocatorIcEEEES8_EC2INS1_7messageILb1ES9_NS1_12basic_fieldsIS8_EEEEJEvEEOT_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;

  *(_QWORD *)a1 = 0x100000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0x2000;
  *(_WORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = boost::beast::http::basic_fields<std::allocator<char>>::basic_fields((uint64_t *)(a1 + 56), (uint64_t *)a2);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 152;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  boost::beast::http::basic_fields<std::allocator<char>>::clear((uint64_t)v4);
  return a1;
}

void sub_21861D2D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v6 = *(_QWORD **)(v1 + 248);
  if (v6 == (_QWORD *)(v1 + 224))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 224);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  _ZN5boost5beast4http6parserILb1ENS1_17basic_string_bodyIcNSt3__111char_traitsIcEENS4_9allocatorIcEEEES8_EC2INS1_7messageILb1ES9_NS1_12basic_fieldsIS8_EEEEJEvEEOT_DpOT0__cold_1(v3, v4, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::beast::http::basic_fields<std::allocator<char>>::basic_fields(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t *v8;
  uint64_t *v9;

  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  a1[2] = (uint64_t)(a1 + 1);
  a1[3] = (uint64_t)(a1 + 1);
  *a1 = 0;
  v8 = a2 + 1;
  v9 = a1 + 1;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::swap_tree(&v9, &v8);
  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  a1[5] = (uint64_t)(a1 + 5);
  a1[6] = (uint64_t)(a1 + 5);
  v8 = a2 + 5;
  v9 = a1 + 5;
  boost::intrusive::circular_list_algorithms<boost::intrusive::list_node_traits<void *>>::swap_nodes(&v9, &v8);
  v5 = *(_OWORD *)(a2 + 7);
  a2[7] = 0;
  a2[8] = 0;
  *(_OWORD *)(a1 + 7) = v5;
  v6 = *(_OWORD *)(a2 + 9);
  a2[9] = 0;
  a2[10] = 0;
  *(_OWORD *)(a1 + 9) = v6;
  return a1;
}

uint64_t boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::~parser(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)(a1 + 224);
  v3 = *(_QWORD **)(a1 + 248);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 216);
  if (v5 == (_QWORD *)(a1 + 192))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 192);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  boost::beast::http::basic_fields<std::allocator<char>>::~basic_fields(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    MEMORY[0x219A199F0](v7, 0x1000C8077774924);
  return a1;
}

_BYTE *boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(_BYTE *a1)
{
  if (a1[8])
    boost::asio::detail::scheduler::work_finished(*(boost::asio::detail::scheduler **)(*(_QWORD *)a1 + 8));
  return a1;
}

void boost::asio::detail::scheduler::work_finished(boost::asio::detail::scheduler *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char v8;
  char __buf;

  v2 = (unint64_t *)((char *)this + 232);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v7 = (char *)this + 48;
    if (*((_BYTE *)this + 120))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
      v5 = *((unsigned __int8 *)this + 120);
      v8 = 1;
      *((_BYTE *)this + 256) = 1;
      if (v5)
      {
        *((_QWORD *)this + 23) |= 1uLL;
        pthread_cond_broadcast((pthread_cond_t *)((char *)this + 136));
      }
    }
    else
    {
      v8 = 0;
      *((_BYTE *)this + 256) = 1;
    }
    if (!*((_BYTE *)this + 224))
    {
      v6 = *((_QWORD *)this + 24);
      if (v6)
      {
        *((_BYTE *)this + 224) = 1;
        __buf = 0;
        write(*(_DWORD *)(v6 + 136), &__buf, 1uLL);
      }
    }
    boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)&v7);
  }
}

void sub_21861D57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::conditionally_enabled_mutex::scoped_lock::~scoped_lock((boost::asio::detail::conditionally_enabled_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

__n128 boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>::executor_binder(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  result = *(__n128 *)(a2 + 5);
  *(__n128 *)(a1 + 40) = result;
  a2[5] = 0;
  a2[6] = 0;
  return result;
}

void std::unique_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr<boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &>(boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>> &&,boost::asio::basic_stream_socket<boost::asio::ip::tcp>&,boost::beast::basic_flat_buffer<std::allocator<char>>&,boost::beast::http::message<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,boost::beast::http::basic_fields<std::allocator<char>>> &)::{lambda(boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data*)#1}>::reset[abi:ne180100](_BYTE **a1, _BYTE *a2)
{
  _BYTE *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*a1[2])
    {
      boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::~parser((uint64_t)(v2 + 40));
      boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v2 + 8);
    }
    operator delete(v2);
  }
}

_BYTE *boost::beast::http::async_read_some<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  boost::system::detail *v4;
  uint64_t *v5;
  _BYTE v7[16];
  _BYTE v8[48];
  void *v9[10];

  v9[9] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = (boost::system::detail *)boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>((uint64_t)v7, a4, a1, a2, a3);
  v5 = boost::system::detail::system_category_ncx(v4);
  boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::operator()((uint64_t)v7, 0, (uint64_t)v5, 0, 0);
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(v9);
  return boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v8);
}

void sub_21861D6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr((void **)va1);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::invoke<boost::system::error_code&,unsigned long &>(void **a1, _QWORD *a2, _QWORD *a3)
{
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::clear(a1);
  std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>::operator()[abi:ne180100]<boost::system::error_code&,unsigned long &>((uint64_t)(a1 + 4), a2, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
}

void sub_21861D72C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 48);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 16);
  _Unwind_Resume(a1);
}

void boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v6;
  void **v7;
  _BYTE *v8;
  _BYTE *v9;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char **v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE *v25;
  int64_t v26;
  char v27[48];
  void *v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  *(_BYTE *)(a1 + 128) = a5;
  v31 = 0;
  v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 178)
    goto LABEL_28;
  if (v6 == 152)
  {
    boost::system::error_code::operator=<boost::asio::error::misc_errors>(&v25, 2u);
    if (*((_QWORD *)&v24 + 1) == v26 && (_DWORD)v24 == (_DWORD)v25)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if (*(_DWORD *)(v20 + 48))
      {
        LODWORD(v24) = 0;
        boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::put_eof((_QWORD *)v20, &v24);
      }
      else
      {
        boost::system::error_code::operator=<boost::beast::http::error>(&v24, 1u);
      }
      goto LABEL_26;
    }
    if ((_DWORD)v24)
      goto LABEL_26;
    v12 = *(_QWORD **)(a1 + 32);
    v13 = v12[2];
    v8 = (_BYTE *)v12[1];
    v14 = v12[3] - v13;
    if (v14 >= a4)
      v14 = a4;
    v9 = (_BYTE *)(v13 + v14);
    v12[2] = v9;
  }
  else
  {
    if (v6)
    {
LABEL_29:
      *(_DWORD *)a1 = -1;
      return;
    }
    v7 = *(void ***)(a1 + 32);
    v8 = v7[1];
    v9 = v7[2];
    if (v9 == v8)
    {
LABEL_22:
      v21 = boost::beast::read_size_or_throw<boost::beast::basic_flat_buffer<std::allocator<char>>>(v7, 0x10000uLL);
      v32[0] = boost::beast::basic_flat_buffer<std::allocator<char>>::prepare(v7, v21);
      v32[1] = v22;
      v31 = 1;
      *(_DWORD *)a1 = 152;
      do
        boost::asio::detail::reactive_socket_service_base::async_receive<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>((uint64_t *)(**(_QWORD **)(a1 + 8) + 40), *(_QWORD *)(a1 + 8) + 8, (uint64_t)v32, 0, a1);
      while (!*(_DWORD *)a1);
      return;
    }
  }
  v15 = *(_QWORD *)(a1 + 40);
  v25 = v8;
  v26 = v9 - v8;
  v16 = boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::put(v15, (uint64_t)&v25, &v24);
  *(_QWORD *)(a1 + 48) += v16;
  v17 = *(char ***)(a1 + 32);
  v18 = v17[1];
  if (v17[2] - v18 <= (unint64_t)v16)
  {
    v19 = *v17;
    v17[2] = *v17;
  }
  else
  {
    v19 = &v16[(_QWORD)v18];
  }
  v17[1] = v19;
  boost::system::error_code::operator=<boost::beast::http::error>(&v25, 3u);
  if (*((_QWORD *)&v24 + 1) == v26 && (_DWORD)v24 == (_DWORD)v25)
  {
    v7 = *(void ***)(a1 + 32);
    goto LABEL_22;
  }
LABEL_26:
  if (*(_BYTE *)(a1 + 128))
  {
    a3 = *((_QWORD *)&v24 + 1);
    a2 = v24;
LABEL_28:
    boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::operator()(a1 + 56, a2, a3, *(_QWORD *)(a1 + 48), 1);
    goto LABEL_29;
  }
  *(_DWORD *)a1 = 178;
  do
  {
    v23 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
    boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op((uint64_t)&v25, (int *)a1);
    v29 = v24;
    v30 = *(_QWORD *)(a1 + 48);
    boost::asio::post<boost::asio::io_context::executor_type,boost::beast::detail::bound_handler<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code&,unsigned long &>>((uint64_t)&v23, (uint64_t)&v25);
    boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(&v28);
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v27);
  }
  while (!*(_DWORD *)a1);
}

void sub_21861D9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _DWORD *v11;

  *v11 = -1;
  _Unwind_Resume(exception_object);
}

uint64_t boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  v6 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = 1;
  v7 = (unint64_t *)(*(_QWORD *)(v6 + 8) + 232);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)a2;
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr((_QWORD *)(a1 + 64), (_QWORD *)(a2 + 8));
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

void sub_21861DAAC(_Unwind_Exception *a1)
{
  _BYTE *v1;

  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::handler_ptr(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  if (*a2)
  {
    boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>::executor_binder((uint64_t)(a1 + 1), a2 + 1);
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 2));
    *a2 = 0;
  }
  return a1;
}

char *boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::put(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  char *v6;
  unint64_t v7;
  std::string **v8;
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  unsigned int v39;
  char *v41;
  char *v42;
  unint64_t v43;

  v6 = *(char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v41 = v6;
  v7 = (unint64_t)&v6[v5];
  *(_DWORD *)a3 = 0;
  v8 = (std::string **)(a1 + 176);
  v9 = *(_DWORD *)(a1 + 48);
  v10 = v6;
  while (2)
  {
    switch(v9)
    {
      case 0:
        if (v5)
        {
          *(_DWORD *)(a1 + 48) = 1;
          goto LABEL_5;
        }
        boost::system::error_code::operator=<boost::beast::http::error>(a3, 3u);
        return 0;
      case 1:
LABEL_5:
        v11 = *(_QWORD *)(a1 + 32);
        if (!v11)
          goto LABEL_25;
        if (*(unsigned int *)(a1 + 40) >= v5)
          v12 = v5;
        else
          v12 = *(unsigned int *)(a1 + 40);
        if (v12 < v11 + 4)
          goto LABEL_10;
        if (boost::beast::http::detail::basic_parser_base::find_eom((boost::beast::http::detail::basic_parser_base *)&v10[v11], &v10[v12], v10))
        {
          *(_QWORD *)(a1 + 32) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v12 - 3;
          if (v12 < *(unsigned int *)(a1 + 40))
          {
LABEL_10:
            v13 = a3;
            v14 = 3;
          }
          else
          {
            v13 = a3;
            v14 = 8;
          }
          boost::system::error_code::operator=<boost::beast::http::error>(v13, v14);
        }
LABEL_25:
        if (*(_DWORD *)a3)
          return (char *)(v41 - v6);
        v25 = *(unsigned int *)(a1 + 40);
        if (v5 < v25)
          v25 = v5;
        boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_start_line(a1, &v41, (unint64_t)&v41[v25], a3);
        if (*(_DWORD *)a3)
          goto LABEL_81;
        v10 = v41;
        v5 = v7 - (_QWORD)v41;
        if (v7 > (unint64_t)v41)
          goto LABEL_30;
        v38 = a3;
        v39 = 3;
        goto LABEL_88;
      case 2:
LABEL_30:
        v26 = *(_QWORD *)(a1 + 32);
        if (!v26)
          goto LABEL_39;
        if (*(unsigned int *)(a1 + 40) >= v5)
          v27 = v5;
        else
          v27 = *(unsigned int *)(a1 + 40);
        if (v27 < v26 + 4)
          goto LABEL_35;
        if (boost::beast::http::detail::basic_parser_base::find_eom((boost::beast::http::detail::basic_parser_base *)&v10[v26], &v10[v27], v10))
        {
          *(_QWORD *)(a1 + 32) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 32) = v27 - 3;
          if (v27 < *(unsigned int *)(a1 + 40))
          {
LABEL_35:
            v28 = a3;
            v29 = 3;
          }
          else
          {
            v28 = a3;
            v29 = 8;
          }
          boost::system::error_code::operator=<boost::beast::http::error>(v28, v29);
        }
LABEL_39:
        if (*(_DWORD *)a3)
          return (char *)(v41 - v6);
        boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_fields(a1, (uint64_t)&v41);
        if (!*(_DWORD *)a3)
        {
          v30 = *(_DWORD *)(a1 + 52);
          if ((v30 & 1) != 0)
            goto LABEL_71;
          if ((v30 & 0x400) == 0)
          {
            if ((v30 & 0x800) == 0)
            {
              *(_QWORD *)(a1 + 8) = 0;
              goto LABEL_71;
            }
            *(_DWORD *)(a1 + 52) = v30 | 8;
            v37 = 7;
LABEL_72:
            *(_DWORD *)(a1 + 48) = v37;
            *(_DWORD *)a3 = 0;
            goto LABEL_73;
          }
          v31 = *(_QWORD *)(a1 + 8);
          if (v31 <= *(_QWORD *)a1)
          {
            if (v31)
            {
              *(_DWORD *)(a1 + 52) = v30 | 8;
              v37 = 3;
            }
            else
            {
LABEL_71:
              v37 = 10;
            }
            goto LABEL_72;
          }
          boost::system::error_code::operator=<boost::beast::http::error>(a3, 9u);
LABEL_73:
          v10 = v41;
          if ((unint64_t)v41 >= v7)
            return (char *)(v41 - v6);
          v9 = *(_DWORD *)(a1 + 48);
          if (v9 == 10 || (*(_BYTE *)(a1 + 52) & 2) == 0)
            return (char *)(v41 - v6);
          v5 = v7 - (_QWORD)v41;
          continue;
        }
LABEL_81:
        boost::system::error_code::operator=<boost::beast::http::error>(&v42, 3u);
        if (a3[1] == v43 && *(_DWORD *)a3 == (_DWORD)v42)
        {
          if (v5 >= *(unsigned int *)(a1 + 40))
          {
            v38 = a3;
            v39 = 8;
LABEL_88:
            boost::system::error_code::operator=<boost::beast::http::error>(v38, v39);
          }
          else if ((unint64_t)(v41 + 3) <= v7)
          {
            *(_QWORD *)(a1 + 32) = v7 - (_QWORD)v41 - 3;
          }
        }
        return (char *)(v41 - v6);
      case 3:
        v15 = *(unsigned __int8 *)(a1 + 53);
        if ((v15 & 4) != 0)
        {
          v15 = *(_QWORD *)(a1 + 8);
          v16 = 1;
        }
        else
        {
          v16 = 0;
        }
        v42 = (char *)v16;
        v43 = v15;
        boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::init(v8, (uint64_t)&v42, a3);
        *(_BYTE *)(a1 + 184) = 1;
        if (*(_DWORD *)a3)
          return (char *)(v41 - v6);
        *(_DWORD *)(a1 + 48) = 4;
        v10 = v41;
LABEL_50:
        v32 = *(_QWORD *)(a1 + 8);
        if (v32 >= v5)
          v32 = v5;
        v42 = v10;
        v43 = v32;
        v33 = boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::put<boost::asio::const_buffers_1>(v8, (uint64_t)&v42, a3);
        v41 += v33;
        v34 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v34 - v33;
        v35 = *(_DWORD *)a3;
        if (*(_DWORD *)a3 || v34 != v33)
          goto LABEL_66;
        *(_DWORD *)a3 = 0;
        *(_DWORD *)(a1 + 48) = 10;
        goto LABEL_73;
      case 4:
        goto LABEL_50;
      case 5:
        v17 = *(unsigned __int8 *)(a1 + 53);
        if ((v17 & 4) != 0)
        {
          v17 = *(_QWORD *)(a1 + 8);
          v18 = 1;
        }
        else
        {
          v18 = 0;
        }
        v42 = (char *)v18;
        v43 = v17;
        boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::init(v8, (uint64_t)&v42, a3);
        *(_BYTE *)(a1 + 184) = 1;
        if (*(_DWORD *)a3)
          return (char *)(v41 - v6);
        *(_DWORD *)(a1 + 48) = 6;
LABEL_58:
        if (*(_QWORD *)a1 >= v5)
        {
          *(_QWORD *)a1 -= v5;
          v42 = v41;
          v43 = v5;
          v36 = boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::put<boost::asio::const_buffers_1>(v8, (uint64_t)&v42, a3);
          v41 += v36;
        }
        else
        {
          boost::system::error_code::operator=<boost::beast::http::error>(a3, 9u);
        }
        goto LABEL_65;
      case 6:
        goto LABEL_58;
      case 7:
        v19 = *(unsigned __int8 *)(a1 + 53);
        if ((v19 & 4) != 0)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v20 = 1;
        }
        else
        {
          v20 = 0;
        }
        v42 = (char *)v20;
        v43 = v19;
        boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::init(v8, (uint64_t)&v42, a3);
        *(_BYTE *)(a1 + 184) = 1;
        if (*(_DWORD *)a3)
          return (char *)(v41 - v6);
        *(_DWORD *)(a1 + 48) = 8;
LABEL_64:
        boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_chunk_header(a1, (unsigned __int8 **)&v41, v5, a3);
LABEL_65:
        v35 = *(_DWORD *)a3;
LABEL_66:
        if (v35)
          return (char *)(v41 - v6);
        goto LABEL_73;
      case 8:
        goto LABEL_64;
      case 9:
        v21 = *(_QWORD *)(a1 + 8);
        if (v21 >= v5)
          v22 = v5;
        else
          v22 = *(_QWORD *)(a1 + 8);
        v23 = boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_chunk_body_impl(a1, v21, (uint64_t)v10, v22, a3);
        v41 += v23;
        v24 = *(_QWORD *)(a1 + 8) - v23;
        *(_QWORD *)(a1 + 8) = v24;
        if (!v24)
          *(_DWORD *)(a1 + 48) = 8;
        goto LABEL_65;
      case 10:
        *(_DWORD *)a3 = 0;
        return (char *)(v41 - v6);
      default:
        goto LABEL_73;
    }
  }
}

char *boost::beast::basic_flat_buffer<std::allocator<char>>::prepare(void **a1, unint64_t a2)
{
  char *result;
  char *v5;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  std::logic_error v14;

  result = (char *)a1[2];
  v5 = (char *)a1[4];
  if (v5 - result >= a2)
  {
LABEL_15:
    a1[3] = &result[a2];
    return result;
  }
  v6 = (char *)*a1;
  v7 = (char *)a1[1];
  v8 = result - v7;
  if (v5 - (_BYTE *)*a1 - (result - v7) >= a2)
  {
    if (result != v7)
    {
      memmove(*a1, a1[1], v8);
      v6 = (char *)*a1;
    }
    result = &v6[v8];
    a1[1] = v6;
    a1[2] = &v6[v8];
    goto LABEL_15;
  }
  v9 = (unint64_t)a1[5];
  if (v9 - v8 < a2)
  {
    std::logic_error::logic_error(&v14, "basic_flat_buffer overflow");
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v14, (uint64_t)"mutable_buffers_type boost::beast::basic_flat_buffer<std::allocator<char>>::prepare(std::size_t) [Allocator = std::allocator<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/core/impl/flat_buffer.ipp", 261);
  }
  v10 = 2 * v8;
  if (2 * v8 <= v8 + a2)
    v10 = v8 + a2;
  if (v10 >= v9)
    v11 = (size_t)a1[5];
  else
    v11 = v10;
  v12 = (char *)operator new(v11);
  v13 = v12;
  if (v6)
  {
    memcpy(v12, v7, v8);
    operator delete(v6);
  }
  *a1 = v13;
  a1[1] = v13;
  result = &v13[v8];
  a1[2] = &v13[v8];
  a1[3] = &v13[v8 + a2];
  a1[4] = &v13[v11];
  return result;
}

void sub_21861E110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

unint64_t boost::beast::read_size_or_throw<boost::beast::basic_flat_buffer<std::allocator<char>>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  std::logic_error v6;

  v2 = a1[2] - a1[1];
  v3 = a1[5] - v2;
  v4 = a1[4] - *a1 - v2;
  if (v3 >= a2)
    v3 = a2;
  if (v4 <= 0x200)
    v4 = 512;
  if (v3 >= v4)
    result = v4;
  else
    result = v3;
  if (!result)
  {
    std::logic_error::logic_error(&v6, "buffer overflow");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v6, (uint64_t)"std::size_t boost::beast::read_size_or_throw(DynamicBuffer &, std::size_t) [DynamicBuffer = boost::beast::basic_flat_buffer<std::allocator<char>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/core/impl/read_size.ipp", 73);
  }
  return result;
}

void sub_21861E1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::system::error_code::operator=<boost::beast::http::error>(_QWORD *result, unsigned int a2)
{
  unsigned __int8 v2;
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;

  if ((v2 & 1) == 0)
  {
    v6 = result;
    v5 = a2;
    a2 = v5;
    v4 = v3;
    result = v6;
    if (v4)
    {
      qword_254FD6C80 = (uint64_t)&boost::beast::http::detail::get_http_error_category(void)::cat;
      boost::beast::http::detail::get_http_error_category(void)::cat = (uint64_t)&unk_24D94D450;
      *(_QWORD *)algn_254FD6C78 = &unk_24D938C40;
      __cxa_atexit((void (*)(void *))boost::system::detail::system_error_category::~system_error_category, &boost::beast::http::detail::get_http_error_category(void)::cat, &dword_217E69000);
      a2 = v5;
      result = v6;
    }
  }
  *result = a2;
  result[1] = &boost::beast::http::detail::get_http_error_category(void)::cat;
  return result;
}

_QWORD *boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::put_eof(_QWORD *result, _QWORD *a2)
{
  int v2;

  v2 = *((_DWORD *)result + 12);
  if ((v2 - 1) <= 1)
    return boost::system::error_code::operator=<boost::beast::http::error>(a2, 2u);
  if ((*((_BYTE *)result + 53) & 0xC) != 0)
  {
    if (v2 == 10)
    {
      *(_DWORD *)a2 = 0;
      return result;
    }
    return boost::system::error_code::operator=<boost::beast::http::error>(a2, 2u);
  }
  *(_DWORD *)a2 = 0;
  *((_DWORD *)result + 12) = 10;
  return result;
}

uint64_t boost::asio::post<boost::asio::io_context::executor_type,boost::beast::detail::bound_handler<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code&,unsigned long &>>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5[6];
  _BYTE v6[48];
  void *v7[13];

  v7[12] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = 0;
  boost::asio::detail::work_dispatcher<boost::beast::detail::bound_handler<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code&,unsigned long &>>::work_dispatcher(v5, a2);
  boost::asio::io_context::executor_type::post<boost::asio::detail::work_dispatcher<boost::beast::detail::bound_handler<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code&,unsigned long &>>,std::allocator<void>>(a1, (uint64_t)v5, (uint64_t)&v4);
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(v7);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v6);
  return boost::asio::executor_work_guard<boost::asio::strand<boost::asio::io_context::executor_type>>::~executor_work_guard((uint64_t)v5);
}

void sub_21861E368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::asio::detail::work_dispatcher<boost::beast::detail::bound_handler<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code&,unsigned long &>>::~work_dispatcher((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_start_line(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _BYTE *v8;
  _QWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;

  v8 = (_BYTE *)*a2;
  v16 = 0;
  v17 = v8;
  v15 = 0;
  boost::beast::http::detail::basic_parser_base::parse_method((uint64_t *)&v17, a3, &v15, a4);
  if (!*(_DWORD *)a4)
  {
    v13 = 0;
    v14 = 0;
    boost::beast::http::detail::basic_parser_base::parse_target((uint64_t *)&v17, a3, &v13, a4);
    if (!*(_DWORD *)a4)
    {
      v12 = 0;
      boost::beast::http::detail::basic_parser_base::parse_version((unint64_t *)&v17, a3, &v12, a4);
      if (!*(_DWORD *)a4)
      {
        if (v12 - 12 <= 0xFFFFFFFD)
          goto LABEL_5;
        if ((unint64_t)(v17 + 2) > a3)
        {
          v9 = a4;
          v10 = 3;
          goto LABEL_8;
        }
        if (*v17 != 13 || v17[1] != 10)
        {
LABEL_5:
          v9 = a4;
          v10 = 14;
LABEL_8:
          boost::system::error_code::operator=<boost::beast::http::error>(v9, v10);
          return;
        }
        v17 += 2;
        if (v12 >= 0xB)
          *(_DWORD *)(a1 + 52) |= 0x10u;
        v11 = boost::beast::http::detail::string_to_verb<void>(v15, v16);
        boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_request_impl(a1, v11, v15, v16, v13, v14, v12, a4);
        if (!*(_DWORD *)a4)
        {
          *a2 = v17;
          *(_DWORD *)(a1 + 48) = 2;
        }
      }
    }
  }
}

_QWORD *boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_fields(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _BYTE **v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unsigned __int8 v13;
  int v14;
  __int16 v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  result = (_QWORD *)MEMORY[0x24BDAC7A8](a1, a2);
  v6 = v5;
  v23 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v22 = 0;
  v7 = *v3;
  v16 = v7;
  if ((unint64_t)(v7 + 2) > v4)
    return boost::system::error_code::operator=<boost::beast::http::error>(v6, 3u);
  v8 = v4;
  v9 = v3;
  v10 = result;
  while (*v7 != 13)
  {
    result = boost::beast::http::detail::basic_parser_base::parse_field<4096ul>((uint64_t)v10, (uint64_t *)&v16, v8, &v19, (uint64_t *)&v17, (uint64_t)&v21, v6);
    if (*(_DWORD *)v6)
      return result;
    v11 = v19;
    v12 = v20;
    if ((v13 & 1) == 0
    {
      boost::beast::http::detail::field_table::field_table((boost::beast::http::detail::field_table *)&boost::beast::http::detail::get_field_table(void)::tab);
      __cxa_atexit((void (*)(void *))boost::beast::http::detail::field_table::~field_table, &boost::beast::http::detail::get_field_table(void)::tab, &dword_217E69000);
    }
    v14 = boost::beast::http::detail::field_table::string_to_field((uint64_t)&boost::beast::http::detail::get_field_table(void)::tab, v11, v12);
    v15 = v14;
    result = boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::do_field(v10, v14, v17, v18, v6);
    if (*(_DWORD *)v6)
      return result;
    result = boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_field_impl((uint64_t)v10, v15, (unsigned __int8 *)v19, (size_t)v20, (uint64_t)v17, v18, v6);
    if (*(_DWORD *)v6)
      return result;
    v7 = v16;
    *v9 = v16;
    if ((unint64_t)(v7 + 2) > v8)
      return boost::system::error_code::operator=<boost::beast::http::error>(v6, 3u);
  }
  if (v7[1] != 10)
  {
    result = boost::system::error_code::operator=<boost::beast::http::error>(v6, 0xBu);
    v7 = v16;
  }
  *v9 = v7 + 2;
  return result;
}

void sub_21861E6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_chunk_header(uint64_t a1, unsigned __int8 **a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  BOOL v18;
  const char *v19;
  unsigned __int8 *eol;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t eom;
  unsigned __int8 *v24;
  unsigned __int8 *result;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned __int8 *v31;

  v8 = *a2;
  v31 = v8;
  v9 = &v8[a3];
  v10 = *(_DWORD *)(a1 + 52);
  if ((v10 & 0x2000) != 0)
  {
    if ((v10 & 0x40) != 0 && *v8 == 13 && v8[1] == 10)
    {
      v8 += 2;
      v31 = v8;
    }
    v13 = boost::beast::http::detail::basic_parser_base::unhex(unsigned char &,char)::tab[*v8];
    if (v13 != 255)
    {
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v31 = v14;
        v15 = boost::beast::http::detail::basic_parser_base::unhex(unsigned char &,char)::tab[*v14];
        v16 = v15 == 255;
        v17 = v15 + 16 * v13;
        v14 = v8 + 1;
        v18 = !v16 && v17 >= v13;
        v13 = v17;
      }
      while (v18);
    }
    eol = boost::beast::http::detail::basic_parser_base::find_eol(v8, v9, a4);
    v21 = *a2;
    v22 = *(_QWORD *)(a1 + 32);
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 + 2 > a3)
    return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  if ((v10 & 0x40) != 0)
  {
    if (*v8 != 13 || v8[1] != 10)
      return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 0x15u);
    v12 = v8 + 2;
  }
  else
  {
    v12 = v8;
  }
  result = boost::beast::http::detail::basic_parser_base::find_eol(&v8[v11], &v8[a3], a4);
  if (*(_DWORD *)a4)
    return result;
  eol = result;
  if (!result)
  {
    result = (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
    *(_QWORD *)(a1 + 32) = a3 - 1;
    return result;
  }
  v26 = result - 2;
  v21 = *a2;
  v22 = result - 2 - *a2;
  *(_QWORD *)(a1 + 32) = v22;
  v27 = boost::beast::http::detail::basic_parser_base::unhex(unsigned char &,char)::tab[*v12];
  if (v27 == 255)
    return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 0x15u);
  v8 = v12 + 1;
  while (1)
  {
    v31 = v8;
    v28 = boost::beast::http::detail::basic_parser_base::unhex(unsigned char &,char)::tab[*v8];
    if (v28 == 255)
      break;
    v29 = v28 + 16 * v27;
    ++v8;
    ++v12;
    v18 = v29 >= v27;
    v27 = v29;
    if (!v18)
      return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 0x15u);
  }
  if (v27)
  {
    if (*(_QWORD *)a1 < v27)
      return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 9u);
    *(_QWORD *)a1 -= v27;
    result = (unsigned __int8 *)boost::beast::http::detail::basic_parser_base::parse_chunk_extensions(a1, &v31, v9, a4);
    if (*(_DWORD *)a4)
      return result;
    if (v31 == v26)
    {
      if (!*(_QWORD *)(a1 + 216))
      {
        *(_DWORD *)a4 = 0;
LABEL_51:
        *(_QWORD *)(a1 + 8) = v27;
        *(_QWORD *)(a1 + 32) = 2;
        *a2 = eol;
        v30 = *(_DWORD *)(a1 + 52) | 0x40;
        *(_DWORD *)(a1 + 48) = 9;
        *(_DWORD *)(a1 + 52) = v30;
        return result;
      }
      result = (unsigned __int8 *)std::function<void ()(unsigned long long,boost::basic_string_view<char,std::char_traits<char>>,boost::system::error_code &)>::operator()(a1 + 192, v27, (uint64_t)(v12 + 1), eol - v12 - 3, (uint64_t)a4);
      if (!*(_DWORD *)a4)
        goto LABEL_51;
      return result;
    }
    return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 0x16u);
  }
  *(_DWORD *)(a1 + 52) |= 0x2000u;
LABEL_16:
  eom = boost::beast::http::detail::basic_parser_base::find_eom((boost::beast::http::detail::basic_parser_base *)&v21[v22], (const char *)v9, v19);
  if (!eom)
  {
    *(_QWORD *)(a1 + 32) = a3 - 3;
    return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  }
  v24 = (unsigned __int8 *)eom;
  result = (unsigned __int8 *)boost::beast::http::detail::basic_parser_base::parse_chunk_extensions(a1, &v31, v9, a4);
  if (*(_DWORD *)a4)
    return result;
  if (v31 != eol - 2)
    return (unsigned __int8 *)boost::system::error_code::operator=<boost::beast::http::error>(a4, 0x16u);
  if (*(_QWORD *)(a1 + 216))
  {
    result = (unsigned __int8 *)std::function<void ()(unsigned long long,boost::basic_string_view<char,std::char_traits<char>>,boost::system::error_code &)>::operator()(a1 + 192, 0, (uint64_t)v8, v31 - v8, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return result;
  }
  else
  {
    *(_DWORD *)a4 = 0;
  }
  v31 = eol;
  result = (unsigned __int8 *)boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::parse_fields(a1, (uint64_t)&v31);
  if (!*(_DWORD *)a4)
  {
    *a2 = v24;
    *(_DWORD *)a4 = 0;
    *(_DWORD *)(a1 + 48) = 10;
  }
  return result;
}

unint64_t boost::beast::http::detail::basic_parser_base::find_eom(boost::beast::http::detail::basic_parser_base *this, const char *a2, const char *a3)
{
  boost::beast::http::detail::basic_parser_base *v3;
  unint64_t result;
  int v5;
  unint64_t v6;

  v3 = this;
  result = (unint64_t)this + 4;
  while (result <= (unint64_t)a2)
  {
    v5 = *((unsigned __int8 *)v3 + 3);
    if (v5 == 10)
    {
      v6 = (unint64_t)v3 + 2;
      if (*((_BYTE *)v3 + 2) == 13)
      {
        if (*((_BYTE *)v3 + 1) == 10 && *(_BYTE *)v3 == 13)
          return result;
      }
      else
      {
        v6 = result;
      }
    }
    else if (v5 == 13)
    {
      v6 = (unint64_t)v3 + 1;
    }
    else
    {
      v6 = result;
    }
    result = v6 + 4;
    v3 = (boost::beast::http::detail::basic_parser_base *)v6;
  }
  return 0;
}

uint64_t *boost::beast::http::detail::basic_parser_base::parse_method(uint64_t *result, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *result;
  if (*result + 1 > a2)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v4 + v5);
    if (!boost::beast::http::detail::is_token_char(char)::tab[v6])
      break;
    *result = v4 + v5++ + 1;
    if (v4 + v5 + 1 > a2)
      return boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  }
  if ((_DWORD)v6 != 32 || !v5)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xCu);
  *result = v4 + v5 + 1;
  *a3 = v4;
  a3[1] = v5;
  return result;
}

uint64_t *boost::beast::http::detail::basic_parser_base::parse_target(uint64_t *result, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *result;
  if (*result + 1 > a2)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v4 + v5);
    if (!boost::beast::http::detail::basic_parser_base::is_pathchar(char)::tab[v6])
      break;
    *result = v4 + v5++ + 1;
    if (v4 + v5 + 1 > a2)
      return boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  }
  if ((_DWORD)v6 != 32 || !v5)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xDu);
  *result = v4 + v5 + 1;
  *a3 = v4;
  a3[1] = v5;
  return result;
}

unint64_t *boost::beast::http::detail::basic_parser_base::parse_version(unint64_t *result, unint64_t a2, _DWORD *a3, _QWORD *a4)
{
  _BYTE *v4;
  unint64_t v5;
  int v6;
  char *v7;

  v4 = (_BYTE *)*result;
  v5 = *result + 8;
  if (v5 > a2)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 3u);
  *result = (unint64_t)(v4 + 1);
  if (*v4 != 72)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = (unint64_t)(v4 + 2);
  if (v4[1] != 84)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = (unint64_t)(v4 + 3);
  if (v4[2] != 84)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = (unint64_t)(v4 + 4);
  if (v4[3] != 80)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = (unint64_t)(v4 + 5);
  if (v4[4] != 47)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  if (v4[5] - 48 >= 0xA)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = (unint64_t)(v4 + 6);
  v6 = 10 * (char)v4[5];
  *a3 = v6 - 480;
  v7 = v4 + 7;
  *result = (unint64_t)(v4 + 7);
  if (v4[6] != 46 || *v7 - 48 >= 0xA)
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, 0xEu);
  *result = v5;
  *a3 = v6 + *v7 - 528;
  return result;
}

void boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_request_impl(uint64_t a1, int a2, _BYTE *a3, unint64_t a4, uint64_t a5, size_t a6, int a7, _DWORD *a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  size_t v17;

  v14 = a1 + 56;
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_target(a1 + 56, a1 + 128, a5, a6);
  if (a2)
  {
    boost::beast::http::header<true,boost::beast::http::basic_fields<std::allocator<char>>>::method(v14, a2);
  }
  else
  {
    v15 = boost::beast::http::detail::string_to_verb<void>(a3, a4);
    *(_DWORD *)(a1 + 148) = v15;
    if (v15)
      v16 = 0;
    else
      v16 = (uint64_t)a3;
    if (v15)
      v17 = 0;
    else
      v17 = a4;
    boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(v14, a1 + 112, v16, v17);
  }
  *a8 = 0;
  *(_DWORD *)(a1 + 144) = a7;
}

void sub_21861ED18(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  boost::system::error_code::operator=<boost::beast::http::error>(v1, 0xAu);
  __cxa_end_catch();
  JUMPOUT(0x21861ECFCLL);
}

void boost::beast::http::header<true,boost::beast::http::basic_fields<std::allocator<char>>>::method(uint64_t a1, int a2)
{
  std::logic_error v2;

  if (!a2)
  {
    std::logic_error::logic_error(&v2, "unknown method");
    v2.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    boost::exception_detail::throw_exception_<std::invalid_argument>(&v2, (uint64_t)"void boost::beast::http::header<true>::method(verb) [isRequest = true, Fields = boost::beast::http::basic_fields<std::allocator<char>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/http/impl/message.ipp", 48);
  }
  *(_DWORD *)(a1 + 92) = a2;
  boost::beast::http::basic_fields<std::allocator<char>>::realloc_string(a1, a1 + 56, 0, 0);
}

void sub_21861EDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::beast::http::basic_fields<std::allocator<char>>::realloc_target(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v4;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;

  v9 = a3;
  v10 = a4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 | a4)
  {
    if (a4)
    {
      v7 = operator new(a4 + 1);
      *v7 = 32;
      boost::basic_string_view<char,std::char_traits<char>>::copy(&v9, v7 + 1, a4, 0);
      if (!*(_QWORD *)(a2 + 8))
        goto LABEL_5;
    }
    else
    {
      v7 = 0;
      if (!v4)
      {
LABEL_5:
        if (v7)
        {
          v8 = v10 + 1;
          *(_QWORD *)a2 = v7;
          *(_QWORD *)(a2 + 8) = v8;
        }
        else
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
        }
        return;
      }
    }
    operator delete(*(void **)a2);
    goto LABEL_5;
  }
}

uint64_t boost::beast::http::detail::string_to_verb<void>(_BYTE *a1, unint64_t a2)
{
  _WORD *v3;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v77;
  int v78;

  if (a2 >= 3)
  {
    v3 = a1 + 1;
    switch(*a1)
    {
      case 'A':
        if (a2 != 3 || *v3 != 19523)
          return 0;
        return 20;
      case 'B':
        if (a2 != 4)
          return 0;
        if (*v3 != 20041 || a1[3] != 68)
          return 0;
        return 17;
      case 'C':
        v5 = (char)a1[1];
        v6 = a1 + 2;
        if (v5 == 72)
        {
          v58 = 0;
          v59 = 69;
          do
          {
            if (v59 != v6[v58])
              return 0;
            v59 = aEckout[++v58];
          }
          while (v58 != 6);
          if (a2 == 8)
            return 23;
          return 0;
        }
        if (v5 != 79)
          return 0;
        v7 = 0;
        v8 = 78;
        while (v8 == v6[v7])
        {
          v8 = aNnect[++v7];
          if (v7 == 5)
          {
            if (a2 == 7)
              return 6;
            break;
          }
        }
        v60 = 0;
        v61 = 80;
        do
        {
          if (v61 != v6[v60])
            return 0;
          v61 = aPy[++v60];
        }
        while (v60 != 2);
        if (a2 == 4)
          return 9;
        return 0;
      case 'D':
        v9 = 69;
        v10 = 1u;
        while (v9 == a1[v10])
        {
          v9 = aElete[v10++];
          if (v10 == 6)
            return a2 == 6;
        }
        return 0;
      case 'G':
        v11 = 0;
        v12 = 69;
        while (v12 == *((unsigned __int8 *)v3 + v11))
        {
          v12 = aEt[++v11];
          if (v11 == 2)
          {
            if (a2 != 3)
              return 0;
            return 2;
          }
        }
        return 0;
      case 'H':
        v13 = 69;
        v14 = 1u;
        while (v13 == a1[v14])
        {
          v13 = aEad[v14++];
          if (v14 == 4)
          {
            if (a2 != 4)
              return 0;
            return 3;
          }
        }
        return 0;
      case 'L':
        v15 = a1 + 4;
        v16 = 73;
        v17 = 1u;
        while (v16 == a1[v17])
        {
          v16 = aInk[v17++];
          if (v17 == 4)
          {
            if (v15 == &a1[a2])
              return 32;
            break;
          }
        }
        v18 = 79;
        v19 = 1u;
        while (v18 == a1[v19])
        {
          v18 = aOck[v19++];
          if (v19 == 4)
          {
            if (v15 != &a1[a2])
              return 0;
            return 10;
          }
        }
        return 0;
      case 'M':
        v20 = (char)a1[1];
        v21 = a1 + 2;
        if (v20 <= 74)
        {
          if (v20 == 45)
          {
            v62 = 0;
            v63 = 83;
            do
            {
              if (v63 != v21[v62])
                return 0;
              v63 = aSearch[++v62];
            }
            while (v62 != 6);
            if (a2 == 8)
              return 25;
          }
          else
          {
            if (v20 != 69)
              return 0;
            v22 = 0;
            v23 = 82;
            do
            {
              if (v23 != v21[v22])
                return 0;
              v23 = aRge[++v22];
            }
            while (v22 != 3);
            if (a2 == 5)
              return 24;
          }
          return 0;
        }
        if (v20 != 75)
        {
          if (v20 != 79)
            return 0;
          v54 = 0;
          v55 = 86;
          do
          {
            if (v55 != v21[v54])
              return 0;
            v55 = aVe[++v54];
          }
          while (v54 != 2);
          if (a2 == 4)
            return 12;
          return 0;
        }
        v66 = 0;
        v67 = a1 + 10;
        v68 = 65;
        while (v68 == v21[v66])
        {
          v68 = aActivity[++v66];
          if (v66 == 8)
          {
            if (v67 == &a1[a2])
              return 22;
            break;
          }
        }
        if (*v21 != 67)
          return 0;
        v69 = 0;
        v70 = a1 + 3;
        v71 = 65;
        while (v71 == v70[v69])
        {
          v71 = aAlendar[++v69];
          if (v69 == 7)
          {
            if (v67 == &a1[a2])
              return 31;
            break;
          }
        }
        v72 = 0;
        v73 = 79;
        do
        {
          if (v73 != v70[v72])
            return 0;
          v73 = aOl[++v72];
        }
        while (v72 != 2);
        if (a2 == 5)
          return 11;
        return 0;
      case 'N':
        v24 = 79;
        v25 = 1u;
        while (v24 == a1[v25])
        {
          v24 = aOtify[v25++];
          if (v25 == 6)
          {
            if (a2 != 6)
              return 0;
            return 26;
          }
        }
        return 0;
      case 'O':
        v26 = 80;
        v27 = 1u;
        while (v26 == a1[v27])
        {
          v26 = aPtions[v27++];
          if (v27 == 7)
          {
            if (a2 != 7)
              return 0;
            return 7;
          }
        }
        return 0;
      case 'P':
        v28 = (char)a1[1];
        v29 = a1 + 2;
        if (v28 <= 81)
        {
          if (v28 == 65)
          {
            v64 = 0;
            v65 = 84;
            do
            {
              if (v65 != v29[v64])
                return 0;
              v65 = aTch[++v64];
            }
            while (v64 != 3);
            if (a2 == 5)
              return 29;
          }
          else
          {
            if (v28 != 79)
              return 0;
            v30 = 0;
            v31 = 83;
            do
            {
              if (v31 != v29[v30])
                return 0;
              v31 = aSt_0[++v30];
            }
            while (v30 != 2);
            if (a2 == 4)
              return 4;
          }
          return 0;
        }
        if (v28 != 82)
        {
          if (v28 != 85)
            return 0;
          v56 = 0;
          v57 = 82;
          do
          {
            if (v57 != v29[v56])
              goto LABEL_168;
            v57 = aRge[++v56];
          }
          while (v56 != 3);
          if (a2 == 5)
            return 30;
LABEL_168:
          if (*v29 == 84 && a2 == 3)
            return 5;
          return 0;
        }
        v74 = 0;
        v75 = 79;
        while (v75 == v29[v74])
        {
          v75 = aOpfind[++v74];
          if (v74 == 6)
          {
            if (a2 == 8)
              return 13;
            break;
          }
        }
        v77 = 0;
        v78 = 79;
        do
        {
          if (v78 != v29[v77])
            return 0;
          v78 = aOppatch[++v77];
        }
        while (v77 != 7);
        if (a2 == 9)
          return 14;
        return 0;
      case 'R':
        if (*(_BYTE *)v3 != 69)
          return 0;
        v32 = 0;
        v33 = a1 + 2;
        v34 = a1 + 6;
        v35 = 66;
        while (v35 == v33[v32])
        {
          v35 = aBind_0[++v32];
          if (v32 == 4)
          {
            if (v34 == &a1[a2])
              return 18;
            break;
          }
        }
        v36 = 0;
        v37 = 80;
        while (v37 == v33[v36])
        {
          v37 = aPort[++v36];
          if (v36 == 4)
          {
            if (v34 != &a1[a2])
              return 0;
            return 21;
          }
        }
        return 0;
      case 'S':
        v38 = 69;
        v39 = 1u;
        while (v38 == a1[v39])
        {
          v38 = aEarch[v39++];
          if (v39 == 6)
          {
            if (a2 == 6)
              return 15;
            break;
          }
        }
        v52 = 0;
        v53 = 85;
        while (v53 == *((unsigned __int8 *)v3 + v52))
        {
          v53 = aUbscribe[++v52];
          if (v52 == 8)
          {
            if (a2 != 9)
              return 0;
            return 27;
          }
        }
        return 0;
      case 'T':
        v40 = 0;
        v41 = 82;
        while (v41 == *((unsigned __int8 *)v3 + v40))
        {
          v41 = aRace[++v40];
          if (v40 == 4)
          {
            if (a2 != 5)
              return 0;
            return 8;
          }
        }
        return 0;
      case 'U':
        if (*(_BYTE *)v3 != 78)
          return 0;
        v42 = 0;
        v43 = a1 + 2;
        v44 = a1 + 6;
        v45 = 66;
        break;
      default:
        return 0;
    }
    while (v45 == v43[v42])
    {
      v45 = aBind_0[++v42];
      if (v42 == 4)
      {
        if (v44 == &a1[a2])
          return 19;
        break;
      }
    }
    v46 = 0;
    v47 = 76;
    while (v47 == v43[v46])
    {
      v47 = aLink[++v46];
      if (v46 == 4)
      {
        if (v44 == &a1[a2])
          return 33;
        break;
      }
    }
    v48 = 0;
    v49 = 76;
    while (v49 == v43[v48])
    {
      v49 = aLock[++v48];
      if (v48 == 4)
      {
        if (v44 == &a1[a2])
          return 16;
        break;
      }
    }
    v50 = 0;
    v51 = 83;
    while (v51 == v43[v50])
    {
      v51 = aSubscribe[++v50];
      if (v50 == 9)
      {
        if (a2 != 11)
          return 0;
        return 28;
      }
    }
  }
  return 0;
}

_QWORD *boost::beast::http::detail::basic_parser_base::parse_field<4096ul>(uint64_t a1, uint64_t *a2, unint64_t a3, char **a4, uint64_t *a5, uint64_t a6, _QWORD *a7)
{
  char *v8;
  char *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  _BYTE *v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  int v27;
  char *v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v33;
  char *v34;
  int v35;
  int v36;
  int v38;
  _QWORD *v39;
  unsigned int v40;
  unint64_t v41;
  char *v42;

  v8 = (char *)*a2;
  if (*a2 >= a3)
    return boost::system::error_code::operator=<boost::beast::http::error>(a7, 3u);
  v13 = 0;
  while (1)
  {
    v14 = v13[(_QWORD)v8];
    if (v14 == 58)
      break;
    if (!*((_BYTE *)boost::beast::http::detail::basic_parser_base::parse_field<4096ul>(char const*&,char const*,boost::basic_string_view<char,std::char_traits<char>> &,boost::basic_string_view<char,std::char_traits<char>> &,boost::beast::static_string<4096ul,char,std::char_traits<char>> &,boost::system::error_code &)::is_token
          + v14))
      return boost::system::error_code::operator=<boost::beast::http::error>(a7, 0x11u);
    *a2 = (uint64_t)&(v13++)[(_QWORD)v8 + 1];
    if (&v13[(_QWORD)v8] >= (char *)a3)
      return boost::system::error_code::operator=<boost::beast::http::error>(a7, 3u);
  }
  if (!v13)
    return boost::system::error_code::operator=<boost::beast::http::error>(a7, 0x11u);
  *a4 = v8;
  a4[1] = v13;
  v16 = *a2 + 1;
  *a2 = v16;
  v42 = 0;
  while (1)
  {
    if (v16 + 1 > a3)
      goto LABEL_59;
    v17 = v16;
    v18 = (char *)v16;
    while (1)
    {
      v19 = *v18;
      if (v19 != 32 && v19 != 9)
        break;
      *a2 = (uint64_t)(v18 + 1);
      v21 = v18 + 2;
      ++v18;
      ++v17;
      if ((unint64_t)v21 > a3)
        goto LABEL_59;
    }
    result = boost::beast::http::detail::basic_parser_base::parse_token_to_eol(v18, a3, &v42, a7);
    *a2 = (uint64_t)result;
    if (*(_DWORD *)a7)
      return result;
    if (!result)
    {
LABEL_62:
      v39 = a7;
      v40 = 18;
      return boost::system::error_code::operator=<boost::beast::http::error>(v39, v40);
    }
    v16 = (uint64_t)result + 1;
    if ((unint64_t)result + 1 > a3)
      goto LABEL_59;
    v22 = v42;
    v23 = v18;
    if (v18 != v42)
    {
      v23 = v42;
      while (1)
      {
        v25 = *--v22;
        v24 = v25;
        if (v25 != 32 && v24 != 9)
          break;
        v23 = v22;
        if (v22 == v18)
        {
          v23 = (char *)v17;
          break;
        }
      }
    }
    v42 = v23;
    v27 = *(unsigned __int8 *)result;
    if (v27 != 9 && v27 != 32)
      break;
    *a2 = v16;
    if (v18 != v23)
    {
      *(_QWORD *)a6 = 0;
      *(_BYTE *)(a6 + 8) = 0;
      v17 = a6 + 8;
      boost::beast::static_string<4096ul,char,std::char_traits<char>>::insert<char const*>((unint64_t *)a6, a6 + 8, v18, v23);
      v28 = (char *)*a2;
      v29 = *a2 + 1;
      while (v29 <= a3)
      {
        v30 = (char *)v29;
        v31 = *v28;
        if (v31 == 32 || v31 == 9)
        {
          *a2 = (uint64_t)v30;
          v29 = (unint64_t)(v30 + 1);
          v28 = v30;
        }
        else
        {
          result = boost::beast::http::detail::basic_parser_base::parse_token_to_eol(v28, a3, &v42, a7);
          *a2 = (uint64_t)result;
          if (*(_DWORD *)a7)
            return result;
          if (!result)
            goto LABEL_62;
          if ((unint64_t)result + 1 > a3)
            break;
          v33 = v42;
          v34 = v28;
          if (v28 != v42)
          {
            v34 = v42;
            while (1)
            {
              v36 = *--v33;
              v35 = v36;
              if (v36 != 32 && v35 != 9)
                break;
              v34 = v33;
              if (v33 == v28)
              {
                v34 = v28;
                break;
              }
            }
          }
          v42 = v34;
          if (v28 != v34)
          {
            boost::beast::static_string<4096ul,char,std::char_traits<char>>::push_back((uint64_t *)a6, 32);
            boost::beast::static_string<4096ul,char,std::char_traits<char>>::insert<char const*>((unint64_t *)a6, a6 + *(_QWORD *)a6 + 8, v28, v42);
            result = (_QWORD *)*a2;
          }
          v38 = *(unsigned __int8 *)result;
          if (v38 != 9 && v38 != 32)
          {
            v41 = *(_QWORD *)a6;
            goto LABEL_64;
          }
          v28 = (char *)result + 1;
          *a2 = (uint64_t)result + 1;
          v29 = (unint64_t)result + 2;
        }
      }
LABEL_59:
      v39 = a7;
      v40 = 3;
      return boost::system::error_code::operator=<boost::beast::http::error>(v39, v40);
    }
  }
  v41 = (unint64_t)&v23[-v17];
LABEL_64:
  *a5 = v17;
  a5[1] = v41;
  return result;
}

_QWORD *boost::beast::http::basic_parser<true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>>::do_field(_QWORD *result, int a2, unsigned __int8 *a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  __int128 v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27[2];
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  __int128 v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  __int128 v40;

  v6 = result;
  if (a2 <= 244)
  {
    if (a2 != 59)
    {
      if (a2 != 70)
      {
LABEL_32:
        *(_DWORD *)a5 = 0;
        return result;
      }
      v7 = *((_DWORD *)result + 13);
      if ((v7 & 0x400) == 0 && (v7 & 0x800) == 0 && a4)
      {
        v8 = 0;
        while (v8 <= 0x1999999999999999)
        {
          v9 = *a3;
          if ((v9 - 58) < 0xFFFFFFF6)
            break;
          v10 = 5 * v8;
          v11 = v9 - 48;
          if (__CFADD__(v11, 2 * v10))
            break;
          v8 = v11 + 2 * v10;
          ++a3;
          if (!--a4)
          {
            *(_DWORD *)a5 = 0;
            result[1] = v8;
            v12 = v7 | 0x400;
            goto LABEL_34;
          }
        }
      }
      return boost::system::error_code::operator=<boost::beast::http::error>(a5, 0x13u);
    }
    goto LABEL_17;
  }
  if (a2 == 318)
  {
    *(_DWORD *)a5 = 0;
    v12 = *((_DWORD *)result + 13) | 0x1000;
LABEL_34:
    *((_DWORD *)v6 + 13) = v12;
    return result;
  }
  if (a2 != 311)
  {
    if (a2 != 245)
      goto LABEL_32;
LABEL_17:
    *(_QWORD *)&v40 = a3;
    *((_QWORD *)&v40 + 1) = a4;
    if ((boost::beast::http::validate_list<boost::beast::http::detail::opt_token_list_policy>(&v40) & 1) != 0)
    {
      v35 = (unsigned __int8 *)&v40;
      v36 = v40;
      v37 = 0;
      v38 = 0;
      LOBYTE(v39) = 0;
      result = (_QWORD *)boost::beast::http::detail::basic_parsed_list<boost::beast::http::detail::opt_token_list_policy>::const_iterator::increment((uint64_t)&v35);
      if (&v40 == (__int128 *)v35 && !v36)
        goto LABEL_32;
      while ((boost::beast::detail::iequals<void>("close", 5, v37, (uint64_t)v38) & 1) == 0)
      {
        if ((boost::beast::detail::iequals<void>("keep-alive", 10, v37, (uint64_t)v38) & 1) != 0)
        {
          v13 = 512;
          goto LABEL_26;
        }
        if (boost::beast::detail::iequals<void>("upgrade", 7, v37, (uint64_t)v38))
        {
          v13 = 256;
          goto LABEL_26;
        }
LABEL_27:
        result = (_QWORD *)boost::beast::http::detail::basic_parsed_list<boost::beast::http::detail::opt_token_list_policy>::const_iterator::increment((uint64_t)&v35);
        if (&v40 == (__int128 *)v35 && v36 == 0)
          goto LABEL_32;
      }
      v13 = 128;
LABEL_26:
      *((_DWORD *)v6 + 13) |= v13;
      goto LABEL_27;
    }
    return boost::system::error_code::operator=<boost::beast::http::error>(a5, 0x12u);
  }
  v15 = *((_DWORD *)result + 13);
  if ((v15 & 0x800) != 0 || (v15 & 0x400) != 0)
    return boost::system::error_code::operator=<boost::beast::http::error>(a5, 0x14u);
  *(_DWORD *)a5 = 0;
  v16 = &a3[a4];
  v31 = 0uLL;
  v32 = a3;
  v33 = a3;
  v34 = &a3[a4];
  boost::beast::http::token_list::const_iterator::increment<void>((unsigned __int8 **)&v31);
  v27[0] = 0;
  v27[1] = 0;
  v28 = v16;
  v29 = v16;
  v30 = v16;
  boost::beast::http::token_list::const_iterator::increment<void>(v27);
  while (1)
  {
    v17 = v28;
    if (v28 == v32)
    {
      v18 = v29;
      if (v29 == v33)
      {
        v19 = v30;
        if (v30 == v34)
          break;
      }
    }
    if (boost::beast::detail::iequals<void>("chunked", 7, (unsigned __int8 *)v31, *((uint64_t *)&v31 + 1)))
    {
      v17 = v32;
      v18 = v33;
      v19 = v34;
      break;
    }
    boost::beast::http::token_list::const_iterator::increment<void>((unsigned __int8 **)&v31);
  }
  v40 = v31;
  v35 = 0;
  v36 = 0;
  v37 = v16;
  v38 = v16;
  v39 = v16;
  result = boost::beast::http::token_list::const_iterator::increment<void>(&v35);
  if (v37 != v17 || v38 != v18 || v39 != v19)
  {
    v23 = v40;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    boost::beast::http::token_list::const_iterator::increment<void>((unsigned __int8 **)&v23);
    v21 = v24;
    v20 = v25;
    v22 = v26;
    v35 = 0;
    v36 = 0;
    v37 = v16;
    v38 = v16;
    v39 = v16;
    result = boost::beast::http::token_list::const_iterator::increment<void>(&v35);
    if (v37 == v21 && v38 == v20 && v39 == v22)
    {
      v6[1] = 0;
      v12 = *((_DWORD *)v6 + 13) | 0x800;
      goto LABEL_34;
    }
  }
  return result;
}

_BYTE *boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_field_impl(uint64_t a1, __int16 a2, unsigned __int8 *a3, size_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  _BYTE *result;
  _QWORD v9[18];
  _BYTE v10[280];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v9[0] = a5;
  v9[1] = a6;
  boost::beast::http::basic_fields<std::allocator<char>>::insert(a1 + 56, a2, a3, a4, (uint64_t)v9);
  result = boost::optional_detail::optional_base<boost::beast::detail::static_ostream>::~optional_base(v10);
  *a7 = 0;
  return result;
}

void sub_21861FE00(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  _BYTE *v3;

  boost::optional_detail::optional_base<boost::beast::detail::static_ostream>::~optional_base(v3);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    boost::system::error_code::operator=<boost::beast::http::error>(v2, 0xAu);
    __cxa_end_catch();
    JUMPOUT(0x21861FDCCLL);
  }
  _Unwind_Resume(a1);
}

_BYTE *boost::beast::http::detail::basic_parser_base::parse_token_to_eol(_BYTE *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  unsigned int v7;
  _QWORD *v9;
  unsigned int v10;

  if ((unint64_t)a1 >= a2)
  {
    v4 = a1;
LABEL_14:
    v9 = a4;
    v10 = 3;
    goto LABEL_15;
  }
  v4 = (_BYTE *)a2;
  v5 = a2 - (_QWORD)a1;
  v6 = a1 + 1;
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 - 32 < 0x5F)
      goto LABEL_4;
    if (v7 <= 0x1F && v7 != 9)
      break;
    if (v7 == 127)
      return 0;
LABEL_4:
    ++v6;
    if (!--v5)
      goto LABEL_14;
  }
  if (v7 != 13)
    return 0;
  if ((unint64_t)v6 >= a2)
    goto LABEL_14;
  if (*v6 == 10)
  {
    v4 = v6 + 1;
    *a3 = v6 - 1;
    return v4;
  }
  v9 = a4;
  v10 = 11;
LABEL_15:
  boost::system::error_code::operator=<boost::beast::http::error>(v9, v10);
  return v4;
}

uint64_t *boost::beast::static_string<4096ul,char,std::char_traits<char>>::push_back(uint64_t *result, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::logic_error v4;

  v2 = *result;
  if ((unint64_t)*result >= 0x1000)
  {
    std::logic_error::logic_error(&v4, "size() >= max_size()");
    v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v4, (uint64_t)"void boost::beast::static_string<4096>::push_back(CharT) [N = 4096, CharT = char, Traits = std::char_traits<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/core/impl/static_string.ipp", 412);
  }
  *result = v2 + 1;
  v3 = result + 1;
  *((_BYTE *)v3 + v2) = a2;
  *((_BYTE *)v3 + *result) = 0;
  return result;
}

void sub_21861FF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<std::length_error>(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::logic_error v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  std::logic_error::logic_error(&v7, a1);
  v7.__vftable = (std::logic_error_vtbl *)&unk_24D930EF0;
  v8 = &unk_24D930F18;
  v9 = 0;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<std::length_error>>((uint64_t)&v7);
}

void sub_21861FFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  a11 = &unk_24D918C48;
  if (a12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
      a12 = 0;
  }
  std::logic_error::~logic_error(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<std::length_error>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  std::logic_error v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v4, (const std::logic_error *)a1);
  v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = &unk_24D918C48;
  v6 = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  v4.__vftable = (std::logic_error_vtbl *)&unk_24D930EF0;
  v5 = &unk_24D930F18;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::length_error>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_2186200EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  std::logic_error::~logic_error(&a10);
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

char *boost::beast::static_string<4096ul,char,std::char_traits<char>>::insert<char const*>(unint64_t *a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v8;
  _QWORD *v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  char v15;
  std::logic_error v16;

  v4 = a4 - a3;
  v5 = *a1;
  v6 = *a1 + a4 - a3;
  if (v6 > 0x1000)
  {
    std::logic_error::logic_error(&v16, "size() + count > max_size()");
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v16, (uint64_t)"typename std::enable_if<detail::is_input_iterator<InputIt>::value, iterator>::type boost::beast::static_string<4096>::insert(const_iterator, InputIt, InputIt) [N = 4096, CharT = char, Traits = std::char_traits<char>, InputIt = const char *]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/core/impl/static_string.ipp", 340);
  }
  v8 = a3;
  v11 = a1 + 1;
  v12 = a2 - (_QWORD)(a1 + 1);
  if (v5 != v12)
  {
    memmove((char *)v11 + v4 + v12, (char *)v11 + v12, v5 - v12);
    v6 = *a1 + v4;
  }
  *a1 = v6;
  result = (char *)v11 + v12;
  if (v8 != a4)
  {
    v14 = a2 - (_QWORD)a1;
    do
    {
      v15 = *v8++;
      *((_BYTE *)a1 + v14++) = v15;
    }
    while (v8 != a4);
    v6 = *a1;
  }
  *((_BYTE *)a1 + v6 + 8) = 0;
  return result;
}

void sub_218620240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t **boost::beast::http::detail::field_table::string_to_field(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t **result;
  char *v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v3 = *(_QWORD *)(a1 + 5648);
  if ((unint64_t)a3 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 5656) - v3) >> 3))
    return 0;
  v4 = (_QWORD *)(v3 + 40 * (_QWORD)a3);
  if (!v4[3])
    return 0;
  result = std::__hash_table<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>,std::__unordered_map_equal<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::iequal,boost::beast::http::detail::field_table::hash,true>,std::allocator<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>>>::find<boost::basic_string_view<char,std::char_traits<char>>>(v4, v6);
  if (result)
    return (uint64_t **)*((unsigned __int16 *)result + 16);
  return result;
}

void boost::beast::http::detail::field_table::~field_table(boost::beast::http::detail::field_table *this)
{
  void **v1;

  v1 = (void **)((char *)this + 5648);
  std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

boost::beast::http::detail::field_table *boost::beast::http::detail::field_table::field_table(boost::beast::http::detail::field_table *this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  float v8;
  char *v9;
  uint64_t j;
  uint64_t v11;
  _WORD v13[5];

  v2 = 0;
  *(_QWORD *)this = "<unknown-field>";
  *((_QWORD *)this + 1) = 15;
  *((_QWORD *)this + 2) = "A-IM";
  *((_QWORD *)this + 3) = 4;
  *((_QWORD *)this + 4) = "Accept";
  *((_QWORD *)this + 5) = 6;
  *((_QWORD *)this + 6) = "Accept-Additions";
  *((_QWORD *)this + 7) = 16;
  *((_QWORD *)this + 8) = "Accept-Charset";
  *((_QWORD *)this + 9) = 14;
  *((_QWORD *)this + 10) = "Accept-Datetime";
  *((_QWORD *)this + 11) = 15;
  *((_QWORD *)this + 12) = "Accept-Encoding";
  *((_QWORD *)this + 13) = 15;
  *((_QWORD *)this + 14) = "Accept-Features";
  *((_QWORD *)this + 15) = 15;
  *((_QWORD *)this + 16) = "Accept-Language";
  *((_QWORD *)this + 17) = 15;
  *((_QWORD *)this + 18) = "Accept-Patch";
  *((_QWORD *)this + 19) = 12;
  *((_QWORD *)this + 20) = "Accept-Post";
  *((_QWORD *)this + 21) = 11;
  *((_QWORD *)this + 22) = "Accept-Ranges";
  *((_QWORD *)this + 23) = 13;
  *((_QWORD *)this + 24) = "Access-Control";
  *((_QWORD *)this + 25) = 14;
  *((_QWORD *)this + 26) = "Access-Control-Allow-Credentials";
  *((_QWORD *)this + 27) = 32;
  *((_QWORD *)this + 28) = "Access-Control-Allow-Headers";
  *((_QWORD *)this + 29) = 28;
  *((_QWORD *)this + 30) = "Access-Control-Allow-Methods";
  *((_QWORD *)this + 31) = 28;
  *((_QWORD *)this + 32) = "Access-Control-Allow-Origin";
  *((_QWORD *)this + 33) = 27;
  *((_QWORD *)this + 34) = "Access-Control-Expose-Headers";
  *((_QWORD *)this + 35) = 29;
  *((_QWORD *)this + 36) = "Access-Control-Max-Age";
  *((_QWORD *)this + 37) = 22;
  *((_QWORD *)this + 38) = "Access-Control-Request-Headers";
  *((_QWORD *)this + 39) = 30;
  *((_QWORD *)this + 40) = "Access-Control-Request-Method";
  *((_QWORD *)this + 41) = 29;
  *((_QWORD *)this + 42) = "Age";
  *((_QWORD *)this + 43) = 3;
  *((_QWORD *)this + 44) = "Allow";
  *((_QWORD *)this + 45) = 5;
  *((_QWORD *)this + 46) = "ALPN";
  *((_QWORD *)this + 47) = 4;
  *((_QWORD *)this + 48) = "Also-Control";
  *((_QWORD *)this + 49) = 12;
  *((_QWORD *)this + 50) = "Alt-Svc";
  *((_QWORD *)this + 51) = 7;
  *((_QWORD *)this + 52) = "Alt-Used";
  *((_QWORD *)this + 53) = 8;
  *((_QWORD *)this + 54) = "Alternate-Recipient";
  *((_QWORD *)this + 55) = 19;
  *((_QWORD *)this + 56) = "Alternates";
  *((_QWORD *)this + 57) = 10;
  *((_QWORD *)this + 58) = "Apparently-To";
  *((_QWORD *)this + 59) = 13;
  *((_QWORD *)this + 60) = "Apply-To-Redirect-Ref";
  *((_QWORD *)this + 61) = 21;
  *((_QWORD *)this + 62) = "Approved";
  *((_QWORD *)this + 63) = 8;
  *((_QWORD *)this + 64) = "Archive";
  *((_QWORD *)this + 65) = 7;
  *((_QWORD *)this + 66) = "Archived-At";
  *((_QWORD *)this + 67) = 11;
  *((_QWORD *)this + 68) = "Article-Names";
  *((_QWORD *)this + 69) = 13;
  *((_QWORD *)this + 70) = "Article-Updates";
  *((_QWORD *)this + 71) = 15;
  *((_QWORD *)this + 72) = "Authentication-Control";
  *((_QWORD *)this + 73) = 22;
  *((_QWORD *)this + 74) = "Authentication-Info";
  *((_QWORD *)this + 75) = 19;
  *((_QWORD *)this + 76) = "Authentication-Results";
  *((_QWORD *)this + 77) = 22;
  *((_QWORD *)this + 78) = "Authorization";
  *((_QWORD *)this + 79) = 13;
  *((_QWORD *)this + 80) = "Auto-Submitted";
  *((_QWORD *)this + 81) = 14;
  *((_QWORD *)this + 82) = "Autoforwarded";
  *((_QWORD *)this + 83) = 13;
  *((_QWORD *)this + 84) = "Autosubmitted";
  *((_QWORD *)this + 85) = 13;
  *((_QWORD *)this + 86) = "Base";
  *((_QWORD *)this + 87) = 4;
  *((_QWORD *)this + 88) = "Bcc";
  *((_QWORD *)this + 89) = 3;
  *((_QWORD *)this + 90) = "Body";
  *((_QWORD *)this + 91) = 4;
  *((_QWORD *)this + 92) = "C-Ext";
  *((_QWORD *)this + 93) = 5;
  *((_QWORD *)this + 94) = "C-Man";
  *((_QWORD *)this + 95) = 5;
  *((_QWORD *)this + 96) = "C-Opt";
  *((_QWORD *)this + 97) = 5;
  *((_QWORD *)this + 98) = "C-PEP";
  *((_QWORD *)this + 99) = 5;
  *((_QWORD *)this + 100) = "C-PEP-Info";
  *((_QWORD *)this + 101) = 10;
  *((_QWORD *)this + 102) = "Cache-Control";
  *((_QWORD *)this + 103) = 13;
  *((_QWORD *)this + 104) = "CalDAV-Timezones";
  *((_QWORD *)this + 105) = 16;
  *((_QWORD *)this + 106) = "Cancel-Key";
  *((_QWORD *)this + 107) = 10;
  *((_QWORD *)this + 108) = "Cancel-Lock";
  *((_QWORD *)this + 109) = 11;
  *((_QWORD *)this + 110) = "Cc";
  *((_QWORD *)this + 111) = 2;
  *((_QWORD *)this + 112) = "Close";
  *((_QWORD *)this + 113) = 5;
  *((_QWORD *)this + 114) = "Comments";
  *((_QWORD *)this + 115) = 8;
  *((_QWORD *)this + 116) = "Compliance";
  *((_QWORD *)this + 117) = 10;
  *((_QWORD *)this + 118) = "Connection";
  *((_QWORD *)this + 119) = 10;
  *((_QWORD *)this + 120) = "Content-Alternative";
  *((_QWORD *)this + 121) = 19;
  *((_QWORD *)this + 122) = "Content-Base";
  *((_QWORD *)this + 123) = 12;
  *((_QWORD *)this + 124) = "Content-Description";
  *((_QWORD *)this + 125) = 19;
  *((_QWORD *)this + 126) = "Content-Disposition";
  *((_QWORD *)this + 127) = 19;
  *((_QWORD *)this + 128) = "Content-Duration";
  *((_QWORD *)this + 129) = 16;
  *((_QWORD *)this + 130) = "Content-Encoding";
  *((_QWORD *)this + 131) = 16;
  *((_QWORD *)this + 132) = "Content-features";
  *((_QWORD *)this + 133) = 16;
  *((_QWORD *)this + 134) = "Content-ID";
  *((_QWORD *)this + 135) = 10;
  *((_QWORD *)this + 136) = "Content-Identifier";
  *((_QWORD *)this + 137) = 18;
  *((_QWORD *)this + 138) = "Content-Language";
  *((_QWORD *)this + 139) = 16;
  *((_QWORD *)this + 140) = "Content-Length";
  *((_QWORD *)this + 141) = 14;
  *((_QWORD *)this + 142) = "Content-Location";
  *((_QWORD *)this + 143) = 16;
  *((_QWORD *)this + 144) = "Content-MD5";
  *((_QWORD *)this + 145) = 11;
  *((_QWORD *)this + 146) = "Content-Range";
  *((_QWORD *)this + 147) = 13;
  *((_QWORD *)this + 148) = "Content-Return";
  *((_QWORD *)this + 149) = 14;
  *((_QWORD *)this + 150) = "Content-Script-Type";
  *((_QWORD *)this + 151) = 19;
  *((_QWORD *)this + 152) = "Content-Style-Type";
  *((_QWORD *)this + 153) = 18;
  *((_QWORD *)this + 154) = "Content-Transfer-Encoding";
  *((_QWORD *)this + 155) = 25;
  *((_QWORD *)this + 156) = "Content-Type";
  *((_QWORD *)this + 157) = 12;
  *((_QWORD *)this + 158) = "Content-Version";
  *((_QWORD *)this + 159) = 15;
  *((_QWORD *)this + 160) = "Control";
  *((_QWORD *)this + 161) = 7;
  *((_QWORD *)this + 162) = "Conversion";
  *((_QWORD *)this + 163) = 10;
  *((_QWORD *)this + 164) = "Conversion-With-Loss";
  *((_QWORD *)this + 165) = 20;
  *((_QWORD *)this + 166) = "Cookie";
  *((_QWORD *)this + 167) = 6;
  *((_QWORD *)this + 168) = "Cookie2";
  *((_QWORD *)this + 169) = 7;
  *((_QWORD *)this + 170) = "Cost";
  *((_QWORD *)this + 171) = 4;
  *((_QWORD *)this + 172) = "DASL";
  *((_QWORD *)this + 173) = 4;
  *((_QWORD *)this + 174) = "Date";
  *((_QWORD *)this + 175) = 4;
  *((_QWORD *)this + 176) = "Date-Received";
  *((_QWORD *)this + 177) = 13;
  *((_QWORD *)this + 178) = "DAV";
  *((_QWORD *)this + 179) = 3;
  *((_QWORD *)this + 180) = "Default-Style";
  *((_QWORD *)this + 181) = 13;
  *((_QWORD *)this + 182) = "Deferred-Delivery";
  *((_QWORD *)this + 183) = 17;
  *((_QWORD *)this + 184) = "Delivery-Date";
  *((_QWORD *)this + 185) = 13;
  *((_QWORD *)this + 186) = "Delta-Base";
  *((_QWORD *)this + 187) = 10;
  *((_QWORD *)this + 188) = "Depth";
  *((_QWORD *)this + 189) = 5;
  *((_QWORD *)this + 190) = "Derived-From";
  *((_QWORD *)this + 191) = 12;
  *((_QWORD *)this + 192) = "Destination";
  *((_QWORD *)this + 193) = 11;
  *((_QWORD *)this + 194) = "Differential-ID";
  *((_QWORD *)this + 195) = 15;
  *((_QWORD *)this + 196) = "Digest";
  *((_QWORD *)this + 197) = 6;
  *((_QWORD *)this + 198) = "Discarded-X400-IPMS-Extensions";
  *((_QWORD *)this + 199) = 30;
  *((_QWORD *)this + 200) = "Discarded-X400-MTS-Extensions";
  *((_QWORD *)this + 201) = 29;
  *((_QWORD *)this + 202) = "Disclose-Recipients";
  *((_QWORD *)this + 203) = 19;
  *((_QWORD *)this + 204) = "Disposition-Notification-Options";
  *((_QWORD *)this + 205) = 32;
  *((_QWORD *)this + 206) = "Disposition-Notification-To";
  *((_QWORD *)this + 207) = 27;
  *((_QWORD *)this + 208) = "Distribution";
  *((_QWORD *)this + 209) = 12;
  *((_QWORD *)this + 210) = "DKIM-Signature";
  *((_QWORD *)this + 211) = 14;
  *((_QWORD *)this + 212) = "DL-Expansion-History";
  *((_QWORD *)this + 213) = 20;
  *((_QWORD *)this + 214) = "Downgraded-Bcc";
  *((_QWORD *)this + 215) = 14;
  *((_QWORD *)this + 216) = "Downgraded-Cc";
  *((_QWORD *)this + 218) = "Downgraded-Disposition-Notification-To";
  *((_QWORD *)this + 219) = 38;
  *((_QWORD *)this + 220) = "Downgraded-Final-Recipient";
  *((_QWORD *)this + 222) = "Downgraded-From";
  *((_QWORD *)this + 224) = "Downgraded-In-Reply-To";
  *((_QWORD *)this + 226) = "Downgraded-Mail-From";
  *((_QWORD *)this + 228) = "Downgraded-Message-Id";
  *((_QWORD *)this + 230) = "Downgraded-Original-Recipient";
  *((_QWORD *)this + 232) = "Downgraded-Rcpt-To";
  *((_QWORD *)this + 234) = "Downgraded-References";
  *((_QWORD *)this + 236) = "Downgraded-Reply-To";
  *((_QWORD *)this + 238) = "Downgraded-Resent-Bcc";
  *((_QWORD *)this + 240) = "Downgraded-Resent-Cc";
  *((_QWORD *)this + 242) = "Downgraded-Resent-From";
  *((_QWORD *)this + 244) = "Downgraded-Resent-Reply-To";
  *((_QWORD *)this + 246) = "Downgraded-Resent-Sender";
  *((_QWORD *)this + 248) = "Downgraded-Resent-To";
  *((_QWORD *)this + 372) = "Method-Check-Expires";
  *((_QWORD *)this + 378) = "MMHS-Authorizing-Users";
  *((_QWORD *)this + 382) = "MMHS-Copy-Precedence";
  *((_QWORD *)this + 398) = "MMHS-Other-Recipients-Indicator-CC";
  *((_QWORD *)this + 404) = "MMHS-Subject-Indicator-Codes";
  *((_QWORD *)this + 408) = "Negotiate";
  *((_QWORD *)this + 410) = "Newsgroups";
  *((_QWORD *)this + 412) = "NNTP-Posting-Date";
  *((_QWORD *)this + 414) = "NNTP-Posting-Host";
  *((_QWORD *)this + 416) = "Non-Compliance";
  *((_QWORD *)this + 418) = "Obsoletes";
  *((_QWORD *)this + 420) = "Opt";
  *((_QWORD *)this + 422) = "Optional";
  *((_QWORD *)this + 424) = "Optional-WWW-Authenticate";
  *((_QWORD *)this + 426) = "Ordering-Type";
  *((_QWORD *)this + 430) = "Origin";
  *((_QWORD *)this + 451) = 4;
  *((_QWORD *)this + 452) = "PEP";
  *((_QWORD *)this + 453) = 3;
  *((_QWORD *)this + 446) = "Overwrite";
  *((_QWORD *)this + 449) = 3;
  *((_QWORD *)this + 450) = "Path";
  *((_QWORD *)this + 448) = "P3P";
  *((_QWORD *)this + 447) = 9;
  *((_QWORD *)this + 440) = "Original-Sender";
  *((_QWORD *)this + 443) = 16;
  *((_QWORD *)this + 444) = "Originator-Return-Address";
  *((_QWORD *)this + 445) = 25;
  *((_QWORD *)this + 442) = "Original-Subject";
  *((_QWORD *)this + 441) = 15;
  *((_QWORD *)this + 434) = "Original-From";
  *((_QWORD *)this + 437) = 19;
  *((_QWORD *)this + 438) = "Original-Recipient";
  *((_QWORD *)this + 439) = 18;
  *((_QWORD *)this + 436) = "Original-Message-ID";
  *((_QWORD *)this + 433) = 34;
  *((_QWORD *)this + 435) = 13;
  *((_QWORD *)this + 217) = 13;
  *((_QWORD *)this + 432) = "Original-Encoded-Information-Types";
  *((_QWORD *)this + 429) = 12;
  *((_QWORD *)this + 431) = 6;
  *((_QWORD *)this + 428) = "Organization";
  *((_QWORD *)this + 221) = 26;
  *((_QWORD *)this + 423) = 8;
  *((_QWORD *)this + 425) = 25;
  *((_QWORD *)this + 427) = 13;
  *((_QWORD *)this + 223) = 15;
  *((_QWORD *)this + 225) = 22;
  *((_QWORD *)this + 227) = 20;
  *((_QWORD *)this + 417) = 14;
  *((_QWORD *)this + 419) = 9;
  *((_QWORD *)this + 421) = 3;
  *((_QWORD *)this + 229) = 21;
  *((_QWORD *)this + 231) = 29;
  *((_QWORD *)this + 233) = 18;
  *((_QWORD *)this + 411) = 10;
  *((_QWORD *)this + 413) = 17;
  *((_QWORD *)this + 415) = 17;
  *((_QWORD *)this + 235) = 21;
  *((_QWORD *)this + 237) = 19;
  *((_QWORD *)this + 239) = 21;
  *((_QWORD *)this + 241) = 20;
  *((_QWORD *)this + 407) = 11;
  *((_QWORD *)this + 409) = 9;
  *((_QWORD *)this + 243) = 22;
  *((_QWORD *)this + 245) = 26;
  *((_QWORD *)this + 405) = 28;
  *((_QWORD *)this + 406) = "MT-Priority";
  *((_QWORD *)this + 401) = 34;
  *((_QWORD *)this + 402) = "MMHS-Primary-Precedence";
  *((_QWORD *)this + 403) = 23;
  *((_QWORD *)this + 399) = 34;
  *((_QWORD *)this + 400) = "MMHS-Other-Recipients-Indicator-To";
  *((_QWORD *)this + 392) = "MMHS-Message-Type";
  *((_QWORD *)this + 395) = 20;
  *((_QWORD *)this + 396) = "MMHS-Originator-Reference";
  *((_QWORD *)this + 397) = 25;
  *((_QWORD *)this + 394) = "MMHS-Originator-PLAD";
  *((_QWORD *)this + 393) = 17;
  *((_QWORD *)this + 388) = "MMHS-Handling-Instructions";
  *((_QWORD *)this + 389) = 26;
  *((_QWORD *)this + 390) = "MMHS-Message-Instructions";
  *((_QWORD *)this + 391) = 25;
  *((_QWORD *)this + 386) = "MMHS-Extended-Authorisation-Info";
  *((_QWORD *)this + 385) = 21;
  *((_QWORD *)this + 387) = 32;
  *((_QWORD *)this + 384) = "MMHS-Exempted-Address";
  *((_QWORD *)this + 383) = 20;
  *((_QWORD *)this + 247) = 24;
  *((_QWORD *)this + 380) = "MMHS-Codress-Message-Indicator";
  *((_QWORD *)this + 379) = 22;
  *((_QWORD *)this + 381) = 30;
  *((_QWORD *)this + 249) = 20;
  *((_QWORD *)this + 376) = "MMHS-Acp127-Message-Identifier";
  *((_QWORD *)this + 375) = 12;
  *((_QWORD *)this + 377) = 30;
  *((_QWORD *)this + 374) = "MIME-Version";
  *((_QWORD *)this + 373) = 20;
  *((_QWORD *)this + 366) = "Message-Type";
  *((_QWORD *)this + 369) = 5;
  *((_QWORD *)this + 370) = "Method-Check";
  *((_QWORD *)this + 371) = 12;
  *((_QWORD *)this + 368) = "Meter";
  *((_QWORD *)this + 367) = 12;
  *((_QWORD *)this + 360) = "Memento-Datetime";
  *((_QWORD *)this + 363) = 15;
  *((_QWORD *)this + 364) = "Message-ID";
  *((_QWORD *)this + 365) = 10;
  *((_QWORD *)this + 362) = "Message-Context";
  *((_QWORD *)this + 361) = 16;
  *((_QWORD *)this + 354) = "Lock-Token";
  *((_QWORD *)this + 357) = 3;
  *((_QWORD *)this + 358) = "Max-Forwards";
  *((_QWORD *)this + 359) = 12;
  *((_QWORD *)this + 356) = "Man";
  *((_QWORD *)this + 355) = 10;
  *((_QWORD *)this + 348) = "List-Unsubscribe";
  *((_QWORD *)this + 351) = 21;
  *((_QWORD *)this + 352) = "Location";
  *((_QWORD *)this + 353) = 8;
  *((_QWORD *)this + 350) = "List-Unsubscribe-Post";
  *((_QWORD *)this + 349) = 16;
  *((_QWORD *)this + 342) = "List-Owner";
  *((_QWORD *)this + 345) = 9;
  *((_QWORD *)this + 346) = "List-Subscribe";
  *((_QWORD *)this + 347) = 14;
  *((_QWORD *)this + 344) = "List-Post";
  *((_QWORD *)this + 343) = 10;
  *((_QWORD *)this + 336) = "List-Archive";
  *((_QWORD *)this + 339) = 9;
  *((_QWORD *)this + 340) = "List-ID";
  *((_QWORD *)this + 341) = 7;
  *((_QWORD *)this + 338) = "List-Help";
  *((_QWORD *)this + 337) = 12;
  *((_QWORD *)this + 330) = "Latest-Delivery-Time";
  *((_QWORD *)this + 333) = 5;
  *((_QWORD *)this + 334) = "Link";
  *((_QWORD *)this + 335) = 4;
  *((_QWORD *)this + 332) = "Lines";
  *((_QWORD *)this + 331) = 20;
  *((_QWORD *)this + 324) = "Label";
  *((_QWORD *)this + 327) = 8;
  *((_QWORD *)this + 328) = "Last-Modified";
  *((_QWORD *)this + 329) = 13;
  *((_QWORD *)this + 326) = "Language";
  *((_QWORD *)this + 325) = 5;
  *((_QWORD *)this + 318) = "Jabber-ID";
  *((_QWORD *)this + 321) = 10;
  *((_QWORD *)this + 322) = "Keywords";
  *((_QWORD *)this + 323) = 8;
  *((_QWORD *)this + 320) = "Keep-Alive";
  *((_QWORD *)this + 319) = 9;
  *((_QWORD *)this + 312) = "Incomplete-Copy";
  *((_QWORD *)this + 315) = 14;
  *((_QWORD *)this + 316) = "Injection-Info";
  *((_QWORD *)this + 317) = 14;
  *((_QWORD *)this + 314) = "Injection-Date";
  *((_QWORD *)this + 313) = 15;
  *((_QWORD *)this + 306) = "IM";
  *((_QWORD *)this + 309) = 10;
  *((_QWORD *)this + 310) = "In-Reply-To";
  *((_QWORD *)this + 311) = 11;
  *((_QWORD *)this + 308) = "Importance";
  *((_QWORD *)this + 307) = 2;
  *((_QWORD *)this + 300) = "If-Range";
  *((_QWORD *)this + 303) = 21;
  *((_QWORD *)this + 304) = "If-Unmodified-Since";
  *((_QWORD *)this + 305) = 19;
  *((_QWORD *)this + 302) = "If-Schedule-Tag-Match";
  *((_QWORD *)this + 301) = 8;
  *((_QWORD *)this + 294) = "If-Match";
  *((_QWORD *)this + 297) = 17;
  *((_QWORD *)this + 298) = "If-None-Match";
  *((_QWORD *)this + 299) = 13;
  *((_QWORD *)this + 296) = "If-Modified-Since";
  *((_QWORD *)this + 295) = 8;
  *((_QWORD *)this + 288) = "Host";
  *((_QWORD *)this + 291) = 14;
  *((_QWORD *)this + 292) = "If";
  *((_QWORD *)this + 293) = 2;
  *((_QWORD *)this + 290) = "HTTP2-Settings";
  *((_QWORD *)this + 289) = 4;
  *((_QWORD *)this + 282) = "Generate-Delivery-Report";
  *((_QWORD *)this + 285) = 10;
  *((_QWORD *)this + 286) = "Hobareg";
  *((_QWORD *)this + 287) = 7;
  *((_QWORD *)this + 284) = "GetProfile";
  *((_QWORD *)this + 283) = 24;
  *((_QWORD *)this + 276) = "Followup-To";
  *((_QWORD *)this + 279) = 9;
  *((_QWORD *)this + 280) = "From";
  *((_QWORD *)this + 281) = 4;
  *((_QWORD *)this + 278) = "Forwarded";
  *((_QWORD *)this + 277) = 11;
  *((_QWORD *)this + 270) = "Expires";
  *((_QWORD *)this + 273) = 11;
  *((_QWORD *)this + 274) = "Ext";
  *((_QWORD *)this + 275) = 3;
  *((_QWORD *)this + 272) = "Expiry-Date";
  *((_QWORD *)this + 271) = 7;
  *((_QWORD *)this + 264) = "Errors-To";
  *((_QWORD *)this + 267) = 4;
  *((_QWORD *)this + 268) = "Expect";
  *((_QWORD *)this + 269) = 6;
  *((_QWORD *)this + 266) = "ETag";
  *((_QWORD *)this + 265) = 9;
  *((_QWORD *)this + 258) = "Eesst-Version";
  *((_QWORD *)this + 261) = 8;
  *((_QWORD *)this + 262) = "Encrypted";
  *((_QWORD *)this + 263) = 9;
  *((_QWORD *)this + 260) = "Encoding";
  *((_QWORD *)this + 259) = 13;
  *((_QWORD *)this + 250) = "Downgraded-Return-Path";
  *((_QWORD *)this + 255) = 13;
  *((_QWORD *)this + 256) = "EDIINT-Features";
  *((_QWORD *)this + 257) = 15;
  *((_QWORD *)this + 251) = 22;
  *((_QWORD *)this + 252) = "Downgraded-Sender";
  *((_QWORD *)this + 253) = 17;
  *((_QWORD *)this + 254) = "Downgraded-To";
  *((_QWORD *)this + 454) = "Pep-Info";
  *((_QWORD *)this + 455) = 8;
  *((_QWORD *)this + 456) = "PICS-Label";
  *((_QWORD *)this + 457) = 10;
  *((_QWORD *)this + 458) = "Position";
  *((_QWORD *)this + 459) = 8;
  *((_QWORD *)this + 460) = "Posting-Version";
  *((_QWORD *)this + 461) = 15;
  *((_QWORD *)this + 462) = "Pragma";
  *((_QWORD *)this + 463) = 6;
  *((_QWORD *)this + 464) = "Prefer";
  *((_QWORD *)this + 465) = 6;
  *((_QWORD *)this + 466) = "Preference-Applied";
  *((_QWORD *)this + 467) = 18;
  *((_QWORD *)this + 468) = "Prevent-NonDelivery-Report";
  *((_QWORD *)this + 469) = 26;
  *((_QWORD *)this + 470) = "Priority";
  *((_QWORD *)this + 471) = 8;
  *((_QWORD *)this + 472) = "Privicon";
  *((_QWORD *)this + 473) = 8;
  *((_QWORD *)this + 474) = "ProfileObject";
  *((_QWORD *)this + 475) = 13;
  *((_QWORD *)this + 476) = "Protocol";
  *((_QWORD *)this + 477) = 8;
  *((_QWORD *)this + 478) = "Protocol-Info";
  *((_QWORD *)this + 479) = 13;
  *((_QWORD *)this + 480) = "Protocol-Query";
  *((_QWORD *)this + 481) = 14;
  *((_QWORD *)this + 482) = "Protocol-Request";
  *((_QWORD *)this + 483) = 16;
  *((_QWORD *)this + 484) = "Proxy-Authenticate";
  *((_QWORD *)this + 485) = 18;
  *((_QWORD *)this + 486) = "Proxy-Authentication-Info";
  *((_QWORD *)this + 487) = 25;
  *((_QWORD *)this + 488) = "Proxy-Authorization";
  *((_QWORD *)this + 489) = 19;
  *((_QWORD *)this + 490) = "Proxy-Connection";
  *((_QWORD *)this + 491) = 16;
  *((_QWORD *)this + 492) = "Proxy-Features";
  *((_QWORD *)this + 493) = 14;
  *((_QWORD *)this + 494) = "Proxy-Instruction";
  *((_QWORD *)this + 495) = 17;
  *((_QWORD *)this + 496) = "Public";
  *((_QWORD *)this + 497) = 6;
  *((_QWORD *)this + 498) = "Public-Key-Pins";
  *((_QWORD *)this + 499) = 15;
  *((_QWORD *)this + 500) = "Public-Key-Pins-Report-Only";
  *((_QWORD *)this + 501) = 27;
  *((_QWORD *)this + 502) = "Range";
  *((_QWORD *)this + 503) = 5;
  *((_QWORD *)this + 504) = "Received";
  *((_QWORD *)this + 505) = 8;
  *((_QWORD *)this + 506) = "Received-SPF";
  *((_QWORD *)this + 507) = 12;
  *((_QWORD *)this + 508) = "Redirect-Ref";
  *((_QWORD *)this + 509) = 12;
  *((_QWORD *)this + 510) = "References";
  *((_QWORD *)this + 511) = 10;
  *((_QWORD *)this + 512) = "Referer";
  *((_QWORD *)this + 513) = 7;
  *((_QWORD *)this + 514) = "Referer-Root";
  *((_QWORD *)this + 515) = 12;
  *((_QWORD *)this + 516) = "Relay-Version";
  *((_QWORD *)this + 517) = 13;
  *((_QWORD *)this + 518) = "Reply-By";
  *((_QWORD *)this + 519) = 8;
  *((_QWORD *)this + 520) = "Reply-To";
  *((_QWORD *)this + 521) = 8;
  *((_QWORD *)this + 522) = "Require-Recipient-Valid-Since";
  *((_QWORD *)this + 523) = 29;
  *((_QWORD *)this + 524) = "Resent-Bcc";
  *((_QWORD *)this + 525) = 10;
  *((_QWORD *)this + 526) = "Resent-Cc";
  *((_QWORD *)this + 527) = 9;
  *((_QWORD *)this + 528) = "Resent-Date";
  *((_QWORD *)this + 529) = 11;
  *((_QWORD *)this + 530) = "Resent-From";
  *((_QWORD *)this + 531) = 11;
  *((_QWORD *)this + 532) = "Resent-Message-ID";
  *((_QWORD *)this + 533) = 17;
  *((_QWORD *)this + 534) = "Resent-Reply-To";
  *((_QWORD *)this + 535) = 15;
  *((_QWORD *)this + 536) = "Resent-Sender";
  *((_QWORD *)this + 537) = 13;
  *((_QWORD *)this + 538) = "Resent-To";
  *((_QWORD *)this + 539) = 9;
  *((_QWORD *)this + 540) = "Resolution-Hint";
  *((_QWORD *)this + 541) = 15;
  *((_QWORD *)this + 542) = "Resolver-Location";
  *((_QWORD *)this + 543) = 17;
  *((_QWORD *)this + 544) = "Retry-After";
  *((_QWORD *)this + 545) = 11;
  *((_QWORD *)this + 546) = "Return-Path";
  *((_QWORD *)this + 547) = 11;
  *((_QWORD *)this + 548) = "Safe";
  *((_QWORD *)this + 549) = 4;
  *((_QWORD *)this + 550) = "Schedule-Reply";
  *((_QWORD *)this + 551) = 14;
  *((_QWORD *)this + 552) = "Schedule-Tag";
  *((_QWORD *)this + 553) = 12;
  *((_QWORD *)this + 554) = "Sec-WebSocket-Accept";
  *((_QWORD *)this + 555) = 20;
  *((_QWORD *)this + 556) = "Sec-WebSocket-Extensions";
  *((_QWORD *)this + 557) = 24;
  *((_QWORD *)this + 558) = "Sec-WebSocket-Key";
  *((_QWORD *)this + 559) = 17;
  *((_QWORD *)this + 560) = "Sec-WebSocket-Protocol";
  *((_QWORD *)this + 561) = 22;
  *((_QWORD *)this + 562) = "Sec-WebSocket-Version";
  *((_QWORD *)this + 563) = 21;
  *((_QWORD *)this + 564) = "Security-Scheme";
  *((_QWORD *)this + 565) = 15;
  *((_QWORD *)this + 566) = "See-Also";
  *((_QWORD *)this + 567) = 8;
  *((_QWORD *)this + 568) = "Sender";
  *((_QWORD *)this + 569) = 6;
  *((_QWORD *)this + 570) = "Sensitivity";
  *((_QWORD *)this + 571) = 11;
  *((_QWORD *)this + 572) = "Server";
  *((_QWORD *)this + 573) = 6;
  *((_QWORD *)this + 574) = "Set-Cookie";
  *((_QWORD *)this + 575) = 10;
  *((_QWORD *)this + 576) = "Set-Cookie2";
  *((_QWORD *)this + 577) = 11;
  *((_QWORD *)this + 578) = "SetProfile";
  *((_QWORD *)this + 579) = 10;
  *((_QWORD *)this + 580) = "SIO-Label";
  *((_QWORD *)this + 581) = 9;
  *((_QWORD *)this + 582) = "SIO-Label-History";
  *((_QWORD *)this + 583) = 17;
  *((_QWORD *)this + 584) = "SLUG";
  *((_QWORD *)this + 585) = 4;
  *((_QWORD *)this + 586) = "SoapAction";
  *((_QWORD *)this + 587) = 10;
  *((_QWORD *)this + 588) = "Solicitation";
  *((_QWORD *)this + 589) = 12;
  *((_QWORD *)this + 590) = "Status-URI";
  *((_QWORD *)this + 591) = 10;
  *((_QWORD *)this + 592) = "Strict-Transport-Security";
  *((_QWORD *)this + 593) = 25;
  *((_QWORD *)this + 594) = "Subject";
  *((_QWORD *)this + 595) = 7;
  *((_QWORD *)this + 596) = "SubOK";
  *((_QWORD *)this + 597) = 5;
  *((_QWORD *)this + 598) = "Subst";
  *((_QWORD *)this + 599) = 5;
  *((_QWORD *)this + 600) = "Summary";
  *((_QWORD *)this + 601) = 7;
  *((_QWORD *)this + 602) = "Supersedes";
  *((_QWORD *)this + 603) = 10;
  *((_QWORD *)this + 604) = "Surrogate-Capability";
  *((_QWORD *)this + 605) = 20;
  *((_QWORD *)this + 606) = "Surrogate-Control";
  *((_QWORD *)this + 607) = 17;
  *((_QWORD *)this + 608) = "TCN";
  *((_QWORD *)this + 609) = 3;
  *((_QWORD *)this + 610) = "TE";
  *((_QWORD *)this + 611) = 2;
  *((_QWORD *)this + 612) = "Timeout";
  *((_QWORD *)this + 613) = 7;
  *((_QWORD *)this + 614) = "Title";
  *((_QWORD *)this + 615) = 5;
  *((_QWORD *)this + 616) = "To";
  *((_QWORD *)this + 617) = 2;
  *((_QWORD *)this + 618) = "Topic";
  *((_QWORD *)this + 619) = 5;
  *((_QWORD *)this + 620) = "Trailer";
  *((_QWORD *)this + 621) = 7;
  *((_QWORD *)this + 622) = "Transfer-Encoding";
  *((_QWORD *)this + 623) = 17;
  *((_QWORD *)this + 624) = "TTL";
  *((_QWORD *)this + 625) = 3;
  *((_QWORD *)this + 626) = "UA-Color";
  *((_QWORD *)this + 627) = 8;
  *((_QWORD *)this + 628) = "UA-Media";
  *((_QWORD *)this + 629) = 8;
  *((_QWORD *)this + 630) = "UA-Pixels";
  *((_QWORD *)this + 631) = 9;
  *((_QWORD *)this + 632) = "UA-Resolution";
  *((_QWORD *)this + 633) = 13;
  *((_QWORD *)this + 634) = "UA-Windowpixels";
  *((_QWORD *)this + 635) = 15;
  *((_QWORD *)this + 636) = "Upgrade";
  *((_QWORD *)this + 637) = 7;
  *((_QWORD *)this + 638) = "Urgency";
  *((_QWORD *)this + 639) = 7;
  *((_QWORD *)this + 640) = "URI";
  *((_QWORD *)this + 641) = 3;
  *((_QWORD *)this + 642) = "User-Agent";
  *((_QWORD *)this + 643) = 10;
  *((_QWORD *)this + 644) = "Variant-Vary";
  *((_QWORD *)this + 645) = 12;
  *((_QWORD *)this + 646) = "Vary";
  *((_QWORD *)this + 647) = 4;
  *((_QWORD *)this + 648) = "VBR-Info";
  *((_QWORD *)this + 649) = 8;
  *((_QWORD *)this + 650) = "Version";
  *((_QWORD *)this + 651) = 7;
  *((_QWORD *)this + 652) = "Via";
  *((_QWORD *)this + 653) = 3;
  *((_QWORD *)this + 654) = "Want-Digest";
  *((_QWORD *)this + 655) = 11;
  *((_QWORD *)this + 656) = "Warning";
  *((_QWORD *)this + 657) = 7;
  *((_QWORD *)this + 658) = "WWW-Authenticate";
  *((_QWORD *)this + 659) = 16;
  *((_QWORD *)this + 660) = "X-Archived-At";
  *((_QWORD *)this + 661) = 13;
  *((_QWORD *)this + 662) = "X-Device-Accept";
  *((_QWORD *)this + 663) = 15;
  *((_QWORD *)this + 664) = "X-Device-Accept-Charset";
  *((_QWORD *)this + 665) = 23;
  *((_QWORD *)this + 666) = "X-Device-Accept-Encoding";
  *((_QWORD *)this + 667) = 24;
  *((_QWORD *)this + 668) = "X-Device-Accept-Language";
  *((_QWORD *)this + 669) = 24;
  *((_QWORD *)this + 670) = "X-Device-User-Agent";
  *((_QWORD *)this + 671) = 19;
  *((_QWORD *)this + 672) = "X-Frame-Options";
  *((_QWORD *)this + 673) = 15;
  *((_QWORD *)this + 674) = "X-Mittente";
  *((_QWORD *)this + 675) = 10;
  *((_QWORD *)this + 676) = "X-PGP-Sig";
  *((_QWORD *)this + 677) = 9;
  *((_QWORD *)this + 678) = "X-Ricevuta";
  *((_QWORD *)this + 679) = 10;
  *((_QWORD *)this + 680) = "X-Riferimento-Message-ID";
  *((_QWORD *)this + 681) = 24;
  *((_QWORD *)this + 682) = "X-TipoRicevuta";
  *((_QWORD *)this + 683) = 14;
  *((_QWORD *)this + 684) = "X-Trasporto";
  *((_QWORD *)this + 685) = 11;
  *((_QWORD *)this + 686) = "X-VerificaSicurezza";
  *((_QWORD *)this + 687) = 19;
  *((_QWORD *)this + 688) = "X400-Content-Identifier";
  *((_QWORD *)this + 689) = 23;
  *((_QWORD *)this + 690) = "X400-Content-Return";
  *((_QWORD *)this + 691) = 19;
  *((_QWORD *)this + 692) = "X400-Content-Type";
  *((_QWORD *)this + 693) = 17;
  *((_QWORD *)this + 694) = "X400-MTS-Identifier";
  *((_QWORD *)this + 695) = 19;
  *((_QWORD *)this + 696) = "X400-Originator";
  *((_QWORD *)this + 697) = 15;
  *((_QWORD *)this + 698) = "X400-Received";
  *((_QWORD *)this + 699) = 13;
  *((_QWORD *)this + 700) = "X400-Recipients";
  *((_QWORD *)this + 701) = 15;
  *((_QWORD *)this + 702) = "X400-Trace";
  *((_QWORD *)this + 703) = 10;
  *((_QWORD *)this + 704) = "Xref";
  *((_QWORD *)this + 705) = 4;
  v3 = (_QWORD *)((char *)this + 5648);
  *((_QWORD *)this + 708) = 0;
  v4 = -5648;
  *((_OWORD *)this + 353) = 0u;
  do
  {
    if (v2 <= *(_QWORD *)((char *)this + v4 + 5656))
      v2 = *(_QWORD *)((char *)this + v4 + 5656);
    v4 += 16;
  }
  while (v4);
  std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::resize((uint64_t *)this + 706, v2 + 1);
  v5 = *((_QWORD *)this + 706);
  for (i = *((_QWORD *)this + 707); v5 != i; v5 += 40)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7)
      v8 = (float)*(unint64_t *)(v5 + 24) / (float)v7;
    else
      v8 = 0.0;
    *(float *)(v5 + 32) = fmaxf(v8, 0.15);
  }
  v9 = (char *)this + 16;
  for (j = 1; j != 353; ++j)
  {
    v11 = *v3 + 40 * *((_QWORD *)v9 + 1);
    v13[0] = j;
    std::__hash_table<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>,std::__unordered_map_equal<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::iequal,boost::beast::http::detail::field_table::hash,true>,std::allocator<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>>>::__emplace_unique_key_args<boost::basic_string_view<char,std::char_traits<char>>,boost::basic_string_view<char,std::char_traits<char>> const&,boost::beast::http::field>(v11, (char **)v9, v9, v13);
    v9 += 16;
  }
  return this;
}

void sub_218621A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

uint64_t std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_218621C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>,std::__unordered_map_equal<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::iequal,boost::beast::http::detail::field_table::hash,true>,std::allocator<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>>>::__emplace_unique_key_args<boost::basic_string_view<char,std::char_traits<char>>,boost::basic_string_view<char,std::char_traits<char>> const&,boost::beast::http::field>(uint64_t a1, char **a2, _OWORD *a3, _WORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>::operator()[abi:ne180100](a1 + 24, a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (boost::beast::http::detail::field_table::iequal::operator()(a1 + 32, *((unsigned __int8 **)i + 2), *((_QWORD *)i + 3), (unsigned __int8 *)*a2))
          {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v11;
  *((_OWORD *)i + 1) = *a3;
  *((_WORD *)i + 16) = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12)
        v26 %= v12;
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v9;
  return i;
}

void sub_218621EB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>::operator()[abi:ne180100](uint64_t a1, char **a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = (uint64_t)*a2;
  v3 = (unint64_t)a2[1];
  v4 = **a2;
  if ((v4 - 65) < 0x1A)
    LOBYTE(v4) = v4 + 32;
  v5 = *(char *)(v2 + (v3 >> 1));
  if ((v5 - 65) < 0x1A)
    LOBYTE(v5) = v5 + 32;
  v6 = (char)v5 * (uint64_t)(char)v4;
  v7 = *(char *)(v3 + v2 - 1);
  if ((v7 - 65) < 0x1A)
    LOBYTE(v7) = v7 + 32;
  return v6 ^ (char)v7;
}

BOOL boost::beast::http::detail::field_table::iequal::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  _BOOL8 result;
  unint64_t v11;

  v4 = &a2[a3];
  do
  {
    if (a2 >= v4)
      return 1;
    v6 = *a2++;
    v5 = v6;
    v8 = *a4++;
    v7 = v8;
  }
  while (v5 == v8);
  v9 = 0;
  do
  {
    if (((char)v5 - 65) < 0x1A)
      LOBYTE(v5) = v5 + 32;
    if (((char)v7 - 65) < 0x1A)
      v7 += 32;
    result = v5 == v7;
    if (v5 != v7)
      break;
    v11 = (unint64_t)&a2[v9 + 1];
    LOBYTE(v5) = a2[v9];
    v7 = a4[v9++];
  }
  while (v11 < (unint64_t)v4);
  return result;
}

void std::vector<std::unordered_map<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,std::allocator<std::pair<boost::basic_string_view<char,std::char_traits<char>> const,boost::beast::http::field>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>,std::__unordered_map_equal<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::iequal,boost::beast::http::detail::field_table::hash,true>,std::allocator<std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>>>::find<boost::basic_string_view<char,std::char_traits<char>>>(_QWORD *a1, char **a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__unordered_map_hasher<boost::basic_string_view<char,std::char_traits<char>>,std::__hash_value_type<boost::basic_string_view<char,std::char_traits<char>>,boost::beast::http::field>,boost::beast::http::detail::field_table::hash,boost::beast::http::detail::field_table::iequal,true>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (boost::beast::http::detail::field_table::iequal::operator()(v12, (unsigned __int8 *)v11[2], (uint64_t)v11[3], (unsigned __int8 *)*a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t boost::beast::http::validate_list<boost::beast::http::detail::opt_token_list_policy>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *a1;
  v7 = a1;
  v8 = v2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  boost::beast::http::detail::basic_parsed_list<boost::beast::http::detail::opt_token_list_policy>::const_iterator::increment((uint64_t)&v7);
  result = 0;
  if (!v11)
  {
    v5 = v7;
    v4 = v8;
    while (1)
    {
      if (v5 == a1 && !v4)
        return 1;
      boost::beast::http::detail::basic_parsed_list<boost::beast::http::detail::opt_token_list_policy>::const_iterator::increment((uint64_t)&v7);
      if (v11)
        break;
      v5 = v7;
      v4 = v8;
      if (v7 == a1 && v8 == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t boost::beast::http::detail::basic_parsed_list<boost::beast::http::detail::opt_token_list_policy>::const_iterator::increment(uint64_t a1)
{
  uint64_t result;

  result = boost::beast::http::detail::opt_token_list_policy::operator()(a1, (unsigned __int8 **)(a1 + 16), (unsigned __int8 **)(a1 + 8), **(unsigned __int8 ***)a1, *(_QWORD *)(*(_QWORD *)a1 + 8));
  if ((result & 1) == 0)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t boost::beast::http::detail::opt_token_list_policy::operator()(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  BOOL v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v12;
  unsigned int v13;

  *a2 = 0;
  a2[1] = 0;
  v5 = *a3;
  v6 = &a4[a5];
  if (*a3 != &a4[a5])
  {
    v7 = v5 != a4;
    do
    {
      v8 = v5;
      while (1)
      {
        v9 = *v8;
        if ((_DWORD)v9 != 32 && (_DWORD)v9 != 9)
          break;
        *a3 = ++v8;
        ++v5;
        if (v8 == v6)
          goto LABEL_15;
      }
      if (v8 == v6)
        break;
      if (boost::beast::http::detail::is_token_char(char)::tab[v9])
      {
        if (v7)
          return 0;
        v12 = v8 + 1;
        while (1)
        {
          *a3 = v12;
          if (v12 == v6)
            break;
          v13 = *v12++;
          if (!boost::beast::http::detail::is_token_char(char)::tab[v13])
          {
            v6 = v12 - 1;
            break;
          }
        }
        *a2 = v8;
        a2[1] = (unsigned __int8 *)(v6 - v5);
        return 1;
      }
      if ((_DWORD)v9 != 44)
        return 0;
      v7 = 0;
      v5 = v8 + 1;
      *a3 = v8 + 1;
    }
    while (v8 + 1 != v6);
  }
LABEL_15:
  *a3 = 0;
  return 1;
}

uint64_t boost::beast::detail::iequals<void>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  signed __int8 v7;
  int v8;
  uint64_t i;
  char v10;
  BOOL v11;
  _BOOL8 v12;

  if (a4 != a2)
    return 0;
  v4 = a2 + 1;
  do
  {
    if (!--v4)
      return 1;
    v6 = *a1++;
    v5 = v6;
    v8 = *a3++;
    v7 = v8;
  }
  while (v5 == v8);
  for (i = 0; i != v4; ++i)
  {
    if (((char)v5 - 65) >= 0x1A)
      v10 = v5;
    else
      v10 = v5 + 32;
    if ((v7 - 65) < 0x1A)
      v7 += 32;
    v11 = v10 == v7;
    v12 = v11;
    if (!v11)
      break;
    LOBYTE(v5) = a1[i];
    v7 = a3[i];
  }
  return v12;
}

unsigned __int8 **boost::beast::http::token_list::const_iterator::increment<void>(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v8;
  int v9;

  v1 = result[2];
  v2 = result[3];
  *result = 0;
  result[1] = 0;
  result[3] = v1;
  v3 = result[4];
  if (v1 != v3)
  {
    v4 = v1 != v2;
    while (1)
    {
      v5 = v1;
      while (1)
      {
        v6 = *v5;
        if ((_DWORD)v6 != 32 && (_DWORD)v6 != 9)
          break;
        result[2] = ++v5;
        ++v1;
        if (v5 == v3)
          goto LABEL_17;
      }
      if (v5 == v3)
        break;
      if (boost::beast::http::detail::is_token_char(char)::tab[v6])
      {
        if (v4)
          break;
        v8 = v5 + 1;
        while (1)
        {
          result[2] = v8;
          if (v8 == v3)
            break;
          v9 = *v8++;
          if (!boost::beast::http::detail::is_token_char(char)::tab[v9])
          {
            v3 = v8 - 1;
            break;
          }
        }
        *result = v5;
        result[1] = (unsigned __int8 *)(v3 - v1);
        return result;
      }
      if ((_DWORD)v6 == 44)
      {
        v4 = 0;
        v1 = v5 + 1;
        result[2] = v5 + 1;
        if (v5 + 1 != v3)
          continue;
      }
      break;
    }
  }
LABEL_17:
  result[2] = v3;
  result[3] = v3;
  return result;
}

uint64_t boost::beast::http::basic_fields<std::allocator<char>>::insert(uint64_t a1, __int16 a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  size_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;

  v18 = a3;
  v19 = a4;
  v6 = boost::beast::http::basic_fields<std::allocator<char>>::new_element(a1, a2, (uint64_t)a3, a4, *(unsigned __int8 **)a5, *(_QWORD *)(a5 + 8));
  v8 = (uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  v9 = a1 + 8;
  if (v7)
  {
    v9 = a1 + 8;
    do
    {
      v10 = boost::beast::http::basic_fields<std::allocator<char>>::key_compare::operator()<boost::basic_string_view<char,std::char_traits<char>>>((uint64_t)&v22, (uint64_t)&v18, v7 - 16);
      if (v10)
        v11 = 8;
      else
        v11 = 16;
      if (v10)
        v9 = v7;
      v7 = *(_QWORD *)(v7 + v11);
    }
    while (v7);
  }
  if (v9 == *(_QWORD *)(a1 + 16)
    || (v17 = v9,
        v12 = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<void *,false>>::prev_node(&v17),
        v17 = v12,
        (boost::beast::detail::iequals<void>(v18, v19, (unsigned __int8 *)(v12 + 40), *(unsigned __int16 *)(v12 + 32) - 2) & 1) == 0))
  {
    v21 = v6 + 2;
    v22 = v9;
    v14 = a1 + 40;
    ++*(_QWORD *)a1;
    v15 = (_QWORD **)(a1 + 48);
    v20 = v8;
    result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_before(&v20, &v22, (uint64_t *)&v21);
  }
  else
  {
    v21 = v6 + 2;
    v22 = v9;
    ++*(_QWORD *)a1;
    v20 = (uint64_t **)(a1 + 8);
    result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_before(&v20, &v22, (uint64_t *)&v21);
    v14 = *(_QWORD *)(v12 - 16);
    v15 = (_QWORD **)(v14 + 8);
  }
  v16 = *v15;
  *v6 = v14;
  v6[1] = v16;
  *v15 = v6;
  *v16 = v6;
  return result;
}

_WORD *boost::beast::http::basic_fields<std::allocator<char>>::new_element(uint64_t a1, __int16 a2, uint64_t a3, size_t a4, unsigned __int8 *a5, uint64_t a6)
{
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unsigned __int8 *v17;
  size_t v18;
  uint64_t v19;
  _WORD *v20;
  std::logic_error v22;

  if (a4 + 2 >= 0x10000)
  {
    std::logic_error::logic_error(&v22, "field name too large");
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v22, (uint64_t)"value_type &boost::beast::http::basic_fields<std::allocator<char>>::new_element(field, string_view, string_view) [Allocator = std::allocator<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/http/impl/fields.ipp", 1146);
  }
  if ((unint64_t)(a6 - 65534) <= 0xFFFFFFFFFFFEFFFFLL)
  {
    std::logic_error::logic_error(&v22, "field value too large");
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
    boost::exception_detail::throw_exception_<std::length_error>(&v22, (uint64_t)"value_type &boost::beast::http::basic_fields<std::allocator<char>>::new_element(field, string_view, string_view) [Allocator = std::allocator<char>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/beast/http/impl/fields.ipp", 1150);
  }
  v9 = &a5[a6];
  if (a6)
  {
    while (1)
    {
      v10 = *a5;
      if (v10 != 32 && v10 != 9)
        break;
      ++a5;
      if (!--a6)
      {
        v12 = v9;
        goto LABEL_21;
      }
    }
  }
  if (a5 == v9)
  {
    v12 = a5;
LABEL_21:
    a5 = v9;
  }
  else
  {
    v13 = v9;
    do
    {
      v15 = *--v9;
      v14 = v15;
      if (v15 != 32 && v14 != 9)
      {
        v12 = a5;
        v9 = a5;
        a5 = v13;
        goto LABEL_22;
      }
      v13 = v9;
    }
    while (v9 != a5);
    v12 = a5;
    v9 = a5;
  }
LABEL_22:
  v17 = (unsigned __int8 *)(a5 - v12);
  if (v9 == a5)
    v18 = 0;
  else
    v18 = (size_t)v17;
  if (v9 == a5)
    v19 = 0;
  else
    v19 = (uint64_t)v9;
  v20 = operator new(((unsigned __int16)(a4 + 2) + (unsigned __int16)v18 + 65) & 0x3FFF8);
  return boost::beast::http::basic_fields<std::allocator<char>>::value_type::value_type(v20, a2, a3, a4, v19, v18);
}

void sub_2186226A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

_WORD *boost::beast::http::basic_fields<std::allocator<char>>::value_type::value_type(_WORD *a1, __int16 a2, uint64_t a3, size_t a4, uint64_t a5, size_t a6)
{
  _WORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  a1[24] = a4 + 2;
  a1[25] = a6;
  a1[26] = a2;
  v8 = a1 + 28;
  v9 = (uint64_t)a1 + (unsigned __int16)(a4 + 2) + 56;
  *(_WORD *)(v9 - 2) = 8250;
  *(_WORD *)(v9 + (unsigned __int16)a6) = 2573;
  boost::basic_string_view<char,std::char_traits<char>>::copy(v12, a1 + 28, a4, 0);
  boost::basic_string_view<char,std::char_traits<char>>::copy(v11, (char *)v8 + (unsigned __int16)a1[24], a6, 0);
  return a1;
}

uint64_t boost::beast::http::basic_fields<std::allocator<char>>::key_compare::operator()<boost::basic_string_view<char,std::char_traits<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int16 *)(a3 + 48) - 2;
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  return boost::beast::iless::operator()(a1, *(char **)a2, v4, (char *)(a3 + 56), v5);
}

{
  unint64_t v3;
  unint64_t v4;

  v3 = *(unsigned __int16 *)(a2 + 48) - 2;
  v4 = *(_QWORD *)(a3 + 8);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  return boost::beast::iless::operator()(a1, (char *)(a2 + 56), v3, *(char **)a3, v4);
}

uint64_t boost::beast::iless::operator()(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t i;
  int v6;
  int v7;

  if (!a5)
    return 0;
  for (i = a5 - 1; a3; --i)
  {
    v6 = *a2;
    v7 = *a4;
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    if ((char)v6 < (char)v7)
      break;
    ++a2;
    ++a4;
    --a3;
    if ((char)v7 < (char)v6 || i == 0)
      return 0;
  }
  return 1;
}

uint64_t boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_before(uint64_t ***a1, _QWORD *a2, uint64_t *a3)
{
  _BYTE v6[8];
  uint64_t v7;

  v6[0] = 0;
  v7 = 0;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_before_check((uint64_t)a1, a2, (uint64_t)v6, 0);
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_commit((uint64_t)a1, a3, (uint64_t)v6);
  boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::rebalance_after_insertion(a1, (uint64_t *)*a3);
  return *a3;
}

uint64_t ***boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::rebalance_after_insertion(uint64_t ***result, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;

  *((_DWORD *)a2 + 6) = 0;
  v2 = *result;
  v3 = (uint64_t **)*a2;
  if ((uint64_t **)*a2 != *result)
  {
    do
    {
      v4 = *v3;
      v5 = *((_DWORD *)v3 + 6) == 1 || v4 == (uint64_t *)v2;
      if (v5)
        break;
      *((_DWORD *)v4 + 6) = 0;
      v6 = (uint64_t **)v4[1];
      v7 = v6;
      if (v3 == v6)
        v7 = (uint64_t **)v4[2];
      if (!v7 || *((_DWORD *)v7 + 6))
      {
        v8 = v3[1];
        if (v3 == v6)
        {
          if (v8 == a2)
          {
            a2 = (uint64_t *)v3;
          }
          else
          {
            v9 = (uint64_t *)a2[1];
            v3[2] = v9;
            if (v9)
              *v9 = (uint64_t)v3;
            a2[1] = (uint64_t)v3;
            *v3 = a2;
          }
          v11 = (uint64_t **)*v4;
          v15 = *(uint64_t **)(*v4 + 8);
          v16 = (uint64_t **)a2[2];
          v4[1] = (uint64_t)v16;
          if (v16)
            *v16 = v4;
          a2[2] = (uint64_t)v4;
          *v4 = (uint64_t)a2;
          *a2 = (uint64_t)v11;
          v5 = v15 == v4;
          v13 = 2;
          if (v5)
            v13 = 1;
          v14 = v11 == *result;
        }
        else
        {
          if (v8 == a2)
          {
            v10 = (uint64_t *)a2[2];
            v3[1] = v10;
            if (v10)
              *v10 = (uint64_t)v3;
            a2[2] = (uint64_t)v3;
            *v3 = a2;
            v8 = (uint64_t *)a2[1];
          }
          else
          {
            a2 = (uint64_t *)v3;
          }
          v11 = (uint64_t **)*v4;
          v12 = *(uint64_t **)(*v4 + 8);
          v4[2] = (uint64_t)v8;
          if (v8)
            *v8 = (uint64_t)v4;
          *v4 = (uint64_t)a2;
          *a2 = (uint64_t)v11;
          a2[1] = (uint64_t)v4;
          v5 = v12 == v4;
          v13 = 2;
          if (v5)
            v13 = 1;
          v14 = v11 == *result;
        }
        if (v14)
          v13 = 0;
        v11[v13] = a2;
        *((_DWORD *)a2 + 6) = 1;
        v2 = *result;
        break;
      }
      *((_DWORD *)v7 + 6) = 1;
      *((_DWORD *)v3 + 6) = 1;
      v3 = (uint64_t **)*v4;
      a2 = v4;
    }
    while ((uint64_t **)*v4 != v2);
  }
  *((_DWORD *)*v2 + 6) = 1;
  return result;
}

_QWORD **boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_before_check(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD **result;
  _QWORD *v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;

  result = (_QWORD **)*a2;
  v9 = *(_QWORD **)a1;
  if (*a2 != *(_QWORD *)(*(_QWORD *)a1 + 8))
  {
    result = (_QWORD **)boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<void *,false>>::prev_node(a2);
    v9 = *(_QWORD **)a1;
  }
  if (*v9)
  {
    v10 = (_QWORD **)*a2;
    v11 = *(_QWORD *)(*a2 + 8);
    *(_BYTE *)a3 = v11 == 0;
    if (!v11)
      result = v10;
  }
  else
  {
    *(_BYTE *)a3 = 1;
    result = (_QWORD **)*a2;
  }
  *(_QWORD *)(a3 + 8) = result;
  if (a4)
  {
    if (result == *(_QWORD ***)a1)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v13 = *result;
      do
      {
        v14 = (_QWORD **)v13;
        v13 = (_QWORD *)*v13;
        ++v12;
        v15 = result == v13;
        result = v14;
      }
      while (!v15);
    }
    *a4 = v12;
  }
  return result;
}

uint64_t boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<void *,false>>::insert_commit(uint64_t result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(a3 + 8);
  if (v3 == *(_QWORD **)result)
  {
    *v3 = *a2;
    *(_QWORD *)(*(_QWORD *)result + 16) = *a2;
    *(_QWORD *)(*(_QWORD *)result + 8) = *a2;
  }
  else
  {
    v4 = *a2;
    if (*(_BYTE *)a3)
    {
      v3[1] = v4;
      if (v3 == *(_QWORD **)(*(_QWORD *)result + 8))
        *(_QWORD *)(*(_QWORD *)result + 8) = *a2;
    }
    else
    {
      v3[2] = v4;
      if (v3 == *(_QWORD **)(*(_QWORD *)result + 16))
        *(_QWORD *)(*(_QWORD *)result + 16) = *a2;
    }
  }
  *(_QWORD *)*a2 = v3;
  *(_QWORD *)(*a2 + 16) = 0;
  *(_QWORD *)(*a2 + 8) = 0;
  return result;
}

uint64_t boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<void *,false>>::prev_node(_QWORD *a1)
{
  _BOOL4 is_header;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  BOOL v7;

  is_header = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<void *,false>>::is_header(a1);
  v3 = (_QWORD *)*a1;
  if (is_header)
  {
    v4 = *v3;
    do
    {
      result = v4;
      v4 = *(_QWORD *)(v4 + 16);
    }
    while (v4);
  }
  else
  {
    v6 = v3[1];
    if (v6)
    {
      do
      {
        result = v6;
        v6 = *(_QWORD *)(v6 + 16);
      }
      while (v6);
    }
    else
    {
      do
      {
        result = *v3;
        v7 = v3 == *(_QWORD **)(*v3 + 8);
        v3 = (_QWORD *)*v3;
      }
      while (v7);
    }
  }
  return result;
}

BOOL boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<void *,false>>::is_header(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  _BOOL8 result;

  v1 = (_QWORD *)*a1;
  result = 1;
  if (*(_QWORD *)*a1)
  {
    v3 = (_QWORD *)v1[1];
    v2 = (_QWORD *)v1[2];
    v4 = !v3 || v2 == 0;
    if (v4 || v3 != v2 && (_QWORD *)*v3 == v1 && (_QWORD *)*v2 == v1)
      return 0;
  }
  return result;
}

_BYTE *boost::optional_detail::optional_base<boost::beast::detail::static_ostream>::~optional_base(_BYTE *a1)
{
  if (*a1)
    boost::optional_detail::optional_base<boost::beast::detail::static_ostream>::destroy_impl((uint64_t)a1);
  return a1;
}

uint64_t boost::optional_detail::optional_base<boost::beast::detail::static_ostream>::destroy_impl(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = &unk_24D94D2E8;
  *(_QWORD *)(a1 + 128) = &unk_24D94D310;
  v2 = a1 + 128;
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer((void **)(a1 + 16));
  std::ostream::~ostream();
  result = MEMORY[0x219A198F4](v2);
  *(_BYTE *)a1 = 0;
  return result;
}

void boost::beast::detail::static_ostream::~static_ostream(boost::beast::detail::static_ostream *this)
{
  *(_QWORD *)this = &unk_24D94D2E8;
  *((_QWORD *)this + 15) = &unk_24D94D310;
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer((void **)this + 1);
  std::ostream::~ostream();
  MEMORY[0x219A198F4]((char *)this + 120);
}

{
  *(_QWORD *)this = &unk_24D94D2E8;
  *((_QWORD *)this + 15) = &unk_24D94D310;
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer((void **)this + 1);
  std::ostream::~ostream();
  MEMORY[0x219A198F4]((char *)this + 120);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::beast::detail::static_ostream::~static_ostream(boost::beast::detail::static_ostream *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D94D2E8;
  *((_QWORD *)v1 + 15) = &unk_24D94D310;
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer((void **)v1 + 1);
  std::ostream::~ostream();
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D94D2E8;
  *((_QWORD *)v1 + 15) = &unk_24D94D310;
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer((void **)v1 + 1);
  std::ostream::~ostream();
  MEMORY[0x219A198F4](v1 + 120);
  JUMPOUT(0x219A19A08);
}

void boost::beast::detail::static_ostream_buffer::~static_ostream_buffer(void **this)
{
  *this = &unk_24D94D3B8;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::streambuf::~streambuf();
}

{
  boost::beast::detail::static_ostream_buffer::~static_ostream_buffer(this);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::beast::detail::static_ostream_buffer::sync(boost::beast::detail::static_ostream_buffer *this)
{
  *((_QWORD *)this + 10) += *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  boost::beast::detail::static_ostream_buffer::prepare(this);
  return 0;
}

uint64_t boost::beast::detail::static_ostream_buffer::overflow(boost::beast::detail::static_ostream_buffer *this, uint64_t a2)
{
  _BYTE *v3;

  v3 = (_BYTE *)*((_QWORD *)this + 6);
  if ((_DWORD)a2 == -1)
  {
    *((_QWORD *)this + 10) += &v3[-*((_QWORD *)this + 5)];
  }
  else
  {
    *v3 = a2;
    *((_QWORD *)this + 10) += *((_QWORD *)this + 6) - *((_QWORD *)this + 5) + 1;
    boost::beast::detail::static_ostream_buffer::prepare(this);
  }
  return a2;
}

void boost::beast::detail::static_ostream_buffer::prepare(boost::beast::detail::static_ostream_buffer *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 10);
  if (v2 >= v3 - 1)
  {
    v7 = (char **)((char *)this + 88);
    if (*((char *)this + 111) < 0)
      v8 = *((_QWORD *)this + 12);
    else
      v8 = *((unsigned __int8 *)this + 111);
    std::string::resize((std::string *)((char *)this + 88), (unint64_t)((double)v2 * 1.5), 0);
    if (!v8)
    {
      v9 = (char *)this + 88;
      if (*((char *)this + 111) < 0)
        v9 = *v7;
      v10 = *((_QWORD *)this + 10);
      if (v10)
        memmove(v9, *((const void **)this + 8), v10);
    }
    v11 = *((_QWORD *)this + 10);
    v12 = (char *)this + 88;
    if (*((char *)this + 111) < 0)
      v12 = *v7;
    v5 = &v12[v11];
    if (*((char *)this + 111) < 0)
    {
      v7 = (char **)*((_QWORD *)this + 11);
      v13 = *((_QWORD *)this + 12);
    }
    else
    {
      v13 = *((unsigned __int8 *)this + 111);
    }
    v6 = (uint64_t)v7 + v13 + ~v11 + v11;
  }
  else
  {
    v4 = *((_QWORD *)this + 8);
    v5 = (char *)(v4 + v2);
    v6 = v4 + v3 - 2;
  }
  *((_QWORD *)this + 5) = v5;
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 7) = v6;
}

void boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::init(std::string **a1, uint64_t a2, _DWORD *a3)
{
  if (*(_BYTE *)a2)
    std::string::reserve(*a1, *(_QWORD *)(a2 + 8));
  *a3 = 0;
}

void sub_218623030(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  boost::system::error_code::operator=<boost::beast::http::error>(v1, 7u);
  __cxa_end_catch();
}

uint64_t boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::put<boost::asio::const_buffers_1>(std::string **a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  size_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *a1;
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    size = v7->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  std::string::resize(v7, size + v6, 0);
  *a3 = 0;
  v9 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
    memmove((char *)v9 + size, *(const void **)a2, v10);
  return v6;
}

_BYTE *boost::beast::http::detail::basic_parser_base::find_eol(_BYTE *a1, _BYTE *a2, _QWORD *a3)
{
  _BYTE *v3;
  _BYTE *result;

  if (a1 == a2)
    goto LABEL_10;
  v3 = a1 + 1;
  while (*(v3 - 1) != 13)
  {
    if (v3++ == a2)
      goto LABEL_10;
  }
  if (v3 == a2)
  {
LABEL_10:
    result = 0;
    *(_DWORD *)a3 = 0;
  }
  else if (*v3 == 10)
  {
    *(_DWORD *)a3 = 0;
    return v3 + 1;
  }
  else
  {
    boost::system::error_code::operator=<boost::beast::http::error>(a3, 0xBu);
    return 0;
  }
  return result;
}

_QWORD *boost::beast::http::detail::basic_parser_base::parse_chunk_extensions(uint64_t a1, unsigned __int8 **a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v10;
  int v11;
  unsigned int v13;
  char v14;
  unsigned __int8 *v15;
  unsigned __int8 *i;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  _QWORD *result;

  v4 = *a2;
  if (*a2 == a3)
    goto LABEL_55;
LABEL_2:
  v5 = *v4;
  if (v5 == 9 || v5 == 32)
  {
    while (1)
    {
      *a2 = ++v4;
      if (v4 == a3)
        goto LABEL_55;
      v6 = *v4;
      if (v6 != 9 && v6 != 32)
      {
        if (v6 != 59)
          goto LABEL_58;
        goto LABEL_10;
      }
    }
  }
  if (v5 == 59)
  {
LABEL_10:
    v7 = v4 + 1;
    *a2 = v4 + 1;
    if (v4 + 1 != a3)
    {
      v4 += 2;
      while (1)
      {
        v8 = *v7;
        if ((_DWORD)v8 != 32 && (_DWORD)v8 != 9)
          break;
        *a2 = ++v7;
        ++v4;
        if (v7 == a3)
          goto LABEL_55;
      }
      if (!boost::beast::http::detail::is_token_char(char)::tab[v8])
      {
LABEL_58:
        v13 = 22;
        return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
      }
      while (1)
      {
        *a2 = v4;
        if (v4 == a3)
          break;
        v11 = *v4++;
        v10 = v11;
        if (!boost::beast::http::detail::is_token_char(char)::tab[v11])
        {
          switch(v10)
          {
            case 9:
            case 32:
              *a2 = v4;
              if (v4 == a3)
                goto LABEL_55;
              while (1)
              {
                v10 = *v4;
                if (v10 != 32 && v10 != 9)
                  break;
                *a2 = ++v4;
                v13 = 3;
                if (v4 == a3)
                  return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
              }
              v14 = 1;
              break;
            case 59:
              goto LABEL_10;
            case 61:
              v15 = v4 + 1;
              *a2 = v4 + 1;
              if (v4 + 1 == a3)
                goto LABEL_55;
              for (i = v4 + 2; ; ++i)
              {
                v17 = *v15;
                if ((_DWORD)v17 != 9 && (_DWORD)v17 != 32)
                  break;
                *a2 = ++v15;
                v13 = 3;
                if (v15 == a3)
                  return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
              }
              if ((_DWORD)v17 == 34)
              {
                v18 = v15 + 1;
                *a2 = v15 + 1;
                if (v15 + 1 != a3)
                {
                  while (1)
                  {
                    v19 = *v18;
                    if (v19 == 92)
                    {
                      v18 = v15 + 2;
                      *a2 = v15 + 2;
                      if (v15 + 2 == a3)
                        goto LABEL_55;
                    }
                    else if (v19 == 34)
                    {
                      v4 = v15 + 2;
                      *a2 = v15 + 2;
                      goto LABEL_53;
                    }
                    v15 = v18++;
                    *a2 = v18;
                    v13 = 3;
                    if (v18 == a3)
                      return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
                  }
                }
              }
              else
              {
                if (!boost::beast::http::detail::is_token_char(char)::tab[v17])
                  goto LABEL_58;
                while (1)
                {
                  *a2 = i;
                  if (i == a3)
                    break;
                  v20 = *i++;
                  if (!boost::beast::http::detail::is_token_char(char)::tab[v20])
                  {
                    v4 = i - 1;
LABEL_53:
                    v13 = 3;
                    if (v4 != a3)
                      goto LABEL_2;
                    return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
                  }
                }
              }
              goto LABEL_55;
            default:
              v14 = 0;
              --v4;
              break;
          }
          if ((v14 & 1) == 0)
            return result;
          goto LABEL_58;
        }
      }
    }
LABEL_55:
    v13 = 3;
    return boost::system::error_code::operator=<boost::beast::http::error>(a4, v13);
  }
  return result;
}

uint64_t std::function<void ()(unsigned long long,boost::basic_string_view<char,std::char_traits<char>>,boost::system::error_code &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v8, a5);
}

uint64_t boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>::on_chunk_body_impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _QWORD v6[2];

  if (*(_QWORD *)(a1 + 248))
    return std::function<void ()(unsigned long long,boost::basic_string_view<char,std::char_traits<char>>,boost::system::error_code &)>::operator()(a1 + 224, a2, a3, a4, (uint64_t)a5);
  v6[0] = a3;
  v6[1] = a4;
  return boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>::reader::put<boost::asio::const_buffers_1>((std::string **)(a1 + 176), (uint64_t)v6, a5);
}

const char *boost::beast::http::detail::http_error_category::name(boost::beast::http::detail::http_error_category *this)
{
  return "beast.http";
}

_QWORD *boost::beast::http::detail::http_error_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v3;

  if ((a1 - 1) > 0x16)
    v3 = "beast.http error";
  else
    v3 = off_24D94D618[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

BOOL boost::beast::http::detail::http_error_category::equivalent(uint64_t a1, int a2, uint64_t a3)
{
  return *(_DWORD *)a3 == a2 && *(_QWORD *)(a3 + 8) == a1;
}

BOOL boost::beast::http::detail::http_error_category::equivalent(uint64_t a1, uint64_t a2, int a3)
{
  return *(_DWORD *)a2 == a3 && *(_QWORD *)(a2 + 8) == a1;
}

void boost::asio::detail::reactive_socket_service_base::async_receive<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  _BOOL4 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;

  if (*(_BYTE *)(a5 + 128))
    v10 = 1;
  else
    v10 = *(_BYTE *)(*(_QWORD *)(a5 + 64) + 304) != 0;
  v11 = a5;
  v14 = a5;
  v12 = boost::asio::detail::hook_allocator<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>>::allocate((uint64_t)&v14, 1);
  v13 = 0;
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::reactive_socket_recv_op((uint64_t)v12, *(_DWORD *)a2, *(_BYTE *)(a2 + 4), (_OWORD *)a3, a4, (int *)a5);
  v13 = v12;
  boost::asio::detail::reactive_socket_service_base::start_op(a1, a2, 2 * (a4 & 1), v12, v10, (a4 & 1) == 0, (*(_QWORD *)(a3 + 8) == 0) & (*(_BYTE *)(a2 + 4) >> 4));
  v12 = 0;
  v13 = 0;
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(&v11);
}

void sub_218623570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::asio::detail::hook_allocator<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>>::allocate(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (v3)
    v3 = (unsigned __int8 **)v3[1];
  return boost::asio::detail::thread_info_base::allocate<boost::asio::detail::thread_info_base::default_tag>(v3, 224 * a2);
}

uint64_t boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::reactive_socket_recv_op(uint64_t a1, int a2, char a3, _OWORD *a4, int a5, int *a6)
{
  uint64_t some_op;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::do_complete;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = boost::system::detail::system_category_ncx((boost::system::detail *)a1);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = boost::asio::detail::reactive_socket_recv_op_base<boost::asio::mutable_buffer>::do_perform;
  *(_DWORD *)(a1 + 56) = a2;
  *(_BYTE *)(a1 + 60) = a3;
  *(_OWORD *)(a1 + 64) = *a4;
  *(_DWORD *)(a1 + 80) = a5;
  some_op = boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op(a1 + 88, a6);
  boost::asio::detail::handler_work<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::strand<boost::asio::io_context::executor_type>>::start(some_op);
  return a1;
}

void boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::do_complete(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15[3];
  char v16;
  _BYTE v17[16];
  char v18[48];
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)(a2 + 88);
  v15[0] = (uint64_t)v4;
  v15[1] = a2;
  v15[2] = a2;
  v5 = *(_QWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 160);
  v13 = v5;
  v6 = *(std::__shared_weak_count **)(a2 + 176);
  v14 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op((uint64_t)v17, v4);
  v20 = *(_OWORD *)(a2 + 24);
  v21 = *(_QWORD *)(a2 + 40);
  v15[0] = (uint64_t)v17;
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(v15);
  if (a1)
  {
    boost::asio::detail::strand_executor_service::dispatch<boost::asio::io_context::executor_type const,boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>(&v13, &v12, (uint64_t)v17, (uint64_t)&v16);
    __dmb(0xBu);
  }
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(&v19);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v18);
  boost::asio::detail::scheduler::work_finished(*(boost::asio::detail::scheduler **)(v12 + 8));
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(v15);
}

void sub_218623798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;

  __dmb(0xBu);
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(&a24);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&a18);
  boost::asio::strand<boost::asio::io_context::executor_type>::on_work_finished((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24);
  boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(&a12);
  _Unwind_Resume(a1);
}

void boost::asio::detail::handler_work<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::strand<boost::asio::io_context::executor_type>>::start(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 72);
  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v5 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 232);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    v8 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 232);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
}

void boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>::ptr::reset(uint64_t *a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = a1[2];
  if (v2)
  {
    boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr((void **)(v2 + 152));
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard((_BYTE *)(v2 + 104));
    a1[2] = 0;
  }
  v3 = (_BYTE *)a1[1];
  if (v3)
  {
    v4 = *a1;
    boost::asio::detail::hook_allocator<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>>::deallocate((uint64_t)&v4, v3, 1);
    a1[1] = 0;
  }
}

void boost::asio::detail::hook_allocator<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::asio::detail::reactive_socket_recv_op<boost::asio::mutable_buffer,boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>>>::deallocate(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v5 = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (!v5 || ((v6 = (_QWORD *)v5[1], (unint64_t)(224 * a3) <= 0x3FC) ? (v7 = v6 == 0) : (v7 = 1), v7 || *v6))
  {
    operator delete(a2);
  }
  else
  {
    *a2 = a2[224 * a3];
    *v6 = a2;
  }
}

void boost::asio::detail::strand_executor_service::dispatch<boost::asio::io_context::executor_type const,boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  boost::system::detail *v10;
  void (*v11)(_QWORD, unsigned __int8 *, __int128 *, _QWORD);
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::contains(*a1))
  {
    boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op((uint64_t)&v26, (int *)a3);
    v30 = *(_OWORD *)(a3 + 136);
    v31 = *(_QWORD *)(a3 + 152);
    __dmb(9u);
    boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::operator()(&v26, v30, *((_QWORD *)&v30 + 1), v31, 1);
    __dmb(0xBu);
    boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(&v29);
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v27);
    return;
  }
  v23 = a4;
  v8 = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>>::allocate((uint64_t)&v26, 1);
  v24 = v8;
  v25 = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::do_complete;
  *((_DWORD *)v8 + 4) = 0;
  boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op((uint64_t)(v8 + 24), (int *)a3);
  *((_OWORD *)v8 + 10) = *(_OWORD *)(a3 + 136);
  *((_QWORD *)v8 + 22) = *(_QWORD *)(a3 + 152);
  v25 = v8;
  pthread_mutex_lock(*(pthread_mutex_t **)*a1);
  v9 = *a1;
  if (*(_BYTE *)(*a1 + 9))
  {
    v10 = (boost::system::detail *)pthread_mutex_unlock(*(pthread_mutex_t **)v9);
    v11 = (void (*)(_QWORD, unsigned __int8 *, __int128 *, _QWORD))*((_QWORD *)v8 + 1);
    LODWORD(v26) = 0;
    *((_QWORD *)&v26 + 1) = boost::system::detail::system_category_ncx(v10);
    v11(0, v8, &v26, 0);
  }
  else
  {
    if (!*(_BYTE *)(v9 + 8))
    {
      *(_BYTE *)(v9 + 8) = 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)v9);
      v13 = *a1;
      v14 = (unsigned __int8 **)(*a1 + 32);
      *(_QWORD *)v8 = 0;
      if (*(_QWORD *)(v13 + 40))
        v14 = *(unsigned __int8 ***)(v13 + 40);
      *v14 = v8;
      *(_QWORD *)(v13 + 40) = v8;
      v24 = 0;
      v25 = 0;
      v15 = a1[1];
      *(_QWORD *)&v26 = *a1;
      *((_QWORD *)&v26 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v27 = *a2;
      v28 = 1;
      v18 = (unint64_t *)(*(_QWORD *)(v27 + 8) + 232);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      boost::asio::io_context::executor_type::dispatch<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,std::allocator<void>>((uint64_t)a2, &v26, a4);
      boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v27);
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_10;
    }
    v12 = (unsigned __int8 **)(v9 + 16);
    *(_QWORD *)v8 = 0;
    if (*(_QWORD *)(v9 + 24))
      v12 = *(unsigned __int8 ***)(v9 + 24);
    *v12 = v8;
    *(_QWORD *)(v9 + 24) = v8;
    pthread_mutex_unlock(*(pthread_mutex_t **)*a1);
  }
  v24 = 0;
  v25 = 0;
LABEL_10:
  boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&v23);
}

void sub_218623BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _BYTE *v12;

  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v12);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::contains(uint64_t a1)
{
  _QWORD *result;

  result = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_);
  if (result)
  {
    while (*result != a1)
    {
      result = (_QWORD *)result[2];
      if (!result)
        return result;
    }
    return (_QWORD *)result[1];
  }
  return result;
}

void boost::asio::io_context::executor_type::dispatch<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,std::allocator<void>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  __int128 v10;
  unsigned __int8 *v11;
  char v12;
  char v13;

  if (boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::contains(*(_QWORD *)(*(_QWORD *)a1 + 8)))
  {
    v10 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v12 = *((_BYTE *)a2 + 24);
    *((_BYTE *)a2 + 24) = 0;
    __dmb(9u);
    boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::operator()((pthread_mutex_t ***)&v10);
    __dmb(0xBu);
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v11);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    *(_QWORD *)&v10 = a3;
    v9 = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>>::allocate((uint64_t)&v13, 1);
    *((_QWORD *)&v10 + 1) = v9;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,std::allocator<void>,boost::asio::detail::scheduler_operation>::do_complete;
    *((_DWORD *)v9 + 4) = 0;
    *(_OWORD *)(v9 + 24) = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)v9 + 5) = *((_QWORD *)a2 + 2);
    v9[48] = *((_BYTE *)a2 + 24);
    *((_BYTE *)a2 + 24) = 0;
    v11 = v9;
    boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(*(_QWORD *)a1 + 8), v9, 0);
    *((_QWORD *)&v10 + 1) = 0;
    v11 = 0;
    boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&v10);
  }
}

void sub_218623DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>>::allocate(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (v3)
    v3 = (unsigned __int8 **)v3[1];
  return boost::asio::detail::thread_info_base::allocate<boost::asio::detail::thread_info_base::default_tag>(v3, 192 * a2);
}

void boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::do_complete(uint64_t a1, uint64_t a2)
{
  _QWORD v4[3];
  char v5;
  _BYTE v6[16];
  _BYTE v7[48];
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4[0] = &v5;
  v4[1] = a2;
  v4[2] = a2;
  boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::read_some_op((uint64_t)v6, (int *)(a2 + 24));
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_QWORD *)(a2 + 176);
  boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v4);
  if (a1)
  {
    boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>::operator()(v6, v9, *((_QWORD *)&v9 + 1), v10, 1);
    __dmb(0xBu);
  }
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr(&v8);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v7);
  boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v4);
}

void sub_218623EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  __dmb(0xBu);
  boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr((void **)va2);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard((uint64_t *)va1);
  boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    boost::beast::handler_ptr<boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::data,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>::~handler_ptr((void **)(v2 + 88));
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard((_BYTE *)(v2 + 40));
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(_BYTE **)(a1 + 8);
  if (v3)
  {
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>>::deallocate((uint64_t)&v4, v3, 1);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::binder2<boost::beast::http::detail::read_some_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::parser<true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>>,boost::beast::http::detail::read_msg_op<boost::asio::basic_stream_socket<boost::asio::ip::tcp>,boost::beast::basic_flat_buffer<std::allocator<char>>,true,boost::beast::http::basic_string_body<char,std::char_traits<char>,std::allocator<char>>,std::allocator<char>,boost::asio::executor_binder<std::__bind<void (session::*)(boost::system::error_code,unsigned long),std::shared_ptr<session>,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,boost::asio::strand<boost::asio::io_context::executor_type>>>>,boost::system::error_code,unsigned long>,std::allocator<void>,boost::asio::detail::scheduler_operation>>::deallocate(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v5 = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (!v5 || ((v6 = (_QWORD *)v5[1], (unint64_t)(192 * a3) <= 0x3FC) ? (v7 = v6 == 0) : (v7 = 1), v7 || *v6))
  {
    operator delete(a2);
  }
  else
  {
    *a2 = a2[192 * a3];
    *v6 = a2;
  }
}

uint64_t boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::operator()(pthread_mutex_t ***a1)
{
  boost::system::detail *v2;
  pthread_mutex_t **v3;
  pthread_mutex_t *v4;
  pthread_mutex_t *sig;
  int v7;
  uint64_t *v8;
  pthread_mutex_t ***v9;
  _QWORD v10[3];

  v10[0] = *a1;
  v10[1] = v10;
  v10[2] = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_);
  v2 = (boost::system::detail *)pthread_setspecific(boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_, v10);
  v9 = a1;
  v7 = 0;
  v8 = boost::system::detail::system_category_ncx(v2);
  while (1)
  {
    v3 = *a1;
    v4 = (*a1)[4];
    if (!v4)
      break;
    sig = (pthread_mutex_t *)v4->__sig;
    v3[4] = (pthread_mutex_t *)v4->__sig;
    if (!sig)
      v3[5] = 0;
    v4->__sig = 0;
    (*(void (**)(pthread_mutex_t **, pthread_mutex_t *, int *, _QWORD))v4->__opaque)(v3, v4, &v7, 0);
  }
  boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::on_invoker_exit::~on_invoker_exit(&v9);
  return boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::context::~context((uint64_t)v10);
}

void sub_2186240BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  pthread_mutex_t ***v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, pthread_mutex_t ***);
  boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::on_invoker_exit::~on_invoker_exit((pthread_mutex_t ****)va);
  boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::context::~context((uint64_t)va1);
  _Unwind_Resume(a1);
}

pthread_mutex_t ****boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::on_invoker_exit::~on_invoker_exit(pthread_mutex_t ****a1)
{
  pthread_mutex_t **v2;
  pthread_mutex_t *v3;
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;
  pthread_mutex_t ***v6;
  char v8;
  pthread_mutex_t **v9;

  pthread_mutex_lock(***a1);
  v2 = **a1;
  v3 = v2[2];
  if (v3)
  {
    v4 = (pthread_mutex_t *)(v2 + 4);
    if (v2[5])
      v4 = v2[5];
    v4->__sig = (uint64_t)v3;
    v2[5] = v2[3];
    v2[2] = 0;
    v2[3] = 0;
    v2 = **a1;
  }
  v5 = v2[4];
  *((_BYTE *)v2 + 8) = v5 != 0;
  pthread_mutex_unlock(*v2);
  if (v5)
  {
    v6 = *a1;
    v9 = (*a1)[2];
    boost::asio::io_context::executor_type::post<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>>((uint64_t)&v9, (uint64_t)v6, (uint64_t)&v8);
  }
  return a1;
}

void boost::asio::io_context::executor_type::post<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char v9;

  v6 = a3;
  v5 = boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>>::allocate((uint64_t)&v9, 1);
  v7 = v5;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::do_complete;
  *((_DWORD *)v5 + 4) = 0;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a2 + 16);
  v5[48] = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a2 + 24) = 0;
  v8 = v5;
  boost::asio::detail::scheduler::post_immediate_completion(*(_QWORD *)(*(_QWORD *)a1 + 8), v5, 0);
  v7 = 0;
  v8 = 0;
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&v6);
}

void sub_21862421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>>::allocate(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;

  v3 = (unsigned __int8 **)pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (v3)
    v3 = (unsigned __int8 **)v3[1];
  return boost::asio::detail::thread_info_base::allocate<boost::asio::detail::thread_info_base::default_tag>(v3, a2 << 6);
}

void boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::do_complete(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[3];
  char v10;

  v9[0] = &v10;
  v9[1] = a2;
  v9[2] = a2;
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a2 + 48) = 0;
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v9);
  if (a1)
  {
    boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::operator()(&v6);
    __dmb(0xBu);
  }
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v9);
}

void sub_218624324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _BYTE *v13;

  __dmb(0xBu);
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(v13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = v2 + 24;
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard((_BYTE *)(v2 + 40));
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(_BYTE **)(a1 + 8);
  if (v4)
  {
    boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>>::deallocate((uint64_t)&v5, v4, 1);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void boost::asio::detail::recycling_allocator<boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>>::deallocate(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = pthread_getspecific(boost::asio::detail::call_stack<boost::asio::detail::thread_context,boost::asio::detail::thread_info_base>::top_);
  if (v5 && (unint64_t)(a3 << 6) <= 0x3FC && (v6 = (_QWORD *)v5[1]) != 0 && !*v6)
  {
    *a2 = a2[64 * a3];
    *v6 = a2;
  }
  else
  {
    operator delete(a2);
  }
}

uint64_t boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::context::~context(uint64_t a1)
{
  pthread_setspecific(boost::asio::detail::call_stack<boost::asio::detail::strand_executor_service::strand_impl,unsigned char>::top_, *(const void **)(a1 + 16));
  return a1;
}

void boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,std::allocator<void>,boost::asio::detail::scheduler_operation>::do_complete(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  _QWORD v9[3];
  char v10;

  v9[0] = &v10;
  v9[1] = a2;
  v9[2] = a2;
  v6 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a2 + 48) = 0;
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v9);
  if (a1)
  {
    boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>::operator()((pthread_mutex_t ***)&v6);
    __dmb(0xBu);
  }
  boost::asio::executor_work_guard<boost::asio::io_context::executor_type>::~executor_work_guard(&v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  boost::asio::detail::executor_op<boost::asio::detail::strand_executor_service::invoker<boost::asio::io_context::executor_type const>,boost::asio::detail::recycling_allocator<void>,boost::asio::detail::scheduler_operation>::ptr::reset((uint64_t)v9);
}

