void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t PlaybackInformation.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaybackInformation.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PlaybackInformation.title.modify())()
{
  return PlaybackInformation.title.modify;
}

uint64_t PlaybackInformation.artist.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaybackInformation.artist.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PlaybackInformation.artist.modify())()
{
  return PlaybackInformation.title.modify;
}

uint64_t PlaybackInformation.album.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaybackInformation.album.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PlaybackInformation.album.modify())()
{
  return PlaybackInformation.title.modify;
}

uint64_t PlaybackInformation.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PlaybackInformation() + 28);
  return outlined init with copy of URL?(v3, a1);
}

uint64_t type metadata accessor for PlaybackInformation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlaybackInformation;
  if (!type metadata singleton initialization cache for PlaybackInformation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24957EC00]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t PlaybackInformation.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PlaybackInformation() + 28);
  return outlined assign with take of URL?(a1, v3);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PlaybackInformation.url.modify())()
{
  type metadata accessor for PlaybackInformation();
  return PlaybackInformation.title.modify;
}

uint64_t PlaybackInformation.init(title:artist:album:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v9;

  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  v9 = (uint64_t)a8 + *(int *)(type metadata accessor for PlaybackInformation() + 28);
  return outlined init with take of URL?(a7, v9);
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  NSObject *v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t aBlock;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v69 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v69 - v12;
  type metadata accessor for BMPublisherOptions();
  v14 = type metadata accessor for Date();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(v11, 1, 1, v14);
  v16 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v13, (uint64_t)v11, 1, 1, 0);
  v17 = objc_msgSend((id)BiomeLibrary(), sel_Media);
  swift_unknownObjectRelease();
  v18 = objc_msgSend(v17, sel_NowPlaying);
  swift_unknownObjectRelease();
  v19 = objc_msgSend(v18, sel_publisherWithOptions_, v16);

  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0;
  v79 = closure #1 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation();
  v80 = 0;
  v21 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v76 = 1107296256;
  v77 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v78 = &block_descriptor;
  v22 = _Block_copy(&aBlock);
  v79 = partial apply for closure #2 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation();
  v80 = v20;
  aBlock = v21;
  v76 = 1107296256;
  v77 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMMediaNowPlaying>) -> (@unowned Bool);
  v78 = &block_descriptor_3;
  v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v24 = objc_msgSend(v19, sel_sinkWithCompletion_shouldContinue_, v22, v23);
  _Block_release(v23);
  _Block_release(v22);

  swift_beginAccess();
  if (!*(_QWORD *)(v20 + 16))
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.standard);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_2475DF000, v44, v45, "There was no active playback event found from the Now Playing Biome stream", v46, 2u);
      MEMORY[0x24957ECC0](v46, -1, -1);
      v47 = v16;
    }
    else
    {
      v47 = v44;
      v44 = v16;
    }

    goto LABEL_18;
  }
  v25 = *(id *)(v20 + 16);
  v26 = -[NSObject title](v25, sel_title);
  if (!v26)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.standard);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_2475DF000, v49, v50, "There was no title for the active playback event found from the Now Playing Biome stream", v51, 2u);
      MEMORY[0x24957ECC0](v51, -1, -1);
      v52 = v16;
    }
    else
    {
      v52 = v49;
      v49 = v25;
      v25 = v16;
    }

LABEL_18:
    v53 = type metadata accessor for PlaybackInformation();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(a1, 1, 1, v53);
    return swift_release();
  }
  v27 = v26;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v70 = v29;
  v71 = v28;

  v30 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v7, 1, 1, v30);
  v31 = -[NSObject iTunesAlbumIdentifier](v25, sel_iTunesAlbumIdentifier);
  if (v31)
  {
    v32 = v31;
    v72 = (uint64_t)v16;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

    v36 = -[NSObject iTunesStoreIdentifier](v25, sel_iTunesStoreIdentifier);
    if (v36)
    {
      v37 = v36;
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v38;

      v73 = 0;
      v74 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      v73 = 0xD00000000000001ELL;
      v74 = 0x800000024765AF40;
      v40._countAndFlagsBits = v33;
      v40._object = v35;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 4024639;
      v41._object = (void *)0xE300000000000000;
      String.append(_:)(v41);
      v42._countAndFlagsBits = v69;
      v42._object = v39;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      URL.init(string:)();
      swift_bridgeObjectRelease();
      outlined destroy of URL?((uint64_t)v7);
      outlined init with take of URL?((uint64_t)v5, (uint64_t)v7);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v16 = v72;
  }
  v54 = -[NSObject artist](v25, sel_artist);
  if (v54)
  {
    v55 = v54;
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v57 = v56;

  }
  else
  {
    v72 = 0;
    v57 = 0;
  }
  v58 = -[NSObject album](v25, sel_album);
  if (v58)
  {
    v59 = v58;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v61 = a1;
    v62 = v7;
    v63 = v16;
    v65 = v64;

    v7 = v62;
    a1 = v61;
  }
  else
  {

    v60 = 0;
    v65 = 0;
  }
  v66 = v70;
  *a1 = v71;
  a1[1] = v66;
  a1[2] = v72;
  a1[3] = v57;
  a1[4] = v60;
  a1[5] = v65;
  v67 = type metadata accessor for PlaybackInformation();
  outlined init with take of URL?((uint64_t)v7, (uint64_t)a1 + *(int *)(v67 + 28));
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(a1, 0, 1, v67);
  return swift_release();
}

id BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v14;
  id v15;

  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  isa = 0;
  if (v12(a1, 1, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, isa, v14, a3, a4, a5 & 1);

  return v15;
}

void closure #1 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;

  v1 = objc_msgSend(a1, sel_error);
  if (v1)
  {
    v2 = v1;
    if (one-time initialization token for standard != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.standard);
    v9 = v2;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      v8 = v9;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v7 = v10;

      _os_log_impl(&dword_2475DF000, v4, v5, "Failed to access Now Playing Biome stream with error: %@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v7, -1, -1);
      MEMORY[0x24957ECC0](v6, -1, -1);

    }
    else
    {

    }
  }
}

unint64_t type metadata accessor for BMPublisherOptions()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMPublisherOptions;
  if (!lazy cache variable for type metadata for BMPublisherOptions)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMPublisherOptions);
  }
  return result;
}

uint64_t sub_2475E4744()
{
  uint64_t v0;

  return swift_deallocObject();
}

void thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

BOOL closure #2 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  void *v6;

  v3 = objc_msgSend(a1, sel_eventBody);
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, sel_playbackState) == 1)
    {
      v5 = (void **)(a2 + 16);
      swift_beginAccess();
      v6 = *v5;
      *v5 = v4;

    }
    else
    {

    }
  }
  return v4 == 0;
}

BOOL partial apply for closure #2 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()(void *a1)
{
  uint64_t v1;

  return closure #2 in ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()(a1, v1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMMediaNowPlaying>) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t default argument 1 of LocalizedString(_:comment:tableName:)()
{
  return 0;
}

uint64_t default argument 1 of PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)()
{
  return 28261;
}

uint64_t default argument 6 of MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)()
{
  return 0;
}

uint64_t default argument 7 of MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)()
{
  return 0;
}

uint64_t default argument 8 of MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)()
{
  return 0;
}

uint64_t default argument 1 of TrialShortcodeFactors.lookupShortCodeOverride(for:languageCode:)()
{
  return 28261;
}

void default argument 1 of StringRake.rankedKeywords(from:style:maxCount:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t default argument 2 of StringRake.rankedKeywords(from:style:maxCount:)()
{
  return 10;
}

uint64_t default argument 4 of MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)()
{
  return 0;
}

uint64_t default argument 5 of MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)()
{
  return 0;
}

uint64_t default argument 6 of MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)()
{
  return 0;
}

uint64_t default argument 1 of ModelResponseManager.simpleTextSuggestions(for:includeCannedResponses:)()
{
  return 1;
}

id (*default argument 2 of static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:)())()
{
  return closure #1 in default argument 2 of static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t default argument 0 of lookupStopWords(forLanguageCode:)()
{
  return 28261;
}

void protocol witness for SetAlgebra.init() in conformance NSRegularExpressionOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance GEOTransportType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GEOTransportType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSCalendarUnit(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance NSCalendarUnit(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x24957EC18](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x24957EC18](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x24957EC18](&protocol conformance descriptor for CFStringRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BMUserFocusModeComputedSemanticType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTagScheme(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTagScheme(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NLTagScheme(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NLTagScheme(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLTagScheme@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x24957DF1C](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EKEventStatus(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24957EC18](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLTagScheme@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x24957DF1C](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLTagScheme@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLTagScheme()
{
  lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
  lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NLTagScheme(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTagScheme(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTagScheme(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NLTagScheme()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NLTagScheme()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLTagScheme()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlaybackInformation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for URL();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v9, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
      memcpy(v10, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v10, v9, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for PlaybackInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for PlaybackInformation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v9, v8, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for PlaybackInformation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for PlaybackInformation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithTake for PlaybackInformation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackInformation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2475E5560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackInformation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2475E55EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for PlaybackInformation()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

ValueMetadata *type metadata accessor for ActionCurrentlyPlayingDataSource()
{
  return &type metadata for ActionCurrentlyPlayingDataSource;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GEOArrivalTimeAndDistance(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GEOArrivalTimeAndDistance(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for GEOArrivalTimeAndDistance(uint64_t a1)
{
  type metadata accessor for GEOArrivalTimeAndDistance(a1, &lazy cache variable for type metadata for GEOArrivalTimeAndDistance);
}

void type metadata accessor for GEOTransportType(uint64_t a1)
{
  type metadata accessor for GEOArrivalTimeAndDistance(a1, (unint64_t *)&lazy cache variable for type metadata for GEOTransportType);
}

void type metadata accessor for NLTagScheme(uint64_t a1)
{
  type metadata accessor for GEOArrivalTimeAndDistance(a1, &lazy cache variable for type metadata for NLTagScheme);
}

uint64_t base witness table accessor for RawRepresentable in NLTagScheme()
{
  return lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLTagScheme()
{
  return lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

uint64_t lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24957EC18](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in NLTagScheme()
{
  return lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type NLTagScheme and conformance NLTagScheme, (uint64_t (*)(uint64_t))type metadata accessor for NLTagScheme, (uint64_t)&protocol conformance descriptor for NLTagScheme);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for GEOArrivalTimeAndDistance(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for GEOArrivalTimeAndDistance(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

void ActionLocationDataSource.geocoder.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

unint64_t SRSmartRepliesCaptionType.init(rawValue:)(unint64_t a1)
{
  return specialized SRSmartRepliesCaptionType.init(rawValue:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SRSmartRepliesCaptionType(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SRSmartRepliesCaptionType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SRSmartRepliesCaptionType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SRSmartRepliesCaptionType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SRSmartRepliesCaptionType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = specialized SRSmartRepliesCaptionType.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SRSmartRepliesCaptionType()
{
  lazy protocol witness table accessor for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SRSmartRepliesCaptionType()
{
  lazy protocol witness table accessor for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType();
  return RawRepresentable<>.encode(to:)();
}

id SRSmartRepliesCaption.__allocating_init(caption:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SRSmartRepliesCaption.init(caption:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SRSmartRepliesCaption();
  return objc_msgSendSuper2(&v6, sel_init);
}

id SRSmartRepliesCaption.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesCaption.init(coder:)(a1);
}

id SRSmartRepliesCaption.init(coder:)(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v3 = (void *)MEMORY[0x24957DF1C](0x6E6F6974706163, 0xE700000000000000);
  v4 = objc_msgSend(a1, sel_decodeObjectForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
  if (!v13)
  {

    outlined destroy of Any?((uint64_t)v12);
LABEL_12:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_12;
  }
  v5 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  v6 = objc_msgSend(a1, sel_decodeIntegerForKey_, v5);

  if ((unint64_t)v6 >= 5)
    v7 = 0;
  else
    v7 = v6;
  v8 = (void *)MEMORY[0x24957DF1C]();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v1, sel_initWithCaption_type_, v8, v7);

  return v9;
}

uint64_t static SRSmartRepliesCaption.supportsSecureCoding.getter()
{
  return 1;
}

id SRSmartRepliesCaption.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  id result;
  objc_super v10;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type);
  v6 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
  *(_QWORD *)v8 = v4;
  *((_QWORD *)v8 + 1) = v3;
  *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = v5;
  v10.receiver = v7;
  v10.super_class = v6;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v10, sel_init);
  a1[3] = v6;
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SRSmartRepliesCaption.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = (void *)MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption), *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8));
  v4 = (void *)MEMORY[0x24957DF1C](0x6E6F6974706163, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v6 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

}

Swift::Int SRSmartRepliesCaption.hash.getter()
{
  uint64_t v0;

  Hasher.init()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type));
  return Hasher.finalize()();
}

uint64_t SRSmartRepliesCaption.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  outlined init with copy of Any?(a1, (uint64_t)v6);
  if (!v7)
  {
    outlined destroy of Any?((uint64_t)v6);
    goto LABEL_11;
  }
  type metadata accessor for SRSmartRepliesCaption();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v3 = 0;
    return v3 & 1;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type) != *(_QWORD *)&v5[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type])
  {

    goto LABEL_11;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption) == *(_QWORD *)&v5[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption]
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8) == *(_QWORD *)&v5[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8])
  {

    v3 = 1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();

  }
  return v3 & 1;
}

uint64_t SRSmartRepliesCaption.caption.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SRSmartRepliesCaption.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type);
}

id SRSmartRepliesCaption.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesCaption.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesCaption.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesCaption();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t specialized SRSmartRepliesCaptionType.init(rawValue:)(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

uint64_t type metadata accessor for SRSmartRepliesCaption()
{
  return objc_opt_self();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesCaptionType, &type metadata for SRSmartRepliesCaptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesCaptionType, &type metadata for SRSmartRepliesCaptionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesCaptionType and conformance SRSmartRepliesCaptionType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesCaptionType()
{
  return &type metadata for SRSmartRepliesCaptionType;
}

uint64_t method lookup function for SRSmartRepliesCaption()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesCaption.__allocating_init(caption:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SRSmartRepliesCaption.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SRSmartRepliesCaption.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SRSmartRepliesCaption.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

unint64_t SRSmartRepliesSuggestionRequestType.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance SRSmartRepliesSuggestionRequestType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

id SRSmartRepliesSuggestionRequest.__allocating_init(type:receivedMessages:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SRSmartRepliesSuggestionRequest.init(type:receivedMessages:)(a1, a2);
}

id SRSmartRepliesSuggestionRequest.init(type:receivedMessages:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  objc_super v13;

  v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includeLowConfidenceSuggestions] = 1;
  v5 = &v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_skipPopulatingMetadata];
  v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_skipPopulatingMetadata] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_senderMessages] = 0;
  v6 = &v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_context];
  *v6 = 0;
  v6[1] = 0;
  v7 = &v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageCode];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageLastChangedDate];
  v9 = type metadata accessor for Date();
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includesDynamicSuggestions] = 1;
  v10(&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_requestDate], 1, 1, v9);
  *(_QWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_recipients] = 0;
  *(_OWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale] = xmmword_247655FB0;
  *(_OWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage] = xmmword_247655FB0;
  v11 = &v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___concatenatedReceivedText];
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_type] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_receivedMessages] = a2;
  swift_beginAccess();
  *v5 = 0;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestionRequest();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for SRSmartRepliesSuggestionRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SRSmartRepliesSuggestionRequest;
  if (!type metadata singleton initialization cache for SRSmartRepliesSuggestionRequest)
    return swift_getSingletonMetadata();
  return result;
}

char *SRSmartRepliesSuggestionRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesSuggestionRequest.init(coder:)(a1);
}

char *SRSmartRepliesSuggestionRequest.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  Class isa;
  id v15;
  char *v16;
  void *v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  void *v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  void *v47;
  id v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  char *v56;
  _QWORD v58[14];
  __int128 v59;
  __int128 v60;
  _BYTE v61[24];
  uint64_t v62;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v4 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v58 - v7;
  v9 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765B130);
  v10 = objc_msgSend(a1, sel_decodeObjectForKey_, v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (!v62)
  {

    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_13:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SRSmartRepliesMessage]);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_13;
  }
  v11 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  v12 = objc_msgSend(a1, sel_decodeIntegerForKey_, v11);

  if (v12 == (id)2)
    v13 = 2;
  else
    v13 = v12 == (id)1;
  type metadata accessor for SRSmartRepliesMessage();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v2, sel_initWithType_receivedMessages_, v13, isa);

  v16 = (char *)v15;
  v17 = (void *)MEMORY[0x24957DF1C](0xD00000000000001FLL, 0x800000024765B150);
  v18 = objc_msgSend(a1, sel_decodeBoolForKey_, v17);

  v19 = (unsigned __int8 *)&v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includeLowConfidenceSuggestions];
  swift_beginAccess();
  *v19 = v18;
  v20 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765B170);
  v21 = objc_msgSend(a1, sel_decodeBoolForKey_, v20);

  v22 = (unsigned __int8 *)&v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_skipPopulatingMetadata];
  swift_beginAccess();
  *v22 = v21;
  v23 = (void *)MEMORY[0x24957DF1C](0x654D7265646E6573, 0xEE00736567617373);
  v24 = objc_msgSend(a1, sel_decodeObjectForKey_, v23);

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    if (swift_dynamicCast())
      v25 = v58[11];
    else
      v25 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v25 = 0;
  }
  v26 = &v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_senderMessages];
  swift_beginAccess();
  *(_QWORD *)v26 = v25;
  swift_bridgeObjectRelease();
  v27 = (void *)MEMORY[0x24957DF1C](0x747865746E6F63, 0xE700000000000000);
  v28 = objc_msgSend(a1, sel_decodeObjectForKey_, v27);

  if (v28)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    v29 = swift_dynamicCast();
    if (v29)
      v30 = v58[8];
    else
      v30 = 0;
    if (v29)
      v31 = v58[9];
    else
      v31 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v30 = 0;
    v31 = 0;
  }
  v32 = &v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_context];
  swift_beginAccess();
  *(_QWORD *)v32 = v30;
  *((_QWORD *)v32 + 1) = v31;
  swift_bridgeObjectRelease();
  v33 = (void *)MEMORY[0x24957DF1C](0x65676175676E616CLL, 0xEC00000065646F43);
  v34 = objc_msgSend(a1, sel_decodeObjectForKey_, v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    v35 = swift_dynamicCast();
    if (v35)
      v36 = v58[5];
    else
      v36 = 0;
    if (v35)
      v37 = v58[6];
    else
      v37 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v36 = 0;
    v37 = 0;
  }
  v38 = &v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageCode];
  swift_beginAccess();
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  swift_bridgeObjectRelease();
  v39 = (void *)MEMORY[0x24957DF1C](0xD000000000000017, 0x800000024765B190);
  v40 = objc_msgSend(a1, sel_decodeObjectForKey_, v39);

  if (v40)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    v41 = type metadata accessor for Date();
    v42 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v8, v42 ^ 1u, 1, v41);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v43 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v8, 1, 1, v43);
  }
  v44 = (uint64_t)&v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageLastChangedDate];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v8, v44);
  swift_endAccess();
  v45 = (void *)MEMORY[0x24957DF1C](0xD00000000000001ALL, 0x800000024765B1B0);
  LOBYTE(v44) = objc_msgSend(a1, sel_decodeBoolForKey_, v45);

  v46 = &v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includesDynamicSuggestions];
  swift_beginAccess();
  *v46 = v44;
  v47 = (void *)MEMORY[0x24957DF1C](0x4474736575716572, 0xEB00000000657461);
  v48 = objc_msgSend(a1, sel_decodeObjectForKey_, v47);

  if (v48)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    v49 = type metadata accessor for Date();
    v50 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v6, v50 ^ 1u, 1, v49);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v51 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v6, 1, 1, v51);
  }
  v52 = (uint64_t)&v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_requestDate];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v6, v52);
  swift_endAccess();
  v53 = (void *)MEMORY[0x24957DF1C](0x6E65697069636572, 0xEA00000000007374);
  v54 = objc_msgSend(a1, sel_decodeObjectForKey_, v53);

  if (v54)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

  }
  else
  {

    v59 = 0u;
    v60 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v59, (uint64_t)v61);
  if (v62)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
      v55 = v58[1];
    else
      v55 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v55 = 0;
  }
  v56 = &v16[OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_recipients];
  swift_beginAccess();
  *(_QWORD *)v56 = v55;

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static SRSmartRepliesSuggestionRequest.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SRSmartRepliesSuggestionRequest.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE8))(v5);
  v10 = (*(uint64_t (**)(void))((*v8 & *v1) + 0x100))();
  v11 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionRequest();
  v12 = objc_allocWithZone(v11);
  v13 = SRSmartRepliesSuggestionRequest.init(type:receivedMessages:)(v9, v10);
  v14 = (*(uint64_t (**)(void))((*v8 & *v2) + 0x118))();
  v15 = (*(uint64_t (**)(_QWORD))((*v8 & *v13) + 0x120))(v14 & 1);
  v16 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x130))(v15);
  v17 = (*(uint64_t (**)(_QWORD))((*v8 & *v13) + 0x138))(v16 & 1);
  v18 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x148))(v17);
  v19 = (*(uint64_t (**)(uint64_t))((*v8 & *v13) + 0x150))(v18);
  v20 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x160))(v19);
  v21 = (*(uint64_t (**)(uint64_t))((*v8 & *v13) + 0x168))(v20);
  v22 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x178))(v21);
  v23 = (*(uint64_t (**)(uint64_t))((*v8 & *v13) + 0x180))(v22);
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x190))(v23);
  v24 = (*(uint64_t (**)(char *))((*v8 & *v13) + 0x198))(v7);
  v25 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x1A8))(v24);
  v26 = (*(uint64_t (**)(_QWORD))((*v8 & *v13) + 0x1B0))(v25 & 1);
  (*(void (**)(uint64_t))((*v8 & *v2) + 0x1C0))(v26);
  v27 = (*(uint64_t (**)(char *))((*v8 & *v13) + 0x1C8))(v7);
  v28 = (*(uint64_t (**)(uint64_t))((*v8 & *v2) + 0x1D8))(v27);
  result = (*(uint64_t (**)(uint64_t))((*v8 & *v13) + 0x1E0))(v28);
  a1[3] = v11;
  *a1 = v13;
  return result;
}

Swift::Void __swiftcall SRSmartRepliesSuggestionRequest.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  Class isa;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  NSArray v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  Class v32;
  void *v33;
  Class v34;
  void *v35;
  NSArray v36;
  void *v37;
  _QWORD v38[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v38 - v9;
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v38[1] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE8))(v8);
  v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v13 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v12, v13);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v11 & *v2) + 0x100))();
  type metadata accessor for SRSmartRepliesMessage();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765B130);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v15);

  LOBYTE(v15) = (*(uint64_t (**)(void))((*v11 & *v2) + 0x118))();
  v16 = (void *)MEMORY[0x24957DF1C](0xD00000000000001FLL, 0x800000024765B150);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15 & 1, v16);

  LOBYTE(v15) = (*(uint64_t (**)(void))((*v11 & *v2) + 0x130))();
  v17 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765B170);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15 & 1, v17);

  LOBYTE(v15) = (*(uint64_t (**)(void))((*v11 & *v2) + 0x1A8))();
  v18 = (void *)MEMORY[0x24957DF1C](0xD00000000000001ALL, 0x800000024765B1B0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15 & 1, v18);

  if ((*(uint64_t (**)(void))((*v11 & *v2) + 0x148))())
  {
    v19.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v19.super.isa = 0;
  }
  v20 = (void *)MEMORY[0x24957DF1C](0x654D7265646E6573, 0xEE00736567617373);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19.super.isa, v20);
  swift_unknownObjectRelease();

  v21 = (*(uint64_t (**)(void))((*v11 & *v2) + 0x160))();
  if (v22)
  {
    v23 = MEMORY[0x24957DF1C](v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  v24 = (void *)MEMORY[0x24957DF1C](0x747865746E6F63, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);
  swift_unknownObjectRelease();

  v25 = (*(uint64_t (**)(void))((*v11 & *v2) + 0x178))();
  if (v26)
  {
    v27 = MEMORY[0x24957DF1C](v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
  }
  v28 = (void *)MEMORY[0x24957DF1C](0x65676175676E616CLL, 0xEC00000065646F43);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v11 & *v2) + 0x190))();
  v29 = type metadata accessor for Date();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = 0;
  if (v31(v10, 1, v29) != 1)
  {
    v32 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v29);
  }
  v33 = (void *)MEMORY[0x24957DF1C](0xD000000000000017, 0x800000024765B190);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v32, v33);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v11 & *v2) + 0x1C0))();
  if (v31(v7, 1, v29) == 1)
  {
    v34 = 0;
  }
  else
  {
    v34 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v29);
  }
  v35 = (void *)MEMORY[0x24957DF1C](0x4474736575716572, 0xEB00000000657461);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v34, v35);
  swift_unknownObjectRelease();

  if ((*(uint64_t (**)(void))((*v11 & *v2) + 0x1D8))())
  {
    v36.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v36.super.isa = 0;
  }
  v37 = (void *)MEMORY[0x24957DF1C](0x6E65697069636572, 0xEA00000000007374);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v36.super.isa, v37);
  swift_unknownObjectRelease();

}

Swift::Int SRSmartRepliesSuggestionRequest.hash.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  Swift::UInt v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _OWORD v49[4];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v48 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v46 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v46 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v46 - v15;
  v17 = Hasher.init()();
  v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v19 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))(v17);
  Hasher._combine(_:)(v19);
  v20 = (*(uint64_t (**)(void))((*v18 & *v0) + 0x100))();
  specialized Array<A>.hash(into:)((uint64_t)v49, v20);
  v21 = swift_bridgeObjectRelease();
  v22 = (*(uint64_t (**)(uint64_t))((*v18 & *v0) + 0x118))(v21);
  Hasher._combine(_:)(v22 & 1);
  v23 = (*(uint64_t (**)(void))((*v18 & *v0) + 0x130))();
  Hasher._combine(_:)(v23 & 1);
  v24 = (*(uint64_t (**)(void))((*v18 & *v0) + 0x1A8))();
  Hasher._combine(_:)(v24 & 1);
  v25 = (*(uint64_t (**)(void))((*v18 & *v0) + 0x148))();
  v47 = v11;
  if (v25)
  {
    v26 = v25;
    v27 = v5;
    v28 = v3;
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v49, v26);
    v29 = swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v5;
    v28 = v3;
    Hasher._combine(_:)(0);
  }
  (*(void (**)(uint64_t))((*v18 & *v0) + 0x160))(v29);
  if (v30)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v31 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(uint64_t))((*v18 & *v0) + 0x178))(v31);
  if (v32)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v33 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v34 = v28;
  v35 = v27;
  v36 = (uint64_t)v47;
  (*(void (**)(uint64_t))((*v18 & *v0) + 0x190))(v33);
  outlined init with copy of Date?((uint64_t)v16, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v37(v14, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v35, v14, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v2);
  }
  v38 = outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t))((*v18 & *v0) + 0x1C0))(v38);
  v39 = v48;
  outlined init with copy of Date?(v36, v48, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (v37((char *)v39, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v35, v39, v2);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v2);
  }
  v40 = outlined destroy of Any?(v36, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v41 = (*(uint64_t (**)(uint64_t))((*v18 & *v1) + 0x1D8))(v40);
  if (v41)
  {
    v42 = v41;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v42 + 16));
    v43 = *(_QWORD *)(v42 + 16);
    if (v43)
    {
      v44 = v42 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v44 += 16;
        --v43;
      }
      while (v43);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v53 = v49[2];
  v54 = v49[3];
  v55 = v50;
  v51 = v49[0];
  v52 = v49[1];
  return Hasher.finalize()();
}

uint64_t SRSmartRepliesSuggestionRequest.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned __int8 v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  int v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t (*v60)(_QWORD *);
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void (*v69)(_BYTE *, uint64_t);
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  char v82;
  void (*v83)(_BYTE *, uint64_t);
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _BYTE v88[4];
  int v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  _QWORD *v100;
  _BYTE v101[24];
  uint64_t v102;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v97 = &v88[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v88[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v88[-v11];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v96 = &v88[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v14);
  v98 = &v88[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  v99 = &v88[-v19];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = &v88[-v21];
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = &v88[-v24];
  MEMORY[0x24BDAC7A8](v23);
  v27 = &v88[-v26];
  outlined init with copy of Date?(a1, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v102)
  {
    outlined destroy of Any?((uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  type metadata accessor for SRSmartRepliesSuggestionRequest();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v94 = v5;
    v95 = v7;
    v93 = v10;
    v28 = v100;
    v29 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v30 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xE8))();
    if (v30 != (*(uint64_t (**)(void))((*v29 & *v28) + 0xE8))())
      goto LABEL_8;
    v92 = v4;
    v31 = (*(uint64_t (**)(void))((*v29 & *v2) + 0x100))();
    v32 = (*(uint64_t (**)(void))((*v29 & *v28) + 0x100))();
    v33 = v2;
    v34 = v28;
    v35 = specialized static Array<A>.== infix(_:_:)(v31, v32, (uint64_t (*)(_QWORD))type metadata accessor for SRSmartRepliesMessage);
    swift_bridgeObjectRelease();
    v36 = swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {

      goto LABEL_10;
    }
    v37 = (*(uint64_t (**)(uint64_t))((*v29 & *v33) + 0x118))(v36);
    v28 = v34;
    if (((v37 ^ (*(unsigned int (**)(void))((*v29 & *v34) + 0x118))()) & 1) != 0)
      goto LABEL_8;
    v38 = (*(uint64_t (**)(void))((*v29 & *v33) + 0x130))();
    if (((v38 ^ (*(unsigned int (**)(void))((*v29 & *v34) + 0x130))()) & 1) != 0)
      goto LABEL_8;
    v39 = v33;
    v40 = (*(uint64_t (**)(void))((*v29 & *v33) + 0x1A8))();
    if (((v40 ^ (*(unsigned int (**)(void))((*v29 & *v28) + 0x1A8))()) & 1) != 0)
      goto LABEL_8;
    v43 = (*(uint64_t (**)(void))((*v29 & *v33) + 0x148))();
    v44 = (*(uint64_t (**)(void))((*v29 & *v28) + 0x148))();
    v45 = v44;
    if (v43)
    {
      if (!v44)
        goto LABEL_31;
      v46 = swift_bridgeObjectRetain();
      v47 = specialized static Array<A>.== infix(_:_:)(v46, v45, (uint64_t (*)(_QWORD))type metadata accessor for SRSmartRepliesMessage);
      swift_bridgeObjectRelease();
      v44 = swift_bridgeObjectRelease_n();
      if ((v47 & 1) == 0)
        goto LABEL_8;
    }
    else if (v44)
    {
      goto LABEL_34;
    }
    v48 = v29;
    v49 = (*(uint64_t (**)(uint64_t))((*v29 & *v39) + 0x160))(v44);
    v51 = v50;
    v52 = (*(uint64_t (**)(void))((*v48 & *v28) + 0x160))();
    if (!v51)
    {
      v55 = v95;
      if (v53)
        goto LABEL_34;
      goto LABEL_26;
    }
    if (v53)
    {
      v54 = v49;
      v55 = v95;
      if (v54 == v52 && v51 == v53)
      {
        swift_bridgeObjectRelease();
        v52 = swift_bridgeObjectRelease();
      }
      else
      {
        LODWORD(v91) = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v52 = swift_bridgeObjectRelease();
        if ((v91 & 1) == 0)
          goto LABEL_8;
      }
LABEL_26:
      v91 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v48 & *v39) + 0x178))(v52);
      v57 = v56;
      v58 = (_QWORD *)(*(uint64_t (**)(void))((*v48 & *v28) + 0x178))();
      if (v57)
      {
        if (v59)
        {
          if (v91 == v58 && v57 == v59)
          {
            swift_bridgeObjectRelease();
            v58 = (_QWORD *)swift_bridgeObjectRelease();
            goto LABEL_37;
          }
          LODWORD(v91) = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v58 = (_QWORD *)swift_bridgeObjectRelease();
          if ((v91 & 1) != 0)
          {
LABEL_37:
            v60 = *(uint64_t (**)(_QWORD *))((*v48 & *v39) + 0x190);
            v90 = v39;
            v61 = v60(v58);
            v62 = *(void (**)(uint64_t))((*v48 & *v28) + 0x190);
            v91 = v28;
            v62(v61);
            v63 = (uint64_t)&v12[*(int *)(v55 + 48)];
            outlined init with copy of Date?((uint64_t)v27, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Date?);
            outlined init with copy of Date?((uint64_t)v25, v63, (uint64_t *)&demangling cache variable for type metadata for Date?);
            v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
            v65 = v92;
            if (v64((uint64_t)v12, 1, v92) == 1)
            {
              outlined destroy of Any?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Date?);
              outlined destroy of Any?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Date?);
              if (v64(v63, 1, v65) == 1)
              {
                v66 = outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_45:
                v70 = (_QWORD *)MEMORY[0x24BEE4EA0];
                v71 = (uint64_t)v99;
                v72 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v90) + 0x1C0))(v66);
                v73 = (uint64_t)v98;
                (*(void (**)(uint64_t))((*v70 & *v91) + 0x1C0))(v72);
                v74 = (uint64_t)v93;
                v75 = (uint64_t)&v93[*(int *)(v55 + 48)];
                outlined init with copy of Date?(v71, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined init with copy of Date?(v73, v75, (uint64_t *)&demangling cache variable for type metadata for Date?);
                v76 = v92;
                if (v64(v74, 1, v92) == 1)
                {
                  outlined destroy of Any?(v73, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  outlined destroy of Any?(v71, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  if (v64(v75, 1, v76) == 1)
                  {
                    v77 = outlined destroy of Any?(v74, (uint64_t *)&demangling cache variable for type metadata for Date?);
                    v78 = v91;
                    goto LABEL_52;
                  }
LABEL_50:
                  outlined destroy of Any?(v74, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));

                  goto LABEL_10;
                }
                v79 = v96;
                outlined init with copy of Date?(v74, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for Date?);
                if (v64(v75, 1, v76) == 1)
                {
                  outlined destroy of Any?(v73, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  outlined destroy of Any?(v71, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  (*(void (**)(_BYTE *, uint64_t))(v94 + 8))(v79, v76);
                  v74 = (uint64_t)v93;
                  goto LABEL_50;
                }
                v80 = v94;
                v81 = v97;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 32))(v97, v75, v76);
                lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE958]);
                v82 = dispatch thunk of static Equatable.== infix(_:_:)();
                v83 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
                v83(v81, v76);
                outlined destroy of Any?(v73, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined destroy of Any?(v71, (uint64_t *)&demangling cache variable for type metadata for Date?);
                v83(v79, v76);
                v77 = outlined destroy of Any?((uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for Date?);
                v78 = v91;
                if ((v82 & 1) != 0)
                {
LABEL_52:
                  v84 = (_QWORD *)MEMORY[0x24BEE4EA0];
                  v85 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v90) + 0x1D8))(v77);
                  v86 = (_QWORD *)(*(uint64_t (**)(void))((*v84 & *v78) + 0x1D8))();
                  v87 = v86;
                  if (v85)
                  {
                    if (v86)
                    {
                      v41 = specialized static Array<A>.== infix(_:_:)(v85, v86);

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      return v41 & 1;
                    }

                  }
                  else
                  {

                    if (!v87)
                    {
                      v41 = 1;
                      return v41 & 1;
                    }
                  }
                  goto LABEL_32;
                }
LABEL_43:

                goto LABEL_10;
              }
            }
            else
            {
              outlined init with copy of Date?((uint64_t)v12, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Date?);
              if (v64(v63, 1, v65) != 1)
              {
                v67 = v94;
                v68 = v97;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 32))(v97, v63, v65);
                lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE958]);
                v89 = dispatch thunk of static Equatable.== infix(_:_:)();
                v69 = *(void (**)(_BYTE *, uint64_t))(v67 + 8);
                v69(v68, v65);
                outlined destroy of Any?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined destroy of Any?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Date?);
                v69(v22, v65);
                v66 = outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Date?);
                if ((v89 & 1) == 0)
                  goto LABEL_43;
                goto LABEL_45;
              }
              outlined destroy of Any?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Date?);
              outlined destroy of Any?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Date?);
              (*(void (**)(_BYTE *, uint64_t))(v94 + 8))(v22, v65);
            }
            outlined destroy of Any?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
            goto LABEL_43;
          }
LABEL_8:

          goto LABEL_10;
        }
        goto LABEL_31;
      }
      if (!v59)
        goto LABEL_37;
LABEL_34:

      goto LABEL_32;
    }
LABEL_31:

LABEL_32:
    swift_bridgeObjectRelease();
  }
LABEL_10:
  v41 = 0;
  return v41 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for SRSmartRepliesSuggestion);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  void *v14;
  id v15;
  void *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v32)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v8 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v7 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v7)
    goto LABEL_37;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0)
    v9 = v5;
  if (!v6)
    v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  v10 = v4 & 0xFFFFFFFFFFFFFF8;
  v11 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v8)
    v11 = v12;
  if (v9 == v11)
  {
LABEL_37:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v33 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v5 + 32); ; result = (id)MEMORY[0x24957E42C](0, v5))
  {
    v14 = result;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    v15 = (id)MEMORY[0x24957E42C](0, v4);
LABEL_21:
    v16 = v15;
    a3 = (uint64_t (*)(_QWORD))a3(0);
    v17 = static NSObject.== infix(_:_:)();

    if ((v17 & 1) == 0)
      goto LABEL_48;
    v18 = v7 - 1;
    if (v7 == 1)
      return (id)(v7 & 1);
    if (((v4 | v5) & 0xC000000000000001) != 0)
    {
      v19 = 0;
      v20 = v7 - 2;
      while (v18 != v19)
      {
        v7 = v19 + 1;
        if (v33)
          v21 = (id)MEMORY[0x24957E42C](v19 + 1, v5);
        else
          v21 = *(id *)(v5 + 40 + 8 * v19);
        v22 = v21;
        if ((v4 & 0xC000000000000001) != 0)
        {
          v23 = (id)MEMORY[0x24957E42C](v19 + 1, v4);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v10 + 16))
            goto LABEL_53;
          v23 = *(id *)(v4 + 40 + 8 * v19);
        }
        v24 = v23;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0 && v20 != v19++)
          continue;
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      v26 = *(_QWORD *)(v10 + 16);
      if (v26 <= 1)
        v26 = 1;
      v27 = v26 - 1;
      v28 = (void **)(v5 + 40);
      v10 = v4 + 40;
      while (v18)
      {
        if (!v27)
          goto LABEL_52;
        v30 = *v28++;
        v29 = v30;
        v31 = *(void **)v10;
        v10 += 8;
        v4 = v29;
        v5 = v31;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0)
        {
          --v27;
          if (--v18)
            continue;
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = *(id *)(v4 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t SRSmartRepliesSuggestionRequest.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_type;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t SRSmartRepliesSuggestionRequest.type.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_type);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.type.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.receivedMessages.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SRSmartRepliesSuggestionRequest.receivedMessages.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_receivedMessages);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SRSmartRepliesSuggestionRequest.receivedMessages.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includeLowConfidenceSuggestions);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includeLowConfidenceSuggestions);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_skipPopulatingMetadata);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_skipPopulatingMetadata);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.senderMessages.getter()
{
  return SRSmartRepliesSuggestionRequest.senderMessages.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SRSmartRepliesSuggestionRequest.senderMessages.setter(uint64_t a1)
{
  return SRSmartRepliesSuggestionRequest.senderMessages.setter(a1, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_senderMessages);
}

uint64_t (*SRSmartRepliesSuggestionRequest.senderMessages.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.context.getter()
{
  return SRSmartRepliesSuggestionRequest.context.getter(&OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_context);
}

uint64_t SRSmartRepliesSuggestionRequest.context.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.context.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_context);
}

uint64_t (*SRSmartRepliesSuggestionRequest.context.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

id @objc SRSmartRepliesSuggestionRequest.context.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  v4 = v3[1];
  if (!v4)
    return 0;
  v5 = *v3;
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x24957DF1C](v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t SRSmartRepliesSuggestionRequest.languageCode.getter()
{
  return SRSmartRepliesSuggestionRequest.context.getter(&OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageCode);
}

uint64_t SRSmartRepliesSuggestionRequest.context.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t @objc SRSmartRepliesSuggestionRequest.context.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t SRSmartRepliesSuggestionRequest.languageCode.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.context.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageCode);
}

uint64_t SRSmartRepliesSuggestionRequest.context.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SRSmartRepliesSuggestionRequest.languageCode.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter@<X0>(uint64_t a1@<X8>)
{
  return SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter(&OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageLastChangedDate, a1);
}

uint64_t SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter(uint64_t a1)
{
  return SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter(a1, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_languageLastChangedDate);
}

uint64_t key path setter for SRSmartRepliesSuggestionRequest.languageLastChangedDate : SRSmartRepliesSuggestionRequest(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x198))(v6);
}

uint64_t (*SRSmartRepliesSuggestionRequest.languageLastChangedDate.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includesDynamicSuggestions);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_includesDynamicSuggestions);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

Class @objc SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + *a3;
  swift_beginAccess();
  outlined init with copy of Date?(v8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }
  return isa;
}

uint64_t SRSmartRepliesSuggestionRequest.requestDate.getter@<X0>(uint64_t a1@<X8>)
{
  return SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter(&OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_requestDate, a1);
}

uint64_t SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *a1;
  swift_beginAccess();
  return outlined init with copy of Date?(v4, a2, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

void @objc SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  v12 = (uint64_t)a1 + *a4;
  swift_beginAccess();
  v13 = a1;
  outlined assign with take of Date?((uint64_t)v9, v12);
  swift_endAccess();

}

uint64_t SRSmartRepliesSuggestionRequest.requestDate.setter(uint64_t a1)
{
  return SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter(a1, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_requestDate);
}

uint64_t SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *a2;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v4);
  return swift_endAccess();
}

uint64_t key path setter for SRSmartRepliesSuggestionRequest.requestDate : SRSmartRepliesSuggestionRequest(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1C8))(v6);
}

uint64_t (*SRSmartRepliesSuggestionRequest.requestDate.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.recipients.getter()
{
  return SRSmartRepliesSuggestionRequest.senderMessages.getter();
}

uint64_t SRSmartRepliesSuggestionRequest.recipients.setter(uint64_t a1)
{
  return SRSmartRepliesSuggestionRequest.senderMessages.setter(a1, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest_recipients);
}

uint64_t SRSmartRepliesSuggestionRequest.senderMessages.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SRSmartRepliesSuggestionRequest.recipients.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.recipients.modify;
}

unint64_t SRSmartRepliesSuggestionRequest.preferredLocale.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale);
  v3 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale);
  v4 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale
                 + 8);
  v5 = v3;
  if (v4 == 1)
  {
    v5 = closure #1 in SRSmartRepliesSuggestionRequest.preferredLocale.getter(v1);
    v6 = *v2;
    v7 = v2[1];
    *v2 = v5;
    v2[1] = v8;
    swift_bridgeObjectRetain();
    outlined consume of String??(v6, v7);
  }
  outlined copy of String??(v3, v4);
  return v5;
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLocale.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.preferredLocale.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale);
}

unint64_t closure #1 in SRSmartRepliesSuggestionRequest.preferredLocale.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t result;
  uint64_t v25;
  uint64_t j;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t (*v56)(unint64_t);
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD **)((char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x100);
  v57 = a1;
  v7 = v6(v3);
  v58 = MEMORY[0x24BEE4AF8];
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v55 = v5;
    v56 = (uint64_t (*)(unint64_t))v6;
    if (v8)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_45;
    goto LABEL_16;
  }
  v8 = _CocoaArrayWrapper.endIndex.getter();
  v55 = v5;
  v56 = (uint64_t (*)(unint64_t))v6;
  if (!v8)
    goto LABEL_15;
LABEL_3:
  if (v8 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  v9 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v10 = (_QWORD *)MEMORY[0x24957E42C](v9, v7);
    else
      v10 = *(id *)(v7 + 8 * v9 + 32);
    v11 = v10;
    if (((*(uint64_t (**)(void))((*v5 & *v10) + 0xE8))() & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v9;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  v8 = v58;
  if (v58 < 0)
    goto LABEL_45;
LABEL_16:
  if ((v8 & 0x4000000000000000) == 0)
  {
    v12 = *(_QWORD *)(v8 + 16);
    swift_retain();
    goto LABEL_18;
  }
LABEL_45:
  swift_retain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
LABEL_18:
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v12)
    goto LABEL_31;
  if (v12 < 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  for (i = 0; i != v12; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v16 = (_QWORD *)MEMORY[0x24957E42C](i, v8);
    else
      v16 = *(id *)(v8 + 8 * i + 32);
    v17 = v16;
    v18 = (*(uint64_t (**)(void))((*v5 & *v16) + 0xA0))();
    v20 = v19;

    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      v22 = v13[2];
      v21 = v13[3];
      if (v22 >= v21 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v13);
      v13[2] = v22 + 1;
      v15 = &v13[2 * v22];
      v15[4] = v18;
      v15[5] = v20;
    }
  }
LABEL_31:
  v23 = swift_release_n();
  result = (*(uint64_t (**)(uint64_t))((*v5 & *v57) + 0x148))(v23);
  v8 = result;
  if (!result)
    goto LABEL_66;
  v58 = MEMORY[0x24BEE4AF8];
  if (!(result >> 62))
  {
    v25 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_34;
LABEL_49:
    swift_bridgeObjectRelease();
    v29 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_64;
    goto LABEL_50;
  }
LABEL_48:
  result = _CocoaArrayWrapper.endIndex.getter();
  v25 = result;
  if (!result)
    goto LABEL_49;
LABEL_34:
  if (v25 < 1)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  for (j = 0; j != v25; ++j)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v27 = (_QWORD *)MEMORY[0x24957E42C](j, v8);
    else
      v27 = *(id *)(v8 + 8 * j + 32);
    v28 = v27;
    if (((*(uint64_t (**)(void))((*v5 & *v27) + 0xE8))() & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  v29 = v58;
  if (v58 < 0)
  {
LABEL_64:
    swift_retain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v30 = result;
    if (!result)
      goto LABEL_65;
    goto LABEL_52;
  }
LABEL_50:
  if ((v29 & 0x4000000000000000) != 0)
    goto LABEL_64;
  v30 = *(_QWORD *)(v29 + 16);
  result = swift_retain();
  if (!v30)
  {
LABEL_65:
    result = swift_release_n();
LABEL_66:
    v41 = v56(result);
    if (v41 >> 62)
    {
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result)
        goto LABEL_68;
    }
    else
    {
      result = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (result)
      {
LABEL_68:
        if ((v41 & 0xC000000000000001) != 0)
        {
          v42 = (_QWORD *)MEMORY[0x24957E42C](0, v41);
          goto LABEL_71;
        }
        if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v42 = *(id *)(v41 + 32);
LABEL_71:
          v43 = v42;
          v44 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((*v5 & *v43) + 0xB8))(v44);

LABEL_74:
          v45 = (uint64_t *)LocaleDetection.shared.unsafeMutableAddressor();
          v46 = v45[1];
          v47 = v45[2];
          v58 = *v45;
          v59 = v46;
          v60 = v47;
          v48 = v57;
          v49 = v5;
          v50 = *(void (**)(uint64_t))((*v5 & *v57) + 0x178);
          swift_retain();
          v51 = swift_bridgeObjectRetain();
          v50(v51);
          v52 = (uint64_t)v55;
          v53 = (*(uint64_t (**)(void))((*v49 & *v48) + 0x190))();
          (*(void (**)(uint64_t))((*v49 & *v48) + 0x118))(v53);
          v54 = LocaleDetection.locale(forIncomingMessages:outgoingMessageHistory:defaultLocale:defaultLocaleLastChangedDate:sender:forceRunLanguageDetection:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of Any?(v52, (uint64_t *)&demangling cache variable for type metadata for Date?);
          swift_release();
          swift_bridgeObjectRelease();
          return v54;
        }
        __break(1u);
        goto LABEL_77;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
LABEL_52:
  if (v30 >= 1)
  {
    v31 = 0;
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v29 & 0xC000000000000001) != 0)
        v34 = (_QWORD *)MEMORY[0x24957E42C](v31, v29);
      else
        v34 = *(id *)(v29 + 8 * v31 + 32);
      v35 = v34;
      v36 = (*(uint64_t (**)(void))((*v5 & *v34) + 0xA0))();
      v38 = v37;

      if (v38)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        v40 = v32[2];
        v39 = v32[3];
        if (v40 >= v39 >> 1)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v32);
        v32[2] = v40 + 1;
        v33 = &v32[2 * v40];
        v33[4] = v36;
        v33[5] = v38;
        v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
      }
      ++v31;
    }
    while (v30 != v31);
    goto LABEL_65;
  }
LABEL_78:
  __break(1u);
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.preferredLocale.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  unint64_t v1;
  unint64_t v3;

  a1[2] = v1;
  *a1 = SRSmartRepliesSuggestionRequest.preferredLocale.getter();
  a1[1] = v3;
  return SRSmartRepliesSuggestionRequest.preferredLocale.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLocale.modify(uint64_t *a1, char a2)
{
  return SRSmartRepliesSuggestionRequest.preferredLocale.modify(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLocale);
}

id @objc SRSmartRepliesSuggestionRequest.preferredLocale.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x24957DF1C](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLanguage.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage);
  v2 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage);
  v3 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage
                 + 8);
  v4 = v2;
  if (v3 == 1)
  {
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
    v4 = v5;
    if (v6)
    {
      v4 = MEMORY[0x24957DD9C](v5);
      v8 = v7;
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = 0;
    }
    v9 = *v1;
    v10 = v1[1];
    *v1 = v4;
    v1[1] = v8;
    swift_bridgeObjectRetain();
    outlined consume of String??(v9, v10);
  }
  outlined copy of String??(v2, v3);
  return v4;
}

uint64_t @objc SRSmartRepliesSuggestionRequest.preferredLocale.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (uint64_t *)(a1 + *a4);
  v9 = *v8;
  v10 = v8[1];
  *v8 = v6;
  v8[1] = v7;
  return outlined consume of String??(v9, v10);
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLanguage.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.preferredLocale.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage);
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLocale.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v3 + *a3);
  v5 = *v4;
  v6 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  return outlined consume of String??(v5, v6);
}

uint64_t (*SRSmartRepliesSuggestionRequest.preferredLanguage.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = SRSmartRepliesSuggestionRequest.preferredLanguage.getter();
  a1[1] = v3;
  return SRSmartRepliesSuggestionRequest.preferredLanguage.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLanguage.modify(uint64_t *a1, char a2)
{
  return SRSmartRepliesSuggestionRequest.preferredLocale.modify(a1, a2, &OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___preferredLanguage);
}

uint64_t SRSmartRepliesSuggestionRequest.preferredLocale.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[1];
  v4 = (uint64_t *)(a1[2] + *a3);
  v5 = *v4;
  v6 = v4[1];
  *v4 = *a1;
  v4[1] = v3;
  if ((a2 & 1) == 0)
    return outlined consume of String??(v5, v6);
  swift_bridgeObjectRetain();
  outlined consume of String??(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t SRSmartRepliesSuggestionRequest.concatenatedReceivedText.getter()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)((char *)v0
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___concatenatedReceivedText);
  if (*(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___concatenatedReceivedText
                 + 8))
  {
    v2 = *v1;
  }
  else
  {
    v2 = closure #1 in SRSmartRepliesSuggestionRequest.concatenatedReceivedText.getter(v0);
    *v1 = v2;
    v1[1] = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SRSmartRepliesSuggestionRequest.concatenatedReceivedText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___concatenatedReceivedText);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in SRSmartRepliesSuggestionRequest.concatenatedReceivedText.getter(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x100);
  v3 = v2();
  v4 = v2();
  if (v4 >> 62)
    v5 = _CocoaArrayWrapper.endIndex.getter();
  else
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRelease();
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v24 = MEMORY[0x24BEE4AF8];
  if (!(v3 >> 62))
  {
    v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_6;
LABEL_20:
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
    if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
      goto LABEL_35;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_20;
LABEL_6:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_39;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v9 = (_QWORD *)MEMORY[0x24957E42C](i, v3);
    else
      v9 = *(id *)(v3 + 8 * i + 32);
    v10 = v9;
    if (((*(uint64_t (**)(void))((*v1 & *v9) + 0xE8))() & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  v11 = v24;
  if (v24 < 0)
    goto LABEL_35;
LABEL_21:
  if ((v11 & 0x4000000000000000) == 0)
  {
    v13 = *(_QWORD *)(v11 + 16);
    result = swift_retain();
    if (!v13)
    {
LABEL_36:
      swift_release_n();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v12 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      return v12;
    }
    goto LABEL_23;
  }
LABEL_35:
  swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v13 = result;
  if (!result)
    goto LABEL_36;
LABEL_23:
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        v17 = (_QWORD *)MEMORY[0x24957E42C](v14, v11);
      else
        v17 = *(id *)(v11 + 8 * v14 + 32);
      v18 = v17;
      v19 = (*(uint64_t (**)(void))((*v1 & *v17) + 0xA0))();
      v21 = v20;

      if (v21)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        v23 = v15[2];
        v22 = v15[3];
        if (v23 >= v22 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v15);
        v15[2] = v23 + 1;
        v16 = &v15[2 * v23];
        v16[4] = v19;
        v16[5] = v21;
      }
      ++v14;
    }
    while (v13 != v14);
    goto LABEL_36;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t (*SRSmartRepliesSuggestionRequest.concatenatedReceivedText.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = SRSmartRepliesSuggestionRequest.concatenatedReceivedText.getter();
  a1[1] = v3;
  return SRSmartRepliesSuggestionRequest.concatenatedReceivedText.modify;
}

uint64_t SRSmartRepliesSuggestionRequest.concatenatedReceivedText.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1[1];
  v2 = (_QWORD *)(a1[2]
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___concatenatedReceivedText);
  *v2 = *a1;
  v2[1] = v1;
  return swift_bridgeObjectRelease();
}

_QWORD *SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder;
  v2 = *(void **)((char *)v0
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder);
  if (v2)
  {
    v3 = *(_QWORD **)((char *)v0
                    + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder);
  }
  else
  {
    v4 = closure #1 in SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.getter(v0);
    v5 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder) = a1;

}

_QWORD *closure #1 in SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.getter(_QWORD *a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  unint64_t v13;
  uint64_t i;
  unint64_t v15;
  SEL *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  unint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v59;
  uint64_t v60;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x178))();
  v2 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v3 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D2E392D305B245CLL, 0xE90000000000002BLL, 0);
  v4 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v5 = v3;
  v6 = @nonobjc NSRegularExpression.init(pattern:options:)(29532, 0xE200000000000000, 0);
  v7 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v8 = v6;
  v9 = @nonobjc NSRegularExpression.init(pattern:options:)(0x7D2C327B20, 0xE500000000000000, 0);
  v10 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v11 = v9;
  v12 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D9980E2BCCA275BLL, 0xA800000000000000, 0);

  v60 = MEMORY[0x24BEE4AF8];
  v13 = (*(uint64_t (**)(void))((*v1 & *a1) + 0x100))();
  v55 = v13;
  if (v13 >> 62)
    goto LABEL_40;
  for (i = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v54 = (void *)i;
    if (!i)
      break;
    v50 = v12;
    v51 = v11;
    v52 = v8;
    v53 = v5;
    v15 = 0;
    v11 = (id)v55;
    v12 = (void *)(v55 & 0xC000000000000001);
    v8 = (id)MEMORY[0x24BEE0D00];
    v16 = (SEL *)&unk_2518CC000;
    v5 = (id)i;
    while (1)
    {
      if (v12)
      {
        v21 = (id)MEMORY[0x24957E42C](v15, v11);
      }
      else
      {
        if (v15 >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        v21 = *(id *)(v55 + 32 + 8 * v15);
      }
      v22 = v21;
      if (__OFADD__(v15++, 1))
        break;
      objc_msgSend(v21, v16[46]);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for SRSmartRepliesMessage();
      v24 = swift_dynamicCast();
      v57 = v22;
      if ((v24 & 1) != 0)
      {
        v56 = (_QWORD *)v59;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*v1 & *(_QWORD *)v59) + 0xA0))(v24, v25, v26, v27);
        if (v28)
        {
          if (one-time initialization token for shared != -1)
            swift_once();
          swift_bridgeObjectRetain();
          TUSCache.subscript.getter();
          swift_bridgeObjectRelease();
          v29 = (_QWORD *)v59;
          if (!v59)
          {
            v30 = String.inferredAddressBookContacts()();
            if (v30)
              v29 = v30;
            else
              v29 = (_QWORD *)MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            TUSCache.subscript.setter();
          }
          v31 = lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v32 = v29[2];
          if (v32)
          {
            v33 = v29 + 6;
            do
            {
              StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
              swift_bridgeObjectRelease();
              v33 += 5;
              --v32;
            }
            while (v32);
          }
          swift_bridgeObjectRelease();
          v59 = 0x236F6872232A2320;
          v48 = v31;
          v49 = v31;
          v46 = v8;
          v47 = v31;
          v38 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          v40 = v39;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
          (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v56) + 0xA8))(v38, v40);
          v41 = v56;
          MEMORY[0x24957E0E4](v41, v42, v43, v44);
          if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          v11 = (id)v55;
          v12 = (void *)(v55 & 0xC000000000000001);
          v16 = (SEL *)&unk_2518CC000;
          v5 = v54;
        }
        else
        {
          v34 = v22;
          MEMORY[0x24957E0E4](v34, v35, v36, v37);
          if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          v12 = (void *)(v55 & 0xC000000000000001);
        }
      }
      else
      {
        v17 = v22;
        MEMORY[0x24957E0E4](v17, v18, v19, v20);
        if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }

      if ((id)v15 == v5)
      {
        swift_bridgeObjectRelease();
        v5 = v53;
        v11 = v51;
        v8 = v52;
        v12 = v50;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    ;
  }
  swift_bridgeObjectRelease();
LABEL_35:
  objc_msgSend(a1, sel_copy, v46, v47, v48, v49);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for SRSmartRepliesSuggestionRequest();
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(uint64_t))((*v1 & *(_QWORD *)v59) + 0x108))(v60);

    swift_bridgeObjectRelease();
    return (_QWORD *)v59;
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
}

void (*SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.getter();
  return SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.modify;
}

void SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1
                + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC12SmartReplies31SRSmartRepliesSuggestionRequest____lazy_storage___modifiedRequestWithContactPlaceholder) = v2;

}

id SRSmartRepliesSuggestionRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesSuggestionRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesSuggestionRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestionRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized Array<A>.hash(into:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  void **v5;
  void *v6;
  id v7;
  Swift::UInt v8;

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3)
      return;
  }
  else
  {
    Hasher._combine(_:)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v3; ++i)
    {
      MEMORY[0x24957E42C](i, a2);
      NSObject.hash(into:)();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v5 = (void **)(a2 + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      NSObject.hash(into:)();

      --v3;
    }
    while (v3);
  }
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date();
    result = MEMORY[0x24957EC18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesSuggestionRequestType and conformance SRSmartRepliesSuggestionRequestType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesSuggestionRequestType and conformance SRSmartRepliesSuggestionRequestType;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesSuggestionRequestType and conformance SRSmartRepliesSuggestionRequestType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesSuggestionRequestType, &type metadata for SRSmartRepliesSuggestionRequestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesSuggestionRequestType and conformance SRSmartRepliesSuggestionRequestType);
  }
  return result;
}

uint64_t sub_2475EBC8C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_2475EBCCC(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xF0))(*a1);
}

uint64_t sub_2475EBD08@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t sub_2475EBD48(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x108);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2475EBD88@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x118))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2475EBDCC(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x120))(*a1);
}

uint64_t sub_2475EBE08@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x130))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2475EBE4C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x138))(*a1);
}

uint64_t sub_2475EBE88@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x148))();
  *a2 = result;
  return result;
}

uint64_t sub_2475EBEC8(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x150);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2475EBF08@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x160))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2475EBF48(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x168);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2475EBF9C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x178))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2475EBFDC(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x180);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2475EC030(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x190))();
}

uint64_t sub_2475EC06C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1A8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2475EC0B0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1B0))(*a1);
}

uint64_t sub_2475EC0EC(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1C0))();
}

uint64_t sub_2475EC128@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1D8))();
  *a2 = result;
  return result;
}

uint64_t sub_2475EC168(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1E0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2475EC1A8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x1F0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2475EC1E8(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x1F8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2475EC23C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2475EC27C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x210);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2475EC2D0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x220))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2475EC310(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x228);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2475EC364@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x238))();
  *a2 = result;
  return result;
}

uint64_t sub_2475EC3A4(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x240))(*a1);
}

ValueMetadata *type metadata accessor for SRSmartRepliesSuggestionRequestType()
{
  return &type metadata for SRSmartRepliesSuggestionRequestType;
}

uint64_t ObjC metadata update function for SRSmartRepliesSuggestionRequest()
{
  return type metadata accessor for SRSmartRepliesSuggestionRequest();
}

void type metadata completion function for SRSmartRepliesSuggestionRequest()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SRSmartRepliesSuggestionRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.__allocating_init(type:receivedMessages:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.type.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.type.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.type.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.receivedMessages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.receivedMessages.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.receivedMessages.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includeLowConfidenceSuggestions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.skipPopulatingMetadata.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.senderMessages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.senderMessages.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.senderMessages.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.context.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.context.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.context.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageCode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageLastChangedDate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageLastChangedDate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.languageLastChangedDate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.includesDynamicSuggestions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.requestDate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.requestDate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.requestDate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.recipients.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.recipients.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.recipients.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLocale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLocale.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLocale.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLanguage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLanguage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.preferredLanguage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.concatenatedReceivedText.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.concatenatedReceivedText.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.concatenatedReceivedText.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionRequest.modifiedRequestWithContactPlaceholder.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24957EC18](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A][0];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A][0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24957EC0C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2475ECBB0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2475ECC18 + 4 * byte_247656154[a2]))(0x726F57664F676162);
}

uint64_t sub_2475ECC18(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726F57664F676162 && v1 == 0xEA00000000007364)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_2475ECD0C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_2475ECDC4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t one-time initialization function for englishStopWords()
{
  uint64_t result;
  void *v1;

  result = lookupStopWords(forLanguageCode:)(28261, 0xE200000000000000);
  v1 = (void *)MEMORY[0x24BEE4B08];
  if (result)
    v1 = (void *)result;
  englishStopWords = v1;
  return result;
}

uint64_t splitIntoSentences(text:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v7;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDFD70]), sel_initWithUnit_, 1);
  v5 = (void *)MEMORY[0x24957DF1C](a1, a2);
  objc_msgSend(v4, sel_setString_, v5);

  v7 = MEMORY[0x24BEE4AF8];
  NLTokenizer.enumerateTokens(in:using:)();

  return v7;
}

uint64_t closure #1 in splitIntoSentences(text:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v5 = type metadata accessor for CharacterSet();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = String.subscript.getter();
  v21[1] = v9;
  v21[2] = v10;
  v21[3] = v11;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v12 = StringProtocol.trimmingCharacters(in:)();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  v15 = *a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *a4 = v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    *a4 = v15;
  }
  v15[2] = v18 + 1;
  v19 = &v15[2 * v18];
  v19[4] = v12;
  v19[5] = v14;
  return 1;
}

uint64_t closure #1 in splitIntoWords(text:lemmatize:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  String.subscript.getter();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  v5 = StringProtocol.localizedLowercase.getter();
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = *a4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *a4 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *a4 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = v5;
  v12[5] = v7;
  return 1;
}

uint64_t BagOfWordsStrategy.affinityMatrix(forSentences:)(_QWORD *a1, char a2)
{
  unint64_t v2;
  _BYTE *v4;
  unint64_t v5;
  double v6;
  void **v7;
  unint64_t v8;
  void *v9;
  uint64_t countAndFlagsBits;
  id v11;
  id v12;
  Swift::String v13;
  void *object;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  BOOL v37;
  char v38;
  char v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  double v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  vDSP_Length v72;
  double v73;
  double v74;
  vDSP_Length v75;
  double v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t result;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double *v85;
  double v86;
  double v87;
  unint64_t v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;
  _BYTE *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  double __C[9];
  uint64_t v98;
  uint64_t v99;

  LOBYTE(v2) = a2;
  v99 = *MEMORY[0x24BDAC8D0];
  if (one-time initialization token for englishStopWords != -1)
    goto LABEL_124;
  while (1)
  {
    v4 = englishStopWords;
    v5 = a1[2];
    v6 = MEMORY[0x24BEE4AF8];
    v96 = v5;
    v92 = englishStopWords;
    if (v5)
    {
      *(_QWORD *)&__C[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      v7 = (void **)(a1 + 5);
      v8 = v5;
      do
      {
        countAndFlagsBits = (uint64_t)*(v7 - 1);
        v9 = *v7;
        v11 = objc_allocWithZone(MEMORY[0x24BDDFD70]);
        swift_bridgeObjectRetain();
        v12 = objc_msgSend(v11, sel_initWithUnit_, 0);
        if ((v2 & 1) != 0)
        {
          v13 = String.lemmatized()();
          countAndFlagsBits = v13._countAndFlagsBits;
          object = v13._object;
        }
        else
        {
          swift_bridgeObjectRetain();
          object = v9;
        }
        v15 = (void *)MEMORY[0x24957DF1C](countAndFlagsBits, object);
        objc_msgSend(v12, sel_setString_, v15);

        v98 = MEMORY[0x24BEE4AF8];
        MEMORY[0x24BDAC7A8](v16);
        NLTokenizer.enumerateTokens(in:using:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v17 = v98;
        a1 = *(_QWORD **)&__C[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1);
          a1 = *(_QWORD **)&__C[0];
        }
        v19 = a1[2];
        v18 = a1[3];
        v20 = v19 + 1;
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          a1 = *(_QWORD **)&__C[0];
        }
        v7 += 2;
        a1[2] = v20;
        a1[v19 + 4] = v17;
        --v8;
      }
      while (v8);
      v6 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&__C[0] = MEMORY[0x24BEE4AF8];
      v5 = v96;
      v4 = v92;
    }
    else
    {
      v20 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      swift_bridgeObjectRetain();
      __C[0] = v6;
      a1 = *(_QWORD **)&v6;
      v21 = v6;
      if (!v20)
        goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    v22 = 0;
    do
    {
      ++v22;
      v23 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v23);
    }
    while (v20 != v22);
    swift_bridgeObjectRelease();
    v21 = __C[0];
LABEL_17:
    v24 = *(_QWORD *)(*(_QWORD *)&v21 + 16);
    if (v24)
    {
      v93 = v4 + 56;
      v95 = *(_QWORD *)&v21 + 32;
      swift_bridgeObjectRetain();
      v25 = 0;
      v26 = MEMORY[0x24BEE4B00];
      v91 = v24;
      while (1)
      {
        v27 = (uint64_t *)(v95 + 16 * v25);
        v29 = *v27;
        v28 = v27[1];
        if (*((_QWORD *)v4 + 2))
        {
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v30 = Hasher._finalize()();
          v31 = -1 << v4[32];
          v2 = v30 & ~v31;
          if (((*(_QWORD *)&v93[(v2 >> 3) & 0xFFFFFFFFFFFFF8] >> v2) & 1) != 0)
          {
            v32 = *((_QWORD *)v4 + 6);
            v33 = (_QWORD *)(v32 + 16 * v2);
            v34 = *v33 == v29 && v33[1] == v28;
            if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_19;
            v35 = ~v31;
            while (1)
            {
              v2 = (v2 + 1) & v35;
              if (((*(_QWORD *)&v93[(v2 >> 3) & 0xFFFFFFFFFFFFF8] >> v2) & 1) == 0)
                break;
              v36 = (_QWORD *)(v32 + 16 * v2);
              v37 = *v36 == v29 && v36[1] == v28;
              if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_19;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        if (!*(_QWORD *)(v26 + 16))
        {
          v40 = 0;
          goto LABEL_41;
        }
        swift_bridgeObjectRetain();
        specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        v39 = v38;
        swift_bridgeObjectRelease();
        if ((v39 & 1) == 0)
        {
          v40 = *(_QWORD *)(v26 + 16);
LABEL_41:
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&__C[0] = v26;
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
          v44 = v26;
          v45 = *(_QWORD *)(v26 + 16);
          v46 = (v42 & 1) == 0;
          v47 = v45 + v46;
          if (__OFADD__(v45, v46))
          {
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }
          v48 = v42;
          if (*(_QWORD *)(v44 + 24) >= v47)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
            v49 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
            if ((v48 & 1) != (v50 & 1))
            {
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            v43 = v49;
          }
          v4 = v92;
          v51 = __C[0];
          if ((v48 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__C[0] + 56) + 8 * v43) = v40;
            v26 = *(_QWORD *)&v51;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)&__C[0] + 8 * (v43 >> 6) + 64) |= 1 << v43;
            v52 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v51 + 48) + 16 * v43);
            *v52 = v29;
            v52[1] = v28;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v51 + 56) + 8 * v43) = v40;
            v53 = *(_QWORD *)(*(_QWORD *)&v51 + 16);
            v54 = __OFADD__(v53, 1);
            v55 = v53 + 1;
            if (v54)
              goto LABEL_122;
            v26 = *(_QWORD *)&v51;
            *(_QWORD *)(*(_QWORD *)&v51 + 16) = v55;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v5 = v96;
          v24 = v91;
          goto LABEL_20;
        }
LABEL_19:
        swift_bridgeObjectRelease();
        v5 = v96;
LABEL_20:
        if (++v25 == v24)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v6 = MEMORY[0x24BEE4AF8];
          v56 = a1[2];
          if (!v56)
            goto LABEL_59;
LABEL_53:
          __C[0] = v6;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
          v57 = 0;
          v58 = __C[0];
          do
          {
            v59 = a1[v57 + 4];
            v60 = englishStopWords;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v61 = specialized static BagOfWordsStrategy.featurizeSentence(sentence:wordIndex:stopWords:)(v59, v26, (uint64_t)v60);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __C[0] = v58;
            v63 = *(_QWORD *)(*(_QWORD *)&v58 + 16);
            v62 = *(_QWORD *)(*(_QWORD *)&v58 + 24);
            if (v63 >= v62 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
              v58 = __C[0];
            }
            ++v57;
            *(_QWORD *)(*(_QWORD *)&v58 + 16) = v63 + 1;
            *(_QWORD *)(*(_QWORD *)&v58 + 8 * v63 + 32) = v61;
          }
          while (v56 != v57);
          swift_bridgeObjectRelease();
          v5 = v96;
          goto LABEL_60;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x24BEE4B00];
    v56 = a1[2];
    if (v56)
      goto LABEL_53;
LABEL_59:
    swift_bridgeObjectRelease();
    v58 = MEMORY[0x24BEE4AF8];
LABEL_60:
    v64 = specialized Array.init(repeating:count:)(v5, 0.0);
    v65 = (_QWORD *)specialized Array.init(repeating:count:)(v64, v5);
    if (!v5)
      break;
    v2 = 0;
    while (2)
    {
      v66 = 0;
      v94 = v2 + 1;
      do
      {
        if (v2 == v66)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
          if (v2 >= v65[2])
          {
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
          a1 = (_QWORD *)v65[v2 + 4];
          v69 = swift_isUniquelyReferenced_nonNull_native();
          v65[v2 + 4] = a1;
          if ((v69 & 1) == 0)
          {
            a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
            v65[v2 + 4] = a1;
          }
          v68 = 0.0;
          v67 = v2;
          if (v2 >= a1[2])
            goto LABEL_110;
        }
        else if (v2 >= v66)
        {
          if (v66 >= v65[2])
            goto LABEL_114;
          v78 = v65[v66 + 4];
          if (v2 >= *(_QWORD *)(v78 + 16))
            goto LABEL_116;
          v68 = *(double *)(v78 + 8 * v2 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
          if (v2 >= v65[2])
            goto LABEL_118;
          a1 = (_QWORD *)v65[v2 + 4];
          v79 = swift_isUniquelyReferenced_nonNull_native();
          v65[v2 + 4] = a1;
          if ((v79 & 1) == 0)
          {
            a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
            v65[v2 + 4] = a1;
          }
          v67 = v66;
          if (v66 >= a1[2])
            goto LABEL_119;
        }
        else
        {
          v70 = *(_QWORD *)(*(_QWORD *)&v58 + 16);
          if (v2 >= v70)
            goto LABEL_113;
          if (v66 >= v70)
            goto LABEL_115;
          a1 = *(_QWORD **)(*(_QWORD *)&v58 + 32 + 8 * v2);
          v71 = *(_QWORD *)(*(_QWORD *)&v58 + 8 * v66 + 32);
          v72 = a1[2];
          __C[0] = 0.0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          vDSP_dotprD((const double *)a1 + 4, 1, (const double *)(v71 + 32), 1, __C, v72);
          v73 = __C[0];
          __C[0] = 0.0;
          vDSP_dotprD((const double *)a1 + 4, 1, (const double *)a1 + 4, 1, __C, v72);
          v74 = __C[0];
          v75 = *(_QWORD *)(v71 + 16);
          __C[0] = 0.0;
          vDSP_dotprD((const double *)(v71 + 32), 1, (const double *)(v71 + 32), 1, __C, v75);
          v76 = __C[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v65);
          v5 = v96;
          if (v2 >= v65[2])
            goto LABEL_117;
          a1 = (_QWORD *)v65[v2 + 4];
          v77 = swift_isUniquelyReferenced_nonNull_native();
          v65[v2 + 4] = a1;
          if ((v77 & 1) == 0)
          {
            a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
            v65[v2 + 4] = a1;
          }
          if (v66 >= a1[2])
            goto LABEL_120;
          v67 = v66;
          v68 = v73 / (sqrt(v74) * sqrt(v76));
        }
        ++v66;
        *(double *)&a1[v67 + 4] = v68;
      }
      while (v5 != v66);
      ++v2;
      if (v94 != v5)
        continue;
      break;
    }
    swift_bridgeObjectRelease();
    v2 = 0;
    v81 = v65 + 4;
LABEL_97:
    if (v2 < v65[2])
    {
      v82 = v81[v2];
      v83 = *(_QWORD *)(v82 + 16);
      v84 = 0.000001;
      if (v83)
      {
        v85 = (double *)(v82 + 32);
        v86 = 0.0;
        do
        {
          v87 = *v85++;
          v86 = v86 + v87;
          --v83;
        }
        while (v83);
        v84 = v86 + 0.000001;
      }
      v88 = 0;
      a1 = (_QWORD *)(v2 + 1);
      while (v2 < v65[2])
      {
        v89 = (_QWORD *)v81[v2];
        v90 = swift_isUniquelyReferenced_nonNull_native();
        v81[v2] = v89;
        if ((v90 & 1) == 0)
        {
          v89 = specialized _ArrayBuffer._consumeAndCreateNew()(v89);
          v81[v2] = v89;
        }
        if (v88 >= v89[2])
          goto LABEL_112;
        *(double *)&v89[v88 + 4] = *(double *)&v89[v88 + 4] / v84;
        if (v5 == ++v88)
        {
          ++v2;
          if (a1 == (_QWORD *)v5)
            goto LABEL_94;
          goto LABEL_97;
        }
      }
      goto LABEL_111;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_94:
  swift_bridgeObjectRelease();
  return (uint64_t)v65;
}

uint64_t protocol witness for ExtractiveSummarizationStrategy.affinityMatrix(forSentences:) in conformance BagOfWordsStrategy(_QWORD *a1)
{
  char *v1;

  return BagOfWordsStrategy.affinityMatrix(forSentences:)(a1, *v1);
}

void closure #1 in TFIDFStrategy.featurizeSentence(wordIndex:tf:idf:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, double a6)
{
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  double v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  if (!*(_QWORD *)(a3 + 16))
  {
LABEL_10:
    if (one-time initialization token for standard != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v27 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v25 = "Unable to find word index %s while running TFIDFStrategy";
LABEL_19:
      _os_log_impl(&dword_2475DF000, v21, v22, v25, v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v24, -1, -1);
      MEMORY[0x24957ECC0](v23, -1, -1);

      return;
    }
LABEL_20:

    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_15;
  swift_bridgeObjectRetain();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    if (one-time initialization token for standard != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v27 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v25 = "Unable to find word idf %s while running TFIDFStrategy";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v17 = *(double *)(*(_QWORD *)(a4 + 56) + 8 * v15);
  swift_bridgeObjectRelease();
  v18 = *a5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a5 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v14 & 0x8000000000000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    if ((v14 & 0x8000000000000000) == 0)
    {
LABEL_7:
      if (v14 < v18[2])
      {
        *(double *)&v18[v14 + 4] = v17 * a6;
        *a5 = v18;
        return;
      }
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
}

_QWORD *TFIDFStrategy.affinityMatrix(forSentences:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  vDSP_Length v37;
  double v38;
  double v39;
  vDSP_Length v40;
  double v41;
  char v42;
  uint64_t v43;
  char v44;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  double __C;
  uint64_t v61[2];

  v61[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  v59 = v1;
  if (v1)
  {
    v61[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = (uint64_t *)(a1 + 40);
    v2 = v61[0];
    v5 = v1;
    do
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      v8 = objc_allocWithZone(MEMORY[0x24BDDFD70]);
      swift_bridgeObjectRetain();
      v9 = objc_msgSend(v8, sel_initWithUnit_, 0);
      swift_bridgeObjectRetain();
      v10 = (void *)MEMORY[0x24957DF1C](v6, v7);
      objc_msgSend(v9, sel_setString_, v10);

      __C = MEMORY[0x24BEE4AF8];
      MEMORY[0x24BDAC7A8](v11);
      NLTokenizer.enumerateTokens(in:using:)();
      swift_bridgeObjectRelease_n();

      v12 = __C;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v61[0];
      }
      v14 = *(_QWORD *)(v2 + 16);
      v13 = *(_QWORD *)(v2 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v2 = v61[0];
      }
      v4 += 2;
      *(_QWORD *)(v2 + 16) = v14 + 1;
      *(double *)(v2 + 8 * v14 + 32) = v12;
      --v5;
    }
    while (v5);
  }
  v15 = specialized TFIDFStrategy.documentTermFrequencies(sentences:)(v2);
  v16 = *(_QWORD *)(v2 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    v17 = 0;
    v18 = MEMORY[0x24BEE4AF8];
    do
    {
      v19 = *(_QWORD *)(v2 + 8 * v17++ + 32);
      v61[0] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v19);
      swift_bridgeObjectRelease();
    }
    while (v16 != v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = MEMORY[0x24BEE4AF8];
  }
  v20 = specialized Set.init<A>(_:)(v18);
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x24BEE4B00];
  v61[0] = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v20, v2, v61);
  swift_bridgeObjectRelease();
  v22 = swift_bridgeObjectRelease();
  v23 = v61[0];
  v61[0] = v21;
  MEMORY[0x24BDAC7A8](v22);
  specialized Sequence.forEach(_:)(v23, (void (*)(uint64_t))partial apply for closure #2 in TFIDFStrategy.affinityMatrix(forSentences:));
  v24 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySdGs5NeverOTg50102_s12SmartReplies13TFIDFStrategy33_F6986EAE989EDA5E565C8C5406F83E2BLLV14affinityMatrix12forSentencesSayT23SdGGSaySSG_tFAGSiXEfU1_SDySiSDySSSdGGSDySSSiG0F7Replies13TFIDFStrategy01_ijklmnoP1BLLVAKTf1cn_nTf4ngnng_n(0, v24, v15, (uint64_t)v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = specialized Array.init(repeating:count:)(v1, 0.0);
  v27 = (_QWORD *)specialized Array.init(repeating:count:)(v26, v1);
  if (v1)
  {
    v28 = 0;
    while (1)
    {
      v29 = 0;
      v58 = v28 + 1;
      do
      {
        if (v28 == v29)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          if (v28 >= v27[2])
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
          }
          v32 = (_QWORD *)v27[v28 + 4];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v27[v28 + 4] = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
            v27[v28 + 4] = v32;
          }
          v31 = 0.0;
          v30 = v28;
          if (v28 >= v32[2])
            goto LABEL_64;
        }
        else if (v28 >= v29)
        {
          if (v29 >= v27[2])
            goto LABEL_68;
          v43 = v27[v29 + 4];
          if (v28 >= *(_QWORD *)(v43 + 16))
            goto LABEL_70;
          v31 = *(double *)(v43 + 8 * v28 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          if (v28 >= v27[2])
            goto LABEL_72;
          v32 = (_QWORD *)v27[v28 + 4];
          v44 = swift_isUniquelyReferenced_nonNull_native();
          v27[v28 + 4] = v32;
          if ((v44 & 1) == 0)
          {
            v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
            v27[v28 + 4] = v32;
          }
          v30 = v29;
          if (v29 >= v32[2])
            goto LABEL_74;
        }
        else
        {
          v34 = *(_QWORD *)(v25 + 16);
          if (v28 >= v34)
            goto LABEL_67;
          if (v29 >= v34)
            goto LABEL_69;
          v35 = *(_QWORD *)(v25 + 32 + 8 * v28);
          v36 = *(_QWORD *)(v25 + 8 * v29 + 32);
          v37 = *(_QWORD *)(v35 + 16);
          __C = 0.0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          vDSP_dotprD((const double *)(v35 + 32), 1, (const double *)(v36 + 32), 1, &__C, v37);
          v38 = __C;
          __C = 0.0;
          vDSP_dotprD((const double *)(v35 + 32), 1, (const double *)(v35 + 32), 1, &__C, v37);
          v39 = __C;
          v40 = *(_QWORD *)(v36 + 16);
          __C = 0.0;
          vDSP_dotprD((const double *)(v36 + 32), 1, (const double *)(v36 + 32), 1, &__C, v40);
          v41 = __C;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          v1 = v59;
          if (v28 >= v27[2])
            goto LABEL_71;
          v32 = (_QWORD *)v27[v28 + 4];
          v42 = swift_isUniquelyReferenced_nonNull_native();
          v27[v28 + 4] = v32;
          if ((v42 & 1) == 0)
          {
            v32 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
            v27[v28 + 4] = v32;
          }
          if (v29 >= v32[2])
            goto LABEL_73;
          v30 = v29;
          v31 = v38 / (sqrt(v39) * sqrt(v41));
        }
        ++v29;
        *(double *)&v32[v30 + 4] = v31;
      }
      while (v1 != v29);
      ++v28;
      if (v58 == v1)
      {
        swift_bridgeObjectRelease();
        v46 = 0;
        v47 = v27 + 4;
        while (v46 < v27[2])
        {
          v48 = v47[v46];
          v49 = *(_QWORD *)(v48 + 16);
          if (v49)
          {
            v50 = (double *)(v48 + 32);
            v51 = 0.0;
            do
            {
              v52 = *v50++;
              v51 = v51 + v52;
              --v49;
            }
            while (v49);
            v53 = v51 + 0.000001;
          }
          else
          {
            v53 = 0.000001;
          }
          v54 = 0;
          v55 = v46 + 1;
          do
          {
            if (v46 >= v27[2])
              goto LABEL_65;
            v56 = (_QWORD *)v47[v46];
            v57 = swift_isUniquelyReferenced_nonNull_native();
            v47[v46] = v56;
            if ((v57 & 1) == 0)
            {
              v56 = specialized _ArrayBuffer._consumeAndCreateNew()(v56);
              v47[v46] = v56;
            }
            if (v54 >= v56[2])
              goto LABEL_66;
            *(double *)&v56[v54 + 4] = *(double *)&v56[v54 + 4] / v53;
            ++v54;
          }
          while (v1 != v54);
          ++v46;
          if (v55 == v1)
            goto LABEL_47;
        }
        goto LABEL_75;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_47:
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t closure #2 in TFIDFStrategy.affinityMatrix(forSentences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *a4 = v10;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in TFIDFStrategy.affinityMatrix(forSentences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  if (*(_QWORD *)(a2 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7);
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = specialized Array.init(repeating:count:)(v10, 0.0);
    MEMORY[0x24BDAC7A8](v16);
    specialized Sequence.forEach(_:)(v9, (void (*)(uint64_t, uint64_t, double))partial apply for closure #1 in TFIDFStrategy.featurizeSentence(wordIndex:tf:idf:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v16;
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.standard);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v15 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2475DF000, v13, v14, "Unable to find term frequences for document index %ld while running TFIDFStrategy", v15, 0xCu);
      MEMORY[0x24957ECC0](v15, -1, -1);
    }

    result = specialized Array.init(repeating:count:)(*(_QWORD *)(*(_QWORD *)a3 + 16), 0.0);
  }
  *a4 = result;
  return result;
}

SmartReplies::ExtractiveSummarizationStrategyType_optional __swiftcall ExtractiveSummarizationStrategyType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SmartReplies::ExtractiveSummarizationStrategyType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExtractiveSummarizationStrategyType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static ExtractiveSummarizationStrategyType.allCases.getter()
{
  return &outlined read-only object #0 of static ExtractiveSummarizationStrategyType.allCases.getter;
}

uint64_t ExtractiveSummarizationStrategyType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2475EE9E0 + 4 * byte_247656160[*v0]))(7958113, 0xE300000000000000);
}

uint64_t sub_2475EE9E0()
{
  return 0x726F57664F676162;
}

unint64_t sub_2475EE9FC()
{
  return 0xD000000000000014;
}

uint64_t sub_2475EEA18()
{
  return 0x4644496674;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ExtractiveSummarizationStrategyType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ExtractiveSummarizationStrategyType()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ExtractiveSummarizationStrategyType()
{
  __asm { BR              X10 }
}

uint64_t sub_2475EEA74()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ExtractiveSummarizationStrategyType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SmartReplies::ExtractiveSummarizationStrategyType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExtractiveSummarizationStrategyType(Swift::String *a1)
{
  return ExtractiveSummarizationStrategyType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExtractiveSummarizationStrategyType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2475EEB10 + 4 * byte_247656168[*v0]))();
}

void sub_2475EEB10(_QWORD *a1@<X8>)
{
  *a1 = 0x726F57664F676162;
  a1[1] = 0xEA00000000007364;
}

void sub_2475EEB30(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024765AD50;
}

void sub_2475EEB50(_QWORD *a1@<X8>)
{
  *a1 = 0x4644496674;
  a1[1] = 0xE500000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ExtractiveSummarizationStrategyType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ExtractiveSummarizationStrategyType;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v85 = 0;
      v86 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(_QWORD *)(v86 + 16 * i);
        v89 = v85;
        do
        {
          if (v88 >= *(_QWORD *)(v86 + v89))
            break;
          if (!v86)
            goto LABEL_140;
          v90 = (_QWORD *)(v86 + v89);
          v91 = *(_QWORD *)(v86 + v89 + 24);
          *(_OWORD *)(v86 + v89 + 16) = *(_OWORD *)(v86 + v89);
          *v90 = v88;
          v90[1] = v91;
          v89 -= 16;
        }
        while (v89 != -16);
        v85 += 16;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v92 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v93 = *v101;
        do
        {
          v94 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v93)
            goto LABEL_144;
          v95 = v92;
          v96 = *(_QWORD *)&v92[16 * v94 + 32];
          v97 = *(_QWORD *)&v92[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v93 + 16 * v96), (char *)(v93 + 16 * *(_QWORD *)&v92[16 * v13 + 16]), v93 + 16 * v97, __dst);
          if (v1)
            break;
          if (v97 < v96)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          if (v94 >= *((_QWORD *)v95 + 2))
            goto LABEL_133;
          v98 = &v95[16 * v94 + 32];
          *(_QWORD *)v98 = v96;
          *((_QWORD *)v98 + 1) = v97;
          v99 = *((_QWORD *)v95 + 2);
          if (v13 > v99)
            goto LABEL_134;
          memmove(&v95[16 * v13 + 16], &v95[16 * v13 + 32], 16 * (v99 - v13));
          v92 = v95;
          *((_QWORD *)v95 + 2) = v99 - 1;
          v13 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Double));
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 32;
  v100 = *a1 - 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(_QWORD *)(v11 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (uint64_t *)(v102 + 16 * v14);
        v19 = v15;
        while (1)
        {
          v21 = *v18;
          v18 += 2;
          v20 = v21;
          if (v15 < v17 == v21 >= v19)
            break;
          ++v10;
          v19 = v20;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v22 = 16 * v10;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v22;
              v26 = *(_QWORD *)(v11 + v16);
              v27 = *(_QWORD *)(v11 + v16 + 8);
              *(_OWORD *)(v11 + v16) = *(_OWORD *)(v11 + v22 - 16);
              *(_QWORD *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v22 -= 16;
            v16 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v28 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v28 >= v3)
      v28 = v3;
    if (v28 < v14)
      break;
    if (v10 != v28)
    {
      v29 = v100 + 16 * v10;
      do
      {
        v30 = *(_QWORD *)(v11 + 16 * v10);
        v31 = v14;
        v32 = v29;
        do
        {
          if (v30 >= *(_QWORD *)v32)
            break;
          if (!v11)
            goto LABEL_141;
          v33 = *(_QWORD *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(_QWORD *)v32 = v30;
          *(_QWORD *)(v32 + 8) = v33;
          v32 -= 16;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v29 += 16;
      }
      while (v10 != v28);
      v10 = v28;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v13 = v35 + 1;
    v11 = v106;
    if (v35 >= v34 >> 1)
    {
      v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v12);
      v11 = v106;
      v12 = v84;
    }
    *((_QWORD *)v12 + 2) = v13;
    v36 = v12 + 32;
    v37 = &v12[16 * v35 + 32];
    *(_QWORD *)v37 = v14;
    *((_QWORD *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        v38 = v13 - 1;
        if (v13 >= 4)
        {
          v43 = &v36[16 * v13];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_119;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_120;
          v50 = v13 - 2;
          v51 = &v36[16 * v13 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_122;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_125;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_129;
            v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v67 = *((_QWORD *)v12 + 4);
            v68 = *((_QWORD *)v12 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_77;
          }
          v40 = *((_QWORD *)v12 + 4);
          v39 = *((_QWORD *)v12 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_121;
        v50 = v13 - 2;
        v56 = &v36[16 * v13 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_124;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_127;
        if (__OFADD__(v60, v65))
          goto LABEL_128;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_83:
          if (v66)
            v38 = v50;
          goto LABEL_85;
        }
LABEL_77:
        if ((v61 & 1) != 0)
          goto LABEL_123;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_126;
        if (v72 < v60)
          goto LABEL_15;
LABEL_85:
        v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v78 = v12;
        v79 = &v36[16 * v77];
        v80 = *(_QWORD *)v79;
        v81 = &v36[16 * v38];
        v82 = *((_QWORD *)v81 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(_QWORD *)v79), (char *)(v11 + 16 * *(_QWORD *)v81), v11 + 16 * v82, __dst);
        if (v1)
          goto LABEL_93;
        if (v82 < v80)
          goto LABEL_116;
        if (v38 > *((_QWORD *)v78 + 2))
          goto LABEL_117;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v36[16 * v77 + 8] = v82;
        v83 = *((_QWORD *)v78 + 2);
        if (v38 >= v83)
          goto LABEL_118;
        v12 = v78;
        v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((_QWORD *)v78 + 2) = v83 - 1;
        v11 = v106;
        if (v83 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  double *v28;
  double v29;
  Swift::Int v30;
  double *v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 8;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = *(double *)(v84 + 16 * i + 8);
        v89 = v86;
        v90 = v85;
        do
        {
          if (*(double *)v90 >= v88)
            break;
          if (!v84)
            goto LABEL_141;
          v91 = *(_QWORD *)(v90 + 8);
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v90 - 8);
          *(_QWORD *)(v90 - 8) = v91;
          *(double *)v90 = v88;
          v90 -= 16;
        }
        while (!__CFADD__(v89++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v93 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v94)
            goto LABEL_145;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v94 + 16 * v97), (double *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_134;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_135;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Double));
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v103 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v102 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v16 < v15 == v19 >= *v17)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 16 * v10;
          v21 = 16 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v20;
              v25 = *(_QWORD *)(v11 + v21);
              v26 = *(_QWORD *)(v11 + v21 + 8);
              *(_OWORD *)(v11 + v21) = *(_OWORD *)(v11 + v20 - 16);
              *(_QWORD *)(v24 - 16) = v25;
              *(_QWORD *)(v24 - 8) = v26;
            }
            ++v23;
            v20 -= 16;
            v21 += 16;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (double *)(v11 + 16 * v10);
      do
      {
        v29 = *(double *)(v11 + 16 * v10 + 8);
        v30 = v14;
        v31 = v28;
        do
        {
          if (*(v31 - 1) >= v29)
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *v31;
          *(_OWORD *)v31 = *((_OWORD *)v31 - 1);
          *(v31 - 1) = v29;
          *(v31 - 2) = v32;
          v31 -= 2;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v106;
    if (v34 >= v33 >> 1)
    {
      v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v106;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_120;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_121;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_123;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_126;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_130;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_122;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_125;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_128;
        if (__OFADD__(v59, v64))
          goto LABEL_129;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_124;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_127;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v78), (double *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_93;
        if (v81 < v79)
          goto LABEL_117;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_118;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_119;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v106;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  double *v31;
  double v32;
  Swift::Int v33;
  double *v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int v109;
  Swift::Int v110;
  uint64_t v111;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v88 = *a1;
      v89 = *a1 + 16;
      v90 = -1;
      for (i = 1; i != v3; ++i)
      {
        v92 = *(double *)(v88 + 24 * i + 16);
        v93 = v90;
        v94 = v89;
        do
        {
          if (*(double *)v94 >= v92)
            break;
          if (!v88)
            goto LABEL_141;
          v95 = *(_QWORD *)(v94 + 8);
          v96 = *(_QWORD *)(v94 + 16);
          *(_OWORD *)(v94 + 8) = *(_OWORD *)(v94 - 16);
          *(_QWORD *)(v94 + 24) = *(_QWORD *)v94;
          *(_QWORD *)(v94 - 16) = v95;
          *(_QWORD *)(v94 - 8) = v96;
          *(double *)v94 = v92;
          v94 -= 24;
        }
        while (!__CFADD__(v93++, 1));
        v89 += 24;
        --v90;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v106 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v98 = v12;
      v108 = v9;
      if (v13 >= 2)
      {
        v99 = *v106;
        do
        {
          v100 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v99)
            goto LABEL_145;
          v101 = v98;
          v102 = *(_QWORD *)&v98[16 * v100 + 32];
          v103 = *(_QWORD *)&v98[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v99 + 24 * v102), (double *)(v99 + 24 * *(_QWORD *)&v98[16 * v13 + 16]), v99 + 24 * v103, __dst);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v101 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_134;
          v104 = &v101[16 * v100 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v101 + 2);
          if (v13 > v105)
            goto LABEL_135;
          memmove(&v101[16 * v13 + 16], &v101[16 * v13 + 32], 16 * (v105 - v13));
          v98 = v101;
          *((_QWORD *)v101 + 2) = v105 - 1;
          v13 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v108 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Double));
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v108 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v107 = *a1 + 64;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v109 = v6;
  v110 = v3;
  v111 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 24 * v10 + 16);
      v16 = *(double *)(v11 + 24 * v14 + 16);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v107 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v16 < v15 == v19 >= *v17)
            break;
          ++v10;
          v17 += 3;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 24 * v10;
          v21 = 24 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v21;
              v25 = v11 + v20;
              v26 = *(_QWORD *)(v11 + v21);
              v27 = *(_QWORD *)(v11 + v21 + 8);
              v28 = *(_QWORD *)(v11 + v21 + 16);
              v29 = *(_QWORD *)(v11 + v20 - 8);
              *(_OWORD *)v24 = *(_OWORD *)(v11 + v20 - 24);
              *(_QWORD *)(v24 + 16) = v29;
              *(_QWORD *)(v25 - 24) = v26;
              *(_QWORD *)(v25 - 16) = v27;
              *(_QWORD *)(v25 - 8) = v28;
            }
            ++v23;
            v20 -= 24;
            v21 += 24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v30 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v30 >= v3)
      v30 = v3;
    if (v30 < v14)
      break;
    if (v10 != v30)
    {
      v31 = (double *)(v11 + 24 * v10);
      do
      {
        v32 = *(double *)(v11 + 24 * v10 + 16);
        v33 = v14;
        v34 = v31;
        do
        {
          if (*(v34 - 1) >= v32)
            break;
          if (!v11)
            goto LABEL_142;
          v35 = *v34;
          v36 = *((_QWORD *)v34 + 1);
          *(_OWORD *)v34 = *(_OWORD *)(v34 - 3);
          v34[2] = *(v34 - 1);
          *((_QWORD *)v34 - 2) = v36;
          *(v34 - 1) = v32;
          *(v34 - 3) = v35;
          v34 -= 3;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 3;
      }
      while (v10 != v30);
      v10 = v30;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v38 = *((_QWORD *)v12 + 2);
    v37 = *((_QWORD *)v12 + 3);
    v13 = v38 + 1;
    v11 = v111;
    if (v38 >= v37 >> 1)
    {
      v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v12);
      v11 = v111;
      v12 = v87;
    }
    *((_QWORD *)v12 + 2) = v13;
    v39 = v12 + 32;
    v40 = &v12[16 * v38 + 32];
    *(_QWORD *)v40 = v14;
    *((_QWORD *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        v41 = v13 - 1;
        if (v13 >= 4)
        {
          v46 = &v39[16 * v13];
          v47 = *((_QWORD *)v46 - 8);
          v48 = *((_QWORD *)v46 - 7);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_120;
          v51 = *((_QWORD *)v46 - 6);
          v50 = *((_QWORD *)v46 - 5);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_121;
          v53 = v13 - 2;
          v54 = &v39[16 * v13 - 32];
          v56 = *(_QWORD *)v54;
          v55 = *((_QWORD *)v54 + 1);
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_123;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_126;
          if (v58 >= v49)
          {
            v76 = &v39[16 * v41];
            v78 = *(_QWORD *)v76;
            v77 = *((_QWORD *)v76 + 1);
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_130;
            v69 = v44 < v79;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v70 = *((_QWORD *)v12 + 4);
            v71 = *((_QWORD *)v12 + 5);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_77;
          }
          v43 = *((_QWORD *)v12 + 4);
          v42 = *((_QWORD *)v12 + 5);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_122;
        v53 = v13 - 2;
        v59 = &v39[16 * v13 - 32];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_125;
        v65 = &v39[16 * v41];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_128;
        if (__OFADD__(v63, v68))
          goto LABEL_129;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_83:
          if (v69)
            v41 = v53;
          goto LABEL_85;
        }
LABEL_77:
        if ((v64 & 1) != 0)
          goto LABEL_124;
        v72 = &v39[16 * v41];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_127;
        if (v75 < v63)
          goto LABEL_15;
LABEL_85:
        v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v81 = v12;
        v82 = &v39[16 * v80];
        v83 = *(_QWORD *)v82;
        v84 = &v39[16 * v41];
        v85 = *((_QWORD *)v84 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 24 * *(_QWORD *)v82), (double *)(v11 + 24 * *(_QWORD *)v84), v11 + 24 * v85, __dst);
        if (v1)
          goto LABEL_93;
        if (v85 < v83)
          goto LABEL_117;
        if (v41 > *((_QWORD *)v81 + 2))
          goto LABEL_118;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v39[16 * v80 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v41 >= v86)
          goto LABEL_119;
        v12 = v81;
        v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v11 = v111;
        if (v86 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v109;
    v3 = v110;
    if (v10 >= v110)
    {
      v9 = v108;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  id v16;
  id v17;
  id *v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t *v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  Swift::Int v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  Swift::Int v106;
  Swift::Int v107;
  Swift::Int v108;
  void **__dst;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_133;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_141;
  v7 = result;
  v98 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v113 = MEMORY[0x24BEE4AF8];
    __dst = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_99:
      if (v13 >= 2)
      {
        v91 = *v98;
        do
        {
          v92 = v13 - 2;
          if (v13 < 2)
            goto LABEL_128;
          if (!v91)
            goto LABEL_140;
          v93 = v10;
          v94 = *(_QWORD *)&v10[16 * v92 + 32];
          v95 = *(_QWORD *)&v10[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v91 + 8 * v94), (id *)(v91 + 8 * *(_QWORD *)&v10[16 * v13 + 16]), v91 + 8 * v95, __dst);
          if (v2)
            break;
          if (v95 < v94)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v93 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v93);
          if (v92 >= *((_QWORD *)v93 + 2))
            goto LABEL_130;
          v96 = &v93[16 * v92 + 32];
          *(_QWORD *)v96 = v94;
          *((_QWORD *)v96 + 1) = v95;
          v97 = *((_QWORD *)v93 + 2);
          if (v13 > v97)
            goto LABEL_131;
          memmove(&v93[16 * v13 + 16], &v93[16 * v13 + 32], 16 * (v97 - v13));
          v10 = v93;
          *((_QWORD *)v93 + 2) = v97 - 1;
          v13 = v97 - 1;
        }
        while (v97 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for SRSmartRepliesCaption();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v113 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v100 = *a1 + 16;
  v101 = v7;
  v99 = *a1 - 8;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v107 = v4;
  v112 = *a1;
  while (1)
  {
    v14 = v11++;
    v108 = v14;
    if (v11 < v4)
    {
      v102 = v10;
      v15 = *(void **)(v12 + 8 * v14);
      v16 = *(id *)(v12 + 8 * v11);
      v17 = v15;
      v105 = *(_QWORD *)(String.tokens()() + 16);
      swift_bridgeObjectRelease();
      v104 = *(_QWORD *)(String.tokens()() + 16);

      v4 = v107;
      swift_bridgeObjectRelease();
      v11 = v14 + 2;
      if (v14 + 2 < v107)
      {
        v18 = (id *)(v100 + 8 * v14);
        while (1)
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          v21 = v19;
          v22 = *(_QWORD *)(String.tokens()() + 16);
          swift_bridgeObjectRelease();
          v23 = *(_QWORD *)(String.tokens()() + 16);

          swift_bridgeObjectRelease();
          if (v104 < v105 == v23 >= v22)
            break;
          ++v11;
          ++v18;
          v4 = v107;
          if (v107 == v11)
          {
            v11 = v107;
            goto LABEL_22;
          }
        }
        v4 = v107;
      }
LABEL_22:
      v10 = v102;
      v12 = v112;
      if (v104 < v105)
      {
        if (v11 < v14)
          goto LABEL_134;
        if (v14 < v11)
        {
          v24 = (uint64_t *)(v99 + 8 * v11);
          v25 = v11;
          v26 = v14;
          v27 = (uint64_t *)(v112 + 8 * v14);
          do
          {
            if (v26 != --v25)
            {
              if (!v112)
                goto LABEL_139;
              v28 = *v27;
              *v27 = *v24;
              *v24 = v28;
            }
            ++v26;
            --v24;
            ++v27;
          }
          while (v26 < v25);
        }
      }
    }
    if (v11 < v4)
    {
      if (__OFSUB__(v11, v14))
        goto LABEL_132;
      if (v11 - v14 < v101)
        break;
    }
LABEL_49:
    if (v11 < v14)
      goto LABEL_127;
    v39 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v10 = v39;
    else
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
    v41 = *((_QWORD *)v10 + 2);
    v40 = *((_QWORD *)v10 + 3);
    v13 = v41 + 1;
    v12 = v112;
    if (v41 >= v40 >> 1)
    {
      v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v10);
      v12 = v112;
      v10 = v90;
    }
    v111 = v2;
    *((_QWORD *)v10 + 2) = v13;
    v42 = v10 + 32;
    v43 = &v10[16 * v41 + 32];
    *(_QWORD *)v43 = v14;
    *((_QWORD *)v43 + 1) = v11;
    if (v41)
    {
      while (1)
      {
        v44 = v13 - 1;
        if (v13 >= 4)
        {
          v49 = &v42[16 * v13];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_116;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_117;
          v56 = v13 - 2;
          v57 = &v42[16 * v13 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_119;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_122;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_126;
            v72 = v47 < v82;
            goto LABEL_86;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v73 = *((_QWORD *)v10 + 4);
            v74 = *((_QWORD *)v10 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_80;
          }
          v46 = *((_QWORD *)v10 + 4);
          v45 = *((_QWORD *)v10 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_118;
        v56 = v13 - 2;
        v62 = &v42[16 * v13 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_121;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_124;
        if (__OFADD__(v66, v71))
          goto LABEL_125;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_86:
          if (v72)
            v44 = v56;
          goto LABEL_88;
        }
LABEL_80:
        if ((v67 & 1) != 0)
          goto LABEL_120;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_123;
        if (v78 < v66)
          goto LABEL_14;
LABEL_88:
        v83 = v44 - 1;
        if (v44 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v12)
          goto LABEL_138;
        v84 = v10;
        v85 = &v42[16 * v83];
        v86 = *(_QWORD *)v85;
        v87 = &v42[16 * v44];
        v88 = *((_QWORD *)v87 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v12 + 8 * *(_QWORD *)v85), (id *)(v12 + 8 * *(_QWORD *)v87), v12 + 8 * v88, __dst);
        if (v111)
          goto LABEL_110;
        if (v88 < v86)
          goto LABEL_113;
        if (v44 > *((_QWORD *)v84 + 2))
          goto LABEL_114;
        *(_QWORD *)v85 = v86;
        *(_QWORD *)&v42[16 * v83 + 8] = v88;
        v89 = *((_QWORD *)v84 + 2);
        if (v44 >= v89)
          goto LABEL_115;
        v13 = v89 - 1;
        memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
        v10 = v84;
        *((_QWORD *)v84 + 2) = v89 - 1;
        v12 = v112;
        if (v89 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v107;
    v2 = v111;
    if (v11 >= v107)
      goto LABEL_99;
  }
  if (__OFADD__(v14, v101))
    goto LABEL_135;
  if (v14 + v101 >= v4)
    v29 = v4;
  else
    v29 = v14 + v101;
  if (v29 >= v14)
  {
    if (v11 != v29)
    {
      v103 = v10;
      v110 = v2;
      v30 = v99 + 8 * v11;
      v106 = v29;
      do
      {
        v31 = *(void **)(v12 + 8 * v11);
        v32 = v30;
        while (1)
        {
          v33 = *(void **)v32;
          v34 = v31;
          v35 = v33;
          v36 = *(_QWORD *)(String.tokens()() + 16);
          swift_bridgeObjectRelease();
          v37 = *(_QWORD *)(String.tokens()() + 16);

          swift_bridgeObjectRelease();
          if (v37 >= v36)
            break;
          v12 = v112;
          if (!v112)
            goto LABEL_137;
          v38 = *(void **)v32;
          v31 = *(void **)(v32 + 8);
          *(_QWORD *)v32 = v31;
          *(_QWORD *)(v32 + 8) = v38;
          v32 -= 8;
          if (v11 == ++v14)
            goto LABEL_42;
        }
        v12 = v112;
LABEL_42:
        ++v11;
        v30 += 8;
        v14 = v108;
      }
      while (v11 != v106);
      v11 = v106;
      v2 = v110;
      v10 = v103;
    }
    goto LABEL_49;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v22;
  Swift::Int v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t *v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  Swift::Int v112;
  Swift::Int v113;
  Swift::Int v114;
  uint64_t v115;
  char *__dst;
  uint64_t v117;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_152;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_160;
  v7 = result;
  v110 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v117 = MEMORY[0x24BEE4AF8];
    __dst = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_118:
      v102 = v10;
      if (v14 >= 2)
      {
        v103 = *v110;
        do
        {
          v104 = v14 - 2;
          if (v14 < 2)
            goto LABEL_147;
          if (!v103)
            goto LABEL_159;
          v105 = v102;
          v106 = *(_QWORD *)&v102[16 * v104 + 32];
          v107 = *(_QWORD *)&v102[16 * v14 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v103 + 8 * v106), (char *)(v103 + 8 * *(_QWORD *)&v102[16 * v14 + 16]), v103 + 8 * v107, __dst);
          if (v2)
            break;
          if (v107 < v106)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v105 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v105);
          if (v104 >= *((_QWORD *)v105 + 2))
            goto LABEL_149;
          v108 = &v105[16 * v104 + 32];
          *(_QWORD *)v108 = v106;
          *((_QWORD *)v108 + 1) = v107;
          v109 = *((_QWORD *)v105 + 2);
          if (v14 > v109)
            goto LABEL_150;
          memmove(&v105[16 * v14 + 16], &v105[16 * v14 + 32], 16 * (v109 - v14));
          v102 = v105;
          *((_QWORD *)v105 + 2) = v109 - 1;
          v14 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for SRSmartRepliesCaption();
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v117 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v111 = v12 - 8;
  v112 = v7;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v13 = &OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption;
  v113 = v4;
  v115 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 >= v4)
    {
      v23 = v15;
    }
    else
    {
      v16 = *v13;
      v17 = (uint64_t *)(*(_QWORD *)(v12 + 8 * v11) + *v13);
      v18 = *v17;
      v19 = v17[1];
      v20 = (_QWORD *)(*(_QWORD *)(v12 + 8 * v15) + *v13);
      if (v18 == *v20 && v19 == v20[1])
      {
        v23 = v15;
        v24 = v15 + 2;
        if (v24 >= v4)
          goto LABEL_43;
        v22 = 0;
        do
        {
LABEL_27:
          v26 = (uint64_t *)(*(_QWORD *)(v12 + 8 * v24) + v16);
          v27 = *v26;
          v28 = v26[1];
          v29 = (_QWORD *)(*(_QWORD *)(v12 + 8 * v11) + v16);
          if (v27 == *v29 && v28 == v29[1])
          {
            if ((v22 & 1) != 0)
              goto LABEL_35;
          }
          else
          {
            if (((v22 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
              goto LABEL_34;
            v16 = *v13;
          }
          v25 = v24 + 1;
          v11 = v24;
          v24 = v25;
        }
        while (v25 < v4);
        v24 = v25;
      }
      else
      {
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v23 = v15;
        v24 = v15 + 2;
        if (v24 < v4)
        {
          v16 = *v13;
          goto LABEL_27;
        }
      }
LABEL_34:
      v11 = v24;
      if ((v22 & 1) != 0)
      {
LABEL_35:
        if (v24 < v23)
          goto LABEL_155;
        if (v23 < v24)
        {
          v31 = (uint64_t *)(v111 + 8 * v24);
          v32 = v24;
          v33 = v23;
          v34 = (uint64_t *)(v12 + 8 * v23);
          do
          {
            if (v33 != --v32)
            {
              if (!v12)
                goto LABEL_158;
              v35 = *v34;
              *v34 = *v31;
              *v31 = v35;
            }
            ++v33;
            --v31;
            ++v34;
          }
          while (v33 < v32);
        }
LABEL_43:
        v11 = v24;
      }
    }
    if (v11 >= v4)
      goto LABEL_64;
    if (__OFSUB__(v11, v23))
      goto LABEL_151;
    if (v11 - v23 >= v112)
    {
LABEL_64:
      v37 = v23;
      goto LABEL_65;
    }
    if (__OFADD__(v23, v112))
      goto LABEL_153;
    v36 = v23 + v112 >= v4 ? v4 : v23 + v112;
    if (v36 < v23)
      break;
    v37 = v23;
    if (v11 != v36)
    {
      v38 = (uint64_t *)(v111 + 8 * v11);
      do
      {
        v39 = *(_QWORD *)(v12 + 8 * v11);
        v40 = v37;
        v41 = v38;
        do
        {
          v42 = (uint64_t *)(v39 + *v13);
          v43 = *v42;
          v44 = v42[1];
          v45 = (_QWORD *)(*v41 + *v13);
          v46 = v43 == *v45 && v44 == v45[1];
          if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v12)
            goto LABEL_156;
          v47 = *v41;
          v39 = v41[1];
          *v41 = v39;
          v41[1] = v47;
          --v41;
          ++v40;
        }
        while (v11 != v40);
        ++v11;
        ++v38;
      }
      while (v11 != v36);
      v11 = v36;
      if (v36 < v37)
        goto LABEL_146;
      goto LABEL_66;
    }
LABEL_65:
    if (v11 < v37)
      goto LABEL_146;
LABEL_66:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v14 = v49 + 1;
    if (v49 >= v48 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v14;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v37;
    *((_QWORD *)v51 + 1) = v11;
    if (v49)
    {
      v12 = v115;
      v114 = v11;
      while (1)
      {
        v52 = v14 - 1;
        if (v14 >= 4)
        {
          v57 = &v50[16 * v14];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_135;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_136;
          v64 = v14 - 2;
          v65 = &v50[16 * v14 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_138;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_141;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_145;
            v80 = v55 < v90;
            goto LABEL_103;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_97;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_137;
        v64 = v14 - 2;
        v70 = &v50[16 * v14 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_140;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_143;
        if (__OFADD__(v74, v79))
          goto LABEL_144;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_103:
          if (v80)
            v52 = v64;
          goto LABEL_105;
        }
LABEL_97:
        if ((v75 & 1) != 0)
          goto LABEL_139;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_142;
        if (v86 < v74)
          goto LABEL_14;
LABEL_105:
        v91 = v52 - 1;
        if (v52 - 1 >= v14)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v12)
          goto LABEL_157;
        v92 = v13;
        v93 = v10;
        v94 = v12;
        v95 = &v50[16 * v91];
        v96 = *(_QWORD *)v95;
        v97 = v50;
        v98 = v52;
        v99 = &v50[16 * v52];
        v100 = *((_QWORD *)v99 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 8 * *(_QWORD *)v95), (char *)(v94 + 8 * *(_QWORD *)v99), v94 + 8 * v100, __dst);
        if (v1)
          goto LABEL_115;
        if (v100 < v96)
          goto LABEL_132;
        if (v98 > *((_QWORD *)v93 + 2))
          goto LABEL_133;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v97[16 * v91 + 8] = v100;
        v101 = *((_QWORD *)v93 + 2);
        if (v98 >= v101)
          goto LABEL_134;
        v10 = v93;
        v14 = v101 - 1;
        memmove(v99, v99 + 16, 16 * (v101 - 1 - v98));
        v50 = v97;
        *((_QWORD *)v93 + 2) = v101 - 1;
        v80 = v101 > 2;
        v13 = v92;
        v11 = v114;
        v12 = v115;
        if (!v80)
          goto LABEL_14;
      }
    }
    v14 = 1;
    v12 = v115;
LABEL_14:
    v4 = v113;
    if (v11 >= v113)
    {
      v2 = v1;
      goto LABEL_118;
    }
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  Swift::Int v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  Swift::Int v99;
  Swift::Int v100;
  Swift::Int v101;
  Swift::Int v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_133;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_141;
  v102 = v3;
  v99 = result;
  v104 = v1;
  v95 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v103 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_98:
      v98 = v8;
      if (v12 >= 2)
      {
        v89 = *v95;
        do
        {
          v90 = v12 - 2;
          if (v12 < 2)
            goto LABEL_128;
          if (!v89)
            goto LABEL_140;
          v91 = *(_QWORD *)&v11[16 * v90 + 32];
          v92 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v89 + 16 * v91), (char *)(v89 + 16 * *(_QWORD *)&v11[16 * v12 + 16]), v89 + 16 * v92, v103);
          if (v104)
            goto LABEL_95;
          if (v92 < v91)
            goto LABEL_129;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if (v90 >= *((_QWORD *)v11 + 2))
            goto LABEL_130;
          v93 = &v11[16 * v90 + 32];
          *(_QWORD *)v93 = v91;
          *((_QWORD *)v93 + 1) = v92;
          v94 = *((_QWORD *)v11 + 2);
          if (v12 > v94)
            goto LABEL_131;
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v94 - v12));
          *((_QWORD *)v11 + 2) = v94 - 1;
          v12 = v94 - 1;
        }
        while (v94 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v98 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v98 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v102;
    v98 = v7;
    v103 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v96 = *a1 + 24;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v105 = *a1;
  while (1)
  {
    v13 = v9++;
    v101 = v13;
    if (v9 < v3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = String.count.getter();
      v15 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v96 + 16 * v13;
        while (1)
        {
          v16 += 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v17 = String.count.getter();
          v18 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v15 < v14 == v18 >= v17)
            break;
          ++v9;
          v3 = v102;
          if (v102 == v9)
          {
            v9 = v102;
            goto LABEL_23;
          }
        }
        v3 = v102;
      }
LABEL_23:
      v10 = v105;
      if (v15 < v14)
      {
        if (v9 < v13)
          goto LABEL_134;
        if (v13 < v9)
        {
          v19 = 16 * v9;
          v20 = 16 * v13;
          v21 = v9;
          v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v105)
                goto LABEL_139;
              v23 = v105 + v19;
              v24 = *(_QWORD *)(v105 + v20);
              v25 = *(_QWORD *)(v105 + v20 + 8);
              *(_OWORD *)(v105 + v20) = *(_OWORD *)(v105 + v19 - 16);
              *(_QWORD *)(v23 - 16) = v24;
              *(_QWORD *)(v23 - 8) = v25;
            }
            ++v22;
            v19 -= 16;
            v20 += 16;
          }
          while (v22 < v21);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_48;
    if (__OFSUB__(v9, v13))
      goto LABEL_132;
    if (v9 - v13 >= v99)
      goto LABEL_48;
    v26 = v13 + v99;
    if (__OFADD__(v13, v99))
      goto LABEL_135;
    if (v26 >= v3)
      v26 = v3;
    if (v26 < v13)
      break;
    if (v9 != v26)
    {
      v97 = v11;
      v27 = (_QWORD *)(v10 + 16 * v9);
      v100 = v26;
      do
      {
        v28 = v27;
        do
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v29 = String.count.getter();
          v30 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v30 >= v29)
            break;
          if (!v105)
            goto LABEL_137;
          v31 = *v28;
          v32 = v28[1];
          *(_OWORD *)v28 = *((_OWORD *)v28 - 1);
          *(v28 - 1) = v32;
          *(v28 - 2) = v31;
          v28 -= 2;
          ++v13;
        }
        while (v9 != v13);
        ++v9;
        v27 += 2;
        v13 = v101;
      }
      while (v9 != v100);
      v9 = v100;
      v11 = v97;
    }
LABEL_48:
    if (v9 < v13)
      goto LABEL_127;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v34 = *((_QWORD *)v11 + 2);
    v33 = *((_QWORD *)v11 + 3);
    v12 = v34 + 1;
    v10 = v105;
    if (v34 >= v33 >> 1)
    {
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v11);
      v10 = v105;
      v11 = v88;
    }
    *((_QWORD *)v11 + 2) = v12;
    v35 = v11 + 32;
    v36 = &v11[16 * v34 + 32];
    *(_QWORD *)v36 = v13;
    *((_QWORD *)v36 + 1) = v9;
    if (v34)
    {
      while (1)
      {
        v37 = v12 - 1;
        if (v12 >= 4)
        {
          v42 = &v35[16 * v12];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_116;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_117;
          v49 = v12 - 2;
          v50 = &v35[16 * v12 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_119;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_122;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_126;
            v65 = v40 < v75;
            goto LABEL_85;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v66 = *((_QWORD *)v11 + 4);
            v67 = *((_QWORD *)v11 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_79;
          }
          v39 = *((_QWORD *)v11 + 4);
          v38 = *((_QWORD *)v11 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_118;
        v49 = v12 - 2;
        v55 = &v35[16 * v12 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_121;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_124;
        if (__OFADD__(v59, v64))
          goto LABEL_125;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_85:
          if (v65)
            v37 = v49;
          goto LABEL_87;
        }
LABEL_79:
        if ((v60 & 1) != 0)
          goto LABEL_120;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_123;
        if (v71 < v59)
          goto LABEL_15;
LABEL_87:
        v76 = v37 - 1;
        if (v37 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10)
          goto LABEL_138;
        v77 = v9;
        v78 = v11;
        v79 = v35;
        v80 = &v35[16 * v76];
        v81 = *(_QWORD *)v80;
        v82 = v79;
        v83 = v37;
        v84 = &v79[16 * v37];
        v85 = *((_QWORD *)v84 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 16 * *(_QWORD *)v80), (char *)(v10 + 16 * *(_QWORD *)v84), v10 + 16 * v85, v103);
        if (v104)
        {
LABEL_95:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v98 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v85 < v81)
          goto LABEL_113;
        if (v83 > *((_QWORD *)v78 + 2))
          goto LABEL_114;
        v86 = v83;
        *(_QWORD *)v80 = v81;
        *(_QWORD *)&v82[16 * v76 + 8] = v85;
        v87 = *((_QWORD *)v78 + 2);
        if (v83 >= v87)
          goto LABEL_115;
        v35 = v82;
        v11 = v78;
        v104 = 0;
        v12 = v87 - 1;
        memmove(v84, v84 + 16, 16 * (v87 - 1 - v86));
        *((_QWORD *)v78 + 2) = v87 - 1;
        v10 = v105;
        v9 = v77;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v102;
    if (v9 >= v102)
    {
      v8 = v98;
      goto LABEL_98;
    }
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  float v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  Swift::Int v29;
  uint64_t v30;
  float v31;
  Swift::Int v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  float *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v86 = *a1;
      v87 = -1;
      v88 = 1;
      v89 = *a1;
      do
      {
        v90 = *(float *)(v86 + 24 * v88);
        v91 = v87;
        v92 = v89;
        do
        {
          if (*(float *)v92 >= v90)
            break;
          if (!v86)
            goto LABEL_141;
          v93 = *(_OWORD *)(v92 + 32);
          *(_OWORD *)(v92 + 24) = *(_OWORD *)v92;
          *(_QWORD *)(v92 + 40) = *(_QWORD *)(v92 + 16);
          *(float *)v92 = v90;
          *(_OWORD *)(v92 + 8) = v93;
          v92 -= 24;
        }
        while (!__CFADD__(v91++, 1));
        ++v88;
        v89 += 24;
        --v87;
      }
      while (v88 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v104 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v95 = v12;
      v106 = v9;
      if (v13 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v96)
            goto LABEL_145;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v96 + 24 * v99), (float *)(v96 + 24 * *(_QWORD *)&v95[16 * v13 + 16]), v96 + 24 * v100, __dst);
          if (v1)
            break;
          if (v100 < v99)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_134;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v13 > v102)
            goto LABEL_135;
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v106 = v8;
    __dst = (float *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v105 = *a1 + 48;
  v103 = *a1 - 24;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v107 = v6;
  v108 = v3;
  v109 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v11 + 24 * v10);
      v16 = *(float *)(v11 + 24 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (float *)(v105 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v16 < v15 == v19 >= *v17)
            break;
          ++v10;
          v17 += 6;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v16 < v15)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 24 * v10;
          v21 = 24 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v21;
              v25 = v11 + v20;
              v26 = *(_DWORD *)(v11 + v21);
              v27 = *(_OWORD *)(v11 + v21 + 8);
              v28 = *(_OWORD *)(v11 + v20 - 24);
              *(_QWORD *)(v24 + 16) = *(_QWORD *)(v11 + v20 - 8);
              *(_OWORD *)v24 = v28;
              *(_DWORD *)(v25 - 24) = v26;
              *(_OWORD *)(v25 - 16) = v27;
            }
            ++v23;
            v20 -= 24;
            v21 += 24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v29 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v29 >= v3)
      v29 = v3;
    if (v29 < v14)
      break;
    if (v10 != v29)
    {
      v30 = v103 + 24 * v10;
      do
      {
        v31 = *(float *)(v11 + 24 * v10);
        v32 = v14;
        v33 = v30;
        do
        {
          if (*(float *)v33 >= v31)
            break;
          if (!v11)
            goto LABEL_142;
          v34 = *(_OWORD *)(v33 + 32);
          *(_OWORD *)(v33 + 24) = *(_OWORD *)v33;
          *(_QWORD *)(v33 + 40) = *(_QWORD *)(v33 + 16);
          *(float *)v33 = v31;
          *(_OWORD *)(v33 + 8) = v34;
          v33 -= 24;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        v30 += 24;
      }
      while (v10 != v29);
      v10 = v29;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v36 = *((_QWORD *)v12 + 2);
    v35 = *((_QWORD *)v12 + 3);
    v13 = v36 + 1;
    v11 = v109;
    if (v36 >= v35 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v12);
      v11 = v109;
      v12 = v85;
    }
    *((_QWORD *)v12 + 2) = v13;
    v37 = v12 + 32;
    v38 = &v12[16 * v36 + 32];
    *(_QWORD *)v38 = v14;
    *((_QWORD *)v38 + 1) = v10;
    if (v36)
    {
      while (1)
      {
        v39 = v13 - 1;
        if (v13 >= 4)
        {
          v44 = &v37[16 * v13];
          v45 = *((_QWORD *)v44 - 8);
          v46 = *((_QWORD *)v44 - 7);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_120;
          v49 = *((_QWORD *)v44 - 6);
          v48 = *((_QWORD *)v44 - 5);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_121;
          v51 = v13 - 2;
          v52 = &v37[16 * v13 - 32];
          v54 = *(_QWORD *)v52;
          v53 = *((_QWORD *)v52 + 1);
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_123;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_126;
          if (v56 >= v47)
          {
            v74 = &v37[16 * v39];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_130;
            v67 = v42 < v77;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v68 = *((_QWORD *)v12 + 4);
            v69 = *((_QWORD *)v12 + 5);
            v50 = __OFSUB__(v69, v68);
            v61 = v69 - v68;
            v62 = v50;
            goto LABEL_77;
          }
          v41 = *((_QWORD *)v12 + 4);
          v40 = *((_QWORD *)v12 + 5);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
        }
        if ((v43 & 1) != 0)
          goto LABEL_122;
        v51 = v13 - 2;
        v57 = &v37[16 * v13 - 32];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v60 = __OFSUB__(v58, v59);
        v61 = v58 - v59;
        v62 = v60;
        if (v60)
          goto LABEL_125;
        v63 = &v37[16 * v39];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v50 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v50)
          goto LABEL_128;
        if (__OFADD__(v61, v66))
          goto LABEL_129;
        if (v61 + v66 >= v42)
        {
          v67 = v42 < v66;
LABEL_83:
          if (v67)
            v39 = v51;
          goto LABEL_85;
        }
LABEL_77:
        if ((v62 & 1) != 0)
          goto LABEL_124;
        v70 = &v37[16 * v39];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_127;
        if (v73 < v61)
          goto LABEL_15;
LABEL_85:
        v78 = v39 - 1;
        if (v39 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v79 = v12;
        v80 = &v37[16 * v78];
        v81 = *(_QWORD *)v80;
        v82 = &v37[16 * v39];
        v83 = *((_QWORD *)v82 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v11 + 24 * *(_QWORD *)v80), (float *)(v11 + 24 * *(_QWORD *)v82), v11 + 24 * v83, __dst);
        if (v1)
          goto LABEL_93;
        if (v83 < v81)
          goto LABEL_117;
        if (v39 > *((_QWORD *)v79 + 2))
          goto LABEL_118;
        *(_QWORD *)v80 = v81;
        *(_QWORD *)&v37[16 * v78 + 8] = v83;
        v84 = *((_QWORD *)v79 + 2);
        if (v39 >= v84)
          goto LABEL_119;
        v12 = v79;
        v13 = v84 - 1;
        memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
        *((_QWORD *)v79 + 2) = v84 - 1;
        v11 = v109;
        if (v84 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v10 >= v108)
    {
      v9 = v106;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v16 = &v4[16 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v17 = (char *)(a3 - 16);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 16;
          v20 = *((_QWORD *)v18 - 2);
          v18 -= 16;
          if (*((_QWORD *)v16 - 2) >= v20)
          {
            v22 = v16 - 16;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_OWORD *)v17 = *((_OWORD *)v16 - 1);
            v18 = v6;
            v16 -= 16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_OWORD *)v17 = *(_OWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 16;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 16;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t result;
  char *v30;
  char *v31;
  char *v32;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v32 = __src;
  v31 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v21 = &v4[8 * v13];
      v30 = v21;
      v32 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v22 = (char *)(a3 - 8);
        v23 = v6;
        while (1)
        {
          v24 = v22 + 8;
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          v26 = (_QWORD *)(*((_QWORD *)v21 - 1) + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
          v27 = *(_QWORD *)(v25 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8);
          v28 = *v26 == *(_QWORD *)(v25 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption)
             && v26[1] == v27;
          if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v30 = v21 - 8;
            if (v24 < v21 || v22 >= v21 || v24 != v21)
              *(_QWORD *)v22 = *((_QWORD *)v21 - 1);
            v23 = v6;
            v21 -= 8;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v24 != v6 || v22 >= v6)
              *(_QWORD *)v22 = *(_QWORD *)v23;
            v32 = v23;
            if (v23 <= v7)
              goto LABEL_50;
          }
          v22 -= 8;
          v6 = v23;
          if (v21 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v30 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v15 = (uint64_t *)(*(_QWORD *)v6 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
        v16 = *v15;
        v17 = v15[1];
        v18 = (_QWORD *)(*(_QWORD *)v4 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
        v19 = v16 == *v18 && v17 == v18[1];
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v31 = v4;
          v20 = v6;
        }
        else
        {
          v20 = v6 + 8;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v20;
      }
      while ((unint64_t)v20 < a3);
      v32 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v32, &v31, &v30);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v6 - 1) >= *(v18 - 1))
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v15[1] >= v6[1])
        {
          v4 = v15 + 2;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          v16 = v6 + 2;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  double *v25;
  double *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[3 * v11];
      v24 = (char *)v17;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        do
        {
          v19 = (double *)(v18 + 24);
          if (*(v6 - 1) >= *(v17 - 1))
          {
            v24 = (char *)(v17 - 3);
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v22 = *(_OWORD *)(v17 - 3);
              *(double *)(v18 + 16) = *(v17 - 1);
              *(_OWORD *)v18 = v22;
            }
            v20 = v6;
            v17 -= 3;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 3;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v20;
              *(double *)(v18 + 16) = *(v6 - 1);
              *(_OWORD *)v18 = v21;
            }
            v26 = v6 - 3;
            if (v20 <= v7)
              break;
          }
          v18 -= 24;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v26, (const void **)&v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[3 * v9];
    v24 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        if (v13[2] >= v6[2])
        {
          v4 = v13 + 3;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 3;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 3;
          }
        }
        else
        {
          v14 = v6 + 3;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        v7[2] = v15[2];
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 3;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v25 = v4;
        v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = 0;
    v6 = v2 + 4;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1)
          v10 = 1;
        else
          v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Double)>);
        v11 = (_QWORD *)swift_allocObject();
        v12 = _swift_stdlib_malloc_size(v11);
        v13 = v12 - 32;
        if (v12 < 32)
          v13 = v12 - 17;
        v14 = v13 >> 4;
        v11[2] = v10;
        v11[3] = 2 * (v13 >> 4);
        v15 = (unint64_t)(v11 + 4);
        v16 = v2[3] >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v15 >= (unint64_t)&v2[2 * v16 + 4])
            memmove(v11 + 4, v2 + 4, 16 * v16);
          v2[2] = 0;
        }
        v6 = (_QWORD *)(v15 + 16 * v16);
        v4 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v16;
        result = swift_release();
        v2 = v11;
      }
      v18 = __OFSUB__(v4--, 1);
      if (v18)
        break;
      *v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v4 = 0;
LABEL_23:
  v19 = v2[3];
  if (v19 < 2)
    return (uint64_t)v2;
  v20 = v19 >> 1;
  v18 = __OFSUB__(v20, v4);
  v21 = v20 - v4;
  if (!v18)
  {
    v2[2] = v21;
    return (uint64_t)v2;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized EnumeratedSequence.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t result;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (!v1)
  {
    v6 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_26;
    v7 = (unint64_t)(v0[2] + 64) >> 6;
    if (v6 < v7)
    {
      v8 = v0[1];
      v9 = *(_QWORD *)(v8 + 8 * v6);
      if (v9)
      {
LABEL_8:
        v4 = (v9 - 1) & v9;
        v3 = v6;
        goto LABEL_3;
      }
      v10 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v7)
      {
        v9 = *(_QWORD *)(v8 + 8 * v10);
        if (v9)
        {
LABEL_11:
          v6 = v10;
          goto LABEL_8;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v7)
        {
          v9 = *(_QWORD *)(v8 + 8 * (v2 + 3));
          if (v9)
          {
            v6 = v2 + 3;
            goto LABEL_8;
          }
          v10 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v7)
          {
            v9 = *(_QWORD *)(v8 + 8 * v10);
            if (v9)
              goto LABEL_11;
            v6 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v7)
            {
              v9 = *(_QWORD *)(v8 + 8 * v6);
              if (v9)
                goto LABEL_8;
              v3 = v7 - 1;
              v11 = v2 + 6;
              while (v7 != v11)
              {
                v9 = *(_QWORD *)(v8 + 8 * v11++);
                if (v9)
                {
                  v6 = v11 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v5 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v5;
  }
  v4 = (v1 - 1) & v1;
LABEL_3:
  v0[3] = v3;
  v0[4] = v4;
  v5 = v0[5];
  if (!__OFADD__(v5, 1))
  {
    v0[5] = v5 + 1;
    swift_bridgeObjectRetain();
    return v5;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v20 = result + 32;
    v19 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v6 <= v3)
        v7 = v3;
      else
        v7 = v6;
      v21 = v7;
      while (1)
      {
        if (v6 == v21)
          goto LABEL_34;
        v8 = *(_QWORD **)(v20 + 8 * v6++);
        v9 = v8[2];
        if (!v9)
          goto LABEL_7;
        if (v8[4] == a2 && v8[5] == a3)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          break;
        if (v9 != 1)
        {
          v11 = v8 + 7;
          v12 = 1;
          while (1)
          {
            v13 = v12 + 1;
            if (__OFADD__(v12, 1))
              break;
            if (*(v11 - 1) == a2 && *v11 == a3)
              goto LABEL_25;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_25;
            v11 += 2;
            ++v12;
            if (v13 == v9)
              goto LABEL_7;
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        if (v6 == v3)
          return v19;
      }
LABEL_25:
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      v15 = v19;
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v15 = v19;
      }
      v16 = v15;
      v18 = *(_QWORD *)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
      if (v18 >= v17 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v19;
      }
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v19 = v16;
      *(_QWORD *)(v16 + 8 * v18 + 32) = v8;
      if (v6 == v3)
        return v19;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5 = 0;
  v6 = *(_QWORD *)(result + 16);
  v7 = result + 40;
  v8 = MEMORY[0x24BEE4AF8];
  v18 = result + 40;
  v19 = v6;
LABEL_2:
  if (v5 > v6)
    v6 = v5;
  v9 = -(uint64_t)v6;
  v10 = v5 + 1;
  v11 = (uint64_t *)(v7 + 16 * v5);
  while (1)
  {
    if (v20 + v10 == 1)
      return v8;
    v5 = v10++;
    if (v9 + v10 == 2)
      break;
    v12 = *(v11 - 1);
    v13 = *v11;
    if (v12 == a2 && v13 == a3)
    {
      v12 = a2;
      v13 = a3;
LABEL_14:
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
      v16 = *(_QWORD *)(v8 + 16);
      v15 = *(_QWORD *)(v8 + 24);
      if (v16 >= v15 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v8 + 16) = v16 + 1;
      v17 = v8 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v13;
      v7 = v18;
      v6 = v19;
      goto LABEL_2;
    }
    v11 += 2;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_14;
  }
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v6 = 0;
  v7 = result + 40;
  v8 = -(uint64_t)v3;
  v9 = MEMORY[0x24BEE4AF8];
  v19 = result + 40;
  do
  {
    if (v6 <= v3)
      v10 = v3;
    else
      v10 = v6;
    v11 = -(uint64_t)v10;
    for (i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v14 = *i;
      if (v13 != a2 || v14 != a3)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
      }
      ++v6;
      if (v8 + v6 == 1)
        return v9;
    }
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v17 = *(_QWORD *)(v9 + 16);
    v16 = *(_QWORD *)(v9 + 24);
    if (v17 >= v16 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v9 + 16) = v17 + 1;
    v18 = v9 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v14;
    v3 = v20;
    v7 = v19;
  }
  while (v8 + v6);
  return v9;
}

uint64_t specialized static BagOfWordsStrategy.featurizeSentence(sentence:wordIndex:stopWords:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t i;
  _QWORD *v23;
  BOOL v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v29 = v7;
    bzero((void *)(v7 + 32), 8 * v6);
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      return v29;
  }
  else
  {
    v29 = MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      return v29;
  }
  v9 = a1 + 32;
  v30 = a3 + 56;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    v11 = (uint64_t *)(v9 + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    if (*(_QWORD *)(a3 + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(a3 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v30 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        v17 = *(_QWORD *)(a3 + 48);
        v18 = (_QWORD *)(v17 + 16 * v16);
        v19 = *v18 == v13 && v18[1] == v12;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_7;
        v20 = v16 + 1;
        v21 = ~v15;
        for (i = v20 & ~v15; ((*(_QWORD *)(v30 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v21)
        {
          v23 = (_QWORD *)(v17 + 16 * i);
          v24 = *v23 == v13 && v23[1] == v12;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_7;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if (*(_QWORD *)(a2 + 16))
      break;
LABEL_7:
    ++v10;
    swift_bridgeObjectRelease();
    if (v10 == v8)
    {
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  swift_bridgeObjectRetain();
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v25);
  result = swift_bridgeObjectRelease();
  if ((v27 & 0x8000000000000000) == 0)
  {
    if (v27 >= *(_QWORD *)(v29 + 16))
      goto LABEL_32;
    *(double *)(v29 + 32 + 8 * v27) = *(double *)(v29 + 32 + 8 * v27) + 1.0;
    goto LABEL_7;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  v24 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v10 >= v25)
      return swift_release();
    v22 = *(_QWORD *)(v24 + 8 * v10);
    if (!v22)
      break;
LABEL_19:
    v8 = (v22 - 1) & v22;
    v12 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    v17 = specialized _ArrayProtocol.filter(_:)(v16, v15, v14);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 16);
    swift_bridgeObjectRelease();
    v19 = log((double)*(uint64_t *)(a2 + 16) / (double)v18);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *a3;
    *a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v14, isUniquelyReferenced_nonNull_native, v19);
    *a3 = v26;
    swift_bridgeObjectRelease_n();
    result = swift_bridgeObjectRelease();
  }
  v23 = v10 + 1;
  if (v10 + 1 >= v25)
    return swift_release();
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v10 + 2;
  if (v10 + 2 >= v25)
    return swift_release();
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v10 + 3;
  if (v10 + 3 >= v25)
    return swift_release();
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v10 + 4;
  if (v10 + 4 >= v25)
    return swift_release();
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v10 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v25)
      return swift_release();
    v22 = *(_QWORD *)(v24 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release();
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release();
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release();
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    result = swift_bridgeObjectRelease();
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release();
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  v3 = specialized EnumeratedSequence.Iterator.next()();
  if (v4)
  {
    do
    {
      a2(v3);
      swift_bridgeObjectRelease();
      v3 = specialized EnumeratedSequence.Iterator.next()();
    }
    while (v5);
  }
  return outlined consume of [String : Double].Iterator._Variant();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SaySdGs5NeverOTg50102_s12SmartReplies13TFIDFStrategy33_F6986EAE989EDA5E565C8C5406F83E2BLLV14affinityMatrix12forSentencesSayT23SdGGSaySSG_tFAGSiXEfU1_SDySiSDySSSdGGSDySSSiG0F7Replies13TFIDFStrategy01_ijklmnoP1BLLVAKTf1cn_nTf4ngnng_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v7;
  v9 = result;
  v19 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a2 <= v9)
      v10 = v9;
    else
      v10 = a2;
    v11 = v9;
    while (a2 != v11)
    {
      v17 = v11;
      result = closure #3 in TFIDFStrategy.affinityMatrix(forSentences:)(&v17, a3, a4, &v18);
      if (v6)
      {
        swift_release();
        return v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v12;
      if (a2 < v9)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a2 == ++v11)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Sd7elementtG_SSs5NeverOTg5176_s12SmartReplies24ExtractiveTextSummarizerV9summarize4text25summarizationStrategyType4topN14inLogicalOrderSaySSGSS_AA0c13SummarizationiJ0OSiSbtFZSSSi6offset_Sd7elementt_tXEfU2_SaySSGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v18;
  v7 = (unint64_t *)(a1 + 32);
  v8 = a2 + 32;
  v9 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    v11 = *v7;
    v7 += 2;
    v10 = v11;
    if (v11 >= v9)
      break;
    v12 = (uint64_t *)(v8 + 16 * v10);
    v14 = *v12;
    v13 = v12[1];
    v15 = *(_QWORD *)(v18 + 16);
    v16 = *(_QWORD *)(v18 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v16 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
    *(_QWORD *)(v18 + 16) = v15 + 1;
    v17 = v18 + 16 * v15;
    *(_QWORD *)(v17 + 32) = v14;
    *(_QWORD *)(v17 + 40) = v13;
    if (!--v2)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized TFIDFStrategy.termFrequency(sentence:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  double v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  double v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  v2 = 1.0 / (double)v1;
  v3 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v4 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v6 = *(v3 - 1);
    v5 = *v3;
    v7 = v4[2];
    swift_bridgeObjectRetain();
    if (v7)
    {
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
      if ((v9 & 1) != 0)
      {
        v10 = *(double *)(v4[7] + 8 * v8);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
        v14 = v4[2];
        v15 = (v12 & 1) == 0;
        v16 = v14 + v15;
        if (__OFADD__(v14, v15))
          goto LABEL_34;
        v17 = v12;
        if (v4[3] >= v16)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
          v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
          if ((v17 & 1) != (v19 & 1))
            goto LABEL_36;
          v13 = v18;
        }
        v33 = v2 + v10;
        if ((v17 & 1) == 0)
        {
          v4[(v13 >> 6) + 8] |= 1 << v13;
          v34 = (uint64_t *)(v4[6] + 16 * v13);
          *v34 = v6;
          v34[1] = v5;
          *(double *)(v4[7] + 8 * v13) = v33;
          v35 = v4[2];
          v31 = __OFADD__(v35, 1);
          v32 = v35 + 1;
          if (v31)
            goto LABEL_35;
LABEL_26:
          v4[2] = v32;
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
        *(double *)(v4[7] + 8 * v13) = v33;
        goto LABEL_4;
      }
    }
    v20 = swift_isUniquelyReferenced_nonNull_native();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
    v23 = v4[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v4[3] >= v25)
    {
      if ((v20 & 1) != 0)
      {
        if ((v21 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v26 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_36;
      v22 = v27;
      if ((v26 & 1) == 0)
      {
LABEL_18:
        v4[(v22 >> 6) + 8] |= 1 << v22;
        v29 = (uint64_t *)(v4[6] + 16 * v22);
        *v29 = v6;
        v29[1] = v5;
        *(double *)(v4[7] + 8 * v22) = v2;
        v30 = v4[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_33;
        goto LABEL_26;
      }
    }
    *(double *)(v4[7] + 8 * v22) = v2;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 += 2;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized TFIDFStrategy.documentTermFrequencies(sentences:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain_n();
  v2 = 0;
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v5 = swift_bridgeObjectRetain();
    v6 = specialized TFIDFStrategy.termFrequency(sentence:)(v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
    v10 = v3[2];
    v11 = (v8 & 1) == 0;
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    v13 = v8;
    if (v3[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v8 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v13 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
      if ((v13 & 1) != (v15 & 1))
        goto LABEL_21;
      v9 = v14;
      if ((v13 & 1) != 0)
      {
LABEL_3:
        v4 = v3[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v4 + 8 * v9) = v6;
        goto LABEL_4;
      }
    }
    v3[(v9 >> 6) + 8] |= 1 << v9;
    v16 = 8 * v9;
    *(_QWORD *)(v3[6] + v16) = v2;
    *(_QWORD *)(v3[7] + v16) = v6;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_20;
    v3[2] = v19;
LABEL_4:
    ++v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v1 == v2)
    {
      swift_bridgeObjectRelease_n();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static ExtractiveTextSummarizer.pageRank(M:maxIterations:d:)(uint64_t a1, uint64_t a2, double a3)
{
  int64_t __P;
  double *v4;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  double *v18;
  uint64_t result;
  int64_t v20;
  double *v21;

  __P = *(_QWORD *)(a1 + 16);
  v4 = (double *)MEMORY[0x24BEE4AF8];
  if (!__P)
    return (uint64_t)v4;
  v8 = specialized Array.init(repeating:count:)(*(_QWORD *)(a1 + 16), 1.0 / (double)__P);
  v21 = v4;
  v9 = (1.0 - a3) / (double)__P;
  swift_bridgeObjectRetain();
  v10 = 0;
  v20 = __P;
  do
  {
    v11 = *(_QWORD *)(a1 + 32 + 8 * v10);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
      v13 = 0;
      v14 = (uint64_t)v4;
      v15 = *((_QWORD *)v4 + 2);
      do
      {
        v16 = *(double *)(v11 + 8 * v13 + 32);
        v17 = *((_QWORD *)v4 + 3);
        if (v15 >= v17 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v15 + 1, 1);
        ++v13;
        *((_QWORD *)v4 + 2) = v15 + 1;
        v4[v15++ + 4] = v9 + v16 * a3;
      }
      while (v12 != v13);
      swift_bridgeObjectRelease();
      __P = v20;
      v4 = (double *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      v14 = (uint64_t)v4;
    }
    ++v10;
    specialized Array.append<A>(contentsOf:)(v14);
  }
  while (v10 != __P);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18 = v21;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v18 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2), 0, v21);
  vDSP_mtransD(v21 + 4, 1, v18 + 4, 1, __P, __P);
  result = swift_bridgeObjectRelease();
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      v4 = (double *)v8;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16), 0, (_QWORD *)v8);
        vDSP_mmulD(v18 + 4, 1, (const double *)(v8 + 32), 1, v4 + 4, 1, __P, 1uLL, __P);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = (uint64_t)v4;
        --a2;
      }
      while (a2);
    }
    else
    {
      v4 = (double *)v8;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ExtractiveTextSummarizer.summarize(text:summarizationStrategyType:topN:inLogicalOrder:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = *a3;
    splitIntoSentences(text:)(a1, a2);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t lazy protocol witness table accessor for type ExtractiveSummarizationStrategyType and conformance ExtractiveSummarizationStrategyType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExtractiveSummarizationStrategyType and conformance ExtractiveSummarizationStrategyType;
  if (!lazy protocol witness table cache variable for type ExtractiveSummarizationStrategyType and conformance ExtractiveSummarizationStrategyType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for ExtractiveSummarizationStrategyType, &type metadata for ExtractiveSummarizationStrategyType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtractiveSummarizationStrategyType and conformance ExtractiveSummarizationStrategyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ExtractiveSummarizationStrategyType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ExtractiveSummarizationStrategyType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ExtractiveSummarizationStrategyType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ExtractiveSummarizationStrategyType]);
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ExtractiveSummarizationStrategyType] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of ExtractiveSummarizationStrategy.affinityMatrix(forSentences:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ExtractiveSummarizationStrategyType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtractiveSummarizationStrategyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2475F1864 + 4 * byte_247656171[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2475F1898 + 4 * byte_24765616C[v4]))();
}

uint64_t sub_2475F1898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F18A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2475F18A8);
  return result;
}

uint64_t sub_2475F18B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2475F18BCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2475F18C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F18C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ExtractiveSummarizationStrategyType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ExtractiveSummarizationStrategyType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ExtractiveSummarizationStrategyType()
{
  return &type metadata for ExtractiveSummarizationStrategyType;
}

ValueMetadata *type metadata accessor for ExtractiveTextSummarizer()
{
  return &type metadata for ExtractiveTextSummarizer;
}

uint64_t partial apply for closure #1 in splitIntoSentences(text:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in splitIntoSentences(text:)(a1, a2, a3, *(_QWORD ***)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BagOfWordsStrategy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BagOfWordsStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2475F1A44 + 4 * byte_24765617B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2475F1A78 + 4 * byte_247656176[v4]))();
}

uint64_t sub_2475F1A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F1A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2475F1A88);
  return result;
}

uint64_t sub_2475F1A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2475F1A9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2475F1AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F1AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BagOfWordsStrategy()
{
  return &unk_2518C4758;
}

void *type metadata accessor for TFIDFStrategy()
{
  return &unk_2518C4780;
}

uint64_t partial apply for closure #1 in splitIntoWords(text:lemmatize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in splitIntoWords(text:lemmatize:)(a1, a2, a3, *(_QWORD ***)(v3 + 16));
}

uint64_t partial apply for closure #2 in TFIDFStrategy.affinityMatrix(forSentences:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in TFIDFStrategy.affinityMatrix(forSentences:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

void partial apply for closure #1 in TFIDFStrategy.featurizeSentence(wordIndex:tf:idf:)(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;

  closure #1 in TFIDFStrategy.featurizeSentence(wordIndex:tf:idf:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD ***)(v3 + 32), a3);
}

uint64_t one-time initialization function for shared()
{
  uint64_t result;

  type metadata accessor for SRSmartRepliesActionMetadataController();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  static SRSmartRepliesActionMetadataController.shared = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TUSCache<String, [SRSmartRepliesPersonMatch]>);
  swift_allocObject();
  result = TUSCache.init(capacity:)();
  static ContactResolver.shared = result;
  return result;
}

uint64_t SRSmartRepliesActionMetadataController.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

uint64_t static SRSmartRepliesActionMetadataController.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t SRSmartRepliesActionMetadataController.eventDataSource.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    type metadata accessor for ActionEventDataSource();
    v1 = swift_allocObject();
    *(_BYTE *)(v1 + 24) = 0;
    v2 = v1 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar;
    v3 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService) = 0;
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC74E8]), sel_init);
    *(_QWORD *)(v1 + 16) = v4;
    if (*(_BYTE *)(v1 + 24) != 1)
    {
      v5 = v4;
      v6 = swift_allocObject();
      swift_weakInit();
      v10[4] = partial apply for closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:);
      v10[5] = v6;
      v10[0] = MEMORY[0x24BDAC760];
      v10[1] = 1107296256;
      v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
      v10[3] = &block_descriptor_0;
      v7 = _Block_copy(v10);
      v8 = v5;
      swift_release();
      objc_msgSend(v8, sel_requestFullAccessToEventsWithCompletion_, v7);
      _Block_release(v7);

    }
    *(_QWORD *)(v0 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t SRSmartRepliesActionMetadataController.contactDataSource.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    type metadata accessor for ActionContactDataSource();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
    *(_QWORD *)(v0 + 24) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void SRSmartRepliesActionMetadataController.currentlyPlayingDataSource.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 32) == 1)
    *(_BYTE *)(v0 + 32) = 0;
}

uint64_t SRSmartRepliesActionMetadataController.locationDataSource.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    v2 = v0;
    type metadata accessor for ActionLocationDataSource();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 0;
    v3 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v3, sel_setDesiredAccuracy_, *MEMORY[0x24BDBFB58]);

    v4 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v4, sel_requestWhenInUseAuthorization);

    if (objc_msgSend((id)objc_opt_self(), sel_locationServicesEnabled))
    {
      v5 = ActionLocationDataSource.locationManager.getter();
      objc_msgSend(v5, sel_startUpdatingLocation);

      *(_BYTE *)(v1 + 32) = 1;
    }
    *(_QWORD *)(v2 + 40) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id SRSmartRepliesActionMetadataController.etaDataSource.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(id *)(v0 + 48);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActionETADataSource()), sel_init);
    v4 = *(void **)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void SRSmartRepliesActionMetadataController.focusDataSource.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 56) == 1)
    *(_BYTE *)(v0 + 56) = 0;
}

uint64_t SRSmartRepliesActionMetadataController.metadata(for:actionType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v3[7] = swift_task_alloc();
  v4 = type metadata accessor for Date();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SRSmartRepliesActionMetadataController.metadata(for:actionType:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  uint64_t (*v72)(_QWORD *, uint64_t);
  uint64_t (__cdecl *v73)();
  uint64_t v74;

  if ((specialized static NSBundle.isDonatingBundleOnly()() & 1) != 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.standard);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_2475DF000, v2, v3, "Not returning metadata because this bundle is donating only.", v4, 2u);
      MEMORY[0x24957ECC0](v4, -1, -1);
    }

  }
  else
  {
    if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 32)) + 0x130))() & 1) != 0)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.standard);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = *(_QWORD *)(v0 + 40);
        v10 = (uint8_t *)swift_slowAlloc();
        v11 = swift_slowAlloc();
        v74 = v11;
        *(_DWORD *)v10 = 136315138;
        *(_QWORD *)(v0 + 16) = v9;
        v12 = String.init<A>(reflecting:)();
        *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2475DF000, v7, v8, "Skipping metadata population for action %s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v11, -1, -1);
        MEMORY[0x24957ECC0](v10, -1, -1);
      }

      v14 = *(_QWORD *)(v0 + 80);
      v15 = *(_QWORD *)(v0 + 56);
      v16 = *(_QWORD *)(v0 + 40);
      v17 = SRSmartRepliesActionType.stringValue()();
      v18 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
      Date.init()();
      v19 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
      v5 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(v16, 0, 0, 0, 0, v17._countAndFlagsBits, (uint64_t)v17._object, v14, -1.0, -1.0, 0, v15, 0, 0, 0);
      goto LABEL_14;
    }
    v21 = *(_QWORD *)(v0 + 40);
    Date.init()();
    switch(v21)
    {
      case 1:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) == 0)
          goto LABEL_52;
        v35 = SRSmartRepliesActionMetadataController.eventDataSource.getter();
        *(_QWORD *)(v0 + 96) = v35;
        SRSmartRepliesActionMetadataController.focusDataSource.getter();
        v71 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:)
                                              + async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:));
        v36 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 104) = v36;
        *v36 = v0;
        v36[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        v37 = v35;
        return v71(v37);
      case 2:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) != 0)
        {
          v38 = SRSmartRepliesActionMetadataController.eventDataSource.getter();
          *(_QWORD *)(v0 + 120) = v38;
          v71 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:)
                                                + async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:));
          v39 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 128) = v39;
          v40 = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
LABEL_50:
          *v39 = v0;
          v39[1] = v40;
          v37 = v38;
          return v71(v37);
        }
LABEL_52:
        if (one-time initialization token for standard != -1)
          swift_once();
        v70 = type metadata accessor for Logger();
        __swift_project_value_buffer(v70, (uint64_t)static Logger.standard);
        v62 = Logger.logObject.getter();
        v63 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          v65 = "Not warming event data source because we cannot learn from Calendar";
          goto LABEL_46;
        }
        goto LABEL_47;
      case 3:
        v38 = SRSmartRepliesActionMetadataController.locationDataSource.getter();
        *(_QWORD *)(v0 + 144) = v38;
        v71 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:)
                                              + async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:));
        v39 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 152) = v39;
        v40 = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        goto LABEL_50;
      case 4:
        v41 = *(_QWORD *)(v0 + 48);
        v42 = *(_QWORD **)(v41 + 64);
        if (!v42)
        {
          v43 = SRSmartRepliesActionMetadataController.etaDataSource.getter();
          v44 = SRSmartRepliesActionMetadataController.locationDataSource.getter();
          v45 = *(void **)(v41 + 64);
          *(_QWORD *)(v41 + 64) = v43;
          *(_QWORD *)(v41 + 72) = v44;
          outlined consume of ETAActionMetadataProvider?(v45);
          v42 = *(_QWORD **)(v41 + 64);
          if (!v42)
            goto LABEL_36;
        }
        *(_QWORD *)(v0 + 168) = v42;
        v46 = *(_QWORD *)(v41 + 72);
        *(_QWORD *)(v0 + 176) = v46;
        outlined copy of ETAActionMetadataProvider?(v42);
        v72 = (uint64_t (*)(_QWORD *, uint64_t))((char *)&async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:)
                                                        + async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:));
        v47 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 184) = v47;
        *v47 = v0;
        v47[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return v72(v42, v46);
      case 5:
      case 6:
      case 7:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) == 0)
          goto LABEL_42;
        v27 = SRSmartRepliesActionMetadataController.contactDataSource.getter();
        *(_QWORD *)(v0 + 200) = v27;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 216))(v27);
        *(_QWORD *)(v0 + 208) = v28;
        v29 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 216) = v29;
        *v29 = v0;
        v29[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return AddressActionMetadataProvider.metadataItem(for:)(*(_QWORD *)(v0 + 32), v27, v28);
      case 8:
      case 9:
      case 10:
      case 11:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) == 0)
          goto LABEL_42;
        v22 = *(_QWORD *)(v0 + 40);
        v23 = SRSmartRepliesActionMetadataController.contactDataSource.getter();
        *(_QWORD *)(v0 + 232) = v23;
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 216))(v23);
        *(_QWORD *)(v0 + 240) = v24;
        if ((unint64_t)(v22 - 9) >= 3)
          v25 = 3;
        else
          v25 = 0x10200u >> (8 * (v22 - 9));
        v26 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 248) = v26;
        *v26 = v0;
        v26[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return PhoneNumberActionMetadataProvider.metadataItem(for:)(*(_QWORD *)(v0 + 32), v23, v24, v25, *(_QWORD *)(v0 + 40));
      case 12:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) == 0)
          goto LABEL_42;
        v48 = SRSmartRepliesActionMetadataController.contactDataSource.getter();
        *(_QWORD *)(v0 + 264) = v48;
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 216))(v48);
        *(_QWORD *)(v0 + 272) = v49;
        v50 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 280) = v50;
        *v50 = v0;
        v50[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return EmailAddressActionMetadataProvider.metadataItem(for:)(*(_QWORD *)(v0 + 32), v48, v49);
      case 13:
        v52 = *(_QWORD *)(v0 + 80);
        v51 = *(_QWORD *)(v0 + 88);
        v53 = *(_QWORD *)(v0 + 64);
        v54 = *(_QWORD *)(v0 + 72);
        v55 = *(_QWORD *)(v0 + 56);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v52, v51, v53);
        v56 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
        v57 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
        v5 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(13, 0, 0, 0, 0, 0, 0, v52, -1.0, -1.0, 1, v55, 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v51, v53);
        goto LABEL_14;
      case 14:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) == 0)
          goto LABEL_42;
        v58 = SRSmartRepliesActionMetadataController.contactDataSource.getter();
        *(_QWORD *)(v0 + 296) = v58;
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 216))(v58);
        *(_QWORD *)(v0 + 304) = v59;
        v60 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 312) = v60;
        *v60 = v0;
        v60[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return PostalCodeActionMetadataProvider.metadataItem(for:)(*(_QWORD *)(v0 + 32), v58, v59);
      case 15:
        SRSmartRepliesActionMetadataController.currentlyPlayingDataSource.getter();
        v73 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:)
                                    + async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:));
        v69 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 328) = v69;
        *v69 = v0;
        v69[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        return v73();
      case 16:
      case 17:
        if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) != 0)
        {
          v30 = *(_QWORD *)(v0 + 40);
          v31 = SRSmartRepliesActionMetadataController.contactDataSource.getter();
          *(_QWORD *)(v0 + 344) = v31;
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 216))(v31);
          *(_QWORD *)(v0 + 352) = v32;
          if (v30 == 17)
            v33 = 1;
          else
            v33 = 2 * (v30 != 16);
          v34 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 360) = v34;
          *v34 = v0;
          v34[1] = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
          return NameActionMetadataProvider.metadataItem(for:)(*(_QWORD *)(v0 + 32), v31, v32, v33, *(_QWORD *)(v0 + 40));
        }
LABEL_42:
        if (one-time initialization token for standard != -1)
          swift_once();
        v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)static Logger.standard);
        v62 = Logger.logObject.getter();
        v63 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          v65 = "Not warming event data source because we cannot learn from Contacts";
LABEL_46:
          _os_log_impl(&dword_2475DF000, v62, v63, v65, v64, 2u);
          MEMORY[0x24957ECC0](v64, -1, -1);
        }
LABEL_47:
        v66 = *(_QWORD *)(v0 + 88);
        v67 = *(_QWORD *)(v0 + 64);
        v68 = *(_QWORD *)(v0 + 72);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
        break;
      case 18:
        v38 = SRSmartRepliesActionMetadataController.locationDataSource.getter();
        *(_QWORD *)(v0 + 376) = v38;
        v71 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:)
                                              + async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:));
        v39 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 384) = v39;
        v40 = SRSmartRepliesActionMetadataController.metadata(for:actionType:);
        goto LABEL_50;
      default:
LABEL_36:
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
        break;
    }
  }
  v5 = 0;
LABEL_14:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 336);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 392);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t SRSmartRepliesActionMetadataController.metadata(for:actionType:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc();

  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

double SRSmartRepliesActionMetadataController.responseKitAttributesToActionInfo(for:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double result;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_9;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x646C656966, 0xE500000000000000);
  if ((v5 & 1) != 0)
  {
LABEL_5:
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v38);
    outlined init with take of Any(v38, &v39);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_9;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x74736575716572, 0xE700000000000000);
  if ((v6 & 1) != 0)
    goto LABEL_5;
  if (*(_QWORD *)(a1 + 16)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v39);
  }
  else
  {
LABEL_9:
    v39 = 0u;
    v40 = 0u;
  }
LABEL_10:
  if (!*((_QWORD *)&v40 + 1))
  {
    outlined destroy of Any?((uint64_t)&v39);
    goto LABEL_26;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    if (one-time initialization token for standard != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      *(_QWORD *)&v39 = v29;
      *(_DWORD *)v28 = 136315138;
      swift_bridgeObjectRetain();
      v30 = Dictionary.description.getter();
      v32 = v31;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v26, v27, "RK unhandled attributes %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v29, -1, -1);
      MEMORY[0x24957ECC0](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_36;
  }
  v9 = *((_QWORD *)&v38[0] + 1);
  v10 = *(_QWORD *)&v38[0];
  *(_QWORD *)&v38[0] = 1718379891;
  *((_QWORD *)&v38[0] + 1) = 0xE400000000000000;
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x65707974627573, 0xE700000000000000);
    if ((v12 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v39);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        v38[0] = v36;
      }
    }
  }
  v13 = v38[0];
  if (v38[0] == __PAIR128__(0xE400000000000000, 1718379891)
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v13 == __PAIR128__(0x800000024765B5C0, 0xD000000000000010)
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v14 = 2;
  }
  if (one-time initialization token for standard != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_DWORD *)v18 = 136315394;
    *(_QWORD *)&v36 = v19;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    swift_beginAccess();
    v20 = v9;
    v21 = v10;
    v23 = *((_QWORD *)&v38[0] + 1);
    v22 = *(_QWORD *)&v38[0];
    swift_bridgeObjectRetain();
    v24 = v22;
    v10 = v21;
    v9 = v20;
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2475DF000, v16, v17, "RK Found '%s' of subtype '%s'", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v19, -1, -1);
    MEMORY[0x24957ECC0](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v10 == 0x4D464F454D495478 && v9 == 0xEF78474E49544545
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v10 == 0x4556455458454E78 && v9 == 0xEF78454D414E544ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (v10 == 0x434E415453494478 && v9 == 0xEE00785941574145
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 3;
LABEL_46:
    *a2 = v34;
    a2[1] = v14;
    return result;
  }
  if (v10 == 0x7841544578 && v9 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 4;
    goto LABEL_46;
  }
  if (v10 == 0x444441454D4F4878 && v9 == 0xED00007853534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 6;
    goto LABEL_46;
  }
  if (v10 == 0x4444414B524F5778 && v9 == 0xED00007853534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 7;
    goto LABEL_46;
  }
  if (v10 == 0x5353455244444178 && v9 == 0xE900000000000078
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 5;
    goto LABEL_46;
  }
  if (v10 == 0x78454E4F485078 && v9 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 8;
    goto LABEL_46;
  }
  if (v10 == 0x4F48504B524F5778 && v9 == 0xEB0000000078454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 11;
    goto LABEL_46;
  }
  if (v10 == 0x50454C49424F4D78 && v9 == 0xED000078454E4F48
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 10;
    goto LABEL_46;
  }
  if (v10 == 0x4F4850454D4F4878 && v9 == 0xEB0000000078454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 9;
    goto LABEL_46;
  }
  if (v10 == 0x784C49414D4578 && v9 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 12;
    goto LABEL_46;
  }
  if (v10 == 0x434C4154534F5078 && v9 == 0xEC0000007845444FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 14;
    goto LABEL_46;
  }
  if (v10 == 0x414E4E4556494778 && v9 == 0xEB0000000078454DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 16;
    goto LABEL_46;
  }
  if (v10 == 0x454D414E52555378 && v9 == 0xE900000000000078
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = 17;
    goto LABEL_46;
  }
  if (v10 != 0x6E6F697461636F6CLL || v9 != 0xE800000000000000)
  {
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_99;
LABEL_36:
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_99:
  *(_QWORD *)&result = 3;
  *(_OWORD *)a2 = xmmword_247656420;
  return result;
}

uint64_t SRSmartRepliesActionMetadataController.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  outlined consume of ETAActionMetadataProvider?(*(void **)(v0 + 64));
  return v0;
}

uint64_t SRSmartRepliesActionMetadataController.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  outlined consume of ETAActionMetadataProvider?(*(void **)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t SRSmartRepliesActionMetadataController.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

void specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

uint64_t sub_2475F49D8()
{
  uint64_t v0;
  Swift::Int v1;

  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFStringRef(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    v7 = v6;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static _CFObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x24957E3B4](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

void *outlined copy of ETAActionMetadataProvider?(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_retain();
  }
  return result;
}

void *outlined consume of ETAActionMetadataProvider?(void *result)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t type metadata accessor for SRSmartRepliesActionMetadataController()
{
  return objc_opt_self();
}

uint64_t method lookup function for SRSmartRepliesActionMetadataController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 304) + *(_QWORD *)(*(_QWORD *)v2 + 304));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadataController.responseKitAttributesToActionInfo(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadataController.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t sub_2475F5218()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(char a1, void *a2)
{
  closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(a1, a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t outlined copy of SRSmartRepliesError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SRSmartRepliesError(uint64_t a1)
{
  return outlined consume of SRSmartRepliesError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of SRSmartRepliesError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SRSmartRepliesError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SRSmartRepliesError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SRSmartRepliesError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SRSmartRepliesError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of SRSmartRepliesError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SRSmartRepliesError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of SRSmartRepliesError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SRSmartRepliesError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SRSmartRepliesError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SRSmartRepliesError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SRSmartRepliesError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesError()
{
  return &type metadata for SRSmartRepliesError;
}

id SRSmartRepliesSuggestionResponse.__allocating_init(suggestions:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id SRSmartRepliesSuggestionResponse.init(suggestions:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestionResponse();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for SRSmartRepliesSuggestionResponse()
{
  return objc_opt_self();
}

id SRSmartRepliesSuggestionResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesSuggestionResponse.init(coder:)(a1);
}

id SRSmartRepliesSuggestionResponse.init(coder:)(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  NSArray v5;
  id v6;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  v3 = (void *)MEMORY[0x24957DF1C](0x6974736567677573, 0xEB00000000736E6FLL);
  v4 = objc_msgSend(a1, sel_decodeObjectForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of Any?((uint64_t)v8, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SRSmartRepliesSuggestion]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v5.super.isa = 0;
    goto LABEL_9;
  }
  type metadata accessor for SRSmartRepliesSuggestion();
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_9:
  v6 = objc_msgSend(v1, sel_initWithSuggestions_, v5.super.isa);

  return v6;
}

uint64_t static SRSmartRepliesSuggestionResponse.supportsSecureCoding.getter()
{
  return 1;
}

id SRSmartRepliesSuggestionResponse.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  id result;
  objc_super v7;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions);
  v4 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = v3;
  v7.receiver = v5;
  v7.super_class = v4;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = v4;
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SRSmartRepliesSuggestionResponse.encode(with:)(NSCoder with)
{
  uint64_t v1;
  Class isa;
  id v4;

  isa = *(Class *)(v1 + OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions);
  if (isa)
  {
    type metadata accessor for SRSmartRepliesSuggestion();
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  v4 = (id)MEMORY[0x24957DF1C](0x6974736567677573, 0xEB00000000736E6FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v4);
  swift_unknownObjectRelease();

}

uint64_t SRSmartRepliesSuggestionResponse.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_7;
  }
  type metadata accessor for SRSmartRepliesSuggestionResponse();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v4 = 0;
    return v4 & 1;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions);
  v3 = *(_QWORD *)&v6[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions];
  if (!v2)
  {
    swift_bridgeObjectRetain();

    if (!v3)
    {
      v4 = 1;
      return v4 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (!v3)
  {

    goto LABEL_7;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v4 = specialized static Array<A>.== infix(_:_:)(v2, v3);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();

  return v4 & 1;
}

uint64_t SRSmartRepliesSuggestionResponse.suggestions.getter()
{
  return swift_bridgeObjectRetain();
}

id SRSmartRepliesSuggestionResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesSuggestionResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesSuggestionResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestionResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SRSmartRepliesSuggestionResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionResponse.__allocating_init(suggestions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionResponse.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionResponse.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestionResponse.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t Date.numberOfHoursSeparated(from:)(uint64_t a1)
{
  return Date.numberOfHoursSeparated(from:)(a1, MEMORY[0x24BDCF230], (uint64_t (*)(uint64_t))MEMORY[0x24BDCBD08]);
}

uint64_t Date.numberOfMinutesSeparated(from:)(uint64_t a1)
{
  return Date.numberOfHoursSeparated(from:)(a1, MEMORY[0x24BDCF258], (uint64_t (*)(uint64_t))MEMORY[0x24BDCBD60]);
}

uint64_t Date.numberOfHoursSeparated(from:)(uint64_t a1, unsigned int *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  _QWORD v19[3];
  uint64_t (*v20)(uint64_t);

  v19[2] = a1;
  v20 = a3;
  v19[0] = type metadata accessor for DateComponents();
  v4 = *(_QWORD *)(v19[0] - 8);
  MEMORY[0x24BDAC7A8](v19[0]);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.autoupdatingCurrent.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v11 = type metadata accessor for Calendar.Component();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_247656500;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v12 + 104))(v14 + v13, *a2, v11);
  specialized Set.init<A>(_:)(v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:to:)();
  v15 = swift_bridgeObjectRelease();
  result = v20(v15);
  v17 = 0;
  if ((v18 & 1) == 0 && (v17 = result, result < 0) && (v17 = -result, __OFSUB__(0, result)))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, _QWORD))(v4 + 8))(v6, v19[0]);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v17;
  }
  return result;
}

uint64_t Date.localizedTimeOfDay.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  Class isa;
  void *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  Class v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v0);
  v55 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Date();
  v54 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v58 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Calendar.Component();
  v51 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DateComponents();
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar();
  v17 = *(_QWORD *)(v16 - 8);
  v45 = v16;
  v46 = v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - v21;
  static Calendar.autoupdatingCurrent.getter();
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  static Locale.autoupdatingCurrent.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  objc_msgSend(v23, sel_setLocale_, isa);

  v25 = (void *)MEMORY[0x24957DF1C](1835874922, 0xE400000000000000);
  v50 = v23;
  objc_msgSend(v23, sel_setLocalizedDateFormatFromTemplate_, v25);

  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v27 = v45;
  v26(v9, 1, 1, v45);
  v28 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v48, 1, 1, v28);
  v29 = v47;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  v30 = v51;
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v51 + 104);
  v32 = v49;
  v31(v4, *MEMORY[0x24BDCF230], v49);
  Calendar.component(_:from:)();
  v33 = *(void (**)(char *, uint64_t))(v30 + 8);
  v33(v4, v32);
  DateComponents.hour.setter();
  v31(v4, *MEMORY[0x24BDCF258], v32);
  v34 = v52;
  v53 = v22;
  Calendar.component(_:from:)();
  v35 = v4;
  v36 = v54;
  v33(v35, v32);
  DateComponents.minute.setter();
  static Calendar.autoupdatingCurrent.getter();
  v37 = (uint64_t)v55;
  Calendar.date(from:)();
  v38 = *(void (**)(char *, uint64_t))(v46 + 8);
  v38(v20, v27);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v34) == 1)
  {
    v39 = v58;
    Date.init()();
    outlined destroy of Date?(v37);
  }
  else
  {
    v39 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v58, v37, v34);
  }
  v40 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v34);
  v41 = v50;
  v42 = objc_msgSend(v50, sel_stringFromDate_, v40);

  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v57);
  v38(v53, v27);
  return v43;
}

uint64_t Date.isInTheFuture.getter()
{
  return Date.isInTheFuture.getter((uint64_t (*)(uint64_t, char *))MEMORY[0x24BDCE5E8]);
}

uint64_t Date.isInThePast.getter()
{
  return Date.isInTheFuture.getter((uint64_t (*)(uint64_t, char *))MEMORY[0x24BDCE5F0]);
}

uint64_t Date.isInTheFuture.getter(uint64_t (*a1)(uint64_t, char *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  LOBYTE(a1) = a1(v1, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return a1 & 1;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id SRSmartRepliesSuggestion.__allocating_init(title:isDynamicSuggestion:)(uint64_t a1, uint64_t a2, char a3)
{
  objc_class *v3;
  _BYTE *v7;
  _QWORD *v8;
  objc_super v10;

  v7 = objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v8 = a1;
  v8[1] = a2;
  v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SRSmartRepliesSuggestion.init(title:isDynamicSuggestion:)(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v3;
  _QWORD *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v4 = a1;
  v4[1] = a2;
  v3[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestion();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SRSmartRepliesSuggestion()
{
  return objc_opt_self();
}

id SRSmartRepliesSuggestion.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesSuggestion.init(coder:)(a1);
}

id SRSmartRepliesSuggestion.init(coder:)(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v3 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  v4 = objc_msgSend(a1, sel_decodeObjectForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {

    outlined destroy of Any?((uint64_t)v11);
LABEL_9:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_9;
  }
  v5 = (void *)MEMORY[0x24957DF1C](0xD000000000000013, 0x800000024765BA10);
  v6 = objc_msgSend(a1, sel_decodeBoolForKey_, v5);

  v7 = (void *)MEMORY[0x24957DF1C]();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v1, sel_initWithTitle_isDynamicSuggestion_, v7, v6);

  return v8;
}

uint64_t static SRSmartRepliesSuggestion.supportsSecureCoding.getter()
{
  return 1;
}

id SRSmartRepliesSuggestion.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  objc_class *v6;
  _BYTE *v7;
  _QWORD *v8;
  id result;
  objc_super v10;

  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion);
  v6 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestion();
  v7 = objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v8 = v4;
  v8[1] = v3;
  v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = v5;
  v10.receiver = v7;
  v10.super_class = v6;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v10, sel_init);
  a1[3] = v6;
  *a1 = result;
  return result;
}

Swift::Int SRSmartRepliesSuggestion.hash.getter()
{
  uint64_t v0;

  Hasher.init()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_BYTE *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion));
  return Hasher.finalize()();
}

Swift::Void __swiftcall SRSmartRepliesSuggestion.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = (void *)MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title), *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8));
  v4 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion);
  v6 = (id)MEMORY[0x24957DF1C](0xD000000000000013, 0x800000024765BA10);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v5, v6);

}

uint64_t SRSmartRepliesSuggestion.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  char v3;
  char v4;
  char v5;
  char *v7;
  _BYTE v8[24];
  uint64_t v9;

  outlined init with copy of Any?(a1, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_10;
  }
  type metadata accessor for SRSmartRepliesSuggestion();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v5 = 0;
    return v5 & 1;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title) == *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title]
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8) == *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8];
  if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {

    goto LABEL_10;
  }
  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion);
  v4 = v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion];

  v5 = v3 ^ v4 ^ 1;
  return v5 & 1;
}

uint64_t SRSmartRepliesSuggestion.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x800000024765BA30;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  return 0x22203A656C746974;
}

uint64_t SRSmartRepliesSuggestion.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SRSmartRepliesSuggestion.isDynamicSuggestion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion);
}

id SRSmartRepliesSuggestion.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesSuggestion.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesSuggestion.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestion();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for SRSmartRepliesSuggestion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestion.__allocating_init(title:isDynamicSuggestion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestion.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestion.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SRSmartRepliesSuggestion.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

void TextPreprocessor.init(languageCode:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v6 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v7 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D2E392D305B245CLL, 0xE90000000000002BLL, 0);
  v8 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v9 = v7;
  v10 = @nonobjc NSRegularExpression.init(pattern:options:)(29532, 0xE200000000000000, 0);
  v11 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v12 = v10;
  v13 = @nonobjc NSRegularExpression.init(pattern:options:)(0x7D2C327B20, 0xE500000000000000, 0);
  v14 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v15 = v13;
  v16 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D9980E2BCCA275BLL, 0xA800000000000000, 0);

  *a3 = v9;
  a3[1] = v12;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = a1;
  a3[5] = a2;
}

void *ContactPlaceholderConstants.contactPlaceholder.unsafeMutableAddressor()
{
  return &static ContactPlaceholderConstants.contactPlaceholder;
}

uint64_t static ContactPlaceholderConstants.contactPlaceholder.getter()
{
  return 33231;
}

const char *ContactPlaceholderConstants.contactPlaceholderReplacement.unsafeMutableAddressor()
{
  return " #*#rho#*# ";
}

uint64_t static ContactPlaceholderConstants.contactPlaceholderReplacement.getter()
{
  return 0x236F6872232A2320;
}

uint64_t TextPreprocessor.languageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::String __swiftcall TextPreprocessor.replaceDollarAmounts(inputText:)(Swift::String inputText)
{
  void **v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::String result;

  object = inputText._object;
  countAndFlagsBits = inputText._countAndFlagsBits;
  v4 = *v1;
  v5 = (void *)MEMORY[0x24957DF1C]();
  v6 = objc_msgSend(v4, sel_matchesInString_options_range_, v5, 0, 0, String.count.getter());

  type metadata accessor for NSTextCheckingResult();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5078_s12SmartReplies16TextPreprocessorV20replaceDollarAmounts05inputC0S2S_tFSSSo20deF6CXEfU_SSTf1cn_nTf4ng_n(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    v10 = v8 + 40;
    do
    {
      swift_bridgeObjectRetain();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v11._countAndFlagsBits = 0x7372616C6C6F6420;
      v11._object = (void *)0xE800000000000000;
      String.append(_:)(v11);
      countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v13 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      object = v13;
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v14 = countAndFlagsBits;
  v15 = object;
  result._object = v15;
  result._countAndFlagsBits = v14;
  return result;
}

Swift::String __swiftcall TextPreprocessor.fixWhitespaces(inputText:)(Swift::String inputText)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Swift::String result;

  v2 = *(void **)(v1 + 8);
  v3 = (void *)MEMORY[0x24957DF1C]();
  v4 = String.count.getter();
  v5 = (void *)MEMORY[0x24957DF1C](32, 0xE100000000000000);
  v6 = objc_msgSend(v2, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v3, 0, 0, v4, v5);

  v7 = v6;
  if (!v6)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = (void *)MEMORY[0x24957DF1C](v8);
    swift_bridgeObjectRelease();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = *(void **)(v1 + 16);
  v10 = String.count.getter();
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x24957DF1C](32, 0xE100000000000000);
  v12 = objc_msgSend(v9, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v7, 0, 0, v10, v11);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  v16 = v13;
  v17 = v15;
  result._object = v17;
  result._countAndFlagsBits = v16;
  return result;
}

Swift::String __swiftcall TextPreprocessor.removeApostrophes(inputText:)(Swift::String inputText)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v2 = *(void **)(v1 + 24);
  v3 = (void *)MEMORY[0x24957DF1C]();
  v4 = String.count.getter();
  v5 = (void *)MEMORY[0x24957DF1C](0, 0xE000000000000000);
  v6 = objc_msgSend(v2, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v3, 0, 0, v4, v5);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v10 = v7;
  v11 = v9;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x24957DF1C]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t specialized TextPreprocessor.normalizeContactNames(in:contactMatches:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  if (a3)
  {
    v3 = a3;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_bridgeObjectRetain();
    TUSCache.subscript.getter();
    swift_bridgeObjectRelease();
    v3 = v9;
    if (!v9)
    {
      v4 = String.inferredAddressBookContacts()();
      if (v4)
        v3 = v4;
      else
        v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      TUSCache.subscript.setter();
    }
  }
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v5 = v3[2];
  if (v5)
  {
    v6 = v3 + 6;
    do
    {
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      v6 += 5;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t type metadata accessor for NSTextCheckingResult()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTextCheckingResult;
  if (!lazy cache variable for type metadata for NSTextCheckingResult)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5078_s12SmartReplies16TextPreprocessorV20replaceDollarAmounts05inputC0S2S_tFSSSo20deF6CXEfU_SSTf1cn_nTf4ng_n(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return v3;
    v17 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v17;
    v15 = v1 & 0xC000000000000001;
    v16 = v1;
    while (v2 != v5)
    {
      if (v15)
        v6 = (id)MEMORY[0x24957E42C](v5, v1);
      else
        v6 = *(id *)(v1 + 8 * v5 + 32);
      v7 = v6;
      objc_msgSend(v6, sel_range);
      Range<>.init(_:in:)();
      v8 = String.subscript.getter();
      v9 = MEMORY[0x24957DF88](v8);
      v11 = v10;

      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(v17 + 16);
      v12 = *(_QWORD *)(v17 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v17 + 16) = v13 + 1;
      v14 = v17 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      v1 = v16;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ContactPlaceholderConstants()
{
  return &type metadata for ContactPlaceholderConstants;
}

uint64_t initializeBufferWithCopyOfBuffer for TextPreprocessor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for TextPreprocessor(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TextPreprocessor(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextPreprocessor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TextPreprocessor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextPreprocessor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextPreprocessor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextPreprocessor()
{
  return &type metadata for TextPreprocessor;
}

Swift::String __swiftcall SRSmartRepliesActionType.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  Swift::String result;

  v1 = v0;
  v2 = (void *)0xE400000000000000;
  v3 = 1701736302;
  switch(v1)
  {
    case 0:
      break;
    case 1:
      v2 = (void *)0xE700000000000000;
      v3 = 0x676E697465656DLL;
      break;
    case 2:
      v2 = (void *)0xE600000000000000;
      v3 = 0x746867696C66;
      break;
    case 3:
      v2 = (void *)0xE800000000000000;
      v3 = 0x6E6F697461636F6CLL;
      break;
    case 4:
      v2 = (void *)0xE300000000000000;
      v3 = 6386789;
      break;
    case 5:
      v2 = (void *)0xE700000000000000;
      v3 = 0x73736572646461;
      break;
    case 6:
      v4 = 1701670760;
      goto LABEL_10;
    case 7:
      v4 = 1802661751;
LABEL_10:
      v3 = v4 | 0x7264644100000000;
      v2 = (void *)0xEB00000000737365;
      break;
    case 8:
      v2 = (void *)0xEB00000000726562;
      v3 = 0x6D754E656E6F6870;
      break;
    case 9:
      v5 = 1701670760;
      goto LABEL_15;
    case 10:
      v2 = (void *)0xEB00000000656E6FLL;
      v3 = 0x6850656C69626F6DLL;
      break;
    case 11:
      v5 = 1802661751;
LABEL_15:
      v3 = v5 | 0x6E6F685000000000;
      goto LABEL_21;
    case 12:
      v2 = (void *)0xEC00000073736572;
      v3 = 0x6464416C69616D65;
      break;
    case 13:
      v2 = (void *)0xE800000000000000;
      v3 = 0x796150656C707061;
      break;
    case 14:
      v3 = 0x6F436C6174736F70;
      v2 = (void *)0xEA00000000006564;
      break;
    case 15:
      v2 = (void *)0x800000024765BB00;
      v3 = 0xD000000000000010;
      break;
    case 16:
      v3 = 0x6D614E6E65766967;
LABEL_21:
      v2 = (void *)0xE900000000000065;
      break;
    case 17:
      v2 = (void *)0xEA0000000000656DLL;
      v3 = 0x614E796C696D6166;
      break;
    case 18:
      v2 = (void *)0xEA00000000006F54;
      v3 = 0x657461676976616ELL;
      break;
    default:
      v2 = (void *)0xE500000000000000;
      v3 = 0x726568746FLL;
      break;
  }
  result._object = v2;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t SRSmartRepliesActionInfo.init(actionType:actionPOV:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

Swift::String __swiftcall SRSmartRepliesActionPointOfView.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String result;

  if (v0)
  {
    if (v0 == 2)
    {
      v1 = 0x506472696874;
    }
    else
    {
      if (v0 != 1)
      {
        v3 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        goto LABEL_9;
      }
      v1 = 0x507473726966;
    }
    v3 = v1 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
    v2 = (void *)0xEB000000006E6F73;
  }
  else
  {
    v2 = (void *)0xE400000000000000;
    v3 = 1701736302;
  }
LABEL_9:
  result._object = v2;
  result._countAndFlagsBits = v3;
  return result;
}

unint64_t SRSmartRepliesActionPointOfView.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

void *static SRSmartRepliesActionPointOfView.allCases.getter()
{
  return &outlined read-only object #0 of static SRSmartRepliesActionPointOfView.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SRSmartRepliesActionPointOfView(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance SRSmartRepliesActionPointOfView;
}

unint64_t SRSmartRepliesActionType.init(rawValue:)(unint64_t a1)
{
  return specialized SRSmartRepliesActionType.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SRSmartRepliesActionType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = specialized SRSmartRepliesActionType.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t SRSmartRepliesActionInfo.actionType.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SRSmartRepliesActionInfo.actionPOV.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void SRSmartRepliesActionInfo.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = 3 * *v0;
  if ((unsigned __int128)(*v0 * (__int128)3) >> 64 == v1 >> 63)
  {
    v2 = v0[1];
    if (!__OFADD__(v1, v2))
    {
      Hasher._combine(_:)(v1 + v2);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::String __swiftcall SRSmartRepliesActionInfo.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_247656880;
  *(Swift::String *)(v2 + 32) = SRSmartRepliesActionType.stringValue()();
  if (v1)
  {
    if (v1 == 2)
    {
      v3 = 0x506472696874;
    }
    else
    {
      if (v1 != 1)
      {
        v9 = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        goto LABEL_10;
      }
      v3 = 0x507473726966;
    }
    v5 = v3 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
    v4 = 0xEB000000006E6F73;
  }
  else
  {
    v4 = 0xE400000000000000;
    v5 = 1701736302;
  }
  *(_QWORD *)(v2 + 48) = v5;
  *(_QWORD *)(v2 + 56) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v6 = BidirectionalCollection<>.joined(separator:)();
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = v6;
  v10 = v8;
LABEL_10:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

BOOL static SRSmartRepliesActionInfo.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::UInt SRSmartRepliesActionInfo.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt result;
  uint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  result = Hasher.init(_seed:)();
  v4 = 3 * v2;
  if ((unsigned __int128)(v2 * (__int128)3) >> 64 == (3 * v2) >> 63)
  {
    result = v4 + v1;
    if (!__OFADD__(v4, v1))
    {
      Hasher._combine(_:)(result);
      return Hasher._finalize()();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::UInt protocol witness for Hashable.hashValue.getter in conformance SRSmartRepliesActionInfo()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt result;
  uint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  result = Hasher.init(_seed:)();
  v4 = 3 * v2;
  if ((unsigned __int128)(v2 * (__int128)3) >> 64 == (3 * v2) >> 63)
  {
    result = v4 + v1;
    if (!__OFADD__(v4, v1))
    {
      Hasher._combine(_:)(result);
      return Hasher._finalize()();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance SRSmartRepliesActionInfo()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = 3 * *v0;
  if ((unsigned __int128)(*v0 * (__int128)3) >> 64 == v1 >> 63)
  {
    v2 = v0[1];
    if (!__OFADD__(v1, v2))
    {
      Hasher._combine(_:)(v1 + v2);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::UInt protocol witness for Hashable._rawHashValue(seed:) in conformance SRSmartRepliesActionInfo()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt result;
  uint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  result = Hasher.init(_seed:)();
  v4 = 3 * v2;
  if ((unsigned __int128)(v2 * (__int128)3) >> 64 == (3 * v2) >> 63)
  {
    result = v4 + v1;
    if (!__OFADD__(v4, v1))
    {
      Hasher._combine(_:)(result);
      return Hasher._finalize()();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SRSmartRepliesActionInfo(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

id SRSmartRepliesActionSuggestion.__allocating_init(type:title:attribution:isRichSuggestion:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  objc_class *v7;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;
  objc_super v19;

  v15 = objc_allocWithZone(v7);
  *(_QWORD *)&v15[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type] = a1;
  v16 = &v15[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution];
  *v16 = a4;
  v16[1] = a5;
  v15[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion] = a6;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata] = a7;
  v17 = &v15[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v17 = a2;
  v17[1] = a3;
  v15[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
  v19.receiver = v15;
  v19.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestion();
  return objc_msgSendSuper2(&v19, sel_init);
}

id SRSmartRepliesActionSuggestion.init(type:title:attribution:isRichSuggestion:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  objc_super v11;

  *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type] = a1;
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution];
  *v8 = a4;
  v8[1] = a5;
  v7[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion] = a6;
  *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata] = a7;
  v9 = &v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v9 = a2;
  v9[1] = a3;
  v7[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestion();
  return objc_msgSendSuper2(&v11, sel_init);
}

id SRSmartRepliesActionSuggestion.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesActionSuggestion.init(coder:)(a1);
}

id SRSmartRepliesActionSuggestion.init(coder:)(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[24];
  uint64_t v26;

  v3 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  v4 = objc_msgSend(a1, sel_decodeObjectForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v23, (uint64_t)v25);
  if (!v26)
  {

LABEL_16:
    outlined destroy of Any?((uint64_t)v25);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_17:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v5 = (void *)MEMORY[0x24957DF1C](0xD000000000000013, 0x800000024765BA10);
  v6 = objc_msgSend(a1, sel_decodeObjectForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v23, (uint64_t)v25);
  if (!v26)
  {

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v7 = (void *)MEMORY[0x24957DF1C](0x7475626972747461, 0xEB000000006E6F69);
  v8 = objc_msgSend(a1, sel_decodeObjectForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v23, (uint64_t)v25);
  if (v26)
  {
    v11 = swift_dynamicCast();
    if (v11)
      v12 = v21;
    else
      v12 = 0;
    if (v11)
      v13 = v22;
    else
      v13 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v25);
    v12 = 0;
    v13 = 0;
  }
  v14 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765BB20);
  v15 = objc_msgSend(a1, sel_decodeBoolForKey_, v14);

  v16 = (void *)MEMORY[0x24957DF1C](0x617461646174656DLL, 0xE800000000000000);
  v17 = objc_msgSend(a1, sel_decodeObjectForKey_, v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v23, (uint64_t)v25);
  if (v26)
  {
    type metadata accessor for SRSmartRepliesActionMetadata();
    if (swift_dynamicCast())
      v18 = v21;
    else
      v18 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v25);
    v18 = 0;
  }
  v19 = (void *)MEMORY[0x24957DF1C]();
  swift_bridgeObjectRelease();
  if (v13)
  {
    v20 = (void *)MEMORY[0x24957DF1C](v12, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v9 = objc_msgSend(v1, sel_initWithType_title_attribution_isRichSuggestion_metadata_, v21, v19, v20, v15, v18);

  return v9;
}

id SRSmartRepliesActionSuggestion.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  objc_class *v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;
  id result;
  objc_super v16;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution + 8);
  v7 = *(_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata);
  v9 = (objc_class *)type metadata accessor for SRSmartRepliesActionSuggestion();
  v10 = objc_allocWithZone(v9);
  *(_QWORD *)&v10[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type] = v2;
  v11 = &v10[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution];
  *v11 = v6;
  v11[1] = v5;
  v10[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion] = v7;
  *(_QWORD *)&v10[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata] = v8;
  v12 = &v10[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
  *v12 = v4;
  v12[1] = v3;
  v10[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
  v16.receiver = v10;
  v16.super_class = (Class)type metadata accessor for SRSmartRepliesSuggestion();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v8;
  result = objc_msgSendSuper2(&v16, sel_init);
  a1[3] = v9;
  *a1 = result;
  return result;
}

Swift::Void __swiftcall SRSmartRepliesActionSuggestion.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v4 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  v5 = (void *)MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title), *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8));
  v6 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution + 8))
    v7 = MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution));
  else
    v7 = 0;
  v8 = (void *)MEMORY[0x24957DF1C](0x7475626972747461, 0xEB000000006E6F69);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion);
  v10 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765BB20);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata);
  v12 = (void *)MEMORY[0x24957DF1C](0x617461646174656DLL, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

}

uint64_t SRSmartRepliesActionSuggestion.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  _BYTE v15[24];
  uint64_t v16;

  outlined init with copy of Any?(a1, (uint64_t)v15);
  if (v16)
  {
    type metadata accessor for SRSmartRepliesActionSuggestion();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type) != *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type])
        goto LABEL_21;
      v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title) == *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title]
        && *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8) == *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8];
      if (!v2 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_21;
      v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution + 8);
      v4 = *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution + 8];
      if (v3)
      {
        if (!v4)
          goto LABEL_21;
        v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution) == *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution]
          && v3 == v4;
        if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_21;
      }
      else if (v4)
      {
LABEL_21:

        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion) == v14[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion]
        && *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion) == v14[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion])
      {
        v8 = *(void **)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata);
        v9 = *(void **)&v14[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata];
        if (!v8)
        {
          v13 = v9;

          if (!v9)
          {
            v6 = 1;
            return v6 & 1;
          }

          goto LABEL_22;
        }
        if (v9)
        {
          type metadata accessor for SRSmartRepliesActionMetadata();
          v10 = v8;
          v11 = v9;
          v12 = v10;
          v6 = static NSObject.== infix(_:_:)();

          return v6 & 1;
        }
      }
      goto LABEL_21;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v15);
  }
LABEL_22:
  v6 = 0;
  return v6 & 1;
}

uint64_t SRSmartRepliesActionSuggestion.attribution.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SRSmartRepliesActionSuggestion.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type);
}

uint64_t SRSmartRepliesActionSuggestion.isRichSuggestion.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion);
}

void *SRSmartRepliesActionSuggestion.metadata.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata);
  v2 = v1;
  return v1;
}

void SRSmartRepliesActionSuggestion.__allocating_init(title:isDynamicSuggestion:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SRSmartRepliesActionSuggestion.init(title:isDynamicSuggestion:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SRSmartRepliesActionSuggestion.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

}

id SRSmartRepliesActionSuggestion.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesActionSuggestion();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t specialized SRSmartRepliesActionType.init(rawValue:)(unint64_t result)
{
  if (result > 0x12)
    return 0;
  return result;
}

uint64_t type metadata accessor for SRSmartRepliesActionSuggestion()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesActionPointOfView and conformance SRSmartRepliesActionPointOfView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesActionPointOfView and conformance SRSmartRepliesActionPointOfView;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesActionPointOfView and conformance SRSmartRepliesActionPointOfView)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesActionPointOfView, &type metadata for SRSmartRepliesActionPointOfView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesActionPointOfView and conformance SRSmartRepliesActionPointOfView);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in SRSmartRepliesActionPointOfView()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [SRSmartRepliesActionPointOfView] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesActionPointOfView], MEMORY[0x24BEE12E0]);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24957EC18](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesActionType and conformance SRSmartRepliesActionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesActionType and conformance SRSmartRepliesActionType;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesActionType and conformance SRSmartRepliesActionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesActionType, &type metadata for SRSmartRepliesActionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesActionType and conformance SRSmartRepliesActionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesActionInfo and conformance SRSmartRepliesActionInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesActionInfo and conformance SRSmartRepliesActionInfo;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesActionInfo and conformance SRSmartRepliesActionInfo)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesActionInfo, &type metadata for SRSmartRepliesActionInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesActionInfo and conformance SRSmartRepliesActionInfo);
  }
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesActionPointOfView()
{
  return &type metadata for SRSmartRepliesActionPointOfView;
}

ValueMetadata *type metadata accessor for SRSmartRepliesActionType()
{
  return &type metadata for SRSmartRepliesActionType;
}

ValueMetadata *type metadata accessor for SRSmartRepliesActionInfo()
{
  return &type metadata for SRSmartRepliesActionInfo;
}

uint64_t method lookup function for SRSmartRepliesActionSuggestion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesActionSuggestion.__allocating_init(type:title:attribution:isRichSuggestion:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t NameActionMetadataProvider.init(contactDataSource:actionType:)(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return a1;
}

uint64_t NameActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = a5;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  return swift_task_switch();
}

uint64_t NameActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(v0 + 32);
  if (!v4)
  {
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v4 = v5;
    else
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  swift_bridgeObjectRelease();
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    v8 = *(void **)(v0 + 56);
    if (v8)
      goto LABEL_11;
    goto LABEL_14;
  }
  v6 = (void *)v4[4];
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v6)
  {
    v8 = *(void **)(v0 + 56);
    if (v8)
    {
LABEL_11:
      v7 = v8;
      goto LABEL_12;
    }
LABEL_14:
    v9 = 0;
    return (*(uint64_t (**)(id))(v0 + 8))(v9);
  }
LABEL_12:
  v9 = specialized NameActionMetadataProvider.nameMetadata(for:actionType:)((uint64_t)v7, *(_QWORD *)(v0 + 64), *(_QWORD **)(v0 + 48), *(_BYTE *)(v0 + 72));

  return (*(uint64_t (**)(id))(v0 + 8))(v9);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NameActionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NameActionType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NameActionType()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NameActionType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance NameActionMetadataProvider(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *v1;
  v4 = *((_BYTE *)v1 + 16);
  v5 = *((_QWORD *)v1 + 3);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  *(_QWORD *)(v6 + 64) = v5;
  *(_BYTE *)(v6 + 72) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 40) = a1;
  return swift_task_switch();
}

id specialized NameActionMetadataProvider.nameMetadata(for:actionType:)(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;

  v30 = a2;
  v7 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(uint64_t (**)(uint64_t))(*a3 + 8 * a4 + 176))(a1);
  v15 = v14;
  v16 = one-time initialization token for current;
  swift_bridgeObjectRetain();
  if (v16 != -1)
    swift_once();
  v31._object = (void *)0xE000000000000000;
  v17._object = (void *)0x800000024765BCA0;
  v17._countAndFlagsBits = 0xD000000000000013;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v18, v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_247656500;
  *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v19 + 32) = v13;
  *(_QWORD *)(v19 + 40) = v15;
  v20 = static String.localizedStringWithFormat(_:_:)();
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000014;
  v32._object = (void *)0xE000000000000000;
  v23._object = (void *)0x800000024765BCC0;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v24, v32);
  v26 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 1, 1, v26);
  Date.init()();
  v27 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
  return SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(v30, v20, v22, v25._countAndFlagsBits, (uint64_t)v25._object, v13, v15, (uint64_t)v9, -1.0, -1.0, 0, (uint64_t)v12, 0, 0, 2);
}

void destroy for NameActionMetadataProvider(uint64_t a1)
{
  swift_release();

}

uint64_t initializeWithCopy for NameActionMetadataProvider(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for NameActionMetadataProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NameActionMetadataProvider(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NameActionMetadataProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NameActionMetadataProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NameActionMetadataProvider()
{
  return &type metadata for NameActionMetadataProvider;
}

uint64_t getEnumTagSinglePayload for NameActionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NameActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2475F9CD4 + 4 * byte_247656895[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2475F9D08 + 4 * byte_247656890[v4]))();
}

uint64_t sub_2475F9D08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F9D10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2475F9D18);
  return result;
}

uint64_t sub_2475F9D24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2475F9D2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2475F9D30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2475F9D38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NameActionType()
{
  return &unk_2518C4C90;
}

unint64_t lazy protocol witness table accessor for type NameActionType and conformance NameActionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NameActionType and conformance NameActionType;
  if (!lazy protocol witness table cache variable for type NameActionType and conformance NameActionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for NameActionType, &unk_2518C4C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NameActionType and conformance NameActionType);
  }
  return result;
}

uint64_t ETAActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:)
                                                + async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v8(a2, a3);
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v2 = *v0;
  v3 = v0[1];
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:)
                                                + async function pointer to specialized ETAActionMetadataProvider.metadataItem(for:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v6(v2, v3);
}

uint64_t specialized ETAActionMetadataProvider.metadataItem(for:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v2[4] = swift_task_alloc();
  type metadata accessor for Date();
  v2[5] = swift_task_alloc();
  v4 = *(int **)((*MEMORY[0x24BEE4EA0] & *a1) + 0xD0);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v2[6] = v5;
  *v5 = v2;
  v5[1] = specialized ETAActionMetadataProvider.metadataItem(for:);
  return v7();
}

uint64_t specialized ETAActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v5;
  int *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);

  v5 = *v3;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = a2;
  swift_task_dealloc();
  if (v2)
  {

LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(0);
  }
  if (!a2)
    goto LABEL_3;
  v7 = *(int **)(**(_QWORD **)(v5 + 24) + 192);
  v9 = (uint64_t (*)(void))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 72) = v8;
  *v8 = v5;
  v8[1] = specialized ETAActionMetadataProvider.metadataItem(for:);
  return v9();
}

uint64_t specialized ETAActionMetadataProvider.metadataItem(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized ETAActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSBundle v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  Swift::String v31;
  Swift::String v32;

  if (one-time initialization token for current != -1)
    swift_once();
  v1 = *(void **)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v5.super.isa = (Class)static NSBundle.current;
  v31._object = (void *)0xE000000000000000;
  v6._object = (void *)0x800000024765BCE0;
  v6._countAndFlagsBits = 0xD000000000000010;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v31._countAndFlagsBits = 0;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v7, v31);
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v32._object = (void *)0xE000000000000000;
  v9._object = (void *)0x800000024765BD00;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, v5, v10, v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_247656500;
  *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v11 + 32) = v2;
  *(_QWORD *)(v11 + 40) = v3;
  swift_bridgeObjectRetain();
  v12 = static String.localizedStringWithFormat(_:_:)();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Date.init()();
  v15 = type metadata accessor for URL();
  v16 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 1, 1, v15);
  if (v1)
  {
    objc_msgSend(v1, sel_coordinate);
    v18 = v17;
    v16 = objc_msgSend(v1, sel_coordinate);
    v20 = v19;
  }
  else
  {
    v20 = -1.0;
    v18 = -1.0;
  }
  v22 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 32);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0xC8))(v16);
  v27 = v26;
  v28 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
  v29 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(4, v22, v21, v8._countAndFlagsBits, (uint64_t)v8._object, v12, v14, v24, v18, v20, 1, v23, v25, v27, 4);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v29);
}

_QWORD *initializeBufferWithCopyOfBuffer for ETAActionMetadataProvider(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ETAActionMetadataProvider(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for ETAActionMetadataProvider(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for ETAActionMetadataProvider(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ETAActionMetadataProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ETAActionMetadataProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ETAActionMetadataProvider()
{
  return &type metadata for ETAActionMetadataProvider;
}

id ActionETADataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

_QWORD *ActionETADataSource.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *result;
  uint64_t v11;
  id v12;
  objc_class *v13;
  _QWORD *v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD v17[2];
  uint64_t v18;
  objc_super v19;
  uint64_t v20;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  v18 = OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_geoQueue;
  v17[0] = type metadata accessor for OS_dispatch_queue();
  v7 = v0;
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)(v17[1] + v18) = v8;
  *(_DWORD *)&v7[OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTransportType] = 4;
  v9 = &v7[OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTimeAndPositionFromDestination];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE3CF80]), sel_initWithQueue_, v8);
  if (result)
  {
    v11 = OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_geoListener;
    *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_geoListener] = result;
    objc_msgSend(result, sel_requestActiveRouteDetailsData);
    v12 = *(id *)&v7[v11];
    objc_msgSend(v12, sel_requestPositionFromDestination);

    v13 = (objc_class *)type metadata accessor for ActionETADataSource();
    v19.receiver = v7;
    v19.super_class = v13;
    v14 = objc_msgSendSuper2(&v19, sel_init);
    v15 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v14) + 0xB8);
    v16 = v14;
    v15(1);

    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for ActionETADataSource()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ActionETADataSource.prewarmDataAccessIfNecessary(synchronously:)(Swift::Bool synchronously)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_geoListener), sel_setDelegate_, v1);
}

BOOL ActionETADataSource.isNavigating.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_geoListener), sel_navigationState) == (id)2;
}

uint64_t ActionETADataSource.imageName.getter()
{
  uint64_t v0;
  uint64_t result;

  result = 0x6C6C69662E726163;
  switch(*(_DWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTransportType))
  {
    case 1:
      result = 0x6C69662E6D617274;
      break;
    case 2:
    case 6:
      result = 0x772E657275676966;
      break;
    case 3:
      result = 0x656C6379636962;
      break;
    case 5:
      result = 0x69662E7972726566;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ActionETADataSource.remainingTimeString()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  uint64_t v11;
  double v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTimeAndPositionFromDestination;
  *(_QWORD *)(v0 + 24) = OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTimeAndPositionFromDestination;
  if ((*((_BYTE *)v1 + v2 + 16) & 1) != 0
    || *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTransportType) == 4)
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v3;
    *v3 = v0;
    v3[1] = ActionETADataSource.remainingTimeString();
    return static Task<>.sleep(nanoseconds:)();
  }
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xC0))() & 1) == 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.standard);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_17;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    v10 = "Did not find a remaining time string because the user is not navigating";
LABEL_14:
    _os_log_impl(&dword_2475DF000, v7, v8, v10, v9, 2u);
    MEMORY[0x24957ECC0](v9, -1, -1);
LABEL_17:

    v15 = 0;
    v17 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v15, v17);
  }
  v5 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.standard);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v7, v8))
      goto LABEL_17;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    v10 = "Did not find a remaining time and position from destination even though the user is navigating";
    goto LABEL_14;
  }
  v12 = *(double *)v5;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD14F8]), sel_init);
  -[NSObject setUnitsStyle:](v7, sel_setUnitsStyle_, 3);
  -[NSObject setAllowedUnits:](v7, sel_setAllowedUnits_, 112);
  v13 = -[NSObject stringFromTimeInterval:](v7, sel_stringFromTimeInterval_, v12);
  if (!v13)
    goto LABEL_17;
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v15, v17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  uint64_t v7;
  double v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0xC0))() & 1) == 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.standard);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v3, v4))
      goto LABEL_14;
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "Did not find a remaining time string because the user is not navigating";
LABEL_11:
    _os_log_impl(&dword_2475DF000, v3, v4, v6, v5, 2u);
    MEMORY[0x24957ECC0](v5, -1, -1);
LABEL_14:

    v11 = 0;
    v13 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
  }
  v1 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(v0 + 24);
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v3, v4))
      goto LABEL_14;
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "Did not find a remaining time and position from destination even though the user is navigating";
    goto LABEL_11;
  }
  v8 = *(double *)v1;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD14F8]), sel_init);
  -[NSObject setUnitsStyle:](v3, sel_setUnitsStyle_, 3);
  -[NSObject setAllowedUnits:](v3, sel_setAllowedUnits_, 112);
  v9 = -[NSObject stringFromTimeInterval:](v3, sel_stringFromTimeInterval_, v8);
  if (!v9)
    goto LABEL_14;
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
}

void ActionETADataSource.navigationListener(_:didChangeNavigationState:transportType:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(v3 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTransportType) = a3;
}

void ActionETADataSource.navigationListener(_:didUpdatePositionFromDestination:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + OBJC_IVAR____TtC12SmartReplies19ActionETADataSource_latestTimeAndPositionFromDestination;
  *(double *)v3 = a1;
  *(double *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = 0;
}

id ActionETADataSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActionETADataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ActionDataSource.prewarmDataAccessIfNecessary(synchronously:) in conformance ActionETADataSource()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xB8))();
}

uint64_t method lookup function for ActionETADataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActionETADataSource.prewarmDataAccessIfNecessary(synchronously:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ActionETADataSource.isNavigating.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ActionETADataSource.imageName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ActionETADataSource.remainingTimeString()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = dispatch thunk of ActionETADataSource.remainingTimeString();
  return v5();
}

uint64_t dispatch thunk of ActionETADataSource.remainingTimeString()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of ActionETADataSource.navigationListener(_:didChangeNavigationState:transportType:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ActionETADataSource.navigationListener(_:didUpdatePositionFromDestination:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;

  result = specialized Dictionary.Values.startIndex.getter(a1);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result != 1 << *(_BYTE *)(a1 + 32))
    return specialized Dictionary.Values.subscript.getter(result, v5, a1, (uint64_t)a2);
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t SRSmartRepliesCaptioning.inferredContacts(in:)()
{
  uint64_t v0;

  return SRSmartRepliesCaptioning.inferredContacts(in:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x24BEE4AF8]);
}

{
  uint64_t v0;

  return SRSmartRepliesCaptioning.inferredContacts(in:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, MEMORY[0x24BEE4AF8]);
}

uint64_t SRSmartRepliesCaptioning.captions(text:preferBusinessTopics:onComplete:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

{
  return a3(0);
}

uint64_t SRSmartRepliesCaptioning.captions(contactDetail:associatedText:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

{
  return a4(0);
}

uint64_t SRSmartRepliesCaptioning.unifiedImageCaption(for:onComplete:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t SRSmartRepliesCaptioning.captions(imageURL:onComplete:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

{
  return a2(0);
}

uint64_t SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(0);
}

{
  return a5(0);
}

uint64_t SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

Swift::String __swiftcall SRSmartRepliesCaptioning.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(Swift::String contactDetail, Swift::String originalMessageText)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = 0;
  v3 = (void *)0xE000000000000000;
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = 0;
  v3 = (void *)0xE000000000000000;
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t SRSmartRepliesCaptioning.friendlyCaption(for:onComplete:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t SRSmartRepliesCaptioning.preferredLanguageCode.getter()
{
  return 28261;
}

void one-time initialization function for languagesSupportedForImageCaptioning()
{
  languagesSupportedForImageCaptioning._rawValue = &outlined read-only object #0 of one-time initialization function for languagesSupportedForImageCaptioning;
}

void one-time initialization function for languagesSupportedForTextCaptioning()
{
  languagesSupportedForTextCaptioning._rawValue = &outlined read-only object #0 of one-time initialization function for languagesSupportedForTextCaptioning;
}

uint64_t SRSmartRepliesCaptioner.preferredLanguageCode.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner_preferredLanguageCode);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t SRSmartRepliesCaptioner.preferredLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner_preferredLanguageCode);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SRSmartRepliesCaptioner.preferredLanguageCode.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.recipients.modify;
}

uint64_t SRSmartRepliesCaptioner.captionPhraseArbiter.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___captionPhraseArbiter);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___captionPhraseArbiter);
  v3 = v2;
  if (v2 == 1)
  {
    v3 = CaptionPhraseResolver.init()();
    v4 = *v1;
    *v1 = v3;
    v1[1] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of CaptionPhraseResolver?(v4);
  }
  outlined copy of CaptionPhraseResolver?(v2);
  return v3;
}

uint64_t SRSmartRepliesCaptioner.shortcodeResolutionManager.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSCache<String, String>);
    swift_allocObject();
    v3 = TUSCache.init(capacity:)();
    v4 = *v1;
    *v1 = v3;
    v1[1] = (uint64_t)&outlined read-only object #0 of SRSmartRepliesCaptioner.shortcodeResolutionManager.getter;
    swift_retain();
    outlined consume of ShortcodeResolutionManager?(v4);
  }
  outlined copy of ShortcodeResolutionManager?(v2);
  return v3;
}

void SRSmartRepliesCaptioner.predictionExemptTermsDetector.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___predictionExemptTermsDetector) == 1)
    *(_BYTE *)(v0
             + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___predictionExemptTermsDetector) = 0;
}

uint64_t SRSmartRepliesCaptioner.inferredContacts(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t SRSmartRepliesCaptioner.inferredContacts(in:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v1;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD **)(v0 + 32);
  if (!v2)
  {
    v4 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v2 = v5;
    else
      v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v2;
    *(_QWORD *)(v0 + 16) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v2);
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1, uint64_t a2)
{
  NSArray v3;
  Class isa;

  if (a1)
  {
    type metadata accessor for SRSmartRepliesCaption();
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t SRSmartRepliesCaptioner.captions(linkMetadata:onComplete:)(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;

  swift_retain();
  specialized SRSmartRepliesCaptioner.simpleCaptions(for:onComplete:)(a1, v3, a2, a3);
  return swift_release();
}

uint64_t SRSmartRepliesCaptioner.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:)(uint64_t a1, unint64_t a2, int a3, char a4, void (*a5)(uint64_t), uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  char **v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String_optional v70;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  objc_class *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  objc_class *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  void *v93;
  char v94;
  objc_class *v95;
  char *v96;
  uint64_t *v97;
  id v98;
  _QWORD *v99;
  uint64_t inited;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  objc_class *v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  const char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  objc_class *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  char *v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  char *v146;
  void (*v147)(uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  objc_super v181;
  objc_super v182;
  objc_super v183;
  objc_super v184;
  uint64_t v185;
  char *v186;
  objc_super v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  v156 = a3;
  v150 = type metadata accessor for Locale();
  v149 = *(_QWORD *)(v150 - 8);
  MEMORY[0x24BDAC7A8](v150);
  v148 = (char *)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for CharacterSet();
  v179 = *(_QWORD *)(v180 - 8);
  MEMORY[0x24BDAC7A8](v180);
  v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchTime();
  v16 = *(char **)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v152 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v145 - v19;
  static DispatchTime.now()();
  v154 = a1;
  v155 = a2;
  v178 = v6;
  if ((SRSmartRepliesCaptioner.languageIsAppropriateForTextCaptioning(string:)() & 1) == 0)
  {
    a5(0);
    return (*((uint64_t (**)(char *, uint64_t))v16 + 1))(v20, v15);
  }
  v151 = a6;
  v147 = a5;
  v163 = v15;
  v170 = v20;
  v146 = v16;
  if ((a4 & 1) != 0)
  {
    v21 = String.businessRelevantEntities()();
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v185 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      v23 = v185;
      lazy protocol witness table accessor for type String and conformance String();
      v180 = v21;
      v24 = (char **)(v21 + 40);
      do
      {
        v25 = *v24;
        v189 = (uint64_t)*(v24 - 1);
        v190 = v25;
        v26 = StringProtocol.localizedLowercase.getter();
        v28 = v27;
        v185 = v23;
        v30 = *(_QWORD *)(v23 + 16);
        v29 = *(_QWORD *)(v23 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          v23 = v185;
        }
        v24 += 2;
        *(_QWORD *)(v23 + 16) = v30 + 1;
        v31 = v23 + 16 * v30;
        *(_QWORD *)(v31 + 32) = v26;
        *(_QWORD *)(v31 + 40) = v28;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
      v20 = v170;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v189 = MEMORY[0x24BEE4B08];
    v118 = swift_bridgeObjectRetain();
    v119 = specialized _ArrayProtocol.filter(_:)(v118);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120 = *(_QWORD *)(v119 + 16);
    if (v120)
    {
      v189 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v121 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v180 = v119;
      v122 = (uint64_t *)(v119 + 40);
      do
      {
        v124 = *(v122 - 1);
        v123 = *v122;
        v125 = (char *)objc_allocWithZone(v121);
        v126 = &v125[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *(_QWORD *)v126 = v124;
        *((_QWORD *)v126 + 1) = v123;
        *(_QWORD *)&v125[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
        v181.receiver = v125;
        v181.super_class = v121;
        swift_bridgeObjectRetain();
        objc_msgSendSuper2(&v181, sel_init);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v122 += 2;
        --v120;
      }
      while (v120);
      v127 = v189;
      swift_bridgeObjectRelease();
      v20 = v170;
    }
    else
    {
      swift_bridgeObjectRelease();
      v127 = MEMORY[0x24BEE4AF8];
    }
    v147(v127);
    swift_bridgeObjectRelease();
    return (*((uint64_t (**)(char *, uint64_t))v146 + 1))(v20, v163);
  }
  v33 = v15;
  v34 = String.trimMessageGreeting()();
  v35 = *(_QWORD *)(String.tokens()() + 16);
  swift_bridgeObjectRelease();
  LOBYTE(v189) = 0;
  v36 = specialized static ExtractiveTextSummarizer.summarize(text:summarizationStrategyType:topN:inLogicalOrder:)(v34._countAndFlagsBits, (unint64_t)v34._object, (unsigned __int8 *)&v189);
  swift_bridgeObjectRelease();
  v158 = *(_QWORD *)(v36 + 16);
  if (!v158)
  {
    swift_bridgeObjectRelease();
LABEL_124:
    v147(0);
    return (*((uint64_t (**)(char *, uint64_t))v146 + 1))(v20, v33);
  }
  v188 = MEMORY[0x24BEE4AF8];
  v157 = v36 + 32;
  v159 = v36;
  swift_bridgeObjectRetain();
  v37 = v159;
  v38 = 0;
  v171 = 0;
  v39 = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
  v40 = &unk_2518CC000;
  v153 = xmmword_247656500;
  v172 = v14;
  while (1)
  {
    if (v38 >= *(_QWORD *)(v37 + 16))
      goto LABEL_128;
    v160 = v38;
    v41 = (uint64_t *)(v157 + 16 * v38);
    v35 = *v41;
    v42 = v41[1];
    swift_bridgeObjectRetain();
    if (String.count.getter() < 10)
      goto LABEL_12;
    LOBYTE(v189) = 1;
    v43 = (_QWORD *)specialized StringRake.rankedKeywords(from:style:maxCount:)(v35, v42, (unsigned __int8 *)&v189, 10);
    LOBYTE(v189) = 2;
    v44 = (_QWORD *)specialized StringRake.rankedKeywords(from:style:maxCount:)(v35, v42, (unsigned __int8 *)&v189, 10);
    if ((v156 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v153;
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v42;
      swift_bridgeObjectRelease();
      v102 = v178;
      v35 = v171;
      v103 = specialized _ArrayProtocol.filter(_:)(inited);
      v171 = v35;

      swift_setDeallocating();
      swift_arrayDestroy();
      v104 = *(_QWORD *)(v103 + 16);
      if (v104)
      {
        v189 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v105 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
        v177 = v103;
        v35 = v103 + 40;
        v106 = (_QWORD *)v39;
        do
        {
          v108 = *(_QWORD *)(v35 - 8);
          v107 = *(char **)v35;
          v109 = (char *)objc_allocWithZone(v105);
          v110 = &v109[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
          *(_QWORD *)v110 = v108;
          *((_QWORD *)v110 + 1) = v107;
          *(_QWORD *)&v109[*v106] = 1;
          v187.receiver = v109;
          v187.super_class = v105;
          v111 = (const char *)*((_QWORD *)v40 + 168);
          swift_bridgeObjectRetain();
          objc_msgSendSuper2(&v187, v111);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v16 = *(char **)(v189 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v35 += 16;
          --v104;
        }
        while (v104);
        v112 = v189;
        swift_bridgeObjectRelease();
        v39 = (unint64_t)v106;
        v33 = v163;
      }
      else
      {
        swift_bridgeObjectRelease();
        v112 = MEMORY[0x24BEE4AF8];
      }
      specialized Array.append<A>(contentsOf:)(v112, (unint64_t *)type metadata accessor for SRSmartRepliesCaption, &lazy protocol witness table cache variable for type [SRSmartRepliesCaption] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesCaption], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
      v20 = v170;
      goto LABEL_13;
    }
    v164 = v35;
    v166 = (char *)v42;
    v45 = specialized SRSmartRepliesCaptioner.mostSalientNouns(for:properNouns:text:)(v43, v44, v154, v155);
    swift_bridgeObjectRelease();
    if (!v45)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v161 = v44;
    v189 = MEMORY[0x24BEE4B08];
    v46 = swift_bridgeObjectRetain();
    v35 = v171;
    v47 = specialized _ArrayProtocol.filter(_:)(v46);
    v171 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v169 = *(_QWORD *)(v47 + 16);
    if (v169)
      break;
LABEL_95:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    v38 = v160 + 1;
    v37 = v159;
    if (v160 + 1 == v158)
    {
      swift_bridgeObjectRelease();
      v113 = v188;
      if ((v188 & 0x8000000000000000) != 0 || (v188 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        v114 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v113, (void (*)(_QWORD))type metadata accessor for SRSmartRepliesCaption, &lazy protocol witness table cache variable for type [SRSmartRepliesCaption] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesCaption], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
        swift_bridgeObjectRelease();
      }
      else
      {
        v114 = v188 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
      }
      v189 = v114;
      v35 = v171;
      specialized MutableCollection<>.sort(by:)(&v189, (void (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      if (!v35)
      {
        swift_bridgeObjectRelease();
        v39 = v189;
        swift_bridgeObjectRelease();
        v188 = v39;
        v115 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v178) + 0x70);
        v116 = swift_retain();
        v115(v116);
        if (!v117)
        {
          v128 = v148;
          static Locale.current.getter();
          Locale.identifier.getter();
          (*(void (**)(char *, uint64_t))(v149 + 8))(v128, v150);
        }
        swift_retain();
        swift_bridgeObjectRetain();
        v129 = specialized _ArrayProtocol.filter(_:)(v39);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v129 >> 62)
          goto LABEL_130;
        v130 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_116;
      }
      goto LABEL_136;
    }
  }
  v48 = 0;
  v168 = v47 + 32;
  v145 = v161 + 9;
  v167 = v47;
  while (1)
  {
    if (v48 >= *(_QWORD *)(v47 + 16))
      goto LABEL_127;
    v176 = v48;
    v49 = (uint64_t *)(v168 + 16 * v48);
    v35 = *v49;
    v50 = v49[1];
    swift_bridgeObjectRetain();
    v51 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
    v53 = v52;
    swift_bridgeObjectRetain();
    v54 = MEMORY[0x24957DDA8](v35, v50, 28261, 0xE200000000000000, v51, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    v55 = v161[2];
    v173 = v35;
    if (v55)
    {
      v20 = v166;
      if ((v161[4] != v35 || v161[5] != v50)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && v55 != 1
        && (v161[6] != v35 || v161[7] != v50)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && v55 != 2)
      {
        v99 = v145;
        v35 = 2;
        do
        {
          v39 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_129;
          if (*(v99 - 1) == v173 && *v99 == v50)
            break;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          v99 += 2;
          ++v35;
        }
        while (v39 != v55);
      }
    }
    v189 = String.nounPhrasesContaining(_:isProperNoun:allowConjunctions:)();
    swift_bridgeObjectRetain();
    v56 = v171;
    specialized MutableCollection<>.sort(by:)(&v189, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v56)
      goto LABEL_136;
    swift_bridgeObjectRelease();
    v57 = v189;
    v58 = *(_QWORD *)(v189 + 16);
    v165 = v50;
    if (v58)
    {
      swift_retain();
      v59 = (char **)(v57 + 40);
      v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v61 = *v59;
        v189 = (uint64_t)*(v59 - 1);
        v190 = v61;
        swift_bridgeObjectRetain();
        static CharacterSet.punctuationCharacters.getter();
        lazy protocol witness table accessor for type String and conformance String();
        v62 = StringProtocol.trimmingCharacters(in:)();
        v64 = v63;
        (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v180);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        v66 = v60[2];
        v65 = v60[3];
        v16 = (char *)(v66 + 1);
        if (v66 >= v65 >> 1)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v60);
        v59 += 2;
        v60[2] = v16;
        v67 = &v60[2 * v66];
        v67[4] = v62;
        v67[5] = v64;
        --v58;
      }
      while (v58);
      swift_release();
      v33 = v163;
      v50 = v165;
    }
    swift_release();
    v189 = MEMORY[0x24BEE4B08];
    v68 = swift_bridgeObjectRetain();
    v69 = specialized _ArrayProtocol.filter(_:)(v68);
    v171 = 0;
    v35 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v177 = *(_QWORD *)(v35 + 16);
    if (!v177)
    {
      swift_bridgeObjectRelease();
      v84 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v85 = (char *)objc_allocWithZone(v84);
      v86 = &v85[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
      *(_QWORD *)v86 = v173;
      *((_QWORD *)v86 + 1) = v50;
      v39 = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
      *(_QWORD *)&v85[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
      v182.receiver = v85;
      v182.super_class = v84;
      v40 = &unk_2518CC000;
      objc_msgSendSuper2(&v182, sel_init);
      MEMORY[0x24957E0E4]();
      if (*(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_50:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_52:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_70;
    }
    v70 = String.primaryLanguageTag()();
    if (v70.value._object)
      countAndFlagsBits = v70.value._countAndFlagsBits;
    else
      countAndFlagsBits = 28261;
    if (v70.value._object)
      object = v70.value._object;
    else
      object = (void *)0xE200000000000000;
    v73 = v35;
    v35 = *(_QWORD *)(v35 + 32);
    v20 = *(char **)(v73 + 40);
    v162 = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v74 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
    v39 = v75;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v175 = v35;
    v174 = countAndFlagsBits;
    v33 = MEMORY[0x24957DDA8](v35, v20, countAndFlagsBits, object, v74, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
      goto LABEL_56;
    swift_bridgeObjectRelease();
    if (v177 == 1)
    {
LABEL_49:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v80 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v81 = (char *)objc_allocWithZone(v80);
      v82 = &v81[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
      v83 = v165;
      *(_QWORD *)v82 = v173;
      *((_QWORD *)v82 + 1) = v83;
      v39 = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
      *(_QWORD *)&v81[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
      v183.receiver = v81;
      v183.super_class = v80;
      v40 = &unk_2518CC000;
      objc_msgSendSuper2(&v183, sel_init);
      MEMORY[0x24957E0E4]();
      v33 = v163;
      if (*(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_50;
      goto LABEL_52;
    }
    v35 = v162 + 56;
    v76 = 1;
    while (1)
    {
      v16 = (char *)(v76 + 1);
      if (__OFADD__(v76, 1))
        goto LABEL_126;
      v77 = *(_QWORD *)(v35 - 8);
      v20 = *(char **)v35;
      swift_bridgeObjectRetain();
      v78 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
      v39 = v79;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = MEMORY[0x24957DDA8](v77, v20, v174, object, v78, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
        break;
      swift_bridgeObjectRelease();
      ++v76;
      v35 += 16;
      if (v16 == (char *)v177)
        goto LABEL_49;
    }
    v175 = v77;
LABEL_56:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87 = v188;
    v33 = v175;
    if (!(v188 >> 62))
    {
      v88 = *(_QWORD *)((v188 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v88)
        break;
      goto LABEL_67;
    }
    swift_bridgeObjectRetain_n();
    v88 = _CocoaArrayWrapper.endIndex.getter();
    if (v88)
      break;
LABEL_67:
    swift_bridgeObjectRelease_n();
    v95 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
    v96 = (char *)objc_allocWithZone(v95);
    v97 = (uint64_t *)&v96[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
    *v97 = v33;
    v97[1] = (uint64_t)v20;
    v39 = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
    *(_QWORD *)&v96[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
    v184.receiver = v96;
    v184.super_class = v95;
    v40 = &unk_2518CC000;
    v98 = objc_msgSendSuper2(&v184, sel_init);
    MEMORY[0x24957E0E4]();
    if (*(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v188 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    v33 = v163;
LABEL_70:
    v47 = v167;
LABEL_71:
    v48 = v176 + 1;
    v20 = v170;
    if (v176 + 1 == v169)
      goto LABEL_95;
  }
  v174 = v87 & 0xC000000000000001;
  v39 = 4;
  v173 = v87;
  while (1)
  {
    v89 = v39 - 4;
    if (!v174)
      break;
    v90 = (char *)MEMORY[0x24957E42C](v39 - 4, v87);
    v91 = v39 - 3;
    if (__OFADD__(v89, 1))
      goto LABEL_125;
LABEL_64:
    v177 = v91;
    v35 = *(_QWORD *)&v90[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
    v92 = *(char **)&v90[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8];
    v189 = v35;
    v190 = v92;
    v185 = v33;
    v186 = v20;
    v93 = v90;
    lazy protocol witness table accessor for type String and conformance String();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
    {
      v16 = v20;
      swift_bridgeObjectRelease_n();

LABEL_75:
      v14 = v172;
      v47 = v167;
      swift_bridgeObjectRelease();
      v33 = v163;
      v39 = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
      v40 = &unk_2518CC000;
      goto LABEL_71;
    }
    v189 = v33;
    v190 = v20;
    v16 = v20;
    v185 = v35;
    v186 = v92;
    v94 = StringProtocol.contains<A>(_:)();

    if ((v94 & 1) != 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_75;
    }
    ++v39;
    v14 = v172;
    v33 = v175;
    v87 = v173;
    if (v177 == v88)
      goto LABEL_67;
  }
  v90 = (char *)*(id *)(v87 + 8 * v39);
  v91 = v39 - 3;
  if (!__OFADD__(v89, 1))
    goto LABEL_64;
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  swift_bridgeObjectRetain();
  v130 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_116:
  if (!v130)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_124;
  }
  if (!*(_QWORD *)(v159 + 16))
  {
    __break(1u);
LABEL_133:
    v131 = v33;
    v132 = (id)MEMORY[0x24957E42C](0, v39);
LABEL_121:
    v133 = v132;
    swift_release();
    swift_bridgeObjectRetain();

    static DispatchTime.now()();
    v134 = v16;
    v135 = DispatchTime.uptimeNanoseconds.getter();
    v136 = v170;
    v137 = DispatchTime.uptimeNanoseconds.getter();
    if (v135 < v137)
      goto LABEL_135;
    v138 = (float)(v135 - v137);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v139 = String.count.getter();
    swift_bridgeObjectRelease();
    v140 = String.count.getter();
    swift_bridgeObjectRelease();
    v141 = String.count.getter();
    swift_bridgeObjectRelease();
    LOWORD(v189) = 257;
    *((float *)&v189 + 1) = v138;
    v190 = 0;
    v191 = 0xE000000000000000;
    v192 = 0;
    v193 = 0xE000000000000000;
    v194 = 0;
    v195 = 0xE000000000000000;
    v196 = v139;
    v197 = v140;
    v198 = v141;
    MetricsMessageTopicExtractionResult.sendEvent()();
    v142 = (void (*)(char *, uint64_t))*((_QWORD *)v146 + 1);
    v142(v134, v131);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v185 = MEMORY[0x24BEE4B08];
    v143 = swift_bridgeObjectRetain();
    v144 = specialized _ArrayProtocol.filter(_:)(v143);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v147(v144);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v142)(v136, v131);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v152;
  v180 = v35;
  if ((v39 & 0xC000000000000001) != 0)
    goto LABEL_133;
  if (*(_QWORD *)(v39 + 16))
  {
    v131 = v33;
    v132 = *(id *)(v39 + 32);
    goto LABEL_121;
  }
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t SRSmartRepliesCaptioner.summaryCaptions(for:withTopicsOnly:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v5)
                                                                                        + 0xE8))(a1, a2, a3, 0, a4, a5);
}

uint64_t SRSmartRepliesCaptioner.captions(text:preferBusinessTopics:onComplete:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2475DF000, v3, v4, "Retrieving topic captions from a block of text", v5, 2u);
    MEMORY[0x24957ECC0](v5, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v6 = BidirectionalCollection<>.joined(separator:)();
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE8))(v6);
  return swift_bridgeObjectRelease();
}

uint64_t SRSmartRepliesCaptioner.captions(text:onComplete:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2475DF000, v3, v4, "Retrieving topic captions from a block of text", v5, 2u);
    MEMORY[0x24957ECC0](v5, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v6 = BidirectionalCollection<>.joined(separator:)();
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF0))(v6);
  return swift_bridgeObjectRelease();
}

uint64_t SRSmartRepliesCaptioner.unifiedImageCaption(for:onComplete:)(unint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  objc_super v40;
  uint64_t v41;

  if (!a1)
    return a2();
  v41 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (!result)
      goto LABEL_17;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_17;
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_52;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)(MEMORY[0x24957E42C](i, a1) + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type) == 2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v7 = (id *)(a1 + 32);
    v8 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
    do
    {
      if (*(_QWORD *)((char *)*v7 + v8) == 2)
      {
        v9 = *v7;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
      }
      ++v7;
      --v4;
    }
    while (v4);
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v10 = v41;
  v38 = a2;
  if (v41 < 0 || (v41 & 0x4000000000000000) != 0)
  {
    swift_retain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v11 = result;
  }
  else
  {
    v11 = *(_QWORD *)(v41 + 16);
    result = swift_retain();
  }
  if (v11)
  {
    if (v11 >= 1)
    {
      v12 = 0;
      v39 = v41 + 32;
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x24957E42C](v12++, v10);
          v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
          v16 = *(_QWORD *)(v14 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
        }
        else
        {
          v17 = *(_QWORD *)(v39 + 8 * v12++);
          v18 = (uint64_t *)(v17 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
          v15 = *v18;
          v16 = v18[1];
          swift_bridgeObjectRetain();
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        v20 = v13[2];
        v19 = v13[3];
        if (v20 >= v19 >> 1)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v13);
        v13[2] = v20 + 1;
        v21 = &v13[2 * v20];
        v21[4] = v15;
        v21[5] = v16;
      }
      while (v12 != v11);
      goto LABEL_33;
    }
LABEL_52:
    __break(1u);
    return result;
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
  swift_release_n();
  v22 = v13[2];
  if (v22)
  {
    v23 = v13 + 5;
    v24 = v13[5];
    v25 = v13[4];
    swift_bridgeObjectRetain();
    v26 = MEMORY[0x24BEE4AF8];
    do
    {
      v27 = *(v23 - 1) == v25 && *v23 == v24;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v26 = String.nounLikeTokens(includePronouns:)();
      }
      else
      {
        swift_bridgeObjectRetain();
        v28 = (_QWORD *)String.nounLikeTokens(includePronouns:)();
        swift_bridgeObjectRelease();
        v29 = specialized _ArrayProtocol.filter(_:)(v26, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v26 = v29;
      }
      v23 += 2;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v26 + 16);
    if (v30)
    {
      v41 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v31 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v32 = (uint64_t *)(v26 + 40);
      do
      {
        v34 = *(v32 - 1);
        v33 = *v32;
        v35 = (char *)objc_allocWithZone(v31);
        v36 = &v35[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *(_QWORD *)v36 = v34;
        *((_QWORD *)v36 + 1) = v33;
        *(_QWORD *)&v35[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 2;
        v40.receiver = v35;
        v40.super_class = v31;
        swift_bridgeObjectRetain();
        objc_msgSendSuper2(&v40, sel_init);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v32 += 2;
        --v30;
      }
      while (v30);
      v37 = v41;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v37 = MEMORY[0x24BEE4AF8];
    }
    ((void (*)(uint64_t))v38)(v37);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t SRSmartRepliesCaptioner.captions(imageURL:onComplete:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  CGImageRef v32;
  uint64_t v33;
  CGImageRef v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void (*v46)(CGImageRef, uint64_t (*)(_QWORD), uint64_t);
  CGImage *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void (*v51)(char *, char *, uint64_t);
  uint8_t *v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v55 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v48 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - v18;
  outlined init with copy of Date?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for URL?);
    return a2(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v10, v11);
    if ((SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()() & 1) != 0)
    {
      v54 = a3;
      if (one-time initialization token for standard != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.standard);
      v51 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v51(v17, v19, v11);
      v52 = (uint8_t *)v22;
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.default.getter();
      v25 = os_log_type_enabled(v23, v24);
      v53 = a2;
      v50 = v4;
      if (v25)
      {
        v26 = (uint8_t *)swift_slowAlloc();
        v49 = swift_slowAlloc();
        v57 = v49;
        *(_DWORD *)v26 = 136315138;
        lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v27 = dispatch thunk of CustomStringConvertible.description.getter();
        v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v57);
        a2 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v29 = *(void (**)(char *, uint64_t))(v12 + 8);
        v29(v17, v11);
        _os_log_impl(&dword_2475DF000, v23, v24, "Requesting captions for image at URL: %s", v26, 0xCu);
        v30 = v49;
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v30, -1, -1);
        MEMORY[0x24957ECC0](v26, -1, -1);
      }
      else
      {
        v29 = *(void (**)(char *, uint64_t))(v12 + 8);
        v29(v17, v11);
      }

      v31 = v55;
      v32 = specialized static SRSmartRepliesCaptioner.resizedCGImage(at:for:)((uint64_t)v19, 448.0, 448.0);
      v33 = v54;
      if (v32)
      {
        v34 = v32;
        v51(v31, v19, v11);
        v35 = Logger.logObject.getter();
        v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc();
          v38 = swift_slowAlloc();
          v55 = (char *)v29;
          v39 = v38;
          v57 = v38;
          *(_DWORD *)v37 = 136315138;
          v52 = v37 + 4;
          lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v40 = dispatch thunk of CustomStringConvertible.description.getter();
          v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v55)(v31, v11);
          _os_log_impl(&dword_2475DF000, v35, v36, "Returning captions to for image at URL: %s", v37, 0xCu);
          swift_arrayDestroy();
          v42 = v39;
          v29 = (void (*)(char *, uint64_t))v55;
          MEMORY[0x24957ECC0](v42, -1, -1);
          v33 = v54;
          MEMORY[0x24957ECC0](v37, -1, -1);
        }
        else
        {
          v29(v31, v11);
        }

        v46 = *(void (**)(CGImageRef, uint64_t (*)(_QWORD), uint64_t))((*MEMORY[0x24BEE4EA0] & *v50)
                                                                                         + 0x120);
        v47 = v34;
        v46(v34, v53, v33);

      }
      else
      {
        v43 = Logger.logObject.getter();
        v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v45 = 0;
          _os_log_impl(&dword_2475DF000, v43, v44, "Could not form CGImage from data", v45, 2u);
          MEMORY[0x24957ECC0](v45, -1, -1);
        }

        a2(0);
      }
      return ((uint64_t (*)(char *, uint64_t))v29)(v19, v11);
    }
    else
    {
      a2(0);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
    }
  }
}

uint64_t SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()() & 1) == 0)
    return a2(0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v3;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = v3;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:), (uint64_t)v11);
  return swift_release();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;

  v7[2] = a6;
  v7[3] = a7;
  v9 = (_QWORD *)swift_task_alloc();
  v7[4] = v9;
  *v9 = v7;
  v9[1] = closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return SRSmartRepliesCaptioner.captions(imageURLs:)(a5);
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of Any?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void SRSmartRepliesCaptioner.captions(image:onComplete:)(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  UIImage *v13;
  NSData *v14;
  NSData *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t inited;
  unint64_t v21;
  id v22;
  Class isa;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  id v42;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v42 = a1;
    if ((SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()() & 1) != 0)
    {
      CGImageRef.resize(to:)(448.0, 448.0);
      if (v11)
      {
        v41 = v11;
        v12 = objc_allocWithZone(MEMORY[0x24BEBD640]);
        v13 = (UIImage *)objc_msgSend(v12, sel_initWithCGImage_, v41);
        v14 = UIImagePNGRepresentation(v13);
        if (v14)
        {
          v15 = v14;
          v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v17;

          outlined copy of Data._Representation(v16, v18);
          v19 = Data.base64EncodedString(options:)(0x20uLL);
          outlined consume of Data._Representation(v16, v18);
          outlined consume of Data._Representation(v16, v18);

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_247656880;
          *(_QWORD *)(inited + 32) = 0x656C797473;
          *(_QWORD *)(inited + 40) = 0xE500000000000000;
          *(_QWORD *)(inited + 48) = 0x7061436567616D69;
          *(_QWORD *)(inited + 56) = 0xEF676E696E6F6974;
          *(_QWORD *)(inited + 64) = 0x7461446567616D69;
          *(_QWORD *)(inited + 72) = 0xEF676E6972745361;
          *(Swift::String *)(inited + 80) = v19;
          v21 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
          swift_bridgeObjectRelease();
          v22 = objc_allocWithZone(MEMORY[0x24BE63310]);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v24 = objc_msgSend(v22, sel_initWithParametersDict_, isa);

          v25 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 1, 1, v25);
          v26 = (_QWORD *)swift_allocObject();
          v26[2] = 0;
          v26[3] = 0;
          v26[4] = v24;
          v26[5] = 0xD000000000000032;
          v26[6] = 0x800000024765BE20;
          v26[7] = a2;
          v26[8] = a3;
          v26[9] = v4;
          v27 = v24;
          swift_retain();
          v28 = v4;
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:), (uint64_t)v26);

          swift_release();
        }
        else
        {

          if (one-time initialization token for standard != -1)
            swift_once();
          v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.standard);
          v38 = Logger.logObject.getter();
          v39 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v40 = 0;
            _os_log_impl(&dword_2475DF000, v38, v39, "Unable to generate data string from image for captioning", v40, 2u);
            MEMORY[0x24957ECC0](v40, -1, -1);
          }

          a2(0);
        }
        return;
      }
      if (one-time initialization token for standard != -1)
        swift_once();
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.standard);
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_2475DF000, v34, v35, "Could not resize image provided for captioning", v36, 2u);
        MEMORY[0x24957ECC0](v36, -1, -1);
      }

    }
    a2(0);

    return;
  }
  if (one-time initialization token for standard != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.standard);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_2475DF000, v30, v31, "No image provided for captioning", v32, 2u);
    MEMORY[0x24957ECC0](v32, -1, -1);
  }

  a2(0);
}

void CGImageRef.resize(to:)(double a1, double a2)
{
  CGImage *v2;
  int64_t BitsPerPixel;
  size_t BitsPerComponent;
  uint64_t v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint32_t AlphaInfo;
  CGContextRef v15;
  CGContext *v16;
  CGRect v17;

  if (a1 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a1 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((*(_QWORD *)&a1 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&a2 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_18;
  }
  if (a2 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  BitsPerPixel = CGImageGetBitsPerPixel(v2);
  BitsPerComponent = CGImageGetBitsPerComponent(v2);
  if (!BitsPerComponent)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = BitsPerComponent;
  if (BitsPerPixel == 0x8000000000000000 && BitsPerComponent == -1)
    goto LABEL_23;
  v8 = CGImageGetColorSpace(v2);
  if (!v8)
    return;
  v9 = v8;
  v10 = (uint64_t)a1;
  v11 = BitsPerPixel / v7;
  v12 = CGImageGetBitsPerComponent(v2);
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  v13 = v12;
  AlphaInfo = CGImageGetAlphaInfo(v2);
  v15 = CGBitmapContextCreate(0, (uint64_t)a1, (uint64_t)a2, v13, (uint64_t)a1 * v11, v9, AlphaInfo);
  if (v15)
  {
    v16 = v15;
    v17.size.width = (double)v10;
    v17.size.height = (double)(uint64_t)a2;
    v17.origin.x = 0.0;
    v17.origin.y = 0.0;
    CGContextRef.draw(_:in:byTiling:)(v2, v17, 0);
    CGBitmapContextCreateImage(v16);

  }
  else
  {

  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Date?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    *(_QWORD *)&v36[0] = *v17;
    *((_QWORD *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(&v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Double].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[35] = a8;
  v8[36] = v10;
  v8[33] = a6;
  v8[34] = a7;
  v8[31] = a4;
  v8[32] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[32];
  v1 = v0[33];
  v3 = v0[31];
  v4 = (void *)objc_opt_self();
  v5 = MEMORY[0x24957DF1C](v2, v1);
  v0[37] = v5;
  v0[7] = v0 + 25;
  v0[2] = v0;
  v0[3] = closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:);
  v6 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MLRTaskResult?, @unowned NSError?) -> () with result type MLRTaskResult;
  v7[3] = &block_descriptor_75;
  v7[4] = v6;
  objc_msgSend(v4, sel_performTask_forPluginID_completionHandler_, v3, v5, v7);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 304) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 296);
  v2 = *(void **)(v0 + 200);
  *(_QWORD *)(v0 + 312) = v2;

  v3 = objc_msgSend(v2, sel_JSONResult);
  if (!v3)
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    goto LABEL_14;
  }
  v4 = v3;
  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Collection.first.getter(v5, (_OWORD *)(v0 + 120));
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 144))
  {
LABEL_14:
    outlined destroy of Any?(v0 + 120, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  v6 = (uint64_t *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Swift.AnyObject]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    goto LABEL_15;
  v8 = *v6;
  if (!((unint64_t)*v6 >> 62))
  {
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_22;
LABEL_6:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = MEMORY[0x24957E42C](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(v8 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 224) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = *(_QWORD *)(v0 + 232);
    if (*(_QWORD *)(v10 + 16))
    {
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F6974706163, 0xE700000000000000);
      if ((v12 & 1) != 0)
      {
        v13 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v11);
        v14 = *v13;
        *(_QWORD *)(v0 + 320) = *v13;
        v15 = v13[1];
        *(_QWORD *)(v0 + 328) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        SRSmartRepliesCaptioner.predictionExemptTermsDetector.getter();
        v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)
                                                                         + async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:));
        swift_bridgeObjectRetain();
        v16 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 336) = v16;
        *v16 = v0;
        v16[1] = closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:);
        return v23(v14, v15, 28261, 0xE200000000000000);
      }
    }
    goto LABEL_22;
  }
LABEL_15:
  if (one-time initialization token for standard != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.standard);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_2475DF000, v18, v19, "SmartRepliesMLRuntimePlugin did not find any results", v20, 2u);
    MEMORY[0x24957ECC0](v20, -1, -1);
  }
  v21 = *(void (**)(_QWORD))(v0 + 272);

  v21(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  void (*v6)(_QWORD);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  objc_class *v15;
  char *v16;
  char *v17;

  if ((*(_BYTE *)(v0 + 344) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.standard);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_2475DF000, v2, v3, "Caption is disallowed due to being on the prediction exempt terms list.", v4, 2u);
      MEMORY[0x24957ECC0](v4, -1, -1);
    }
    v5 = *(void **)(v0 + 312);
    v6 = *(void (**)(_QWORD))(v0 + 272);

    v6(0);
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.standard);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2475DF000, v8, v9, "Returning captions retrieved in SmartRepliesMLRuntimePlugin", v10, 2u);
      MEMORY[0x24957ECC0](v10, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 328);
    v5 = *(void **)(v0 + 312);
    v13 = *(void (**)(uint64_t))(v0 + 272);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_247656A00;
    v15 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
    v16 = (char *)objc_allocWithZone(v15);
    v17 = &v16[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
    *(_QWORD *)v17 = v12;
    *((_QWORD *)v17 + 1) = v11;
    *(_QWORD *)&v16[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 2;
    *(_QWORD *)(v0 + 152) = v16;
    *(_QWORD *)(v0 + 160) = v15;
    *(_QWORD *)(v14 + 32) = objc_msgSendSuper2((objc_super *)(v0 + 152), sel_init);
    specialized Array._endMutation()();
    v13(v14);
    swift_bridgeObjectRelease();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  char *v20;
  char *v21;

  v1 = *(void **)(v0 + 296);
  swift_willThrow();

  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = *(void **)(v0 + 304);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.standard);
  v4 = v2;
  v5 = v2;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 304);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v10 = 138412290;
    v12 = v9;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 240) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v13;

    _os_log_impl(&dword_2475DF000, v6, v7, "Failed to reach SmartRepliesMLRuntimePlugin: %@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v11, -1, -1);
    MEMORY[0x24957ECC0](v10, -1, -1);
  }
  else
  {

  }
  v14 = *(void **)(v0 + 304);
  v15 = *(void (**)(uint64_t))(v0 + 272);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  *(_QWORD *)(v0 + 168) = 0;
  *(_OWORD *)(v16 + 16) = xmmword_247656A00;
  *(_QWORD *)(v0 + 176) = 0xE000000000000000;
  *(_QWORD *)(v0 + 208) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 176);
  v19 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
  v20 = (char *)objc_allocWithZone(v19);
  v21 = &v20[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
  *(_QWORD *)v21 = v17;
  *((_QWORD *)v21 + 1) = v18;
  *(_QWORD *)&v20[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 2;
  *(_QWORD *)(v0 + 184) = v20;
  *(_QWORD *)(v0 + 192) = v19;
  *(_QWORD *)(v16 + 32) = objc_msgSendSuper2((objc_super *)(v0 + 184), sel_init);
  specialized Array._endMutation()();
  v15(v16);
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 344) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MLRTaskResult?, @unowned NSError?) -> () with result type MLRTaskResult(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static SRSmartRepliesCaptioner.looksLikePhoneShortCode(handle:)(uint64_t a1, uint64_t a2)
{
  if (a2)
    return String.looksLikeAPhoneShortCode.getter();
  else
    return 0;
}

Swift::String __swiftcall SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(Swift::String contactDetail, Swift::String originalMessageText)
{
  unint64_t object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  dispatch_semaphore_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  Swift::String v33;
  Swift::Bool v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  NSObject *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  void *v54;
  Swift::String result;
  char *v56;
  char *v57;
  uint64_t v58;
  dispatch_semaphore_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;

  object = (unint64_t)originalMessageText._object;
  countAndFlagsBits = originalMessageText._countAndFlagsBits;
  v4 = contactDetail._object;
  v5 = contactDetail._countAndFlagsBits;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v56 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v56 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v19 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v19 || (String.looksLikeAPhoneShortCode.getter() & 1) == 0)
    goto LABEL_14;
  v61 = v6;
  v63 = countAndFlagsBits;
  v64 = object;
  v65 = 58;
  v66 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v20 = *(_QWORD *)(StringProtocol.components<A>(separatedBy:)() + 16);
  swift_bridgeObjectRelease();
  if (v20 < 2)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.standard);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_2475DF000, v50, v51, "Unable to normalize short code message text because it is not in the expected format.", v52, 2u);
      MEMORY[0x24957ECC0](v52, -1, -1);
    }

LABEL_14:
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  v56 = v10;
  v57 = v15;
  v58 = v7;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  v60 = (uint64_t *)(v21 + 16);
  v22 = dispatch_semaphore_create(0);
  v59 = v22;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v18, 1, 1, v24);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = partial apply for closure #1 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  v25[5] = v23;
  v26 = v62;
  v25[6] = v62;
  v25[7] = v5;
  v25[8] = v4;
  v25[9] = countAndFlagsBits;
  v25[10] = object;
  swift_retain();
  v27 = v59;
  swift_retain();
  v28 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = (uint64_t)v18;
  v30 = v60;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v29, (uint64_t)&async function pointer to partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:), (uint64_t)v25);
  swift_release();
  OS_dispatch_semaphore.wait()();
  swift_beginAccess();
  v31 = *(void **)(v21 + 24);
  if (v31)
  {
    v32 = *v30;
    swift_bridgeObjectRetain();
    v33._countAndFlagsBits = v32;
    v33._object = v31;
    v34 = String.hasPrefix(_:)(v33);
    swift_bridgeObjectRetain();
    if (v34)
    {
      v35 = String.count.getter();
      swift_bridgeObjectRelease();
      v36 = specialized Collection.dropFirst(_:)(v35, countAndFlagsBits, object);
      v38 = v37;
      v40 = v39;
      v42 = v41;
      swift_bridgeObjectRelease();
      MEMORY[0x24957DF88](v36, v38, v40, v42);
      swift_bridgeObjectRelease();
      static CharacterSet.punctuationCharacters.getter();
      v43 = v56;
      static CharacterSet.whitespacesAndNewlines.getter();
      v44 = v27;
      v45 = v57;
      CharacterSet.union(_:)();
      v46 = *(void (**)(char *, uint64_t))(v58 + 8);
      v47 = v61;
      v46(v43, v61);
      v46(v13, v47);
      countAndFlagsBits = String.trimLeadingCharacters(_:)();
      object = v48;

      swift_release();
      swift_bridgeObjectRelease();
      v46(v45, v47);
      swift_release();
    }
    else
    {
      swift_release();

      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_release();

    swift_release();
  }
LABEL_15:
  v53 = countAndFlagsBits;
  v54 = (void *)object;
  result._object = v54;
  result._countAndFlagsBits = v53;
  return result;
}

Swift::Int closure #1 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return OS_dispatch_semaphore.signal()();
}

uint64_t closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[9] = v10;
  v8[10] = v11;
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[4] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[9];
  v1 = v0[10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = swift_allocObject();
  v0[11] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_247656500;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  v4 = SRSmartRepliesCaptioner.shortcodeResolutionManager.getter();
  v0[12] = v4;
  v0[13] = v5;
  v0[2] = v4;
  v0[3] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v0[14] = v6;
  *v6 = v0;
  v6[1] = closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return ShortcodeResolutionManager.bestNameForPhoneShortCode(detail:associatedText:)(v0[7], v0[8], v3);
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 48);
  v7 = *(_OWORD *)(*v2 + 96);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4
                 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager) = v7;
  outlined consume of ShortcodeResolutionManager?(v5);
  return swift_task_switch();
}

uint64_t SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v18;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = v5;
  v15[7] = a3;
  v15[8] = a4;
  v15[9] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = v5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:), (uint64_t)v15);
  return swift_release();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[29] = a8;
  v8[30] = v10;
  v8[27] = a6;
  v8[28] = a7;
  v8[25] = a4;
  v8[26] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  uint64_t *v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  Swift::String v37;

  if ((String.looksLikeAPhoneShortCode.getter() & 1) != 0)
  {
    v1 = SRSmartRepliesCaptioner.shortcodeResolutionManager.getter();
    *(_QWORD *)(v0 + 248) = v1;
    *(_QWORD *)(v0 + 256) = v2;
    *(_QWORD *)(v0 + 168) = v1;
    *(_QWORD *)(v0 + 176) = v2;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v3;
    *v3 = v0;
    v3[1] = closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:);
    return ShortcodeResolutionManager.bestNameForPhoneShortCode(detail:associatedText:)(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 224));
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 288) = __swift_project_value_buffer(v5, (uint64_t)static Logger.standard);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2475DF000, v6, v7, "Retrieving a contact name from Found In using the newest suggested contact", v8, 2u);
      MEMORY[0x24957ECC0](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);

    v11 = (void *)objc_opt_self();
    v12 = (void *)MEMORY[0x24957DF1C](v10, v9);
    v13 = objc_msgSend(v11, sel_newestSuggestedContactForDestinationID_, v12);

    if (v13)
    {
      v14 = specialized SRSmartRepliesCaptioner.bestDisplayName(contact:)(v13);
      if (v15)
      {
        v16 = v14;
        v17 = v15;
        if (one-time initialization token for current != -1)
          swift_once();
        v18 = *(void (**)(uint64_t))(v0 + 232);
        v37._object = (void *)0x800000024765C070;
        v19._countAndFlagsBits = 0x4F435F454259414DLL;
        v19._object = (void *)0xED0000544341544ELL;
        v20._countAndFlagsBits = 0;
        v20._object = (void *)0xE000000000000000;
        v37._countAndFlagsBits = 0xD0000000000000F7;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v20, v37);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_247656500;
        *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v21 + 32) = v16;
        *(_QWORD *)(v21 + 40) = v17;
        v22 = static String.localizedStringWithFormat(_:_:)();
        v24 = v23;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_247656A00;
        v26 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
        v27 = (char *)objc_allocWithZone(v26);
        v28 = (uint64_t *)&v27[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *v28 = v22;
        v28[1] = v24;
        *(_QWORD *)&v27[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 3;
        *(_QWORD *)(v0 + 152) = v27;
        *(_QWORD *)(v0 + 160) = v26;
        *(_QWORD *)(v25 + 32) = objc_msgSendSuper2((objc_super *)(v0 + 152), sel_init);
        specialized Array._endMutation()();
        v18(v25);

        swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(_QWORD))(v0 + 232))(0);

      }
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_2475DF000, v29, (os_log_type_t)v30, "Retrieving a contact name from Found In allowing for insignificant contacts", v31, 2u);
        MEMORY[0x24957ECC0](v31, -1, -1);
      }
      v33 = *(_QWORD *)(v0 + 200);
      v32 = *(_QWORD *)(v0 + 208);

      v34 = MEMORY[0x24957DF1C](v33, v32);
      *(_QWORD *)(v0 + 296) = v34;
      *(_QWORD *)(v0 + 56) = v0 + 192;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:);
      v35 = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
      v36 = (_QWORD *)(v0 + 80);
      v36[1] = 0x40000000;
      v36[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [String];
      v36[3] = &block_descriptor_1;
      v36[4] = v35;
      objc_msgSend(v11, sel_suggestedNamesForDestinationID_onlySignificant_withCompletion_, v34, 0, v36);
      return swift_continuation_await();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(_QWORD);
  Swift::String v20;

  v1 = *(_QWORD *)(v0 + 280);
  if (v1)
  {
    if (one-time initialization token for current != -1)
      swift_once();
    v2 = *(_QWORD *)(v0 + 272);
    v3 = *(void (**)(uint64_t))(v0 + 232);
    v20._object = (void *)0x800000024765C170;
    v4._countAndFlagsBits = 0x4F435F454259414DLL;
    v4._object = (void *)0xED0000544341544ELL;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v20._countAndFlagsBits = 0xD000000000000112;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v5, v20);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_247656500;
    *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v6 + 32) = v2;
    *(_QWORD *)(v6 + 40) = v1;
    v7 = static String.localizedStringWithFormat(_:_:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_247656A00;
    v11 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
    v12 = (char *)objc_allocWithZone(v11);
    v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
    *v13 = v7;
    v13[1] = v9;
    *(_QWORD *)&v12[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 3;
    *(_QWORD *)(v0 + 136) = v12;
    *(_QWORD *)(v0 + 144) = v11;
    *(_QWORD *)(v10 + 32) = objc_msgSendSuper2((objc_super *)(v0 + 136), sel_init);
    specialized Array._endMutation()();
    v3(v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.standard);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2475DF000, v15, v16, "No best name was found given a short code and associated data", v17, 2u);
      MEMORY[0x24957ECC0](v17, -1, -1);
    }
    v18 = *(void (**)(_QWORD))(v0 + 232);

    v18(0);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 304) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(_QWORD);
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;

  v1 = *(_QWORD *)(v0 + 192);

  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v24 = MEMORY[0x24BEE4AF8];
    v3 = (uint64_t *)(v1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v6 = HIBYTE(*v3) & 0xF;
      if ((*v3 & 0x2000000000000000) == 0)
        v6 = v5 & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        v7 = one-time initialization token for current;
        swift_bridgeObjectRetain();
        if (v7 != -1)
          swift_once();
        v25._object = (void *)0x800000024765C070;
        v8._countAndFlagsBits = 0x4F435F454259414DLL;
        v8._object = (void *)0xED0000544341544ELL;
        v9._countAndFlagsBits = 0;
        v9._object = (void *)0xE000000000000000;
        v25._countAndFlagsBits = 0xD0000000000000F7;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v9, v25);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_247656500;
        *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v10 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v10 + 32) = v5;
        *(_QWORD *)(v10 + 40) = v4;
        v11 = static String.localizedStringWithFormat(_:_:)();
        v13 = v12;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
        v15 = (char *)objc_allocWithZone(v14);
        v16 = (uint64_t *)&v15[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *v16 = v11;
        v16[1] = v13;
        *(_QWORD *)&v15[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 3;
        *(_QWORD *)(v0 + 120) = v15;
        *(_QWORD *)(v0 + 128) = v14;
        objc_msgSendSuper2((objc_super *)(v0 + 120), sel_init);
        MEMORY[0x24957E0E4]();
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v17 = v24;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23)
        goto LABEL_15;
    }
    else if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_15:
      (*(void (**)(unint64_t))(v0 + 232))(v17);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_bridgeObjectRelease();
    v17 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_2475DF000, v18, v19, "No contact name results from Found In", v20, 2u);
    MEMORY[0x24957ECC0](v20, -1, -1);
  }
  v21 = *(void (**)(_QWORD))(v0 + 232);

  v21(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void (*v14)(_QWORD);

  v2 = *(void **)(v0 + 296);
  v1 = *(void **)(v0 + 304);
  swift_willThrow();

  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 304);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v7;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 184) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v11;

    _os_log_impl(&dword_2475DF000, v5, v6, "Failed to retrieve suggested names due to error: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v9, -1, -1);
    MEMORY[0x24957ECC0](v8, -1, -1);
  }
  else
  {
    v12 = *(void **)(v0 + 304);

  }
  v13 = *(void **)(v0 + 304);
  v14 = *(void (**)(_QWORD))(v0 + 232);

  v14(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 216);
  v7 = *(_OWORD *)(*v2 + 248);
  *(_QWORD *)(v3 + 272) = a1;
  *(_QWORD *)(v3 + 280) = a2;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4
                 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager);
  *(_OWORD *)(v4 + OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager) = v7;
  outlined consume of ShortcodeResolutionManager?(v5);
  return swift_task_switch();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [String](uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  v9 = 0;
  v10 = a3 + 7;
  v11 = 1;
  while (1)
  {
    if (v3 == v11)
      return 0;
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2)
      break;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = v11++;
    v10 += 2;
    if ((v13 & 1) != 0)
      return result;
  }
  return v9;
}

uint64_t SRSmartRepliesCaptioner.captions(imageURLs:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[4] = a1;
  v2[5] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SRSmartRepliesCaptioner.captions(imageURLs:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, unint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 32);
  if (!v1)
    goto LABEL_9;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 64) = v2;
  if (v2)
  {
    v3 = type metadata accessor for URL();
    *(_QWORD *)(v0 + 72) = v3;
    v4 = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v0 + 80) = v4;
    v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 128) = v5;
    *(_QWORD *)(v0 + 88) = *(_QWORD *)(v4 + 72);
    v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
    *(_QWORD *)(v0 + 96) = v6;
    *(_QWORD *)(v0 + 104) = 0;
    v7 = *(_QWORD *)(v0 + 56);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    swift_bridgeObjectRetain();
    v6(v7, v8, v3);
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
    v9(v7, 0, 1, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3) != 1)
    {
      v10 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v12 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 80) + 32))(v11, *(_QWORD *)(v0 + 56), v10);
      v9(v11, 0, 1, v10);
      v13 = swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v13;
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = v11;
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 120) = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SRSmartRepliesCaption]?);
      *v14 = v0;
      v14[1] = SRSmartRepliesCaptioner.captions(imageURLs:);
      return withCheckedContinuation<A>(isolation:function:_:)();
    }
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 56);
    v17 = type metadata accessor for URL();
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    swift_bridgeObjectRetain();
    v18(v16, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v1 = 0;
  }
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v1);
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of Any?(*(_QWORD *)(v0 + 48), (uint64_t *)&demangling cache variable for type metadata for URL?);
  if (v1)
    specialized Array.append<A>(contentsOf:)(v1, (unint64_t *)type metadata accessor for SRSmartRepliesCaption, &lazy protocol witness table cache variable for type [SRSmartRepliesCaption] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesCaption], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
  v2 = *(_QWORD *)(v0 + 104) + 1;
  if (v2 == *(_QWORD *)(v0 + 64))
  {
    v3 = *(_QWORD *)(v0 + 56);
    v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 104) = v2;
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 96))(v7, *(_QWORD *)(v0 + 32)+ ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128))+ *(_QWORD *)(v0 + 88) * v2, v5);
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56);
  v8(v7, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v0 + 16);
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16)
        goto LABEL_9;
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
    }
    swift_bridgeObjectRelease();
    v9 = 0;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 80) + 32))(v12, *(_QWORD *)(v0 + 56), v11);
  v8(v12, 0, 1, v11);
  v14 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v14;
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SRSmartRepliesCaption]?);
  *v15 = v0;
  v15[1] = SRSmartRepliesCaptioner.captions(imageURLs:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for EKEvent, &lazy protocol witness table cache variable for type [EKEvent] and conformance [A], &demangling cache variable for type metadata for [EKEvent], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SRSmartRepliesSuggestion, &lazy protocol witness table cache variable for type [SRSmartRepliesSuggestion] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesSuggestion], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x24957E438](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SRSmartRepliesCaption]?, Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t (*)(), uint64_t))((*MEMORY[0x24BEE4EA0] & *a2) + 0x110))(a3, partial apply for closure #1 in closure #1 in SRSmartRepliesCaptioner.captions(imageURL:), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SRSmartRepliesCaption]?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t SRSmartRepliesCaptioner.languageIsAppropriateForTextCaptioning(string:)()
{
  _QWORD *v0;
  Swift::String_optional v1;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  char v20;
  uint64_t v22;

  v1 = String.primaryLanguageTag()();
  if (v1.value._object)
    countAndFlagsBits = v1.value._countAndFlagsBits;
  else
    countAndFlagsBits = 0;
  if (v1.value._object)
    object = v1.value._object;
  else
    object = (void *)0xE000000000000000;
  v4 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))(v1.value._countAndFlagsBits);
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    swift_bridgeObjectRelease();
    if (one-time initialization token for languagesSupportedForTextCaptioning != -1)
      swift_once();
    v8 = specialized Sequence<>.contains(_:)(v6, v7, languagesSupportedForTextCaptioning._rawValue);
    if (one-time initialization token for standard != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v22 = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 2080;
      if ((v8 & 1) != 0)
        v14 = 0x6F70707573207369;
      else
        v14 = 0xD000000000000010;
      if ((v8 & 1) != 0)
        v15 = 0xEC00000064657472;
      else
        v15 = 0x800000024765C2C0;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v10, v11, "Language code is %s which %s for text captioning", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v13, -1, -1);
      MEMORY[0x24957ECC0](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return v8 & 1;
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.standard);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2475DF000, v17, v18, "No current language code for determining if text captioning is available. Attempt to caption anyway using the system language", v19, 2u);
      MEMORY[0x24957ECC0](v19, -1, -1);
    }

    if (one-time initialization token for languagesSupportedForTextCaptioning != -1)
      swift_once();
    v20 = specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, languagesSupportedForTextCaptioning._rawValue);
    swift_bridgeObjectRelease();
    return v20 & 1;
  }
}

uint64_t SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v1 = type metadata accessor for Locale.Language();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))(v10);
  if (v14)
  {
    v15 = v13;
    v16 = v14;
LABEL_10:
    if (one-time initialization token for languagesSupportedForImageCaptioning != -1)
      swift_once();
    v23 = specialized Sequence<>.contains(_:)(v15, v16, languagesSupportedForImageCaptioning._rawValue);
    if (one-time initialization token for standard != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      v29 = swift_slowAlloc();
      v34 = v29;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      if ((v23 & 1) != 0)
        v30 = 0x6F70707573207369;
      else
        v30 = 0xD000000000000010;
      if ((v23 & 1) != 0)
        v31 = 0xEC00000064657472;
      else
        v31 = 0x800000024765C2C0;
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v26, v27, "Language code is %s which %s for image captioning", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v29, -1, -1);
      MEMORY[0x24957ECC0](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return v23 & 1;
  }
  static Locale.current.getter();
  Locale.language.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v17 = type metadata accessor for Locale.LanguageCode();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v17) != 1)
  {
    v15 = MEMORY[0x24957DC70]();
    v16 = v24;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v17);
    goto LABEL_10;
  }
  outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Locale.LanguageCode?);
  if (one-time initialization token for standard != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.standard);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_2475DF000, v20, v21, "No current language code for determining if image captioning is available. Attempt to caption anyway", v22, 2u);
    MEMORY[0x24957ECC0](v22, -1, -1);
  }

  v23 = 1;
  return v23 & 1;
}

id SRSmartRepliesCaptioner.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SRSmartRepliesCaptioner.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner_preferredLanguageCode];
  *v1 = 0;
  v1[1] = 0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___captionPhraseArbiter] = xmmword_247656A10;
  v2 = &v0[OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___shortcodeResolutionManager];
  *v2 = 0;
  v2[1] = 0;
  v0[OBJC_IVAR____TtC12SmartReplies23SRSmartRepliesCaptioner____lazy_storage___predictionExemptTermsDetector] = 1;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SRSmartRepliesCaptioner();
  return objc_msgSendSuper2(&v4, sel_init);
}

id SRSmartRepliesCaptioner.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesCaptioner();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SRSmartRepliesCaptioning.inferredContacts(in:) in conformance SRSmartRepliesCaptioner(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & **v2) + 0xD0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v9(a1, a2);
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(text:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x100))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(text:preferBusinessTopics:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xF8))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(image:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x120))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(linkMetadata:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xE0))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(contactDetail:associatedText:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x130))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.unifiedImageCaption(for:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x108))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(imageURL:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x110))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.captions(imageURLs:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x118))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xE8))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xF0))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.normalizedShortCodeMessageText(contactDetail:originalMessageText:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x128))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.getter in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x70))();
}

uint64_t protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.setter in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x78))();
}

uint64_t (*protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.modify in conformance SRSmartRepliesCaptioner(_QWORD *a1))()
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v1) + 0x80))();
  return protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.modify in conformance SRSmartRepliesCaptioner;
}

uint64_t protocol witness for SRSmartRepliesCaptioning.friendlyCaption(for:onComplete:) in conformance SRSmartRepliesCaptioner()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xD8))();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  a2(v8);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SRSmartRepliesPersonMatch>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SRSmartRepliesActionInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SRPredictionItem>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ResponseType>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24957E084](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 16 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 16 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 16 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Double)>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        type metadata accessor for SRSmartRepliesCaption();
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Double)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Double].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(_QWORD))type metadata accessor for SRSmartRepliesConversationTurn, &lazy protocol witness table cache variable for type [SRSmartRepliesConversationTurn] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesConversationTurn], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(_QWORD), unint64_t *a3, uint64_t *a4, uint64_t (*a5)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t);

  if (a1 >> 62)
    goto LABEL_10;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v10)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v10 <= 0)
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v10;
      v11[3] = (2 * (v13 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v11 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v14;
    swift_bridgeObjectRelease();
    if (a5 == (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))v10)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v11;
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  uint64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = specialized Sequence._copyContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    v7 = *(void **)(v5 + 8 * v4);
    v8 = v16;
    v17 = v6;
    while (1)
    {
      v9 = *(void **)v6;
      v10 = v7;
      v11 = v9;
      v12 = *(_QWORD *)(String.tokens()() + 16);
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(String.tokens()() + 16);

      result = swift_bridgeObjectRelease();
      if (v13 >= v12)
      {
LABEL_4:
        ++v4;
        v6 = v17 + 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v14 = *(void **)v6;
      v7 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v14;
      v6 -= 8;
      if (v4 == ++v8)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(_QWORD *)(v7 + 8 * v4);
    v10 = v6;
    v11 = (uint64_t *)v8;
    while (1)
    {
      v12 = (uint64_t *)(v9 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
      result = *v12;
      v13 = v12[1];
      v14 = (_QWORD *)(*v11 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
      v15 = result == *v14 && v13 == v14[1];
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v16 = *v11;
      v9 = v11[1];
      *v11 = v9;
      v11[1] = v16;
      --v11;
      if (v4 == ++v10)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v13 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = (_QWORD *)(*a4 + 16 * a3);
LABEL_5:
    v7 = v13;
    v14 = v6;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = String.count.getter();
      v9 = String.count.getter();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v9 >= v8)
      {
LABEL_4:
        ++v4;
        v6 = v14 + 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v10 = *v6;
      v11 = v6[1];
      *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v11;
      *(v6 - 2) = v10;
      v6 -= 2;
      if (v4 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  void **v4;
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  id *v18;
  void **v19;
  id *v20;
  id *v21;
  void **v22;
  void *v23;
  unint64_t v24;
  id v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t result;
  void **v31;
  void **v32;
  void **v33;
  id *v34;
  id *v36;
  void **v37;
  void **v38;
  id *v39;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v39 = __src;
  v38 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
        memmove(__dst, a2, 8 * v12);
      v19 = &v4[v12];
      v37 = v19;
      v39 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        v20 = (id *)(a3 - 8);
        v21 = v5;
        v31 = v6;
        v32 = v4;
        while (1)
        {
          v34 = v20 + 1;
          v36 = v5;
          v22 = v19 - 1;
          v23 = *--v21;
          v24 = (unint64_t)v19;
          v25 = *(v19 - 1);
          v26 = v23;
          v27 = *(_QWORD *)(String.tokens()() + 16);
          swift_bridgeObjectRelease();
          v28 = *(_QWORD *)(String.tokens()() + 16);

          swift_bridgeObjectRelease();
          if (v28 >= v27)
          {
            v37 = v22;
            if ((unint64_t)v34 < v24 || (unint64_t)v20 >= v24)
            {
              *v20 = *v22;
              v21 = v36;
              v19 = v22;
              v29 = v32;
              if (v36 <= v31)
                goto LABEL_44;
            }
            else
            {
              if (v34 != (id *)v24)
                *v20 = *v22;
              v21 = v36;
              v19 = v22;
              v29 = v32;
              if (v36 <= v31)
                goto LABEL_44;
            }
          }
          else
          {
            if (v34 != v36 || v20 >= v36)
              *v20 = *v21;
            v39 = v21;
            v29 = v32;
            v19 = (void **)v24;
            if (v21 <= v31)
              goto LABEL_44;
          }
          --v20;
          v5 = v21;
          if (v19 <= v29)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
      memmove(__dst, __src, 8 * v9);
    v33 = &v4[v9];
    v37 = v33;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      do
      {
        v13 = *v4;
        v14 = *v5;
        v15 = v13;
        v16 = *(_QWORD *)(String.tokens()() + 16);
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(String.tokens()() + 16);

        swift_bridgeObjectRelease();
        if (v17 >= v16)
        {
          if (v6 != v4)
            *v6 = *v4;
          v38 = ++v4;
          v18 = v5;
        }
        else
        {
          v18 = v5 + 1;
          if (v6 < v5 || v6 >= v18 || v6 != v5)
            *v6 = *v5;
        }
        ++v6;
        if (v4 >= v33)
          break;
        v5 = v18;
      }
      while ((unint64_t)v18 < a3);
      v39 = v6;
    }
LABEL_44:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v39, &v38, &v37);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 4;
  v30 = a1;
  v29 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != __src || &__src[16 * v11] <= a4)
        memmove(a4, __src, 16 * v11);
      v18 = &a4[16 * v11];
      v28 = v18;
      v30 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        v19 = (char *)(a3 - 16);
        v20 = v5;
        do
        {
          v27 = v5;
          v21 = v19 + 16;
          v20 -= 16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v22 = String.count.getter();
          v23 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23 >= v22)
          {
            v28 = v18 - 16;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v20 = v27;
            v18 -= 16;
          }
          else
          {
            if (v21 != v27 || v19 >= v27)
              *(_OWORD *)v19 = *(_OWORD *)v20;
            v30 = v20;
          }
          if (v20 <= a1)
            break;
          v19 -= 16;
          v5 = v20;
        }
        while (v18 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -15)
  {
    if (a4 != a1 || &a1[16 * v8] <= a4)
      memmove(a4, a1, 16 * v8);
    v12 = &a4[16 * v8];
    v28 = v12;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      v13 = a4;
      v14 = a1;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v15 = String.count.getter();
        v16 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16 >= v15)
        {
          if (v14 != v13)
            *(_OWORD *)v14 = *(_OWORD *)v13;
          v13 += 16;
          v29 = v13;
          v17 = v5;
        }
        else
        {
          v17 = v5 + 16;
          if (v14 < v5 || v14 >= v17 || v14 != v5)
            *(_OWORD *)v14 = *(_OWORD *)v5;
        }
        v14 += 16;
        if (v13 >= v12)
          break;
        v5 = v17;
      }
      while ((unint64_t)v17 < a3);
      v30 = v14;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter();
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, v19);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.modify in conformance SRSmartRepliesCaptioner;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.modify in conformance SRSmartRepliesCaptioner;
}

void protocol witness for SRSmartRepliesCaptioning.preferredLanguageCode.modify in conformance SRSmartRepliesCaptioner(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x24957E42C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x24957E42C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

int64_t *specialized Sequence._copyContents(initializing:)(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64_t *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  v6 = a5 - a4;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1)
      goto LABEL_7;
    if (v5 == a5)
    {
      a3 = 1;
      v5 = a5;
      goto LABEL_7;
    }
    v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 >= ~a4 + a5)
      v7 = ~a4 + a5;
    v8 = v7 + 1;
    if (v8 >= 5)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v13 = v5 + v8 - v11;
      v10 = &a2[v8 - v11];
      v9 = v12 + 2;
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_247655FB0);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 2;
      v10 = a2;
    }
    v17 = v10 + 1;
    while (v5 < a5)
    {
      v18 = v5 + 1;
      *v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Dictionary.Values.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
    return outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * result, a4);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v17 = result + 40;
  v18 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain();
      v11 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
      v13 = MEMORY[0x24957DDA8](v10, v9, 28261, 0xE200000000000000, v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
    v15 = *(_QWORD *)(v5 + 16);
    v14 = *(_QWORD *)(v5 + 24);
    if (v15 >= v14 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    *(_QWORD *)(v5 + 16) = v15 + 1;
    v16 = v5 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v10;
    *(_QWORD *)(v16 + 40) = v9;
    v3 = v17;
    v1 = v18;
  }
  while (v4 + v2);
  return v5;
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::Int *i;
  Swift::Int v9;
  Swift::Int v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (Swift::Int *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = specialized Set._Variant.insert(_:)(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v22 = result + 32;
    v20 = a2 + 7;
    v21 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      v23 = v5;
      while (1)
      {
        if (v4 == v23)
          goto LABEL_34;
        v6 = v4++;
        v7 = a2[2];
        if (!v7)
          goto LABEL_7;
        v8 = (uint64_t *)(v22 + 16 * v6);
        v9 = *v8;
        v10 = v8[1];
        if (a2[4] == *v8 && a2[5] == v10)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          break;
        if (v7 != 1)
        {
          v12 = v20;
          v13 = 1;
          while (1)
          {
            v14 = v13 + 1;
            if (__OFADD__(v13, 1))
              break;
            if (*(v12 - 1) == v9 && *v12 == v10)
              goto LABEL_25;
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) != 0)
              goto LABEL_25;
            v12 += 2;
            ++v13;
            if (v14 == v7)
              goto LABEL_7;
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        if (v4 == v2)
          return v21;
      }
LABEL_25:
      swift_bridgeObjectRetain();
      v16 = v21;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v16 = v21;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v21;
      }
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v21 = v16;
      v19 = v16 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v9;
      *(_QWORD *)(v19 + 40) = v10;
      if (v4 == v2)
        return v21;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  char v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x24957E42C](v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        String.tokens()();
        v7 = static OVSResolver.containsOVS(in:localeIdentifier:)();
        swift_bridgeObjectRelease();
        if ((v7 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v3;
        if (v6 == v2)
          return v9;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  id v7;
  char v8;
  id v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_16:
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v5 = (id)MEMORY[0x24957E42C](v3, a1);
          v6 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_13:
            __break(1u);
            return v11;
          }
        }
        else
        {
          if (v3 >= *(_QWORD *)(v4 + 16))
          {
            __break(1u);
            goto LABEL_16;
          }
          v5 = *(id *)(a1 + 8 * v3 + 32);
          v6 = v3 + 1;
          if (__OFADD__(v3, 1))
            goto LABEL_13;
        }
        v7 = v5;
        v8 = specialized Set._Variant.insert(_:)(&v10, v7);

        if ((v8 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
          return v11;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  id v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v45 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v37 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v37 - v11;
  v47 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_28;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v13)
  {
    while (1)
    {
      v37 = v2;
      v2 = 0;
      v14 = a1 & 0xC000000000000001;
      v46 = a1 & 0xFFFFFFFFFFFFFF8;
      v43 = v13;
      v44 = a1;
      v39 = v4;
      v42 = a1 & 0xC000000000000001;
      while (v14)
      {
        v15 = (id)MEMORY[0x24957E42C](v2, a1);
LABEL_9:
        v16 = v15;
        v17 = v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_27;
        if ((EKEvent.looksLikeAFlight.getter() & 1) != 0)
        {
          v18 = objc_msgSend(v16, sel_startDate);
          if (v18)
          {
            v19 = v18;
            v20 = v41;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            v21 = v45;
            v22 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
            v22(v12, v20, v4);
            v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
            v23(v12, 0, 1, v4);
            v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
            if (v24(v12, 1, v4) != 1)
            {
              outlined destroy of Date?((uint64_t)v12);
              v25 = objc_msgSend(v16, sel_endDate);
              if (v25)
              {
                v26 = v25;
                v27 = v41;
                static Date._unconditionallyBridgeFromObjectiveC(_:)();

                v28 = v40;
                v29 = v27;
                v4 = v39;
                v22(v40, v29, v39);
                v23(v28, 0, 1, v4);
                if (v24(v28, 1, v4) != 1)
                {
                  v30 = v38;
                  v22(v38, v28, v4);
                  v31 = v41;
                  Date.init()();
                  v32 = static Date.> infix(_:_:)();
                  v33 = *(void (**)(char *, uint64_t))(v45 + 8);
                  v34 = v31;
                  v4 = v39;
                  v33(v34, v39);
                  v33(v30, v4);
                  if ((v32 & 1) != 0)
                  {
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
LABEL_23:
                    v13 = v43;
                    a1 = v44;
                    v14 = v42;
                    goto LABEL_5;
                  }
LABEL_22:

                  goto LABEL_23;
                }
              }
              else
              {
                v28 = v40;
                v23(v40, 1, 1, v4);
              }
              v35 = (uint64_t)v28;
LABEL_21:
              outlined destroy of Date?(v35);
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v12, 1, 1, v4);
          }
          v35 = (uint64_t)v12;
          goto LABEL_21;
        }

LABEL_5:
        ++v2;
        if (v17 == v13)
          return v47;
      }
      if (v2 < *(_QWORD *)(v46 + 16))
        break;
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13)
        return MEMORY[0x24BEE4AF8];
    }
    v15 = *(id *)(a1 + 8 * v2 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SRSmartRepliesCaptioner.simpleCaptions(for:onComplete:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  int64_t v4;
  _QWORD *v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t inited;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  objc_class *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  id v43;
  id v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  objc_class *v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79[3];
  objc_super v80;
  unint64_t v81;

  v69 = a4;
  v68 = a3;
  v7 = (_QWORD *)type metadata accessor for Locale();
  v72 = *(v7 - 1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (objc_class *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_247656880;
  v75 = a1;
  v11 = objc_msgSend(a1, sel_title);
  v76 = v7;
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v15;
  v16 = objc_msgSend(v75, sel_summary);
  v67 = v9;
  if (v16)
  {
    v17 = v16;
    v18 = (objc_class *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  *(_QWORD *)(inited + 48) = v18;
  *(_QWORD *)(inited + 56) = v20;
  v21 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    swift_bridgeObjectRetain();
    v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v24 = *(_QWORD *)(v22 + 16);
    v23 = *(_QWORD *)(v22 + 24);
    v4 = v24 + 1;
    if (v24 >= v23 >> 1)
      goto LABEL_86;
    goto LABEL_9;
  }
  v22 = MEMORY[0x24BEE4AF8];
  if (v20)
    goto LABEL_12;
LABEL_17:
  swift_release();
  v79[0] = v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v29 = BidirectionalCollection<>.joined(separator:)();
  v31 = v30;
  swift_bridgeObjectRelease();
  if ((SRSmartRepliesCaptioner.languageIsAppropriateForTextCaptioning(string:)() & 1) == 0
    || (LOBYTE(v79[0]) = 2,
        v13 = specialized StringRake.rankedKeywords(from:style:maxCount:)(v29, v31, (unsigned __int8 *)v79, 10),
        v32 = swift_bridgeObjectRelease(),
        (v20 = *(_QWORD *)(v13 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    return v68(0);
  }
  v81 = v21;
  v18 = (objc_class *)a2;
  v70 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a2) + 0x70))(v32);
  v71 = v33;
  if (!v33)
  {
    v18 = v67;
    static Locale.current.getter();
    v70 = Locale.identifier.getter();
    v71 = v34;
    (*(void (**)(objc_class *, id))(v72 + 8))(v18, v76);
  }
  v22 = 0;
  a2 = v13 + 32;
  v72 = v13 + 32;
  v73 = v20;
  v74 = v13;
  do
  {
    v23 = *(_QWORD *)(v13 + 16);
    if (v22 >= v23)
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v35 = (uint64_t *)(a2 + 16 * v22);
    v15 = *v35;
    v21 = v35[1];
    v36 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0)
      v36 = v15 & 0xFFFFFFFFFFFFLL;
    if (v36)
    {
      swift_bridgeObjectRetain();
      v37 = objc_msgSend(v75, sel_siteName);
      if (v37)
      {
        v38 = v37;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v24 = v40;

        v79[0] = v39;
        v79[1] = v24;
        v77 = v15;
        v78 = v21;
        lazy protocol witness table accessor for type String and conformance String();
        v18 = (objc_class *)v79;
        LOBYTE(v38) = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
      }
      v18 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v41 = (char *)objc_allocWithZone(v18);
      v42 = &v41[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
      *(_QWORD *)v42 = v15;
      *((_QWORD *)v42 + 1) = v21;
      *(_QWORD *)&v41[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 4;
      v80.receiver = v41;
      v80.super_class = v18;
      swift_bridgeObjectRetain();
      v76 = objc_msgSendSuper2(&v80, sel_init);
      v20 = v81;
      if (v81 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v13 = _CocoaArrayWrapper.endIndex.getter();
        if (v13)
          goto LABEL_32;
      }
      else
      {
        v13 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v13)
        {
LABEL_32:
          a2 = v20 & 0xC000000000000001;
          if ((v20 & 0xC000000000000001) != 0)
            v43 = (id)MEMORY[0x24957E42C](0, v20);
          else
            v43 = *(id *)(v20 + 32);
          v4 = (int64_t)v43;
          v24 = static NSObject.== infix(_:_:)();

          if ((v24 & 1) != 0)
          {
LABEL_35:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();

            v20 = v73;
            v13 = v74;
            a2 = v72;
            goto LABEL_23;
          }
          if (v13 != 1)
          {
            if (a2)
            {
              v24 = MEMORY[0x24957E42C](1, v20);
              v4 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v4 & 1) != 0)
                goto LABEL_35;
              if (v13 != 2)
              {
                v4 = 2;
                do
                {
                  v45 = MEMORY[0x24957E42C](v4, v20);
                  v46 = v4 + 1;
                  if (__OFADD__(v4, 1))
                    goto LABEL_84;
                  v24 = v45;
                  a2 = static NSObject.== infix(_:_:)();
                  swift_unknownObjectRelease();
                  if ((a2 & 1) != 0)
                    goto LABEL_35;
                  ++v4;
                }
                while (v46 != v13);
              }
            }
            else
            {
              v24 = (unint64_t)*(id *)(v20 + 40);
              v4 = static NSObject.== infix(_:_:)();

              if ((v4 & 1) != 0)
                goto LABEL_35;
              if (v13 != 2)
              {
                a2 = 6;
                while (1)
                {
                  v23 = a2 - 4;
                  v47 = a2 - 3;
                  if (__OFADD__(a2 - 4, 1))
                    break;
                  v24 = (unint64_t)*(id *)(v20 + 8 * a2);
                  v4 = static NSObject.== infix(_:_:)();

                  if ((v4 & 1) != 0)
                    goto LABEL_35;
                  ++a2;
                  if (v47 == v13)
                    goto LABEL_37;
                }
LABEL_85:
                __break(1u);
LABEL_86:
                v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v4, 1, (_QWORD *)v22);
LABEL_9:
                *(_QWORD *)(v22 + 16) = v4;
                v25 = v22 + 16 * v24;
                *(_QWORD *)(v25 + 32) = v13;
                *(_QWORD *)(v25 + 40) = v15;
                if (!v20)
                  goto LABEL_17;
LABEL_12:
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, (_QWORD *)v22);
                v27 = *(_QWORD *)(v22 + 16);
                v26 = *(_QWORD *)(v22 + 24);
                if (v27 >= v26 >> 1)
                  v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, (_QWORD *)v22);
                *(_QWORD *)(v22 + 16) = v27 + 1;
                v28 = v22 + 16 * v27;
                *(_QWORD *)(v28 + 32) = v18;
                *(_QWORD *)(v28 + 40) = v20;
                goto LABEL_17;
              }
            }
          }
        }
      }
LABEL_37:
      swift_bridgeObjectRelease_n();
      v18 = (objc_class *)String.tokens()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v24 = static OVSResolver.containsOVS(in:localeIdentifier:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v74;
      a2 = v72;
      if ((v24 & 1) != 0)
      {

        v20 = v73;
      }
      else
      {
        v44 = v76;
        v18 = (objc_class *)&v81;
        MEMORY[0x24957E0E4]();
        if (*(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        v20 = v73;
      }
    }
LABEL_23:
    ++v22;
  }
  while (v22 != v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v48 = v81;
  v49 = v81 >> 62;
  if (!(v81 >> 62))
  {
    if (*(uint64_t *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2)
      v50 = 2;
    else
      v50 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_66;
  }
  if ((v81 & 0x8000000000000000) != 0)
    v54 = v81;
  else
    v54 = v81 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n();
  v53 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v55 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v55 < 0)
  {
    __break(1u);
    goto LABEL_92;
  }
  if (v53 >= 2)
    v64 = 2;
  else
    v64 = v53;
  if (v53 >= 0)
    v50 = v64;
  else
    v50 = 2;
  swift_bridgeObjectRetain();
  v65 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v65 >= v50)
  {
LABEL_66:
    if ((v48 & 0xC000000000000001) != 0 && v50)
    {
      type metadata accessor for SRSmartRepliesCaption();
      v51 = 0;
      do
      {
        v52 = v51 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v51);
        v51 = v52;
      }
      while (v50 != v52);
    }
    if (v49)
    {
      swift_bridgeObjectRetain();
      v54 = _CocoaArrayWrapper.subscript.getter();
      v55 = v60;
      v53 = v61;
      v22 = v62;
      swift_bridgeObjectRelease_n();
      if ((v22 & 1) != 0)
        goto LABEL_72;
    }
    else
    {
      v53 = 0;
      v54 = v48 & 0xFFFFFFFFFFFFFF8;
      v55 = (v48 & 0xFFFFFFFFFFFFFF8) + 32;
      v22 = (2 * v50) | 1;
      if ((v22 & 1) != 0)
      {
LABEL_72:
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v56 = swift_dynamicCastClass();
        if (!v56)
        {
          swift_unknownObjectRelease();
          v56 = MEMORY[0x24BEE4AF8];
        }
        v57 = *(_QWORD *)(v56 + 16);
        swift_release();
        if (__OFSUB__(v22 >> 1, v53))
        {
LABEL_92:
          __break(1u);
        }
        else if (v57 == (v22 >> 1) - v53)
        {
          v58 = swift_dynamicCastClass();
          if (!v58)
          {
            swift_unknownObjectRelease();
            v58 = MEMORY[0x24BEE4AF8];
          }
          goto LABEL_82;
        }
        swift_unknownObjectRelease();
LABEL_81:
        v58 = specialized _copyCollectionToContiguousArray<A>(_:)(v54, v55, v53, v22);
LABEL_82:
        swift_unknownObjectRelease();
        v79[0] = v58;
        specialized MutableCollection<>.sort(by:)(v79, (void (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
        swift_unknownObjectRelease();
        v63 = v79[0];
        swift_bridgeObjectRelease();
        v68(v63);
        return swift_release();
      }
    }
    swift_unknownObjectRetain();
    goto LABEL_81;
  }
  __break(1u);
  return result;
}

uint64_t specialized SRSmartRepliesCaptioner.mostSalientNouns(for:properNouns:text:)(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  Swift::String v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t countAndFlagsBits;
  _QWORD *v30;
  double v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char v58;
  char *v59;
  char v60;
  char v61;
  Swift::Bool v62;
  Swift::String v63;
  _QWORD *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char isUniquelyReferenced_nonNull_native;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  double v79;
  _QWORD *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t result;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123[4];
  _QWORD *v124;

  v112 = type metadata accessor for Unicode.Scalar.Properties();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8](v112);
  v110 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = a1;
  v114 = a1[2];
  if (!v114)
    return 0;
  v9 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v9 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v9)
    return 0;
  v119 = a2;
  v10 = String.properNouns()();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + 40;
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_bridgeObjectRetain();
      v14 = String.lemmatized()();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      v16 = v13[2];
      v15 = v13[3];
      if (v16 >= v15 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
      v12 += 16;
      v13[2] = v16 + 1;
      *(Swift::String *)&v13[2 * v16 + 4] = v14;
      --v11;
    }
    while (v11);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v113 = v13;
  swift_bridgeObjectRelease();
  v108 = a3;
  v109 = a4;
  v17 = String.nounLikeTokens(includePronouns:)();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = v17 + 40;
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_bridgeObjectRetain();
      v21 = String.lemmatized()();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      v23 = v20[2];
      v22 = v20[3];
      if (v23 >= v22 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
      v19 += 16;
      v20[2] = v23 + 1;
      *(Swift::String *)&v20[2 * v23 + 4] = v21;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  v24 = v119;
  v123[0] = (uint64_t)v119;
  swift_bridgeObjectRetain();
  v25 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v25);
  v26 = (_QWORD *)v123[0];
  v124 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v27 = v26[2];
  if (!v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    countAndFlagsBits = 0;
LABEL_82:
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
LABEL_113:
      swift_once();
    v81 = type metadata accessor for Logger();
    __swift_project_value_buffer(v81, (uint64_t)static Logger.standard);
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc();
      v85 = (_QWORD *)swift_slowAlloc();
      v123[0] = (uint64_t)v85;
      *(_DWORD *)v84 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v86 = Dictionary.description.getter();
      v88 = v87;
      swift_bridgeObjectRelease();
      v122 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v82, v83, "Ranked nouns to scores: %s", v84, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v85, -1, -1);
      MEMORY[0x24957ECC0](v84, -1, -1);
    }

    swift_beginAccess();
    v89 = (uint64_t)v124;
    swift_bridgeObjectRetain_n();
    v90 = specialized _copyCollectionToContiguousArray<A>(_:)(v89);
    swift_bridgeObjectRelease();
    v122 = v90;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v122, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (countAndFlagsBits)
      goto LABEL_118;
    swift_bridgeObjectRelease();
    v91 = (uint64_t)v122;
    v92 = v122[2];
    if (v92)
    {
      swift_retain();
      v93 = (double *)(v91 + 48);
      v94 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if (*v93 > 3.0)
        {
          v97 = *((_QWORD *)v93 - 2);
          v96 = *((_QWORD *)v93 - 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94[2] + 1, 1, v94);
          v99 = v94[2];
          v98 = v94[3];
          if (v99 >= v98 >> 1)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v98 > 1), v99 + 1, 1, v94);
          v94[2] = v99 + 1;
          v95 = &v94[2 * v99];
          v95[4] = v97;
          v95[5] = v96;
        }
        v93 += 3;
        --v92;
      }
      while (v92);
      swift_release();
    }
    else
    {
      v94 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_release();
    v100 = v94[2];
    if (v100)
    {
      if (v100 >= 2)
        v101 = 2;
      else
        v101 = v94[2];
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v102 = swift_dynamicCastClass();
      if (!v102)
      {
        swift_bridgeObjectRelease();
        v102 = MEMORY[0x24BEE4AF8];
      }
      v103 = *(_QWORD *)(v102 + 16);
      swift_release();
      if (v103 == v101)
      {
        v104 = swift_dynamicCastClass();
        if (!v104)
        {
          swift_bridgeObjectRelease();
          v104 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v104 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v94, (uint64_t)(v94 + 4), 0, (2 * v101) | 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v104;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v28 = 0;
  countAndFlagsBits = 0;
  v106 = v26;
  v30 = v26 + 4;
  v31 = (double)v114;
  v107 = v24 + 7;
  v117 = v30;
  v118 = v27;
  while (1)
  {
    v32 = &v30[2 * v28];
    v34 = *v32;
    v33 = v32[1];
    v35 = HIBYTE(v33) & 0xF;
    if ((v33 & 0x2000000000000000) == 0)
      v35 = v34 & 0xFFFFFFFFFFFFLL;
    if (!v35)
      goto LABEL_26;
    swift_bridgeObjectRetain();
    v36 = String.subscript.getter();
    v38 = v37;
    if (String.count.getter() <= 2 && !String.looksLikeAnAcronym()())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    v120 = v36;
    v121 = countAndFlagsBits;
    v39 = String.lemmatized()();
    countAndFlagsBits = v39._countAndFlagsBits;
    v40 = v24[2];
    if (v40)
    {
      v41 = v24[4] == v34 && v24[5] == v33;
      if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_72:
        swift_bridgeObjectRelease();
        v66 = swift_bridgeObjectRetain();
        countAndFlagsBits = v121;
        v67 = specialized _ArrayProtocol.filter(_:)(v66, v39._countAndFlagsBits, (uint64_t)v39._object);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68 = *(_QWORD *)(v67 + 16);
        swift_bridgeObjectRelease();
        v69 = v124;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v123[0] = (uint64_t)v69;
        v72 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v33);
        v73 = v69[2];
        v74 = (v71 & 1) == 0;
        v75 = v73 + v74;
        if (__OFADD__(v73, v74))
          goto LABEL_111;
        v76 = v71;
        if (v69[3] >= v75)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v75, isUniquelyReferenced_nonNull_native);
          v77 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v33);
          if ((v76 & 1) != (v78 & 1))
            goto LABEL_117;
          v72 = v77;
        }
        v79 = (double)v68 + 5.5;
        v80 = (_QWORD *)v123[0];
        if ((v76 & 1) != 0)
        {
          *(double *)(*(_QWORD *)(v123[0] + 56) + 8 * v72) = v79;
        }
        else
        {
          specialized _NativeDictionary._insert(at:key:value:)(v72, v34, v33, (_QWORD *)v123[0], v79);
          swift_bridgeObjectRetain();
        }
        v124 = v80;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v119;
        goto LABEL_25;
      }
      v116 = v38;
      if (v40 != 1)
      {
        v42 = v107;
        v43 = 1;
        while (1)
        {
          v44 = v43 + 1;
          if (__OFADD__(v43, 1))
            break;
          v45 = *(v42 - 1) == v34 && *v42 == v33;
          if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_72;
          v42 += 2;
          ++v43;
          if (v44 == v40)
            goto LABEL_49;
        }
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
    }
    else
    {
      v116 = v38;
    }
LABEL_49:
    v46 = swift_bridgeObjectRetain();
    countAndFlagsBits = v121;
    v47 = specialized _ArrayProtocol.filter(_:)(v46, v39._countAndFlagsBits, (uint64_t)v39._object);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = *(_QWORD *)(v47 + 16);
    swift_bridgeObjectRelease();
    v49 = specialized Collection<>.firstIndex(of:)(v34, v33, v115);
    if ((v50 & 1) != 0)
      v51 = 0;
    else
      v51 = v49;
    v52 = __OFSUB__(v114, v51);
    v53 = v114 - v51;
    if (v52)
      goto LABEL_112;
    v54 = (double)v53 / v31 * 1.5 + (double)v48;
    v55 = v120;
    v56 = v116;
    if ((Character._isSingleScalar.getter() & 1) != 0)
      break;
LABEL_56:
    if ((Character._isUppercased.getter() & 1) == 0)
      goto LABEL_62;
    if ((Character._isSingleScalar.getter() & 1) == 0)
      goto LABEL_61;
    if ((specialized Collection.first.getter(v55, v56) & 0x100000000) != 0)
      goto LABEL_116;
    v59 = v110;
    Unicode.Scalar.properties.getter();
    v60 = Unicode.Scalar.Properties.isCased.getter();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v59, v112);
    if ((v60 & 1) == 0)
    {
LABEL_61:
      if ((Character._isUppercased.getter() & 1) != 0 && (Character._isLowercased.getter() & 1) != 0)
      {
LABEL_62:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
    }
LABEL_63:
    v61 = Character.isNumber.getter();
    swift_bridgeObjectRelease();
    if ((v61 & 1) == 0)
    {
      v62 = String.looksLikeAnAcronym()();
      v24 = v119;
      if (!v62)
      {
        v63._countAndFlagsBits = v34;
        v63._object = (void *)v33;
        if (!String.hasPrefix(_:)(v63))
          v54 = v54 + 2.0;
      }
      goto LABEL_69;
    }
LABEL_64:
    v24 = v119;
LABEL_69:
    if (String.looksLikeAnAcronym()())
      v54 = v54 + 2.0;
    v64 = v124;
    v65 = swift_isUniquelyReferenced_nonNull_native();
    v123[0] = (uint64_t)v64;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, v33, v65, v54);
    v124 = (_QWORD *)v123[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_25:
    v30 = v117;
    v27 = v118;
LABEL_26:
    if (++v28 == v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_82;
    }
  }
  if ((specialized Collection.first.getter(v55, v56) & 0x100000000) == 0)
  {
    v57 = v110;
    Unicode.Scalar.properties.getter();
    v58 = Unicode.Scalar.Properties.isUppercase.getter();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v57, v112);
    if ((v58 & 1) != 0)
      goto LABEL_63;
    goto LABEL_56;
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_118:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized SRSmartRepliesCaptioner.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:)(uint64_t a1, unint64_t a2, int a3, char a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v32;
  unint64_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  Swift::String_optional v68;
  uint64_t countAndFlagsBits;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  objc_class *v84;
  char *v85;
  unint64_t *v86;
  unint64_t v87;
  objc_class *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char v96;
  objc_class *v97;
  char *v98;
  char *v99;
  id v100;
  unint64_t v101;
  _QWORD *v102;
  BOOL v103;
  uint64_t inited;
  _QWORD *v105;
  uint64_t v106;
  objc_class *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  objc_class *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  Class isa;
  uint64_t (*v129)(char *, uint64_t);
  char *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  id v134;
  void *v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  unint64_t v145;
  Class v146;
  const void *i;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (**v170)(_QWORD, Class);
  unint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  _QWORD *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  objc_super v182;
  objc_super v183;
  objc_super v184;
  objc_super v185;
  uint64_t v186;
  unint64_t v187;
  objc_super v188;
  unint64_t v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  v157 = a3;
  v181 = type metadata accessor for CharacterSet();
  v180 = *(_QWORD *)(v181 - 8);
  MEMORY[0x24BDAC7A8](v181);
  v179 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Locale();
  v151 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152);
  v150 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v153 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v148 - v18;
  static DispatchTime.now()();
  v155 = a1;
  v156 = a2;
  v178 = a5;
  if ((SRSmartRepliesCaptioner.languageIsAppropriateForTextCaptioning(string:)() & 1) == 0)
  {
    (*(void (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  }
  v170 = (void (**)(_QWORD, Class))a6;
  v175 = v19;
  v174 = v15;
  v149 = v14;
  if ((a4 & 1) != 0)
  {
    v20 = String.businessRelevantEntities()();
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v186 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
      v22 = v186;
      lazy protocol witness table accessor for type String and conformance String();
      v181 = v20;
      v23 = (unint64_t *)(v20 + 40);
      do
      {
        v24 = *v23;
        v190 = (char *)*(v23 - 1);
        v191 = v24;
        v25 = StringProtocol.localizedLowercase.getter();
        v27 = v26;
        v186 = v22;
        v29 = *(_QWORD *)(v22 + 16);
        v28 = *(_QWORD *)(v22 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v22 = v186;
        }
        v23 += 2;
        *(_QWORD *)(v22 + 16) = v29 + 1;
        v30 = v22 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      a6 = (uint64_t)v170;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v190 = (char *)MEMORY[0x24BEE4B08];
    v119 = swift_bridgeObjectRetain();
    v120 = specialized _ArrayProtocol.filter(_:)(v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v121 = *(_QWORD *)(v120 + 16);
    if (v121)
    {
      v190 = (char *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v122 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v181 = v120;
      v123 = (uint64_t *)(v120 + 40);
      do
      {
        v125 = *(v123 - 1);
        v124 = *v123;
        v126 = (char *)objc_allocWithZone(v122);
        v127 = &v126[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *(_QWORD *)v127 = v125;
        *((_QWORD *)v127 + 1) = v124;
        *(_QWORD *)&v126[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
        v182.receiver = v126;
        v182.super_class = v122;
        swift_bridgeObjectRetain();
        objc_msgSendSuper2(&v182, sel_init);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v123 += 2;
        --v121;
      }
      while (v121);
      swift_bridgeObjectRelease();
      a6 = (uint64_t)v170;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for SRSmartRepliesCaption();
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a6 + 16))(a6, isa);
    swift_bridgeObjectRelease();

    v129 = *(uint64_t (**)(char *, uint64_t))(v174 + 8);
    v130 = v175;
    return v129(v130, v149);
  }
  v32 = String.trimMessageGreeting()();
  object = *(_QWORD *)(String.tokens()() + 16);
  swift_bridgeObjectRelease();
  LOBYTE(v190) = 0;
  v34 = specialized static ExtractiveTextSummarizer.summarize(text:summarizationStrategyType:topN:inLogicalOrder:)(v32._countAndFlagsBits, (unint64_t)v32._object, (unsigned __int8 *)&v190);
  swift_bridgeObjectRelease();
  v159 = *(_QWORD *)(v34 + 16);
  if (v159)
  {
    v189 = MEMORY[0x24BEE4AF8];
    v158 = v34 + 32;
    v160 = v34;
    swift_bridgeObjectRetain();
    v35 = v160;
    v36 = 0;
    v37 = 0;
    v154 = xmmword_247656500;
    do
    {
      if (v36 >= *(_QWORD *)(v35 + 16))
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      v164 = v36;
      v38 = (uint64_t *)(v158 + 16 * v36);
      v39 = *v38;
      v6 = v38[1];
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 9)
        goto LABEL_12;
      LOBYTE(v190) = 1;
      object = specialized StringRake.rankedKeywords(from:style:maxCount:)(v39, v6, (unsigned __int8 *)&v190, 10);
      LOBYTE(v190) = 2;
      v40 = (_QWORD *)specialized StringRake.rankedKeywords(from:style:maxCount:)(v39, v6, (unsigned __int8 *)&v190, 10);
      v41 = v39;
      if ((v157 & 1) != 0)
      {
        v166 = v39;
        v42 = specialized SRSmartRepliesCaptioner.mostSalientNouns(for:properNouns:text:)((_QWORD *)object, v40, v155, v156);
        swift_bridgeObjectRelease();
        if (v42)
        {
          v162 = v40;
          v190 = (char *)MEMORY[0x24BEE4B08];
          v43 = swift_bridgeObjectRetain();
          v44 = specialized _ArrayProtocol.filter(_:)(v43);
          swift_bridgeObjectRelease();
          object = (unint64_t)v190;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v169 = *(_QWORD *)(v44 + 16);
          if (!v169)
            goto LABEL_97;
          object = 0;
          v168 = v44 + 32;
          v148 = v162 + 9;
          v163 = v6;
          v167 = v44;
          while (1)
          {
            if (object >= *(_QWORD *)(v44 + 16))
              goto LABEL_129;
            v176 = object;
            v45 = (unint64_t *)(v168 + 16 * object);
            v46 = *v45;
            v47 = v45[1];
            swift_bridgeObjectRetain();
            v48 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
            v50 = v49;
            swift_bridgeObjectRetain();
            a6 = MEMORY[0x24957DDA8](v46, v47, 28261, 0xE200000000000000, v48, v50);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((a6 & 1) != 0)
              break;
            v51 = v162;
            v52 = v162[2];
            v172 = v46;
            if (v52
              && (v162[4] != v46 || v162[5] != v47)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
              && v52 != 1
              && (v51[6] != v46 || v51[7] != v47)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
              && v52 != 2)
            {
              v102 = v148;
              object = 2;
              while (1)
              {
                a6 = object + 1;
                if (__OFADD__(object, 1))
                  break;
                v103 = *(v102 - 1) == v172 && *v102 == v47;
                if (!v103 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  v102 += 2;
                  ++object;
                  if (a6 != v52)
                    continue;
                }
                goto LABEL_29;
              }
LABEL_131:
              __break(1u);
LABEL_132:
              swift_bridgeObjectRetain();
              v133 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_117;
            }
LABEL_29:
            v53 = v172;
            v190 = (char *)String.nounPhrasesContaining(_:isProperNoun:allowConjunctions:)();
            swift_bridgeObjectRetain();
            specialized MutableCollection<>.sort(by:)((uint64_t *)&v190, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
            if (v37)
              goto LABEL_138;
            v171 = v47;
            swift_bridgeObjectRelease();
            v54 = (uint64_t)v190;
            v55 = *((_QWORD *)v190 + 2);
            if (v55)
            {
              swift_retain();
              v56 = (unint64_t *)(v54 + 40);
              v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
              do
              {
                v58 = *v56;
                v190 = (char *)*(v56 - 1);
                v191 = v58;
                swift_bridgeObjectRetain();
                v59 = v179;
                static CharacterSet.punctuationCharacters.getter();
                lazy protocol witness table accessor for type String and conformance String();
                v60 = StringProtocol.trimmingCharacters(in:)();
                v62 = v61;
                (*(void (**)(char *, uint64_t))(v180 + 8))(v59, v181);
                swift_bridgeObjectRelease();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
                v64 = v57[2];
                v63 = v57[3];
                if (v64 >= v63 >> 1)
                  v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v57);
                v56 += 2;
                v57[2] = v64 + 1;
                v65 = &v57[2 * v64];
                v65[4] = v60;
                v65[5] = v62;
                --v55;
              }
              while (v55);
              swift_release();
              v6 = v163;
              v53 = v172;
            }
            swift_release();
            v190 = (char *)MEMORY[0x24BEE4B08];
            v66 = swift_bridgeObjectRetain();
            v67 = (_QWORD *)specialized _ArrayProtocol.filter(_:)(v66);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v177 = (char *)v67[2];
            if (!v177)
            {
              swift_bridgeObjectRelease();
              v88 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
              v89 = (char *)objc_allocWithZone(v88);
              v90 = &v89[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
              v91 = v171;
              *(_QWORD *)v90 = v53;
              *((_QWORD *)v90 + 1) = v91;
              *(_QWORD *)&v89[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
              v183.receiver = v89;
              v183.super_class = v88;
              objc_msgSendSuper2(&v183, sel_init);
              MEMORY[0x24957E0E4]();
              if (*(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v19 = v175;
              v15 = v174;
              goto LABEL_73;
            }
            v165 = 0;
            v68 = String.primaryLanguageTag()();
            if (v68.value._object)
              countAndFlagsBits = v68.value._countAndFlagsBits;
            else
              countAndFlagsBits = 28261;
            if (v68.value._object)
              object = (unint64_t)v68.value._object;
            else
              object = 0xE200000000000000;
            v70 = (char *)v67[4];
            v71 = v67[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v72 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
            v74 = v73;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v173 = v70;
            v75 = v70;
            v76 = countAndFlagsBits;
            v77 = MEMORY[0x24957DDA8](v75, v71, countAndFlagsBits, object, v72, v74);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v77 & 1) != 0)
            {
              v161 = v67;
              swift_bridgeObjectRelease();
              v19 = v175;
              v15 = v174;
              if (v177 == (char *)1)
              {
LABEL_52:
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                v84 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
                v85 = (char *)objc_allocWithZone(v84);
                v86 = (unint64_t *)&v85[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
                v87 = v171;
                *v86 = v172;
                v86[1] = v87;
                *(_QWORD *)&v85[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
                v184.receiver = v85;
                v184.super_class = v84;
                objc_msgSendSuper2(&v184, sel_init);
                MEMORY[0x24957E0E4]();
                v37 = v165;
                v6 = v163;
                if (*(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                goto LABEL_73;
              }
              v78 = v161 + 7;
              v79 = 1;
              while (1)
              {
                v19 = (char *)(v79 + 1);
                if (__OFADD__(v79, 1))
                  goto LABEL_128;
                v6 = *(v78 - 1);
                v71 = *v78;
                swift_bridgeObjectRetain();
                v80 = SRSmartRepliesCaptioner.captionPhraseArbiter.getter();
                v82 = v81;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v83 = MEMORY[0x24957DDA8](v6, v71, v76, object, v80, v82);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v83 & 1) == 0)
                  break;
                swift_bridgeObjectRelease();
                ++v79;
                v78 += 2;
                v103 = v19 == v177;
                v19 = v175;
                v15 = v174;
                if (v103)
                  goto LABEL_52;
              }
              v173 = (char *)v6;
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v92 = v189;
            if (v189 >> 62)
            {
              swift_bridgeObjectRetain_n();
              v93 = _CocoaArrayWrapper.endIndex.getter();
            }
            else
            {
              v93 = *(_QWORD *)((v189 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain_n();
            }
            if (!v93)
            {
LABEL_70:
              swift_bridgeObjectRelease_n();
              v97 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
              v98 = (char *)objc_allocWithZone(v97);
              v99 = &v98[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
              *(_QWORD *)v99 = v173;
              *((_QWORD *)v99 + 1) = v71;
              *(_QWORD *)&v98[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
              v185.receiver = v98;
              v185.super_class = v97;
              v100 = objc_msgSendSuper2(&v185, sel_init);
              MEMORY[0x24957E0E4]();
              if (*(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              v19 = v175;
              v15 = v174;
              v37 = v165;
              v6 = v163;
              goto LABEL_73;
            }
            v172 = v92 & 0xC000000000000001;
            v15 = 4;
            v171 = v92;
            while (1)
            {
              if (v172)
                v94 = (char *)MEMORY[0x24957E42C](v15 - 4, v92);
              else
                v94 = (char *)*(id *)(v92 + 8 * v15);
              v19 = v173;
              if (__OFADD__(v15 - 4, 1))
              {
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
                goto LABEL_130;
              }
              v177 = (char *)(v15 - 3);
              v95 = *(_QWORD *)&v94[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
              object = *(_QWORD *)&v94[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8];
              v190 = (char *)v95;
              v191 = object;
              v186 = (uint64_t)v173;
              v187 = v71;
              v6 = (uint64_t)v94;
              lazy protocol witness table accessor for type String and conformance String();
              if ((StringProtocol.contains<A>(_:)() & 1) != 0)
              {
                swift_bridgeObjectRelease_n();

                goto LABEL_78;
              }
              v190 = v19;
              v191 = v71;
              v186 = v95;
              v187 = object;
              v96 = StringProtocol.contains<A>(_:)();

              if ((v96 & 1) != 0)
                break;
              ++v15;
              v92 = v171;
              if (v177 == (char *)v93)
                goto LABEL_70;
            }
            swift_bridgeObjectRelease_n();
LABEL_78:
            v44 = v167;
            v101 = v176;
            swift_bridgeObjectRelease();
            v19 = v175;
            v15 = v174;
            v37 = v165;
            v6 = v163;
LABEL_74:
            object = v101 + 1;
            a6 = (uint64_t)v170;
            if (object == v169)
            {
LABEL_97:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_12;
            }
          }
          swift_bridgeObjectRelease();
LABEL_73:
          v44 = v167;
          v101 = v176;
          goto LABEL_74;
        }
        swift_bridgeObjectRelease();
LABEL_12:
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v154;
        *(_QWORD *)(inited + 32) = v41;
        *(_QWORD *)(inited + 40) = v6;
        swift_bridgeObjectRelease();
        v105 = v178;
        object = specialized _ArrayProtocol.filter(_:)(inited);

        swift_setDeallocating();
        swift_arrayDestroy();
        v106 = *(_QWORD *)(object + 16);
        if (v106)
        {
          v165 = v37;
          v190 = (char *)MEMORY[0x24BEE4AF8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v107 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
          v177 = (char *)object;
          v108 = (uint64_t *)(object + 40);
          v6 = 1;
          object = (unint64_t)&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
          do
          {
            v110 = *(v108 - 1);
            v109 = *v108;
            v111 = (char *)objc_allocWithZone(v107);
            v112 = &v111[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
            *(_QWORD *)v112 = v110;
            *((_QWORD *)v112 + 1) = v109;
            *(_QWORD *)&v111[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 1;
            v188.receiver = v111;
            v188.super_class = v107;
            swift_bridgeObjectRetain();
            objc_msgSendSuper2(&v188, sel_init);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v108 += 2;
            --v106;
          }
          while (v106);
          v113 = (unint64_t)v190;
          swift_bridgeObjectRelease();
          v19 = v175;
          v15 = v174;
          v37 = v165;
        }
        else
        {
          swift_bridgeObjectRelease();
          v113 = MEMORY[0x24BEE4AF8];
        }
        specialized Array.append<A>(contentsOf:)(v113, (unint64_t *)type metadata accessor for SRSmartRepliesCaption, &lazy protocol witness table cache variable for type [SRSmartRepliesCaption] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesCaption], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
        a6 = (uint64_t)v170;
      }
      v36 = v164 + 1;
      v35 = v160;
    }
    while (v164 + 1 != v159);
    swift_bridgeObjectRelease();
    v114 = v189;
    if ((v189 & 0x8000000000000000) != 0 || (v189 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      v115 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v114, (void (*)(_QWORD))type metadata accessor for SRSmartRepliesCaption, &lazy protocol witness table cache variable for type [SRSmartRepliesCaption] and conformance [A], &demangling cache variable for type metadata for [SRSmartRepliesCaption], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
      swift_bridgeObjectRelease();
    }
    else
    {
      v115 = v189 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    v190 = (char *)v115;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v190, (void (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    if (v37)
      goto LABEL_140;
    swift_bridgeObjectRelease();
    object = (unint64_t)v190;
    swift_bridgeObjectRelease();
    v189 = object;
    v116 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v178) + 0x70);
    v117 = swift_retain();
    v116(v117);
    if (!v118)
    {
      v131 = v150;
      static Locale.current.getter();
      Locale.identifier.getter();
      (*(void (**)(char *, uint64_t))(v151 + 8))(v131, v152);
    }
    swift_retain();
    swift_bridgeObjectRetain();
    v132 = specialized _ArrayProtocol.filter(_:)(object);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v132 >> 62)
      goto LABEL_132;
    v133 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_117:
    a6 = (uint64_t)v170;
    if (v133)
    {
      if (*(_QWORD *)(v160 + 16))
      {
        a6 = *(_QWORD *)(v160 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v6 = (uint64_t)v153;
        if ((object & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)(object + 16))
            goto LABEL_137;
          v134 = *(id *)(object + 32);
LABEL_122:
          v135 = v134;
          swift_release();
          swift_bridgeObjectRetain();

          static DispatchTime.now()();
          v136 = DispatchTime.uptimeNanoseconds.getter();
          v137 = v175;
          v138 = DispatchTime.uptimeNanoseconds.getter();
          if (v136 >= v138)
          {
            v139 = (float)(v136 - v138);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v140 = String.count.getter();
            swift_bridgeObjectRelease();
            v141 = String.count.getter();
            swift_bridgeObjectRelease();
            v142 = String.count.getter();
            swift_bridgeObjectRelease();
            LOWORD(v190) = 257;
            *((float *)&v190 + 1) = v139;
            v191 = 0;
            v192 = 0xE000000000000000;
            v193 = 0;
            v194 = 0xE000000000000000;
            v195 = 0;
            v196 = 0xE000000000000000;
            v197 = v140;
            v198 = v141;
            v199 = v142;
            MetricsMessageTopicExtractionResult.sendEvent()();
            v143 = *(void (**)(uint64_t, uint64_t))(v174 + 8);
            v144 = v149;
            v143(v6, v149);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v186 = MEMORY[0x24BEE4B08];
            v145 = swift_bridgeObjectRetain();
            specialized _ArrayProtocol.filter(_:)(v145);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for SRSmartRepliesCaption();
            v146 = Array._bridgeToObjectiveC()().super.isa;
            v170[2](v170, v146);
            swift_bridgeObjectRelease();

            return ((uint64_t (*)(char *, uint64_t))v143)(v137, v144);
          }
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          for (i = v170; ; i = (const void *)a6)
          {
            _Block_release(i);
            swift_release();
            __break(1u);
LABEL_140:
            ;
          }
        }
      }
      else
      {
        __break(1u);
      }
      v134 = (id)MEMORY[0x24957E42C](0, object);
      goto LABEL_122;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
  v129 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v130 = v19;
  return v129(v130, v149);
}

void specialized SRSmartRepliesCaptioner.unifiedImageCaption(for:onComplete:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  id *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;
  uint64_t v40;

  if (!a1)
  {
    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
    return;
  }
  v40 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4)
      goto LABEL_17;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_17;
  }
  if (v4 < 1)
  {
    __break(1u);
LABEL_51:
    __break(1u);
    return;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)(MEMORY[0x24957E42C](i, a1) + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type) == 2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v6 = (id *)(a1 + 32);
    v7 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
    do
    {
      if (*(_QWORD *)((char *)*v6 + v7) == 2)
      {
        v8 = *v6;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v7 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type;
      }
      ++v6;
      --v4;
    }
    while (v4);
  }
LABEL_17:
  swift_bridgeObjectRelease();
  v9 = v40;
  if (v40 < 0 || (v40 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v10 = *(_QWORD *)(v40 + 16);
    swift_retain();
  }
  v37 = a2;
  if (v10)
  {
    if (v10 >= 1)
    {
      v11 = 0;
      v38 = v40 + 32;
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        if ((v9 & 0xC000000000000001) != 0)
        {
          v13 = MEMORY[0x24957E42C](v11++, v9);
          v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
          v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption + 8);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          if (!swift_isUniquelyReferenced_nonNull_native())
            goto LABEL_30;
        }
        else
        {
          v19 = *(_QWORD *)(v38 + 8 * v11++);
          v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption);
          v14 = *v20;
          v15 = v20[1];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_30:
            v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        v17 = v12[2];
        v16 = v12[3];
        if (v17 >= v16 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
        v12[2] = v17 + 1;
        v18 = &v12[2 * v17];
        v18[4] = v14;
        v18[5] = v15;
        if (v11 == v10)
          goto LABEL_32;
      }
    }
    goto LABEL_51;
  }
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_32:
  swift_release_n();
  v21 = v12[2];
  if (v21)
  {
    v22 = v12 + 5;
    v23 = v12[5];
    v24 = v12[4];
    swift_bridgeObjectRetain();
    v25 = MEMORY[0x24BEE4AF8];
    do
    {
      v26 = *(v22 - 1) == v24 && *v22 == v23;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v25 = String.nounLikeTokens(includePronouns:)();
      }
      else
      {
        swift_bridgeObjectRetain();
        v27 = (_QWORD *)String.nounLikeTokens(includePronouns:)();
        swift_bridgeObjectRelease();
        v28 = specialized _ArrayProtocol.filter(_:)(v25, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25 = v28;
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v25 + 16);
    if (v29)
    {
      v40 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v30 = (objc_class *)type metadata accessor for SRSmartRepliesCaption();
      v31 = (uint64_t *)(v25 + 40);
      do
      {
        v33 = *(v31 - 1);
        v32 = *v31;
        v34 = (char *)objc_allocWithZone(v30);
        v35 = &v34[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_caption];
        *(_QWORD *)v35 = v33;
        *((_QWORD *)v35 + 1) = v32;
        *(_QWORD *)&v34[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesCaption_type] = 2;
        v39.receiver = v34;
        v39.super_class = v30;
        swift_bridgeObjectRetain();
        objc_msgSendSuper2(&v39, sel_init);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v31 += 2;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for SRSmartRepliesCaption();
    isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(v37 + 16))(v37, isa);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
  }
}

CGImageRef specialized static SRSmartRepliesCaptioner.resizedCGImage(at:for:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSURL *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v23;
  const __CFURL *v24;
  const __CFURL *v25;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  char v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  const char *v35;
  double v36;
  id v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  double v41;
  uint64_t inited;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  double v48;
  id v49;
  id v50;
  id v51;
  unint64_t v52;
  double v53;
  CGImageRef ThumbnailAtIndex;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char isUniquelyReferenced_nonNull_native;
  const __CFDictionary *isa;
  CGImage *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  _QWORD v66[3];
  double v67[4];
  __int128 v68;
  __int128 v69;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for standard != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.standard);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v66[1] = v11;
    v16 = v15;
    *(_QWORD *)&v68 = v15;
    *(_DWORD *)v14 = 136315138;
    v66[0] = a1;
    lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v67[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_2475DF000, v12, v13, "Attempting to load image at URL: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v16, -1, -1);
    MEMORY[0x24957ECC0](v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  if (a2 == 0.0 && a3 == 0.0)
  {
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      v23 = "Trying to resize image from URL, but it not a valid size";
LABEL_20:
      _os_log_impl(&dword_2475DF000, v20, v21, v23, v22, 2u);
      MEMORY[0x24957ECC0](v22, -1, -1);
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  URL._bridgeToObjectiveC()(v19);
  v25 = v24;
  v20 = CGImageSourceCreateWithURL(v24, 0);

  if (!v20)
  {
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      v23 = "Trying to resize image from URL, the image source was not valid";
      goto LABEL_20;
    }
LABEL_48:
    ThumbnailAtIndex = 0;
    goto LABEL_49;
  }
  v26 = CGImageSourceCopyPropertiesAtIndex((CGImageSourceRef)v20, 0, 0);
  if (!v26
    || (v27 = v26,
        *(_QWORD *)&v68 = 0,
        type metadata accessor for CFStringRef(0),
        lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef), static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(), v27, (v28 = v68) == 0))
  {
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      v35 = "Trying to resize image from URL, but its properties are not valid.";
LABEL_46:
      _os_log_impl(&dword_2475DF000, v32, v33, v35, v34, 2u);
      MEMORY[0x24957ECC0](v34, -1, -1);
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!*(_QWORD *)(v68 + 16))
  {
    v68 = 0u;
    v69 = 0u;
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v29 = (id)*MEMORY[0x24BDD96C8];
  v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
  if ((v31 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v30, (uint64_t)&v68);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }

  if (!*((_QWORD *)&v69 + 1))
    goto LABEL_28;
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v36 = v67[0];
  if (*(_QWORD *)(v28 + 16))
  {
    v37 = (id)*MEMORY[0x24BDD96C0];
    v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37);
    if ((v39 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v28 + 56) + 32 * v38, (uint64_t)&v68);
    }
    else
    {
      v68 = 0u;
      v69 = 0u;
    }

  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v69 + 1))
  {
LABEL_29:
    outlined destroy of Any?((uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_44;
  }
  v40 = MEMORY[0x24BEE50B0];
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_44:
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      v35 = "Trying to resize image from URL, but its height and width properties are not valid";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  v41 = v67[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v43 = inited;
  *(_OWORD *)(inited + 16) = xmmword_247656A20;
  v44 = (void *)*MEMORY[0x24BDD9778];
  v45 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD9778];
  *(_BYTE *)(inited + 40) = 1;
  v46 = (void *)*MEMORY[0x24BDD9788];
  *(_QWORD *)(inited + 64) = v45;
  *(_QWORD *)(inited + 72) = v46;
  *(_BYTE *)(inited + 80) = 1;
  v47 = (void *)*MEMORY[0x24BDD9808];
  *(_QWORD *)(inited + 104) = v45;
  *(_QWORD *)(inited + 112) = v47;
  *(_QWORD *)(inited + 144) = v40;
  if (a2 > a3)
    v48 = a2;
  else
    v48 = a3;
  *(double *)(inited + 120) = v48;
  v49 = v44;
  v50 = v46;
  v51 = v47;
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v43);
  v53 = v36 / a2;
  if (v41 / a3 < v36 / a2)
    v53 = v41 / a3;
  if (v53 > 8.0)
  {
    swift_bridgeObjectRelease();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      v35 = "Trying to resize image from URL, but the source image is not an appropriate size.";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  v56 = (void *)*MEMORY[0x24BDD97F8];
  if (v53 <= 2.0)
  {
    v57 = MEMORY[0x24BEE13C8];
    v58 = 0x4000000000000000;
  }
  else if (v53 < 2.0 || v53 > 4.0)
  {
    v57 = MEMORY[0x24BEE13C8];
    v58 = 0x4020000000000000;
  }
  else
  {
    v57 = MEMORY[0x24BEE13C8];
    v58 = 0x4010000000000000;
  }
  *((_QWORD *)&v69 + 1) = v57;
  *(_QWORD *)&v68 = v58;
  outlined init with take of Any(&v68, v67);
  v59 = v56;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v66[2] = v52;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v59, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex((CGImageSourceRef)v20, 0, isa);

  if (ThumbnailAtIndex)
  {
    v62 = ThumbnailAtIndex;
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc();
      *(_DWORD *)v65 = 134218240;
      *(_QWORD *)&v68 = CGImageGetWidth(v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 12) = 2048;
      *(_QWORD *)&v68 = CGImageGetHeight(v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_2475DF000, v63, v64, "Providing an image from URL at width: %ld, height: %ld", (uint8_t *)v65, 0x16u);
      MEMORY[0x24957ECC0](v65, -1, -1);

    }
    else
    {

      v20 = v62;
    }
  }
LABEL_49:

  return ThumbnailAtIndex;
}

uint64_t partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 32) = v5;
  *v5 = v3;
  v5[1] = closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return SRSmartRepliesCaptioner.captions(imageURLs:)(v2);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  *(_OWORD *)(v4 + 264) = v5;
  *(_OWORD *)(v4 + 280) = v6;
  *(_QWORD *)(v4 + 248) = v2;
  *(_QWORD *)(v4 + 256) = v3;
  return swift_task_switch();
}

uint64_t sub_24760C5D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24760C5F8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_24760C62C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(v0 + 64);
  v7 = *(_OWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 48) = v7;
  *(_OWORD *)(v3 + 64) = v6;
  *(_OWORD *)(v3 + 32) = v4;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized SRSmartRepliesCaptioner.captions(imageURL:onComplete:)(uint64_t a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  CGImageRef v30;
  CGImageRef v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void (*v41)(CGImageRef, uint64_t (*)(), uint64_t);
  CGImage *v42;
  _QWORD v43[2];
  uint64_t v44;
  os_log_t v45;
  _QWORD *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v43 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v43 - v17;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = a3;
  outlined init with copy of Date?(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    _Block_copy(a3);
    outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for URL?);
    a3[2](a3, 0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v8, v9);
    _Block_copy(a3);
    if ((SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()() & 1) != 0)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.standard);
      v47 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v47(v16, v18, v9);
      v48 = v20;
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.default.getter();
      v23 = os_log_type_enabled(v21, v22);
      v46 = a2;
      if (v23)
      {
        v45 = v21;
        v24 = (uint8_t *)swift_slowAlloc();
        v44 = swift_slowAlloc();
        v51 = v44;
        *(_DWORD *)v24 = 136315138;
        v43[1] = v24 + 4;
        lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v25 = dispatch thunk of CustomStringConvertible.description.getter();
        v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v27 = *(void (**)(char *, uint64_t))(v10 + 8);
        v27(v16, v9);
        v21 = v45;
        _os_log_impl(&dword_2475DF000, v45, v22, "Requesting captions for image at URL: %s", v24, 0xCu);
        v28 = v44;
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v28, -1, -1);
        MEMORY[0x24957ECC0](v24, -1, -1);
      }
      else
      {
        v27 = *(void (**)(char *, uint64_t))(v10 + 8);
        v27(v16, v9);
      }

      v30 = specialized static SRSmartRepliesCaptioner.resizedCGImage(at:for:)((uint64_t)v18, 448.0, 448.0);
      if (v30)
      {
        v31 = v30;
        v47(v13, v18, v9);
        v32 = Logger.logObject.getter();
        v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc();
          v48 = swift_slowAlloc();
          v51 = v48;
          *(_DWORD *)v34 = 136315138;
          v47 = (void (*)(char *, char *, uint64_t))(v34 + 4);
          lazy protocol witness table accessor for type NLTagScheme and conformance NLTagScheme((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v35 = dispatch thunk of CustomStringConvertible.description.getter();
          v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v27(v13, v9);
          _os_log_impl(&dword_2475DF000, v32, v33, "Returning captions to for image at URL: %s", v34, 0xCu);
          v37 = v48;
          swift_arrayDestroy();
          MEMORY[0x24957ECC0](v37, -1, -1);
          MEMORY[0x24957ECC0](v34, -1, -1);
        }
        else
        {
          v27(v13, v9);
        }

        v41 = *(void (**)(CGImageRef, uint64_t (*)(), uint64_t))((*MEMORY[0x24BEE4EA0] & *v46)
                                                                                   + 0x120);
        v42 = v31;
        v41(v31, thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()partial apply, v49);

        v27(v18, v9);
      }
      else
      {
        v38 = Logger.logObject.getter();
        v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v40 = 0;
          _os_log_impl(&dword_2475DF000, v38, v39, "Could not form CGImage from data", v40, 2u);
          MEMORY[0x24957ECC0](v40, -1, -1);
        }

        a3[2](a3, 0);
        v27(v18, v9);
      }
    }
    else
    {
      a3[2](a3, 0);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    }
  }
  return swift_release();
}

void specialized SRSmartRepliesCaptioner.captions(image:onComplete:)(void *a1, void *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  UIImage *v12;
  NSData *v13;
  NSData *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t inited;
  unint64_t v20;
  id v21;
  Class isa;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  id v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  if (a1)
  {
    _Block_copy(a3);
    v41 = a1;
    if ((SRSmartRepliesCaptioner.languageIsAppropriateForImageCaptioning()() & 1) != 0)
    {
      CGImageRef.resize(to:)(448.0, 448.0);
      if (v10)
      {
        v40 = v10;
        v11 = objc_allocWithZone(MEMORY[0x24BEBD640]);
        v12 = (UIImage *)objc_msgSend(v11, sel_initWithCGImage_, v40);
        v13 = UIImagePNGRepresentation(v12);
        if (v13)
        {
          v14 = v13;
          v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v16;

          outlined copy of Data._Representation(v15, v17);
          v18 = Data.base64EncodedString(options:)(0x20uLL);
          outlined consume of Data._Representation(v15, v17);
          outlined consume of Data._Representation(v15, v17);

          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_247656880;
          *(_QWORD *)(inited + 32) = 0x656C797473;
          *(_QWORD *)(inited + 40) = 0xE500000000000000;
          *(_QWORD *)(inited + 48) = 0x7061436567616D69;
          *(_QWORD *)(inited + 56) = 0xEF676E696E6F6974;
          *(_QWORD *)(inited + 64) = 0x7461446567616D69;
          *(_QWORD *)(inited + 72) = 0xEF676E6972745361;
          *(Swift::String *)(inited + 80) = v18;
          v20 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
          swift_bridgeObjectRelease();
          v21 = objc_allocWithZone(MEMORY[0x24BE63310]);
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v23 = objc_msgSend(v21, sel_initWithParametersDict_, isa);

          v24 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
          v25 = (_QWORD *)swift_allocObject();
          v25[2] = 0;
          v25[3] = 0;
          v25[4] = v23;
          v25[5] = 0xD000000000000032;
          v25[6] = 0x800000024765BE20;
          v25[7] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()partial apply;
          v25[8] = v9;
          v25[9] = a2;
          v26 = v23;
          swift_retain();
          v27 = a2;
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in SRSmartRepliesCaptioner.captions(image:onComplete:)partial apply, (uint64_t)v25);
          swift_release();

          swift_release();
        }
        else
        {

          if (one-time initialization token for standard != -1)
            swift_once();
          v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)static Logger.standard);
          v37 = Logger.logObject.getter();
          v38 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_2475DF000, v37, v38, "Unable to generate data string from image for captioning", v39, 2u);
            MEMORY[0x24957ECC0](v39, -1, -1);
          }

          a3[2](a3, 0);
          swift_release();

        }
        return;
      }
      if (one-time initialization token for standard != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.standard);
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v35 = 0;
        _os_log_impl(&dword_2475DF000, v33, v34, "Could not resize image provided for captioning", v35, 2u);
        MEMORY[0x24957ECC0](v35, -1, -1);
      }

    }
    a3[2](a3, 0);
    swift_release();

    return;
  }
  _Block_copy(a3);
  if (one-time initialization token for standard != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.standard);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_2475DF000, v29, v30, "No image provided for captioning", v31, 2u);
    MEMORY[0x24957ECC0](v31, -1, -1);
  }

  a3[2](a3, 0);
  swift_release();
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 40);
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  *(_OWORD *)(v4 + 232) = v6;
  *(_QWORD *)(v4 + 224) = v3;
  *(_OWORD *)(v4 + 208) = v5;
  *(_QWORD *)(v4 + 200) = v2;
  return swift_task_switch();
}

uint64_t type metadata accessor for SRSmartRepliesCaptioner()
{
  return objc_opt_self();
}

uint64_t sub_24760D3E8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24760D428(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x78);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.inferredContacts(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(text:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(text:preferBusinessTopics:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(image:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(linkMetadata:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(contactDetail:associatedText:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.unifiedImageCaption(for:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(imageURL:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.captions(imageURLs:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.summaryCaptions(for:withTopicsOnly:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 88))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.normalizedShortCodeMessageText(contactDetail:originalMessageText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.preferredLanguageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.preferredLanguageCode.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.preferredLanguageCode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioning.friendlyCaption(for:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t method lookup function for SRSmartRepliesCaptioner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.preferredLanguageCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.preferredLanguageCode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.preferredLanguageCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.inferredContacts(in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0xD0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v9(a1, a2);
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.friendlyCaption(for:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(linkMetadata:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.summaryCaptions(for:withTopicsOnly:preferBusinessTopics:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.summaryCaptions(for:withTopicsOnly:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(text:preferBusinessTopics:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(text:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.unifiedImageCaption(for:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(imageURL:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(imageURLs:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(image:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SRSmartRepliesCaptioner.captions(contactDetail:associatedText:onComplete:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_24760D7B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SRSmartRepliesCaption]?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SRSmartRepliesCaption]?, Never>);
  return closure #1 in closure #1 in SRSmartRepliesCaptioner.captions(imageURL:)();
}

uint64_t outlined consume of ShortcodeResolutionManager?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ShortcodeResolutionManager?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24760D8AC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of CaptionPhraseResolver?(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SRSmartRepliesCaptioning.inferredContacts(in:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t specialized SRSmartRepliesCaptioner.bestDisplayName(contact:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26;

  v2 = type metadata accessor for PersonNameComponents();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1738]), sel_init);
  PersonNameComponents.init()();
  v7 = objc_msgSend(a1, sel_namePrefix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.namePrefix.setter();
  v8 = objc_msgSend(a1, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.givenName.setter();
  v9 = objc_msgSend(a1, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.middleName.setter();
  v10 = objc_msgSend(a1, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.familyName.setter();
  v11 = objc_msgSend(a1, sel_nameSuffix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.nameSuffix.setter();
  v12 = objc_msgSend(a1, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.nickname.setter();
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v14 = objc_msgSend(v6, sel_stringFromPersonNameComponents_, isa);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  if (v18)
    goto LABEL_4;
  v19 = objc_msgSend(a1, sel_organizationName);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  swift_bridgeObjectRelease();
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
LABEL_4:

  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(a1, sel_organizationName);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v15;
}

uint64_t sub_24760DF88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t outlined copy of CaptionPhraseResolver?(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t type metadata accessor for EKEvent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for EKEvent;
  if (!lazy cache variable for type metadata for EKEvent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EKEvent);
  }
  return result;
}

void one-time initialization function for supportedLanguages()
{
  supportedLanguages._rawValue = &outlined read-only object #0 of one-time initialization function for supportedLanguages;
}

uint64_t RepliesToRobotsParameters.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RepliesToRobotsParameters.rightContext.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t RepliesToRobotsParameters.capitalizedWordsMaximumRatio.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t RepliesToRobotsParameters.isFeatureEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t RepliesToRobotsParameters.triggerContext.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t RepliesToRobotsParameters.useGeneralContext.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t RepliesToRobotsParameters.generalContextWords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RepliesToRobotsParameters.generalLeftContext.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t RepliesToRobotsParameters.leftContext.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t RepliesToRobotsParameters.isInsignificantSender.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t RepliesToRobotsParameters.triggerWords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RepliesToRobotsParameters.shouldRelaxContext.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t RepliesToRobotsParameters.generalRightContext.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t RepliesToRobotsParameters.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24760E174 + 4 * byte_247656AC0[a1]))(0x73656C7572, 0xE500000000000000);
}

uint64_t sub_24760E174()
{
  return 0x6E6F437468676972;
}

unint64_t sub_24760E194()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RepliesToRobotsParameters.CodingKeys()
{
  unsigned __int8 *v0;

  return RepliesToRobotsParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RepliesToRobotsParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized RepliesToRobotsParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RepliesToRobotsParameters.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance RepliesToRobotsParameters.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RepliesToRobotsParameters.CodingKeys()
{
  lazy protocol witness table accessor for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RepliesToRobotsParameters.CodingKeys()
{
  lazy protocol witness table accessor for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

__n128 RepliesToRobotsParameters.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  specialized RepliesToRobotsParameters.init(from:)(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

void __swiftcall RepliesToRobotsParameters.init(rules:rightContext:capitalizedWordsMaximumRatio:isFeatureEnabled:triggerContext:useGeneralContext:generalContextWords:generalLeftContext:leftContext:isInsignificantSender:triggerWords:shouldRelaxContext:generalRightContext:)(SmartReplies::RepliesToRobotsParameters *__return_ptr retstr, Swift::OpaquePointer rules, Swift::Int rightContext, Swift::Int capitalizedWordsMaximumRatio, Swift::Bool isFeatureEnabled, Swift::Int triggerContext, Swift::Bool useGeneralContext, Swift::OpaquePointer generalContextWords, Swift::Int generalLeftContext, Swift::Int leftContext, Swift::Bool isInsignificantSender, Swift::OpaquePointer triggerWords, Swift::Bool shouldRelaxContext, Swift::Int generalRightContext)
{
  retstr->rules = rules;
  retstr->rightContext = rightContext;
  retstr->capitalizedWordsMaximumRatio = capitalizedWordsMaximumRatio;
  retstr->isFeatureEnabled = isFeatureEnabled;
  retstr->triggerContext = triggerContext;
  retstr->useGeneralContext = useGeneralContext;
  retstr->generalContextWords = generalContextWords;
  retstr->generalLeftContext = generalLeftContext;
  retstr->leftContext = leftContext;
  retstr->isInsignificantSender = isInsignificantSender;
  retstr->triggerWords = triggerWords;
  retstr->shouldRelaxContext = shouldRelaxContext;
  retstr->generalRightContext = generalRightContext;
}

__n128 protocol witness for Decodable.init(from:) in conformance RepliesToRobotsParameters@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  specialized RepliesToRobotsParameters.init(from:)(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t TrialRepliesToRobotsFactors.repliesToRobotsOverrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TrialRepliesToRobotsFactors.configuration.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TrialRepliesToRobotsFactors() + 20));
  v4 = *v3;
  v24 = v3[1];
  v25 = *v3;
  v22 = v3[3];
  v23 = v3[2];
  v20 = v3[5];
  v21 = v3[4];
  v18 = v3[7];
  v19 = v3[6];
  v5 = v3[8];
  v6 = v3[9];
  v7 = v3[10];
  v8 = v3[11];
  v9 = v3[12];
  if (*v3 == 1)
  {
    closure #1 in TrialRepliesToRobotsFactors.configuration.getter(v1, (uint64_t)&v26);
    v10 = v27;
    v11 = v28;
    v12 = v29;
    v13 = v30;
    v14 = v31;
    v15 = v32;
    v16 = v33;
    v5 = v34;
    v6 = v35;
    v7 = v36;
    v8 = v37;
    v9 = v38;
    v24 = v27;
    v25 = v26;
    *v3 = v26;
    v3[1] = v10;
    v22 = v12;
    v23 = v11;
    v3[2] = v11;
    v3[3] = v12;
    v20 = v14;
    v21 = v13;
    v3[4] = v13;
    v3[5] = v14;
    v18 = v16;
    v19 = v15;
    v3[6] = v15;
    v3[7] = v16;
    v3[8] = v5;
    v3[9] = v6;
    v3[10] = v7;
    v3[11] = v8;
    v3[12] = v9;
    outlined retain of RepliesToRobotsParameters?(&v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of RepliesToRobotsParameters?);
  }
  result = outlined copy of RepliesToRobotsParameters??(v4);
  *a1 = v25;
  a1[1] = v24;
  a1[2] = v23;
  a1[3] = v22;
  a1[4] = v21;
  a1[5] = v20;
  a1[6] = v19;
  a1[7] = v18;
  a1[8] = v5;
  a1[9] = v6;
  a1[10] = v7;
  a1[11] = v8;
  a1[12] = v9;
  return result;
}

uint64_t closure #1 in TrialRepliesToRobotsFactors.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  __int128 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = Data.init(contentsOf:options:)();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type RepliesToRobotsParameters and conformance RepliesToRobotsParameters();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v8, v10);
  result = swift_release();
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  v18 = v29;
  v19 = v30;
  v20 = v31;
  v21 = v32;
  *(_QWORD *)a2 = v22;
  *(_OWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 72) = v18;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v21;
  return result;
}

__n128 TrialRepliesToRobotsFactors.configuration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[6];
  uint64_t v12;

  outlined init with take of RepliesToRobotsParameters?(a1, (uint64_t)v11, &demangling cache variable for type metadata for RepliesToRobotsParameters?);
  v9 = v11[1];
  v10 = v11[0];
  v7 = v11[3];
  v8 = v11[2];
  v5 = (__n128)v11[5];
  v6 = v11[4];
  v2 = v12;
  v3 = v1 + *(int *)(type metadata accessor for TrialRepliesToRobotsFactors() + 20);
  outlined consume of RepliesToRobotsParameters??(*(_QWORD *)v3);
  *(_OWORD *)v3 = v10;
  *(_OWORD *)(v3 + 16) = v9;
  *(_OWORD *)(v3 + 32) = v8;
  *(_OWORD *)(v3 + 48) = v7;
  result = v5;
  *(_OWORD *)(v3 + 64) = v6;
  *(__n128 *)(v3 + 80) = v5;
  *(_QWORD *)(v3 + 96) = v2;
  return result;
}

void (*TrialRepliesToRobotsFactors.configuration.modify(uint64_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0xD8uLL);
  *a1 = v3;
  v3[26] = v1;
  TrialRepliesToRobotsFactors.configuration.getter(v3);
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v3, (uint64_t)(v3 + 13), &demangling cache variable for type metadata for RepliesToRobotsParameters?);
  return TrialRepliesToRobotsFactors.configuration.modify;
}

void TrialRepliesToRobotsFactors.configuration.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *a1;
  v4 = (*a1)[13];
  v5 = (*a1)[26];
  v6 = (*a1)[14];
  v12 = (*a1)[15];
  v13 = (*a1)[16];
  v14 = (*a1)[17];
  v9 = (*a1)[18];
  v10 = (*a1)[19];
  v11 = (*a1)[20];
  v15 = (*a1)[21];
  v16 = (*a1)[22];
  v17 = (*a1)[23];
  v18 = (*a1)[24];
  v19 = (*a1)[25];
  v7 = (uint64_t *)(v5 + *(int *)(type metadata accessor for TrialRepliesToRobotsFactors() + 20));
  if ((a2 & 1) != 0)
  {
    v8 = *v7;
    outlined copy of RepliesToRobotsParameters?(v4);
    outlined consume of RepliesToRobotsParameters??(v8);
    *v7 = v4;
    v7[1] = v6;
    v7[2] = v12;
    v7[3] = v13;
    v7[4] = v14;
    v7[5] = v9;
    v7[6] = v10;
    v7[7] = v11;
    v7[8] = v15;
    v7[9] = v16;
    v7[10] = v17;
    v7[11] = v18;
    v7[12] = v19;
    outlined consume of RepliesToRobotsParameters?(v3[13]);
  }
  else
  {
    outlined consume of RepliesToRobotsParameters??(*v7);
    *v7 = v4;
    v7[1] = v6;
    v7[2] = v12;
    v7[3] = v13;
    v7[4] = v14;
    v7[5] = v9;
    v7[6] = v10;
    v7[7] = v11;
    v7[8] = v15;
    v7[9] = v16;
    v7[10] = v17;
    v7[11] = v18;
    v7[12] = v19;
  }
  free(v3);
}

Swift::Void __swiftcall TrialRepliesToRobotsFactors.runAfterInitHook()()
{
  uint64_t v0[13];

  TrialRepliesToRobotsFactors.configuration.getter(v0);
  outlined retain of RepliesToRobotsParameters?(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialRepliesToRobotsFactors.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TrialRepliesToRobotsFactors.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TrialRepliesToRobotsFactors.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TrialRepliesToRobotsFactors.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v15 = a2;
  v18 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialRepliesToRobotsFactors.CodingKeys>);
  v16 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TrialRepliesToRobotsFactors();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v11[*(int *)(v9 + 20)];
  *(_QWORD *)v12 = 1;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  lazy protocol witness table accessor for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined consume of RepliesToRobotsParameters??(*(_QWORD *)v12);
  }
  else
  {
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v18);
    outlined init with copy of TrialRepliesToRobotsFactors((uint64_t)v11, v15);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of TrialRepliesToRobotsFactors((uint64_t)v11);
  }
}

uint64_t TrialRepliesToRobotsFactors.init(repliesToRobotsOverrides:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = type metadata accessor for TrialRepliesToRobotsFactors();
  return outlined init with take of RepliesToRobotsParameters?(a2, a3 + *(int *)(v7 + 20), (uint64_t *)&demangling cache variable for type metadata for RepliesToRobotsParameters??);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialRepliesToRobotsFactors@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrialRepliesToRobotsFactors.init(from:)(a1, a2);
}

_QWORD *protocol witness for TUSAfterInitHookable.runAfterInitHook() in conformance TrialRepliesToRobotsFactors()
{
  uint64_t v1[13];

  TrialRepliesToRobotsFactors.configuration.getter(v1);
  return outlined retain of RepliesToRobotsParameters?(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
}

unint64_t TrialRepliesToRobotsFactors.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB28]);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

void *one-time initialization function for trialNamespaceManager()
{
  void *v0;
  id v1;
  id v2;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialNamespaceManager<TrialRepliesToRobotsFactors>);
  if (one-time initialization token for understandingPlatform != -1)
    swift_once();
  v0 = (void *)static TRIClient.understandingPlatform;
  v1 = objc_allocWithZone(MEMORY[0x24BEBA918]);
  v2 = v0;
  objc_msgSend(v1, sel_initWithAllowsCellular_discretionaryBehavior_, 0, 2);
  result = (void *)TUSTrialNamespaceManager.__allocating_init(namespaceName:trialClient:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)();
  static RepliesToRobotsManager.trialNamespaceManager = result;
  return result;
}

{
  void *v0;
  id v1;
  id v2;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialNamespaceManager<TrialShortcodeFactors>);
  if (one-time initialization token for understandingPlatform != -1)
    swift_once();
  v0 = (void *)static TRIClient.understandingPlatform;
  v1 = objc_allocWithZone(MEMORY[0x24BEBA918]);
  v2 = v0;
  objc_msgSend(v1, sel_initWithAllowsCellular_discretionaryBehavior_, 1, 0);
  result = (void *)TUSTrialNamespaceManager.__allocating_init(namespaceName:trialClient:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)();
  static ShortcodeResolutionManager.trialNamespaceManager = result;
  return result;
}

{
  void *v0;
  id v1;
  id v2;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialNamespaceManager<TrialExemptTermsFactors>);
  if (one-time initialization token for understandingPlatform != -1)
    swift_once();
  v0 = (void *)static TRIClient.understandingPlatform;
  v1 = objc_allocWithZone(MEMORY[0x24BEBA918]);
  v2 = v0;
  objc_msgSend(v1, sel_initWithAllowsCellular_discretionaryBehavior_, 1, 0);
  result = (void *)TUSTrialNamespaceManager.__allocating_init(namespaceName:trialClient:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)();
  static PredictionExemptTermsDetector.trialNamespaceManager = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static RepliesToRobotsManager.trialNamespaceManager@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for URL.DirectoryHint();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v9);

  if (v10)
  {
    v11 = (void *)MEMORY[0x24957DF1C](0x547365696C706552, 0xEF73746F626F526FLL);
    v12 = (void *)MEMORY[0x24957DF1C](0x7473696C70, 0xE500000000000000);
    v13 = objc_msgSend(v10, sel_pathForResource_ofType_, v11, v12);

    if (v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v14 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
      URL.init(filePath:directoryHint:relativeTo:)();

      v15 = type metadata accessor for TrialRepliesToRobotsFactors();
      v16 = a1 + *(int *)(v15 + 20);
      *(_QWORD *)v16 = 1;
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.standard);
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v27 = swift_slowAlloc();
        v30 = v27;
        *(_DWORD *)v26 = 136315394;
        v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x547365696C706552, 0xEF73746F626F526FLL, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v26 + 12) = 2080;
        v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7473696C70, 0xE500000000000000, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2475DF000, v24, v25, "Unable to get file %s.%s to use for default replies to robots overrides", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v27, -1, -1);
        MEMORY[0x24957ECC0](v26, -1, -1);
      }

      v28 = type metadata accessor for TrialRepliesToRobotsFactors();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a1, 1, 1, v28);
    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.standard);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_2475DF000, v19, v20, "Unable to get SmartReplies bundle to use for replies to robots overrides", v21, 2u);
      MEMORY[0x24957ECC0](v21, -1, -1);
    }

    v22 = type metadata accessor for TrialRepliesToRobotsFactors();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a1, 1, 1, v22);
  }
}

uint64_t static RepliesToRobotsManager.insignificantSender(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  char v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  Class isa;
  id v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46[3];

  v46[2] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.standard);
    v8 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v14))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    v16 = "No recipients found";
LABEL_12:
    _os_log_impl(&dword_2475DF000, v8, v14, v16, v15, 2u);
    MEMORY[0x24957ECC0](v15, -1, -1);
    goto LABEL_13;
  }
  if (a1[2] != 1)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.standard);
    v8 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v8, v14))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    v16 = "More than one recipient found";
    goto LABEL_12;
  }
  v6 = (void *)a1[4];
  v5 = (void *)a1[5];
  v7 = objc_allocWithZone(MEMORY[0x24BDBACF8]);
  swift_bridgeObjectRetain();
  v8 = objc_msgSend(v7, sel_init);
  v46[0] = v6;
  v46[1] = v5;
  v44 = 64;
  v45 = 0xE100000000000000;
  v9 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.range<A>(of:options:range:locale:)();
  outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v19)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    v21 = (void *)objc_opt_self();
    v22 = objc_allocWithZone(MEMORY[0x24BDBAD88]);
    v23 = (void *)MEMORY[0x24957DF1C](v6, v5);
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, sel_initWithStringValue_, v23);

    v25 = objc_msgSend(v21, sel_predicateForContactsMatchingPhoneNumber_, v24);
    goto LABEL_24;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
    goto LABEL_18;
  if (v10 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v12 != v26)
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
      goto LABEL_23;
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40))
    {

      swift_bridgeObjectRelease_n();
      return 0;
    }
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = (void *)swift_slowAlloc();
    v46[0] = v42;
    *(_DWORD *)v41 = 136315138;
    swift_bridgeObjectRetain();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, (uint64_t *)v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v39, v40, "Unsupported handleType: %s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v42, -1, -1);
    MEMORY[0x24957ECC0](v41, -1, -1);

LABEL_13:
    return 0;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  v28 = (void *)objc_opt_self();
  v24 = (id)MEMORY[0x24957DF1C](v6, v5);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v28, sel_predicateForContactsMatchingEmailAddress_, v24);
LABEL_24:
  v29 = v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_247656A00;
  v31 = (void *)*MEMORY[0x24BDBA2E0];
  *(_QWORD *)(v30 + 32) = *MEMORY[0x24BDBA2E0];
  v46[0] = (id)v30;
  specialized Array._endMutation()();
  v32 = v31;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v46[0] = 0;
  v34 = -[NSObject unifiedContactsMatchingPredicate:keysToFetch:error:](v8, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, v29, isa, v46);

  if (v34)
  {
    v35 = v46[0];

    return 0;
  }
  else
  {
    v36 = v46[0];
    v37 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    return 1;
  }
}

float static RepliesToRobotsManager.allCapsRatio(for:)(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  float v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  char v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v3 = 0.0;
    return v3 / (float)v1;
  }
  v2 = (void **)(swift_bridgeObjectRetain() + 40);
  v3 = 0.0;
  v4 = v1;
  do
  {
    v6 = (uint64_t)*(v2 - 1);
    v5 = *v2;
    v7 = String.uppercased()();
    if (v7._countAndFlagsBits == v6 && v7._object == v5)
    {
      swift_bridgeObjectRelease();
LABEL_4:
      v3 = v3 + 1.0;
      goto LABEL_5;
    }
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      goto LABEL_4;
LABEL_5:
    v2 += 2;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v3 / (float)v1;
}

uint64_t RepliesToRobotsManager.replies(_:language:recipients:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RepliesToRobotsManager.replies(_:language:recipients:)
                                                                            + async function pointer to specialized RepliesToRobotsManager.replies(_:language:recipients:));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v13(a1, a2, a3, a4, a5);
}

void closure #2 in RepliesToRobotsManager.replies(_:language:recipients:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, _BYTE *a7, _QWORD *a8)
{
  uint64_t v8;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  objc_class *v37;
  _BYTE *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  _QWORD *v46;
  objc_super v47;
  uint64_t v48;

  v8 = *a4;
  if (!*(_QWORD *)(*a4 + 16))
    return;
  swift_bridgeObjectRetain();
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v46 = a8;
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *a5;
  swift_bridgeObjectRetain();
  v21 = specialized Set.contains(_:)(a2, a3, v20);
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    v27 = a4[4];
    if (__OFSUB__(a1, v27))
    {
      __break(1u);
      goto LABEL_35;
    }
    v28 = specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(a6, a4[10], a1 - v27, a1);
    if ((*a7 & 1) == 0 && (v28 & 1) != 0)
      *a7 = 1;
    if ((a4[11] & 1) != 0)
      goto LABEL_25;
    v29 = *((_BYTE *)a4 + 40);
    if ((v29 & 1) != 0)
    {
      v30 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v31 = a4[12];
      v32 = __OFADD__(a1, v31);
      v33 = a1 + v31;
      if (v32)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (__OFADD__(v33, 1))
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      if ((specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(a6, a4[6], a1 + 1, v33 + 1) & 1) != 0)goto LABEL_25;
    }
    else
    {
      v30 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
    }
    v34 = a4[1];
    v32 = __OFADD__(a1, v34);
    v35 = a1 + v34;
    if (!v32)
    {
      if (!__OFADD__(v35, 1))
      {
        if ((specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(a6, v19, v30, v35 + 1) & 1) != 0)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          v36 = v46;
          goto LABEL_26;
        }
        v40 = a4[7];
        if (!__OFSUB__(a1, v40))
        {
          v41 = specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(a6, a4[6], a1 - v40, a1);
          v42 = a4[8];
          if (!__OFSUB__(a1, v42))
          {
            v43 = v41;
            v44 = specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(a6, v19, a1 - v42, a1);
            swift_bridgeObjectRelease();
            v45 = v29 & v43;
            v36 = v46;
            if ((v45 & 1) == 0 && (v44 & 1) == 0)
              return;
LABEL_26:
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)(&v48, a2, a3);
            swift_bridgeObjectRelease();
            v37 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestion();
            v38 = objc_allocWithZone(v37);
            v39 = (uint64_t *)&v38[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
            *v39 = a2;
            v39[1] = a3;
            v38[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
            v47.receiver = v38;
            v47.super_class = v37;
            swift_bridgeObjectRetain();
            objc_msgSendSuper2(&v47, sel_init);
            MEMORY[0x24957E0E4]();
            if (*(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            {
LABEL_27:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              return;
            }
LABEL_35:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_27;
          }
LABEL_43:
          __break(1u);
          return;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      goto LABEL_38;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for standard != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v48 = v26;
    *(_DWORD *)v25 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v23, v24, "Response strings do not contain: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v26, -1, -1);
    MEMORY[0x24957ECC0](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized RepliesToRobotsParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656C7572 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F437468676972 && a2 == 0xEC00000074786574
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000024765C350
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024765C370
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4372656767697274 && a2 == 0xEE00747865746E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024765C390
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024765C3B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024765C3D0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x746E6F437466656CLL && a2 == 0xEB00000000747865
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024765C3F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x5772656767697274 && a2 == 0xEC0000007364726FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024765C410
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024765C430)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t specialized RepliesToRobotsParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RepliesToRobotsParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  lazy protocol witness table accessor for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  v30 = 0;
  lazy protocol witness table accessor for type [String : [String]] and conformance <> [A : B]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v31;
  LOBYTE(v31) = 1;
  swift_bridgeObjectRetain();
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 2;
  v29 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 3;
  v28 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 4;
  v27 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 5;
  v24 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  v30 = 6;
  v25 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
  v26 = v11;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12 = v31;
  LOBYTE(v31) = 7;
  v23 = v12;
  swift_bridgeObjectRetain();
  v22 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 8;
  v21 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 9;
  v20 = KeyedDecodingContainer.decode(_:forKey:)();
  v30 = 10;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13 = v31;
  LOBYTE(v31) = 11;
  v26 = v13;
  swift_bridgeObjectRetain();
  LODWORD(v25) = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v31) = 12;
  v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v28 &= 1u;
  v20 &= 1u;
  v24 &= 1u;
  LODWORD(v25) = v25 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v15 = v26;
  swift_bridgeObjectRelease();
  v16 = v23;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v29;
  *(_BYTE *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 32) = v27;
  *(_BYTE *)(a2 + 40) = v24;
  v18 = v22;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 64) = v21;
  *(_BYTE *)(a2 + 72) = v20;
  *(_QWORD *)(a2 + 80) = v15;
  *(_BYTE *)(a2 + 88) = v25;
  *(_QWORD *)(a2 + 96) = v14;
  return result;
}

uint64_t type metadata accessor for TrialRepliesToRobotsFactors()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrialRepliesToRobotsFactors;
  if (!type metadata singleton initialization cache for TrialRepliesToRobotsFactors)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of RepliesToRobotsParameters?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of RepliesToRobotsParameters??(uint64_t result)
{
  if (result != 1)
    return outlined copy of RepliesToRobotsParameters?(result);
  return result;
}

uint64_t outlined consume of RepliesToRobotsParameters??(uint64_t result)
{
  if (result != 1)
    return outlined consume of RepliesToRobotsParameters?(result);
  return result;
}

uint64_t outlined consume of RepliesToRobotsParameters?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *outlined retain of RepliesToRobotsParameters?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialRepliesToRobotsFactors.CodingKeys, &unk_2518C52B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialRepliesToRobotsFactors.CodingKeys, &unk_2518C52B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialRepliesToRobotsFactors.CodingKeys, &unk_2518C52B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialRepliesToRobotsFactors.CodingKeys, &unk_2518C52B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialRepliesToRobotsFactors.CodingKeys and conformance TrialRepliesToRobotsFactors.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialRepliesToRobotsFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TrialRepliesToRobotsFactors(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrialRepliesToRobotsFactors();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of RepliesToRobotsParameters?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL();
    result = MEMORY[0x24957EC18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized TrialRepliesToRobotsFactors.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000018 && a2 == 0x800000024765C300)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized static RepliesToRobotsManager.isPresentInContext(_:context:startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  swift_bridgeObjectRetain();
  v8 = specialized Set.init<A>(_:)(a2);
  result = swift_bridgeObjectRelease();
  v10 = a3 & ~(a3 >> 63);
  v11 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)v11 < a4)
    a4 = *(_QWORD *)(a1 + 16);
  if (a4 < v10)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v11 < v10)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  if (v10 != a4)
  {
    v13 = v8 + 56;
    result = swift_bridgeObjectRetain_n();
    v26 = a4;
    while (v10 < a4)
    {
      v14 = String.lowercased()();
      if (*(_QWORD *)(v8 + 16))
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v15 = Hasher._finalize()();
        v16 = -1 << *(_BYTE *)(v8 + 32);
        v17 = v15 & ~v16;
        if (((*(_QWORD *)(v13 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          v18 = *(_QWORD *)(v8 + 48);
          v19 = v18 + 16 * v17;
          v20 = *(_QWORD *)v19 == v14._countAndFlagsBits && *(void **)(v19 + 8) == v14._object;
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_26:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v12 = 1;
LABEL_27:
            swift_bridgeObjectRelease();
            goto LABEL_28;
          }
          v21 = ~v16;
          for (i = v17 + 1; ; i = v23 + 1)
          {
            v23 = i & v21;
            if (((*(_QWORD *)(v13 + (((i & v21) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v21)) & 1) == 0)
              break;
            v24 = v18 + 16 * v23;
            v25 = *(_QWORD *)v24 == v14._countAndFlagsBits && *(void **)(v24 + 8) == v14._object;
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_26;
          }
        }
        swift_bridgeObjectRelease();
        a4 = v26;
      }
      ++v10;
      result = swift_bridgeObjectRelease();
      if (v10 == a4)
      {
        swift_bridgeObjectRelease();
        v12 = 0;
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  v12 = 0;
LABEL_28:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized RepliesToRobotsManager.replies(_:language:recipients:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[49] = a4;
  v5[50] = a5;
  v5[47] = a2;
  v5[48] = a3;
  v5[46] = a1;
  v6 = type metadata accessor for CharacterSet();
  v5[51] = v6;
  v5[52] = *(_QWORD *)(v6 - 8);
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialRepliesToRobotsFactors>?);
  v5[55] = swift_task_alloc();
  type metadata accessor for TrialRepliesToRobotsFactors();
  v5[56] = swift_task_alloc();
  v5[57] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized RepliesToRobotsManager.replies(_:language:recipients:)()
{
  uint64_t v0;
  void *v1;

  if (one-time initialization token for trialNamespaceManager != -1)
    swift_once();
  v1 = static RepliesToRobotsManager.trialNamespaceManager;
  *(_QWORD *)(v0 + 464) = static RepliesToRobotsManager.trialNamespaceManager;
  *(_QWORD *)(v0 + 472) = *(_QWORD *)(*(_QWORD *)v1 + 264);
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(void))(v0 + 472))();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  int64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialRepliesToRobotsFactors>);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for TUSTrialAssets<TrialRepliesToRobotsFactors>?);
LABEL_43:
    v50 = 0;
    goto LABEL_44;
  }
  v3 = (_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 456);
  outlined init with copy of TrialRepliesToRobotsFactors(v1, v5);
  outlined destroy of Any?(v1, &demangling cache variable for type metadata for TUSTrialAssets<TrialRepliesToRobotsFactors>);
  outlined init with take of TrialRepliesToRobotsFactors(v5, v4);
  TrialRepliesToRobotsFactors.configuration.getter((uint64_t *)(v0 + 224));
  outlined init with take of RepliesToRobotsParameters?(v0 + 224, v0 + 120, &demangling cache variable for type metadata for RepliesToRobotsParameters?);
  if (!*(_QWORD *)(v0 + 120))
  {
    v10 = *(_QWORD *)(v0 + 456);
    goto LABEL_42;
  }
  v6 = (uint64_t *)(v0 + 16);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 216);
  v7 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 64) = v8;
  v9 = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v0 + 32) = v9;
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    outlined destroy of TrialRepliesToRobotsFactors(*(_QWORD *)(v0 + 456));
    outlined retain of RepliesToRobotsParameters?((_QWORD *)(v0 + 224), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
    goto LABEL_43;
  }
  if (!*(_QWORD *)(v0 + 400))
  {
    outlined retain of RepliesToRobotsParameters?((_QWORD *)(v0 + 224), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.standard);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v32, v33))
      goto LABEL_40;
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    v35 = "Not running Replies to Robots if recipients is nil";
    goto LABEL_39;
  }
  if (one-time initialization token for supportedLanguages != -1)
    swift_once();
  if ((specialized Sequence<>.contains(_:)(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), supportedLanguages._rawValue) & 1) == 0)
  {
    outlined retain of RepliesToRobotsParameters?((_QWORD *)(v0 + 224), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.debug.getter();
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 456);
    v41 = *(_QWORD *)(v0 + 392);
    if (!v39)
    {

      swift_bridgeObjectRelease_n();
LABEL_41:
      v10 = v40;
      goto LABEL_42;
    }
    v42 = *(_QWORD *)(v0 + 384);
    v59 = *(_QWORD *)(v0 + 456);
    v43 = (uint8_t *)swift_slowAlloc();
    v44 = swift_slowAlloc();
    v61 = v44;
    *(_DWORD *)v43 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 360) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v41, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v37, v38, "Not running replies to robots for language %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v44, -1, -1);
    MEMORY[0x24957ECC0](v43, -1, -1);

    v10 = v59;
LABEL_42:
    outlined destroy of TrialRepliesToRobotsFactors(v10);
    goto LABEL_43;
  }
  v11 = *(_QWORD *)(v0 + 432);
  v13 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 328) = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 336) = v14;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v15 = StringProtocol.components(separatedBy:)();
  v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v16(v11, v13);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (!v17)
  {
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
    v45 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v45)
      goto LABEL_28;
    goto LABEL_35;
  }
  v61 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  v19 = (uint64_t *)(v15 + 40);
  do
  {
    v21 = *(_QWORD *)(v0 + 424);
    v20 = *(_QWORD *)(v0 + 432);
    v22 = *(_QWORD *)(v0 + 408);
    v23 = *v19;
    *(_QWORD *)(v0 + 344) = *(v19 - 1);
    *(_QWORD *)(v0 + 352) = v23;
    swift_bridgeObjectRetain();
    static CharacterSet.alphanumerics.getter();
    CharacterSet.inverted.getter();
    v16(v20, v22);
    v24 = StringProtocol.trimmingCharacters(in:)();
    v26 = v25;
    v16(v21, v22);
    swift_bridgeObjectRelease();
    v27 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1);
      v27 = v61;
    }
    v29 = *(_QWORD *)(v27 + 16);
    v28 = *(_QWORD *)(v27 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v27 = v61;
    }
    *(_QWORD *)(v27 + 16) = v29 + 1;
    v30 = v27 + 16 * v29;
    *(_QWORD *)(v30 + 32) = v24;
    *(_QWORD *)(v30 + 40) = v26;
    v19 += 2;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(v0 + 16);
  v3 = (_QWORD *)(v0 + 224);
  v18 = MEMORY[0x24BEE4AF8];
  v45 = *(_QWORD *)(v27 + 16);
  if (!v45)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    outlined retain of RepliesToRobotsParameters?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.standard);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v32, v33))
      goto LABEL_40;
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    v35 = "Can't reply to empty message";
LABEL_39:
    _os_log_impl(&dword_2475DF000, v32, v33, v35, v34, 2u);
    MEMORY[0x24957ECC0](v34, -1, -1);
LABEL_40:
    v40 = *(_QWORD *)(v0 + 456);

    goto LABEL_41;
  }
LABEL_28:
  v60 = MEMORY[0x24BEE4B08];
  v61 = v18;
  v62 = 0;
  swift_bridgeObjectRetain();
  v46 = 0;
  v47 = (unint64_t *)(v27 + 40);
  do
  {
    v48 = *(v47 - 1);
    v49 = *v47;
    swift_bridgeObjectRetain();
    closure #2 in RepliesToRobotsManager.replies(_:language:recipients:)(v46, v48, v49, v6, &v60, v27, &v62, &v61);
    swift_bridgeObjectRelease();
    v47 += 2;
    ++v46;
  }
  while (v45 != v46);
  swift_bridgeObjectRelease();
  outlined retain of RepliesToRobotsParameters?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of RepliesToRobotsParameters?);
  swift_bridgeObjectRelease();
  v50 = v61;
  if (v61 >> 62)
  {
    swift_bridgeObjectRetain();
    v53 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v53)
      goto LABEL_32;
LABEL_46:
    if (one-time initialization token for standard != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.standard);
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_2475DF000, v55, v56, "No Replies to Robots found", v57, 2u);
      MEMORY[0x24957ECC0](v57, -1, -1);
    }
    v58 = *(_QWORD *)(v0 + 456);

    outlined destroy of TrialRepliesToRobotsFactors(v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  if (!*(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_46;
LABEL_32:
  outlined destroy of TrialRepliesToRobotsFactors(*(_QWORD *)(v0 + 456));
  swift_bridgeObjectRelease();
LABEL_44:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v50);
}

uint64_t destroy for RepliesToRobotsParameters()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RepliesToRobotsParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RepliesToRobotsParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for RepliesToRobotsParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepliesToRobotsParameters(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepliesToRobotsParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepliesToRobotsParameters()
{
  return &type metadata for RepliesToRobotsParameters;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialRepliesToRobotsFactors(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 && v11 != 1)
    {
      *(_QWORD *)v9 = v11;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v10 + 8);
      v9[24] = v10[24];
      *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
      v9[40] = v10[40];
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *(_OWORD *)(v9 + 56) = *(_OWORD *)(v10 + 56);
      v9[72] = v10[72];
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v9[88] = v10[88];
      *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_OWORD *)v9 + 5) = v12;
      *((_QWORD *)v9 + 12) = *((_QWORD *)v10 + 12);
      v13 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v13;
      v14 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v14;
    }
  }
  return a1;
}

unint64_t destroy for TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = *(_QWORD *)(a1 + *(int *)(a2 + 20));
  if (result >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  if (*v9 && v10 != 1)
  {
    *(_QWORD *)v8 = v10;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 1);
    *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
    *(_QWORD *)(v8 + 32) = v9[4];
    *(_BYTE *)(v8 + 40) = *((_BYTE *)v9 + 40);
    *(_QWORD *)(v8 + 48) = v9[6];
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 7);
    *(_BYTE *)(v8 + 72) = *((_BYTE *)v9 + 72);
    *(_QWORD *)(v8 + 80) = v9[10];
    *(_BYTE *)(v8 + 88) = *((_BYTE *)v9 + 88);
    *(_QWORD *)(v8 + 96) = v9[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *((_OWORD *)v9 + 5);
    *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
    *(_OWORD *)(v8 + 80) = v11;
    *(_QWORD *)(v8 + 96) = v9[12];
    v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v12;
    v13 = *((_OWORD *)v9 + 3);
    *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
    *(_OWORD *)(v8 + 48) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (__int128 *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *(_QWORD *)v9;
  if (v10 != 1)
  {
    if (v11 == 1)
    {
      outlined destroy of Any?(a1 + v7, &demangling cache variable for type metadata for RepliesToRobotsParameters?);
    }
    else
    {
      if (!v10)
      {
        if (!v11)
          goto LABEL_3;
LABEL_11:
        *(_QWORD *)v8 = v11;
        *(_QWORD *)(v8 + 8) = *((_QWORD *)v9 + 1);
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_BYTE *)(v8 + 40) = *((_BYTE *)v9 + 40);
        *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_QWORD *)(v8 + 64) = *((_QWORD *)v9 + 8);
        *(_BYTE *)(v8 + 72) = *((_BYTE *)v9 + 72);
        *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
        *(_BYTE *)(v8 + 88) = *((_BYTE *)v9 + 88);
        *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
      if (v11)
      {
        *(_QWORD *)v8 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v8 + 8) = *((_QWORD *)v9 + 1);
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
        *(_QWORD *)(v8 + 32) = *((_QWORD *)v9 + 4);
        *(_BYTE *)(v8 + 40) = *((_BYTE *)v9 + 40);
        *(_QWORD *)(v8 + 48) = *((_QWORD *)v9 + 6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v8 + 56) = *((_QWORD *)v9 + 7);
        *(_QWORD *)(v8 + 64) = *((_QWORD *)v9 + 8);
        *(_BYTE *)(v8 + 72) = *((_BYTE *)v9 + 72);
        *(_QWORD *)(v8 + 80) = *((_QWORD *)v9 + 10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_BYTE *)(v8 + 88) = *((_BYTE *)v9 + 88);
        *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
        return a1;
      }
      outlined destroy of RepliesToRobotsParameters(a1 + v7);
    }
    v18 = v9[1];
    v17 = v9[2];
    *(_OWORD *)v8 = *v9;
    *(_OWORD *)(v8 + 16) = v18;
    *(_OWORD *)(v8 + 32) = v17;
    v20 = v9[4];
    v19 = v9[5];
    v21 = v9[3];
    *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
    *(_OWORD *)(v8 + 64) = v20;
    *(_OWORD *)(v8 + 80) = v19;
    *(_OWORD *)(v8 + 48) = v21;
    return a1;
  }
  if (v11 > 1)
    goto LABEL_11;
LABEL_3:
  v12 = *v9;
  v13 = v9[2];
  *(_OWORD *)(v8 + 16) = v9[1];
  *(_OWORD *)(v8 + 32) = v13;
  *(_OWORD *)v8 = v12;
  v14 = v9[3];
  v15 = v9[4];
  v16 = v9[5];
  *(_QWORD *)(v8 + 96) = *((_QWORD *)v9 + 12);
  *(_OWORD *)(v8 + 64) = v15;
  *(_OWORD *)(v8 + 80) = v16;
  *(_OWORD *)(v8 + 48) = v14;
  return a1;
}

uint64_t outlined destroy of RepliesToRobotsParameters(uint64_t a1)
{
  destroy for RepliesToRobotsParameters();
  return a1;
}

uint64_t initializeWithTake for TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 96) = *(_QWORD *)(v9 + 96);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v12;
  return a1;
}

uint64_t assignWithTake for TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *v9;
  if (v10 == 1)
    goto LABEL_8;
  if (v11 == 1)
  {
    outlined destroy of Any?(v8, &demangling cache variable for type metadata for RepliesToRobotsParameters?);
LABEL_8:
    v12 = *((_OWORD *)v9 + 5);
    *(_OWORD *)(v8 + 64) = *((_OWORD *)v9 + 4);
    *(_OWORD *)(v8 + 80) = v12;
    *(_QWORD *)(v8 + 96) = v9[12];
    v13 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v13;
    v14 = *((_OWORD *)v9 + 3);
    *(_OWORD *)(v8 + 32) = *((_OWORD *)v9 + 2);
    *(_OWORD *)(v8 + 48) = v14;
    return a1;
  }
  if (!v10)
    goto LABEL_8;
  if (!v11)
  {
    outlined destroy of RepliesToRobotsParameters(v8);
    goto LABEL_8;
  }
  *(_QWORD *)v8 = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 1);
  *(_BYTE *)(v8 + 24) = *((_BYTE *)v9 + 24);
  *(_QWORD *)(v8 + 32) = v9[4];
  *(_BYTE *)(v8 + 40) = *((_BYTE *)v9 + 40);
  *(_QWORD *)(v8 + 48) = v9[6];
  swift_bridgeObjectRelease();
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 7);
  *(_BYTE *)(v8 + 72) = *((_BYTE *)v9 + 72);
  *(_QWORD *)(v8 + 80) = v9[10];
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 88) = *((_BYTE *)v9 + 88);
  *(_QWORD *)(v8 + 96) = v9[12];
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialRepliesToRobotsFactors()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2476125F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t storeEnumTagSinglePayload for TrialRepliesToRobotsFactors()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_247612680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  return result;
}

uint64_t type metadata completion function for TrialRepliesToRobotsFactors()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RepliesToRobotsManager()
{
  return &type metadata for RepliesToRobotsManager;
}

uint64_t getEnumTagSinglePayload for TrialRepliesToRobotsFactors.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TrialRepliesToRobotsFactors.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24761280C + 4 * byte_247656ACD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24761282C + 4 * byte_247656AD2[v4]))();
}

_BYTE *sub_24761280C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24761282C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_247612834(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24761283C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_247612844(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24761284C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for TrialRepliesToRobotsFactors.CodingKeys()
{
  return 0;
}

void *type metadata accessor for TrialRepliesToRobotsFactors.CodingKeys()
{
  return &unk_2518C52B8;
}

uint64_t outlined init with take of TrialRepliesToRobotsFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialRepliesToRobotsFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RepliesToRobotsParameters and conformance RepliesToRobotsParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepliesToRobotsParameters and conformance RepliesToRobotsParameters;
  if (!lazy protocol witness table cache variable for type RepliesToRobotsParameters and conformance RepliesToRobotsParameters)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RepliesToRobotsParameters, &type metadata for RepliesToRobotsParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepliesToRobotsParameters and conformance RepliesToRobotsParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RepliesToRobotsParameters.CodingKeys, &unk_2518C5348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RepliesToRobotsParameters.CodingKeys, &unk_2518C5348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RepliesToRobotsParameters.CodingKeys, &unk_2518C5348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RepliesToRobotsParameters.CodingKeys, &unk_2518C5348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepliesToRobotsParameters.CodingKeys and conformance RepliesToRobotsParameters.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    v2 = MEMORY[0x24BEE0D38];
    result = MEMORY[0x24957EC18](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RepliesToRobotsParameters.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RepliesToRobotsParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_247612BB8 + 4 * byte_247656ADC[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_247612BEC + 4 * byte_247656AD7[v4]))();
}

uint64_t sub_247612BEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_247612BF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x247612BFCLL);
  return result;
}

uint64_t sub_247612C08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x247612C10);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_247612C14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_247612C1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for RepliesToRobotsParameters.CodingKeys()
{
  return &unk_2518C5348;
}

uint64_t SemanticFocusType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247612D58 + 4 * byte_247656E70[a1]))(0x70707553656E6F6ELL, 0xED0000646574726FLL);
}

uint64_t sub_247612D58()
{
  return 0x7373656E746966;
}

uint64_t sub_247612D70()
{
  return 0x6E6C7566646E696DLL;
}

uint64_t sub_247612D90()
{
  return 0x676E696D6167;
}

uint64_t sub_247612DA4()
{
  return 0x676E6964616572;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SemanticFocusType(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_247612E2C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_247612EA4 + 4 * byte_247656E7A[a1]))(0x7373656E746966);
}

uint64_t sub_247612EA4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7373656E746966 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance SemanticFocusType()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247612FC4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SemanticFocusType()
{
  __asm { BR              X10 }
}

uint64_t sub_247613098()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SemanticFocusType()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247613164()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SemanticFocusType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SemanticFocusType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SemanticFocusType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_247613258 + 4 * byte_247656E8E[*v0]))();
}

void sub_247613258(_QWORD *a1@<X8>)
{
  *a1 = 0x7373656E746966;
  a1[1] = 0xE700000000000000;
}

void sub_247613274(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6C7566646E696DLL;
  a1[1] = 0xEB00000000737365;
}

void sub_247613298(_QWORD *a1@<X8>)
{
  *a1 = 0x676E696D6167;
  a1[1] = 0xE600000000000000;
}

void sub_2476132B0(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6964616572;
  a1[1] = 0xE700000000000000;
}

void closure #1 in ActionFocusDataSource.currentSemanticType()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;

  v1 = objc_msgSend(a1, sel_error);
  if (v1)
  {
    v2 = v1;
    if (one-time initialization token for standard != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.standard);
    v9 = v2;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      v8 = v9;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v7 = v10;

      _os_log_impl(&dword_2475DF000, v4, v5, "Failed to access User Focus Biome stream with error: %@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v7, -1, -1);
      MEMORY[0x24957ECC0](v6, -1, -1);

    }
    else
    {

    }
  }
}

BOOL closure #2 in ActionFocusDataSource.currentSemanticType()(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  void *v6;

  v3 = objc_msgSend(a1, sel_eventBody);
  v4 = v3;
  if (v3)
  {
    if (objc_msgSend(v3, sel_starting) && objc_msgSend(v4, sel_semanticType) != 1)
    {
      v5 = (void **)(a2 + 16);
      swift_beginAccess();
      v6 = *v5;
      *v5 = v4;

    }
    else
    {

    }
  }
  return v4 == 0;
}

unint64_t specialized ActionFocusDataSource.currentSemanticType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v31 - v4;
  type metadata accessor for BMPublisherOptions();
  v6 = type metadata accessor for Date();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(v3, 1, 1, v6);
  v8 = BMPublisherOptions.__allocating_init(start:end:maxEvents:lastN:reversed:)((uint64_t)v5, (uint64_t)v3, 1, 1, 0);
  v9 = objc_msgSend((id)BiomeLibrary(), sel_UserFocus);
  swift_unknownObjectRelease();
  v10 = objc_msgSend(v9, sel_ComputedMode);
  swift_unknownObjectRelease();
  v11 = objc_msgSend(v10, sel_publisherWithOptions_, v8);

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 0;
  v13 = (id *)(v12 + 16);
  v37 = closure #1 in ActionFocusDataSource.currentSemanticType();
  v38 = 0;
  v14 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v34 = 1107296256;
  v35 = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
  v36 = &block_descriptor_2;
  v15 = _Block_copy(&aBlock);
  v37 = partial apply for closure #2 in ActionFocusDataSource.currentSemanticType();
  v38 = v12;
  aBlock = v14;
  v34 = 1107296256;
  v35 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMMediaNowPlaying>) -> (@unowned Bool);
  v36 = &block_descriptor_3_0;
  v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v17 = objc_msgSend(v11, sel_sinkWithCompletion_shouldContinue_, v15, v16);
  _Block_release(v16);
  _Block_release(v15);

  swift_beginAccess();
  if (*(_QWORD *)(v12 + 16))
  {
    v18 = *v13;
    v19 = objc_msgSend(v18, sel_semanticType);
    swift_release();

    if (v19 - 5 < 6)
      return 0x20304000001uLL >> (8 * (v19 - 5));
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.standard);
    swift_retain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v32 = v25;
      *(_DWORD *)v24 = 136315138;
      if (*v13 && (v26 = objc_msgSend(*v13, sel_semanticModeIdentifier)) != 0)
      {
        v27 = v26;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v30 = v29;

      }
      else
      {
        v28 = 0;
        v30 = 0xE000000000000000;
      }
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v22, v23, "There was an active Focus event found from the Focus Biome stream: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v25, -1, -1);
      MEMORY[0x24957ECC0](v24, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
  }
  return 0;
}

unint64_t specialized SemanticFocusType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SemanticFocusType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SemanticFocusType and conformance SemanticFocusType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SemanticFocusType and conformance SemanticFocusType;
  if (!lazy protocol witness table cache variable for type SemanticFocusType and conformance SemanticFocusType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SemanticFocusType, &type metadata for SemanticFocusType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SemanticFocusType and conformance SemanticFocusType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SemanticFocusType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SemanticFocusType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_247613B2C + 4 * byte_247656E98[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_247613B60 + 4 * byte_247656E93[v4]))();
}

uint64_t sub_247613B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_247613B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x247613B70);
  return result;
}

uint64_t sub_247613B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x247613B84);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_247613B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_247613B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SemanticFocusType()
{
  return &type metadata for SemanticFocusType;
}

ValueMetadata *type metadata accessor for ActionFocusDataSource()
{
  return &type metadata for ActionFocusDataSource;
}

uint64_t sub_247613BBC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

BOOL partial apply for closure #2 in ActionFocusDataSource.currentSemanticType()(void *a1)
{
  uint64_t v1;

  return closure #2 in ActionFocusDataSource.currentSemanticType()(a1, v1);
}

uint64_t ResponseType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247613C3C + 4 * byte_247656FB0[a1]))(0x6E6F69746361, 0xE600000000000000);
}

uint64_t sub_247613C3C()
{
  return 0x6E7944746F626F72;
}

uint64_t sub_247613C6C()
{
  return 0x6E776F6E6B6E75;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ResponseType(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_247613CD0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_247613D30 + 4 * byte_247656FB8[a1]))(0x6E7944746F626F72);
}

uint64_t sub_247613D30(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E7944746F626F72 && v1 == 0xEC00000063696D61)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ResponseType()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247613E30()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ResponseType()
{
  __asm { BR              X10 }
}

uint64_t sub_247613ED8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ResponseType()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247613F78()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ResponseType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ResponseType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ResponseType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_247614040 + 4 * byte_247656FC8[*v0]))();
}

void sub_247614040(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "robotDynamic");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_247614064(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "otherDynamic");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_247614088(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

uint64_t MetricsRepliesListGenerated.numberOfResponsesGenerated.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MetricsRepliesListGenerated.numberOfActionResponses.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MetricsRepliesListGenerated.numberOfRobotResponses.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MetricsRepliesListGenerated.numberOfOtherDynamicResponses.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

float MetricsRepliesListGenerated.predictionLatency.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

uint64_t MetricsRepliesListGenerated.requestLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.trialDeploymentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.trialExperimentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.trialTreatmentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.promptCharacterCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t MetricsRepliesListGenerated.promptEmojiCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t MetricsRepliesListGenerated.predictedActionInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsRepliesListGenerated.responseTypes.getter()
{
  return swift_bridgeObjectRetain();
}

id MetricsRepliesListGenerated.response.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 160);
}

__n128 MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  _OWORD v20[10];
  uint64_t v21;

  specialized MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v20, a10, a11, a12, a13, a14);
  v15 = v20[9];
  *(_OWORD *)(a9 + 128) = v20[8];
  *(_OWORD *)(a9 + 144) = v15;
  *(_QWORD *)(a9 + 160) = v21;
  v16 = v20[5];
  *(_OWORD *)(a9 + 64) = v20[4];
  *(_OWORD *)(a9 + 80) = v16;
  v17 = v20[7];
  *(_OWORD *)(a9 + 96) = v20[6];
  *(_OWORD *)(a9 + 112) = v17;
  v18 = v20[1];
  *(_OWORD *)a9 = v20[0];
  *(_OWORD *)(a9 + 16) = v18;
  result = (__n128)v20[3];
  *(_OWORD *)(a9 + 32) = v20[2];
  *(__n128 *)(a9 + 48) = result;
  return result;
}

Swift::Void __swiftcall MetricsRepliesListGenerated.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_247657110;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x800000024765C450;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000017;
  *(_QWORD *)(inited + 64) = 0x800000024765C470;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000016;
  *(_QWORD *)(inited + 88) = 0x800000024765C490;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 112) = 0x800000024765C4B0;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x800000024765C4D0;
  *(NSNumber *)(inited + 144) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0x4C74736575716572;
  *(_QWORD *)(inited + 160) = 0xEF65676175676E61;
  *(_QWORD *)(inited + 168) = MEMORY[0x24957DF1C](v0[5], v0[6]);
  *(_QWORD *)(inited + 176) = 0x6D614E6C65646F6DLL;
  *(_QWORD *)(inited + 184) = 0xE900000000000065;
  *(_QWORD *)(inited + 192) = MEMORY[0x24957DF1C](v0[7], v0[8]);
  *(_QWORD *)(inited + 200) = 0xD000000000000011;
  *(_QWORD *)(inited + 208) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 216) = MEMORY[0x24957DF1C](v0[9], v0[10]);
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x800000024765C510;
  *(_QWORD *)(inited + 240) = MEMORY[0x24957DF1C](v0[11], v0[12]);
  *(_QWORD *)(inited + 248) = 0xD000000000000010;
  *(_QWORD *)(inited + 256) = 0x800000024765C530;
  *(_QWORD *)(inited + 264) = MEMORY[0x24957DF1C](v0[13], v0[14]);
  *(_QWORD *)(inited + 272) = 0xD000000000000017;
  *(_QWORD *)(inited + 280) = 0x800000024765C550;
  *(NSNumber *)(inited + 288) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 296) = 0xD000000000000013;
  *(_QWORD *)(inited + 304) = 0x800000024765C570;
  *(NSNumber *)(inited + 312) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 320) = 0xD000000000000013;
  *(_QWORD *)(inited + 328) = 0x800000024765C590;
  *(_QWORD *)(inited + 336) = MEMORY[0x24957DF1C](v0[17], v0[18]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD00000000000001ELL, 0x800000024765C5B0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  aBlock[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_3;
  v5 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

unint64_t specialized ResponseType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ResponseType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void specialized MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions))
    v22 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions);
  else
    v22 = MEMORY[0x24BEE4AF8];
  v64 = v22;
  if (v22 >> 62)
    goto LABEL_69;
  v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v52 = a5;
    v54 = a4;
    v60 = a1;
    v56 = a7;
    v57 = a8;
    v58 = a9;
    v24 = MEMORY[0x24BEE4AF8];
    if (!v23)
      break;
    v25 = 0;
    a1 = (_QWORD *)a3[2];
    a5 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v25 == v23)
      {
        __break(1u);
        goto LABEL_67;
      }
      if ((v64 & 0xC000000000000001) != 0)
      {
        a4 = (unsigned __int8 *)MEMORY[0x24957E42C](v25, v64);
        if (!a1)
          goto LABEL_42;
      }
      else
      {
        if (v25 >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_68;
        a4 = (unsigned __int8 *)*(id *)(v64 + 32 + 8 * v25);
        if (!a1)
          goto LABEL_42;
      }
      if (a3[4] == v25)
        goto LABEL_37;
      if (a1 != (_QWORD *)1)
      {
        if (a3[5] == v25)
        {
LABEL_37:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a5 + 2) + 1, 1, a5);
          a7 = *((_QWORD *)a5 + 2);
          v43 = *((_QWORD *)a5 + 3);
          a8 = a7 + 1;
          a9 = 1;
          if (a7 >= v43 >> 1)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), a7 + 1, 1, a5);
          goto LABEL_29;
        }
        if (a1 != (_QWORD *)2)
          break;
      }
LABEL_42:
      type metadata accessor for SRSmartRepliesActionSuggestion();
      if (swift_dynamicCastClass())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a5 + 2) + 1, 1, a5);
        a7 = *((_QWORD *)a5 + 2);
        v44 = *((_QWORD *)a5 + 3);
        a8 = a7 + 1;
        if (a7 >= v44 >> 1)
          a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), a7 + 1, 1, a5);
        a9 = 0;
      }
      else
      {
        v45 = a4[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (v45 == 1)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a5 + 2) + 1, 1, a5);
          a7 = *((_QWORD *)a5 + 2);
          v47 = *((_QWORD *)a5 + 3);
          a8 = a7 + 1;
          if (a7 >= v47 >> 1)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), a7 + 1, 1, a5);
          a9 = 2;
        }
        else
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)a5 + 2) + 1, 1, a5);
          a7 = *((_QWORD *)a5 + 2);
          v50 = *((_QWORD *)a5 + 3);
          a8 = a7 + 1;
          if (a7 >= v50 >> 1)
            a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), a7 + 1, 1, a5);
          a9 = 3;
        }
      }
LABEL_29:
      ++v25;
      *((_QWORD *)a5 + 2) = a8;
      a5[a7 + 32] = a9;

      if (v25 == v23)
        goto LABEL_9;
    }
    v48 = 6;
    while (1)
    {
      v49 = v48 - 3;
      if (__OFADD__(v48 - 4, 1))
        break;
      if (a3[v48] == v25)
        goto LABEL_37;
      ++v48;
      if ((_QWORD *)v49 == a1)
        goto LABEL_42;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23 < 0)
    {
      __break(1u);
      goto LABEL_71;
    }
  }
  a5 = (char *)MEMORY[0x24BEE4AF8];
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)a5 + 2))
  {
    swift_bridgeObjectRetain_n();
    __asm { BR              X8 }
  }
  swift_bridgeObjectRetain_n();
  v66 = *(_QWORD *)(v24 + 16);
  swift_release();
  v65 = *(_QWORD *)(v24 + 16);
  swift_release();
  swift_bridgeObjectRelease_n();
  v26 = *(_QWORD *)(v24 + 16);
  v27 = swift_release();
  v28 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v62 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v60) + 0x178))(v27);
  v30 = v29;
  v67 = a6;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v67);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v31 = BidirectionalCollection<>.joined(separator:)();
  v33 = v32;
  v34 = swift_release();
  (*(void (**)(uint64_t))((*v28 & *v60) + 0x220))(v34);
  v35 = String.count.getter();
  v36 = (float)v35 / 5.0;
  if (v35 >= 300)
    v36 = 60.0;
  v37 = ceilf(v36);
  if ((~LODWORD(v37) & 0x7F800000) == 0)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (v37 <= -9.2234e18)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  if (v37 >= 9.2234e18)
  {
LABEL_73:
    __break(1u);
    swift_release();
    __break(1u);
    JUMPOUT(0x247614F6CLL);
  }
  v38 = (unint64_t)v52;
  if (!v52)
    v38 = 0xE000000000000000;
  v51 = v38;
  if (v52)
    v39 = v54;
  else
    v39 = 0;
  v53 = v31;
  v55 = v33;
  if (v30)
    v40 = v30;
  else
    v40 = 0xE000000000000000;
  if (v30)
    v41 = v62;
  else
    v41 = 0;
  v63 = (uint64_t)v37;
  v42 = String.emojiCountBin()();
  swift_bridgeObjectRelease();

  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = v66;
  *(_QWORD *)(v58 + 16) = v65;
  *(_QWORD *)(v58 + 24) = v26;
  *(float *)(v58 + 32) = a10;
  *(_QWORD *)(v58 + 40) = v41;
  *(_QWORD *)(v58 + 48) = v40;
  *(_QWORD *)(v58 + 56) = v39;
  *(_QWORD *)(v58 + 64) = v51;
  *(_QWORD *)(v58 + 72) = v56;
  *(_QWORD *)(v58 + 80) = v57;
  *(_QWORD *)(v58 + 88) = a11;
  *(_QWORD *)(v58 + 96) = a12;
  *(_QWORD *)(v58 + 104) = a13;
  *(_QWORD *)(v58 + 112) = a14;
  *(_QWORD *)(v58 + 120) = v63;
  *(_QWORD *)(v58 + 128) = v42;
  *(_QWORD *)(v58 + 136) = v53;
  *(_QWORD *)(v58 + 144) = v55;
  *(_QWORD *)(v58 + 152) = a5;
  *(_QWORD *)(v58 + 160) = a2;
}

uint64_t sub_247614F9C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent()()
{
  return swift_bridgeObjectRetain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ResponseType and conformance ResponseType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResponseType and conformance ResponseType;
  if (!lazy protocol witness table cache variable for type ResponseType and conformance ResponseType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for ResponseType, &type metadata for ResponseType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseType and conformance ResponseType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ResponseType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_247615074 + 4 * byte_247656FD1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2476150A8 + 4 * byte_247656FCC[v4]))();
}

uint64_t sub_2476150A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2476150B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2476150B8);
  return result;
}

uint64_t sub_2476150C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2476150CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2476150D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2476150D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResponseType()
{
  return &type metadata for ResponseType;
}

void destroy for MetricsRepliesListGenerated(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for MetricsRepliesListGenerated(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v9;
  v10 = *(void **)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v10;
  return a1;
}

uint64_t assignWithCopy for MetricsRepliesListGenerated(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 160);
  v5 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MetricsRepliesListGenerated(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v10 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsRepliesListGenerated(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsRepliesListGenerated(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsRepliesListGenerated()
{
  return &type metadata for MetricsRepliesListGenerated;
}

uint64_t ShortcodeResolutionManager.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSCache<String, String>);
  swift_allocObject();
  return TUSCache.init(capacity:)();
}

uint64_t ShortcodeResolutionManager.bestNameForPhoneShortCode(detail:associatedText:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialShortcodeFactors>?);
  v4[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrialShortcodeFactors?);
  v4[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ShortcodeResolutionManager.bestNameForPhoneShortCode(detail:associatedText:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = String.digitsOnly.getter();
  v3 = v2;
  *(_QWORD *)(v0 + 216) = v1;
  *(_QWORD *)(v0 + 224) = v2;
  if (one-time initialization token for standard != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 232) = __swift_project_value_buffer(v4, (uint64_t)static Logger.standard);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_2475DF000, v5, v6, "Requesting the best name for a short code and associated text", v7, 2u);
    MEMORY[0x24957ECC0](v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 192);

  if ((specialized ShortcodeResolutionManager.isCurrentLocaleSupported()(*(_QWORD **)(v8 + 8)) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2475DF000, v15, v16, "Cannot get a best name for a short code because the current locale is not supported", v17, 2u);
      MEMORY[0x24957ECC0](v17, -1, -1);
    }

    v10 = 0;
    v9 = 0;
    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v3;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v11 = v10 & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v20 = swift_slowAlloc();
        v21 = v20;
        *(_DWORD *)v14 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v3, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2475DF000, v12, v13, "Using a cached name for handle: %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v20, -1, -1);
        MEMORY[0x24957ECC0](v14, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n();

      }
LABEL_15:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v10, v9);
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for trialNamespaceManager != -1)
    swift_once();
  v19 = static ShortcodeResolutionManager.trialNamespaceManager;
  *(_QWORD *)(v0 + 240) = static ShortcodeResolutionManager.trialNamespaceManager;
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(*(_QWORD *)v19 + 264);
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(void))(v0 + 248))();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String_optional v12;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialShortcodeFactors>);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 208);
  if (v3 == 1)
  {
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for TUSTrialAssets<TrialShortcodeFactors>?);
    v5 = type metadata accessor for TrialShortcodeFactors();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    outlined init with copy of TrialShortcodeFactors(v1, *(_QWORD *)(v0 + 208));
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for TUSTrialAssets<TrialShortcodeFactors>);
    v5 = type metadata accessor for TrialShortcodeFactors();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  }
  v6 = *(_QWORD *)(v0 + 208);
  type metadata accessor for TrialShortcodeFactors();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v6, 1, v5))
  {
    v11._countAndFlagsBits = 28261;
    v11._object = (void *)0xE200000000000000;
    v12 = TrialShortcodeFactors.lookupShortCodeOverride(for:languageCode:)(*(Swift::String *)(v0 + 216), v11);
    if (v12.value._object)
    {
      countAndFlagsBits = v12.value._countAndFlagsBits;
      object = (unint64_t)v12.value._object;
      v15 = ((unint64_t)v12.value._object >> 56) & 0xF;
      if (((uint64_t)v12.value._object & 0x2000000000000000) == 0)
        v15 = v12.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        swift_bridgeObjectRetain_n();
        v16 = Logger.logObject.getter();
        v17 = static os_log_type_t.info.getter();
        v18 = os_log_type_enabled(v16, v17);
        v19 = *(_QWORD *)(v0 + 224);
        if (v18)
        {
          v35 = *(_QWORD *)(v0 + 216);
          v20 = (uint8_t *)swift_slowAlloc();
          v21 = swift_slowAlloc();
          v36 = v21;
          *(_DWORD *)v20 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v19, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_2475DF000, v16, v17, "Using a name from the short code override list for handle: %s", v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24957ECC0](v21, -1, -1);
          MEMORY[0x24957ECC0](v20, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v33 = *(_QWORD *)(v0 + 216);
        v32 = *(_QWORD *)(v0 + 224);
        v28 = *(_QWORD *)(v0 + 208);
        *(Swift::String_optional *)(v0 + 128) = v12;
        *(_QWORD *)(v0 + 112) = v33;
        *(_QWORD *)(v0 + 120) = v32;
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
    }
  }
  v7 = *(_QWORD *)(v0 + 184);
  if (v7)
  {
    *(_QWORD *)(v0 + 144) = v7;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v8 = BidirectionalCollection<>.joined(separator:)();
    v10 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
    v10 = 0xE000000000000000;
  }
  *(_QWORD *)(v0 + 48) = v8;
  *(_QWORD *)(v0 + 56) = v10;
  *(_QWORD *)(v0 + 64) = 58;
  *(_QWORD *)(v0 + 72) = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v22 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (v22[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      v27 = "Unable to parse a contact name from the text content received from a short code";
      goto LABEL_23;
    }
LABEL_24:
    v28 = *(_QWORD *)(v0 + 208);

    goto LABEL_25;
  }
  countAndFlagsBits = v22[4];
  object = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v23 || String.count.getter() > 30)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      v27 = "Unable to parse a valid contact name from the text content received from a short code";
LABEL_23:
      _os_log_impl(&dword_2475DF000, v24, v25, v27, v26, 2u);
      MEMORY[0x24957ECC0](v26, -1, -1);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  v30 = *(_QWORD *)(String.verbLikeTokens()() + 16);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v0 + 224);
  if (!v30)
  {
    v28 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 80) = countAndFlagsBits;
    *(_QWORD *)(v0 + 88) = object;
    *(_QWORD *)(v0 + 96) = v34;
    *(_QWORD *)(v0 + 104) = v31;
LABEL_33:
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
    goto LABEL_26;
  }
  v28 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  countAndFlagsBits = 0;
  object = 0;
LABEL_26:
  outlined destroy of Any?(v28, &demangling cache variable for type metadata for TrialShortcodeFactors?);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(countAndFlagsBits, object);
}

uint64_t TrialShortcodeFactors.shortCodeOverrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TrialShortcodeFactors.shortCodeOverridesConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for TrialShortcodeFactors() + 20);
  v2 = *(_QWORD *)(v0 + v1);
  v3 = v2;
  if (v2 == 1)
  {
    v3 = closure #1 in TrialShortcodeFactors.shortCodeOverridesConfig.getter(v0);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
  }
  outlined copy of [String : [String : String]]??(v2);
  return v3;
}

uint64_t closure #1 in TrialShortcodeFactors.shortCodeOverridesConfig.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = Data.init(contentsOf:options:)();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : String]]);
  lazy protocol witness table accessor for type [String : [String : String]] and conformance <> [A : B]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v6, v8);
  swift_release();
  return v10;
}

uint64_t TrialShortcodeFactors.shortCodeOverridesConfig.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TrialShortcodeFactors() + 20);
  result = outlined consume of [String : [String : String]]??(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TrialShortcodeFactors.shortCodeOverridesConfig.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = TrialShortcodeFactors.shortCodeOverridesConfig.getter();
  return TrialShortcodeFactors.shortCodeOverridesConfig.modify;
}

uint64_t TrialShortcodeFactors.shortCodeOverridesConfig.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = *(int *)(type metadata accessor for TrialShortcodeFactors() + 20);
  v6 = *(_QWORD *)(v4 + v5);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined consume of [String : [String : String]]??(v6);
    *(_QWORD *)(v4 + v5) = v3;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = outlined consume of [String : [String : String]]??(*(_QWORD *)(v4 + v5));
    *(_QWORD *)(v4 + v5) = v3;
  }
  return result;
}

Swift::Void __swiftcall TrialShortcodeFactors.runAfterInitHook()()
{
  TrialShortcodeFactors.shortCodeOverridesConfig.getter();
  swift_bridgeObjectRelease();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialShortcodeFactors.CodingKeys()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialShortcodeFactors.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TrialShortcodeFactors.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialShortcodeFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialShortcodeFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TrialShortcodeFactors.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v15 = a2;
  v18 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialShortcodeFactors.CodingKeys>);
  v16 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TrialShortcodeFactors();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(v9 + 20);
  *(_QWORD *)&v11[v12] = 1;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  lazy protocol witness table accessor for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined consume of [String : [String : String]]??(*(_QWORD *)&v11[v12]);
  }
  else
  {
    lazy protocol witness table accessor for type URL and conformance URL();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v18);
    outlined init with copy of TrialShortcodeFactors((uint64_t)v11, v15);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of TrialShortcodeFactors((uint64_t)v11);
  }
}

uint64_t TrialShortcodeFactors.init(shortCodeOverrides:shortCodeOverridesConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for TrialShortcodeFactors();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialShortcodeFactors@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrialShortcodeFactors.init(from:)(a1, a2);
}

uint64_t protocol witness for TUSAfterInitHookable.runAfterInitHook() in conformance TrialShortcodeFactors()
{
  TrialShortcodeFactors.shortCodeOverridesConfig.getter();
  return swift_bridgeObjectRelease();
}

Swift::String_optional __swiftcall TrialShortcodeFactors.lookupShortCodeOverride(for:languageCode:)(Swift::String a1, Swift::String languageCode)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String_optional result;
  uint64_t v32;

  object = languageCode._object;
  countAndFlagsBits = languageCode._countAndFlagsBits;
  v4 = a1._object;
  v5 = a1._countAndFlagsBits;
  v6 = TrialShortcodeFactors.shortCodeOverridesConfig.getter();
  if (!v6)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.standard);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_2475DF000, v21, v22, "Unable to run lookupShortCodeOverride since shortCodeOverrides is nil", v23, 2u);
      MEMORY[0x24957ECC0](v23, -1, -1);
    }

    goto LABEL_24;
  }
  v7 = v6;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_17;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v32 = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2475DF000, v25, v26, "Unable to lookupShortCodeOverride since %s does not have overrides", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v28, -1, -1);
      MEMORY[0x24957ECC0](v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_24;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for standard != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.standard);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_2475DF000, v12, v13, "Successfully looked up short code override", v14, 2u);
    MEMORY[0x24957ECC0](v14, -1, -1);
  }

  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_23;
  swift_bridgeObjectRetain();
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5, (uint64_t)v4);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v18 = 0;
    v19 = 0;
    goto LABEL_25;
  }
  v17 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v15);
  v18 = *v17;
  v19 = (void *)v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  v29 = v18;
  v30 = v19;
  result.value._object = v30;
  result.value._countAndFlagsBits = v29;
  return result;
}

uint64_t closure #1 in variable initialization expression of static ShortcodeResolutionManager.trialNamespaceManager@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for URL.DirectoryHint();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v9);

  if (v10)
  {
    v11 = (void *)MEMORY[0x24957DF1C](0xD000000000000012, 0x800000024765C610);
    v12 = (void *)MEMORY[0x24957DF1C](0x7473696C70, 0xE500000000000000);
    v13 = objc_msgSend(v10, sel_pathForResource_ofType_, v11, v12);

    if (v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v14 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
      URL.init(filePath:directoryHint:relativeTo:)();

      v15 = type metadata accessor for TrialShortcodeFactors();
      *(_QWORD *)(a1 + *(int *)(v15 + 20)) = 1;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.standard);
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v29 = v26;
        *(_DWORD *)v25 = 136315394;
        v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x800000024765C610, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 12) = 2080;
        v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x7473696C70, 0xE500000000000000, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2475DF000, v23, v24, "Unable to get file %s.%s to use for default short code overrides", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v26, -1, -1);
        MEMORY[0x24957ECC0](v25, -1, -1);
      }

      v27 = type metadata accessor for TrialShortcodeFactors();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a1, 1, 1, v27);
    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.standard);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2475DF000, v18, v19, "Unable to get SmartReplies bundle to use for default short code overrides", v20, 2u);
      MEMORY[0x24957ECC0](v20, -1, -1);
    }

    v21 = type metadata accessor for TrialShortcodeFactors();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
  }
}

uint64_t specialized ShortcodeResolutionManager.isCurrentLocaleSupported()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  void **v10;
  void **v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.autoupdatingCurrent.getter();
  Locale.identifier.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v6 = a1[2];
  if (v6)
  {
    v7 = a1[4];
    v8 = (void *)a1[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    LOBYTE(v7) = String.hasPrefix(_:)(v9);
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    v10 = (void **)(a1 + 7);
    while (--v6)
    {
      v11 = v10 + 2;
      v13 = (uint64_t)*(v10 - 1);
      v12 = *v10;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = v13;
      v14._object = v12;
      LOBYTE(v13) = String.hasPrefix(_:)(v14);
      swift_bridgeObjectRelease();
      v10 = v11;
      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for TrialShortcodeFactors()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrialShortcodeFactors;
  if (!type metadata singleton initialization cache for TrialShortcodeFactors)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of TrialShortcodeFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialShortcodeFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialShortcodeFactors.CodingKeys, &unk_2518C58B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialShortcodeFactors.CodingKeys, &unk_2518C58B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialShortcodeFactors.CodingKeys, &unk_2518C58B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialShortcodeFactors.CodingKeys, &unk_2518C58B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialShortcodeFactors.CodingKeys and conformance TrialShortcodeFactors.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x24957EC18](MEMORY[0x24BDCDB10], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x24957EC18](MEMORY[0x24BDCDB00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t outlined destroy of TrialShortcodeFactors(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrialShortcodeFactors();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialShortcodeFactors(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    if (v9 == 1)
    {
      *(uint64_t *)((char *)a1 + v8) = 1;
    }
    else
    {
      *(uint64_t *)((char *)a1 + v8) = v9;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t destroy for TrialShortcodeFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  result = *(_QWORD *)(a1 + *(int *)(a2 + 20));
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for TrialShortcodeFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  if (v8 != 1)
    v8 = swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  return a1;
}

uint64_t assignWithCopy for TrialShortcodeFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) == 1)
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRetain();
      return a1;
    }
    v10 = 1;
  }
  else
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Any?(a1 + v7, &demangling cache variable for type metadata for [String : [String : String]]?);
    v10 = *(_QWORD *)(a2 + v7);
  }
  *v8 = v10;
  return a1;
}

uint64_t initializeWithTake for TrialShortcodeFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TrialShortcodeFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) != 1)
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Any?(a1 + v7, &demangling cache variable for type metadata for [String : [String : String]]?);
    v9 = *(_QWORD *)(a2 + v7);
  }
  *v8 = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialShortcodeFactors()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_247617524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t storeEnumTagSinglePayload for TrialShortcodeFactors()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2476175B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  return result;
}

uint64_t type metadata completion function for TrialShortcodeFactors()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ShortcodeResolutionManager()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for ShortcodeResolutionManager(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ShortcodeResolutionManager(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ShortcodeResolutionManager(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ShortcodeResolutionManager()
{
  return &type metadata for ShortcodeResolutionManager;
}

uint64_t storeEnumTagSinglePayload for TrialShortcodeFactors.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2476177E0 + 4 * byte_247657120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_247617800 + 4 * byte_247657125[v4]))();
}

_BYTE *sub_2476177E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_247617800(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_247617808(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_247617810(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_247617818(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_247617820(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TrialShortcodeFactors.CodingKeys()
{
  return &unk_2518C58B0;
}

uint64_t specialized TrialShortcodeFactors.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x800000024765C5F0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t TrialSmartRepliesAssetPaths.modelConfigPath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrialSmartRepliesAssetPaths.espressoModelFilePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrialSmartRepliesAssetPaths.vocabFilePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall TrialSmartRepliesAssetPaths.init(modelConfigPath:espressoModelFilePath:vocabFilePath:)(SmartReplies::TrialSmartRepliesAssetPaths *__return_ptr retstr, Swift::String modelConfigPath, Swift::String espressoModelFilePath, Swift::String vocabFilePath)
{
  retstr->modelConfigPath = modelConfigPath;
  retstr->espressoModelFilePath = espressoModelFilePath;
  retstr->vocabFilePath = vocabFilePath;
}

uint64_t TrialSmartRepliesFactors.isMLModelEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TrialSmartRepliesFactors.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrialSmartRepliesFactors.modelDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TrialSmartRepliesFactors.modelAssetsDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TrialSmartRepliesFactors() + 28);
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TrialSmartRepliesFactors()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrialSmartRepliesFactors;
  if (!type metadata singleton initialization cache for TrialSmartRepliesFactors)
    return swift_getSingletonMetadata();
  return result;
}

SmartReplies::TrialSmartRepliesFactors::CodingKeys_optional __swiftcall TrialSmartRepliesFactors.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TrialSmartRepliesFactors.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return (SmartReplies::TrialSmartRepliesFactors::CodingKeys_optional)4;
  else
    return (SmartReplies::TrialSmartRepliesFactors::CodingKeys_optional)v3;
}

SmartReplies::TrialSmartRepliesFactors::CodingKeys_optional __swiftcall TrialSmartRepliesFactors.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SmartReplies::TrialSmartRepliesFactors::CodingKeys_optional)4;
}

uint64_t TrialSmartRepliesFactors.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TrialSmartRepliesFactors.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247617C78 + 4 * byte_2476572E0[a1]))(0x456C65646F4D6C6DLL, 0xEE0064656C62616ELL);
}

uint64_t sub_247617C78()
{
  return 0x6D614E6C65646F6DLL;
}

unint64_t sub_247617C94()
{
  return 0xD000000000000010;
}

uint64_t sub_247617CB0()
{
  return 0x7373416C65646F6DLL;
}

uint64_t TrialSmartRepliesFactors.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247617D10 + 4 * byte_2476572E4[a1]))(0x456C65646F4D6C6DLL, 0xEE0064656C62616ELL);
}

uint64_t sub_247617D10()
{
  return 0x6D614E6C65646F6DLL;
}

unint64_t sub_247617D2C()
{
  return 0xD000000000000010;
}

uint64_t sub_247617D48()
{
  return 0x7373416C65646F6DLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TrialSmartRepliesFactors.CodingKeys(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_247617DD8@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_247617E44 + 4 * byte_2476572EC[a1]))(0x6D614E6C65646F6DLL);
}

uint64_t sub_247617E44(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D614E6C65646F6DLL && v1 == 0xE900000000000065)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance TrialSmartRepliesFactors.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247617F54()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TrialSmartRepliesFactors.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_24761801C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TrialSmartRepliesFactors.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_2476180DC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TrialSmartRepliesFactors.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TrialSmartRepliesFactors.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TrialSmartRepliesFactors.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2476181C4 + 4 * byte_2476572FC[*v0]))();
}

void sub_2476181C4(_QWORD *a1@<X8>)
{
  *a1 = 0x6D614E6C65646F6DLL;
  a1[1] = 0xE900000000000065;
}

void sub_2476181E4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000024765ADE0;
}

void sub_247618204(_QWORD *a1@<X8>)
{
  *a1 = 0x7373416C65646F6DLL;
  a1[1] = 0xEB00000000737465;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialSmartRepliesFactors.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247618264 + 4 * byte_247657300[*v0]))(0x456C65646F4D6C6DLL, 0xEE0064656C62616ELL);
}

uint64_t sub_247618264()
{
  return 0x6D614E6C65646F6DLL;
}

unint64_t sub_247618280()
{
  return 0xD000000000000010;
}

uint64_t sub_24761829C()
{
  return 0x7373416C65646F6DLL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialSmartRepliesFactors.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TrialSmartRepliesFactors.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TrialSmartRepliesFactors.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialSmartRepliesFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialSmartRepliesFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TrialSmartRepliesFactors.assetPaths.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14[6];

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for TrialSmartRepliesFactors() + 32));
  v4 = *v3;
  v5 = v3[1];
  v6 = *v3;
  v7 = v5;
  v8 = v3[2];
  v9 = v3[3];
  v10 = v3[4];
  v11 = v3[5];
  if (v5 == 1)
  {
    v13 = *v3;
    closure #1 in TrialSmartRepliesFactors.assetPaths.getter(v1, v14);
    v6 = v14[0];
    v7 = v14[1];
    v8 = v14[2];
    v9 = v14[3];
    v10 = v14[4];
    v11 = v14[5];
    *v3 = v14[0];
    v3[1] = v7;
    v3[2] = v8;
    v3[3] = v9;
    v3[4] = v10;
    v3[5] = v11;
    outlined retain of TrialSmartRepliesAssetPaths?(v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TrialSmartRepliesAssetPaths?);
    v4 = v13;
  }
  result = outlined copy of TrialSmartRepliesAssetPaths??(v4, v5);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  return result;
}

uint64_t closure #1 in TrialSmartRepliesFactors.assetPaths.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  void (*v43)(_QWORD, _QWORD);
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  char *v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, uint64_t);
  id v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD);
  uint64_t v71;
  uint64_t result;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  char v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t inited;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  Swift::String v104;
  uint64_t countAndFlagsBits;
  void *object;
  void (*v107)(char *, uint64_t);
  char *v108;
  Swift::String v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  void *v112;
  Swift::String v113;
  uint64_t v114;
  char *v115;
  void *v116;
  uint64_t v117;
  id v118;
  void *v119;
  char *v120;
  id v121;
  void *v122;
  char *v123;
  id v124;
  void *v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t *v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  _BOOL4 v140;
  uint64_t (*v141)(char *, uint64_t);
  uint8_t *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  char *v149;
  uint64_t *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t, uint64_t);
  char *v162;
  void (*v163)(_QWORD, _QWORD);
  __int128 v164;
  uint64_t v165;
  id v166[3];
  NSURL v167;

  v150 = a2;
  v166[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v153 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v160 = (char *)&v148 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v148 - v8;
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v149 = (char *)&v148 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v155 = (char *)&v148 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v158 = (char *)&v148 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v157 = (char *)&v148 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v154 = (char *)&v148 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v162 = (char *)&v148 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v156 = (char *)&v148 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v152 = (char *)&v148 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v148 - v31;
  v33 = type metadata accessor for TrialSmartRepliesFactors();
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v34(v32, a1 + *(int *)(v33 + 28), v10);
  v35 = (void *)objc_opt_self();
  v36 = objc_msgSend(v35, sel_defaultManager);
  v151 = v32;
  URL._bridgeToObjectiveC()(&v167);
  v38 = v37;
  v166[0] = 0;
  v39 = objc_msgSend(v36, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v37, 0, 0, v166);

  v40 = v166[0];
  if (!v39)
  {
    v56 = v166[0];
    v57 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for standard != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.standard);
    v59 = v151;
    v34(v14, (uint64_t)v151, v10);
    v60 = v57;
    v61 = v57;
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = swift_slowAlloc();
      v163 = (void (*)(_QWORD, _QWORD))swift_slowAlloc();
      *(_QWORD *)&v164 = swift_slowAlloc();
      v166[0] = (id)v164;
      *(_DWORD *)v64 = 136315394;
      lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB28]);
      v65 = dispatch thunk of CustomStringConvertible.description.getter();
      v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v67 = *(void (**)(char *, uint64_t))(v11 + 8);
      v67(v14, v10);
      *(_WORD *)(v64 + 12) = 2112;
      v68 = v57;
      v69 = _swift_stdlib_bridgeErrorToNSError();
      v165 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v70 = v163;
      *(_QWORD *)v163 = v69;

      _os_log_impl(&dword_2475DF000, v62, v63, "Unable to search directory %s for SmartReplies assets: %@", (uint8_t *)v64, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v70, -1, -1);
      v71 = v164;
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v71, -1, -1);
      MEMORY[0x24957ECC0](v64, -1, -1);

      result = ((uint64_t (*)(char *, uint64_t))v67)(v151, v10);
    }
    else
    {

      v135 = *(void (**)(char *, uint64_t))(v11 + 8);
      v135(v14, v10);

      result = ((uint64_t (*)(char *, uint64_t))v135)(v59, v10);
    }
    goto LABEL_79;
  }
  v148 = v35;
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v42 = v40;

  v166[0] = (id)MEMORY[0x24BEE4AF8];
  v43 = *(void (**)(_QWORD, _QWORD))(v41 + 16);
  swift_bridgeObjectRetain();
  v161 = v34;
  v159 = v41;
  v163 = v43;
  if (!v43)
  {
    *(_QWORD *)&v164 = *(_QWORD *)(v11 + 56);
    v45 = (uint64_t)v160;
LABEL_22:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v164)(v9, 1, 1, v10);
LABEL_24:
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for URL?);
    v156 = (char *)v166[0];
    v166[0] = (id)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    if (v163)
    {
      v73 = 0;
      while (1)
      {
        if (v73 >= *(_QWORD *)(v41 + 16))
          goto LABEL_86;
        v74 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v75 = *(_QWORD *)(v11 + 72);
        v34((char *)v45, v41 + v74 + v75 * v73, v10);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v164)(v45, 0, 1, v10);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v45, 1, v10) == 1)
          goto LABEL_46;
        v76 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v76(v162, v45, v10);
        if (URL.pathExtension.getter() == 7235938 && v77 == 0xE300000000000000)
          break;
        v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v78 = v154;
        v34(v154, (uint64_t)v162, v10);
        if ((v79 & 1) != 0)
          goto LABEL_35;
        if (URL.pathExtension.getter() == 7628142 && v80 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          v78 = v154;
          goto LABEL_35;
        }
        v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v85 = *(void (**)(char *, uint64_t))(v11 + 8);
        v85(v154, v10);
        if ((v84 & 1) != 0)
          goto LABEL_36;
        v85(v162, v10);
LABEL_41:
        ++v73;
        v45 = (uint64_t)v160;
        if (v163 == (void (*)(_QWORD, _QWORD))v73)
          goto LABEL_45;
      }
      swift_bridgeObjectRelease();
      v78 = v154;
      v34(v154, (uint64_t)v162, v10);
LABEL_35:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_36:
      v76(v157, (uint64_t)v162, v10);
      v81 = (char *)v166[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v81 + 2) + 1, 1);
        v81 = (char *)v166[0];
      }
      v83 = *((_QWORD *)v81 + 2);
      v82 = *((_QWORD *)v81 + 3);
      if (v83 >= v82 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1);
        v81 = (char *)v166[0];
      }
      *((_QWORD *)v81 + 2) = v83 + 1;
      v76(&v81[v74 + v83 * v75], (uint64_t)v157, v10);
      v166[0] = v81;
      v34 = v161;
      goto LABEL_41;
    }
LABEL_45:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v164)(v45, 1, 1, v10);
LABEL_46:
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v45, (uint64_t *)&demangling cache variable for type metadata for URL?);
    v162 = (char *)v166[0];
    v166[0] = (id)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    v86 = (uint64_t)v153;
    if (v163)
    {
      v87 = 0;
      while (1)
      {
        if (v87 >= *(_QWORD *)(v41 + 16))
          goto LABEL_87;
        v88 = v41;
        v89 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v90 = *(_QWORD *)(v11 + 72);
        v34((char *)v86, v88 + v89 + v90 * v87, v10);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v164)(v86, 0, 1, v10);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v86, 1, v10) == 1)
          goto LABEL_62;
        v91 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v91(v158, v86, v10);
        if (URL.pathExtension.getter() == 1701409396 && v92 == 0xE400000000000000)
          break;
        v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v93 & 1) != 0)
          goto LABEL_56;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v158, v10);
LABEL_49:
        ++v87;
        v34 = v161;
        v41 = v159;
        v86 = (uint64_t)v153;
        if (v163 == (void (*)(_QWORD, _QWORD))v87)
          goto LABEL_61;
      }
      swift_bridgeObjectRelease();
LABEL_56:
      v91(v155, (uint64_t)v158, v10);
      v94 = (char *)v166[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v94 + 2) + 1, 1);
        v94 = (char *)v166[0];
      }
      v96 = *((_QWORD *)v94 + 2);
      v95 = *((_QWORD *)v94 + 3);
      if (v96 >= v95 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
        v94 = (char *)v166[0];
      }
      *((_QWORD *)v94 + 2) = v96 + 1;
      v91(&v94[v89 + v96 * v90], (uint64_t)v155, v10);
      v166[0] = v94;
      goto LABEL_49;
    }
LABEL_61:
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v164)(v86, 1, 1, v10);
LABEL_62:
    swift_bridgeObjectRelease();
    outlined destroy of Any?(v86, (uint64_t *)&demangling cache variable for type metadata for URL?);
    v97 = (char *)v166[0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[URL]>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_247656A20;
    v99 = v156;
    v100 = v162;
    *(_QWORD *)(inited + 32) = v156;
    *(_QWORD *)(inited + 40) = v100;
    *(_QWORD *)(inited + 48) = v97;
    if (*((_QWORD *)v99 + 2) == 1 && *((_QWORD *)v100 + 2) == 1)
    {
      v164 = xmmword_247656A20;
      v101 = *((_QWORD *)v97 + 2);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      if (v101 == 1)
      {
        swift_bridgeObjectRelease();
        if (*((_QWORD *)v99 + 2))
        {
          v102 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
          v103 = v149;
          v34(v149, (uint64_t)&v99[v102], v10);
          swift_release();
          v104 = URL.path(percentEncoded:)(1);
          countAndFlagsBits = v104._countAndFlagsBits;
          object = v104._object;
          v107 = *(void (**)(char *, uint64_t))(v11 + 8);
          v108 = v103;
          v107(v103, v10);
          if (*((_QWORD *)v100 + 2))
          {
            v34(v103, (uint64_t)&v100[v102], v10);
            swift_release();
            v109 = URL.path(percentEncoded:)(1);
            v110 = v109._countAndFlagsBits;
            v111 = (void (*)(char *, char *, uint64_t))v34;
            v112 = v109._object;
            v107(v108, v10);
            if (*((_QWORD *)v97 + 2))
            {
              v111(v108, &v97[v102], v10);
              swift_release();
              v113 = URL.path(percentEncoded:)(1);
              v114 = v113._countAndFlagsBits;
              v115 = v108;
              v116 = v113._object;
              v163 = (void (*)(_QWORD, _QWORD))v107;
              v107(v115, v10);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
              v117 = swift_allocObject();
              *(_OWORD *)(v117 + 16) = v164;
              *(Swift::String *)(v117 + 32) = v104;
              *(Swift::String *)(v117 + 48) = v109;
              *(Swift::String *)(v117 + 64) = v113;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v118 = objc_msgSend(v148, sel_defaultManager);
              v119 = (void *)MEMORY[0x24957DF1C](v104._countAndFlagsBits, v104._object);
              LODWORD(v164) = objc_msgSend(v118, sel_isReadableFileAtPath_, v119);
              swift_bridgeObjectRelease();

              if ((_DWORD)v164)
              {
                v120 = *(char **)(v117 + 56);
                *(_QWORD *)&v164 = *(_QWORD *)(v117 + 48);
                v162 = v120;
                swift_bridgeObjectRetain();
                v121 = objc_msgSend(v148, sel_defaultManager);
                v122 = (void *)MEMORY[0x24957DF1C](v164, v120);
                LODWORD(v164) = objc_msgSend(v121, sel_isReadableFileAtPath_, v122);
                swift_bridgeObjectRelease();

                if ((_DWORD)v164)
                {
                  v123 = *(char **)(v117 + 72);
                  *(_QWORD *)&v164 = *(_QWORD *)(v117 + 64);
                  v162 = v123;
                  swift_bridgeObjectRetain();
                  v124 = objc_msgSend(v148, sel_defaultManager);
                  v125 = (void *)MEMORY[0x24957DF1C](v164, v123);
                  LODWORD(v164) = objc_msgSend(v124, sel_isReadableFileAtPath_, v125);
                  swift_bridgeObjectRelease();

                  if ((_DWORD)v164)
                  {
                    swift_bridgeObjectRelease();
                    v163(v151, v10);
                    result = swift_bridgeObjectRelease();
                    goto LABEL_80;
                  }
                }
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (one-time initialization token for standard == -1)
              {
LABEL_82:
                v137 = type metadata accessor for Logger();
                __swift_project_value_buffer(v137, (uint64_t)static Logger.standard);
                swift_bridgeObjectRetain();
                v138 = Logger.logObject.getter();
                v139 = static os_log_type_t.fault.getter();
                v140 = os_log_type_enabled(v138, v139);
                v141 = (uint64_t (*)(char *, uint64_t))v163;
                if (v140)
                {
                  v142 = (uint8_t *)swift_slowAlloc();
                  v143 = (void *)swift_slowAlloc();
                  v166[0] = v143;
                  *(_DWORD *)v142 = 136315138;
                  v144 = swift_bridgeObjectRetain();
                  v145 = MEMORY[0x24957E108](v144, MEMORY[0x24BEE0D00]);
                  v147 = v146;
                  swift_bridgeObjectRelease();
                  v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v147, (uint64_t *)v166);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_2475DF000, v138, v139, "Some SmartReplies asset file is unreadable: %s", v142, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x24957ECC0](v143, -1, -1);
                  MEMORY[0x24957ECC0](v142, -1, -1);

                  result = ((uint64_t (*)(char *, uint64_t))v163)(v151, v10);
                }
                else
                {
                  swift_bridgeObjectRelease_n();

                  result = v141(v151, v10);
                }
                goto LABEL_79;
              }
LABEL_92:
              swift_once();
              goto LABEL_82;
            }
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_91;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
    if (one-time initialization token for standard != -1)
      goto LABEL_88;
    goto LABEL_74;
  }
  v44 = 0;
  v45 = (uint64_t)v160;
  v46 = v152;
  while (v44 < *(_QWORD *)(v41 + 16))
  {
    v47 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v48 = v41 + v47;
    v49 = *(_QWORD *)(v11 + 72);
    v34(v9, v48 + v49 * v44, v10);
    *(_QWORD *)&v164 = *(_QWORD *)(v11 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v164)(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      v41 = v159;
      goto LABEL_24;
    }
    v50 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v50(v46, v9, v10);
    if (URL.pathExtension.getter() == 0x7473696C70 && v51 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      v50(v156, v46, v10);
      v53 = (char *)v166[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v53 + 2) + 1, 1);
        v53 = (char *)v166[0];
      }
      v55 = *((_QWORD *)v53 + 2);
      v54 = *((_QWORD *)v53 + 3);
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        v53 = (char *)v166[0];
      }
      *((_QWORD *)v53 + 2) = v55 + 1;
      v50(&v53[v47 + v55 * v49], v156, v10);
      v166[0] = v53;
      v46 = v152;
      goto LABEL_5;
    }
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0)
      goto LABEL_12;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v46, v10);
LABEL_5:
    ++v44;
    v45 = (uint64_t)v160;
    v34 = v161;
    v41 = v159;
    if (v163 == (void (*)(_QWORD, _QWORD))v44)
      goto LABEL_22;
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  swift_once();
LABEL_74:
  v126 = type metadata accessor for Logger();
  __swift_project_value_buffer(v126, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain();
  v127 = Logger.logObject.getter();
  v128 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v127, v128))
  {
    v129 = (uint8_t *)swift_slowAlloc();
    v130 = (void *)swift_slowAlloc();
    v166[0] = v130;
    *(_DWORD *)v129 = 136315138;
    *(_QWORD *)&v164 = v129 + 4;
    v131 = swift_bridgeObjectRetain();
    v132 = MEMORY[0x24957E108](v131, v10);
    v134 = v133;
    swift_bridgeObjectRelease();
    v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v134, (uint64_t *)v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2475DF000, v127, v128, "There is an ambiguous mapping of files for SmartReplies assets: %s", v129, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v130, -1, -1);
    MEMORY[0x24957ECC0](v129, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v151, v10);
LABEL_79:
  countAndFlagsBits = 0;
  object = 0;
  v110 = 0;
  v112 = 0;
  v114 = 0;
  v116 = 0;
LABEL_80:
  v136 = v150;
  *v150 = countAndFlagsBits;
  v136[1] = (uint64_t)object;
  v136[2] = v110;
  v136[3] = (uint64_t)v112;
  v136[4] = v114;
  v136[5] = (uint64_t)v116;
  return result;
}

__n128 TrialSmartRepliesFactors.assetPaths.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 *v4;
  __n128 result;
  __n128 v6;
  __n128 v7;
  _OWORD v8[2];
  unint64_t v9;
  unint64_t v10;

  outlined init with take of RepliesToRobotsParameters?(a1, (uint64_t)v8, &demangling cache variable for type metadata for TrialSmartRepliesAssetPaths?);
  v6 = (__n128)v8[1];
  v7 = (__n128)v8[0];
  v2 = v9;
  v3 = v10;
  v4 = (__n128 *)(v1 + *(int *)(type metadata accessor for TrialSmartRepliesFactors() + 32));
  outlined consume of TrialSmartRepliesAssetPaths??(v4->n128_u64[0], v4->n128_i64[1]);
  result = v6;
  *v4 = v7;
  v4[1] = v6;
  v4[2].n128_u64[0] = v2;
  v4[2].n128_u64[1] = v3;
  return result;
}

void (*TrialSmartRepliesFactors.assetPaths.modify(uint64_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x68uLL);
  *a1 = v3;
  v3[12] = v1;
  TrialSmartRepliesFactors.assetPaths.getter(v3);
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v3, (uint64_t)(v3 + 6), &demangling cache variable for type metadata for TrialSmartRepliesAssetPaths?);
  return TrialSmartRepliesFactors.assetPaths.modify;
}

void TrialSmartRepliesFactors.assetPaths.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = (*a1)[6];
  v11 = (*a1)[7];
  v12 = (*a1)[8];
  v13 = (*a1)[9];
  v5 = (*a1)[12];
  v9 = (*a1)[10];
  v10 = (*a1)[11];
  v6 = (uint64_t *)(v5 + *(int *)(type metadata accessor for TrialSmartRepliesFactors() + 32));
  v7 = *v6;
  v8 = v6[1];
  if ((a2 & 1) != 0)
  {
    outlined copy of TrialSmartRepliesAssetPaths?(v4, v11);
    outlined consume of TrialSmartRepliesAssetPaths??(v7, v8);
    *v6 = v4;
    v6[1] = v11;
    v6[2] = v12;
    v6[3] = v13;
    v6[4] = v9;
    v6[5] = v10;
    outlined consume of TrialSmartRepliesAssetPaths?(v3[6], v3[7]);
  }
  else
  {
    outlined consume of TrialSmartRepliesAssetPaths??(v7, v8);
    *v6 = v4;
    v6[1] = v11;
    v6[2] = v12;
    v6[3] = v13;
    v6[4] = v9;
    v6[5] = v10;
  }
  free(v3);
}

Swift::Void __swiftcall TrialSmartRepliesFactors.runAfterInitHook()()
{
  uint64_t v0[6];

  TrialSmartRepliesFactors.assetPaths.getter(v0);
  outlined retain of TrialSmartRepliesAssetPaths?(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TrialSmartRepliesAssetPaths?);
}

uint64_t TrialSmartRepliesFactors.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v25 = a2;
  v27 = type metadata accessor for URL();
  v24 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v26 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialSmartRepliesFactors.CodingKeys>);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TrialSmartRepliesFactors();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v10[*(int *)(v8 + 32)];
  *(_OWORD *)v11 = xmmword_247655FB0;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  v12 = a1[3];
  v29 = a1;
  __swift_project_boxed_opaque_existential_0(a1, v12);
  lazy protocol witness table accessor for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys();
  v13 = v6;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    return outlined consume of TrialSmartRepliesAssetPaths??(*(_QWORD *)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v30 = v7;
    v16 = v27;
    v15 = v28;
    v34 = 0;
    v17 = v13;
    v18 = (uint64_t)v10;
    *v10 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v33 = 1;
    *((_QWORD *)v10 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v10 + 2) = v19;
    v32 = 2;
    *((_QWORD *)v10 + 3) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v10 + 4) = v20;
    v31 = 3;
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB10]);
    v21 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v15);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v18 + *(int *)(v30 + 28), v21, v16);
    outlined init with copy of TrialSmartRepliesFactors(v18, v25);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    return outlined destroy of TrialSmartRepliesFactors(v18);
  }
}

uint64_t TrialSmartRepliesFactors.init(isMLModelEnabled:modelName:modelDescription:modelAssetsDirectory:assetPaths:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  v11 = type metadata accessor for TrialSmartRepliesFactors();
  v12 = a8 + *(int *)(v11 + 28);
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a6, v13);
  return outlined init with take of RepliesToRobotsParameters?(a7, a8 + *(int *)(v11 + 32), &demangling cache variable for type metadata for TrialSmartRepliesAssetPaths??);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialSmartRepliesFactors@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrialSmartRepliesFactors.init(from:)(a1, a2);
}

_QWORD *protocol witness for TUSAfterInitHookable.runAfterInitHook() in conformance TrialSmartRepliesFactors()
{
  uint64_t v1[6];

  TrialSmartRepliesFactors.assetPaths.getter(v1);
  return outlined retain of TrialSmartRepliesAssetPaths?(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TrialSmartRepliesAssetPaths?);
}

uint64_t TrialSmartRepliesFactors.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x6D614E6C65646F6DLL;
  v1._object = (void *)0xEB00000000203A65;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x800000024765C630;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000017;
  v9._object = (void *)0x800000024765C650;
  String.append(_:)(v9);
  type metadata accessor for TrialSmartRepliesFactors();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB28]);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x800000024765C670;
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  if (*(_BYTE *)v0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if (*(_BYTE *)v0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t one-time initialization function for shared()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;

  type metadata accessor for ModelAssetLoader();
  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of ModelAssetLoader.().init());
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 112) = result;
  *(_QWORD *)(v0 + 120) = v2;
  static ModelAssetLoader.shared = v0;
  return result;
}

uint64_t *ModelAssetLoader.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static ModelAssetLoader.shared;
}

uint64_t static ModelAssetLoader.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static ModelAssetLoader.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static ModelAssetLoader.shared = a1;
  return swift_release();
}

uint64_t (*static ModelAssetLoader.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.recipients.modify;
}

uint64_t static ModelAssetLoader.getDefaultModelAssets(language:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  void *v19;
  id v20;
  uint64_t countAndFlagsBits;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  unsigned __int8 v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65[2];

  v60 = a2;
  v65[1] = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for URL.DirectoryHint();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v14 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v13);

  if (v14)
  {
    v56 = v10;
    v57 = v9;
    v59 = a3;
    v55 = v14;
    v15 = objc_msgSend(v14, sel_bundleURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v64[0] = 0xD000000000000010;
    v64[1] = 0x800000024765C690;
    v16 = *MEMORY[0x24BDCD790];
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
    v17(v8, v16, v5);
    lazy protocol witness table accessor for type String and conformance String();
    URL.append<A>(path:directoryHint:)();
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v8, v5);
    v58 = a1;
    v64[0] = a1;
    v19 = v60;
    v64[1] = v60;
    v17(v8, v16, v5);
    URL.append<A>(path:directoryHint:)();
    v18(v8, v5);
    v62 = 0;
    v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
    v22 = (void *)MEMORY[0x24957DF1C](countAndFlagsBits);
    swift_bridgeObjectRelease();
    v23 = objc_msgSend(v20, sel_fileExistsAtPath_isDirectory_, v22, &v62);

    if (v23 && v62 == 1)
    {
      strcpy((char *)v64, "mhm-default-");
      BYTE5(v64[1]) = 0;
      HIWORD(v64[1]) = -5120;
      v24 = v58;
      v25._countAndFlagsBits = v58;
      v25._object = v19;
      String.append(_:)(v25);
      v26 = v64[0];
      v27 = v64[1];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v64[0] = 0xD000000000000012;
      v64[1] = 0x800000024765C6B0;
      v28._countAndFlagsBits = v24;
      v28._object = v19;
      String.append(_:)(v28);

      v29 = v64[0];
      v30 = v64[1];
      v31 = type metadata accessor for TrialSmartRepliesFactors();
      v32 = v59;
      v34 = v56;
      v33 = v57;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v59 + *(int *)(v31 + 28), v12, v57);
      *(_BYTE *)v32 = 1;
      *(_QWORD *)(v32 + 8) = v26;
      *(_QWORD *)(v32 + 16) = v27;
      *(_QWORD *)(v32 + 24) = v29;
      *(_QWORD *)(v32 + 32) = v30;
      v35 = (_OWORD *)(v32 + *(int *)(v31 + 32));
      *v35 = xmmword_247655FB0;
      v35[1] = 0u;
      v35[2] = 0u;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v32, 0, 1, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v12, v33);
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain_n();
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.info.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = v58;
      v42 = v59;
      if (v40)
      {
        v43 = swift_slowAlloc();
        v44 = swift_slowAlloc();
        v65[0] = v44;
        *(_DWORD *)v43 = 136315650;
        swift_bridgeObjectRetain();
        v64[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, (unint64_t)v19, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v43 + 12) = 2080;
        swift_beginAccess();
        v45 = URL.path(percentEncoded:)(1);
        v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45._countAndFlagsBits, (unint64_t)v45._object, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 22) = 1024;
        swift_beginAccess();
        v61 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2475DF000, v38, v39, "No default model for SmartReplies %s exist under %s due to and %{BOOL}d", (uint8_t *)v43, 0x1Cu);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v44, -1, -1);
        MEMORY[0x24957ECC0](v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }

      v52 = v56;
      v51 = v57;
      v53 = type metadata accessor for TrialSmartRepliesFactors();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v42, 1, 1, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, v51);
    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.standard);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_2475DF000, v47, v48, "Could not find SmartReplies bundle", v49, 2u);
      MEMORY[0x24957ECC0](v49, -1, -1);
    }

    v50 = type metadata accessor for TrialSmartRepliesFactors();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(a3, 1, 1, v50);
  }
}

uint64_t ModelAssetLoader.getTrialAssets(language:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return swift_task_switch();
}

uint64_t ModelAssetLoader.getTrialAssets(language:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v43;
  os_log_type_t v44;
  _BOOL4 v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v0 + 88);
      v7 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v4);
      v9 = *v7;
      v8 = v7[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10 = (uint64_t *)(v6 + 120);
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(v6 + 120) + 16)
        || (swift_bridgeObjectRetain(),
            swift_bridgeObjectRetain(),
            specialized __RawDictionaryStorage.find<A>(_:)(v9, v8),
            v12 = v11,
            swift_bridgeObjectRelease(),
            swift_bridgeObjectRelease(),
            (v12 & 1) == 0))
      {
        if (one-time initialization token for standard != -1)
          swift_once();
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.standard);
        swift_bridgeObjectRetain_n();
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.info.getter();
        v16 = os_log_type_enabled(v14, v15);
        v17 = *(_QWORD *)(v0 + 80);
        v53 = v9;
        if (v16)
        {
          v52 = *(_QWORD *)(v0 + 72);
          v18 = (uint8_t *)swift_slowAlloc();
          v19 = swift_slowAlloc();
          v54 = v19;
          *(_DWORD *)v18 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v17, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_2475DF000, v14, v15, "Initializing namespace manager for SmartReplies for language %s", v18, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24957ECC0](v19, -1, -1);
          MEMORY[0x24957ECC0](v18, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialNamespaceManager<TrialSmartRepliesFactors>);
        v29 = one-time initialization token for smartReplies;
        swift_bridgeObjectRetain_n();
        if (v29 != -1)
          swift_once();
        v31 = *(_QWORD *)(v0 + 72);
        v30 = *(_QWORD *)(v0 + 80);
        v32 = (void *)static TRIClient.smartReplies;
        v33 = swift_allocObject();
        *(_QWORD *)(v33 + 16) = v31;
        *(_QWORD *)(v33 + 24) = v30;
        v34 = objc_allocWithZone(MEMORY[0x24BEBA918]);
        swift_bridgeObjectRetain();
        v35 = v32;
        objc_msgSend(v34, sel_initWithAllowsCellular_discretionaryBehavior_, 0, 2);
        v9 = v53;
        v36 = TUSTrialNamespaceManager.__allocating_init(namespaceName:trialClient:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)();
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v54 = *v10;
        *v10 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v53, v8, isUniquelyReferenced_nonNull_native);
        *v10 = v54;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
      v38 = *v10;
      if (*(_QWORD *)(*v10 + 16))
      {
        swift_bridgeObjectRetain();
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
        if ((v40 & 1) != 0)
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
          *(_QWORD *)(v0 + 96) = v41;
          swift_retain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)v41 + 264);
          return swift_task_switch();
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for standard != -1)
        swift_once();
      v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain_n();
      v21 = Logger.logObject.getter();
      v44 = static os_log_type_t.fault.getter();
      v45 = os_log_type_enabled(v21, v44);
      v46 = *(_QWORD *)(v0 + 80);
      if (v45)
      {
        v47 = *(_QWORD *)(v0 + 72);
        v48 = (uint8_t *)swift_slowAlloc();
        v49 = swift_slowAlloc();
        v54 = v49;
        *(_DWORD *)v48 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2475DF000, v21, v44, "There is no namespace manager for language %s despite expecting one", v48, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v49, -1, -1);
        v28 = v48;
        goto LABEL_27;
      }
LABEL_28:
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for standard != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 80);
  if (!v23)
    goto LABEL_28;
  v25 = *(_QWORD *)(v0 + 72);
  v26 = (uint8_t *)swift_slowAlloc();
  v27 = swift_slowAlloc();
  v54 = v27;
  *(_DWORD *)v26 = 136315138;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_2475DF000, v21, v22, "Unable to get a SmartReplies Trial namespace for language %s", v26, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x24957ECC0](v27, -1, -1);
  v28 = v26;
LABEL_27:
  MEMORY[0x24957ECC0](v28, -1, -1);
LABEL_29:

  v50 = *(_QWORD *)(v0 + 64);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(void))(v0 + 104))();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL closure #1 in ModelAssetLoader.getTrialAssets(language:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::Bool v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for TrialSmartRepliesFactors();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5._countAndFlagsBits = 7170157;
  v5._object = (void *)0xE300000000000000;
  v6 = String.hasPrefix(_:)(v5);
  if (one-time initialization token for standard != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.standard);
  outlined init with copy of TrialSmartRepliesFactors(a1, (uint64_t)v4);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = TrialSmartRepliesFactors.description.getter();
    v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TrialSmartRepliesFactors((uint64_t)v4);
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v15) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2475DF000, v8, v9, "Factors from Trial %s is considered valid %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v11, -1, -1);
    MEMORY[0x24957ECC0](v10, -1, -1);
  }
  else
  {
    outlined destroy of TrialSmartRepliesFactors((uint64_t)v4);
  }

  return v6;
}

uint64_t ModelAssetLoader.getModelAssets(language:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  _QWORD *v8;

  v4[2] = a1;
  v4[3] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  v7 = swift_task_alloc();
  v4[4] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v4[5] = v8;
  *v8 = v4;
  v8[1] = ModelAssetLoader.getModelAssets(language:);
  v8[10] = a3;
  v8[11] = v3;
  v8[8] = v7;
  v8[9] = a2;
  return swift_task_switch();
}

uint64_t ModelAssetLoader.getModelAssets(language:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
  v3 = 1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v4 = (uint64_t *)&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?;
  }
  else
  {
    outlined init with copy of TrialSmartRepliesFactors(v1, *(_QWORD *)(v0 + 16));
    v3 = 0;
    v4 = &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>;
  }
  outlined destroy of Any?(v1, v4);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = type metadata accessor for TrialSmartRepliesFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, v3, 1, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModelAssetLoader.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ModelAssetLoader.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ModelAssetLoader.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance ModelAssetLoader()
{
  uint64_t v0;

  return v0;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(double *)(v18[7] + 8 * v12) = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a1;
    v20[1] = a2;
    *(double *)(v18[7] + 8 * v12) = a4;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFStringRef(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v10;
  v12 = *(_QWORD *)(v8 + 16);
  v13 = (v9 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v9;
  v16 = *(_QWORD *)(v8 + 24);
  if (v16 >= v14 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v17 = (_QWORD *)*v4;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18 + 8 * v11) = a1;
      return;
    }
LABEL_11:
    v17[(v11 >> 6) + 8] |= 1 << v11;
    *(_BYTE *)(v17[6] + v11) = a2;
    *(_QWORD *)(v17[7] + 8 * v11) = a1;
    v21 = v17[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v17[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) == (v20 & 1))
  {
    v11 = v19;
    v17 = (_QWORD *)*v4;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a4[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized TrialSmartRepliesFactors.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TrialSmartRepliesFactors.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t outlined copy of TrialSmartRepliesAssetPaths?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of TrialSmartRepliesAssetPaths??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return outlined copy of TrialSmartRepliesAssetPaths?(a1, a2);
  return a1;
}

uint64_t outlined consume of TrialSmartRepliesAssetPaths??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return outlined consume of TrialSmartRepliesAssetPaths?(a1, a2);
  return a1;
}

uint64_t outlined consume of TrialSmartRepliesAssetPaths?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *outlined retain of TrialSmartRepliesAssetPaths?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialSmartRepliesFactors.CodingKeys, &type metadata for TrialSmartRepliesFactors.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialSmartRepliesFactors.CodingKeys, &type metadata for TrialSmartRepliesFactors.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialSmartRepliesFactors.CodingKeys, &type metadata for TrialSmartRepliesFactors.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialSmartRepliesFactors.CodingKeys, &type metadata for TrialSmartRepliesFactors.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialSmartRepliesFactors.CodingKeys and conformance TrialSmartRepliesFactors.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TrialSmartRepliesFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialSmartRepliesFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TrialSmartRepliesFactors(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrialSmartRepliesFactors();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24761BDDC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ModelAssetLoader.getTrialAssets(language:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  type metadata accessor for ModelAssetLoader();
  return static ModelAssetLoader.getDefaultModelAssets(language:)(v4, v3, a1);
}

uint64_t destroy for TrialSmartRepliesAssetPaths()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TrialSmartRepliesAssetPaths(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TrialSmartRepliesAssetPaths(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TrialSmartRepliesAssetPaths(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialSmartRepliesAssetPaths(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrialSmartRepliesAssetPaths(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrialSmartRepliesAssetPaths()
{
  return &type metadata for TrialSmartRepliesAssetPaths;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialSmartRepliesFactors(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a2[4];
    v9 = *(int *)(a3 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    a1[3] = a2[3];
    a1[4] = v8;
    v12 = type metadata accessor for URL();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    if (v17 > 1)
    {
      *v15 = *v16;
      v15[1] = v17;
      v20 = v16[3];
      v15[2] = v16[2];
      v15[3] = v20;
      v21 = v16[5];
      v15[4] = v16[4];
      v15[5] = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
  }
  return v4;
}

unint64_t destroy for TrialSmartRepliesFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = *(_QWORD *)(a1 + *(int *)(a2 + 32) + 8);
  if (result >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TrialSmartRepliesFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 32);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  if (v16 > 1)
  {
    *v14 = *v15;
    v14[1] = v16;
    v18 = v15[3];
    v14[2] = v15[2];
    v14[3] = v18;
    v19 = v15[5];
    v14[4] = v15[4];
    v14[5] = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v17;
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  }
  return a1;
}

uint64_t assignWithCopy for TrialSmartRepliesFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = *(_QWORD *)(a1 + v10 + 8);
  v14 = v12[1];
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of Any?((uint64_t)v11, &demangling cache variable for type metadata for TrialSmartRepliesAssetPaths?);
    }
    else
    {
      if (!v13)
      {
        if (!v14)
          goto LABEL_3;
LABEL_11:
        *v11 = *v12;
        v11[1] = v12[1];
        v11[2] = v12[2];
        v11[3] = v12[3];
        v11[4] = v12[4];
        v11[5] = v12[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
      if (v14)
      {
        *v11 = *v12;
        v11[1] = v12[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11[2] = v12[2];
        v11[3] = v12[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11[4] = v12[4];
        v11[5] = v12[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
      outlined destroy of TrialSmartRepliesAssetPaths((uint64_t)v11);
    }
    v18 = *((_OWORD *)v12 + 1);
    v17 = *((_OWORD *)v12 + 2);
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *((_OWORD *)v11 + 1) = v18;
    *((_OWORD *)v11 + 2) = v17;
    return a1;
  }
  if (v14 > 1)
    goto LABEL_11;
LABEL_3:
  v15 = *(_OWORD *)v12;
  v16 = *((_OWORD *)v12 + 2);
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  *((_OWORD *)v11 + 2) = v16;
  *(_OWORD *)v11 = v15;
  return a1;
}

uint64_t outlined destroy of TrialSmartRepliesAssetPaths(uint64_t a1)
{
  destroy for TrialSmartRepliesAssetPaths();
  return a1;
}

uint64_t initializeWithTake for TrialSmartRepliesFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  return a1;
}

uint64_t assignWithTake for TrialSmartRepliesFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a1 + v12 + 8);
  v16 = *(_QWORD *)(v14 + 8);
  if (v15 == 1)
    goto LABEL_8;
  if (v16 == 1)
  {
    outlined destroy of Any?(v13, &demangling cache variable for type metadata for TrialSmartRepliesAssetPaths?);
LABEL_8:
    v19 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v19;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
    return a1;
  }
  if (!v15)
    goto LABEL_8;
  if (!v16)
  {
    outlined destroy of TrialSmartRepliesAssetPaths(v13);
    goto LABEL_8;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 24) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v13 + 40) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialSmartRepliesFactors()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24761C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TrialSmartRepliesFactors()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24761C818(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TrialSmartRepliesFactors()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TrialSmartRepliesFactors.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24761C960 + 4 * byte_247657309[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24761C994 + 4 * byte_247657304[v4]))();
}

uint64_t sub_24761C994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24761C99C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24761C9A4);
  return result;
}

uint64_t sub_24761C9B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24761C9B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24761C9BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24761C9C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrialSmartRepliesFactors.CodingKeys()
{
  return &type metadata for TrialSmartRepliesFactors.CodingKeys;
}

uint64_t type metadata accessor for ModelAssetLoader()
{
  return objc_opt_self();
}

uint64_t method lookup function for ModelAssetLoader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ModelAssetLoader.getTrialAssets(language:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 136)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 136));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ModelAssetLoader.getModelAssets(language:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 144)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 144));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return v10(a1, a2, a3);
}

uint64_t String.nounKeywords()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = 1;
  return specialized StringRake.rankedKeywords(from:style:maxCount:)(a1, a2, &v3, 10);
}

uint64_t String.properNounKeywords()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = 2;
  return specialized StringRake.rankedKeywords(from:style:maxCount:)(a1, a2, &v3, 10);
}

uint64_t String.keywords()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = 0;
  return specialized StringRake.rankedKeywords(from:style:maxCount:)(a1, a2, &v3, 10);
}

uint64_t AddressActionMetadataProvider.init(contactDataSource:)(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return a1;
}

uint64_t AddressActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t AddressActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(v0 + 32);
  if (!v4)
  {
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v4 = v5;
    else
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  swift_bridgeObjectRelease();
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v6 = (void *)v4[4];
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_12:
    v11 = AddressActionMetadataProvider.addressMetadata(for:)(*(void **)(v0 + 56), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(id))(v0 + 8))(v11);
  }
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v10 = v7;
  v11 = AddressActionMetadataProvider.addressMetadata(for:)(v6, v9, v8);

  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

id AddressActionMetadataProvider.addressMetadata(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(void);
  id v15;
  unint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSBundle *v21;
  NSBundle v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  id v36;
  id v37;
  unint64_t v39;
  id v40;
  id v41;
  Swift::String v42;

  v8 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  v14 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 160);
  v15 = a1;
  v16 = v14();
  if (!(v16 >> 62))
  {
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_17;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_17:

    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v16 & 0xC000000000000001) != 0)
  {
    v17 = (id)MEMORY[0x24957E42C](0, v16);
  }
  else
  {
    if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_22:
      swift_once();
      goto LABEL_9;
    }
    v17 = *(id *)(v16 + 32);
  }
  v18 = v17;
  v4 = 0xD000000000000014;
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD98]), sel_init);
  v41 = v18;
  v19 = objc_msgSend(v40, sel_stringFromPostalAddress_, v18);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v20;

  v14 = (uint64_t (*)(void))&static NSBundle.current;
  if (!objc_msgSend(v15, sel_isEqual_, a3))
  {
    if (one-time initialization token for current != -1)
      swift_once();
    v21 = (NSBundle *)&static NSBundle.current;
    v22.super.isa = (Class)static NSBundle.current;
    v23 = 0xD00000000000001ELL;
    v39 = 0xE000000000000000;
    v24 = "ADDRESS_FRIENDLY_STRING_FORMAT";
    goto LABEL_13;
  }
  if (one-time initialization token for current != -1)
    goto LABEL_22;
LABEL_9:
  v21 = (NSBundle *)v14;
  v22.super.isa = *(Class *)v14;
  v23 = v4 + 18;
  v39 = 0xE000000000000000;
  v24 = "ADDRESS_ME_CARD_FRIENDLY_STRING_FORMAT";
LABEL_13:
  v25 = (unint64_t)(v24 - 32) | 0x8000000000000000;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v27 = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v23, (Swift::String_optional)0, v22, v26, *(Swift::String *)(&v39 - 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_247656500;
  *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v28 + 32) = v16;
  *(_QWORD *)(v28 + 40) = v3;
  swift_bridgeObjectRetain();
  v29 = static String.localizedStringWithFormat(_:_:)();
  v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for current != -1)
    swift_once();
  v42._object = (void *)0xE000000000000000;
  v32._object = (void *)0x800000024765BCC0;
  v32._countAndFlagsBits = 0xD000000000000014;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v21->super.isa, v33, v42);
  v35 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v13, 1, 1, v35);
  Date.init()();
  v36 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
  v37 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(5, v16, v3, v34._countAndFlagsBits, (uint64_t)v34._object, v29, v31, (uint64_t)v10, -1.0, -1.0, 0, (uint64_t)v13, 0, 0, 2);

  return v37;
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance AddressActionMetadataProvider(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  v6[6] = v5;
  v6[7] = v4;
  v6[5] = a1;
  return swift_task_switch();
}

_QWORD *initializeBufferWithCopyOfBuffer for AddressActionMetadataProvider(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for AddressActionMetadataProvider(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for AddressActionMetadataProvider(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AddressActionMetadataProvider()
{
  return &type metadata for AddressActionMetadataProvider;
}

uint64_t ActionLocationDataSource.__allocating_init()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 0;
  v1 = ActionLocationDataSource.locationManager.getter();
  objc_msgSend(v1, sel_setDesiredAccuracy_, *MEMORY[0x24BDBFB58]);

  v2 = ActionLocationDataSource.locationManager.getter();
  objc_msgSend(v2, sel_requestWhenInUseAuthorization);

  if (objc_msgSend((id)objc_opt_self(), sel_locationServicesEnabled))
  {
    v3 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v3, sel_startUpdatingLocation);

    *(_BYTE *)(v0 + 32) = 1;
  }
  return v0;
}

id ActionLocationDataSource.locationManager.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFA88]), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id ActionLocationDataSource.geocoder.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFA68]), sel_init);
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t ActionLocationDataSource.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 184))(1);
  return v0;
}

uint64_t ActionLocationDataSource.deinit()
{
  uint64_t v0;
  id v1;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v1, sel_stopUpdatingLocation);

  }
  return v0;
}

uint64_t ActionLocationDataSource.__deallocating_deinit()
{
  uint64_t v0;
  id v1;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v1, sel_stopUpdatingLocation);

  }
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall ActionLocationDataSource.prewarmDataAccessIfNecessary(synchronously:)(Swift::Bool synchronously)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;

  v2 = ActionLocationDataSource.locationManager.getter();
  objc_msgSend(v2, sel_setDesiredAccuracy_, *MEMORY[0x24BDBFB58]);

  v3 = ActionLocationDataSource.locationManager.getter();
  objc_msgSend(v3, sel_requestWhenInUseAuthorization);

  if (objc_msgSend((id)objc_opt_self(), sel_locationServicesEnabled))
  {
    v4 = ActionLocationDataSource.locationManager.getter();
    objc_msgSend(v4, sel_startUpdatingLocation);

    *(_BYTE *)(v1 + 32) = 1;
  }
}

uint64_t ActionLocationDataSource.mostRecentLocation()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  id v2;

  v1 = ActionLocationDataSource.locationManager.getter();
  v2 = objc_msgSend(v1, sel_location);

  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

uint64_t ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t ActionLocationDataSource.reverseGeocodedLocation(location:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;

  v1 = *(void **)(v0 + 24);
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLPlacemark?);
  *v5 = v0;
  v5[1] = ActionLocationDataSource.reverseGeocodedLocation(location:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLPlacemark?, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = ActionLocationDataSource.geocoder.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  aBlock[4] = partial apply for closure #1 in closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [CLPlacemark]?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_4;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel_reverseGeocodeLocation_completionHandler_, a3, v11);
  _Block_release(v11);

}

void partial apply for closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t result, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;

  if (a2)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.standard);
    v4 = a2;
    v5 = a2;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = a2;
      v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v11;

      _os_log_impl(&dword_2475DF000, v6, v7, "Unable to retrieve reverse geocoded location with error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v9, -1, -1);
      MEMORY[0x24957ECC0](v8, -1, -1);
    }
    else
    {

    }
    goto LABEL_12;
  }
  if (!result)
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLPlacemark?, Never>);
    return CheckedContinuation.resume(returning:)();
  }
  if ((result & 0xC000000000000001) != 0)
  {
    MEMORY[0x24957E42C](0, result);
    goto LABEL_12;
  }
  if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    *(id *)(result + 32);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CLPlacemark]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for CLPlacemark();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ActionDataSource.prewarmDataAccessIfNecessary(synchronously:) in conformance ActionLocationDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t type metadata accessor for ActionLocationDataSource()
{
  return objc_opt_self();
}

uint64_t method lookup function for ActionLocationDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActionLocationDataSource.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ActionLocationDataSource.prewarmDataAccessIfNecessary(synchronously:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ActionLocationDataSource.mostRecentLocation()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 192) + *(_QWORD *)(*(_QWORD *)v0 + 192));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v4();
}

uint64_t dispatch thunk of ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 200) + *(_QWORD *)(*(_QWORD *)v1 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v6(a1);
}

uint64_t sub_24761DC70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLPlacemark?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLPlacemark?, Never>);
  return closure #1 in closure #1 in ActionLocationDataSource.reverseGeocodedLocation(location:)(a1, a2);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t type metadata accessor for CLPlacemark()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CLPlacemark;
  if (!lazy cache variable for type metadata for CLPlacemark)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CLPlacemark);
  }
  return result;
}

uint64_t MetricsActionInferenceResult.componentTriggered.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

float MetricsActionInferenceResult.predictionLatency.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

uint64_t MetricsActionInferenceResult.requestLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.predictedActionInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.trialDeploymentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.trialExperimentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.trialTreatmentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionInferenceResult.promptCharacterCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t MetricsActionInferenceResult.promptEmojiCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t MetricsActionInferenceResult.rawScores.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)(SmartReplies::MetricsActionInferenceResult *__return_ptr retstr, SmartReplies::SRSmartRepliesActionSieveComponent componentTriggered, Swift::Float predictionLatency, Swift::String_optional requestLanguage, Swift::String_optional modelName, Swift::String trialDeploymentId, Swift::String trialExperimentId, Swift::String trialTreatmentId, Swift::String prompt, Swift::OpaquePointer actionInfoStrings, Swift::OpaquePointer_optional rawScores)
{
  SmartReplies::MetricsActionInferenceResult v12;

  specialized MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)(componentTriggered);
  *retstr = v12;
}

Swift::Void __swiftcall MetricsActionInferenceResult.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2476576A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000024765C8E0;
  *(_QWORD *)(inited + 48) = MEMORY[0x24957DF1C](*v0, v0[1]);
  *(_QWORD *)(inited + 56) = 0xD000000000000011;
  *(_QWORD *)(inited + 64) = 0x800000024765C4D0;
  *(NSNumber *)(inited + 72) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x4C74736575716572;
  *(_QWORD *)(inited + 88) = 0xEF65676175676E61;
  *(_QWORD *)(inited + 96) = MEMORY[0x24957DF1C](v0[3], v0[4]);
  *(_QWORD *)(inited + 104) = 0x6D614E6C65646F6DLL;
  *(_QWORD *)(inited + 112) = 0xE900000000000065;
  *(_QWORD *)(inited + 120) = MEMORY[0x24957DF1C](v0[5], v0[6]);
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  *(_QWORD *)(inited + 136) = 0x800000024765C590;
  *(_QWORD *)(inited + 144) = MEMORY[0x24957DF1C](v0[7], v0[8]);
  *(_QWORD *)(inited + 152) = 0xD000000000000011;
  *(_QWORD *)(inited + 160) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 168) = MEMORY[0x24957DF1C](v0[9], v0[10]);
  *(_QWORD *)(inited + 176) = 0xD000000000000011;
  *(_QWORD *)(inited + 184) = 0x800000024765C510;
  *(_QWORD *)(inited + 192) = MEMORY[0x24957DF1C](v0[11], v0[12]);
  *(_QWORD *)(inited + 200) = 0xD000000000000010;
  *(_QWORD *)(inited + 208) = 0x800000024765C530;
  *(_QWORD *)(inited + 216) = MEMORY[0x24957DF1C](v0[13], v0[14]);
  *(_QWORD *)(inited + 224) = 0xD000000000000017;
  *(_QWORD *)(inited + 232) = 0x800000024765C550;
  *(NSNumber *)(inited + 240) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 248) = 0xD000000000000013;
  *(_QWORD *)(inited + 256) = 0x800000024765C570;
  *(NSNumber *)(inited + 264) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 272) = 0x65726F6353776172;
  *(_QWORD *)(inited + 280) = 0xE900000000000073;
  *(_QWORD *)(inited + 288) = MEMORY[0x24957DF1C](v0[17], v0[18]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD00000000000002BLL, 0x800000024765C900);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  aBlock[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_5;
  v5 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

void specialized MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24761E2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v10 = String.count.getter();
  v11 = (float)v10 / 5.0;
  if (v10 >= 300)
    v11 = 60.0;
  v12 = ceilf(v11);
  if ((~LODWORD(v12) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 <= -9.2234e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v12 >= 9.2234e18)
  {
LABEL_30:
    __break(1u);
    swift_release();
    __break(1u);
    JUMPOUT(0x24761E580);
  }
  v36 = v5;
  v37 = v4;
  v38 = v3;
  v35 = String.emojiCountBin()();
  swift_bridgeObjectRelease();
  if (v2)
    v13 = v2;
  else
    v13 = MEMORY[0x24BEE4AF8];
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v32 = v7;
    *(_QWORD *)(v8 - 112) = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v15 = 0;
    v16 = *(_QWORD *)(v8 - 112);
    do
    {
      v17 = Float.description.getter();
      v19 = v18;
      *(_QWORD *)(v8 - 112) = v16;
      v21 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v16 = *(_QWORD *)(v8 - 112);
      }
      ++v15;
      *(_QWORD *)(v16 + 16) = v21 + 1;
      v22 = v16 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
    }
    while (v14 != v15);
    swift_bridgeObjectRelease();
    v7 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v8 - 112) = v16;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)(v8 - 112));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v23 = BidirectionalCollection<>.joined(separator:)();
  v33 = v24;
  v34 = v23;
  swift_release();
  *(_QWORD *)(v8 - 112) = v0;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)(v8 - 112));
  swift_bridgeObjectRelease();
  if (v39)
    v25 = v39;
  else
    v25 = 0xE000000000000000;
  if (!v39)
    v7 = 0;
  if (v40)
    v26 = v40;
  else
    v26 = 0xE000000000000000;
  if (v40)
    v27 = v6;
  else
    v27 = 0;
  v28 = BidirectionalCollection<>.joined(separator:)();
  v30 = v29;
  result = swift_release();
  *(_QWORD *)v1 = 0x7865676552;
  *(_QWORD *)(v1 + 8) = 0xE500000000000000;
  *(_DWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 24) = v27;
  *(_QWORD *)(v1 + 32) = v26;
  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v25;
  *(_QWORD *)(v1 + 56) = v28;
  *(_QWORD *)(v1 + 64) = v30;
  *(_QWORD *)(v1 + 72) = v36;
  *(_QWORD *)(v1 + 80) = v37;
  *(_QWORD *)(v1 + 88) = v38;
  *(_QWORD *)(v1 + 96) = v41;
  *(_QWORD *)(v1 + 104) = v42;
  *(_QWORD *)(v1 + 112) = v43;
  *(_QWORD *)(v1 + 120) = (uint64_t)v12;
  *(_QWORD *)(v1 + 128) = v35;
  *(_QWORD *)(v1 + 136) = v34;
  *(_QWORD *)(v1 + 144) = v33;
  return result;
}

uint64_t sub_24761E590()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t destroy for MetricsActionInferenceResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsActionInferenceResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsActionInferenceResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for MetricsActionInferenceResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsActionInferenceResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsActionInferenceResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsActionInferenceResult()
{
  return &type metadata for MetricsActionInferenceResult;
}

unint64_t static String.replies.getter()
{
  return 0xD000000000000012;
}

unint64_t static String.highPrecisionActions.getter()
{
  return 0xD000000000000021;
}

unint64_t static String.noSR.getter()
{
  return 0xD000000000000010;
}

unint64_t static String.embedding.getter()
{
  return 0xD000000000000014;
}

unint64_t static String.navigateTo.getter()
{
  return 0xD000000000000016;
}

uint64_t SRSmartRepliesConversationTurn.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SRSmartRepliesConversationTurn.senderID.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID);
}

uint64_t SRSmartRepliesConversationTurn.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Date?(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, a1);
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SRSmartRepliesConversationTurn.__allocating_init(text:senderID:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  char *v13;
  id v14;
  objc_super v16;

  v11 = (char *)objc_allocWithZone(v5);
  v12 = &v11[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  v13 = &v11[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  outlined init with copy of Date?(a5, (uint64_t)&v11[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp]);
  v16.receiver = v11;
  v16.super_class = v5;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  outlined destroy of Any?(a5, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v14;
}

id SRSmartRepliesConversationTurn.init(text:senderID:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  char *v13;
  id v14;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType();
  v12 = &v5[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  v13 = &v5[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID];
  *(_QWORD *)v13 = a3;
  *((_QWORD *)v13 + 1) = a4;
  outlined init with copy of Date?(a5, (uint64_t)&v5[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp]);
  v16.receiver = v5;
  v16.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v16, sel_init);
  outlined destroy of Any?(a5, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v14;
}

uint64_t static SRSmartRepliesConversationTurn.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SRSmartRepliesConversationTurn.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text), *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text + 8));
  v7 = (void *)MEMORY[0x24957DF1C](1954047348, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID + 8))
    v8 = MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID));
  else
    v8 = 0;
  v9 = (void *)MEMORY[0x24957DF1C](0x44497265646E6573, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);
  swift_unknownObjectRelease();

  outlined init with copy of Date?(v1 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, (uint64_t)v5);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
  }
  v13 = (void *)MEMORY[0x24957DF1C](0x6D617473656D6974, 0xE900000000000070);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v13);
  swift_unknownObjectRelease();

}

id SRSmartRepliesConversationTurn.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesConversationTurn.init(coder:)(a1);
}

id SRSmartRepliesConversationTurn.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_super v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[24];
  uint64_t v40;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - v9;
  v11 = v2;
  v12 = (void *)MEMORY[0x24957DF1C](1954047348, 0xE400000000000000);
  v13 = objc_msgSend(a1, sel_decodeObjectForKey_, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v37, (uint64_t)v39);
  if (!v40)
  {

    outlined destroy of Any?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_10:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_10;
  }
  v32 = v36;
  v33 = v35;
  v14 = (void *)MEMORY[0x24957DF1C](0x44497265646E6573, 0xE800000000000000);
  v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v37, (uint64_t)v39);
  if (v40)
  {
    v17 = swift_dynamicCast();
    v18 = v35;
    if (!v17)
      v18 = 0;
    v31 = v18;
    if (v17)
      v19 = v36;
    else
      v19 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v31 = 0;
    v19 = 0;
  }
  v20 = (void *)MEMORY[0x24957DF1C](0x6D617473656D6974, 0xE900000000000070);
  v21 = objc_msgSend(a1, sel_decodeObjectForKey_, v20);

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v37, (uint64_t)v39);
  if (v40)
  {
    v22 = type metadata accessor for Date();
    v23 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v10, v23 ^ 1u, 1, v22);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v24 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 1, 1, v24);
  }

  outlined init with copy of Date?((uint64_t)v10, (uint64_t)v8);
  v25 = (char *)objc_allocWithZone(ObjectType);
  v26 = &v25[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
  v27 = v32;
  *(_QWORD *)v26 = v33;
  *((_QWORD *)v26 + 1) = v27;
  v28 = &v25[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID];
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v19;
  outlined init with copy of Date?((uint64_t)v8, (uint64_t)&v25[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp]);
  v34.receiver = v25;
  v34.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v34, sel_init);
  outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Date?);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v16;
}

void SRSmartRepliesConversationTurn.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

float SRSmartRepliesPredictionItem.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score);
}

uint64_t SRSmartRepliesPredictionItem.label.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label);
}

uint64_t SRSmartRepliesConversationTurn.senderID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

id SRSmartRepliesPredictionItem.__allocating_init(score:label:)(uint64_t a1, uint64_t a2, float a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  *(float *)&v7[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score] = a3;
  v8 = &v7[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SRSmartRepliesPredictionItem.init(score:label:)(uint64_t a1, uint64_t a2, float a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  *(float *)&v3[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score] = a3;
  v8 = &v3[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  v10.receiver = v3;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t static SRSmartRepliesPredictionItem.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SRSmartRepliesPredictionItem.encode(with:)(NSCoder with)
{
  uint64_t v1;
  int v3;
  void *v4;
  double v5;
  uint64_t v6;
  id v7;

  v3 = *(_DWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score);
  v4 = (void *)MEMORY[0x24957DF1C](0x65726F6373, 0xE500000000000000);
  LODWORD(v5) = v3;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v4, v5);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label + 8))
    v6 = MEMORY[0x24957DF1C](*(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label));
  else
    v6 = 0;
  v7 = (id)MEMORY[0x24957DF1C](0x6C6562616CLL, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);
  swift_unknownObjectRelease();

}

id SRSmartRepliesPredictionItem.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesPredictionItem.init(coder:)(a1);
}

id SRSmartRepliesPredictionItem.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  id v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  objc_super v19;
  _OWORD v20[2];
  _BYTE v21[24];
  uint64_t v22;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = v2;
  v6 = (void *)MEMORY[0x24957DF1C](0x65726F6373, 0xE500000000000000);
  objc_msgSend(a1, sel_decodeFloatForKey_, v6);
  v8 = v7;

  v9 = (void *)MEMORY[0x24957DF1C](0x6C6562616CLL, 0xE500000000000000);
  v10 = objc_msgSend(a1, sel_decodeObjectForKey_, v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v20, 0, sizeof(v20));
  }
  outlined init with take of Any?((uint64_t)v20, (uint64_t)v21);
  if (!v22)
  {
    outlined destroy of Any?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  if (!swift_dynamicCast())
  {
LABEL_8:

    v11 = 0;
    v12 = 0;
    goto LABEL_9;
  }
  v11 = v17;
  v12 = v18;

LABEL_9:
  v13 = (char *)objc_allocWithZone(ObjectType);
  *(_DWORD *)&v13[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score] = v8;
  v14 = &v13[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label];
  *(_QWORD *)v14 = v11;
  *((_QWORD *)v14 + 1) = v12;
  v19.receiver = v13;
  v19.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v19, sel_init);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v15;
}

id SRSmartRepliesPredictionItem.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesPredictionItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesConversationTurn.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for SRSmartRepliesConversationTurn()
{
  return type metadata accessor for SRSmartRepliesConversationTurn();
}

uint64_t type metadata accessor for SRSmartRepliesConversationTurn()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SRSmartRepliesConversationTurn;
  if (!type metadata singleton initialization cache for SRSmartRepliesConversationTurn)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SRSmartRepliesConversationTurn()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SRSmartRepliesConversationTurn()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesConversationTurn.__allocating_init(text:senderID:timestamp:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SRSmartRepliesConversationTurn.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for SRSmartRepliesPredictionItem()
{
  return objc_opt_self();
}

uint64_t method lookup function for SRSmartRepliesPredictionItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesPredictionItem.__allocating_init(score:label:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SRSmartRepliesPredictionItem.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)
                                                                   + async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v11(a1, a2, a3, a4);
}

uint64_t TrialExemptTermsFactors.languageToExemptTerms.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for TrialExemptTermsFactors() + 20);
  v2 = *(_QWORD *)(v0 + v1);
  v3 = v2;
  if (v2 == 1)
  {
    v3 = closure #1 in TrialExemptTermsFactors.languageToExemptTerms.getter(v0);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
  }
  outlined copy of [String : [String : String]]??(v2);
  return v3;
}

uint64_t closure #1 in TrialExemptTermsFactors.languageToExemptTerms.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = Data.init(contentsOf:options:)();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  lazy protocol witness table accessor for type [String : [String]] and conformance <> [A : B]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v6, v8);
  swift_release();
  return v10;
}

uint64_t TrialExemptTermsFactors.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v15 = a2;
  v18 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialExemptTermsFactors.CodingKeys>);
  v16 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TrialExemptTermsFactors();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(v9 + 20);
  *(_QWORD *)&v11[v12] = 1;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  lazy protocol witness table accessor for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined consume of [String : [String : String]]??(*(_QWORD *)&v11[v12]);
  }
  else
  {
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB10]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v18);
    outlined init with copy of TrialExemptTermsFactors((uint64_t)v11, v15);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of TrialExemptTermsFactors((uint64_t)v11);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialExemptTermsFactors.CodingKeys()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialExemptTermsFactors.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TrialExemptTermsFactors.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialExemptTermsFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialExemptTermsFactors.CodingKeys()
{
  lazy protocol witness table accessor for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialExemptTermsFactors@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrialExemptTermsFactors.init(from:)(a1, a2);
}

uint64_t protocol witness for TUSAfterInitHookable.runAfterInitHook() in conformance TrialExemptTermsFactors()
{
  TrialExemptTermsFactors.languageToExemptTerms.getter();
  return swift_bridgeObjectRelease();
}

unint64_t TrialExemptTermsFactors.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x24BDCDB28]);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

uint64_t closure #1 in variable initialization expression of static PredictionExemptTermsDetector.trialNamespaceManager@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for URL.DirectoryHint();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v9);

  if (v10)
  {
    v11 = (void *)MEMORY[0x24957DF1C](0xD000000000000015, 0x800000024765CA70);
    v12 = (void *)MEMORY[0x24957DF1C](0x7473696C70, 0xE500000000000000);
    v13 = objc_msgSend(v10, sel_pathForResource_ofType_, v11, v12);

    if (v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v14 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
      URL.init(filePath:directoryHint:relativeTo:)();

      v15 = type metadata accessor for TrialExemptTermsFactors();
      *(_QWORD *)(a1 + *(int *)(v15 + 20)) = 1;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
    }
    if (one-time initialization token for standard != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.standard);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_2475DF000, v22, v23, "Unable to get file PredictionExemptTerms.plist to use for default exempt terms overrides", v24, 2u);
      MEMORY[0x24957ECC0](v24, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.standard);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2475DF000, v18, v19, "Unable to get SmartReplies bundle to use for default exempt terms overrides", v20, 2u);
      MEMORY[0x24957ECC0](v20, -1, -1);
    }

  }
  v25 = type metadata accessor for TrialExemptTermsFactors();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 1, 1, v25);
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v32 = v4;
  v33 = v4 + 56;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v31 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 56;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    while (1)
    {
      v12 = v11;
      if (!v8)
        break;
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_31;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31)
      goto LABEL_48;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v12 + 2;
      if (v12 + 2 >= v31)
        goto LABEL_48;
      v16 = *(_QWORD *)(v33 + 8 * v11);
      if (!v16)
      {
        v11 = v12 + 3;
        if (v12 + 3 >= v31)
          goto LABEL_48;
        v16 = *(_QWORD *)(v33 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_30:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_31:
      v18 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v14);
      v20 = *v18;
      v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v5 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = *(_QWORD *)(v5 + 48);
        v25 = (_QWORD *)(v24 + 16 * v23);
        v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = 0;
LABEL_45:
          outlined consume of [String : Double].Iterator._Variant();
          return v30;
        }
        v27 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v27;
          if (((*(_QWORD *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v28 = (_QWORD *)(v24 + 16 * v23);
          v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_44;
        }
      }
      result = swift_bridgeObjectRelease();
    }
  }
  v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    v30 = 1;
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
    v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v31)
      goto LABEL_48;
    v16 = *(_QWORD *)(v33 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_30;
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[32] = a3;
  v4[33] = a4;
  v4[30] = a1;
  v4[31] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v4[34] = swift_task_alloc();
  v5 = type metadata accessor for CharacterSet();
  v4[35] = v5;
  v4[36] = *(_QWORD *)(v5 - 8);
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TUSTrialAssets<TrialExemptTermsFactors>?);
  v4[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrialExemptTermsFactors?);
  v4[39] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  if (*(_QWORD *)(v0 + 248) && *(_QWORD *)(v0 + 264))
  {
    v1 = one-time initialization token for trialNamespaceManager;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v1 != -1)
      swift_once();
    v2 = static PredictionExemptTermsDetector.trialNamespaceManager;
    *(_QWORD *)(v0 + 320) = static PredictionExemptTermsDetector.trialNamespaceManager;
    *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)v2 + 264);
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  uint64_t v0;

  (*(void (**)(void))(v0 + 328))();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialExemptTermsFactors>);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 312);
  if (v3 == 1)
  {
    outlined destroy of Any?(v1, (uint64_t *)&demangling cache variable for type metadata for TUSTrialAssets<TrialExemptTermsFactors>?);
    v5 = type metadata accessor for TrialExemptTermsFactors();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    outlined init with copy of TrialExemptTermsFactors(v1, *(_QWORD *)(v0 + 312));
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for TUSTrialAssets<TrialExemptTermsFactors>);
    v5 = type metadata accessor for TrialExemptTermsFactors();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  }
  v6 = *(_QWORD *)(v0 + 312);
  type metadata accessor for TrialExemptTermsFactors();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v6, 1, v5)
    || (v14 = TrialExemptTermsFactors.languageToExemptTerms.getter()) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.standard);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2475DF000, v8, v9, "Unable to get exempt terms any language", v10, 2u);
      MEMORY[0x24957ECC0](v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 312);

    v12 = 0;
  }
  else
  {
    v15 = v14;
    if (*(_QWORD *)(v14 + 16))
    {
      v17 = *(_QWORD *)(v0 + 256);
      v16 = *(_QWORD *)(v0 + 264);
      swift_bridgeObjectRetain();
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v19 & 1) != 0)
      {
        v11 = *(_QWORD *)(v0 + 312);
        v20 = *(_QWORD *)(v0 + 296);
        v50 = *(_QWORD *)(v0 + 288);
        v51 = *(_QWORD *)(v0 + 280);
        v52 = *(_QWORD *)(v0 + 272);
        v21 = *(_QWORD *)(v0 + 248);
        v22 = *(_QWORD *)(v0 + 240);
        v53 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 48) = v22;
        *(_QWORD *)(v0 + 56) = v21;
        lazy protocol witness table accessor for type String and conformance String();
        v23 = StringProtocol.localizedLowercase.getter();
        v25 = v24;
        swift_bridgeObjectRelease();
        static CharacterSet.punctuationCharacters.getter();
        *(_QWORD *)(v0 + 64) = v23;
        *(_QWORD *)(v0 + 72) = v25;
        *(_QWORD *)(v0 + 224) = StringProtocol.components(separatedBy:)();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v26 = BidirectionalCollection<>.joined(separator:)();
        v28 = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v20, v51);
        *(_QWORD *)(v0 + 96) = v26;
        *(_QWORD *)(v0 + 104) = v28;
        *(_QWORD *)(v0 + 112) = 39;
        *(_QWORD *)(v0 + 120) = 0xE100000000000000;
        *(_QWORD *)(v0 + 128) = 0;
        *(_QWORD *)(v0 + 136) = 0xE000000000000000;
        *(_QWORD *)(v0 + 144) = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        *(_QWORD *)(v0 + 152) = v29;
        *(_QWORD *)(v0 + 160) = 48330;
        *(_QWORD *)(v0 + 168) = 0xA200000000000000;
        *(_QWORD *)(v0 + 176) = 0;
        *(_QWORD *)(v0 + 184) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v32 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 192) = v30;
        *(_QWORD *)(v0 + 200) = v32;
        *(_QWORD *)(v0 + 208) = 10060002;
        *(_QWORD *)(v0 + 216) = 0xA300000000000000;
        *(_QWORD *)(v0 + 80) = 0;
        *(_QWORD *)(v0 + 88) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v35 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 32) = v33;
        *(_QWORD *)(v0 + 40) = v35;
        Locale.init(identifier:)();
        v36 = type metadata accessor for Locale();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v52, 0, 1, v36);
        StringProtocol.folding(options:locale:)();
        outlined destroy of Any?(v52, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        v37 = specialized Set.init<A>(_:)(v53);
        swift_bridgeObjectRelease();
        v38 = String.tokens()();
        swift_bridgeObjectRelease();
        v39 = specialized Set.init<A>(_:)(v38);
        swift_bridgeObjectRelease();
        LOBYTE(v38) = specialized Set.isDisjoint(with:)(v37, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v38 ^ 1;
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(_QWORD *)(v0 + 264);
    if (v43)
    {
      v45 = *(_QWORD *)(v0 + 256);
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v54 = v47;
      *(_DWORD *)v46 = 136315138;
      *(_QWORD *)(v0 + 16) = v45;
      *(_QWORD *)(v0 + 24) = v44;
      swift_bridgeObjectRetain();
      v48 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2475DF000, v41, v42, "Unable to get exempt terms for language code %s", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v47, -1, -1);
      MEMORY[0x24957ECC0](v46, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v12 = 0;
    v11 = *(_QWORD *)(v0 + 312);
  }
LABEL_10:
  outlined destroy of Any?(v11, &demangling cache variable for type metadata for TrialExemptTermsFactors?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v12 & 1);
}

ValueMetadata *type metadata accessor for PredictionExemptTermsDetector()
{
  return &type metadata for PredictionExemptTermsDetector;
}

uint64_t type metadata accessor for TrialExemptTermsFactors()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TrialExemptTermsFactors;
  if (!type metadata singleton initialization cache for TrialExemptTermsFactors)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of TrialExemptTermsFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialExemptTermsFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t assignWithCopy for TrialExemptTermsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) == 1)
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRetain();
      return a1;
    }
    v10 = 1;
  }
  else
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Any?(a1 + v7, &demangling cache variable for type metadata for [String : [String]]?);
    v10 = *(_QWORD *)(a2 + v7);
  }
  *v8 = v10;
  return a1;
}

uint64_t assignWithTake for TrialExemptTermsFactors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) != 1)
  {
    if (v9 != 1)
    {
      *v8 = v9;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Any?(a1 + v7, &demangling cache variable for type metadata for [String : [String]]?);
    v9 = *(_QWORD *)(a2 + v7);
  }
  *v8 = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialExemptTermsFactors()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2476213B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return ((_DWORD)v9 - 1) & ~(((int)v9 - 1) >> 31);
}

uint64_t storeEnumTagSinglePayload for TrialExemptTermsFactors()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_247621440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 + 1);
  return result;
}

uint64_t type metadata completion function for TrialExemptTermsFactors()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialExemptTermsFactors.CodingKeys, &unk_2518C5E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialExemptTermsFactors.CodingKeys, &unk_2518C5E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialExemptTermsFactors.CodingKeys, &unk_2518C5E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for TrialExemptTermsFactors.CodingKeys, &unk_2518C5E78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialExemptTermsFactors.CodingKeys and conformance TrialExemptTermsFactors.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of TrialExemptTermsFactors(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrialExemptTermsFactors();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for TrialExemptTermsFactors.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2476215E8 + 4 * byte_2476577C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_247621608 + 4 * byte_2476577C5[v4]))();
}

_BYTE *sub_2476215E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_247621608(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_247621610(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_247621618(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_247621620(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_247621628(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TrialExemptTermsFactors.CodingKeys()
{
  return &unk_2518C5E78;
}

uint64_t specialized TrialExemptTermsFactors.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x800000024765CA90)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t MeetingActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v6(a2);
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance MeetingActionMetadataProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = *v0;
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized MeetingActionMetadataProvider.metadataItem(for:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v5(v2);
}

void specialized MeetingActionMetadataProvider.focusMetadataItem()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;

  v0 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v1);
  v2 = (char *)sub_24762191C
     + 4 * byte_2476579B0[specialized ActionFocusDataSource.currentSemanticType()()];
  __asm { BR              X10 }
}

uint64_t sub_24762191C()
{
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized MeetingActionMetadataProvider.metadataItem(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v1[3] = swift_task_alloc();
  v2 = type metadata accessor for Date();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

void specialized MeetingActionMetadataProvider.metadataItem(for:)()
{
  void (*v0)(uint64_t, uint64_t);
  void (*v1)(uint64_t, uint64_t);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (**v5)(uint64_t, uint64_t);
  void (**v6)(uint64_t, uint64_t);
  void (**v7)(uint64_t, uint64_t);
  void (**v8)(uint64_t, uint64_t);
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (**v25)(uint64_t, uint64_t);
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (**v55)(uint64_t, uint64_t);
  void (**v56)(uint64_t, uint64_t);
  void (**v57)(uint64_t, uint64_t);
  Swift::String v58;
  Swift::String v59;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v0 + 2) + 240))(0);
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease();
LABEL_35:
    specialized MeetingActionMetadataProvider.focusMetadataItem()();
    v50 = v51;
    goto LABEL_36;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_34;
LABEL_3:
  v4 = 0;
  v5 = 0;
  v6 = (void (**)(uint64_t, uint64_t))*((_QWORD *)v0 + 5);
  v53 = v2;
  v54 = v2 & 0xC000000000000001;
  v52 = v3;
  do
  {
    if (v54)
      v7 = (void (**)(uint64_t, uint64_t))MEMORY[0x24957E42C](v4, v2);
    else
      v7 = (void (**)(uint64_t, uint64_t))*(id *)(v2 + 8 * v4 + 32);
    v8 = v7;
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v5)
    {
      v56 = v5;
      v57 = v5;
      v55 = v8;
      v10 = objc_msgSend(v8, sel_endDate);
      v11 = *((_QWORD *)v0 + 9);
      if (!v10)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v6[7])(*((_QWORD *)v0 + 9), 1, 1, *((_QWORD *)v0 + 4));
LABEL_38:

        __break(1u);
LABEL_39:
        ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v2)(v11, 1, 1, *((_QWORD *)v1 + 4));
LABEL_40:

        __break(1u);
LABEL_41:
        ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v8[7])(v11, 1, 1, *((_QWORD *)v0 + 4));
LABEL_42:

        __break(1u);
        return;
      }
      v12 = v10;
      v13 = *((_QWORD *)v0 + 6);
      v1 = v0;
      v14 = *((_QWORD *)v0 + 4);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v0 = v6[4];
      ((void (*)(uint64_t, uint64_t, uint64_t))v0)(v11, v13, v14);
      v2 = (unint64_t)v6[7];
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v2)(v11, 0, 1, v14);
      v8 = v6;
      v15 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v6[6];
      if (v15(v11, 1, v14) == 1)
        goto LABEL_38;
      v16 = objc_msgSend(v57, sel_endDate);
      v11 = *((_QWORD *)v1 + 8);
      if (!v16)
        goto LABEL_39;
      v17 = v16;
      v18 = *((_QWORD *)v1 + 6);
      v19 = *((_QWORD *)v1 + 4);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      ((void (*)(uint64_t, uint64_t, uint64_t))v0)(v11, v18, v19);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v2)(v11, 0, 1, v19);
      if (v15(v11, 1, v19) == 1)
        goto LABEL_40;
      v21 = *((_QWORD *)v1 + 8);
      v20 = *((_QWORD *)v1 + 9);
      v22 = *((_QWORD *)v1 + 4);
      v23 = Date.compare(_:)();

      v6 = v8;
      v24 = v8[1];
      v24(v21, v22);
      v24(v20, v22);
      if (v23 == 1)
        v25 = v57;
      else
        v25 = v55;
      v5 = v56;
      if (v23 == 1)
        v5 = v55;

      v0 = v1;
      v3 = v52;
      v2 = v53;
      v9 = v4 + 1;
    }
    else
    {
      v5 = v7;
    }
    ++v4;
  }
  while (v9 != v3);
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_35;
  v8 = v6;
  v2 = v5;
  v26 = objc_msgSend((id)v2, sel_endDate);
  v11 = *((_QWORD *)v0 + 7);
  if (!v26)
    goto LABEL_41;
  v27 = v26;
  v28 = *((_QWORD *)v0 + 6);
  v29 = *((_QWORD *)v0 + 4);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  ((void (*)(uint64_t, uint64_t, uint64_t))v8[4])(v11, v28, v29);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v8[7])(v11, 0, 1, v29);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v8[6])(v11, 1, v29) == 1)
    goto LABEL_42;
  v30 = *((_QWORD *)v0 + 7);
  v31 = *((_QWORD *)v0 + 4);
  v32 = Date.localizedTimeOfDay.getter();
  v34 = v33;
  v8[1](v30, v31);
  v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0)
    v35 = v32 & 0xFFFFFFFFFFFFLL;
  if (v35)
  {
    if (one-time initialization token for current != -1)
      swift_once();
    v36 = *((_QWORD *)v0 + 6);
    v37 = *((_QWORD *)v0 + 3);
    v38._countAndFlagsBits = 0xD00000000000001ELL;
    v58._object = (void *)0xE000000000000000;
    v38._object = (void *)0x800000024765CAB0;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    v58._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v38, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v39, v58);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_247656500;
    *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v40 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v40 + 32) = v32;
    *(_QWORD *)(v40 + 40) = v34;
    swift_bridgeObjectRetain();
    v41 = static String.localizedStringWithFormat(_:_:)();
    v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59._object = (void *)0xE000000000000000;
    v44._object = (void *)0x800000024765CAD0;
    v44._countAndFlagsBits = 0xD000000000000014;
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    v59._countAndFlagsBits = 0;
    v46 = NSLocalizedString(_:tableName:bundle:value:comment:)(v44, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v45, v59);
    v47 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v37, 1, 1, v47);
    Date.init()();
    v48 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
    v49 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(1, v32, v34, v46._countAndFlagsBits, (uint64_t)v46._object, v41, v43, v36, -1.0, -1.0, 0, v37, 0, 0, 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    specialized MeetingActionMetadataProvider.focusMetadataItem()();
  }
  v50 = v49;

LABEL_36:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  (*((void (**)(id))v0 + 1))(v50);
}

_QWORD *initializeBufferWithCopyOfBuffer for MeetingActionMetadataProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for MeetingActionMetadataProvider()
{
  return swift_release();
}

_QWORD *assignWithCopy for MeetingActionMetadataProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for MeetingActionMetadataProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeetingActionMetadataProvider(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeetingActionMetadataProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeetingActionMetadataProvider()
{
  return &type metadata for MeetingActionMetadataProvider;
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_247622478()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for smartRepliesMarker()
{
  uint64_t result;
  uint64_t v1;

  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.localizedLowercase.getter();
  static String.smartRepliesMarker = result;
  unk_2544494A0 = v1;
  return result;
}

uint64_t SRPredictionType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_247622580 + 4 * byte_247657A05[a1]))(0xD000000000000012, 0x800000024765AE40);
}

uint64_t sub_247622580()
{
  uint64_t v0;

  return v0 + 17;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SRPredictionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = SRPredictionType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == SRPredictionType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SRPredictionType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SRPredictionType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SRPredictionType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SRPredictionType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SRPredictionType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SRPredictionType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SRPredictionType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SRPredictionType@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = SRPredictionType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SRPredictionItem.label.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *specialized Array<A>.withoutDuplicates()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *v11;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = v4[2];
    if (v5)
    {
      v6 = 0;
      while (1)
      {
        v7 = vmovn_s64(vceqq_s64(*(int64x2_t *)&v4[2 * v6 + 4], *(int64x2_t *)(v2 + 16 * v3)));
        if ((v7.i32[0] & v7.i32[1] & 1) != 0)
          break;
        if (v5 == ++v6)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v13 = *(_OWORD *)(v2 + 16 * v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 + 1, 1, v4);
      v9 = v4[2];
      v8 = v4[3];
      v10 = v13;
      if (v9 >= v8 >> 1)
      {
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
        v10 = v13;
        v4 = v11;
      }
      v4[2] = v9 + 1;
      *(_OWORD *)&v4[2 * v9 + 4] = v10;
    }
    ++v3;
  }
  while (v3 != v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ModelResponseManager.cannedRepliesForLanguage(_:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized MutableCollection<>.sort(by:)(unint64_t *a1)
{
  unint64_t v2;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v2 & 0x8000000000000000) != 0
    || (v2 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t ModelResponseManager.predictWithoutCache(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[19] = a1;
  v2[20] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  v2[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrialSmartRepliesFactors?);
  v2[22] = swift_task_alloc();
  v3 = type metadata accessor for TrialSmartRepliesFactors();
  v2[23] = v3;
  v2[24] = *(_QWORD *)(v3 - 8);
  v2[25] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t ModelResponseManager.predictWithoutCache(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 152)) + 0x1A8))() & 1) == 0)
  {
LABEL_11:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v2 = *(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 152)) + 0x208);
  *(_QWORD *)(v0 + 208) = v2;
  v3 = v2();
  *(_QWORD *)(v0 + 216) = v4;
  if (!v4)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2475DF000, v10, v11, "Unknown language for request, returning nil for predictions", v12, 2u);
      MEMORY[0x24957ECC0](v12, -1, -1);
    }

    goto LABEL_11;
  }
  v5 = v3;
  v6 = v4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v0 + 224) = static ModelAssetLoader.shared;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v7;
  *v7 = v0;
  v7[1] = ModelResponseManager.predictWithoutCache(for:);
  return ModelAssetLoader.getTrialAssets(language:)(*(_QWORD *)(v0 + 168), v5, v6);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = v0[21];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
  v3 = 1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v4 = &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?;
  }
  else
  {
    outlined init with copy of TrialSmartRepliesFactors(v1, v0[22]);
    v3 = 0;
    v4 = &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>;
  }
  outlined destroy of Any?(v1, v4);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[24] + 56))(v0[22], v3, 1, v0[23]);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 48))(v1, 1, *(_QWORD *)(v0 + 184)) == 1)
  {
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for TrialSmartRepliesFactors?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2475DF000, v3, v4, "No model assets available for language, returning nil for predictions", v5, 2u);
      MEMORY[0x24957ECC0](v5, -1, -1);
    }

    goto LABEL_30;
  }
  v6 = *(_BYTE **)(v0 + 200);
  outlined init with take of TrialSmartRepliesFactors(v1, (uint64_t)v6);
  if (*v6 != 1)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.standard);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v25, v26))
      goto LABEL_29;
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    v28 = "ML model is disabled returning no predictions";
    goto LABEL_28;
  }
  TrialSmartRepliesFactors.assetPaths.getter((uint64_t *)(v0 + 64));
  v7 = outlined init with take of TrialSmartRepliesAssetPaths?(v0 + 64, v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 240) = v8;
  if (!v8)
  {
    if (one-time initialization token for standard == -1)
    {
LABEL_26:
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.standard);
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v25, v26))
      {
LABEL_29:
        v30 = *(_QWORD *)(v0 + 200);

        outlined destroy of TrialSmartRepliesFactors(v30);
LABEL_30:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
      }
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      v28 = "There are no model asset paths available";
LABEL_28:
      _os_log_impl(&dword_2475DF000, v25, v26, v28, v27, 2u);
      MEMORY[0x24957ECC0](v27, -1, -1);
      goto LABEL_29;
    }
LABEL_44:
    swift_once();
    goto LABEL_26;
  }
  v9 = *(_QWORD **)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 32);
  v12 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 256) = v12;
  v13 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v9) + 0x238))(v7);
  v14 = specialized static ModelResponseManager.conversationTurnsFrom(_:)((unint64_t)v13);
  *(_QWORD *)(v0 + 264) = v14;

  if (one-time initialization token for standard != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 272) = __swift_project_value_buffer(v15, (uint64_t)static Logger.standard);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_2475DF000, v16, v17, "Attempting xpc inference request", v18, 2u);
    MEMORY[0x24957ECC0](v18, -1, -1);
  }

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v19 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v38 = v11;
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v22 = 0;
    v23 = 0xE000000000000000;
    goto LABEL_32;
  }
  v20 = v19 - 1;
  if (__OFSUB__(v19, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
LABEL_41:
    v37 = MEMORY[0x24957E42C](v20, v14);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v37 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text);
    v23 = *(_QWORD *)(v37 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text + 8);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_32;
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v20 >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v21 = (char *)*(id *)(v14 + 8 * v20 + 32);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
  v23 = *(_QWORD *)&v21[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text + 8];
  swift_bridgeObjectRetain();

LABEL_32:
  *(_QWORD *)(v0 + 280) = v23;
  v32 = (*(uint64_t (**)(void))(v0 + 208))();
  *(_QWORD *)(v0 + 288) = v33;
  if (v33)
    v34 = v32;
  else
    v34 = 0;
  if (v33)
    v35 = v33;
  else
    v35 = 0xE000000000000000;
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v36;
  *v36 = v0;
  v36[1] = ModelResponseManager.predictWithoutCache(for:);
  return SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(v22, v23, v14, v34, v35, v10, v8, v38);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2475DF000, v1, v2, "Completed xpc inference request", v3, 2u);
    MEMORY[0x24957ECC0](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 304);

  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 144) = MEMORY[0x24BEE4B00];
    *(_QWORD *)(swift_task_alloc() + 16) = v0 + 144;
    specialized Sequence.forEach(_:)(v5, (void (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in ModelResponseManager.predictWithoutCache(for:));
    outlined destroy of TrialSmartRepliesFactors(v6);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v7 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, (os_log_type_t)v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2475DF000, v8, (os_log_type_t)v9, "Model predictions returned nil response", v10, 2u);
      MEMORY[0x24957ECC0](v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 200);

    outlined destroy of TrialSmartRepliesFactors(v11);
    v7 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 312);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 312);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 136) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v10;

    _os_log_impl(&dword_2475DF000, v4, v5, "Error occurred while trying to run inference: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v8, -1, -1);
    MEMORY[0x24957ECC0](v7, -1, -1);

  }
  else
  {
    v11 = *(void **)(v0 + 312);

  }
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_2475DF000, v12, v13, "Model predictions returned nil response", v14, 2u);
    MEMORY[0x24957ECC0](v14, -1, -1);
  }
  v15 = *(_QWORD *)(v0 + 200);

  outlined destroy of TrialSmartRepliesFactors(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void closure #1 in ModelResponseManager.predictWithoutCache(for:)(uint64_t a1, void *a2, unint64_t a3, uint64_t *a4)
{
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  Swift::String v37;

  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = a1;
  v37._object = a2;
  v8 = specialized SRPredictionType.init(rawValue:)(v37);
  if (v8 != 5)
  {
    v14 = v8;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v16 = MEMORY[0x24BEE4AF8];
    if (v15)
    {
      v36 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 & ~(v15 >> 63), 0);
      if (v15 < 0)
      {
        __break(1u);
        return;
      }
      v34 = v14;
      v35 = a4;
      v16 = v36;
      if ((a3 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v15; ++i)
        {
          v18 = MEMORY[0x24957E42C](i, a3);
          v19 = *(_DWORD *)(v18 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score);
          v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label);
          v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label + 8);
          swift_bridgeObjectRetain();
          swift_unknownObjectRelease();
          v36 = v16;
          v23 = *(_QWORD *)(v16 + 16);
          v22 = *(_QWORD *)(v16 + 24);
          if (v23 >= v22 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
            v16 = v36;
          }
          *(_QWORD *)(v16 + 16) = v23 + 1;
          v24 = v16 + 24 * v23;
          *(_DWORD *)(v24 + 32) = v19;
          *(_QWORD *)(v24 + 40) = v21;
          *(_QWORD *)(v24 + 48) = v20;
        }
      }
      else
      {
        v25 = (_QWORD *)(a3 + 32);
        do
        {
          v26 = *(_DWORD *)(*v25 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_score);
          v27 = (uint64_t *)(*v25 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesPredictionItem_label);
          v29 = *v27;
          v28 = v27[1];
          v36 = v16;
          v31 = *(_QWORD *)(v16 + 16);
          v30 = *(_QWORD *)(v16 + 24);
          swift_bridgeObjectRetain();
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v16 = v36;
          }
          *(_QWORD *)(v16 + 16) = v31 + 1;
          v32 = v16 + 24 * v31;
          *(_DWORD *)(v32 + 32) = v26;
          *(_QWORD *)(v32 + 40) = v29;
          *(_QWORD *)(v32 + 48) = v28;
          ++v25;
          --v15;
        }
        while (v15);
      }
      a4 = v35;
      v14 = v34;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36 = *a4;
    *a4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v14, isUniquelyReferenced_nonNull_native);
    *a4 = v36;
    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for standard != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v36 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v10, v11, "Found non 1-1 mapping between PREMultiHeadPredictionHead and SRPredictionType for %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v13, -1, -1);
    MEMORY[0x24957ECC0](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t ModelResponseManager.predict(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ModelResponseManager.predict(for:)()
{
  uint64_t v0;
  void *v1;
  void **v2;
  id v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  uint8_t *v13;
  id v14;
  _QWORD *v15;
  void *v17;
  _QWORD *v18;
  NSObject *v19;

  v2 = (void **)(v0 + 72);
  v1 = *(void **)(v0 + 72);
  *(_QWORD *)(v0 + 48) = v1;
  v3 = v1;
  TUSCache.subscript.getter();

  v4 = *(unsigned __int8 *)(v0 + 24);
  if (v4 == 255)
  {
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v15;
    *v15 = v0;
    v15[1] = ModelResponseManager.predict(for:);
    return ModelResponseManager.predictWithoutCache(for:)(*(_QWORD *)(v0 + 72));
  }
  else
  {
    v5 = *(void **)(v0 + 16);
    if ((v4 & 1) != 0)
    {
      v17 = 0;
    }
    else
    {
      outlined copy of Result<[SRPredictionType : [SRPredictionItem]]?, Error>(*(id *)(v0 + 16), 0);
      if (one-time initialization token for standard != -1)
        swift_once();
      v6 = *v2;
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.standard);
      v8 = v6;
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.debug.getter();
      v11 = os_log_type_enabled(v9, v10);
      v12 = *v2;
      if (v11)
      {
        v19 = v9;
        v13 = (uint8_t *)swift_slowAlloc();
        v18 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v13 = 138412290;
        *(_QWORD *)(v0 + 64) = v12;
        v14 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v18 = v12;

        v9 = v19;
        _os_log_impl(&dword_2475DF000, v19, v10, "Returning cached prediction for %@", v13, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v18, -1, -1);
        MEMORY[0x24957ECC0](v13, -1, -1);
      }
      else
      {

      }
      v17 = v5;
    }
    outlined consume of Result<[SRPredictionType : [SRPredictionItem]]?, Error>?(v5, v4);
    return (*(uint64_t (**)(void *))(v0 + 8))(v17);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 96);
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 56) = v1;
  swift_bridgeObjectRetain();
  v2 = v1;
  TUSCache.subscript.setter();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t ModelResponseManager.dynamicTextSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ModelResponseManager.dynamicTextSuggestions(for:)()
{
  uint64_t v0;
  uint64_t v1;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 80)) + 0x1A8))() & 1) == 0)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = ModelResponseManager.dynamicTextSuggestions(for:);
  *(_OWORD *)(v1 + 72) = *(_OWORD *)(v0 + 80);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  objc_class *v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  if (!*(_QWORD *)(v1 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(0), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = (_QWORD *)v5;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v25);
  result = swift_bridgeObjectRelease();
  v7 = v25;
  if (v25[2] >= 4uLL)
  {
    v25 = (_QWORD *)v2;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v7[6])
    {
      v8 = v7[5];
      v9 = v7[6];
    }
    else
    {
      v8 = 0;
      v9 = 0xE000000000000000;
    }
    v10 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestion();
    v11 = objc_allocWithZone(v10);
    v12 = &v11[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
    *v12 = v8;
    v12[1] = v9;
    v11[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
    *(_QWORD *)(v0 + 16) = v11;
    *(_QWORD *)(v0 + 24) = v10;
    swift_bridgeObjectRetain();
    objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v7[9])
    {
      v13 = v7[8];
      v14 = v7[9];
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    v15 = objc_allocWithZone(v10);
    v16 = &v15[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
    *v16 = v13;
    v16[1] = v14;
    v15[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
    *(_QWORD *)(v0 + 32) = v15;
    *(_QWORD *)(v0 + 40) = v10;
    swift_bridgeObjectRetain();
    objc_msgSendSuper2((objc_super *)(v0 + 32), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v7[12])
    {
      v17 = v7[11];
      v18 = v7[12];
    }
    else
    {
      v17 = 0;
      v18 = 0xE000000000000000;
    }
    v19 = objc_allocWithZone(v10);
    v20 = &v19[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
    *v20 = v17;
    v20[1] = v18;
    v19[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
    *(_QWORD *)(v0 + 48) = v19;
    *(_QWORD *)(v0 + 56) = v10;
    swift_bridgeObjectRetain();
    objc_msgSendSuper2((objc_super *)(v0 + 48), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v7[15])
    {
      v21 = v7[14];
      v22 = v7[15];
    }
    else
    {
      v21 = 0;
      v22 = 0xE000000000000000;
    }
    v23 = objc_allocWithZone(v10);
    v24 = &v23[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
    *v24 = v21;
    v24[1] = v22;
    v23[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
    *(_QWORD *)(v0 + 64) = v23;
    *(_QWORD *)(v0 + 72) = v10;
    swift_bridgeObjectRetain();
    objc_msgSendSuper2((objc_super *)(v0 + 64), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v2 = (uint64_t)v25;
    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  __break(1u);
  return result;
}

uint64_t ModelResponseManager.simpleTextSuggestions(for:includeCannedResponses:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ModelResponseManager.simpleTextSuggestions(for:includeCannedResponses:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0xE8);
  if (!v2() || v2() == 1)
  {
    v3 = (*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 16)) + 0x208))();
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))((*v1 & **(_QWORD **)(v0 + 16)) + 0x1A8))(v3);
      swift_bridgeObjectRelease();
      if ((v5 & 1) != 0)
      {
        v6 = swift_task_alloc();
        *(_QWORD *)(v0 + 32) = v6;
        *(_QWORD *)v6 = v0;
        *(_QWORD *)(v6 + 8) = ModelResponseManager.simpleTextSuggestions(for:includeCannedResponses:);
        *(_OWORD *)(v6 + 80) = *(_OWORD *)(v0 + 16);
        return swift_task_switch();
      }
    }
    else
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.standard);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_2475DF000, v9, v10, "Unable to detect language for request, returning empty suggestions", v11, 2u);
        MEMORY[0x24957ECC0](v11, -1, -1);
      }

    }
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

{
  uint64_t v0;
  id v1;

  v1 = specialized static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:)(*(_QWORD *)(v0 + 40), MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(id))(v0 + 8))(v1);
}

uint64_t static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  objc_class *v16;
  _BYTE *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  objc_super v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = MEMORY[0x24BEE4B08];
  v20 = a3();
  v22 = a1;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  v5 = specialized _ArrayProtocol.filter(_:)(a1, &v25);
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v19;
  }
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_13;
LABEL_3:
  v24 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (char *)MEMORY[0x24957E42C](v8, v5);
      else
        v9 = (char *)*(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      if ((v20 & 1) != 0)
      {
        v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8];
        v22 = *(_QWORD *)&v9[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        v23 = v11;
        lazy protocol witness table accessor for type String and conformance String();
        v12 = StringProtocol.localizedLowercase.getter();
        v14 = v13;
        v15 = v10[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion];
        v16 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestion();
        v17 = objc_allocWithZone(v16);
        v18 = (uint64_t *)&v17[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        *v18 = v12;
        v18[1] = v14;
        v17[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = v15;
        v21.receiver = v17;
        v21.super_class = v16;
        objc_msgSendSuper2(&v21, sel_init);

      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v8);
    v19 = v24;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t ModelResponseManager.predictActionsUsingML(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ModelResponseManager.predictActionsUsingML(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0xE8);
  if (v2() && v2() != 2 || ((*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 40)) + 0x1A8))() & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8]);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = ModelResponseManager.predictActionsUsingML(for:);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(v0 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  float *v29;
  float v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64x2_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  int64x2_t v70;
  uint64_t v71;
  int64x2_t v72[2];

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    goto LABEL_17;
  if (!*(_QWORD *)(v1 + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(1), (v3 & 1) == 0)
    || !*(_QWORD *)(v1 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = MEMORY[0x24BEE4AF8];
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v0 + 8))(v19, v20);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v67 = v0;
  v7 = *(_QWORD **)(v0 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v5);
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v7) + 0x118))(v9) & 1) != 0)
  {
    v72[0].i64[0] = v4;
    specialized Array.append<A>(contentsOf:)(v8);
    v10 = *(_QWORD *)(v4 + 16);
    if (v10)
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v4 + 16);
    if (v10)
    {
LABEL_8:
      v11 = (float *)(v4 + 48);
      v12 = MEMORY[0x24BEE4AF8];
      do
      {
        v16 = *(v11 - 4);
        if (v16 >= 0.0)
        {
          v18 = *((_QWORD *)v11 - 1);
          v17 = *(_QWORD *)v11;
          swift_bridgeObjectRetain();
          v72[0].i64[0] = v12;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
            v12 = v72[0].i64[0];
          }
          v14 = *(_QWORD *)(v12 + 16);
          v13 = *(_QWORD *)(v12 + 24);
          if (v14 >= v13 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
            v12 = v72[0].i64[0];
          }
          *(_QWORD *)(v12 + 16) = v14 + 1;
          v15 = v12 + 24 * v14;
          *(float *)(v15 + 32) = v16;
          *(_QWORD *)(v15 + 40) = v18;
          *(_QWORD *)(v15 + 48) = v17;
        }
        v11 += 6;
        --v10;
      }
      while (v10);
      goto LABEL_22;
    }
  }
  v12 = MEMORY[0x24BEE4AF8];
LABEL_22:
  swift_bridgeObjectRelease();
  v72[0].i64[0] = v12;
  swift_retain();
  specialized MutableCollection<>.sort(by:)(v72[0].i64);
  swift_release();
  v22 = v72[0].i64[0];
  v23 = *(_QWORD *)(v72[0].i64[0] + 16);
  if (v23)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.standard);
    swift_retain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = v67;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 134217984;
      *(_QWORD *)(v67 + 32) = *(_QWORD *)(v22 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2475DF000, v25, v26, "ML Found %ld above threshold", v28, 0xCu);
      MEMORY[0x24957ECC0](v28, -1, -1);
    }
    else
    {
      swift_release();
      v27 = v67;
    }
    v68 = (_QWORD *)(v27 + 24);
    v69 = (_QWORD *)(v27 + 16);

    swift_retain();
    v66 = v22;
    v29 = (float *)(v22 + 48);
    do
    {
      v30 = *(v29 - 4);
      v31 = *((_QWORD *)v29 - 1);
      v32 = *(_QWORD *)v29;
      swift_bridgeObjectRetain_n();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc();
        v36 = swift_slowAlloc();
        v72[0].i64[0] = v36;
        *(_DWORD *)v35 = 136315394;
        if (v32)
          v37 = v31;
        else
          v37 = 0;
        if (v32)
          v38 = v32;
        else
          v38 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v35 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v72[0].i64);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v35 + 12) = 2048;
        *(double *)(v35 + 14) = v30;
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2475DF000, v33, v34, "ML Found %s with score %f", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v36, -1, -1);
        MEMORY[0x24957ECC0](v35, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      v29 += 6;
      --v23;
    }
    while (v23);
    v39 = v66;
    swift_release();
    v40 = *(_QWORD *)(v66 + 16);
    v41 = MEMORY[0x24BEE4AF8];
    if (v40)
    {
      v71 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
      v42 = v71;
      v43 = (unint64_t *)(v66 + 48);
      v44 = v40;
      do
      {
        if (*v43)
        {
          v45 = *(v43 - 1);
          v46 = *v43;
        }
        else
        {
          v46 = 0x800000024765CB30;
          v45 = 0xD000000000000010;
        }
        swift_bridgeObjectRetain_n();
        static ActionRegexEvaluator.actionTypeAndPOV(for:)(v45, v46, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v47 = v72[0];
        v49 = *(_QWORD *)(v71 + 16);
        v48 = *(_QWORD *)(v71 + 24);
        if (v49 >= v48 >> 1)
        {
          v70 = v72[0];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
          v47 = v70;
        }
        *(_QWORD *)(v71 + 16) = v49 + 1;
        *(int64x2_t *)(v71 + 16 * v49 + 32) = v47;
        v43 += 3;
        --v44;
      }
      while (v44);
    }
    else
    {
      v42 = MEMORY[0x24BEE4AF8];
    }
    v19 = specialized Array<A>.withoutDuplicates()(v42);
    swift_bridgeObjectRelease();
    v50 = v19[2];
    if (v50)
    {
      swift_bridgeObjectRetain();
      v51 = v19 + 5;
      do
      {
        v52 = *(v51 - 1);
        v53 = *v51;
        v54 = Logger.logObject.getter();
        v55 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = swift_slowAlloc();
          v57 = swift_slowAlloc();
          v72[0].i64[0] = v57;
          *(_DWORD *)v56 = 136315394;
          *v69 = v52;
          v58 = String.init<A>(reflecting:)();
          *(_QWORD *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v72[0].i64);
          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 12) = 2080;
          *v68 = v53;
          v60 = String.init<A>(reflecting:)();
          *(_QWORD *)(v56 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v72[0].i64);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2475DF000, v54, v55, "ML Mapped to %s with pov %s", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x24957ECC0](v57, -1, -1);
          MEMORY[0x24957ECC0](v56, -1, -1);
        }

        v51 += 2;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease();
      v39 = v66;
      v41 = MEMORY[0x24BEE4AF8];
    }
    if (v40)
    {
      v72[0].i64[0] = v41;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
      v20 = v72[0].i64[0];
      v62 = *(_QWORD *)(v72[0].i64[0] + 16);
      v63 = 32;
      do
      {
        v64 = *(_DWORD *)(v39 + v63);
        v72[0].i64[0] = v20;
        v65 = *(_QWORD *)(v20 + 24);
        if (v62 >= v65 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v62 + 1, 1);
          v20 = v72[0].i64[0];
        }
        *(_QWORD *)(v20 + 16) = v62 + 1;
        *(_DWORD *)(v20 + 4 * v62 + 32) = v64;
        v63 += 24;
        ++v62;
        --v40;
      }
      while (v40);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_release();
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v20 = MEMORY[0x24BEE4AF8];
  }
  v0 = v67;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v0 + 8))(v19, v20);
}

uint64_t ModelResponseManager.predictConversationEnd(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ModelResponseManager.predictConversationEnd(for:)()
{
  uint64_t v0;
  uint64_t v2;

  if ((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 24)) + 0xE8))() == 2)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)v2 = v0;
  *(_QWORD *)(v2 + 8) = ModelResponseManager.predictConversationEnd(for:);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _BOOL8 v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
    goto LABEL_7;
  if (!*(_QWORD *)(v1 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(2), (v3 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v7 = 0;
    return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v7);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 != 1)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v12 = 134217984;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v10, v11, "noSR head returned array of length %ld (should be 1)", v12, 0xCu);
      MEMORY[0x24957ECC0](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    goto LABEL_7;
  }
  v6 = *(float *)(v4 + 32);
  swift_bridgeObjectRelease();
  v7 = v6 > 0.0;
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v7);
}

id closure #1 in default argument 2 of static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:)()
{
  id result;
  void *v1;
  unsigned int v2;

  result = objc_msgSend((id)objc_opt_self(), sel_sharedPreferencesController);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_BOOLForKey_, 9);

    return (id)(v2 ^ 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ModelResponseManager.init()()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSCache<SRSmartRepliesSuggestionRequest, Result<[SRPredictionType : [SRPredictionItem]]?, Error>>);
  swift_allocObject();
  v0 = TUSCache.init(capacity:)();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_retain();
  return v0;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x24957E438);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  unsigned int v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  char *v59;
  char *v60;
  id v61;
  void (*v62)(char *, uint64_t);
  void **v63;
  void *v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t *v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  char *v84;
  void *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  uint64_t v93;
  char *v94;
  id v95;
  char v96;
  void (*v97)(char *, uint64_t);
  void *v98;
  id v99;
  id v100;
  char *v101;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  char v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  Swift::Int v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  void (*v182)(char *, uint64_t, uint64_t);
  uint64_t v183;
  Swift::Int v184;
  uint64_t v185;
  char *v186;
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  void **v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  id v197;
  char *v198;
  uint64_t v199;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v170 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v170 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v183 = (uint64_t)&v170 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v177 = (uint64_t)&v170 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v178 = (uint64_t)&v170 - v16;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v191 = (char *)&v170 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v170 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v179 = (char *)&v170 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v170 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v175 = (char *)&v170 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v176 = (char *)&v170 - v31;
  v32 = a1[1];
  v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if (v32 < 0)
      goto LABEL_155;
    if (v32)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v32, 1, a1);
    return;
  }
  if (v32 >= 0)
    v34 = v32;
  else
    v34 = v32 + 1;
  if (v32 < -1)
    goto LABEL_163;
  v181 = v11;
  v184 = v32;
  v174 = v33;
  v171 = a1;
  if (v32 < 2)
  {
    v38 = (char *)MEMORY[0x24BEE4AF8];
    v199 = MEMORY[0x24BEE4AF8];
    v188 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    v37 = v18;
    if (v32 != 1)
    {
      v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_120:
      v162 = v189;
      if (v42 >= 2)
      {
        v163 = *v171;
        do
        {
          v164 = v42 - 2;
          if (v42 < 2)
            goto LABEL_150;
          if (!v163)
            goto LABEL_162;
          v190 = v38;
          v165 = *(_QWORD *)&v38[16 * v164 + 32];
          v166 = *(_QWORD *)&v38[16 * v42 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v163 + 8 * v165), (void **)(v163 + 8 * *(_QWORD *)&v38[16 * v42 + 16]), (void **)(v163 + 8 * v166), v188);
          if (v162)
            break;
          if (v166 < v165)
            goto LABEL_151;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v167 = v190;
          else
            v167 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v190);
          if (v164 >= *((_QWORD *)v167 + 2))
            goto LABEL_152;
          v168 = &v167[16 * v164 + 32];
          *(_QWORD *)v168 = v165;
          *((_QWORD *)v168 + 1) = v166;
          v169 = *((_QWORD *)v167 + 2);
          if (v42 > v169)
            goto LABEL_153;
          memmove(&v167[16 * v42 + 16], &v167[16 * v42 + 32], 16 * (v169 - v42));
          v38 = v167;
          *((_QWORD *)v167 + 2) = v169 - 1;
          v42 = v169 - 1;
        }
        while (v169 > 2);
      }
LABEL_133:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v199 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v35 = v34 >> 1;
    type metadata accessor for SRSmartRepliesConversationTurn();
    v36 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) = v35;
    v188 = (void **)((v36 & 0xFFFFFFFFFFFFFF8) + 32);
    v199 = v36;
    v37 = v18;
  }
  v192 = v5;
  v39 = 0;
  v40 = *a1;
  v172 = *a1 + 16;
  v173 = v40 - 8;
  v38 = (char *)MEMORY[0x24BEE4AF8];
  v194 = v37;
  v195 = v40;
  v180 = v28;
  v41 = (void (*)(char *, uint64_t, uint64_t))v184;
  v193 = v8;
  v186 = v23;
  while (1)
  {
    v43 = v37;
    v44 = v39;
    v45 = v39 + 1;
    v185 = v39;
    if (v39 + 1 < (uint64_t)v41)
    {
      v190 = v38;
      v46 = *(void **)(v40 + 8 * v39);
      v198 = *(char **)(v40 + 8 * v45);
      v47 = v178;
      outlined init with copy of Date?((uint64_t)&v198[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp], v178);
      v48 = v43;
      v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      v50 = v49(v47, 1, v17);
      v187 = v49;
      if (v50 == 1)
      {
        outlined destroy of Any?(v47, (uint64_t *)&demangling cache variable for type metadata for Date?);
        LODWORD(v197) = 0;
      }
      else
      {
        v51 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
        v52 = v176;
        v51(v176, v47, v17);
        v53 = v46;
        v54 = (uint64_t)v46 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp;
        v55 = v48;
        v56 = v177;
        outlined init with copy of Date?(v54, v177);
        if (v49(v56, 1, v17) == 1)
        {
          v57 = v198;
          v58 = v53;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v17);
          outlined destroy of Any?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);

          LODWORD(v197) = 0;
        }
        else
        {
          v59 = v175;
          v51(v175, v56, v17);
          v60 = v198;
          v61 = v53;
          LODWORD(v197) = static Date.< infix(_:_:)();
          v62 = *(void (**)(char *, uint64_t))(v48 + 8);
          v62(v59, v17);
          v62(v52, v17);

        }
        v43 = v55;
        v8 = v193;
        v23 = v186;
      }
      v41 = (void (*)(char *, uint64_t, uint64_t))v184;
      v44 = v185;
      v45 = v185 + 2;
      if (v185 + 2 < v184)
      {
        v63 = (void **)(v172 + 8 * v185);
        while (1)
        {
          v196 = (char *)v45;
          v64 = *v63;
          v198 = (char *)*(v63 - 1);
          v65 = v183;
          outlined init with copy of Date?((uint64_t)v64 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v183);
          v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v187;
          if (v187(v65, 1, v17) == 1)
          {
            outlined destroy of Any?(v65, (uint64_t *)&demangling cache variable for type metadata for Date?);
            if ((v197 & 1) != 0)
              goto LABEL_37;
          }
          else
          {
            v67 = v180;
            v182 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
            v182(v180, v65, v17);
            v68 = v43;
            v69 = (uint64_t)v181;
            outlined init with copy of Date?((uint64_t)&v198[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp], (uint64_t)v181);
            if (v66(v69, 1, v17) == 1)
            {
              v70 = v64;
              v71 = v198;
              (*(void (**)(char *, uint64_t))(v43 + 8))(v67, v17);
              outlined destroy of Any?(v69, (uint64_t *)&demangling cache variable for type metadata for Date?);

              v8 = v193;
              if ((v197 & 1) != 0)
              {
LABEL_37:
                v38 = v190;
                v41 = (void (*)(char *, uint64_t, uint64_t))v184;
                v44 = v185;
                v40 = v195;
                v45 = (Swift::Int)v196;
                if ((uint64_t)v196 < v185)
                  goto LABEL_156;
                goto LABEL_38;
              }
            }
            else
            {
              v72 = v179;
              v182(v179, v69, v17);
              v182 = v64;
              v73 = v198;
              v74 = static Date.< infix(_:_:)();
              v75 = v68;
              v76 = *(void (**)(char *, uint64_t))(v68 + 8);
              v76(v72, v17);
              v76(v67, v17);

              v43 = v75;
              v8 = v193;
              if (((v197 ^ v74) & 1) != 0)
              {
                v38 = v190;
                v41 = (void (*)(char *, uint64_t, uint64_t))v184;
                v44 = v185;
                v40 = v195;
                v45 = (Swift::Int)v196;
                if ((v197 & 1) == 0)
                  goto LABEL_44;
                goto LABEL_35;
              }
            }
          }
          v45 = (Swift::Int)(v196 + 1);
          ++v63;
          if ((char *)v184 == v196 + 1)
          {
            v41 = (void (*)(char *, uint64_t, uint64_t))v184;
            v44 = v185;
            v45 = v184;
            break;
          }
        }
      }
      v38 = v190;
      v40 = v195;
      if ((v197 & 1) != 0)
      {
LABEL_35:
        if (v45 < v44)
          goto LABEL_156;
LABEL_38:
        if (v44 < v45)
        {
          v77 = (uint64_t *)(v173 + 8 * v45);
          v78 = v45;
          v79 = v44;
          v80 = (uint64_t *)(v40 + 8 * v44);
          do
          {
            if (v79 != --v78)
            {
              if (!v40)
                goto LABEL_161;
              v81 = *v80;
              *v80 = *v77;
              *v77 = v81;
            }
            ++v79;
            --v77;
            ++v80;
          }
          while (v79 < v78);
        }
      }
    }
LABEL_44:
    if (v45 < (uint64_t)v41)
    {
      if (__OFSUB__(v45, v44))
        goto LABEL_154;
      if (v45 - v44 < v174)
        break;
    }
LABEL_67:
    if (v45 < v44)
      goto LABEL_149;
    v101 = v38;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v196 = (char *)v45;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v38 = v101;
    else
      v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v101 + 2) + 1, 1, v101);
    v104 = *((_QWORD *)v38 + 2);
    v103 = *((_QWORD *)v38 + 3);
    v42 = v104 + 1;
    v40 = v195;
    v105 = v185;
    if (v104 >= v103 >> 1)
    {
      v161 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v104 + 1, 1, v38);
      v37 = v43;
      v40 = v195;
      v38 = v161;
    }
    else
    {
      v37 = v43;
    }
    *((_QWORD *)v38 + 2) = v42;
    v106 = v38 + 32;
    v107 = &v38[16 * v104 + 32];
    v108 = v196;
    *(_QWORD *)v107 = v105;
    *((_QWORD *)v107 + 1) = v108;
    if (v104)
    {
      v190 = v38;
      while (1)
      {
        v109 = v42 - 1;
        if (v42 >= 4)
        {
          v114 = &v106[16 * v42];
          v115 = *((_QWORD *)v114 - 8);
          v116 = *((_QWORD *)v114 - 7);
          v120 = __OFSUB__(v116, v115);
          v117 = v116 - v115;
          if (v120)
            goto LABEL_138;
          v119 = *((_QWORD *)v114 - 6);
          v118 = *((_QWORD *)v114 - 5);
          v120 = __OFSUB__(v118, v119);
          v112 = v118 - v119;
          v113 = v120;
          if (v120)
            goto LABEL_139;
          v121 = v42 - 2;
          v122 = &v106[16 * v42 - 32];
          v124 = *(_QWORD *)v122;
          v123 = *((_QWORD *)v122 + 1);
          v120 = __OFSUB__(v123, v124);
          v125 = v123 - v124;
          if (v120)
            goto LABEL_141;
          v120 = __OFADD__(v112, v125);
          v126 = v112 + v125;
          if (v120)
            goto LABEL_144;
          if (v126 >= v117)
          {
            v144 = &v106[16 * v109];
            v146 = *(_QWORD *)v144;
            v145 = *((_QWORD *)v144 + 1);
            v120 = __OFSUB__(v145, v146);
            v147 = v145 - v146;
            if (v120)
              goto LABEL_148;
            v137 = v112 < v147;
            goto LABEL_105;
          }
        }
        else
        {
          if (v42 != 3)
          {
            v138 = *((_QWORD *)v38 + 4);
            v139 = *((_QWORD *)v38 + 5);
            v120 = __OFSUB__(v139, v138);
            v131 = v139 - v138;
            v132 = v120;
            goto LABEL_99;
          }
          v111 = *((_QWORD *)v38 + 4);
          v110 = *((_QWORD *)v38 + 5);
          v120 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          v113 = v120;
        }
        if ((v113 & 1) != 0)
          goto LABEL_140;
        v121 = v42 - 2;
        v127 = &v106[16 * v42 - 32];
        v129 = *(_QWORD *)v127;
        v128 = *((_QWORD *)v127 + 1);
        v130 = __OFSUB__(v128, v129);
        v131 = v128 - v129;
        v132 = v130;
        if (v130)
          goto LABEL_143;
        v133 = &v106[16 * v109];
        v135 = *(_QWORD *)v133;
        v134 = *((_QWORD *)v133 + 1);
        v120 = __OFSUB__(v134, v135);
        v136 = v134 - v135;
        if (v120)
          goto LABEL_146;
        if (__OFADD__(v131, v136))
          goto LABEL_147;
        if (v131 + v136 >= v112)
        {
          v137 = v112 < v136;
LABEL_105:
          if (v137)
            v109 = v121;
          goto LABEL_107;
        }
LABEL_99:
        if ((v132 & 1) != 0)
          goto LABEL_142;
        v140 = &v106[16 * v109];
        v142 = *(_QWORD *)v140;
        v141 = *((_QWORD *)v140 + 1);
        v120 = __OFSUB__(v141, v142);
        v143 = v141 - v142;
        if (v120)
          goto LABEL_145;
        if (v143 < v131)
          goto LABEL_14;
LABEL_107:
        v148 = v109 - 1;
        if (v109 - 1 >= v42)
        {
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!v40)
          goto LABEL_160;
        v149 = v17;
        v150 = v8;
        v151 = &v106[16 * v148];
        v152 = v106;
        v153 = *(_QWORD *)v151;
        v154 = v152;
        v155 = v109;
        v156 = &v152[16 * v109];
        v157 = *((_QWORD *)v156 + 1);
        v158 = v189;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v40 + 8 * *(_QWORD *)v151), (void **)(v40 + 8 * *(_QWORD *)v156), (void **)(v40 + 8 * v157), v188);
        v189 = v158;
        if (v158)
          goto LABEL_133;
        if (v157 < v153)
          goto LABEL_135;
        v159 = (uint64_t)v190;
        if (v155 > *((_QWORD *)v190 + 2))
          goto LABEL_136;
        *(_QWORD *)v151 = v153;
        *(_QWORD *)&v154[16 * v148 + 8] = v157;
        v160 = *(_QWORD *)(v159 + 16);
        if (v155 >= v160)
          goto LABEL_137;
        v106 = v154;
        v42 = v160 - 1;
        memmove(v156, v156 + 16, 16 * (v160 - 1 - v155));
        v38 = v190;
        *((_QWORD *)v190 + 2) = v160 - 1;
        v37 = v194;
        v40 = v195;
        v8 = v150;
        v17 = v149;
        v23 = v186;
        if (v160 <= 2)
          goto LABEL_14;
      }
    }
    v42 = 1;
LABEL_14:
    v41 = (void (*)(char *, uint64_t, uint64_t))v184;
    v39 = (uint64_t)v196;
    if ((uint64_t)v196 >= v184)
      goto LABEL_120;
  }
  if (__OFADD__(v44, v174))
    goto LABEL_157;
  if (v44 + v174 >= (uint64_t)v41)
    v82 = v41;
  else
    v82 = (void (*)(char *, uint64_t, uint64_t))(v44 + v174);
  if ((uint64_t)v82 >= v44)
  {
    if ((void (*)(char *, uint64_t, uint64_t))v45 != v82)
    {
      v190 = v38;
      v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v173 + 8 * v45);
      v182 = v82;
      do
      {
        v85 = *(void **)(v40 + 8 * v45);
        v86 = (char *)v185;
        v187 = v83;
        v87 = v43;
        v196 = (char *)v45;
        while (1)
        {
          v198 = v86;
          v88 = *(void **)v83;
          outlined init with copy of Date?((uint64_t)v85 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, (uint64_t)v8);
          v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
          if (v89(v8, 1, v17) == 1)
          {
            outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Date?);
            v40 = v195;
            v84 = v196;
            goto LABEL_55;
          }
          v90 = v8;
          v91 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
          v91(v23, v90, v17);
          v92 = v23;
          v93 = (uint64_t)v192;
          outlined init with copy of Date?((uint64_t)v88 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, (uint64_t)v192);
          if (v89((char *)v93, 1, v17) == 1)
          {
            v99 = v85;
            v100 = v88;
            (*(void (**)(char *, uint64_t))(v87 + 8))(v92, v17);
            outlined destroy of Any?(v93, (uint64_t *)&demangling cache variable for type metadata for Date?);

            v8 = v193;
            v23 = v92;
            goto LABEL_65;
          }
          v94 = v191;
          v91(v191, (char *)v93, v17);
          v197 = v85;
          v95 = v88;
          v96 = static Date.< infix(_:_:)();
          v97 = *(void (**)(char *, uint64_t))(v87 + 8);
          v97(v94, v17);
          v97(v92, v17);

          if ((v96 & 1) == 0)
            break;
          v8 = v193;
          v40 = v195;
          v84 = v196;
          if (!v195)
            goto LABEL_159;
          v98 = *(_QWORD *)v83;
          v85 = (void *)*((_QWORD *)v83 + 1);
          *(_QWORD *)v83 = v85;
          *((_QWORD *)v83 + 1) = v98;
          v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v83 - 8);
          v86 = v198 + 1;
          v87 = v194;
          v23 = v92;
          if (v84 == v198 + 1)
            goto LABEL_55;
        }
        v8 = v193;
        v87 = v194;
        v23 = v92;
LABEL_65:
        v40 = v195;
        v84 = v196;
LABEL_55:
        v43 = v87;
        v45 = (Swift::Int)(v84 + 1);
        v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v187 + 8);
      }
      while ((void (*)(char *, uint64_t, uint64_t))v45 != v182);
      v45 = (Swift::Int)v182;
      v38 = v190;
      v44 = v185;
    }
    goto LABEL_67;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v37 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v42 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - v10;
  v46 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v46 - 8);
  v13 = MEMORY[0x24BDAC7A8](v46);
  v39 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - v15;
  v36 = a2;
  if (a3 != a2)
  {
    v17 = a3;
    v43 = *a4;
    v18 = v43 + 8 * a3 - 8;
    v40 = v12;
    v41 = v11;
LABEL_6:
    v19 = *(void **)(v43 + 8 * v17);
    v44 = v17;
    v45 = v37;
    v38 = v18;
    while (1)
    {
      v20 = *(void **)v18;
      outlined init with copy of Date?((uint64_t)v19 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, (uint64_t)v11);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (v21(v11, 1, v46) == 1)
        break;
      v22 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23 = v46;
      v22(v16, v11, v46);
      v24 = v42;
      outlined init with copy of Date?((uint64_t)v20 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v42);
      if (v21((char *)v24, 1, v23) == 1)
      {
        v32 = v19;
        v33 = v20;
        v34 = v40;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v23);
        outlined destroy of Any?(v24, (uint64_t *)&demangling cache variable for type metadata for Date?);

        v17 = v44;
        v11 = v41;
        v12 = v34;
LABEL_5:
        v18 = v38 + 8;
        if (++v17 == v36)
          return;
        goto LABEL_6;
      }
      v25 = v39;
      v22(v39, (char *)v24, v23);
      v26 = v19;
      v27 = v20;
      v28 = static Date.< infix(_:_:)();
      v29 = v40;
      v30 = *(void (**)(char *, uint64_t))(v40 + 8);
      v30(v25, v23);
      v30(v16, v23);

      v17 = v44;
      v11 = v41;
      v12 = v29;
      if ((v28 & 1) == 0)
        goto LABEL_5;
      if (!v43)
      {
        __break(1u);
        return;
      }
      v31 = *(void **)v18;
      v19 = *(void **)(v18 + 8);
      *(_QWORD *)v18 = v19;
      *(_QWORD *)(v18 + 8) = v31;
      v18 -= 8;
      if (v17 == ++v45)
        goto LABEL_5;
    }
    outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Date?);
    goto LABEL_5;
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  id v41;
  id v42;
  char *v43;
  char *v44;
  id v45;
  id v46;
  char v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  void **v51;
  void **v52;
  void **v53;
  uint64_t v54;
  char *v55;
  void **v56;
  void **v57;
  void *v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  void **v64;
  void **v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  char *v70;
  char *v71;
  char v72;
  void (*v73)(char *, uint64_t);
  void **v74;
  uint64_t result;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  char *v83;
  void **v84;
  void **v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  void **v89;
  void **v90;
  void **v91;
  void **v92;
  void **v93;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v80 = (char *)&v76 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v83 = (char *)&v76 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v82 = (char *)&v76 - v16;
  v17 = type metadata accessor for Date();
  v87 = *(_QWORD *)(v17 - 8);
  v88 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v78 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v77 = (char *)&v76 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v81 = (void (*)(char *, uint64_t, uint64_t))((char *)&v76 - v24);
  v25 = (char *)a2 - (char *)a1;
  v26 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0)
    v26 = (char *)a2 - (char *)a1;
  v27 = v26 >> 3;
  v85 = a3;
  v28 = (char *)a3 - (char *)a2;
  v29 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v29 = (char *)a3 - (char *)a2;
  v30 = v29 >> 3;
  v93 = a1;
  v89 = a4;
  v92 = a4;
  if (v27 >= v29 >> 3)
  {
    v82 = v23;
    if (v28 < -7)
      goto LABEL_53;
    v53 = v89;
    v54 = (uint64_t)v80;
    if (v89 != a2 || &a2[v30] <= v89)
      memmove(v89, a2, 8 * v30);
    v55 = (char *)&v53[v30];
    v91 = (void **)v55;
    v93 = a2;
    if (v28 < 8 || a1 >= a2)
    {
LABEL_52:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v93, &v92, &v91);
      return 1;
    }
    v56 = v85 - 1;
    v57 = a2;
    v86 = a1;
    v79 = v11;
    while (1)
    {
      v90 = a2;
      v84 = v56 + 1;
      v85 = (void **)v55;
      v59 = (void *)*((_QWORD *)v55 - 1);
      v55 -= 8;
      v58 = v59;
      v60 = (char *)*--v57;
      v83 = v60;
      outlined init with copy of Date?((uint64_t)v58 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v54);
      v62 = v87;
      v61 = v88;
      v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
      if (v63(v54, 1, v88) == 1)
      {
        outlined destroy of Any?(v54, (uint64_t *)&demangling cache variable for type metadata for Date?);
        v64 = v84;
        v65 = v89;
      }
      else
      {
        v81 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
        v81(v82, v54, v61);
        v66 = v83;
        v67 = (uint64_t)v79;
        outlined init with copy of Date?((uint64_t)&v83[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp], (uint64_t)v79);
        if (v63(v67, 1, v61) == 1)
        {
          v68 = v58;
          v69 = v66;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v82, v61);
          outlined destroy of Any?(v67, (uint64_t *)&demangling cache variable for type metadata for Date?);

          v65 = v89;
          v54 = (uint64_t)v80;
          v64 = v84;
        }
        else
        {
          v70 = v78;
          v81(v78, v67, v61);
          v81 = v58;
          v83 = (char *)v66;
          v71 = v82;
          v72 = static Date.< infix(_:_:)();
          v73 = *(void (**)(char *, uint64_t))(v62 + 8);
          v73(v70, v61);
          v73(v71, v61);

          v65 = v89;
          v54 = (uint64_t)v80;
          v64 = v84;
          if ((v72 & 1) != 0)
          {
            v55 = (char *)v85;
            if (v84 != v90 || v56 >= v90)
              *v56 = *v57;
            v93 = v57;
            goto LABEL_49;
          }
        }
      }
      v91 = (void **)v55;
      v57 = v90;
      if (v64 >= v85 && v56 < v85)
      {
        v74 = v86;
        if (v64 != v85)
          *v56 = *(void **)v55;
        goto LABEL_50;
      }
      *v56 = *(void **)v55;
LABEL_49:
      v74 = v86;
LABEL_50:
      if (v55 > (char *)v65)
      {
        --v56;
        a2 = v57;
        if (v57 > v74)
          continue;
      }
      goto LABEL_52;
    }
  }
  if (v25 >= -7)
  {
    v31 = v89;
    if (v89 != a1 || &a1[v27] <= v89)
      memmove(v89, a1, 8 * v27);
    v84 = &v31[v27];
    v91 = v84;
    v32 = (uint64_t)v82;
    if (v25 >= 8 && a2 < v85)
    {
      while (1)
      {
        v90 = a2;
        v33 = *a2;
        v34 = *v31;
        outlined init with copy of Date?((uint64_t)*a2 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v32);
        v36 = v87;
        v35 = v88;
        v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
        if (v37((char *)v32, 1, v88) == 1)
        {
          outlined destroy of Any?(v32, (uint64_t *)&demangling cache variable for type metadata for Date?);
        }
        else
        {
          v86 = a1;
          v89 = v31;
          v38 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
          v39 = (char *)v81;
          v38((char *)v81, v32, v35);
          v40 = v83;
          outlined init with copy of Date?((uint64_t)v34 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, (uint64_t)v83);
          if (v37(v40, 1, v35) == 1)
          {
            v41 = v33;
            v42 = v34;
            (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
            outlined destroy of Any?((uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Date?);

            v31 = v89;
            a1 = v86;
            v32 = (uint64_t)v82;
          }
          else
          {
            v43 = v39;
            v44 = v77;
            v38(v77, (uint64_t)v40, v35);
            v45 = v33;
            v46 = v34;
            v47 = static Date.< infix(_:_:)();
            v48 = v36;
            v49 = v47;
            v50 = *(void (**)(char *, uint64_t))(v48 + 8);
            v50(v44, v35);
            v50(v43, v35);

            v31 = v89;
            a1 = v86;
            v32 = (uint64_t)v82;
            if ((v49 & 1) != 0)
            {
              v51 = v90 + 1;
              if (v86 < v90 || v86 >= v51)
              {
                *v86 = *v90;
              }
              else if (v86 != v90)
              {
                *v86 = *v90;
              }
              goto LABEL_24;
            }
          }
        }
        v52 = v90;
        if (a1 != v31)
          *a1 = *v31;
        v92 = ++v31;
        v51 = v52;
LABEL_24:
        v93 = ++a1;
        if (v31 < v84)
        {
          a2 = v51;
          if (v51 < v85)
            continue;
        }
        goto LABEL_52;
      }
    }
    goto LABEL_52;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  float *v25;
  float *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[6 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v16 = (char *)&v4[6 * v11];
      v24 = v16;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v17 = a3 - 24;
        v18 = v6;
        while (1)
        {
          v19 = (float *)(v17 + 24);
          v20 = *(v18 - 6);
          v18 -= 6;
          if (v20 >= *((float *)v16 - 6))
          {
            v24 = v16 - 24;
            if (v19 < (float *)v16 || v17 >= (unint64_t)v16 || v19 != (float *)v16)
            {
              v22 = *(_OWORD *)(v16 - 24);
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v16 - 1);
              *(_OWORD *)v17 = v22;
            }
            v18 = v6;
            v16 -= 24;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v21;
            }
            v26 = v18;
            if (v18 <= v7)
              goto LABEL_38;
          }
          v17 -= 24;
          v6 = v18;
          if (v16 <= (char *)v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[6 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[6 * v9];
    v24 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*v4 >= *v6)
        {
          if (v7 != v4)
          {
            v15 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v15;
          }
          v4 += 6;
          v25 = v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 6;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            v14 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v14;
          }
        }
        v7 += 6;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v26 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  BOOL v14;
  uint64_t v15;
  char v17;
  Swift::Int v19[2];
  uint64_t v20;

  v20 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_24;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = a1 & 0xC000000000000001;
      while (v5)
      {
        v6 = (char *)MEMORY[0x24957E42C](v4, a1);
LABEL_10:
        v7 = v6;
        v8 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_23;
        v9 = v3;
        v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8];
        v19[0] = *(_QWORD *)&v6[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        v19[1] = v10;
        lazy protocol witness table accessor for type String and conformance String();
        v11 = StringProtocol.localizedLowercase.getter();
        v13 = v12;
        if (one-time initialization token for smartRepliesMarker != -1)
          swift_once();
        v14 = v11 == static String.smartRepliesMarker && v13 == unk_2544494A0;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(v19, v11, v13);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v15 = *a2;
          swift_bridgeObjectRetain();
          v17 = specialized Set.contains(_:)(v11, v13, v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v5 = a1 & 0xC000000000000001;
          specialized Set._Variant.insert(_:)(v19, v11, v13);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_6;
          }
        }

LABEL_6:
        ++v4;
        v3 = v9;
        if (v8 == v9)
          return v20;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
        return MEMORY[0x24BEE4AF8];
    }
    v6 = (char *)*(id *)(a1 + 8 * v4 + 32);
    goto LABEL_10;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release();
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release();
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release();
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v14, v15, v16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release();
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized SRPredictionType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SRPredictionType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t specialized static ModelResponseManager.conversationTurnsFrom(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t result;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void (*v48)(void);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  objc_class *v59;
  char *v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  objc_super v77;
  objc_super v78;
  unint64_t v79;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v65 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v76 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v70 = (uint64_t)&v65 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v74 = (char *)&v65 - v15;
  v79 = MEMORY[0x24BEE4AF8];
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v17 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x100);
  v66 = (_QWORD *)a1;
  v18 = v17(v14);
  v19 = v18;
  if (v18 >> 62)
  {
    v18 = _CocoaArrayWrapper.endIndex.getter();
    v20 = v18;
    v75 = v6;
    if (v18)
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  v75 = v6;
  if (!v20)
    goto LABEL_22;
LABEL_3:
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_65;
  }
  v71 = v8;
  v67 = v3;
  v68 = v2;
  v21 = 0;
  v22 = v19 & 0xC000000000000001;
  v72 = (uint64_t (*)(char *, uint64_t, uint64_t))(v19 & 0xC000000000000001);
  v73 = v20;
  v23 = (uint64_t)v74;
  do
  {
    if (v22)
      v24 = (_QWORD *)MEMORY[0x24957E42C](v21, v19);
    else
      v24 = *(id *)(v19 + 8 * v21 + 32);
    v25 = v24;
    if (((*(uint64_t (**)(void))((*v16 & *v24) + 0xE8))() & 1) == 0
      && ((*(uint64_t (**)(void))((*v16 & *v25) + 0x100))() & 1) == 0)
    {
      v26 = (*(uint64_t (**)(void))((*v16 & *v25) + 0xA0))();
      if (v27)
        v28 = v26;
      else
        v28 = 0;
      if (v27)
        v29 = v27;
      else
        v29 = 0xE000000000000000;
      v30 = (*(uint64_t (**)(uint64_t))((*v16 & *v25) + 0xB8))(v26);
      v32 = v31;
      (*(void (**)(void))((*v16 & *v25) + 0x130))();
      v33 = (objc_class *)type metadata accessor for SRSmartRepliesConversationTurn();
      v34 = (char *)objc_allocWithZone(v33);
      v35 = (uint64_t *)&v34[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
      *v35 = v28;
      v35[1] = v29;
      v36 = (uint64_t *)&v34[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID];
      *v36 = v30;
      v36[1] = v32;
      outlined init with copy of Date?(v23, (uint64_t)&v34[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp]);
      v78.receiver = v34;
      v78.super_class = v33;
      objc_msgSendSuper2(&v78, sel_init);
      v37 = outlined destroy of Any?(v23, (uint64_t *)&demangling cache variable for type metadata for Date?);
      MEMORY[0x24957E0E4](v37);
      if (*(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v6 = v75;
      v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v22 = (unint64_t)v72;
      v20 = v73;
    }
    ++v21;

  }
  while (v20 != v21);
  swift_bridgeObjectRelease();
  v3 = v67;
  v2 = v68;
  v8 = v71;
LABEL_23:
  v19 = 0;
  specialized MutableCollection<>.sort(by:)(&v79);
  a1 = v79;
  if (!(v79 >> 62))
  {
    v38 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v38)
      goto LABEL_25;
LABEL_61:
    swift_bridgeObjectRelease();
    v40 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v70, 1, 1, v2);
    goto LABEL_62;
  }
  swift_bridgeObjectRetain();
  v38 = _CocoaArrayWrapper.endIndex.getter();
  if (!v38)
    goto LABEL_61;
LABEL_25:
  v18 = v38 - 1;
  if (__OFSUB__(v38, 1))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if ((a1 & 0xC000000000000001) == 0)
  {
    if ((v18 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v18 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v39 = *(id *)(a1 + 8 * v18 + 32);
      swift_bridgeObjectRelease();
      v40 = v70;
      outlined init with copy of Date?((uint64_t)v39 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v70);

      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_69;
  }
LABEL_66:
  v64 = MEMORY[0x24957E42C](v18, a1);
  swift_bridgeObjectRelease();
  v40 = v70;
  outlined init with copy of Date?(v64 + OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp, v70);
  swift_unknownObjectRelease();
LABEL_30:
  v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v69(v40, 1, v2) == 1)
  {
LABEL_62:
    outlined destroy of Any?(v40, (uint64_t *)&demangling cache variable for type metadata for Date?);
    return v79;
  }
  v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32);
  v41 = v72(v8, v40, v2);
  result = (*(uint64_t (**)(uint64_t))((*v16 & *v66) + 0x148))(v41);
  if (!result)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return v79;
  }
  v38 = result;
  v66 = (_QWORD *)v19;
  v71 = v8;
  if (!(result >> 62))
  {
    v43 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_34;
  }
LABEL_69:
  result = _CocoaArrayWrapper.endIndex.getter();
  v43 = result;
LABEL_34:
  v44 = (unsigned int (*)(char *, uint64_t, uint64_t))v69;
  if (!v43)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    specialized MutableCollection<>.sort(by:)(&v79);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v71, v2);
    return v79;
  }
  if (v43 >= 1)
  {
    v45 = 0;
    v73 = v38 & 0xC000000000000001;
    v67 = v3;
    v68 = v2;
    do
    {
      if (v73)
        v46 = (_QWORD *)MEMORY[0x24957E42C](v45, v38);
      else
        v46 = *(id *)(v38 + 8 * v45 + 32);
      v47 = v46;
      v48 = *(void (**)(void))((*v16 & *v46) + 0x130);
      v48();
      v49 = (uint64_t)v76;
      if (v44(v76, 1, v2) == 1)
      {

        outlined destroy of Any?(v49, (uint64_t *)&demangling cache variable for type metadata for Date?);
      }
      else
      {
        v72(v6, v49, v2);
        lazy protocol witness table accessor for type Date and conformance Date();
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);

        }
        else
        {
          v50 = (_QWORD *)MEMORY[0x24BEE4EA0];
          if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v47) + 0xE8))() & 1) != 0
            || ((*(uint64_t (**)(void))((*v50 & *v47) + 0x100))() & 1) != 0)
          {

            (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          }
          else
          {
            v51 = (*(uint64_t (**)(void))((*v50 & *v47) + 0xA0))();
            if (v52)
              v53 = v51;
            else
              v53 = 0;
            v70 = v53;
            if (v52)
              v54 = v52;
            else
              v54 = 0xE000000000000000;
            v55 = (*(uint64_t (**)(uint64_t))((*v50 & *v47) + 0xB8))(v51);
            v57 = v56;
            v58 = (uint64_t)v74;
            v48();
            v59 = (objc_class *)type metadata accessor for SRSmartRepliesConversationTurn();
            v60 = (char *)objc_allocWithZone(v59);
            v61 = &v60[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_text];
            *(_QWORD *)v61 = v70;
            *((_QWORD *)v61 + 1) = v54;
            v62 = (uint64_t *)&v60[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_senderID];
            *v62 = v55;
            v62[1] = v57;
            outlined init with copy of Date?(v58, (uint64_t)&v60[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesConversationTurn_timestamp]);
            v77.receiver = v60;
            v77.super_class = v59;
            objc_msgSendSuper2(&v77, sel_init);
            v63 = outlined destroy of Any?(v58, (uint64_t *)&demangling cache variable for type metadata for Date?);
            MEMORY[0x24957E0E4](v63);
            if (*(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            v3 = v67;
            v2 = v68;
            v6 = v75;
            (*(void (**)(char *, uint64_t))(v67 + 8))(v75, v68);
          }
          v44 = (unsigned int (*)(char *, uint64_t, uint64_t))v69;
        }
      }
      ++v45;
      v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
    }
    while (v43 != v45);
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

id specialized static ModelResponseManager.formatTextSuggestions(dynamicSuggestions:cannedSuggestions:shouldLowercaseClosure:)(unint64_t a1, unint64_t a2)
{
  id result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  objc_class *v16;
  _BYTE *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 v20;
  objc_super v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = MEMORY[0x24BEE4B08];
  result = objc_msgSend((id)objc_opt_self(), sel_sharedPreferencesController);
  if (!result)
    goto LABEL_17;
  v5 = result;
  v20 = objc_msgSend(result, sel_BOOLForKey_, 9);

  v22 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(a2);
  v6 = specialized _ArrayProtocol.filter(_:)(a1, &v25);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
LABEL_15:
    swift_bridgeObjectRelease();
    return (id)v19;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_14;
LABEL_4:
  v24 = MEMORY[0x24BEE4AF8];
  result = (id)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (char *)MEMORY[0x24957E42C](v8, v6);
      else
        v9 = (char *)*(id *)(v6 + 8 * v8 + 32);
      v10 = v9;
      if ((v20 & 1) == 0)
      {
        v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title + 8];
        v22 = *(_QWORD *)&v9[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        v23 = v11;
        lazy protocol witness table accessor for type String and conformance String();
        v12 = StringProtocol.localizedLowercase.getter();
        v14 = v13;
        v15 = v10[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion];
        v16 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestion();
        v17 = objc_allocWithZone(v16);
        v18 = (uint64_t *)&v17[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        *v18 = v12;
        v18[1] = v14;
        v17[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = v15;
        v21.receiver = v17;
        v21.super_class = v16;
        objc_msgSendSuper2(&v21, sel_init);

      }
      ++v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v7 != v8);
    v19 = v24;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SRPredictionType and conformance SRPredictionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRPredictionType and conformance SRPredictionType;
  if (!lazy protocol witness table cache variable for type SRPredictionType and conformance SRPredictionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRPredictionType, &type metadata for SRPredictionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRPredictionType and conformance SRPredictionType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SRPredictionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_247628690 + 4 * byte_247657A0F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2476286C4 + 4 * byte_247657A0A[v4]))();
}

uint64_t sub_2476286C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2476286CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2476286D4);
  return result;
}

uint64_t sub_2476286E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2476286E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2476286EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2476286F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SRPredictionType()
{
  return &type metadata for SRPredictionType;
}

uint64_t destroy for SRPredictionItem()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for SRPredictionItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SRPredictionItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SRPredictionItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SRPredictionItem(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SRPredictionItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SRPredictionItem()
{
  return &type metadata for SRPredictionItem;
}

uint64_t destroy for ModelResponseManager()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelResponseManager(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ModelResponseManager(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ModelResponseManager(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ModelResponseManager()
{
  return &type metadata for ModelResponseManager;
}

uint64_t outlined init with take of TrialSmartRepliesFactors(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrialSmartRepliesFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TrialSmartRepliesAssetPaths?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TrialSmartRepliesAssetPaths?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ModelResponseManager.predictWithoutCache(for:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v3;

  closure #1 in ModelResponseManager.predictWithoutCache(for:)(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x24957EC18](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t ActionContactDataSource.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
  return v0;
}

_QWORD *ActionContactDataSource.init()()
{
  _QWORD *v0;

  v0[3] = 0;
  v0[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
  (*(void (**)(_QWORD))(*v0 + 152))(0);
  return v0;
}

uint64_t ActionContactDataSource.addresses(for:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(a1, sel_postalAddresses);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_11;
LABEL_3:
  v10 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x24957E42C](v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = objc_msgSend(v6, sel_value);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v3 != v5);
    v9 = v10;
    swift_bridgeObjectRelease();
    return v9;
  }
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall ActionContactDataSource.phoneNumber(for:matchingLabel:)(CNContact a1, Swift::String_optional matchingLabel)
{
  void *object;
  id v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  Swift::String_optional result;
  uint64_t countAndFlagsBits;

  object = matchingLabel.value._object;
  countAndFlagsBits = matchingLabel.value._countAndFlagsBits;
  v3 = -[objc_class phoneNumbers](a1.super.isa, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = v4 >> 62;
  if (object)
  {
    if (v7)
      goto LABEL_27;
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v8)
    {
      v9 = 4;
      while (1)
      {
        v10 = (v4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24957E42C](v9 - 4, v4) : *(id *)(v4 + 8 * v9);
        v11 = v10;
        v12 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        v13 = objc_msgSend(v10, sel_label);
        if (v13)
        {
          v14 = v13;
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v17 = v16;

          if (v15 == countAndFlagsBits && v17 == object)
          {
            swift_bridgeObjectRelease();
LABEL_24:
            swift_bridgeObjectRelease();
            v27 = objc_msgSend(v11, sel_value);
            v24 = objc_msgSend(v27, sel_stringValue);

            v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v20 = v28;

            goto LABEL_25;
          }
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0)
            goto LABEL_24;
        }

        ++v9;
        if (v12 == v8)
          goto LABEL_28;
      }
      __break(1u);
LABEL_27:
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_28:
    swift_bridgeObjectRelease();
    v25 = 0;
    v20 = 0;
    goto LABEL_31;
  }
  if (v7)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    v5 = swift_bridgeObjectRelease();
    if (v20)
      goto LABEL_19;
LABEL_30:
    swift_bridgeObjectRelease();
    v25 = 0;
    goto LABEL_31;
  }
  v20 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v20)
    goto LABEL_30;
LABEL_19:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v21 = (id)MEMORY[0x24957E42C](0, v4);
  }
  else
  {
    if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_34;
    }
    v21 = *(id *)(v4 + 32);
  }
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v22, sel_value);

  v24 = objc_msgSend(v23, sel_stringValue);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v26;
LABEL_25:

LABEL_31:
  v5 = v25;
  v6 = (void *)v20;
LABEL_34:
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall ActionContactDataSource.givenName(for:)(CNContact a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ActionContactDataSource.givenName(for:)(a1.super.isa, (SEL *)&selRef_givenName);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall ActionContactDataSource.familyName(for:)(CNContact a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ActionContactDataSource.givenName(for:)(a1.super.isa, (SEL *)&selRef_familyName);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t ActionContactDataSource.givenName(for:)(void *a1, SEL *a2)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, *a2);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

Swift::String __swiftcall ActionContactDataSource.fullName(for:)(CNContact a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ActionContactDataSource.fullName(for:)((uint64_t)a1.super.isa, CNContact.completeName.getter);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall ActionContactDataSource.friendlyName(for:)(CNContact a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ActionContactDataSource.fullName(for:)((uint64_t)a1.super.isa, CNContact.friendlyName.getter);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t ActionContactDataSource.fullName(for:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  uint64_t v3;

  result = a2();
  if (!v3)
    return 0;
  return result;
}

uint64_t ActionContactDataSource.emailAddresses(for:)()
{
  return CNContact.emailAddressStrings.getter();
}

CNContact_optional __swiftcall ActionContactDataSource.meContact()()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Class isa;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  Swift::Bool v28;
  objc_class *v29;
  id v30[2];
  CNContact_optional result;

  v30[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  if (!v1)
  {
    v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_247657B30;
    v5 = objc_msgSend((id)objc_opt_self(), sel_descriptorForRequiredKeysForStyle_, 0);
    v6 = (void *)*MEMORY[0x24BDBA288];
    v7 = (void **)MEMORY[0x24BDBA378];
    *(_QWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 40) = v6;
    v8 = *v7;
    v9 = (void *)*MEMORY[0x24BDBA3C8];
    *(_QWORD *)(v4 + 48) = *v7;
    *(_QWORD *)(v4 + 56) = v9;
    v10 = (void *)*MEMORY[0x24BDBA348];
    *(_QWORD *)(v4 + 64) = *MEMORY[0x24BDBA348];
    v30[0] = (id)v4;
    specialized Array._endMutation()();
    v11 = *(void **)(v3 + 16);
    v12 = v6;
    v13 = v8;
    v14 = v9;
    v15 = v10;
    v16 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30[0] = 0;
    v2 = objc_msgSend(v16, sel__ios_meContactWithKeysToFetch_error_, isa, v30);

    v18 = v30[0];
    if (v2)
    {
      v19 = *(NSObject **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = v2;
      v20 = v18;
      v21 = v2;
    }
    else
    {
      v22 = v30[0];
      v23 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for standard != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.standard);
      v19 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_2475DF000, v19, v25, "Was unable to find a Me Contact", v26, 2u);
        MEMORY[0x24957ECC0](v26, -1, -1);
      }
      v2 = 0;
    }

  }
  v27 = v1;
  v29 = (objc_class *)v2;
  result.value.super.isa = v29;
  result.is_nil = v28;
  return result;
}

Swift::String_optional __swiftcall ActionContactDataSource.meContactIdentifier()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String_optional result;

  v1 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_identifier);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v7 = v4;
  v8 = v6;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

uint64_t ActionContactDataSource.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ActionContactDataSource.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ActionDataSource.prewarmDataAccessIfNecessary(synchronously:) in conformance ActionContactDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t type metadata accessor for ActionContactDataSource()
{
  return objc_opt_self();
}

uint64_t method lookup function for ActionContactDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActionContactDataSource.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ActionContactDataSource.prewarmDataAccessIfNecessary(synchronously:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ActionContactDataSource.addresses(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ActionContactDataSource.phoneNumber(for:matchingLabel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ActionContactDataSource.givenName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ActionContactDataSource.familyName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ActionContactDataSource.fullName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ActionContactDataSource.friendlyName(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ActionContactDataSource.emailAddresses(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ActionContactDataSource.meContact()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ActionContactDataSource.meContactIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t *ContactResolver.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static ContactResolver.shared;
}

_QWORD *ContactResolver.inferContacts(text:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v0 = v3;
  if (!v3)
  {
    v1 = String.inferredAddressBookContacts()();
    if (v1)
      v0 = v1;
    else
      v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  return v0;
}

uint64_t CNContact.completeName.getter()
{
  return CNContact.completeName.getter(0);
}

uint64_t CNContact.friendlyName.getter()
{
  return CNContact.completeName.getter(1);
}

uint64_t CNContact.completeName.getter(uint64_t a1)
{
  void *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  Class isa;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v28;

  v3 = v1;
  v4 = type metadata accessor for PersonNameComponents();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1738]), sel_init);
  objc_msgSend(v8, sel_setStyle_, a1);
  PersonNameComponents.init()();
  v9 = objc_msgSend(v3, sel_namePrefix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.namePrefix.setter();
  v10 = objc_msgSend(v3, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.givenName.setter();
  v11 = objc_msgSend(v3, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.middleName.setter();
  v12 = objc_msgSend(v3, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.familyName.setter();
  v13 = objc_msgSend(v3, sel_nameSuffix);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.nameSuffix.setter();
  v14 = objc_msgSend(v3, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  PersonNameComponents.nickname.setter();
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v8, sel_stringFromPersonNameComponents_, isa);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = v17 & 0xFFFFFFFFFFFFLL;
  if (v20)
    goto LABEL_4;
  v21 = objc_msgSend(v3, sel_organizationName);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  swift_bridgeObjectRelease();
  v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0)
    v25 = v22 & 0xFFFFFFFFFFFFLL;
  if (!v25)
  {
LABEL_4:

  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(v3, sel_organizationName);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v17;
}

uint64_t CNContact.emailAddressStrings.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = objc_msgSend(v0, sel_emailAddresses);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v12 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v12;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x24957E42C](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = String.init(_:)(objc_msgSend(v7, sel_value));

      v11 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      ++v5;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(Swift::String *)(v12 + 16 * v11 + 32) = v9;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t CNContact.phoneNumberStrings.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = objc_msgSend(v0, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v17 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v17;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x24957E42C](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_value);
      v10 = objc_msgSend(v9, sel_stringValue);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = String.init<A>(_:)();
      v13 = v12;

      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      ++v5;
      *(_QWORD *)(v17 + 16) = v15 + 1;
      v16 = v17 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v13;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall String.inferredPeople(includeNouns:)(Swift::Bool includeNouns)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  id v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  id v16;
  Class v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  Swift::Bool v32;
  void *v33;
  uint64_t v34[4];
  uint64_t v35;
  Swift::OpaquePointer_optional result;

  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  else
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = v2;
    v5 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLTagScheme>);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_247656500;
    v7 = (void *)*MEMORY[0x24BDDFD10];
    *(_QWORD *)(v6 + 32) = *MEMORY[0x24BDDFD10];
    v8 = objc_allocWithZone(MEMORY[0x24BDDFD68]);
    type metadata accessor for NLTagScheme(0);
    v9 = v7;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v8, sel_initWithTagSchemes_, isa);

    v12 = (void *)MEMORY[0x24957DF1C](v5, v4);
    objc_msgSend(v11, sel_setString_, v12);

    v13 = (void **)NLGazetteer.supportGazetteer.unsafeMutableAddressor();
    v14 = *v13;
    if (*v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_247656A00;
      *(_QWORD *)(v15 + 32) = v14;
      v34[0] = v15;
      specialized Array._endMutation()();
      type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NLGazetteer);
      v16 = v14;
      v17 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v11, sel_setGazetteers_forTagScheme_, v17, v9);

    }
    v34[3] = MEMORY[0x24BEE4AF8];
    v35 = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](v13);
    NLTagger.enumerateTags(in:unit:scheme:options:using:)();
    if (one-time initialization token for standard != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.standard);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v34[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_beginAccess();
      v23 = swift_bridgeObjectRetain();
      v24 = MEMORY[0x24957E108](v23, &type metadata for SRSmartRepliesPersonMatch);
      v26 = v25;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v19, v20, "Completed NLTagger determination of candidates: %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v22, -1, -1);
      MEMORY[0x24957ECC0](v21, -1, -1);
    }

    swift_beginAccess();
    if (*(_QWORD *)(v35 + 16))
      v27 = swift_bridgeObjectRetain();
    else
      v27 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.standard);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_2475DF000, v29, v30, "Performing contact determination on an empty string", v31, 2u);
      MEMORY[0x24957ECC0](v31, -1, -1);
    }

    v27 = 0;
  }
  v33 = (void *)v27;
  result.value._rawValue = v33;
  result.is_nil = v32;
  return result;
}

BOOL closure #1 in String.inferredPeople(includeNouns:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, char a7, _QWORD **a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;

  if (a1)
  {
    v39 = a1;
    v14 = String.subscript.getter();
    v38 = MEMORY[0x24957DF88](v14);
    v16 = v15;
    swift_bridgeObjectRelease();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;
    if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        if ((a7 & 1) != 0)
        {
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v25 = v24;
          if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
          {
            swift_bridgeObjectRelease_n();
LABEL_21:
            v34 = *a8;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a8 = v34;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
              *a8 = v34;
            }
            v37 = v34[2];
            v36 = v34[3];
            if (v37 >= v36 >> 1)
            {
              v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v34);
              *a8 = v34;
            }
            v34[2] = v37 + 1;
            v31 = &v34[5 * v37];
LABEL_17:
            v31[4] = 0;
            v31[5] = v38;
            v31[6] = v16;
            v31[7] = a2;
            v31[8] = a3;
LABEL_18:

            return a1 != 0;
          }
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_21;
        }
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    v27 = *a6;
    v28 = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v27;
    if ((v28 & 1) == 0)
    {
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
      *a6 = v27;
    }
    v30 = v27[2];
    v29 = v27[3];
    if (v30 >= v29 >> 1)
    {
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v27);
      *a6 = v27;
    }
    v27[2] = v30 + 1;
    v31 = &v27[5 * v30];
    goto LABEL_17;
  }
  return a1 != 0;
}

Swift::OpaquePointer_optional __swiftcall String.inferredPeople()()
{
  return String.inferredPeople(includeNouns:)(0);
}

CNContact_optional __swiftcall String.toBestCNContact()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  Class isa;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  void **v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  Class v20;
  id v21;
  id v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  Swift::Bool v27;
  id v28;
  void *v29;
  objc_class *v30;
  id v31[2];
  CNContact_optional result;

  v2 = v1;
  v3 = v0;
  v31[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
  v5 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_247656500;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v2;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v5, sel_predicateForContactsMatchingHandleStrings_, isa);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_247657B30;
  v10 = objc_msgSend((id)objc_opt_self(), sel_descriptorForRequiredKeysForStyle_, 0);
  v11 = (void *)*MEMORY[0x24BDBA288];
  v12 = (void **)MEMORY[0x24BDBA378];
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v11;
  v13 = *v12;
  v14 = (void *)*MEMORY[0x24BDBA3C8];
  *(_QWORD *)(v9 + 48) = *v12;
  *(_QWORD *)(v9 + 56) = v14;
  v15 = (void *)*MEMORY[0x24BDBA348];
  *(_QWORD *)(v9 + 64) = *MEMORY[0x24BDBA348];
  specialized Array._endMutation()();
  v16 = v11;
  v17 = v13;
  v18 = v14;
  v19 = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v31[0] = 0;
  v21 = objc_msgSend(v4, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, v8, v20, v31);

  v22 = v31[0];
  if (!v21)
  {
    v28 = v31[0];
    v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v25 = 0;
    goto LABEL_10;
  }
  type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for CNContact);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v22;

  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25)
      goto LABEL_4;
  }
  else
  {
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
    {
LABEL_4:
      if ((v23 & 0xC000000000000001) != 0)
      {
        v26 = (id)MEMORY[0x24957E42C](0, v23);
      }
      else
      {
        if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          __break(1u);
        v26 = *(id *)(v23 + 32);
      }
      v25 = (uint64_t)v26;
    }
  }

  swift_bridgeObjectRelease();
LABEL_10:
  v30 = (objc_class *)v25;
  result.value.super.isa = v30;
  result.is_nil = v27;
  return result;
}

_QWORD *String.inferredAddressBookContacts()()
{
  unint64_t v0;
  unint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  unint64_t v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47[2];

  v47[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (unint64_t)String.inferredPeople(includeNouns:)(1);
  if (!v0)
  {
    if (one-time initialization token for standard != -1)
LABEL_32:
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.standard);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_2475DF000, v33, v34, "Contents of string does not seem to contain person names", v35, 2u);
      MEMORY[0x24957ECC0](v35, -1, -1);
    }

    return 0;
  }
  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();

    result = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_28;
    return result;
  }
  v41 = (id)objc_opt_self();
  v40 = (id)objc_opt_self();
  v39 = (void *)*MEMORY[0x24BDBA288];
  v38 = (void *)*MEMORY[0x24BDBA378];
  v37 = (void *)*MEMORY[0x24BDBA3C8];
  v36 = (void *)*MEMORY[0x24BDBA348];
  v4 = (uint64_t *)(v1 + 64);
  v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v42 = v2;
  do
  {
    v7 = *(v4 - 3);
    v8 = *(v4 - 2);
    v44 = *v4;
    v45 = *(v4 - 1);
    v9 = (id)*(v4 - 4);
    swift_bridgeObjectRetain();
    v46 = v7;
    v10 = (void *)MEMORY[0x24957DF1C](v7, v8);
    v11 = objc_msgSend(v41, sel_predicateForContactsMatchingName_, v10);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_247657B30;
    *(_QWORD *)(v12 + 32) = objc_msgSend(v40, sel_descriptorForRequiredKeysForStyle_, 0);
    *(_QWORD *)(v12 + 40) = v39;
    *(_QWORD *)(v12 + 48) = v38;
    *(_QWORD *)(v12 + 56) = v37;
    *(_QWORD *)(v12 + 64) = v36;
    v47[0] = (id)v12;
    specialized Array._endMutation()();
    v13 = v39;
    v14 = v38;
    v15 = v37;
    v16 = v36;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v47[0] = 0;
    v18 = objc_msgSend(v42, sel_unifiedContactsMatchingPredicate_keysToFetch_error_, v11, isa, v47);

    v19 = v47[0];
    if (!v18)
    {
      v5 = v47[0];
      v6 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();

      goto LABEL_5;
    }
    type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for CNContact);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v19;

    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v30)
      {
LABEL_18:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    else if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_18;
    }
    if ((v20 & 0xC000000000000001) != 0)
    {
      v22 = (id)MEMORY[0x24957E42C](0, v20);
    }
    else
    {
      if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_32;
      }
      v22 = *(id *)(v20 + 32);
    }
    v23 = v22;
    swift_bridgeObjectRelease();
    v24 = v23;
    swift_bridgeObjectRetain_n();
    v25 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v26 = v43;
    else
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v28 = v26[2];
    v27 = v26[3];
    if (v28 >= v27 >> 1)
      v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
    v26[2] = v28 + 1;
    v43 = v26;
    v29 = &v26[5 * v28];
    v29[4] = v23;
    v29[5] = v46;
    v29[6] = v8;
    v29[7] = v45;
    v29[8] = v44;
    swift_bridgeObjectRelease_n();

LABEL_5:
    v4 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();

  result = v43;
  if (v43[2])
    return result;
LABEL_28:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ContactResolver.init()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TUSCache<String, [SRSmartRepliesPersonMatch]>);
  swift_allocObject();
  return TUSCache.init(capacity:)();
}

uint64_t static ContactResolver.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

BOOL partial apply for closure #1 in String.inferredPeople(includeNouns:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in String.inferredPeople(includeNouns:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD ***)(v3 + 32), *(_BYTE *)(v3 + 40), *(_QWORD ***)(v3 + 48));
}

uint64_t type metadata accessor for NLGazetteer(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactResolver()
{
  return &type metadata for ContactResolver;
}

uint64_t CurrentlyPlayingActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:)
                             + async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v3();
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance CurrentlyPlayingActionMetadataProvider()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:)
                             + async function pointer to specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v3();
}

uint64_t specialized CurrentlyPlayingActionMetadataProvider.metadataItem(for:)()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v0[2] = swift_task_alloc();
  type metadata accessor for Date();
  v0[3] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlaybackInformation?);
  v0[4] = swift_task_alloc();
  v1 = type metadata accessor for PlaybackInformation();
  v0[5] = v1;
  v0[6] = *(_QWORD *)(v1 - 8);
  v0[7] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  id v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __objc2_class *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *vtable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  id v29;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(uint64_t **)(v0 + 32);
  ActionCurrentlyPlayingDataSource.currentlyPlayingInformation()(v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of PlaybackInformation?(*(_QWORD *)(v0 + 32));
    v4 = 0;
  }
  else
  {
    v5 = *(uint64_t **)(v0 + 56);
    outlined init with take of PlaybackInformation(*(_QWORD *)(v0 + 32), (uint64_t)v5);
    v7 = *v5;
    v6 = v5[1];
    v8 = v5[3];
    v9 = SROSmartRepliesActionMetadata;
    if (!v8)
      goto LABEL_10;
    v10 = v5[2];
    v11 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v11 = v10 & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      v12 = one-time initialization token for current;
      swift_bridgeObjectRetain();
      if (v12 != -1)
        swift_once();
      v13._countAndFlagsBits = 0xD00000000000001FLL;
      v32._object = (void *)0xE000000000000000;
      v13._object = (void *)0x800000024765CBE0;
      v14._countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      v32._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v14, v32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_247656880;
      v16 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v15 + 56) = MEMORY[0x24BEE0D00];
      v17 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v15 + 32) = v7;
      *(_QWORD *)(v15 + 40) = v6;
      *(_QWORD *)(v15 + 96) = v16;
      *(_QWORD *)(v15 + 104) = v17;
      *(_QWORD *)(v15 + 64) = v17;
      *(_QWORD *)(v15 + 72) = v10;
      *(_QWORD *)(v15 + 80) = v8;
      swift_bridgeObjectRetain();
      v31 = static String.localizedStringWithFormat(_:_:)();
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = SROSmartRepliesActionMetadata;
    }
    else
    {
LABEL_10:
      swift_bridgeObjectRetain();
      v31 = v7;
      v19 = v6;
    }
    v20 = v7;
    vtable = v9[50].vtable;
    swift_bridgeObjectRetain();
    if (vtable != (void *)-1)
      swift_once();
    v22 = *(_QWORD *)(v0 + 56);
    v23 = *(_QWORD *)(v0 + 40);
    v25 = *(_QWORD *)(v0 + 16);
    v24 = *(_QWORD *)(v0 + 24);
    v33._object = (void *)0xE000000000000000;
    v26._object = (void *)0x800000024765CBC0;
    v26._countAndFlagsBits = 0xD000000000000017;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v33._countAndFlagsBits = 0;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v27, v33);
    Date.init()();
    outlined init with copy of URL?(v22 + *(int *)(v23 + 28), v25);
    v29 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
    v4 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(15, v20, v6, v28._countAndFlagsBits, (uint64_t)v28._object, v31, v19, v24, -1.0, -1.0, 1, v25, 0, 0, 3);
    outlined destroy of PlaybackInformation(v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

ValueMetadata *type metadata accessor for CurrentlyPlayingActionMetadataProvider()
{
  return &type metadata for CurrentlyPlayingActionMetadataProvider;
}

uint64_t outlined destroy of PlaybackInformation?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlaybackInformation?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of PlaybackInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlaybackInformation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlaybackInformation(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PlaybackInformation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LocationActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v6(a2);
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance LocationActionMetadataProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = *v0;
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized LocationActionMetadataProvider.metadataItem(for:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v5(v2);
}

uint64_t specialized LocationActionMetadataProvider.bestTitleForPlacemark(_:)(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSBundle v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = objc_msgSend(v1, sel_areasOfInterest);
  if (v2)
  {
    v3 = v2;
    v4 = MEMORY[0x24BEE0D00];
    v5 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (one-time initialization token for current != -1)
      swift_once();
    v53._object = (void *)0xE000000000000000;
    v6._object = (void *)0x800000024765CC90;
    v6._countAndFlagsBits = 0xD000000000000026;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v53._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v7, v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_247656500;
    if (v5[2])
    {
      v10 = v5[4];
      v9 = v5[5];
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v8 + 56) = v4;
    *(_QWORD *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    if (v9)
      v23 = v10;
    else
      v23 = 0;
    if (v9)
      v24 = v9;
    else
      v24 = 0xE000000000000000;
    *(_QWORD *)(v8 + 32) = v23;
    *(_QWORD *)(v8 + 40) = v24;
    v22 = static String.localizedStringWithFormat(_:_:)();

    goto LABEL_21;
  }
  v11 = objc_msgSend(v1, sel_inlandWater);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    if (one-time initialization token for current != -1)
      swift_once();
    v16.super.isa = (Class)static NSBundle.current;
    v52 = 0xE000000000000000;
    v17 = 0x800000024765CC90;
    v18 = 0xD000000000000026;
    goto LABEL_11;
  }
  v25 = objc_msgSend(v1, sel_thoroughfare);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  v30 = objc_msgSend(v1, sel_locality);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v1, sel_name);
    if (v41)
    {
      v42 = v41;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v43;

      if (one-time initialization token for current != -1)
        swift_once();
      v16.super.isa = (Class)static NSBundle.current;
      v18 = 0xD000000000000029;
      v52 = 0xE000000000000000;
      v44 = "LOCATION_PLACEMARK_FRIENDLY_STRING_FORMAT";
LABEL_43:
      v17 = (unint64_t)(v44 - 32) | 0x8000000000000000;
LABEL_11:
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v20 = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v18, (Swift::String_optional)0, v16, v19, *(Swift::String *)(&v52 - 1));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_247656500;
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v21 + 32) = v13;
      *(_QWORD *)(v21 + 40) = v15;
LABEL_12:
      v22 = static String.localizedStringWithFormat(_:_:)();

LABEL_21:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v22;
    }
    v48 = objc_msgSend(v1, sel_subLocality);
    if (v48)
    {
      v49 = v48;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v50;

      if (one-time initialization token for current != -1)
        swift_once();
      v16.super.isa = (Class)static NSBundle.current;
      v18 = 0xD000000000000028;
      v52 = 0xE000000000000000;
      v44 = "LOCATION_LOCALITY_FRIENDLY_STRING_FORMAT";
      goto LABEL_43;
    }

    return 0;
  }
  v31 = v30;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;

  v35 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0)
    v35 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v35)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for current != -1)
      swift_once();
    v45._countAndFlagsBits = 0xD000000000000028;
    v55._object = (void *)0xE000000000000000;
    v45._object = (void *)0x800000024765CC00;
    v46._countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    v55._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v46, v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_247656500;
    *(_QWORD *)(v47 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v47 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v47 + 32) = v32;
    *(_QWORD *)(v47 + 40) = v34;
    goto LABEL_12;
  }
  if (one-time initialization token for current != -1)
    swift_once();
  v36._countAndFlagsBits = 0xD00000000000002BLL;
  v54._object = (void *)0xE000000000000000;
  v36._object = (void *)0x800000024765CC60;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v37, v54);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_247656880;
  v39 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE0D00];
  v40 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v38 + 32) = v27;
  *(_QWORD *)(v38 + 40) = v29;
  *(_QWORD *)(v38 + 96) = v39;
  *(_QWORD *)(v38 + 104) = v40;
  *(_QWORD *)(v38 + 64) = v40;
  *(_QWORD *)(v38 + 72) = v32;
  *(_QWORD *)(v38 + 80) = v34;
  v22 = static String.localizedStringWithFormat(_:_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t specialized LocationActionMetadataProvider.metadataItem(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v1[5] = swift_task_alloc();
  type metadata accessor for Date();
  v1[6] = swift_task_alloc();
  v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a1 + 192) + *(_QWORD *)(*(_QWORD *)a1 + 192));
  v3 = (_QWORD *)swift_task_alloc();
  v1[7] = v3;
  *v3 = v1;
  v3[1] = specialized LocationActionMetadataProvider.metadataItem(for:);
  return v5();
}

{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 32);
  v7 = *v1;
  *(_QWORD *)(v7 + 64) = a1;
  swift_task_dealloc();
  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v3 + 200) + *(_QWORD *)(*(_QWORD *)v3 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 72) = v4;
  *v4 = v7;
  v4[1] = specialized LocationActionMetadataProvider.metadataItem(for:);
  return v6(a1);
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized LocationActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v1 = *(void **)(v0 + 64);
  if (*(_QWORD *)(v0 + 80))
  {
    if (v1)
    {
      objc_msgSend(*(id *)(v0 + 64), sel_coordinate);
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0xE000000000000000;
      Double.write<A>(to:)();
      v2._countAndFlagsBits = 8236;
      v2._object = (void *)0xE200000000000000;
      String.append(_:)(v2);
      Double.write<A>(to:)();
      v23 = *(_QWORD *)(v0 + 24);
      v24 = *(_QWORD *)(v0 + 16);
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
    if (one-time initialization token for current != -1)
      swift_once();
    v4 = *(void **)(v0 + 80);
    v5 = *(void **)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 40);
    v25._object = (void *)0xE000000000000000;
    v7._object = (void *)0x800000024765BCE0;
    v7._countAndFlagsBits = 0xD000000000000010;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = 0;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v8, v25);
    v10 = v4;
    v11 = specialized LocationActionMetadataProvider.bestTitleForPlacemark(_:)(v4);
    v13 = v12;

    Date.init()();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    if (v1)
    {
      objc_msgSend(v5, sel_coordinate);
      v16 = v15;
      objc_msgSend(v5, sel_coordinate);
      v18 = v17;
    }
    else
    {
      v18 = -1.0;
      v16 = -1.0;
    }
    v19 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    v21 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
    v3 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(3, v24, v23, v9._countAndFlagsBits, (uint64_t)v9._object, v11, v13, v20, v16, v18, 1, v19, 0, 0, 4);

  }
  else
  {

    v3 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v3);
}

ValueMetadata *type metadata accessor for LocationActionMetadataProvider()
{
  return &type metadata for LocationActionMetadataProvider;
}

__n128 MetricsReplyEngaged.init(replyString:metadata:repliesListGenerated:displaySetting:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  _OWORD v14[12];
  uint64_t v15;

  specialized MetricsReplyEngaged.init(replyString:metadata:repliesListGenerated:displaySetting:)(a1, a2, a3, a4, a5, a6, v14);
  v8 = v14[11];
  *(_OWORD *)(a7 + 160) = v14[10];
  *(_OWORD *)(a7 + 176) = v8;
  *(_QWORD *)(a7 + 192) = v15;
  v9 = v14[7];
  *(_OWORD *)(a7 + 96) = v14[6];
  *(_OWORD *)(a7 + 112) = v9;
  v10 = v14[9];
  *(_OWORD *)(a7 + 128) = v14[8];
  *(_OWORD *)(a7 + 144) = v10;
  v11 = v14[3];
  *(_OWORD *)(a7 + 32) = v14[2];
  *(_OWORD *)(a7 + 48) = v11;
  v12 = v14[5];
  *(_OWORD *)(a7 + 64) = v14[4];
  *(_OWORD *)(a7 + 80) = v12;
  result = (__n128)v14[1];
  *(_OWORD *)a7 = v14[0];
  *(__n128 *)(a7 + 16) = result;
  return result;
}

Swift::Void __swiftcall MetricsReplyEngaged.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_247657C60;
  *(_QWORD *)(inited + 32) = 0x727453796C706572;
  *(_QWORD *)(inited + 40) = 0xEB00000000676E69;
  *(_QWORD *)(inited + 48) = MEMORY[0x24957DF1C](*v0, v0[1]);
  *(_QWORD *)(inited + 56) = 0x6E6F697469736F70;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 88) = 0x800000024765C450;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000017;
  *(_QWORD *)(inited + 112) = 0x800000024765C470;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0xD000000000000016;
  *(_QWORD *)(inited + 136) = 0x800000024765C490;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 160) = 0x800000024765C4B0;
  *(NSNumber *)(inited + 168) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 176) = 0x4C74736575716572;
  *(_QWORD *)(inited + 184) = 0xEF65676175676E61;
  *(_QWORD *)(inited + 192) = MEMORY[0x24957DF1C](v0[7], v0[8]);
  strcpy((char *)(inited + 200), "responseType");
  *(_BYTE *)(inited + 213) = 0;
  *(_WORD *)(inited + 214) = -5120;
  *(_QWORD *)(inited + 216) = MEMORY[0x24957DF1C](v0[9], v0[10]);
  *(_QWORD *)(inited + 224) = 0x6D614E6C65646F6DLL;
  *(_QWORD *)(inited + 232) = 0xE900000000000065;
  *(_QWORD *)(inited + 240) = MEMORY[0x24957DF1C](v0[11], v0[12]);
  *(_QWORD *)(inited + 248) = 0xD000000000000011;
  *(_QWORD *)(inited + 256) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 264) = MEMORY[0x24957DF1C](v0[13], v0[14]);
  *(_QWORD *)(inited + 272) = 0xD000000000000011;
  *(_QWORD *)(inited + 280) = 0x800000024765C510;
  *(_QWORD *)(inited + 288) = MEMORY[0x24957DF1C](v0[15], v0[16]);
  *(_QWORD *)(inited + 296) = 0xD000000000000010;
  *(_QWORD *)(inited + 304) = 0x800000024765C530;
  *(_QWORD *)(inited + 312) = MEMORY[0x24957DF1C](v0[17], v0[18]);
  *(_QWORD *)(inited + 320) = 0xD000000000000017;
  *(_QWORD *)(inited + 328) = 0x800000024765C550;
  *(NSNumber *)(inited + 336) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 344) = 0xD000000000000013;
  *(_QWORD *)(inited + 352) = 0x800000024765C570;
  *(NSNumber *)(inited + 360) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 368) = 0xD000000000000013;
  *(_QWORD *)(inited + 376) = 0x800000024765C590;
  *(_QWORD *)(inited + 384) = MEMORY[0x24957DF1C](v0[21], v0[22]);
  strcpy((char *)(inited + 392), "displaySetting");
  *(_BYTE *)(inited + 407) = -18;
  *(_QWORD *)(inited + 408) = MEMORY[0x24957DF1C](v0[23], v0[24]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765CCC0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  v6[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  v6[5] = v4;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v6[3] = &block_descriptor_6;
  v5 = _Block_copy(v6);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

uint64_t specialized MetricsReplyEngaged.init(replyString:metadata:repliesListGenerated:displaySetting:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  _QWORD v48[21];
  _BYTE v49[168];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD v57[21];
  _BYTE v58[176];

  outlined init with take of MetricsRepliesListGenerated?(a4, (uint64_t)v49);
  outlined init with take of MetricsRepliesListGenerated?((uint64_t)v49, (uint64_t)v58);
  if (!a3)
  {
    v50 = 0u;
    v51 = 0u;
LABEL_10:
    outlined destroy of Any?((uint64_t)&v50);
    goto LABEL_11;
  }
  *(_QWORD *)&v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((_QWORD *)&v50 + 1) = v13;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a3 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v57), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v14, (uint64_t)&v50);
  }
  else
  {
    v50 = 0u;
    v51 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v57);
  if (!*((_QWORD *)&v51 + 1))
    goto LABEL_10;
  if (swift_dynamicCast())
  {
    v16 = v57[0];
    goto LABEL_12;
  }
LABEL_11:
  v16 = -1;
LABEL_12:
  outlined init with take of MetricsRepliesListGenerated?(a4, (uint64_t)v57);
  v47 = a4;
  v45 = v16;
  if (_s12SmartReplies07MetricsB13ListGeneratedVSgWOg((uint64_t)v57) == 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v17 = 0;
    v40 = 0xE000000000000000;
    v41 = 0;
  }
  else
  {
    v17 = v57[0];
    outlined init with take of MetricsRepliesListGenerated?((uint64_t)v58, (uint64_t)&v50);
    v43 = *((_QWORD *)&v50 + 1);
    v44 = v51;
    v41 = v52;
    v42 = *((_QWORD *)&v51 + 1);
    v40 = v53;
    if ((v16 & 0x8000000000000000) == 0 && v16 < *(_QWORD *)(v56 + 16))
      __asm { BR              X10 }
    swift_bridgeObjectRetain_n();
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x24762C3B0);
  }
  swift_bridgeObjectRelease();
  if (a2)
    v18 = a1;
  else
    v18 = 0;
  v30 = v18;
  if (a2)
    v19 = a2;
  else
    v19 = 0xE000000000000000;
  outlined init with take of MetricsRepliesListGenerated?(a4, (uint64_t)&v50);
  v39 = v17;
  v20 = a5;
  if (_s12SmartReplies07MetricsB13ListGeneratedVSgWOg((uint64_t)&v50) == 1)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v21 = 0;
    v31 = 0xE000000000000000;
    v32 = 0;
    v22 = 0xE000000000000000;
    v23 = 0xE000000000000000;
    v24 = 0xE000000000000000;
    v37 = 0;
    v38 = 0xE000000000000000;
  }
  else
  {
    v25 = v54;
    v26 = v55;
    outlined init with take of MetricsRepliesListGenerated?((uint64_t)v58, (uint64_t)v48);
    v24 = v48[10];
    v23 = v48[12];
    v36 = v48[11];
    v37 = v48[9];
    v22 = v48[14];
    v34 = v48[15];
    v35 = v48[13];
    v27 = v48[18];
    v32 = v48[16];
    v33 = v48[17];
    v38 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v27;
    swift_bridgeObjectRetain();
    v21 = v25;
  }
  if (a6)
  {
    v28 = a6;
  }
  else
  {
    v20 = 0;
    v28 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of MetricsRepliesListGenerated?(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a7 = v30;
  a7[1] = v19;
  a7[2] = v45;
  a7[3] = v39;
  a7[4] = v44;
  a7[5] = v43;
  a7[6] = v42;
  a7[7] = v41;
  a7[8] = v40;
  a7[9] = 0x6E776F6E6B6E75;
  a7[10] = 0xE700000000000000;
  a7[11] = v21;
  a7[12] = v38;
  a7[13] = v37;
  a7[14] = v24;
  a7[15] = v36;
  a7[16] = v23;
  a7[17] = v35;
  a7[18] = v22;
  a7[19] = v34;
  a7[20] = v32;
  a7[21] = v33;
  a7[22] = v31;
  a7[23] = v20;
  a7[24] = v28;
  return result;
}

uint64_t sub_24762C7DC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t destroy for MetricsReplyEngaged()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsReplyEngaged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsReplyEngaged(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  a1[21] = a2[21];
  a1[22] = a2[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  a1[24] = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for MetricsReplyEngaged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v11 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsReplyEngaged(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 200))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsReplyEngaged(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 200) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsReplyEngaged()
{
  return &type metadata for MetricsReplyEngaged;
}

uint64_t outlined init with take of MetricsRepliesListGenerated?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s12SmartReplies07MetricsB13ListGeneratedVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of MetricsRepliesListGenerated?(uint64_t a1)
{
  outlined consume of MetricsRepliesListGenerated?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(void **)(a1 + 160));
  return a1;
}

void outlined consume of MetricsRepliesListGenerated?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t EKEvent.looksLikeAFlight.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  id v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t result;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  Swift::Bool v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  Swift::String v62;
  Swift::String v63;

  v1 = v0;
  v2 = type metadata accessor for DateComponents();
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v60 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v54 - v11;
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v54 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v54 - v21;
  v23 = objc_msgSend(v1, sel_startDate);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_11;
  }
  v24 = v23;
  v54 = v17;
  v55 = v1;
  v61 = v22;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v25(v12, v20, v13);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v26(v12, 0, 1, v13);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v27(v12, 1, v13) == 1)
  {
LABEL_11:
    v41 = (uint64_t)v12;
LABEL_14:
    outlined destroy of Date?(v41);
    return 0;
  }
  v25(v61, v12, v13);
  v28 = objc_msgSend(v55, sel_endDate);
  if (!v28)
  {
    v26(v10, 1, 1, v13);
    goto LABEL_13;
  }
  v29 = v28;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v25(v10, v20, v13);
  v26(v10, 0, 1, v13);
  if (v27(v10, 1, v13) == 1)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v61, v13);
    v41 = (uint64_t)v10;
    goto LABEL_14;
  }
  v30 = v54;
  v25(v54, v10, v13);
  static Calendar.autoupdatingCurrent.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v31 = type metadata accessor for Calendar.Component();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_247656500;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v32 + 104))(v34 + v33, *MEMORY[0x24BDCF258], v31);
  specialized Set.init<A>(_:)(v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v36 = v60;
  v35 = v61;
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  result = DateComponents.minute.getter();
  v38 = 0;
  if ((v39 & 1) == 0 && (v38 = result, result < 0) && (v38 = -result, __OFSUB__(0, result)))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v59);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v57);
    if (v38 < 30)
    {
      v40 = *(void (**)(char *, uint64_t))(v14 + 8);
      v40(v30, v13);
      v40(v35, v13);
      return 0;
    }
    result = (uint64_t)objc_msgSend(v55, sel_title);
    if (result)
    {
      v43 = (void *)result;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v45;

      v62._countAndFlagsBits = v44;
      v62._object = v46;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.localizedLowercase.getter();
      swift_bridgeObjectRelease();
      if (one-time initialization token for current != -1)
        swift_once();
      v63._object = (void *)0xE000000000000000;
      v47._object = (void *)0x800000024765CCE0;
      v47._countAndFlagsBits = 0xD00000000000001CLL;
      v48._countAndFlagsBits = 0;
      v48._object = (void *)0xE000000000000000;
      v63._countAndFlagsBits = 0;
      v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v47, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v48, v63);
      v49 = StringProtocol.localizedLowercase.getter();
      v51 = v50;
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = v49;
      v52._object = v51;
      v42 = String.hasPrefix(_:)(v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = *(void (**)(char *, uint64_t))(v14 + 8);
      v53(v54, v13);
      v53(v61, v13);
      return v42;
    }
  }
  __break(1u);
  return result;
}

uint64_t BiomeLoggingManager.init()()
{
  return 0;
}

id @nonobjc BMMapsRecentConversationsIntent.init(contactInformation:actionType:predictionTimestamp:predictionExpiration:bundleID:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v17;
  void *v18;
  id v19;

  v7 = v6;
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  isa = 0;
  if (v15(a3, 1, v13) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a3, v13);
  }
  if (v15(a4, 1, v13) != 1)
  {
    v17 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a4, v13);
    if (a6)
      goto LABEL_5;
LABEL_7:
    v18 = 0;
    goto LABEL_8;
  }
  v17 = 0;
  if (!a6)
    goto LABEL_7;
LABEL_5:
  v18 = (void *)MEMORY[0x24957DF1C](a5, a6);
  swift_bridgeObjectRelease();
LABEL_8:
  v19 = objc_msgSend(v7, sel_initWithContactInformation_actionType_predictionTimestamp_predictionExpiration_bundleID_, a1, a2, isa, v17, v18);

  return v19;
}

uint64_t specialized BiomeLoggingManager.contactActivityActionType(for:)(unsigned int *a1)
{
  if ((unint64_t)(*(_QWORD *)a1 - 1) < 0x12)
    return *a1;
  else
    return 0;
}

void specialized BiomeLoggingManager.logActionInferenceToContactActivityStream(for:actionInfo:predictionDate:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSArray v38;
  NSArray v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  Swift::String v58;
  _QWORD v59[2];
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v59 - v12;
  v14 = *a3;
  if (!*a3)
    return;
  v60 = *(_OWORD *)a3;
  v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v16 = objc_msgSend(v15, sel_bundleIdentifier);

  if (v16)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v65 = v60;
  v20 = specialized BiomeLoggingManager.contactActivityActionType(for:)((unsigned int *)&v65);
  v21 = (void *)String.toBestCNContact()();
  v59[1] = v14;
  v62 = v17;
  v63 = a4;
  v61 = v19;
  LODWORD(v60) = v20;
  if (!v21)
  {
    if ((String.looksLikeAnEmailAddress.getter() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_247656500;
      *(_QWORD *)(v36 + 32) = a1;
      *(_QWORD *)(v36 + 40) = a2;
      swift_bridgeObjectRetain();
    }
    if ((String.containsAPhoneNumber.getter() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_247656500;
      *(_QWORD *)(v41 + 32) = a1;
      *(_QWORD *)(v41 + 40) = a2;
      swift_bridgeObjectRetain();
    }
    v42 = objc_allocWithZone(MEMORY[0x24BE0C538]);
    v38.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v39.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v40 = objc_msgSend(v42, sel_initWithIdentifier_fullDisplayName_friendlyName_emailAddress_phoneNumber_, 0, 0, 0, v38.super.isa, v39.super.isa);
    goto LABEL_17;
  }
  v22 = v21;
  v59[0] = v11;
  v23 = objc_msgSend(v21, sel_identifier);
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v25;

  v27 = CNContact.completeName.getter();
  v29 = v28;
  v30 = CNContact.friendlyName.getter();
  v32 = v31;
  CNContact.emailAddressStrings.getter();
  CNContact.phoneNumberStrings.getter();
  v33 = (void *)MEMORY[0x24957DF1C](v24, v26);
  swift_bridgeObjectRelease();
  if (!v29)
  {
    v34 = 0;
    if (v32)
      goto LABEL_8;
LABEL_12:
    v35 = 0;
    goto LABEL_13;
  }
  v34 = (void *)MEMORY[0x24957DF1C](v27, v29);
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_12;
LABEL_8:
  v35 = (void *)MEMORY[0x24957DF1C](v30, v32);
  swift_bridgeObjectRelease();
LABEL_13:
  v37 = objc_allocWithZone(MEMORY[0x24BE0C538]);
  v38.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(v37, sel_initWithIdentifier_fullDisplayName_friendlyName_emailAddress_phoneNumber_, v33, v34, v35, v38.super.isa, v39.super.isa);

  v11 = (char *)v59[0];
LABEL_17:

  v43 = objc_msgSend((id)BiomeLibrary(), sel_Maps);
  swift_unknownObjectRelease();
  v44 = objc_msgSend(v43, sel_Suggestions);
  swift_unknownObjectRelease();
  v45 = objc_msgSend(v44, sel_RecentConversationsIntent);
  swift_unknownObjectRelease();
  v46 = objc_msgSend(v45, sel_source);

  v47 = type metadata accessor for Date();
  v48 = *(_QWORD *)(v47 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v13, v63, v47);
  v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56);
  v49(v13, 0, 1, v47);
  v50 = v40;
  static Date.distantFuture.getter();
  v49(v11, 0, 1, v47);
  v51 = objc_allocWithZone(MEMORY[0x24BE0C530]);
  v52 = @nonobjc BMMapsRecentConversationsIntent.init(contactInformation:actionType:predictionTimestamp:predictionExpiration:bundleID:)(v40, v60, (uint64_t)v13, (uint64_t)v11, v62, v61);
  if (one-time initialization token for standard != -1)
    swift_once();
  v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.standard);
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    v57 = swift_slowAlloc();
    *(_QWORD *)&v65 = v57;
    *(_DWORD *)v56 = 136315138;
    v58 = SRSmartRepliesActionType.stringValue()();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58._countAndFlagsBits, (unint64_t)v58._object, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2475DF000, v54, v55, "Writing contact activity event to Biome with type: %s", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v57, -1, -1);
    MEMORY[0x24957ECC0](v56, -1, -1);
  }

  objc_msgSend(v46, sel_sendEvent_, v52);
}

void **initializeBufferWithCopyOfBuffer for BiomeLoggingManager(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for BiomeLoggingManager(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for BiomeLoggingManager(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for BiomeLoggingManager(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BiomeLoggingManager(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BiomeLoggingManager()
{
  return &type metadata for BiomeLoggingManager;
}

uint64_t Logger.standard.unsafeMutableAddressor()
{
  return Logger.standard.unsafeMutableAddressor(&one-time initialization token for standard, (uint64_t)static Logger.standard);
}

uint64_t one-time initialization function for standard(uint64_t a1)
{
  return one-time initialization function for standard(a1, static Logger.standard);
}

uint64_t static Logger.standard.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.standard.getter(&one-time initialization token for standard, (uint64_t)static Logger.standard, a1);
}

uint64_t one-time initialization function for signpost(uint64_t a1)
{
  return one-time initialization function for standard(a1, static Logger.signpost);
}

uint64_t one-time initialization function for standard(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.signpost.unsafeMutableAddressor()
{
  return Logger.standard.unsafeMutableAddressor(one-time initialization token for signpost, (uint64_t)static Logger.signpost);
}

uint64_t Logger.standard.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.signpost.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.standard.getter(one-time initialization token for signpost, (uint64_t)static Logger.signpost, a1);
}

uint64_t static Logger.standard.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t EmailAddressActionMetadataProvider.init(contactDataSource:)(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return a1;
}

uint64_t EmailAddressActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t EmailAddressActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(v0 + 32);
  if (!v4)
  {
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v4 = v5;
    else
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    v6 = (void *)v4[4];
    v7 = v6;
    swift_bridgeObjectRelease();
    if (v6)
    {
      v8 = *(id *)(v0 + 56);
LABEL_14:
      v8 = EmailAddressActionMetadataProvider.emailAddressMetadata(for:)(v7, *(_QWORD *)(v0 + 48), (uint64_t)v8);

      return (*(uint64_t (**)(id))(v0 + 8))(v8);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v8 = *(id *)(v0 + 56);
  if (v8)
  {
    v7 = v8;
    goto LABEL_14;
  }
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

id EmailAddressActionMetadataProvider.emailAddressMetadata(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSBundle v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSBundle v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;

  v6 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&object - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&object - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)a2 + 208))(a1);
  if (v12[2])
  {
    v14 = v12[4];
    v13 = v12[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (objc_msgSend(a1, sel_isEqual_, a3))
    {
      if (one-time initialization token for current != -1)
        swift_once();
      v15.super.isa = (Class)static NSBundle.current;
      v16._countAndFlagsBits = 0xD000000000000024;
      v47._object = (void *)0xE000000000000000;
      v16._object = (void *)0x800000024765CD20;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      v47._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v17, v47);
      swift_bridgeObjectRetain();
      v48._object = (void *)0xE000000000000000;
      v18._object = (void *)0x800000024765BCC0;
      v18._countAndFlagsBits = 0xD000000000000014;
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v48._countAndFlagsBits = 0;
      v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, v15, v19, v48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_247656500;
      *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v21 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v21 + 32) = v14;
      *(_QWORD *)(v21 + 40) = v13;
      v22 = static String.localizedStringWithFormat(_:_:)();
      v24 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v11, 1, 1, v25);
      Date.init()();
      v26 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
      return SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(12, v14, v13, v20._countAndFlagsBits, (uint64_t)v20._object, v22, v24, (uint64_t)v8, -1.0, -1.0, 0, (uint64_t)v11, 0, 0, 0);
    }
    else
    {
      if (one-time initialization token for current != -1)
        swift_once();
      v28.super.isa = (Class)static NSBundle.current;
      v29._countAndFlagsBits = 0xD00000000000001CLL;
      v49._object = (void *)0xE000000000000000;
      v29._object = (void *)0x800000024765CD00;
      v30._countAndFlagsBits = 0;
      v30._object = (void *)0xE000000000000000;
      v49._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v30, v49);
      swift_bridgeObjectRetain();
      v50._object = (void *)0xE000000000000000;
      v31._object = (void *)0x800000024765BCC0;
      v31._countAndFlagsBits = 0xD000000000000014;
      v32._countAndFlagsBits = 0;
      v32._object = (void *)0xE000000000000000;
      v50._countAndFlagsBits = 0;
      v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, v28, v32, v50);
      object = v33._object;
      countAndFlagsBits = v33._countAndFlagsBits;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_247656880;
      v35 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 200))(a1);
      v37 = v36;
      v38 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE0D00];
      v39 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v34 + 32) = v35;
      *(_QWORD *)(v34 + 40) = v37;
      *(_QWORD *)(v34 + 96) = v38;
      *(_QWORD *)(v34 + 104) = v39;
      *(_QWORD *)(v34 + 64) = v39;
      *(_QWORD *)(v34 + 72) = v14;
      *(_QWORD *)(v34 + 80) = v13;
      v40 = static String.localizedStringWithFormat(_:_:)();
      v42 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v11, 1, 1, v43);
      Date.init()();
      v44 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
      return SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(12, v14, v13, countAndFlagsBits, (uint64_t)object, v40, v42, (uint64_t)v8, -1.0, -1.0, 0, (uint64_t)v11, 0, 0, 2);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance EmailAddressActionMetadataProvider(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  v6[6] = v5;
  v6[7] = v4;
  v6[5] = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for EmailAddressActionMetadataProvider()
{
  return &type metadata for EmailAddressActionMetadataProvider;
}

uint64_t FlightArrivalActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v6(a2);
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance FlightArrivalActionMetadataProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = *v0;
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized FlightArrivalActionMetadataProvider.metadataItem(for:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v5(v2);
}

uint64_t specialized FlightArrivalActionMetadataProvider.metadataItem(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v1[3] = swift_task_alloc();
  v2 = type metadata accessor for Calendar.Component();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  v3 = type metadata accessor for DateComponents();
  v1[8] = v3;
  v1[9] = *(_QWORD *)(v3 - 8);
  v1[10] = swift_task_alloc();
  v4 = type metadata accessor for Calendar();
  v1[11] = v4;
  v1[12] = *(_QWORD *)(v4 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v5 = type metadata accessor for Date();
  v1[15] = v5;
  v1[16] = *(_QWORD *)(v5 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized FlightArrivalActionMetadataProvider.metadataItem(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, _QWORD);

  v1 = v0[2];
  v2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 232))(1, 0);
  swift_retain();
  v0[28] = specialized _ArrayProtocol.filter(_:)(v2);
  v0[29] = 0;
  swift_release();
  swift_bridgeObjectRelease();
  v5 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(*(_QWORD *)v1 + 224) + *(_QWORD *)(*(_QWORD *)v1 + 224));
  v3 = (_QWORD *)swift_task_alloc();
  v0[30] = v3;
  *v3 = v0;
  v3[1] = specialized FlightArrivalActionMetadataProvider.metadataItem(for:);
  return v5(1, 0);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, uint64_t, _QWORD);
  unint64_t v11;
  uint64_t v12;
  id *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  void (*v57)(void *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v66)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  id v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  NSBundle v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  Swift::String v96;
  uint64_t v97;
  uint64_t v98;
  id *v99;
  Swift::String v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  NSBundle *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  id v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  void (*v126)(_QWORD, uint64_t, uint64_t, _QWORD);
  __int128 v127;
  id *v128;
  id v129;
  id *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, unint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t i;
  void (*v138)(uint64_t, uint64_t);
  unint64_t v139;
  uint64_t v140;
  id v141;
  unint64_t v142;
  Swift::String v143;
  Swift::String v144;

  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 224);
  swift_retain();
  v6 = specialized _ArrayProtocol.filter(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  v142 = v5;
  v7 = (uint64_t)&v142;
  specialized Array.append<A>(contentsOf:)(v6);
  v8 = v142;
  if (v142 >> 62)
    goto LABEL_65;
  v9 = *(_QWORD *)((v142 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
  {
LABEL_69:
    swift_bridgeObjectRelease_n();
LABEL_70:
    v141 = 0;
LABEL_71:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v141);
  }
LABEL_3:
  v139 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
    v129 = (id)MEMORY[0x24957E42C](0, v8);
    swift_bridgeObjectRelease();
    v131 = v8 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    v131 = v8 & 0xFFFFFFFFFFFFFF8;
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v129 = *(id *)(v8 + 32);
    swift_bridgeObjectRelease();
  }
  v125 = *(_QWORD *)(v0 + 96);
  v123 = *(_QWORD *)(v0 + 72);
  v134 = *(_QWORD *)(v0 + 40);
  v138 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v10 = (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*((_QWORD *)v138 + 7);
  v10(*(_QWORD *)(v0 + 216), 1, 1, *(_QWORD *)(v0 + 120));
  v11 = 0;
  v135 = v8;
  v130 = (id *)(v8 + 32);
  v124 = *MEMORY[0x24BDCF230];
  v127 = xmmword_247656500;
  v126 = v10;
  for (i = v9; i != v11; v9 = i)
  {
    while (1)
    {
      if (v139)
      {
        v13 = (id *)MEMORY[0x24957E42C](v11, v135);
      }
      else
      {
        if (v11 >= *(_QWORD *)(v131 + 16))
          goto LABEL_64;
        v13 = (id *)v130[v11];
      }
      v8 = (uint64_t)v13;
      if (__OFADD__(v11++, 1))
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        if (v8 < 0)
          v7 = v8;
        else
          v7 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9)
          goto LABEL_69;
        goto LABEL_3;
      }
      v15 = objc_msgSend(v13, sel_endDate);
      v16 = *(_QWORD *)(v0 + 208);
      if (v15)
        break;
      v10(*(_QWORD *)(v0 + 208), 1, 1, *(_QWORD *)(v0 + 120));
LABEL_8:
      v12 = *(_QWORD *)(v0 + 208);

LABEL_9:
      outlined destroy of Date?(v12);
      if (v11 == v9)
        goto LABEL_40;
    }
    v1 = v15;
    v2 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
    v17 = *(_QWORD *)(v0 + 120);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = (uint64_t *)*((_QWORD *)v138 + 4);
    ((void (*)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))v3)(v16, v2, v17);
    v10(v16, 0, 1, v17);
    v18 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v138 + 6);
    v19 = v17;
    v9 = i;
    if (v18(v16, 1, v19) == 1)
      goto LABEL_8;
    ((void (*)(_QWORD, _QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 120));
    v20 = objc_msgSend((id)v8, sel_startDate);
    v21 = *(_QWORD *)(v0 + 200);
    if (!v20)
    {
      v10(*(_QWORD *)(v0 + 200), 1, 1, *(_QWORD *)(v0 + 120));
LABEL_22:
      v12 = *(_QWORD *)(v0 + 200);
      v1 = *(void **)(v0 + 168);
      v2 = *(void (**)(uint64_t, uint64_t))(v0 + 120);

      (*((void (**)(void *, _QWORD))v138 + 1))(v1, v2);
      goto LABEL_9;
    }
    v22 = v20;
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 120);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    ((void (*)(uint64_t, uint64_t, uint64_t))v3)(v21, v23, v24);
    v10(v21, 0, 1, v24);
    v25 = v24;
    v9 = i;
    if (v18(v21, 1, v25) == 1)
      goto LABEL_22;
    v26 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 120);
    ((void (*)(_QWORD, _QWORD, uint64_t))v3)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 200), v28);
    outlined init with copy of Date?(v26, v27);
    if (v18(v27, 1, v28) == 1)
    {
      v29 = *(_QWORD *)(v0 + 216);
      v30 = *(_QWORD *)(v0 + 192);
      v1 = *(void **)(v0 + 168);
      v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
      v31 = *(void **)(v0 + 120);

      (*((void (**)(_QWORD, void *))v138 + 1))(v2, v31);
      outlined destroy of Date?(v29);
      outlined destroy of Date?(v30);
      ((void (*)(uint64_t, void *, void *))v3)(v29, v1, v31);
      v32 = v29;
      v33 = v31;
    }
    else
    {
      v128 = (id *)v8;
      v34 = *(_QWORD *)(v0 + 56);
      v35 = *(_QWORD *)(v0 + 32);
      v122 = v3;
      ((void (*)(_QWORD, _QWORD, _QWORD))v3)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 120));
      static Calendar.autoupdatingCurrent.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
      v36 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
      v132 = *(_QWORD *)(v134 + 72);
      v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_247656500;
      v38 = v37 + v36;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v134 + 104))(v38, v124, v35);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component((unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
      v39 = Set.init(minimumCapacity:)();
      v133 = *(void (**)(uint64_t, unint64_t, uint64_t))(v134 + 16);
      v133(v34, v38, v35);
      swift_bridgeObjectRetain();
      v40 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v41 = -1 << *(_BYTE *)(v39 + 32);
      v42 = v40 & ~v41;
      v43 = v39 + 56;
      if (((*(_QWORD *)(v39 + 56 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
      {
        v44 = ~v41;
        while (1)
        {
          v45 = *(_QWORD *)(v0 + 48);
          v46 = *(_QWORD *)(v0 + 32);
          v47 = v39;
          v133(v45, *(_QWORD *)(v39 + 48) + v42 * v132, v46);
          lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
          v48 = dispatch thunk of static Equatable.== infix(_:_:)();
          v2 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
          v2(v45, v46);
          if ((v48 & 1) != 0)
            break;
          v42 = (v42 + 1) & v44;
          v39 = v47;
          if (((*(_QWORD *)(v43 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
            goto LABEL_27;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_27:
        v50 = *(_QWORD *)(v0 + 48);
        v49 = *(_QWORD *)(v0 + 56);
        v51 = *(_QWORD *)(v0 + 32);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v133(v50, v49, v51);
        v142 = v39;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v50, v42, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        v2 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
      }
      v1 = *(void **)(v0 + 152);
      v3 = *(uint64_t **)(v0 + 32);
      v2(*(_QWORD *)(v0 + 56), (uint64_t)v3);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      Calendar.dateComponents(_:from:to:)();
      swift_bridgeObjectRelease();
      v53 = DateComponents.hour.getter();
      v8 = (uint64_t)v128;
      if ((v54 & 1) != 0)
      {
        v7 = 0;
      }
      else
      {
        v7 = v53;
        if (v53 < 0)
        {
          v7 = -v53;
          if (__OFSUB__(0, v53))
            goto LABEL_74;
        }
      }
      v1 = *(void **)(v0 + 144);
      v55 = *(void **)(v0 + 152);
      v56 = *(_QWORD *)(v0 + 112);
      v2 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
      v3 = *(uint64_t **)(v0 + 88);
      (*(void (**)(_QWORD, _QWORD))(v123 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
      (*(void (**)(uint64_t, uint64_t *))(v125 + 8))(v56, v3);
      v57 = (void (*)(void *, _QWORD))*((_QWORD *)v138 + 1);
      v57(v1, v2);
      v57(v55, v2);
      if (v7 > 4)
      {
        v57(*(void **)(v0 + 168), *(_QWORD *)(v0 + 120));

        v10 = v126;
        continue;
      }
      v58 = *(_QWORD *)(v0 + 216);
      v59 = *(_QWORD *)(v0 + 168);
      v1 = *(void **)(v0 + 120);
      outlined destroy of Date?(v58);

      ((void (*)(uint64_t, uint64_t, void *))v122)(v58, v59, v1);
      v32 = v58;
      v33 = v1;
      v10 = v126;
    }
    v10(v32, 0, 1, v33);
    v129 = (id)v8;
  }
LABEL_40:
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v129, sel_endDate);
  v61 = *(_QWORD *)(v0 + 184);
  if (!v60)
  {
    v10(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 120));
    goto LABEL_52;
  }
  v62 = v60;
  v63 = *(_QWORD *)(v0 + 160);
  v64 = *(_QWORD *)(v0 + 120);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v65 = v10;
  v66 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v138 + 4);
  v66(v61, v63, v64);
  v65(v61, 0, 1, v64);
  v67 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v138 + 6);
  if (v67(v61, 1, v64) == 1)
  {
LABEL_52:
    v91 = *(_QWORD *)(v0 + 216);
    v92 = *(_QWORD *)(v0 + 184);

    outlined destroy of Date?(v91);
    goto LABEL_53;
  }
  v68 = *(_QWORD *)(v0 + 160);
  v69 = *(_QWORD *)(v0 + 120);
  v70 = *(_QWORD *)(v0 + 104);
  v71 = *(_QWORD *)(v0 + 88);
  v66(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), v69);
  static Calendar.current.getter();
  Date.init()();
  v72 = Calendar.isDate(_:inSameDayAs:)();
  v73 = v69;
  v74 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v138 + 1);
  v74(v68, v73);
  (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v70, v71);
  v75 = objc_msgSend(v129, sel_endDate);
  v76 = *(_QWORD *)(v0 + 176);
  if (v75)
  {
    v77 = v75;
    v78 = *(_QWORD *)(v0 + 160);
    v79 = *(_QWORD *)(v0 + 120);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v66(v76, v78, v79);
    v126(v76, 0, 1, v79);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v67)(v76, 1, v79);
    if ((_DWORD)result != 1)
    {
      v81 = *(_QWORD *)(v0 + 176);
      v82 = *(_QWORD *)(v0 + 120);
      v83 = Date.localizedTimeOfDay.getter();
      v85 = v84;
      v74(v81, v82);
      v86 = HIBYTE(v85) & 0xF;
      if ((v85 & 0x2000000000000000) == 0)
        v86 = v83 & 0xFFFFFFFFFFFFLL;
      if (v86)
      {
        v138 = v74;
        v2 = (void (*)(uint64_t, uint64_t))0xD000000000000014;
        v87 = v72;
        v3 = &static NSBundle.current;
        v1 = (void *)MEMORY[0x24BEE0D00];
        if ((v87 & 1) != 0)
        {
          if (one-time initialization token for current != -1)
            swift_once();
          v88.super.isa = (Class)static NSBundle.current;
          v89 = 0xD00000000000001ELL;
          v121 = 0xE000000000000000;
          v90 = "FLIGHT_TIME_STRING_CURRENT_DAY";
        }
        else
        {
          if (one-time initialization token for current != -1)
            swift_once();
          v88.super.isa = (Class)static NSBundle.current;
          v89 = 0xD00000000000001BLL;
          v121 = 0xE000000000000000;
          v90 = "FLIGHT_TIME_STRING_NEXT_DAY";
        }
        v95 = (unint64_t)(v90 - 32) | 0x8000000000000000;
        v96._countAndFlagsBits = 0;
        v96._object = (void *)0xE000000000000000;
        v97 = 0;
        NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v89, (Swift::String_optional)0, v88, v96, *(Swift::String *)(&v121 - 1));
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v98 = swift_allocObject();
        *(_OWORD *)(v98 + 16) = xmmword_247656500;
        *(_QWORD *)(v98 + 56) = v1;
        *(_QWORD *)(v98 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v98 + 32) = v83;
        *(_QWORD *)(v98 + 40) = v85;
        v7 = static String.localizedStringWithFormat(_:_:)();
        v8 = (uint64_t)v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (one-time initialization token for current == -1)
        {
LABEL_59:
          v100._countAndFlagsBits = (uint64_t)v2 + 17;
          v143._object = (void *)0xE000000000000000;
          v100._object = (void *)0x800000024765CD70;
          v101._countAndFlagsBits = 0;
          v101._object = (void *)0xE000000000000000;
          v143._countAndFlagsBits = 0;
          NSLocalizedString(_:tableName:bundle:value:comment:)(v100, (Swift::String_optional)0, *(NSBundle *)v3, v101, v143);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v102 = swift_allocObject();
          *(_OWORD *)(v102 + 16) = v127;
          *(_QWORD *)(v102 + 56) = v1;
          *(_QWORD *)(v102 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v102 + 32) = v7;
          *(_QWORD *)(v102 + 40) = v8;
          v103 = static String.localizedStringWithFormat(_:_:)();
          v105 = v104;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v106 = objc_msgSend(v129, sel_title);
          v140 = v103;
          if (v106)
          {
            v107 = v106;
            v108 = (NSBundle *)v3;
            v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v110 = v109;

          }
          else
          {
            v108 = (NSBundle *)v3;
            v136 = 0;
            v110 = 0;
          }
          v111 = *(_QWORD *)(v0 + 216);
          v112 = *(_QWORD *)(v0 + 160);
          v113 = *(_QWORD *)(v0 + 136);
          v114 = *(_QWORD *)(v0 + 120);
          v115 = *(_QWORD *)(v0 + 24);
          v144._object = (void *)0xE000000000000000;
          v116._object = (void *)0x800000024765CAD0;
          v116._countAndFlagsBits = 0xD000000000000014;
          v117._countAndFlagsBits = 0;
          v117._object = (void *)0xE000000000000000;
          v144._countAndFlagsBits = 0;
          v118 = NSLocalizedString(_:tableName:bundle:value:comment:)(v116, (Swift::String_optional)0, (NSBundle)v108->super.isa, v117, v144);
          v119 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v115, 1, 1, v119);
          Date.init()();
          v120 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
          v141 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(2, v136, v110, v118._countAndFlagsBits, (uint64_t)v118._object, v140, v105, v112, -1.0, -1.0, 0, v115, 0, 0, 1);

          v138(v113, v114);
          outlined destroy of Date?(v111);
          goto LABEL_71;
        }
LABEL_75:
        swift_once();
        goto LABEL_59;
      }
      v92 = *(_QWORD *)(v0 + 216);
      v93 = *(_QWORD *)(v0 + 136);
      v94 = *(_QWORD *)(v0 + 120);
      swift_bridgeObjectRelease();

      v74(v93, v94);
LABEL_53:
      outlined destroy of Date?(v92);
      goto LABEL_70;
    }
  }
  else
  {
    result = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))v126)(*(_QWORD *)(v0 + 176), 1, 1, *(_QWORD *)(v0 + 120));
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for FlightArrivalActionMetadataProvider()
{
  return &type metadata for FlightArrivalActionMetadataProvider;
}

uint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component();
    result = MEMORY[0x24957EC18](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *TRIClient.understandingPlatform.unsafeMutableAddressor()
{
  if (one-time initialization token for understandingPlatform != -1)
    swift_once();
  return &static TRIClient.understandingPlatform;
}

uint64_t *TRIClient.smartReplies.unsafeMutableAddressor()
{
  if (one-time initialization token for smartReplies != -1)
    swift_once();
  return &static TRIClient.smartReplies;
}

id one-time initialization function for smartReplies(uint64_t a1)
{
  return one-time initialization function for smartReplies(a1, 101, &static TRIClient.smartReplies);
}

id static TRIClient.smartReplies.getter()
{
  return static TRIClient.smartReplies.getter(&one-time initialization token for smartReplies, (id *)&static TRIClient.smartReplies);
}

id one-time initialization function for understandingPlatform(uint64_t a1)
{
  return one-time initialization function for smartReplies(a1, 313, &static TRIClient.understandingPlatform);
}

id one-time initialization function for smartReplies(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, a2);
  *a3 = result;
  return result;
}

id static TRIClient.understandingPlatform.getter()
{
  return static TRIClient.smartReplies.getter(&one-time initialization token for understandingPlatform, (id *)&static TRIClient.understandingPlatform);
}

id static TRIClient.smartReplies.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t PostalCodeActionMetadataProvider.init(contactDataSource:)(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return a1;
}

uint64_t PostalCodeActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t PostalCodeActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  NSBundle *v7;
  NSBundle *v8;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(v0 + 32);
  if (!v4)
  {
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v4 = v5;
    else
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    v6 = (void *)v4[4];
    v7 = v6;
    swift_bridgeObjectRelease();
    if (v6)
    {
      v8 = *(NSBundle **)(v0 + 56);
LABEL_14:
      v8 = (NSBundle *)PostalCodeActionMetadataProvider.postalCodeMetadata(for:)(v7, *(_QWORD *)(v0 + 48), v8);

      return (*(uint64_t (**)(NSBundle *))(v0 + 8))(v8);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v8 = *(NSBundle **)(v0 + 56);
  if (v8)
  {
    v7 = v8;
    goto LABEL_14;
  }
  return (*(uint64_t (**)(NSBundle *))(v0 + 8))(v8);
}

id PostalCodeActionMetadataProvider.postalCodeMetadata(for:)(void *a1, uint64_t a2, NSBundle *a3)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  unsigned int v19;
  NSBundle *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;

  v9 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 160))(a1);
  if (!(v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_16;
LABEL_3:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x24957E42C](0, v15);
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_20:
      swift_once();
      goto LABEL_8;
    }
    v16 = *(id *)(v15 + 32);
  }
  v3 = v16;
  v5 = 0xD000000000000014;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v3, sel_postalCode);
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v18;

  v19 = objc_msgSend(a1, sel_isEqual_, a3);
  a3 = (NSBundle *)&static NSBundle.current;
  if (!v19)
  {
    v44 = v3;
    if (one-time initialization token for current != -1)
      swift_once();
    v20 = (NSBundle *)&static NSBundle.current;
    v27._countAndFlagsBits = 0xD000000000000022;
    v47._object = (void *)0xE000000000000000;
    v27._object = (void *)0x800000024765CDC0;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v47._countAndFlagsBits = 0;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v28, v47);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_247656880;
    v30 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 200))(a1);
    v32 = v31;
    v33 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
    v34 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v32;
    *(_QWORD *)(v29 + 96) = v33;
    *(_QWORD *)(v29 + 104) = v34;
    v35 = v45;
    *(_QWORD *)(v29 + 64) = v34;
    *(_QWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 80) = v4;
    swift_bridgeObjectRetain();
    v24 = static String.localizedStringWithFormat(_:_:)();
    v26 = v36;
    v3 = v44;
    goto LABEL_12;
  }
  if (one-time initialization token for current != -1)
    goto LABEL_20;
LABEL_8:
  v20 = a3;
  v21._countAndFlagsBits = v5 + 22;
  v46._object = (void *)0xE000000000000000;
  v21._object = (void *)0x800000024765CDF0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v46._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)a3->super.isa, v22, v46);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_247656500;
  *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v23 + 32) = v45;
  *(_QWORD *)(v23 + 40) = v4;
  swift_bridgeObjectRetain();
  v24 = static String.localizedStringWithFormat(_:_:)();
  v26 = v25;
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for current != -1)
    swift_once();
  v48._object = (void *)0xE000000000000000;
  v37._object = (void *)0x800000024765BCC0;
  v37._countAndFlagsBits = 0xD000000000000014;
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  v48._countAndFlagsBits = 0;
  v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v20->super.isa, v38, v48);
  v40 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v14, 1, 1, v40);
  Date.init()();
  v41 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
  v42 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(14, v45, v4, v39._countAndFlagsBits, (uint64_t)v39._object, v24, v26, (uint64_t)v11, -1.0, -1.0, 0, (uint64_t)v14, 0, 0, 2);

  return v42;
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance PostalCodeActionMetadataProvider(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  v6[6] = v5;
  v6[7] = v4;
  v6[5] = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for PostalCodeActionMetadataProvider()
{
  return &type metadata for PostalCodeActionMetadataProvider;
}

void static ActionRegexEvaluator.actionTypeAndPOV(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  int64x2_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for standard != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v7, v8, "Found matching action from regex %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v10, -1, -1);
    MEMORY[0x24957ECC0](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (a1 == 0x474E495445454DLL && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = vdupq_n_s64(1uLL);
LABEL_10:
    *a3 = v11;
    return;
  }
  if (a1 == 0x544847494C46 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F50;
    goto LABEL_10;
  }
  if (a1 == 0x4E4F495441434F4CLL && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247656420;
    goto LABEL_10;
  }
  if (a1 == 4281413 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F40;
    goto LABEL_10;
  }
  if (a1 == 0x4444415F454D4F48 && a2 == 0xEC00000053534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F30;
    goto LABEL_10;
  }
  if (a1 == 0x4444415F454D4F48 && a2 == 0xEF50335F53534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F20;
    goto LABEL_10;
  }
  if (a1 == 0x4444415F4B524F57 && a2 == 0xEC00000053534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F10;
    goto LABEL_10;
  }
  if (a1 == 0x4444415F4B524F57 && a2 == 0xEF50335F53534552
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657F00;
    goto LABEL_10;
  }
  if (a1 == 0x53534552444441 && a2 == 0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657EF0;
    goto LABEL_10;
  }
  if (a1 == 0x5F53534552444441 && a2 == 0xEA00000000005033
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657EE0;
    goto LABEL_10;
  }
  if (a1 == 0x4F48505F454D4F48 && a2 == 0xEA0000000000454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657ED0;
    goto LABEL_10;
  }
  if (a1 == 0x4F48505F454D4F48 && a2 == 0xED000050335F454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657EC0;
    goto LABEL_10;
  }
  if (a1 == 0x505F454C49424F4DLL && a2 == 0xEC000000454E4F48
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657EB0;
    goto LABEL_10;
  }
  if (a1 == 0x505F454C49424F4DLL && a2 == 0xEF50335F454E4F48
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657EA0;
    goto LABEL_10;
  }
  if (a1 == 0x4F48505F4B524F57 && a2 == 0xEA0000000000454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E90;
    goto LABEL_10;
  }
  if (a1 == 0x4F48505F4B524F57 && a2 == 0xED000050335F454ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E80;
    goto LABEL_10;
  }
  if (a1 == 0x554E5F454E4F4850 && a2 == 0xEC0000005245424DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E70;
    goto LABEL_10;
  }
  if (a1 == 0x554E5F454E4F4850 && a2 == 0xEF50335F5245424DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E60;
    goto LABEL_10;
  }
  if (a1 == 0x44415F4C49414D45 && a2 == 0xED00005353455244
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E50;
    goto LABEL_10;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x800000024765CE20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E40;
    goto LABEL_10;
  }
  if (a1 == 0x41505F454C505041 && a2 == 0xE900000000000059
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E30;
    goto LABEL_10;
  }
  if (a1 == 0x435F4C4154534F50 && a2 == 0xEB0000000045444FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E20;
    goto LABEL_10;
  }
  if (a1 == 0x435F4C4154534F50 && a2 == 0xEE0050335F45444FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E10;
    goto LABEL_10;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000024765CE40
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657E00;
    goto LABEL_10;
  }
  if (a1 == 0x414E5F4E45564947 && a2 == 0xEA0000000000454DLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657DF0;
    goto LABEL_10;
  }
  if (a1 == 0x4E5F594C494D4146 && a2 == 0xEB00000000454D41
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657DE0;
    goto LABEL_10;
  }
  if (a1 == 0x455441474956414ELL && a2 == 0xEB000000004F545FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v11 = (int64x2_t)xmmword_247657DD0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2475DF000, v12, v13, "Unable to match regex evaluator string %s to a type, defaulting to none", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v15, -1, -1);
    MEMORY[0x24957ECC0](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a3->i64[0] = 0;
  a3->i64[1] = 0;
}

uint64_t ActionRegexEvaluator.textPreprocessor.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v2 = (void *)v1[3];
  v3 = (void *)v1[4];
  v4 = (void *)v1[5];
  v5 = (void *)v1[6];
  v6 = v1[7];
  v7 = v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t ActionRegexEvaluator.init(languageCode:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v5[9];

  specialized ActionRegexEvaluator.init(languageCode:)(a1, a2, v5);
  return outlined init with take of ActionRegexEvaluator?((uint64_t)v5, a3);
}

Swift::String __swiftcall ActionRegexEvaluator.normalize(inputText:)(Swift::String inputText)
{
  _QWORD *v1;
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  Swift::String result;
  _QWORD v50[3];
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;

  v2 = v1;
  object = inputText._object;
  countAndFlagsBits = inputText._countAndFlagsBits;
  v5 = type metadata accessor for CharacterSet();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = countAndFlagsBits;
  v63 = object;
  static CharacterSet.whitespaces.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol.trimmingCharacters(in:)();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = (void *)v2[3];
  v14 = (void *)v2[5];
  v13 = (void *)v2[6];
  v52 = (id)v2[4];
  v53 = v13;
  v15 = specialized TextPreprocessor.normalizeContactNames(in:contactMatches:)(v9, v11, 0);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = (void *)MEMORY[0x24957DF1C](v15, v17);
  v19 = objc_msgSend(v12, sel_matchesInString_options_range_, v18, 0, 0, String.count.getter());

  type metadata accessor for NSTextCheckingResult();
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5078_s12SmartReplies16TextPreprocessorV20replaceDollarAmounts05inputC0S2S_tFSSSo20deF6CXEfU_SSTf1cn_nTf4ng_n(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v51 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50[1] = v21;
    v50[2] = v17;
    v23 = (uint64_t *)(v21 + 40);
    do
    {
      v24 = *(v23 - 1);
      v25 = *v23;
      v62 = v15;
      v63 = v17;
      v60 = v24;
      v61 = v25;
      v58 = v24;
      v59 = v25;
      v55 = 0xE000000000000000;
      v56 = 36;
      v57 = 0xE100000000000000;
      v54 = 0;
      swift_bridgeObjectRetain_n();
      v58 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v59 = v26;
      v27._countAndFlagsBits = 0x7372616C6C6F6420;
      v27._object = (void *)0xE800000000000000;
      String.append(_:)(v27);
      v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v17 = v29;
      v23 += 2;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v51;
  }
  swift_bridgeObjectRelease();
  v30 = (void *)MEMORY[0x24957DF1C](v15, v17);
  v31 = String.count.getter();
  v32 = (void *)MEMORY[0x24957DF1C](32, 0xE100000000000000);
  v33 = objc_msgSend(v52, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v30, 0, 0, v31, v32);

  v34 = v33;
  if (!v33)
  {
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = (void *)MEMORY[0x24957DF1C](v35);
    swift_bridgeObjectRelease();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = String.count.getter();
  swift_bridgeObjectRelease();
  v37 = (void *)MEMORY[0x24957DF1C](32, 0xE100000000000000);
  v38 = objc_msgSend(v14, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v34, 0, 0, v36, v37);

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v41 = v40;
  swift_bridgeObjectRelease();

  v42 = (void *)MEMORY[0x24957DF1C](v39, v41);
  v43 = String.count.getter();
  v44 = (void *)MEMORY[0x24957DF1C](0, 0xE000000000000000);
  v45 = objc_msgSend(v53, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v42, 0, 0, v43, v44);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRelease();

  v46 = String.lowercased()();
  swift_bridgeObjectRelease();
  v47 = v46._countAndFlagsBits;
  v48 = v46._object;
  result._object = v48;
  result._countAndFlagsBits = v47;
  return result;
}

void ActionRegexEvaluator.findActionsFromNormalizedText(normalizedText:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  uint64_t v46;

  v36 = *v2 + 64;
  v5 = 1 << *(_BYTE *)(*v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v2 + 64);
  v37 = (unint64_t)(v5 + 63) >> 6;
  v39 = *v2;
  swift_bridgeObjectRetain();
  v8 = 0;
  v38 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v10 = (v7 - 1) & v7;
      v11 = v9 | (v8 << 6);
      goto LABEL_22;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return;
    }
    if (v12 >= v37)
      goto LABEL_40;
    v13 = *(_QWORD *)(v36 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v37)
        goto LABEL_40;
      v13 = *(_QWORD *)(v36 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v37)
          goto LABEL_40;
        v13 = *(_QWORD *)(v36 + 8 * v8);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v10 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_22:
    v42 = v10;
    v43 = v8;
    v15 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * v11);
    v40 = *v15;
    v41 = v15[1];
    v16 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v11);
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      if (!v17)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    else
    {
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v17)
        goto LABEL_4;
    }
    v18 = 4;
    while (1)
    {
      if ((v16 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x24957E42C](v18 - 4, v16);
      else
        v19 = *(id *)(v16 + 8 * v18);
      v20 = v19;
      v21 = v18 - 3;
      if (__OFADD__(v18 - 4, 1))
      {
        __break(1u);
        goto LABEL_48;
      }
      v22 = (void *)MEMORY[0x24957DF1C](a1, a2);
      v23 = (uint64_t)objc_msgSend(v20, sel_numberOfMatchesInString_options_range_, v22, 0, 0, String.count.getter());

      if (v23 >= 1)
        break;

      ++v18;
      if (v21 == v17)
        goto LABEL_4;
    }
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v24 = v38;
    else
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v24);
    v24[2] = v26 + 1;
    v38 = v24;
    v27 = &v24[2 * v26];
    v27[4] = v40;
    v27[5] = v41;

LABEL_5:
    v7 = v42;
    v8 = v43;
  }
  v14 = v12 + 3;
  if (v14 < v37)
  {
    v13 = *(_QWORD *)(v36 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        v8 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_49;
        if (v8 >= v37)
          goto LABEL_40;
        v13 = *(_QWORD *)(v36 + 8 * v8);
        ++v14;
        if (v13)
          goto LABEL_21;
      }
    }
    v8 = v14;
    goto LABEL_21;
  }
LABEL_40:
  swift_release();
  v28 = v38[2];
  if (v28)
  {
    v46 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v29 = v46;
    v30 = v38 + 5;
    do
    {
      v31 = *(v30 - 1);
      v32 = *v30;
      swift_bridgeObjectRetain();
      static ActionRegexEvaluator.actionTypeAndPOV(for:)(v31, v32, &v45);
      swift_bridgeObjectRelease();
      v33 = v45;
      v46 = v29;
      v35 = *(_QWORD *)(v29 + 16);
      v34 = *(_QWORD *)(v29 + 24);
      if (v35 >= v34 >> 1)
      {
        v44 = v45;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v33 = v44;
        v29 = v46;
      }
      v30 += 2;
      *(_QWORD *)(v29 + 16) = v35 + 1;
      *(int64x2_t *)(v29 + 16 * v35 + 32) = v33;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t ActionRegexEvaluator.normalizeAndFindActions(inputText:)(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;

  v2 = ActionRegexEvaluator.normalize(inputText:)(*(Swift::String *)&a1);
  ActionRegexEvaluator.findActionsFromNormalizedText(normalizedText:)(v2._countAndFlagsBits, (uint64_t)v2._object);
  v4 = v3;
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [String : Double]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v2;
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v34 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          v3 = v33;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v34 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((a2 & 1) != 0)
    {
      outlined init with take of Any(v23, v35);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v35);
      v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v33;
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TUSTrialNamespaceManager<TrialSmartRepliesFactors>>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  _QWORD *v18;
  char v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SRPredictionType, [SRPredictionItem]>);
  v19 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v18 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v17 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v17 > 1)
  {
    v11 = *(_QWORD *)(v5 + 72);
    v12 = 1;
    if (v11)
      goto LABEL_17;
    v12 = 2;
    if (v17 > 2)
    {
      v11 = *(_QWORD *)(v5 + 80);
      if (!v11)
      {
        v13 = 3;
        if (v17 > 3)
        {
          v11 = *(_QWORD *)(v5 + 88);
          if (v11)
          {
            v12 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              JUMPOUT(0x247632A20);
            }
            if (v12 >= v17)
              break;
            v11 = v18[v12];
            ++v13;
            if (v11)
              goto LABEL_17;
          }
        }
        goto LABEL_21;
      }
LABEL_17:
      v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_18:
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      if ((v19 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
  }
LABEL_21:
  swift_release();
  v3 = v2;
  if ((v19 & 1) != 0)
  {
    v15 = 1 << *(_BYTE *)(v5 + 32);
    if (v15 >= 64)
      bzero(v18, ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v18 = -1 << v15;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [NSRegularExpression]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    if (!v24)
      break;
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Double>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [String : Double]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TUSTrialNamespaceManager<TrialSmartRepliesFactors>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SRPredictionType, [SRPredictionItem]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [NSRegularExpression]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized ActionRegexEvaluator.init(languageCode:)(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (**v12)(unint64_t, _QWORD);
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  _QWORD *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (**v44)(unint64_t, _QWORD);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  _QWORD *v51;
  id v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t i;
  int64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  uint64_t v111;
  char isUniquelyReferenced_nonNull_native;
  char v113;
  unint64_t v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  id v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  id v148;
  char *v149;
  char *v150;
  void (**v151)(unint64_t, _QWORD);
  char *v152;
  id v153;
  id v154;
  id v155;
  _QWORD *v156;
  void *v157;
  uint64_t v158;
  void (**v159)(unint64_t, _QWORD);
  uint64_t v160;
  id v161;
  uint64_t v162;
  id v163;
  uint64_t v164[4];

  v160 = a1;
  v164[2] = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for URL.DirectoryHint();
  v158 = *(_QWORD *)(v5 - 8);
  v159 = (void (**)(unint64_t, _QWORD))v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(void (***)(unint64_t, _QWORD))(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  swift_bridgeObjectRetain_n();
  v161 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D2E392D305B245CLL, 0xE90000000000002BLL, 0);
  v16 = v161;
  v149 = v10;
  v150 = v14;
  v151 = v12;
  v152 = v7;
  v156 = a3;
  v157 = a2;
  v17 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v18 = v16;
  v19 = @nonobjc NSRegularExpression.init(pattern:options:)(29532, 0xE200000000000000, 0);
  v20 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v21 = v19;
  v22 = @nonobjc NSRegularExpression.init(pattern:options:)(0x7D2C327B20, 0xE500000000000000, 0);
  v23 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  v24 = v22;
  v33 = @nonobjc NSRegularExpression.init(pattern:options:)(0x5D9980E2BCCA275BLL, 0xA800000000000000, 0);

  v34 = v157;
  swift_bridgeObjectRetain();
  v148 = v18;
  v155 = v21;
  v154 = v24;
  v153 = v33;
  v35 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v36 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v35);

  if (!v36)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for standard != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.standard);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    v50 = os_log_type_enabled(v48, v49);
    v51 = v156;
    v52 = v148;
    if (v50)
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_2475DF000, v48, v49, "Could not find SmartReplies bundle", v53, 2u);
      MEMORY[0x24957ECC0](v53, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    goto LABEL_2;
  }
  strcpy((char *)v164, "actionRegex-");
  BYTE5(v164[1]) = 0;
  HIWORD(v164[1]) = -5120;
  v37._countAndFlagsBits = v160;
  v37._object = v34;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38 = (void *)MEMORY[0x24957DF1C](v164[0], v164[1]);
  swift_bridgeObjectRelease();
  v39 = (void *)MEMORY[0x24957DF1C](0x7473696C70, 0xE500000000000000);
  v40 = objc_msgSend(v36, sel_pathForResource_ofType_, v38, v39);

  if (!v40)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.standard);
    v55 = v36;
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v56, v57))
    {

      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    v164[0] = v59;
    *(_DWORD *)v58 = 136315138;
    v60 = objc_msgSend(v55, sel_bundlePath);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

    v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2475DF000, v56, v57, "Could not find regexes at bundle path %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v59, -1, -1);
    MEMORY[0x24957ECC0](v58, -1, -1);
    swift_bridgeObjectRelease();
    v64 = v153;

    v65 = v154;
    v66 = v155;

    v67 = v148;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v51 = v156;
    goto LABEL_4;
  }
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v43 = v42;

  v44 = v151;
  v45 = v11;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v151[7])(v149, 1, 1, v11);
  (*(void (**)(char *, _QWORD, void (**)(unint64_t, _QWORD)))(v158 + 104))(v152, *MEMORY[0x24BDCD7A0], v159);
  swift_bridgeObjectRetain();
  v46 = (unint64_t)v150;
  URL.init(filePath:directoryHint:relativeTo:)();
  v68 = Data.init(contentsOf:options:)();
  v70 = v69;
  v149 = (char *)v41;
  v152 = v43;
  v44[1](v46, v45);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  outlined copy of Data._Representation(v68, v70);
  PropertyListDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : [String]]]);
  lazy protocol witness table accessor for type [String : [String : [String]]] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : [String : [String]]] and conformance <> [A : B], &demangling cache variable for type metadata for [String : [String : [String]]], (uint64_t (*)(void))lazy protocol witness table accessor for type [String : [String]] and conformance <> [A : B]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v144 = v68;
  v150 = (char *)v70;
  outlined consume of Data._Representation(v68, v70);
  swift_release();
  v83 = 0;
  v84 = v164[0];
  v85 = *(_QWORD *)(v164[0] + 64);
  v146 = v164[0] + 64;
  v86 = 1 << *(_BYTE *)(v164[0] + 32);
  v87 = -1;
  if (v86 < 64)
    v87 = ~(-1 << v86);
  v88 = v87 & v85;
  v147 = (unint64_t)(v86 + 63) >> 6;
  v26 = (_QWORD *)MEMORY[0x24BEE4B00];
  v89 = MEMORY[0x24BEE4AF8];
  v151 = (void (**)(unint64_t, _QWORD))v36;
  v145 = v164[0];
  if ((v87 & v85) == 0)
    goto LABEL_24;
LABEL_23:
  v90 = __clz(__rbit64(v88));
  v88 &= v88 - 1;
  for (i = v90 | (v83 << 6); ; i = __clz(__rbit64(v93)) + (v83 << 6))
  {
    v95 = *(_QWORD *)(v84 + 56);
    v96 = (uint64_t *)(*(_QWORD *)(v84 + 48) + 16 * i);
    v44 = (void (**)(unint64_t, _QWORD))v96[1];
    v158 = *v96;
    v97 = *(_QWORD *)(v95 + 8 * i);
    v98 = *(_QWORD *)(v97 + 16);
    swift_bridgeObjectRetain();
    if (!v98)
      goto LABEL_69;
    swift_bridgeObjectRetain();
    v99 = specialized __RawDictionaryStorage.find<A>(_:)(0x6973736572707845, 0xEB00000000736E6FLL);
    if ((v100 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_69:
      if (one-time initialization token for standard != -1)
LABEL_82:
        swift_once();
      v134 = type metadata accessor for Logger();
      __swift_project_value_buffer(v134, (uint64_t)static Logger.standard);
      v135 = (unint64_t)v152;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v136 = Logger.logObject.getter();
      v137 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v136, v137))
      {
        v138 = swift_slowAlloc();
        v139 = swift_slowAlloc();
        v164[0] = v139;
        *(_DWORD *)v138 = 136315394;
        swift_bridgeObjectRetain();
        v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, (unint64_t)v44, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v138 + 12) = 2080;
        swift_bridgeObjectRetain();
        v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v149, v135, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2475DF000, v136, v137, "Failed to load expression list for %s in %s", (uint8_t *)v138, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v139, -1, -1);
        MEMORY[0x24957ECC0](v138, -1, -1);
        outlined consume of Data._Representation(v144, (unint64_t)v150);
        swift_release();
        swift_bridgeObjectRelease();

      }
      else
      {
        outlined consume of Data._Representation(v144, (unint64_t)v150);
        swift_release();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      v51 = v156;
      goto LABEL_2;
    }
    v159 = v44;
    v101 = *(_QWORD *)(*(_QWORD *)(v97 + 56) + 8 * v99);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v164[0] = v89;
    v102 = *(_QWORD *)(v101 + 16);
    if (v102)
    {
      v103 = (uint64_t *)(v101 + 40);
      while (1)
      {
        v105 = *(v103 - 1);
        v104 = *v103;
        v106 = objc_allocWithZone(MEMORY[0x24BDD1798]);
        swift_bridgeObjectRetain();
        v107 = (void *)MEMORY[0x24957DF1C](v105, v104);
        swift_bridgeObjectRelease();
        v163 = 0;
        v108 = objc_msgSend(v106, sel_initWithPattern_options_error_, v107, 1, &v163);

        if (!v108)
          break;
        v109 = v163;
        v110 = v108;
        MEMORY[0x24957E0E4]();
        if (*(_QWORD *)((v164[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v164[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v103 += 2;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        if (!--v102)
        {
          swift_bridgeObjectRelease();
          v111 = v164[0];
          v84 = v145;
          goto LABEL_49;
        }
      }
      v126 = v163;
      v127 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for standard != -1)
        goto LABEL_80;
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    v111 = v89;
LABEL_49:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v163 = v26;
    v114 = specialized __RawDictionaryStorage.find<A>(_:)(v158, (uint64_t)v159);
    v115 = v26[2];
    v116 = (v113 & 1) == 0;
    v117 = v115 + v116;
    v36 = v151;
    if (__OFADD__(v115, v116))
      break;
    v118 = v113;
    if (v26[3] >= v117)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      v44 = v159;
      v26 = v163;
      if ((v118 & 1) != 0)
        goto LABEL_58;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, isUniquelyReferenced_nonNull_native);
      v44 = v159;
      v119 = specialized __RawDictionaryStorage.find<A>(_:)(v158, (uint64_t)v159);
      if ((v118 & 1) != (v120 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      v114 = v119;
      v26 = v163;
      if ((v118 & 1) != 0)
      {
LABEL_58:
        v125 = v26[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v125 + 8 * v114) = v111;
        goto LABEL_59;
      }
    }
    v26[(v114 >> 6) + 8] |= 1 << v114;
    v121 = (_QWORD *)(v26[6] + 16 * v114);
    *v121 = v158;
    v121[1] = v44;
    *(_QWORD *)(v26[7] + 8 * v114) = v111;
    v122 = v26[2];
    v123 = __OFADD__(v122, 1);
    v124 = v122 + 1;
    if (v123)
      goto LABEL_79;
    v26[2] = v124;
    swift_bridgeObjectRetain();
LABEL_59:
    v89 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v88)
      goto LABEL_23;
LABEL_24:
    v92 = v83 + 1;
    if (__OFADD__(v83, 1))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      swift_once();
LABEL_64:
      v128 = type metadata accessor for Logger();
      __swift_project_value_buffer(v128, (uint64_t)static Logger.standard);
      v129 = (unint64_t)v159;
      swift_bridgeObjectRetain();
      v130 = Logger.logObject.getter();
      v131 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v130, v131))
      {
        v132 = (uint8_t *)swift_slowAlloc();
        v133 = (void *)swift_slowAlloc();
        v163 = v133;
        *(_DWORD *)v132 = 136315138;
        swift_bridgeObjectRetain();
        v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v129, (uint64_t *)&v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2475DF000, v130, v131, "Found invalid expression in expression list for action %s", v132, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24957ECC0](v133, -1, -1);
        MEMORY[0x24957ECC0](v132, -1, -1);
        outlined consume of Data._Representation(v144, (unint64_t)v150);
        swift_release();
        swift_bridgeObjectRelease();

      }
      else
      {
        outlined consume of Data._Representation(v144, (unint64_t)v150);
        swift_release();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
      }

      v51 = v156;
      v25 = v161;
      goto LABEL_3;
    }
    if (v92 >= v147)
      goto LABEL_74;
    v93 = *(_QWORD *)(v146 + 8 * v92);
    ++v83;
    if (!v93)
    {
      v83 = v92 + 1;
      if (v92 + 1 >= v147)
        goto LABEL_74;
      v93 = *(_QWORD *)(v146 + 8 * v83);
      if (!v93)
      {
        v83 = v92 + 2;
        if (v92 + 2 >= v147)
        {
LABEL_74:
          swift_release();
LABEL_75:
          outlined consume of Data._Representation(v144, (unint64_t)v150);
          swift_bridgeObjectRelease();

          v32 = v157;
          swift_bridgeObjectRelease();
          v140 = v153;

          v141 = v154;
          v142 = v155;

          v27 = v148;
          v30 = v140;
          v29 = v141;
          v28 = v142;
          v51 = v156;
          v31 = v160;
          goto LABEL_4;
        }
        v93 = *(_QWORD *)(v146 + 8 * v83);
        if (v93)
          goto LABEL_38;
        v94 = v92 + 3;
        if (v94 >= v147)
        {
          swift_release();
          v36 = v151;
          goto LABEL_75;
        }
        v93 = *(_QWORD *)(v146 + 8 * v94);
        if (!v93)
        {
          v36 = v151;
          v84 = v145;
          v89 = MEMORY[0x24BEE4AF8];
          while (1)
          {
            v83 = v94 + 1;
            if (__OFADD__(v94, 1))
              break;
            if (v83 >= v147)
              goto LABEL_74;
            v93 = *(_QWORD *)(v146 + 8 * v83);
            ++v94;
            if (v93)
              goto LABEL_38;
          }
          __break(1u);
          goto LABEL_82;
        }
        v83 = v94;
        v84 = v145;
        v89 = MEMORY[0x24BEE4AF8];
      }
    }
LABEL_38:
    v88 = (v93 - 1) & v93;
  }
  __break(1u);
  swift_once();
  v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)static Logger.standard);
  v72 = (id)v114;
  v73 = (unint64_t)v152;
  swift_bridgeObjectRetain();
  v74 = (id)v114;
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = swift_slowAlloc();
    v78 = (_QWORD *)swift_slowAlloc();
    v79 = swift_slowAlloc();
    v150 = (char *)v83;
    v151 = (void (**)(unint64_t, _QWORD))v36;
    v80 = v79;
    v164[0] = v79;
    *(_DWORD *)v77 = 136315394;
    swift_bridgeObjectRetain();
    v163 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v149, v73, v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v77 + 12) = 2112;
    v81 = (id)v114;
    v82 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v163 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v78 = v82;

    _os_log_impl(&dword_2475DF000, v75, v76, "Failed to decode contents from %s into expected format: %@", (uint8_t *)v77, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v78, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v80, -1, -1);
    MEMORY[0x24957ECC0](v77, -1, -1);
    outlined consume of Data._Representation((uint64_t)v26, (unint64_t)v150);

    swift_bridgeObjectRelease();
    v51 = v156;
    goto LABEL_2;
  }

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation((uint64_t)v26, v83);

  swift_bridgeObjectRelease_n();
LABEL_62:
  v51 = v156;
LABEL_2:
  v25 = v161;
LABEL_3:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
LABEL_4:
  *v51 = v26;
  v51[1] = v31;
  v51[2] = v32;
  v51[3] = v27;
  v51[4] = v28;
  v51[5] = v29;
  v51[6] = v30;
  v51[7] = v31;
  v51[8] = v32;
}

uint64_t outlined init with take of ActionRegexEvaluator?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionRegexEvaluator?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ActionRegexEvaluator(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ActionRegexEvaluator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  v6 = (void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  v8 = (void *)a2[6];
  v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v4;
  v10 = v5;
  v11 = v6;
  v12 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ActionRegexEvaluator(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  v7 = (void *)a2[4];
  v8 = (void *)a1[4];
  a1[4] = v7;
  v9 = v7;

  v10 = (void *)a2[5];
  v11 = (void *)a1[5];
  a1[5] = v10;
  v12 = v10;

  v13 = (void *)a2[6];
  v14 = (void *)a1[6];
  a1[6] = v13;
  v15 = v13;

  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ActionRegexEvaluator(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v6 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionRegexEvaluator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionRegexEvaluator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionRegexEvaluator()
{
  return &type metadata for ActionRegexEvaluator;
}

uint64_t *SmartRepliesXPCClient.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static SmartRepliesXPCClient.shared;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance XPCClientError()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0xD000000000000020;
  else
    return 0xD00000000000001CLL;
}

objc_class *one-time initialization function for serverXPCInterface()
{
  objc_class *result;

  result = (objc_class *)srSmartRepliesXPCServerInterface.getter();
  serverXPCInterface.super.isa = result;
  return result;
}

void closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[6];
  __int128 v18;
  _OWORD v19[2];

  SmartRepliesXPCServerConnection.establishXPCConnection()();
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v17[4] = partial apply for closure #1 in closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter;
    v17[5] = a1;
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion) -> ();
    v17[3] = &block_descriptor_21;
    v5 = _Block_copy(v17);
    v6 = v4;
    swift_retain();
    swift_release();
    v7 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v5);
    _Block_release(v5);

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v18, v19);
    outlined init with copy of Any((uint64_t)v19, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SRSmartRepliesXPCProtocol);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = v18;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
      *a2 = v8;
      return;
    }
    if (one-time initialization token for standard != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.standard);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_2475DF000, v14, v15, "Unable to cast remote proxy as SRSmartRepliesXPCProtocol", v16, 2u);
      MEMORY[0x24957ECC0](v16, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2475DF000, v10, v11, "Unable to get remote proxy SRSmartRepliesXPCProtocol", v12, 2u);
      MEMORY[0x24957ECC0](v12, -1, -1);
    }

  }
  *a2 = 0;
}

void SmartRepliesXPCServerConnection.establishXPCConnection()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  void (*v28)();
  uint64_t v29;

  if (!v0[5])
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.standard);
    swift_retain();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      aBlock = v5;
      *(_DWORD *)v4 = 136315138;
      v6 = v0[2];
      v7 = v0[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v2, v3, "Attempting to establish XPC connection to mach service %s", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v5, -1, -1);
      MEMORY[0x24957ECC0](v4, -1, -1);

    }
    else
    {

      swift_release();
    }
    v9 = v0[2];
    v8 = v0[3];
    v10 = objc_allocWithZone(MEMORY[0x24BDD1988]);
    swift_bridgeObjectRetain();
    v11 = (void *)MEMORY[0x24957DF1C](v9, v8);
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v10, sel_initWithMachServiceName_options_, v11, 0);

    if (one-time initialization token for serverXPCInterface != -1)
      swift_once();
    objc_msgSend(v12, sel_setRemoteObjectInterface_, serverXPCInterface.super.isa);
    v13 = swift_allocObject();
    swift_weakInit();
    v28 = partial apply for closure #1 in SmartRepliesXPCServerConnection.establishXPCConnection();
    v29 = v13;
    v14 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed () -> ();
    v27 = &block_descriptor_27;
    v15 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v12, sel_setInterruptionHandler_, v15);
    _Block_release(v15);
    v16 = swift_allocObject();
    swift_weakInit();
    v28 = partial apply for closure #2 in SmartRepliesXPCServerConnection.establishXPCConnection();
    v29 = v16;
    aBlock = v14;
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed () -> ();
    v27 = &block_descriptor_31;
    v17 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v12, sel_setInvalidationHandler_, v17);
    _Block_release(v17);
    objc_msgSend(v12, sel_resume);
    v18 = (void *)v0[5];
    v0[5] = v12;
    v19 = v12;

    swift_retain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      aBlock = v23;
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v20, v21, "Successfully established XPC connection to mach service %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v23, -1, -1);
      MEMORY[0x24957ECC0](v22, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
}

void closure #1 in closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for standard != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.standard);
  swift_retain();
  v5 = a1;
  swift_retain();
  v6 = a1;
  oslog = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v16 = v10;
    *(_DWORD *)v8 = 136315394;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    v13 = a1;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v15;

    _os_log_impl(&dword_2475DF000, oslog, v7, "XPCClient for service \"%s\" unable to get remote object proxy from server: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v10, -1, -1);
    MEMORY[0x24957ECC0](v8, -1, -1);

  }
  else
  {
    swift_release_n();

  }
}

_QWORD *SmartRepliesXPCServerConnection.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v8[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[5] = 0;
  v0[2] = 0xD000000000000032;
  v0[3] = 0x800000024765D000;
  return v0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void closure #1 in SmartRepliesXPCServerConnection.establishXPCConnection()(uint64_t a1, const char *a2)
{
  uint64_t Strong;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = (_QWORD *)Strong;
    if (one-time initialization token for standard != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.standard);
    swift_retain();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v14 = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = v4[2];
      v11 = v4[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v6, v7, a2, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v9, -1, -1);
      MEMORY[0x24957ECC0](v8, -1, -1);

      v12 = (void *)v4[5];
      if (v12)
      {
LABEL_6:
        objc_msgSend(v12, sel_invalidate);
        v13 = (void *)v4[5];
LABEL_9:
        v4[5] = 0;
        swift_release();

        return;
      }
    }
    else
    {

      swift_release();
      v12 = (void *)v4[5];
      if (v12)
        goto LABEL_6;
    }
    v13 = 0;
    goto LABEL_9;
  }
}

uint64_t SmartRepliesXPCServerConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

_QWORD *one-time initialization function for shared()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for SmartRepliesXPCClient();
  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for SmartRepliesXPCServerConnection();
  swift_allocObject();
  result = SmartRepliesXPCServerConnection.init()();
  *(_QWORD *)(v0 + 112) = result;
  static SmartRepliesXPCClient.shared = v0;
  return result;
}

uint64_t SmartRepliesXPCClient.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for SmartRepliesXPCServerConnection();
  swift_allocObject();
  *(_QWORD *)(v0 + 112) = SmartRepliesXPCServerConnection.init()();
  return v0;
}

uint64_t static SmartRepliesXPCClient.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v9 + 216) = v13;
  *(_QWORD *)(v9 + 224) = v8;
  *(_QWORD *)(v9 + 208) = v12;
  *(_OWORD *)(v9 + 192) = v11;
  *(_QWORD *)(v9 + 176) = a7;
  *(_QWORD *)(v9 + 184) = a8;
  *(_QWORD *)(v9 + 160) = a5;
  *(_QWORD *)(v9 + 168) = a6;
  *(_QWORD *)(v9 + 144) = a3;
  *(_QWORD *)(v9 + 152) = a4;
  *(_QWORD *)(v9 + 128) = a1;
  *(_QWORD *)(v9 + 136) = a2;
  return swift_task_switch();
}

uint64_t SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SRSmartRepliesXPCProtocol?);
  OS_dispatch_queue.sync<A>(execute:)();
  v1 = *(void **)(v0 + 80);
  *(_QWORD *)(v0 + 232) = v1;
  if (v1)
  {
    v31 = v1;
    if (one-time initialization token for standard != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2475DF000, v3, v4, "Initiating call to server for - predictFor async", v5, 2u);
      MEMORY[0x24957ECC0](v5, -1, -1);
    }
    v30 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 184);
    v28 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 128);

    v13 = MEMORY[0x24957DF1C](v12, v11);
    *(_QWORD *)(v0 + 240) = v13;
    type metadata accessor for SRSmartRepliesConversationTurn();
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 248) = isa;
    v15 = MEMORY[0x24957DF1C](v10, v9);
    *(_QWORD *)(v0 + 256) = v15;
    v16 = MEMORY[0x24957DF1C](v8, v7);
    *(_QWORD *)(v0 + 264) = v16;
    v17 = MEMORY[0x24957DF1C](v6, v28);
    *(_QWORD *)(v0 + 272) = v17;
    v18 = MEMORY[0x24957DF1C](v29, v30);
    *(_QWORD *)(v0 + 280) = v18;
    v19 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 288) = v19;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:);
    *(_QWORD *)(v0 + 112) = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 88) = 0x40000000;
    *(_QWORD *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : [SRSmartRepliesPredictionItem]]?;
    *(_QWORD *)(v0 + 104) = &block_descriptor_7;
    objc_msgSend(v31, sel_predictForMessage_conversationTurns_language_plistPath_espressoModelPath_vocabPath_heads_completion_, v13, isa, v15, v16, v17, v18, v19, v0 + 80);
    return swift_continuation_await();
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.standard);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v24 = 138412290;
      lazy protocol witness table accessor for type XPCClientError and conformance XPCClientError();
      swift_allocError();
      *(_QWORD *)v26 = 0;
      *(_BYTE *)(v26 + 8) = 1;
      v27 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 80) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v25 = v27;
      _os_log_impl(&dword_2475DF000, v22, v23, "Unable to get remote proxy to server for - predictFor async: %@", v24, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v25, -1, -1);
      MEMORY[0x24957ECC0](v24, -1, -1);
    }

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 296) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = *(void **)(v0 + 280);
  v1 = *(void **)(v0 + 288);
  v4 = *(void **)(v0 + 264);
  v3 = *(void **)(v0 + 272);
  v6 = *(void **)(v0 + 248);
  v5 = *(void **)(v0 + 256);
  v7 = *(void **)(v0 + 240);
  swift_unknownObjectRelease();
  v8 = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = *(void **)(v0 + 288);
  v3 = *(void **)(v0 + 272);
  v2 = *(void **)(v0 + 280);
  v5 = *(void **)(v0 + 256);
  v4 = *(void **)(v0 + 264);
  v7 = *(void **)(v0 + 240);
  v6 = *(void **)(v0 + 248);
  swift_willThrow();
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc closure #1 in SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, void *aBlock)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8[2] = v29;
  v8[3] = _Block_copy(aBlock);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v10;
  v28 = v9;
  v8[4] = v10;
  type metadata accessor for SRSmartRepliesConversationTurn();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v8[5] = v11;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;
  v8[6] = v12;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  v8[7] = v14;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;
  v8[8] = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;
  v8[9] = v19;
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v8[10] = v21;
  swift_retain();
  v22 = (_QWORD *)swift_task_alloc();
  v8[11] = v22;
  *v22 = v8;
  v22[1] = @objc closure #1 in SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:);
  v22[27] = v21;
  v22[28] = v29;
  v22[25] = v18;
  v22[26] = v20;
  v22[23] = v24;
  v22[24] = v17;
  v22[21] = v25;
  v22[22] = v15;
  v22[19] = v26;
  v22[20] = v13;
  v22[17] = v27;
  v22[18] = v11;
  v22[16] = v28;
  return swift_task_switch();
}

uint64_t @objc closure #1 in SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = _convertErrorToNSError(_:)();

    isa = 0;
    v8 = (void *)v6;
  }
  else
  {
    v6 = a1;
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [SRSmartRepliesPredictionItem]);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v6 = 0;
      v8 = isa;
    }
    else
    {
      isa = 0;
      v8 = 0;
    }
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t SmartRepliesXPCClient.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SmartRepliesXPCClient.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SmartRepliesXPCClient.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  type metadata accessor for SmartRepliesXPCServerConnection();
  swift_allocObject();
  *(_QWORD *)(v0 + 112) = SmartRepliesXPCServerConnection.init()();
  return v0;
}

uint64_t type metadata accessor for SmartRepliesXPCServerConnection()
{
  return objc_opt_self();
}

void partial apply for closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(v1, a1);
}

uint64_t SmartRepliesXPCClient.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

unint64_t lazy protocol witness table accessor for type XPCClientError and conformance XPCClientError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type XPCClientError and conformance XPCClientError;
  if (!lazy protocol witness table cache variable for type XPCClientError and conformance XPCClientError)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for XPCClientError, &unk_2518C66A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type XPCClientError and conformance XPCClientError);
  }
  return result;
}

uint64_t type metadata accessor for SmartRepliesXPCClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for SmartRepliesXPCClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v12 + 96) + *(_QWORD *)(*(_QWORD *)v12 + 96));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v18;
  *v18 = v13;
  v18[1] = dispatch thunk of SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t dispatch thunk of SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of SmartRepliesXPCClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for XPCClientError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for XPCClientError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for XPCClientError(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for XPCClientError(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

void *type metadata accessor for XPCClientError()
{
  return &unk_2518C66A0;
}

uint64_t sub_2476373D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 72));
  swift_release();
  return swift_deallocObject();
}

void partial apply for @objc closure #1 in SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  __asm { BR              X8; @objc closure #1 in SmartRepliesXPCClient.predictFor(message:conversationTurns:language:plistPath:espressoModelPath:vocabPath:heads:) }
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t objectdestroy_6Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_247637658()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

void partial apply for closure #1 in closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in SmartRepliesXPCServerConnection.remoteObjectProxy.getter(a1, v1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_247637754()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in SmartRepliesXPCServerConnection.establishXPCConnection()()
{
  uint64_t v0;

  closure #1 in SmartRepliesXPCServerConnection.establishXPCConnection()(v0, "Connection to \"%s\" interrupted");
}

void partial apply for closure #2 in SmartRepliesXPCServerConnection.establishXPCConnection()()
{
  uint64_t v0;

  closure #1 in SmartRepliesXPCServerConnection.establishXPCConnection()(v0, "Connection to \"%s\" invalidated");
}

uint64_t lookupStopWords(forLanguageCode:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;

  v4 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v4);

  if (!v5)
    return 0;
  v6 = (void *)MEMORY[0x24957DF1C](0x64726F57706F7453, 0xE900000000000073);
  v7 = (void *)MEMORY[0x24957DF1C](0x7473696C70, 0xE500000000000000);
  v8 = objc_msgSend(v5, sel_pathForResource_ofType_, v6, v7);

  if (!v8)
    goto LABEL_6;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v13 = (void *)MEMORY[0x24957DF1C](v9, v11);
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithContentsOfFile_, v13);

  if (!v14)
  {
LABEL_6:

    return 0;
  }
  *(_QWORD *)&v19[0] = a1;
  *((_QWORD *)&v19[0] + 1) = a2;
  swift_bridgeObjectRetain_n();
  v15 = objc_msgSend(v14, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  outlined init with take of Any?((uint64_t)v19, (uint64_t)v20);
  if (!v21)
  {
    swift_bridgeObjectRelease();

    outlined destroy of Any?((uint64_t)v20);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRelease();
  v16 = specialized Set.init<A>(_:)(v18);

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  result = Set.init(minimumCapacity:)();
  v15 = result;
  if (v9)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v13(v6, v11, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    v1 = type metadata accessor for Calendar.Component();
    result = MEMORY[0x24957EC18](MEMORY[0x24BDCF2A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
  }
  return result;
}

uint64_t SRSmartRepliesActionSieveComponent.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_247637C58 + 4 * byte_2476580D0[a1]))(0x65736E6F70736552, 0xEB0000000074694BLL);
}

uint64_t sub_247637C58()
{
  return 0x7865676552;
}

uint64_t sub_247637C6C()
{
  return 19533;
}

uint64_t sub_247637C78()
{
  return 1701736270;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SRSmartRepliesActionSieveComponent(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_247637CF4@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_247637D38 + 4 * byte_2476580D8[a1]))(0x7865676552);
}

uint64_t sub_247637D38(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7865676552 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance SRSmartRepliesActionSieveComponent()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247637E1C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SRSmartRepliesActionSieveComponent()
{
  __asm { BR              X10 }
}

uint64_t sub_247637EB8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SRSmartRepliesActionSieveComponent()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_247637F4C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SRSmartRepliesActionSieveComponent@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SRSmartRepliesActionSieveComponent.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SRSmartRepliesActionSieveComponent()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_247638008 + 4 * byte_2476580E8[*v0]))();
}

void sub_247638008(_QWORD *a1@<X8>)
{
  *a1 = 0x7865676552;
  a1[1] = 0xE500000000000000;
}

void sub_247638020(_QWORD *a1@<X8>)
{
  *a1 = 19533;
  a1[1] = 0xE200000000000000;
}

void sub_247638030(_QWORD *a1@<X8>)
{
  *a1 = 1701736270;
  a1[1] = 0xE400000000000000;
}

uint64_t ActionHandler.modelType.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ActionHandler.model.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t ActionHandler.requestActionsMapper.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t ActionHandler.init(modelType:model:requestActionsMapper:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_BYTE *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  return result;
}

uint64_t ActionHandlersSieveResult.actionTypesAndPOVs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActionHandlersSieveResult.rawScores.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActionHandlersSieveResult.componentTriggered.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t dispatchActionHandlersSieve(for:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t dispatchActionHandlersSieve(for:using:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 32) = v2;
  if (!v2)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v0 + 8))(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], 0, 3);
  *(_BYTE *)(v0 + 192) = *(_BYTE *)(v1 + 32);
  v3 = *(int **)(v1 + 40);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v1 + 64);
  v6 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = dispatchActionHandlersSieve(for:using:);
  return v6(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  char v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  uint64_t (*v13)(_QWORD);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(int **)(v0 + 48);
    v6 = *(_BYTE *)(v0 + 192);
    *(_QWORD *)(v0 + 104) = v1;
    *(_QWORD *)(v0 + 112) = v2;
    *(_QWORD *)(v0 + 88) = v4;
    *(_QWORD *)(v0 + 96) = v3;
    *(_BYTE *)(v0 + 193) = v6;
    swift_bridgeObjectRelease();
    v12 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = dispatchActionHandlersSieve(for:using:);
    return ((uint64_t (*)(_QWORD, uint64_t))v12)(*(_QWORD *)(v0 + 16), v1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v0 + 8))(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], 0, 3);
    }
    else
    {
      *(_QWORD *)(v0 + 136) = 1;
      v10 = *(_QWORD *)(v0 + 24);
      *(_BYTE *)(v0 + 194) = *(_BYTE *)(v10 + 72);
      *(_QWORD *)(v0 + 144) = *(_QWORD *)(v10 + 88);
      *(_QWORD *)(v0 + 152) = *(_QWORD *)(v10 + 96);
      *(_QWORD *)(v0 + 160) = *(_QWORD *)(v10 + 104);
      v13 = (uint64_t (*)(_QWORD))(**(int **)(v10 + 80) + *(_QWORD *)(v10 + 80));
      swift_retain_n();
      swift_retain_n();
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v11;
      *v11 = v0;
      v11[1] = dispatchActionHandlersSieve(for:using:);
      return v13(*(_QWORD *)(v0 + 16));
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  char v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(int **)(v0 + 152);
    v6 = *(_BYTE *)(v0 + 194);
    *(_QWORD *)(v0 + 104) = v1;
    *(_QWORD *)(v0 + 112) = v2;
    *(_QWORD *)(v0 + 88) = v4;
    *(_QWORD *)(v0 + 96) = v3;
    *(_BYTE *)(v0 + 193) = v6;
    swift_bridgeObjectRelease();
    v14 = (int *)((char *)v5 + *v5);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = dispatchActionHandlersSieve(for:using:);
    return ((uint64_t (*)(_QWORD, uint64_t))v14)(*(_QWORD *)(v0 + 16), v1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 32);
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    v11 = v9 + 1;
    swift_bridgeObjectRelease();
    if (v9 + 1 == v10)
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(v0 + 8))(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], 0, 3);
    }
    else
    {
      *(_QWORD *)(v0 + 136) = v11;
      v12 = *(_QWORD *)(v0 + 24) + 40 * v11;
      *(_BYTE *)(v0 + 194) = *(_BYTE *)(v12 + 32);
      *(_QWORD *)(v0 + 144) = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v0 + 152) = *(_QWORD *)(v12 + 56);
      *(_QWORD *)(v0 + 160) = *(_QWORD *)(v12 + 64);
      v15 = (uint64_t (*)(_QWORD))(**(int **)(v12 + 40) + *(_QWORD *)(v12 + 40));
      swift_retain_n();
      swift_retain_n();
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v13;
      *v13 = v0;
      v13[1] = dispatchActionHandlersSieve(for:using:);
      return v15(*(_QWORD *)(v0 + 16));
    }
  }
}

uint64_t dispatchActionHandlersSieve(for:using:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void dispatchActionHandlersSieve(for:using:)()
{
  __asm { BR              X10 }
}

uint64_t sub_24763847C()
{
  uint64_t v0;

  logDetectedActions(modelName:actionInfos:actionSuggestions:)(0x7865676552, 0xE500000000000000, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 128));
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(unsigned __int8 *)(v0 + 193));
}

uint64_t logDetectedActions(modelName:actionInfos:actionSuggestions:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_log_type_t v40;
  uint64_t v41;

  if (one-time initialization token for standard != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v40 = v9;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  v12 = &protocol conformance descriptor for ResponseType;
  v13 = a4 >> 62;
  v38 = a4;
  if (!os_log_type_enabled((os_log_t)v10, v11))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
      goto LABEL_8;
    goto LABEL_14;
  }
  v4 = swift_slowAlloc();
  v37 = swift_slowAlloc();
  v41 = v37;
  *(_DWORD *)v4 = 136315650;
  swift_bridgeObjectRetain();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v4 + 12) = 2048;
  swift_bridgeObjectRelease();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v4 + 22) = 2048;
  if (v13)
    goto LABEL_28;
  while (1)
  {
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2475DF000, (os_log_t)v10, v11, "%s detected %ld actions which resulted in %ld suggestions", (uint8_t *)v4, 0x20u);
    v11 = v37;
    swift_arrayDestroy();
    MEMORY[0x24957ECC0](v37, -1, -1);
    MEMORY[0x24957ECC0](v4, -1, -1);

    v12 = (_QWORD *)&protocol conformance descriptor for ResponseType;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14)
    {
LABEL_8:
      v36 = v13;
      swift_bridgeObjectRetain();
      v15 = a3 + 40;
      v37 = v12[189];
      do
      {
        swift_bridgeObjectRetain_n();
        v11 = v40;
        v16 = Logger.logObject.getter();
        v17 = static os_log_type_t.default.getter();
        v4 = v17;
        if (os_log_type_enabled(v16, v17))
        {
          v10 = swift_slowAlloc();
          v18 = swift_slowAlloc();
          v41 = v18;
          *(_DWORD *)v10 = v37;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
          swift_bridgeObjectRelease_n();
          v11 = 32;
          *(_WORD *)(v10 + 12) = 2080;
          v19 = String.init<A>(reflecting:)();
          *(_QWORD *)(v10 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v41);
          swift_bridgeObjectRelease();
          *(_WORD *)(v10 + 22) = 2080;
          v21 = String.init<A>(reflecting:)();
          *(_QWORD *)(v10 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v41);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_2475DF000, v16, (os_log_type_t)v4, "%s detected trigger type %s w/ POV %s", (uint8_t *)v10, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x24957ECC0](v18, -1, -1);
          MEMORY[0x24957ECC0](v10, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v15 += 16;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      a4 = v38;
      v13 = v36;
    }
LABEL_14:
    if (v13)
    {
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.endIndex.getter();
      if (!a3)
        return swift_bridgeObjectRelease();
    }
    else
    {
      a3 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!a3)
        return swift_bridgeObjectRelease();
    }
    if (a3 >= 1)
      break;
    __break(1u);
LABEL_28:
    a4 = v38;
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v23 = 0;
  v24 = a4 & 0xC000000000000001;
  do
  {
    if (v24)
      v25 = (id)MEMORY[0x24957E42C](v23, a4);
    else
      v25 = *(id *)(a4 + 8 * v23 + 32);
    v26 = v25;
    swift_bridgeObjectRetain_n();
    v27 = v26;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      v41 = v31;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      v32 = String.init<A>(reflecting:)();
      *(_QWORD *)(v30 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v41);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2475DF000, v28, v29, "%s trigger(s) mapped to type %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v31, -1, -1);
      v34 = v30;
      a4 = v38;
      MEMORY[0x24957ECC0](v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ++v23;
  }
  while (a3 != v23);
  return swift_bridgeObjectRelease();
}

unint64_t specialized SRSmartRepliesActionSieveComponent.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SRSmartRepliesActionSieveComponent.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesActionSieveComponent and conformance SRSmartRepliesActionSieveComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesActionSieveComponent and conformance SRSmartRepliesActionSieveComponent;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesActionSieveComponent and conformance SRSmartRepliesActionSieveComponent)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesActionSieveComponent, &type metadata for SRSmartRepliesActionSieveComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesActionSieveComponent and conformance SRSmartRepliesActionSieveComponent);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SRSmartRepliesActionSieveComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_247638E50 + 4 * byte_2476580F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_247638E84 + 4 * byte_2476580F0[v4]))();
}

uint64_t sub_247638E84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_247638E8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x247638E94);
  return result;
}

uint64_t sub_247638EA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x247638EA8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_247638EAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_247638EB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesActionSieveComponent()
{
  return &type metadata for SRSmartRepliesActionSieveComponent;
}

uint64_t destroy for ActionHandler()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ActionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ActionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ActionHandler(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionHandler(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionHandler()
{
  return &type metadata for ActionHandler;
}

uint64_t destroy for ActionHandlersSieveResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionHandlersSieveResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActionHandlersSieveResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ActionHandlersSieveResult(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionHandlersSieveResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionHandlersSieveResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionHandlersSieveResult()
{
  return &type metadata for ActionHandlersSieveResult;
}

char *SRSmartRepliesMessage.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesMessage.init(coder:)(a1);
}

char *SRSmartRepliesMessage.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  void *v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  void *v28;
  unsigned __int8 v29;
  unsigned __int8 *v30;
  void *v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  void *v34;
  id v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[24];
  uint64_t v51;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v41[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (char *)objc_msgSend(v1, sel_init);
  v7 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  v8 = objc_msgSend(a1, sel_decodeObjectForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v48, (uint64_t)v50);
  if (v51)
  {
    v9 = swift_dynamicCast();
    if (v9)
      v10 = v46;
    else
      v10 = 0;
    if (v9)
      v11 = v47;
    else
      v11 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v10 = 0;
    v11 = 0;
  }
  v12 = &v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_title];
  swift_beginAccess();
  *(_QWORD *)v12 = v10;
  *((_QWORD *)v12 + 1) = v11;
  swift_bridgeObjectRelease();
  v13 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765D040);
  v14 = objc_msgSend(a1, sel_decodeObjectForKey_, v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v48, (uint64_t)v50);
  if (v51)
  {
    v15 = swift_dynamicCast();
    if (v15)
      v16 = v44;
    else
      v16 = 0;
    if (v15)
      v17 = v45;
    else
      v17 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v16 = 0;
    v17 = 0;
  }
  v18 = &v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_senderIdentifier];
  swift_beginAccess();
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  swift_bridgeObjectRelease();
  v19 = (void *)MEMORY[0x24957DF1C](0x7972616D6D7573, 0xE700000000000000);
  v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v48, (uint64_t)v50);
  if (v51)
  {
    v21 = swift_dynamicCast();
    if (v21)
      v22 = v42;
    else
      v22 = 0;
    if (v21)
      v23 = v43;
    else
      v23 = 0;
  }
  else
  {
    outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v22 = 0;
    v23 = 0;
  }
  v24 = &v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_summary];
  swift_beginAccess();
  *(_QWORD *)v24 = v22;
  *((_QWORD *)v24 + 1) = v23;
  swift_bridgeObjectRelease();
  v25 = (void *)MEMORY[0x24957DF1C](0x6361427061547369, 0xE90000000000006BLL);
  v26 = objc_msgSend(a1, sel_decodeBoolForKey_, v25);

  v27 = (unsigned __int8 *)&v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isTapBack];
  swift_beginAccess();
  *v27 = v26;
  v28 = (void *)MEMORY[0x24957DF1C](0x65746F6D457369, 0xE700000000000000);
  v29 = objc_msgSend(a1, sel_decodeBoolForKey_, v28);

  v30 = (unsigned __int8 *)&v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isEmote];
  swift_beginAccess();
  *v30 = v29;
  v31 = (void *)MEMORY[0x24957DF1C](0x646165527369, 0xE600000000000000);
  v32 = objc_msgSend(a1, sel_decodeBoolForKey_, v31);

  v33 = (unsigned __int8 *)&v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isRead];
  swift_beginAccess();
  *v33 = v32;
  v34 = (void *)MEMORY[0x24957DF1C](0x746E655365746164, 0xE800000000000000);
  v35 = objc_msgSend(a1, sel_decodeObjectForKey_, v34);

  if (v35)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

  }
  else
  {

    v48 = 0u;
    v49 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v48, (uint64_t)v50);
  if (v51)
  {
    v36 = type metadata accessor for Date();
    v37 = swift_dynamicCast();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v5, v37 ^ 1u, 1, v36);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v38 = type metadata accessor for Date();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v5, 1, 1, v38);
  }
  v39 = (uint64_t)&v6[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_dateSent];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v5, v39);
  swift_endAccess();

  return v6;
}

uint64_t static SRSmartRepliesMessage.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t SRSmartRepliesMessage.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for SRSmartRepliesMessage();
  v7 = objc_msgSend(objc_allocWithZone(v6), sel_init);
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xA0))();
  v10 = (*(uint64_t (**)(uint64_t))((*v8 & *v7) + 0xA8))(v9);
  v11 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0xB8))(v10);
  v12 = (*(uint64_t (**)(uint64_t))((*v8 & *v7) + 0xC0))(v11);
  v13 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0xD0))(v12);
  v14 = (*(uint64_t (**)(uint64_t))((*v8 & *v7) + 0xD8))(v13);
  v15 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0xE8))(v14);
  v16 = (*(uint64_t (**)(_QWORD))((*v8 & *v7) + 0xF0))(v15 & 1);
  v17 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0x100))(v16);
  v18 = (*(uint64_t (**)(_QWORD))((*v8 & *v7) + 0x108))(v17 & 1);
  v19 = (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0x118))(v18);
  v20 = (*(uint64_t (**)(_QWORD))((*v8 & *v7) + 0x120))(v19 & 1);
  (*(void (**)(uint64_t))((*v8 & *v1) + 0x130))(v20);
  result = (*(uint64_t (**)(char *))((*v8 & *v7) + 0x138))(v5);
  a1[3] = v6;
  *a1 = v7;
  return result;
}

id SRSmartRepliesMessage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t type metadata accessor for SRSmartRepliesMessage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SRSmartRepliesMessage;
  if (!type metadata singleton initialization cache for SRSmartRepliesMessage)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall SRSmartRepliesMessage.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  void *v29;
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xE8))(v4);
  v9 = (void *)MEMORY[0x24957DF1C](0x6361427061547369, 0xE90000000000006BLL);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v8 & 1, v9);

  v10 = (*(uint64_t (**)(void))((*v7 & *v1) + 0x100))();
  v11 = (void *)MEMORY[0x24957DF1C](0x65746F6D457369, 0xE700000000000000);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v10 & 1, v11);

  v12 = (*(uint64_t (**)(void))((*v7 & *v1) + 0x118))();
  v13 = (void *)MEMORY[0x24957DF1C](0x646165527369, 0xE600000000000000);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v12 & 1, v13);

  v14 = (*(uint64_t (**)(void))((*v7 & *v1) + 0xA0))();
  if (v15)
  {
    v16 = MEMORY[0x24957DF1C](v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  v17 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  v18 = (*(uint64_t (**)(void))((*v7 & *v1) + 0xB8))();
  if (v19)
  {
    v20 = MEMORY[0x24957DF1C](v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v21 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765D040);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v20, v21);
  swift_unknownObjectRelease();

  v22 = (*(uint64_t (**)(void))((*v7 & *v1) + 0xD0))();
  if (v23)
  {
    v24 = MEMORY[0x24957DF1C](v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  v25 = (void *)MEMORY[0x24957DF1C](0x7972616D6D7573, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v24, v25);
  swift_unknownObjectRelease();

  (*(void (**)(void))((*v7 & *v1) + 0x130))();
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v6, 1, v26) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v26);
  }
  v29 = (void *)MEMORY[0x24957DF1C](0x746E655365746164, 0xE800000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v29);
  swift_unknownObjectRelease();

}

Swift::Int SRSmartRepliesMessage.hash.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  _BYTE v23[24];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v23[-v9];
  v11 = Hasher.init()();
  v12 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))(v11);
  if (v13)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v14 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(uint64_t))((*v12 & *v0) + 0xB8))(v14);
  if (v15)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v16 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(uint64_t))((*v12 & *v0) + 0xD0))(v16);
  if (v17)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    v18 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v19 = (*(uint64_t (**)(uint64_t))((*v12 & *v0) + 0xE8))(v18);
  Hasher._combine(_:)(v19 & 1);
  v20 = (*(uint64_t (**)(void))((*v12 & *v0) + 0x100))();
  Hasher._combine(_:)(v20 & 1);
  v21 = (*(uint64_t (**)(void))((*v12 & *v0) + 0x118))();
  Hasher._combine(_:)(v21 & 1);
  (*(void (**)(void))((*v12 & *v0) + 0x130))();
  outlined init with copy of Date?((uint64_t)v10, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v8, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE930]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  outlined destroy of Any?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v30 = v25;
  v31 = v26;
  v32 = v27;
  v28 = *(_OWORD *)&v23[8];
  v29 = v24;
  return Hasher.finalize()();
}

uint64_t SRSmartRepliesMessage.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t *v30;
  _BYTE *v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  _QWORD *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  _BYTE v66[24];
  uint64_t v67;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v60 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v60 - v18;
  outlined init with copy of Date?(a1, (uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v67)
  {
    v30 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v31 = v66;
    goto LABEL_12;
  }
  type metadata accessor for SRSmartRepliesMessage();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v62 = v10;
    v63 = v7;
    v60 = v4;
    v61 = v5;
    v20 = v65;
    v21 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v22 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA0))();
    v24 = v23;
    v25 = *(uint64_t (**)(void))((*v21 & *v20) + 0xA0);
    v64 = v20;
    v26 = v25();
    if (v24)
    {
      if (v27)
      {
        if (v22 == v26 && v24 == v27)
        {
          swift_bridgeObjectRelease();
          v26 = swift_bridgeObjectRelease();
        }
        else
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v26 = swift_bridgeObjectRelease();
          if ((v29 & 1) == 0)
          {

            goto LABEL_13;
          }
        }
LABEL_19:
        v34 = (*(uint64_t (**)(uint64_t))((*v21 & *v2) + 0xB8))(v26);
        v36 = v35;
        v37 = v64;
        v38 = (*(uint64_t (**)(void))((*v21 & *v64) + 0xB8))();
        v32 = v39;
        if (v36)
        {
          if (!v39)
            goto LABEL_32;
          if (v34 == v38 && v36 == v39)
          {
            swift_bridgeObjectRelease();
            v38 = swift_bridgeObjectRelease();
          }
          else
          {
            v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v38 = swift_bridgeObjectRelease();
            if ((v40 & 1) == 0)
              goto LABEL_39;
          }
        }
        else if (v39)
        {
          goto LABEL_34;
        }
        v41 = (*(uint64_t (**)(uint64_t))((*v21 & *v2) + 0xD0))(v38);
        v43 = v42;
        v44 = (*(uint64_t (**)(void))((*v21 & *v37) + 0xD0))();
        v32 = v45;
        if (v43)
        {
          v46 = v63;
          if (v45)
          {
            if (v41 == v44 && v43 == v45)
            {
              swift_bridgeObjectRelease();
              v44 = swift_bridgeObjectRelease();
              goto LABEL_36;
            }
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v44 = swift_bridgeObjectRelease();
            if ((v47 & 1) != 0)
            {
LABEL_36:
              v48 = (_QWORD *)MEMORY[0x24BEE4EA0];
              v49 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xE8))(v44);
              if (((v49 ^ (*(unsigned int (**)(void))((*v48 & *v37) + 0xE8))()) & 1) != 0)
                goto LABEL_39;
              v50 = (*(uint64_t (**)(void))((*v48 & *v2) + 0x100))();
              if (((v50 ^ (*(unsigned int (**)(void))((*v48 & *v37) + 0x100))()) & 1) != 0)
                goto LABEL_39;
              v51 = (*(uint64_t (**)(void))((*v48 & *v2) + 0x118))();
              if (((v51 ^ (*(unsigned int (**)(void))((*v48 & *v37) + 0x118))()) & 1) != 0)
                goto LABEL_39;
              v52 = (*(uint64_t (**)(void))((*v48 & *v2) + 0x130))();
              (*(void (**)(uint64_t))((*v48 & *v37) + 0x130))(v52);
              v53 = v37;
              v54 = (uint64_t)v62;
              v55 = (uint64_t)&v62[*(int *)(v8 + 48)];
              outlined init with copy of Date?((uint64_t)v19, (uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Date?);
              outlined init with copy of Date?((uint64_t)v17, v55, (uint64_t *)&demangling cache variable for type metadata for Date?);
              v56 = v60;
              v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
              if (v57(v54, 1, v60) == 1)
              {

                outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Date?);
                if (v57(v55, 1, v56) == 1)
                {
                  outlined destroy of Any?((uint64_t)v62, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  v32 = 1;
                  return v32 & 1;
                }
              }
              else
              {
                outlined init with copy of Date?(v54, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Date?);
                if (v57(v55, 1, v56) != 1)
                {
                  v58 = v61;
                  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v46, v55, v56);
                  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x24BDCE958]);
                  v32 = dispatch thunk of static Equatable.== infix(_:_:)();

                  v59 = *(void (**)(char *, uint64_t))(v58 + 8);
                  v59(v46, v56);
                  outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  v59(v14, v56);
                  outlined destroy of Any?(v54, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  return v32 & 1;
                }

                outlined destroy of Any?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined destroy of Any?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Date?);
                (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v56);
              }
              v30 = (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?);
              v31 = v62;
LABEL_12:
              outlined destroy of Any?((uint64_t)v31, v30);
              goto LABEL_13;
            }
LABEL_39:

            goto LABEL_13;
          }
LABEL_32:

          swift_bridgeObjectRelease();
          return v32 & 1;
        }
        v46 = v63;
        if (!v45)
          goto LABEL_36;
LABEL_34:

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    else if (!v27)
    {
      goto LABEL_19;
    }

    swift_bridgeObjectRelease();
  }
LABEL_13:
  v32 = 0;
  return v32 & 1;
}

uint64_t SRSmartRepliesMessage.title.getter()
{
  return SRSmartRepliesSuggestionRequest.context.getter(&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_title);
}

uint64_t SRSmartRepliesMessage.title.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.context.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_title);
}

uint64_t (*SRSmartRepliesMessage.title.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesMessage.senderIdentifier.getter()
{
  return SRSmartRepliesSuggestionRequest.context.getter(&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_senderIdentifier);
}

uint64_t SRSmartRepliesMessage.senderIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.context.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_senderIdentifier);
}

uint64_t (*SRSmartRepliesMessage.senderIdentifier.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.recipients.modify;
}

uint64_t SRSmartRepliesMessage.summary.getter()
{
  return SRSmartRepliesSuggestionRequest.context.getter(&OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_summary);
}

uint64_t SRSmartRepliesMessage.summary.setter(uint64_t a1, uint64_t a2)
{
  return SRSmartRepliesSuggestionRequest.context.setter(a1, a2, &OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_summary);
}

uint64_t (*SRSmartRepliesMessage.summary.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesMessage.isTapBack.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isTapBack);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesMessage.isTapBack.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isTapBack);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesMessage.isTapBack.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesMessage.isEmote.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isEmote);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesMessage.isEmote.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isEmote);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesMessage.isEmote.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesMessage.isRead.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isRead);
  swift_beginAccess();
  return *v1;
}

uint64_t SRSmartRepliesMessage.isRead.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isRead);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SRSmartRepliesMessage.isRead.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

uint64_t SRSmartRepliesMessage.dateSent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_dateSent;
  swift_beginAccess();
  return outlined init with copy of Date?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t SRSmartRepliesMessage.dateSent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_dateSent;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t key path setter for SRSmartRepliesMessage.dateSent : SRSmartRepliesMessage(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return (*(uint64_t (**)(char *))((*MEMORY[0x24BEE4EA0] & **a2) + 0x138))(v6);
}

uint64_t (*SRSmartRepliesMessage.dateSent.modify())()
{
  swift_beginAccess();
  return SRSmartRepliesSuggestionRequest.type.modify;
}

id SRSmartRepliesMessage.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;

  v1 = &v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_title];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_senderIdentifier];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_summary];
  *v3 = 0;
  v3[1] = 0;
  v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isTapBack] = 0;
  v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isEmote] = 0;
  v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_isRead] = 0;
  v4 = &v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesMessage_dateSent];
  v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for SRSmartRepliesMessage();
  return objc_msgSendSuper2(&v7, sel_init);
}

id SRSmartRepliesMessage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesMessage();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24763B428@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24763B468(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_24763B4BC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24763B4FC(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_24763B550@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD0))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24763B590(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD8);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_24763B5E4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24763B628(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xF0))(*a1);
}

uint64_t sub_24763B664@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x100))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24763B6A8(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x108))(*a1);
}

uint64_t sub_24763B6E4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x118))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24763B728(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x120))(*a1);
}

uint64_t sub_24763B764(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x130))();
}

uint64_t ObjC metadata update function for SRSmartRepliesMessage()
{
  return type metadata accessor for SRSmartRepliesMessage();
}

void type metadata completion function for SRSmartRepliesMessage()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for SRSmartRepliesMessage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.title.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.title.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.title.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.senderIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.senderIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.senderIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.summary.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.summary.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.summary.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isTapBack.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isTapBack.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isTapBack.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isEmote.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isEmote.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isEmote.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isRead.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isRead.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.isRead.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.dateSent.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.dateSent.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SRSmartRepliesMessage.dateSent.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

int64_t specialized Collection.prefix(_:)(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

BOOL static RakeTokenStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void RakeTokenStyle.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int RakeTokenStyle.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  _BOOL4 v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  double v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  char v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  char v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  uint64_t *v165;
  Swift::Int v166;
  char *v167;
  Swift::Int v168;
  Swift::Int v169;
  Swift::Int v170;
  Swift::Int v171;
  Swift::Int v172;
  uint64_t v173;
  double *__dst;
  Swift::Int v175;
  uint64_t v176;
  double *v177;
  uint64_t v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  Swift::Int v182;
  uint64_t v183;
  uint64_t v184;

  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_257;
    if (v4)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
    return result;
  }
  v166 = result;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_265;
  v169 = v4;
  v165 = a1;
  v183 = v2;
  if (v4 < 2)
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v173 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v69 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_218:
      if (v69 >= 2)
      {
        v157 = *v165;
        do
        {
          v158 = v69 - 2;
          if (v69 < 2)
            goto LABEL_250;
          if (!v157)
            goto LABEL_264;
          v159 = v9;
          v160 = v9 + 32;
          v161 = *(_QWORD *)&v9[16 * v158 + 32];
          v162 = *(_QWORD *)&v9[16 * v69 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v157 + 24 * v161), (double *)(v157 + 24 * *(_QWORD *)&v160[16 * v69 - 16]), v157 + 24 * v162, __dst, (uint64_t)a2);
          if (v183)
            goto LABEL_231;
          if (v162 < v161)
            goto LABEL_251;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v159 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v159);
          if (v158 >= *((_QWORD *)v159 + 2))
            goto LABEL_252;
          v163 = &v159[16 * v158 + 32];
          *(_QWORD *)v163 = v161;
          *((_QWORD *)v163 + 1) = v162;
          v164 = *((_QWORD *)v159 + 2);
          if (v69 > v164)
            goto LABEL_253;
          v9 = v159;
          memmove(&v159[16 * v69 + 16], &v159[16 * v69 + 32], 16 * (v164 - v69));
          *((_QWORD *)v159 + 2) = v164 - 1;
          v69 = v164 - 1;
        }
        while (v164 > 2);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v173 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Double));
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v173 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v12 = v4;
  v176 = *a1;
  while (1)
  {
    v167 = v9;
    v13 = v10 + 1;
    v175 = v10;
    if (v10 + 1 >= v12)
    {
      v18 = v183;
      goto LABEL_90;
    }
    v14 = v11 + 24 * v13;
    v15 = *(double *)(v14 + 16);
    v16 = v11 + 24 * v10;
    v17 = *(double *)(v16 + 16);
    v18 = v183;
    if (v15 == v17)
    {
      v19 = *a2;
      v20 = (*a2)[2];
      if (v20)
      {
        v170 = v10 + 1;
        v21 = *(_QWORD *)v14;
        v22 = *(_QWORD *)(v14 + 8);
        v24 = *(_QWORD *)v16;
        v23 = *(_QWORD *)(v16 + 8);
        v25 = v19[4] == *(_QWORD *)v14 && v19[5] == v22;
        if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v146 = 0;
          v147 = v19 + 7;
          v148 = 1;
          while (v20 != v148)
          {
            ++v146;
            if (*(v147 - 1) == v21 && *v147 == v22)
            {
              v26 = v146;
              goto LABEL_22;
            }
            v26 = v148;
            v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v148 = v26 + 1;
            v147 += 2;
            if ((v150 & 1) != 0)
              goto LABEL_22;
          }
        }
        v26 = 0;
LABEL_22:
        if (v19[4] == v24 && v19[5] == v23)
        {
          v28 = 0;
          v18 = v183;
          v12 = v169;
          v13 = v170;
          v11 = v176;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v28 = 0;
            if (v20 <= 1)
              v151 = 1;
            else
              v151 = v20;
            v152 = v19 + 7;
            v153 = 1;
            while (v20 != v153)
            {
              v154 = v153;
              if (v151 == v153)
                goto LABEL_255;
              ++v28;
              if (*(v152 - 1) == v24 && *v152 == v23)
                goto LABEL_28;
              v156 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v153 = v154 + 1;
              v152 += 2;
              if ((v156 & 1) != 0)
              {
                v28 = v154;
                goto LABEL_28;
              }
            }
          }
          v28 = 0;
LABEL_28:
          v12 = v169;
          v13 = v170;
          v11 = v176;
          v18 = v183;
        }
      }
      else
      {
        v28 = 0;
        v26 = 0;
      }
      v29 = v26 < v28;
      v10 = v175;
    }
    else
    {
      v29 = v17 < v15;
    }
    v30 = v10 + 2;
    if (v10 + 2 < v12)
      break;
    v31 = v10 + 2;
LABEL_78:
    if (v29)
      goto LABEL_79;
LABEL_89:
    v13 = v31;
    v10 = v175;
LABEL_90:
    v183 = v18;
    if (v13 >= v12)
      goto LABEL_98;
    if (__OFSUB__(v13, v10))
      goto LABEL_256;
    if (v13 - v10 >= v166)
      goto LABEL_98;
    v66 = v10 + v166;
    if (__OFADD__(v10, v166))
      goto LABEL_258;
    if (v66 >= v12)
      v66 = v12;
    if (v66 < v10)
    {
LABEL_259:
      __break(1u);
      goto LABEL_260;
    }
    v168 = v66;
    if (v13 == v66)
    {
LABEL_98:
      if (v13 < v10)
        goto LABEL_254;
    }
    else
    {
      do
      {
        v119 = v11 + 24 * v13;
        v120 = *(_QWORD *)v119;
        v121 = *(_QWORD *)(v119 + 8);
        v122 = *(double *)(v119 + 16);
        v172 = v13;
        while (1)
        {
          v123 = v11 + 24 * v13;
          v124 = v123 - 24;
          v125 = *(_QWORD *)(v123 - 24);
          v126 = (double *)(v123 - 8);
          v127 = *(double *)(v123 - 8);
          if (v122 != v127)
            break;
          v128 = *a2;
          v129 = (*a2)[2];
          if (!v129)
            goto LABEL_146;
          v130 = *(_QWORD *)(v123 - 16);
          v131 = v128[4] == v120 && v128[5] == v121;
          v180 = v123 - 24;
          v182 = v13;
          v177 = (double *)(v123 - 8);
          v178 = v11 + 24 * v13;
          if (!v131 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v141 = 0;
            v142 = v128 + 7;
            v143 = 1;
            while (v129 != v143)
            {
              ++v141;
              if (*(v142 - 1) == v120 && *v142 == v121)
              {
                v132 = v141;
                goto LABEL_156;
              }
              v132 = v143;
              v145 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v143 = v132 + 1;
              v142 += 2;
              if ((v145 & 1) != 0)
                goto LABEL_156;
            }
          }
          v132 = 0;
LABEL_156:
          v133 = v128[4] == v125 && v128[5] == v130;
          if (v133 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v10 = v175;
            v11 = v176;
            goto LABEL_146;
          }
          v134 = 0;
          if (v129 <= 1)
            v135 = 1;
          else
            v135 = v129;
          v136 = v128 + 7;
          v137 = 1;
          while (1)
          {
            if (v129 == v137)
            {
              v138 = 0;
              goto LABEL_177;
            }
            v138 = v137;
            if (v135 == v137)
            {
              __break(1u);
LABEL_231:
              v117 = v173;
LABEL_232:
              swift_bridgeObjectRelease();
              *(_QWORD *)(v117 + 16) = 0;
              return swift_bridgeObjectRelease();
            }
            ++v134;
            if (*(v136 - 1) == v125 && *v136 == v130)
              break;
            v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v137 = v138 + 1;
            v136 += 2;
            if ((v140 & 1) != 0)
              goto LABEL_177;
          }
          v138 = v134;
LABEL_177:
          v10 = v175;
          v11 = v176;
          v124 = v180;
          v13 = v182;
          v126 = v177;
          v123 = v178;
          if (v132 >= v138)
            goto LABEL_146;
LABEL_178:
          if (!v11)
            goto LABEL_261;
          --v13;
          v120 = *(_QWORD *)v123;
          v121 = *(_QWORD *)(v123 + 8);
          v122 = *(double *)(v123 + 16);
          *(_OWORD *)v123 = *(_OWORD *)v124;
          *(_QWORD *)(v123 + 16) = *(_QWORD *)(v124 + 16);
          *(_QWORD *)v124 = v120;
          *(_QWORD *)(v124 + 8) = v121;
          *v126 = v122;
          if (v13 == v10)
            goto LABEL_146;
        }
        if (v127 < v122)
          goto LABEL_178;
LABEL_146:
        v13 = v172 + 1;
      }
      while (v172 + 1 != v168);
      v13 = v168;
      if (v168 < v10)
        goto LABEL_254;
    }
    v171 = v13;
    v9 = v167;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v167 + 2) + 1, 1, v167);
    v68 = *((_QWORD *)v9 + 2);
    v67 = *((_QWORD *)v9 + 3);
    v69 = v68 + 1;
    v11 = v176;
    if (v68 >= v67 >> 1)
    {
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v68 + 1, 1, v9);
      v11 = v176;
    }
    *((_QWORD *)v9 + 2) = v69;
    v70 = v9 + 32;
    v71 = &v9[16 * v68 + 32];
    *(_QWORD *)v71 = v175;
    *((_QWORD *)v71 + 1) = v171;
    if (v68)
    {
      while (1)
      {
        v72 = v69 - 1;
        if (v69 >= 4)
        {
          v77 = &v70[16 * v69];
          v78 = *((_QWORD *)v77 - 8);
          v79 = *((_QWORD *)v77 - 7);
          v83 = __OFSUB__(v79, v78);
          v80 = v79 - v78;
          if (v83)
            goto LABEL_239;
          v82 = *((_QWORD *)v77 - 6);
          v81 = *((_QWORD *)v77 - 5);
          v83 = __OFSUB__(v81, v82);
          v75 = v81 - v82;
          v76 = v83;
          if (v83)
            goto LABEL_240;
          v84 = v69 - 2;
          v85 = &v70[16 * v69 - 32];
          v87 = *(_QWORD *)v85;
          v86 = *((_QWORD *)v85 + 1);
          v83 = __OFSUB__(v86, v87);
          v88 = v86 - v87;
          if (v83)
            goto LABEL_242;
          v83 = __OFADD__(v75, v88);
          v89 = v75 + v88;
          if (v83)
            goto LABEL_245;
          if (v89 >= v80)
          {
            v107 = &v70[16 * v72];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v83 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            if (v83)
              goto LABEL_249;
            v100 = v75 < v110;
            goto LABEL_135;
          }
        }
        else
        {
          if (v69 != 3)
          {
            v101 = *((_QWORD *)v9 + 4);
            v102 = *((_QWORD *)v9 + 5);
            v83 = __OFSUB__(v102, v101);
            v94 = v102 - v101;
            v95 = v83;
            goto LABEL_129;
          }
          v74 = *((_QWORD *)v9 + 4);
          v73 = *((_QWORD *)v9 + 5);
          v83 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          v76 = v83;
        }
        if ((v76 & 1) != 0)
          goto LABEL_241;
        v84 = v69 - 2;
        v90 = &v70[16 * v69 - 32];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v93 = __OFSUB__(v91, v92);
        v94 = v91 - v92;
        v95 = v93;
        if (v93)
          goto LABEL_244;
        v96 = &v70[16 * v72];
        v98 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        v83 = __OFSUB__(v97, v98);
        v99 = v97 - v98;
        if (v83)
          goto LABEL_247;
        if (__OFADD__(v94, v99))
          goto LABEL_248;
        if (v94 + v99 >= v75)
        {
          v100 = v75 < v99;
LABEL_135:
          if (v100)
            v72 = v84;
          goto LABEL_137;
        }
LABEL_129:
        if ((v95 & 1) != 0)
          goto LABEL_243;
        v103 = &v70[16 * v72];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v83 = __OFSUB__(v104, v105);
        v106 = v104 - v105;
        if (v83)
          goto LABEL_246;
        if (v106 < v94)
          goto LABEL_191;
LABEL_137:
        v111 = v72 - 1;
        if (v72 - 1 >= v69)
        {
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
          goto LABEL_259;
        }
        if (!v11)
          goto LABEL_262;
        v112 = v9;
        v113 = &v70[16 * v111];
        v114 = *(_QWORD *)v113;
        v115 = &v70[16 * v72];
        v116 = *((_QWORD *)v115 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 24 * *(_QWORD *)v113), (double *)(v11 + 24 * *(_QWORD *)v115), v11 + 24 * v116, __dst, (uint64_t)a2);
        v117 = v173;
        if (v183)
          goto LABEL_232;
        if (v116 < v114)
          goto LABEL_235;
        if (v72 > *((_QWORD *)v112 + 2))
          goto LABEL_236;
        *(_QWORD *)v113 = v114;
        *(_QWORD *)&v70[16 * v111 + 8] = v116;
        v118 = *((_QWORD *)v112 + 2);
        if (v72 >= v118)
          goto LABEL_237;
        v9 = v112;
        v69 = v118 - 1;
        memmove(&v70[16 * v72], v115 + 16, 16 * (v118 - 1 - v72));
        *((_QWORD *)v112 + 2) = v118 - 1;
        v11 = v176;
        if (v118 <= 2)
          goto LABEL_191;
      }
    }
    v69 = 1;
LABEL_191:
    v12 = v169;
    v10 = v171;
    if (v171 >= v169)
      goto LABEL_218;
  }
  v179 = v29;
  while (1)
  {
    v32 = v11 + 24 * v30;
    v33 = *(double *)(v32 + 16);
    v34 = v11 + 24 * v13;
    v35 = *(double *)(v34 + 16);
    if (v33 != v35)
    {
      if (v29 != v35 < v33)
        break;
      goto LABEL_37;
    }
    v36 = *a2;
    v37 = (*a2)[2];
    if (v37)
    {
      v38 = *(_QWORD *)v32;
      v39 = *(_QWORD *)(v32 + 8);
      v40 = *(_QWORD *)(v34 + 8);
      v41 = v36[4] == *(_QWORD *)v32 && v36[5] == v39;
      v181 = *(_QWORD *)v34;
      v184 = v18;
      if (!v41 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v45 = 0;
        v46 = v36 + 7;
        v47 = 1;
        while (v37 != v47)
        {
          ++v45;
          if (*(v46 - 1) == v38 && *v46 == v39)
          {
            v42 = v45;
            goto LABEL_46;
          }
          v42 = v47;
          v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v47 = v42 + 1;
          v46 += 2;
          if ((v49 & 1) != 0)
            goto LABEL_46;
        }
      }
      v42 = 0;
LABEL_46:
      v43 = v36[4] == v181 && v36[5] == v40;
      if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v44 = 0;
        if (v37 <= 1)
          v50 = 1;
        else
          v50 = v37;
        v51 = v36 + 7;
        v52 = 1;
        while (v37 != v52)
        {
          v53 = v52;
          if (v50 == v52)
            goto LABEL_238;
          ++v44;
          if (*(v51 - 1) == v181 && *v51 == v40)
            goto LABEL_52;
          v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v52 = v53 + 1;
          v51 += 2;
          if ((v55 & 1) != 0)
          {
            v44 = v53;
            goto LABEL_52;
          }
        }
      }
      v44 = 0;
LABEL_52:
      v18 = v184;
      v11 = v176;
      v29 = v179;
    }
    else
    {
      v44 = 0;
      v42 = 0;
    }
    v12 = v169;
    if (v29 != v42 < v44)
      break;
LABEL_37:
    v31 = v30 + 1;
    v13 = v30;
    v30 = v31;
    if (v31 >= v12)
      goto LABEL_78;
  }
  v31 = v30;
  if (!v29)
    goto LABEL_89;
LABEL_79:
  v10 = v175;
  if (v31 >= v175)
  {
    if (v175 < v31)
    {
      v56 = 24 * v31;
      v57 = 24 * v175;
      v58 = v31;
      v59 = v175;
      do
      {
        if (v59 != --v58)
        {
          if (!v11)
            goto LABEL_263;
          v60 = v11 + v57;
          v61 = v11 + v56;
          v62 = *(_QWORD *)(v11 + v57);
          v63 = *(_QWORD *)(v11 + v57 + 8);
          v64 = *(_QWORD *)(v11 + v57 + 16);
          v65 = *(_QWORD *)(v11 + v56 - 8);
          *(_OWORD *)v60 = *(_OWORD *)(v11 + v56 - 24);
          *(_QWORD *)(v60 + 16) = v65;
          *(_QWORD *)(v61 - 24) = v62;
          *(_QWORD *)(v61 - 16) = v63;
          *(_QWORD *)(v61 - 8) = v64;
        }
        ++v59;
        v56 -= 24;
        v57 += 24;
      }
      while (v59 < v58);
    }
    v13 = v31;
    goto LABEL_90;
  }
LABEL_260:
  __break(1u);
LABEL_261:
  __break(1u);
LABEL_262:
  __break(1u);
LABEL_263:
  __break(1u);
LABEL_264:
  __break(1u);
LABEL_265:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  double *v37;

  v34 = result;
  if (a3 != a2)
  {
    v5 = *a4;
    v32 = *a4;
LABEL_5:
    v6 = (double *)(v5 + 24 * a3);
    v7 = *v6;
    v8 = *((_QWORD *)v6 + 1);
    v9 = v6[2];
    v31 = a3;
    while (1)
    {
      v10 = (double *)(v5 + 24 * a3);
      v11 = *((_QWORD *)v10 - 3);
      v36 = (uint64_t *)(v10 - 3);
      v37 = v10;
      v12 = *(v10 - 1);
      if (v9 == v12)
      {
        v13 = *a5;
        v14 = (*a5)[2];
        if (!v14)
          goto LABEL_4;
        v15 = *((_QWORD *)v10 - 2);
        v16 = v13[4] == *(_QWORD *)&v7 && v13[5] == v8;
        v35 = a3;
        if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v25 = 0;
          v26 = v13 + 7;
          v27 = 1;
          while (v14 != v27)
          {
            ++v25;
            if (*(v26 - 1) == *(_QWORD *)&v7 && *v26 == v8)
            {
              v17 = v25;
              goto LABEL_14;
            }
            v17 = v27;
            v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v27 = v17 + 1;
            v26 += 2;
            if ((v29 & 1) != 0)
              goto LABEL_14;
          }
        }
        v17 = 0;
LABEL_14:
        result = v13[4];
        v18 = result == v11 && v13[5] == v15;
        v5 = v32;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_4:
          a3 = v31 + 1;
          if (v31 + 1 == a2)
            return result;
          goto LABEL_5;
        }
        v19 = 0;
        v20 = v14 <= 1 ? 1 : v14;
        v21 = v13 + 7;
        v22 = 1;
        while (1)
        {
          if (v14 == v22)
          {
            v23 = 0;
            goto LABEL_35;
          }
          v23 = v22;
          if (v20 == v22)
          {
            __break(1u);
            goto LABEL_49;
          }
          ++v19;
          result = *(v21 - 1);
          if (result == v11 && *v21 == v15)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          v22 = v23 + 1;
          v21 += 2;
          if ((result & 1) != 0)
            goto LABEL_35;
        }
        v23 = v19;
LABEL_35:
        a3 = v35;
        if (v17 >= v23)
          goto LABEL_4;
      }
      else if (v12 >= v9)
      {
        goto LABEL_4;
      }
      if (!v5)
        break;
      --a3;
      v7 = *v37;
      v8 = *((_QWORD *)v37 + 1);
      v9 = v37[2];
      *(_OWORD *)v37 = *(_OWORD *)v36;
      *((_QWORD *)v37 + 2) = v36[2];
      *(double *)v36 = v7;
      v36[1] = v8;
      *(v37 - 1) = v9;
      if (a3 == v34)
        goto LABEL_4;
    }
LABEL_49:
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst, uint64_t a5)
{
  double *v5;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  double v14;
  _QWORD *v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  double *v32;
  double *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v41;
  BOOL v42;
  __int128 v43;
  double *v44;
  char *v45;
  double *v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  __int128 v73;
  uint64_t result;
  char *v75;
  uint64_t v77;
  double *v79;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  double *v87;
  double *v88;
  char *v89;
  double *v90;
  double *v91;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v91 = __src;
  v90 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -23)
      goto LABEL_121;
    v44 = (double *)a3;
    if (__dst != a2 || &a2[3 * v11] <= __dst)
      memmove(__dst, a2, 24 * v11);
    v45 = (char *)&v5[3 * v11];
    v89 = v45;
    v91 = v6;
    if (v7 >= v6 || v10 < 24)
    {
LABEL_118:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v91, (const void **)&v90, &v89);
      return 1;
    }
    v46 = v6;
    v81 = v5;
    v83 = v7;
    while (1)
    {
      v88 = v6;
      v47 = v45 - 24;
      v48 = *((_QWORD *)v45 - 3);
      v49 = *((double *)v45 - 1);
      v51 = *((_QWORD *)v46 - 3);
      v46 -= 3;
      v50 = v51;
      v52 = v46[2];
      if (v49 == v52)
        break;
      v59 = (unint64_t)(v44 - 3);
      if (v52 >= v49)
        goto LABEL_112;
LABEL_83:
      if (v44 != v88 || v59 >= (unint64_t)v88)
      {
        v60 = *(_OWORD *)v46;
        *(double *)(v59 + 16) = v46[2];
        *(_OWORD *)v59 = v60;
      }
      v91 = v46;
      if (v46 <= v7)
        goto LABEL_118;
LABEL_117:
      v6 = v46;
      v44 = (double *)v59;
      if (v45 <= (char *)v5)
        goto LABEL_118;
    }
    v86 = v50;
    v53 = *(_QWORD **)a5;
    v54 = *(_QWORD *)(*(_QWORD *)a5 + 16);
    if (!v54)
      goto LABEL_81;
    v75 = v45;
    v55 = *((_QWORD *)v45 - 2);
    v84 = *((_QWORD *)v46 + 1);
    v56 = v53[4] == v48 && v53[5] == v55;
    v79 = v44;
    if (!v56 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v61 = 0;
      v62 = v53 + 7;
      v63 = 1;
      while (v54 != v63)
      {
        ++v61;
        if (*(v62 - 1) == v48 && *v62 == v55)
        {
          v57 = v61;
          goto LABEL_76;
        }
        v57 = v63;
        v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v63 = v57 + 1;
        v62 += 2;
        if ((v65 & 1) != 0)
          goto LABEL_76;
      }
    }
    v57 = 0;
LABEL_76:
    v58 = v53[4] == v86 && v53[5] == v84;
    v44 = v79;
    v5 = v81;
    v45 = v75;
    if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_81:
      v59 = (unint64_t)(v44 - 3);
      v7 = v83;
    }
    else
    {
      v66 = 0;
      if (v54 <= 1)
        v67 = 1;
      else
        v67 = v54;
      v77 = v67;
      v68 = v53 + 7;
      v69 = 1;
      while (1)
      {
        if (v54 == v69)
        {
          v70 = 0;
          goto LABEL_111;
        }
        v70 = v69;
        if (v77 == v69)
        {
          __break(1u);
LABEL_120:
          __break(1u);
          goto LABEL_121;
        }
        ++v66;
        if (*(v68 - 1) == v86 && *v68 == v84)
          break;
        v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v69 = v70 + 1;
        v68 += 2;
        if ((v72 & 1) != 0)
          goto LABEL_111;
      }
      v70 = v66;
LABEL_111:
      v59 = (unint64_t)(v79 - 3);
      v42 = v57 < v70;
      v7 = v83;
      v45 = v75;
      if (v42)
        goto LABEL_83;
    }
LABEL_112:
    v89 = v47;
    v46 = v88;
    if (v44 < (double *)v45 || v59 >= (unint64_t)v45 || v44 != (double *)v45)
    {
      v73 = *(_OWORD *)v47;
      *(_QWORD *)(v59 + 16) = *((_QWORD *)v47 + 2);
      *(_OWORD *)v59 = v73;
    }
    v45 = v47;
    if (v88 <= v7)
      goto LABEL_118;
    goto LABEL_117;
  }
  if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = (char *)&v5[3 * v9];
    v89 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v85 = (char *)&v5[3 * v9];
      while (1)
      {
        v80 = v5;
        v82 = v7;
        v13 = v6[2];
        v14 = v5[2];
        if (v13 == v14)
        {
          v15 = *(_QWORD **)a5;
          v16 = *(_QWORD *)(*(_QWORD *)a5 + 16);
          if (!v16)
            goto LABEL_54;
          v17 = v6;
          v18 = *(_QWORD *)v6;
          v87 = v17;
          v19 = *((_QWORD *)v17 + 1);
          v20 = *(_QWORD *)v5;
          v21 = *((_QWORD *)v80 + 1);
          v22 = v15[4] == v18 && v15[5] == v19;
          if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v37 = 0;
            v38 = v15 + 7;
            v39 = 1;
            while (v16 != v39)
            {
              ++v37;
              if (*(v38 - 1) == v18 && *v38 == v19)
              {
                v23 = v37;
                goto LABEL_17;
              }
              v23 = v39;
              v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v39 = v23 + 1;
              v38 += 2;
              if ((v41 & 1) != 0)
                goto LABEL_17;
            }
          }
          v23 = 0;
LABEL_17:
          v24 = v15[4] == v20 && v15[5] == v21;
          v12 = v85;
          v6 = v87;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_54;
          v25 = 0;
          v26 = v16 <= 1 ? 1 : v16;
          v27 = v15 + 7;
          v28 = 1;
          while (1)
          {
            if (v16 == v28)
            {
              v29 = 0;
              goto LABEL_53;
            }
            v29 = v28;
            if (v26 == v28)
              goto LABEL_120;
            ++v25;
            if (*(v27 - 1) == v20 && *v27 == v21)
              break;
            v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v28 = v29 + 1;
            v27 += 2;
            if ((v31 & 1) != 0)
              goto LABEL_53;
          }
          v29 = v25;
LABEL_53:
          v42 = v23 < v29;
          v12 = v85;
          if (!v42)
          {
LABEL_54:
            v33 = v82;
            if (v82 != v80)
            {
              v43 = *(_OWORD *)v80;
              v82[2] = v80[2];
              *(_OWORD *)v82 = v43;
            }
            v5 = v80 + 3;
            v90 = v80 + 3;
            v32 = v6;
            goto LABEL_57;
          }
        }
        else if (v14 >= v13)
        {
          goto LABEL_54;
        }
        v32 = v6 + 3;
        v33 = v82;
        if (v82 >= v6 && v82 < v32)
        {
          v34 = a3;
          if (v82 != v6)
          {
            v35 = *(_OWORD *)v6;
            v82[2] = v6[2];
            *(_OWORD *)v82 = v35;
          }
          v5 = v80;
          goto LABEL_58;
        }
        v36 = *(_OWORD *)v6;
        v82[2] = v6[2];
        *(_OWORD *)v82 = v36;
        v5 = v80;
LABEL_57:
        v34 = a3;
LABEL_58:
        v7 = v33 + 3;
        if (v5 < (double *)v12)
        {
          v6 = v32;
          if ((unint64_t)v32 < v34)
            continue;
        }
        v91 = v7;
        goto LABEL_118;
      }
    }
    goto LABEL_118;
  }
LABEL_121:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v4 = 0;
  v24 = result + 32;
  v5 = a2 + 56;
  v23 = MEMORY[0x24BEE4AF8];
  do
  {
    if (v4 <= v2)
      v6 = v2;
    else
      v6 = v4;
    v25 = v6;
    while (1)
    {
      if (v4 == v25)
      {
        __break(1u);
        return result;
      }
      v7 = (uint64_t *)(v24 + 16 * v4);
      v9 = *v7;
      v8 = v7[1];
      ++v4;
      if (!*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        goto LABEL_25;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(a2 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_25;
      v13 = *(_QWORD *)(a2 + 48);
      v14 = (_QWORD *)(v13 + 16 * v12);
      v15 = *v14 == v9 && v14[1] == v8;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
LABEL_7:
      result = swift_bridgeObjectRelease();
      if (v4 == v2)
        return v23;
    }
    v16 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v16;
      if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        break;
      v17 = (_QWORD *)(v13 + 16 * v12);
      v18 = *v17 == v9 && v17[1] == v8;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
LABEL_25:
    v19 = v23;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v19 = v23;
    }
    v21 = *(_QWORD *)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 24);
    if (v21 >= v20 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      v19 = v23;
    }
    *(_QWORD *)(v19 + 16) = v21 + 1;
    v23 = v19;
    v22 = v19 + 16 * v21;
    *(_QWORD *)(v22 + 32) = v9;
    *(_QWORD *)(v22 + 40) = v8;
  }
  while (v4 != v2);
  return v23;
}

uint64_t specialized StringRake.rankedKeywords(from:style:maxCount:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  double v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  double v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t result;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  int64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;

  v94 = a4;
  v5 = type metadata accessor for CharacterSet();
  v96 = *(_QWORD *)(v5 - 8);
  v97 = (_QWORD *)v5;
  MEMORY[0x24BDAC7A8](v5);
  v95 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a3;
  v8 = lookupStopWords(forLanguageCode:)(28261, 0xE200000000000000);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v8)
    return (uint64_t)v9;
  v10 = v8;
  if (v7)
  {
    if (v7 == 1)
      String.nounLikeTokens(includePronouns:)();
    else
      String.properNouns()();
  }
  else
  {
    v11 = String.tokens()();
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v99 = v9;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
      v13 = v99;
      v14 = v11 + 40;
      do
      {
        swift_bridgeObjectRetain();
        v15 = String.lemmatized()();
        swift_bridgeObjectRelease();
        v99 = v13;
        v17 = v13[2];
        v16 = v13[3];
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v13 = v99;
        }
        v14 += 16;
        v13[2] = v17 + 1;
        *(Swift::String *)&v13[2 * v17 + 4] = v15;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
  }
  v18 = swift_bridgeObjectRetain();
  v19 = (uint64_t *)specialized _ArrayProtocol.filter(_:)(v18, v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v101 = v19;
  v20 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v21 = (_QWORD *)v19[2];
  if (v21)
  {
    swift_bridgeObjectRetain();
    v93 = v19;
    v22 = v19 + 5;
    while (1)
    {
      v98 = v21;
      v24 = (_QWORD *)*(v22 - 1);
      v25 = *v22;
      swift_bridgeObjectRetain_n();
      v26 = swift_bridgeObjectRetain();
      v27 = specialized _ArrayProtocol.filter(_:)(v26, (uint64_t)v24, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRelease();
      v99 = v24;
      v100 = v25;
      v29 = v95;
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v30 = StringProtocol.components(separatedBy:)();
      (*(void (**)(char *, _QWORD *))(v96 + 8))(v29, v97);
      v31 = *(_QWORD *)(v30 + 16);
      swift_bridgeObjectRelease();
      v32 = v20;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v99 = v32;
      v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, v25);
      v36 = v32[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        break;
      v39 = v34;
      if (v32[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, v25);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_66;
        v35 = v40;
      }
      v42 = (double)v28 / (double)v31;
      v20 = v99;
      if ((v39 & 1) != 0)
      {
        *(double *)(v99[7] + 8 * v35) = v42;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v35, (uint64_t)v24, v25, v99, v42);
        swift_bridgeObjectRetain();
      }
      v23 = v98;
      v22 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = (_QWORD *)((char *)v23 - 1);
      if (!v21)
      {
        v92 = 0;
        swift_bridgeObjectRelease();
        v19 = v101;
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  v92 = 0;
LABEL_26:
  v98 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v43 = v19[2];
  if (v43)
  {
    swift_bridgeObjectRetain();
    v93 = v19;
    v44 = v19 + 5;
    while (1)
    {
      v45 = (_QWORD *)*(v44 - 1);
      v46 = *v44;
      v47 = v20[2];
      swift_bridgeObjectRetain();
      v48 = 0.0;
      if (v47)
      {
        v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45, v46);
        if ((v50 & 1) != 0)
          v48 = *(double *)(v20[7] + 8 * v49);
      }
      v51 = v20;
      v99 = v45;
      v100 = v46;
      v52 = v95;
      static CharacterSet.whitespacesAndNewlines.getter();
      lazy protocol witness table accessor for type String and conformance String();
      v53 = StringProtocol.components(separatedBy:)();
      (*(void (**)(char *, _QWORD *))(v96 + 8))(v52, v97);
      v54 = *(_QWORD *)(v53 + 16);
      swift_bridgeObjectRelease();
      v55 = v98;
      v56 = swift_isUniquelyReferenced_nonNull_native();
      v99 = v55;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45, v46);
      v59 = v55[2];
      v60 = (v57 & 1) == 0;
      v61 = v59 + v60;
      if (__OFADD__(v59, v60))
        break;
      v62 = v57;
      if (v55[3] >= v61)
      {
        if ((v56 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, v56);
        v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45, v46);
        if ((v62 & 1) != (v64 & 1))
          goto LABEL_66;
        v58 = v63;
      }
      v65 = v48 * (double)v54;
      v66 = v99;
      v98 = v99;
      if ((v62 & 1) != 0)
      {
        *(double *)(v99[7] + 8 * v58) = v65;
        v20 = v51;
      }
      else
      {
        v99[(v58 >> 6) + 8] |= 1 << v58;
        v67 = (_QWORD *)(v66[6] + 16 * v58);
        *v67 = v45;
        v67[1] = v46;
        *(double *)(v66[7] + 8 * v58) = v65;
        v68 = v66[2];
        v69 = __OFADD__(v68, 1);
        v70 = v68 + 1;
        if (v69)
          goto LABEL_63;
        v20 = v51;
        v66[2] = v70;
        swift_bridgeObjectRetain();
      }
      v44 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v43)
      {
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_43:
  v71 = (uint64_t)v98;
  swift_bridgeObjectRetain_n();
  v72 = specialized _copyCollectionToContiguousArray<A>(_:)(v71);
  swift_bridgeObjectRelease();
  v99 = v72;
  v73 = v92;
  specialized MutableCollection<>.sort(by:)(&v99, &v101);
  if (!v73)
  {
    swift_bridgeObjectRelease();
    if (v94)
      v74 = v94;
    else
      v74 = 10;
    specialized Collection.prefix(_:)(v74, (uint64_t)v99);
    v78 = v77 >> 1;
    v79 = (v77 >> 1) - v76;
    if (__OFSUB__(v77 >> 1, v76))
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_67;
    }
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v79)
    {
      v80 = v75;
      v81 = v76;
      v99 = (_QWORD *)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79 & ~(v79 >> 63), 0);
      if (v79 < 0)
        goto LABEL_65;
      v97 = v20;
      v9 = v99;
      if (v81 <= v78)
        v82 = v78;
      else
        v82 = v81;
      v83 = v82 - v81;
      v84 = (uint64_t *)(v80 + 24 * v81 + 8);
      while (v83)
      {
        v86 = *(v84 - 1);
        v85 = *v84;
        v99 = v9;
        v88 = v9[2];
        v87 = v9[3];
        swift_bridgeObjectRetain();
        if (v88 >= v87 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
          v9 = v99;
        }
        v9[2] = v88 + 1;
        v89 = &v9[2 * v88];
        v89[4] = v86;
        v89[5] = v85;
        --v83;
        v84 += 3;
        if (!--v79)
          goto LABEL_58;
      }
      goto LABEL_62;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
LABEL_67:
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type RakeTokenStyle and conformance RakeTokenStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RakeTokenStyle and conformance RakeTokenStyle;
  if (!lazy protocol witness table cache variable for type RakeTokenStyle and conformance RakeTokenStyle)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for RakeTokenStyle, &type metadata for RakeTokenStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RakeTokenStyle and conformance RakeTokenStyle);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RakeTokenStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24763D938 + 4 * byte_24765829D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24763D96C + 4 * byte_247658298[v4]))();
}

uint64_t sub_24763D96C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24763D974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24763D97CLL);
  return result;
}

uint64_t sub_24763D988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24763D990);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24763D994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24763D99C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RakeTokenStyle()
{
  return &type metadata for RakeTokenStyle;
}

ValueMetadata *type metadata accessor for StringRake()
{
  return &type metadata for StringRake;
}

uint64_t SRSmartRepliesPersonMatch.init(contact:rawString:tokenRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

id SRSmartRepliesPersonMatch.contact.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void SRSmartRepliesPersonMatch.contact.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*SRSmartRepliesPersonMatch.contact.modify())()
{
  return PlaybackInformation.title.modify;
}

uint64_t SRSmartRepliesPersonMatch.rawString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SRSmartRepliesPersonMatch.tokenRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t destroy for SRSmartRepliesPersonMatch(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SRSmartRepliesPersonMatch(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SRSmartRepliesPersonMatch(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SRSmartRepliesPersonMatch(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SRSmartRepliesPersonMatch(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SRSmartRepliesPersonMatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesPersonMatch()
{
  return &type metadata for SRSmartRepliesPersonMatch;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, char, float);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, float))((char *)&async function pointer to specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)
                                                                       + async function pointer to specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return v14(a1, a4, a5, a6, a2);
}

uint64_t specialized Zip2Sequence.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v2 == v3)
  {
LABEL_6:
    v1 = 0;
    *(_BYTE *)(v0 + 32) = 1;
    return v1;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 16 * v2 + 32);
    *(_QWORD *)(v0 + 8) = v2 + 1;
    v4 = *(_QWORD *)(v0 + 24);
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
    if (v4 == v5)
      goto LABEL_6;
    if (v4 < v5)
    {
      *(_QWORD *)(v0 + 24) = v4 + 1;
      swift_bridgeObjectRetain();
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t MetricsRecorder.registerResponsesGenerated(request:response:robotResponseIndices:predictionLatency:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 776) = v4;
  *(float *)(v5 + 824) = a4;
  *(_QWORD *)(v5 + 768) = a3;
  *(_QWORD *)(v5 + 760) = a2;
  *(_QWORD *)(v5 + 752) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  *(_QWORD *)(v5 + 784) = swift_task_alloc();
  *(_QWORD *)(v5 + 792) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t MetricsRecorder.registerResponsesGenerated(request:response:robotResponseIndices:predictionLatency:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (_QWORD *)v0[94];
  v0[100] = *(_QWORD *)(v0[97] + 288);
  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x208);
  v3 = swift_bridgeObjectRetain();
  v4 = v2(v3);
  v0[101] = v5;
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  if (v5)
    v7 = v5;
  else
    v7 = 0xE000000000000000;
  v8 = (_QWORD *)swift_task_alloc();
  v0[102] = v8;
  *v8 = v0;
  v8[1] = MetricsRecorder.registerResponsesGenerated(request:response:robotResponseIndices:predictionLatency:);
  return ModelAssetLoader.getTrialAssets(language:)(v0[99], v6, v7);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  float v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = *(_QWORD *)(v0 + 800);
  v28 = *(_QWORD *)(v0 + 792);
  v1 = *(_QWORD *)(v0 + 784);
  v29 = *(_QWORD *)(v0 + 776);
  v2 = *(float *)(v0 + 824);
  v3 = *(_QWORD **)(v0 + 768);
  v4 = *(void **)(v0 + 760);
  v5 = *(void **)(v0 + 752);
  outlined init with copy of TUSTrialAssets<TrialSmartRepliesFactors>?(v28, v1);
  specialized TrialMetricsFields.init(trialAssets:)(v1, (_QWORD *)(v0 + 688));
  v6 = *(char **)(v0 + 696);
  v25 = *(unsigned __int8 **)(v0 + 688);
  v26 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 712);
  v24 = *(_QWORD *)(v0 + 720);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = *(_QWORD *)(v0 + 736);
  v10 = *(_QWORD *)(v0 + 744);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v5;
  v12 = v4;
  swift_bridgeObjectRetain();
  specialized MetricsRepliesListGenerated.init(suggestionRequest:suggestionResponse:robotResponseIndices:predictionLatency:modelName:actionInfoStrings:trialDeploymentId:trialExperimentId:trialTreatmentId:)(v11, (uint64_t)v12, v3, v25, v6, v27, v26, v7, v0 + 16, v2, v24, v8, v9, v10);
  v13 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 648) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 664) = v13;
  *(_QWORD *)(v0 + 680) = *(_QWORD *)(v0 + 176);
  v14 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 600) = v14;
  v15 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 632) = v15;
  v16 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 536) = v16;
  v17 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 552) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 568) = v17;
  outlined release of TrialMetricsFields(v0 + 688);
  MetricsRepliesListGenerated.sendEvent()();
  outlined destroy of Any?(v28, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  v18 = *(_OWORD *)(v0 + 664);
  *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 648);
  *(_OWORD *)(v0 + 496) = v18;
  *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 680);
  v19 = *(_OWORD *)(v0 + 600);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 432) = v19;
  v20 = *(_OWORD *)(v0 + 632);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 616);
  *(_OWORD *)(v0 + 464) = v20;
  v21 = *(_OWORD *)(v0 + 536);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 520);
  *(_OWORD *)(v0 + 368) = v21;
  v22 = *(_OWORD *)(v0 + 568);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 552);
  *(_OWORD *)(v0 + 400) = v22;
  PlaybackInformation.title.modify(v0 + 352);
  outlined init with take of RepliesToRobotsParameters?(v29 + 120, v0 + 184, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined init with take of RepliesToRobotsParameters?(v0 + 352, v29 + 120, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MetricsRecorder.registerResponseEngaged(for:message:time:metadata:language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[50] = a6;
  v7[51] = v6;
  v7[48] = a1;
  v7[49] = a2;
  return swift_task_switch();
}

uint64_t MetricsRecorder.registerResponseEngaged(for:message:time:metadata:language:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  outlined init with take of RepliesToRobotsParameters?(v2 + 120, v0 + 216, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v5 = *(_QWORD *)(v2 + 296);
  v6 = *(_QWORD *)(v2 + 304);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized MetricsReplyEngaged.init(replyString:metadata:repliesListGenerated:displaySetting:)(v4, v3, v1, v0 + 216, v5, v6, (_QWORD *)(v0 + 16));
  MetricsReplyEngaged.sendEvent()();
  outlined release of MetricsReplyEngaged(v0 + 16);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MetricsRecorder.registerResponseDisplayed(atIndex:displaySetting:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[87] = v3;
  v4[86] = a3;
  v4[85] = a2;
  return swift_task_switch();
}

uint64_t MetricsRecorder.registerResponseDisplayed(atIndex:displaySetting:)()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  outlined init with take of RepliesToRobotsParameters?(*(_QWORD *)(v0 + 696) + 120, v0 + 184, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined init with take of RepliesToRobotsParameters?(v0 + 184, v0 + 16, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v1 = _s12SmartReplies07MetricsB13ListGeneratedVSgWOg(v0 + 16);
  v2 = 0xE000000000000000;
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0uLL;
    v14 = 0xE000000000000000;
    v15 = 0xE000000000000000;
    v16 = 0xE000000000000000;
    v17 = 0xE000000000000000;
    v18 = 0xE000000000000000;
    v19 = 0xE000000000000000;
  }
  else
  {
    v44 = *(_QWORD *)(v0 + 16);
    outlined init with take of RepliesToRobotsParameters?(v0 + 184, v0 + 352, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
    v42 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 400);
    v40 = *(_QWORD *)(v0 + 392);
    v41 = *(_QWORD *)(v0 + 376);
    v18 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 432);
    v38 = *(_QWORD *)(v0 + 424);
    v39 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 464);
    v36 = *(_QWORD *)(v0 + 456);
    v37 = *(_QWORD *)(v0 + 440);
    v35 = *(_OWORD *)(v0 + 472);
    v23 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v20;
    v16 = v21;
    v15 = v22;
    v13 = v35;
    v3 = v23;
    v4 = v36;
    v5 = v37;
    v6 = v38;
    v7 = v39;
    v8 = v40;
    v9 = v41;
    v10 = v42;
    v11 = v43;
    v12 = v44;
    v2 = 0xE000000000000000;
  }
  v24 = *(_QWORD *)(v0 + 696);
  v25 = *(_QWORD *)(v0 + 688);
  v26 = *(_QWORD *)(v0 + 680);
  if (v25)
    v27 = *(_QWORD *)(v0 + 680);
  else
    v27 = 0;
  if (v25)
    v2 = *(_QWORD *)(v0 + 688);
  *(_QWORD *)(v0 + 352) = v12;
  *(_QWORD *)(v0 + 360) = v11;
  *(_QWORD *)(v0 + 368) = v10;
  *(_QWORD *)(v0 + 376) = v9;
  *(_QWORD *)(v0 + 384) = v8;
  *(_QWORD *)(v0 + 392) = v19;
  *(_QWORD *)(v0 + 400) = v7;
  *(_QWORD *)(v0 + 408) = v18;
  *(_QWORD *)(v0 + 416) = v6;
  *(_QWORD *)(v0 + 424) = v17;
  *(_QWORD *)(v0 + 432) = v5;
  *(_QWORD *)(v0 + 440) = v16;
  *(_QWORD *)(v0 + 448) = v4;
  *(_QWORD *)(v0 + 456) = v15;
  *(_OWORD *)(v0 + 464) = v13;
  *(_QWORD *)(v0 + 480) = v3;
  *(_QWORD *)(v0 + 488) = v14;
  *(_QWORD *)(v0 + 496) = v27;
  *(_QWORD *)(v0 + 504) = v2;
  v28 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 632) = v28;
  v29 = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 536) = v29;
  v30 = *(_OWORD *)(v0 + 384);
  v31 = *(_OWORD *)(v0 + 400);
  v32 = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 416);
  *(_OWORD *)(v0 + 600) = v32;
  *(_OWORD *)(v0 + 552) = v30;
  *(_OWORD *)(v0 + 568) = v31;
  v33 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 648) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 664) = v33;
  swift_bridgeObjectRetain();
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  MetricsRepliesDisplayed.sendEvent()();
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesDisplayed(v0 + 352);
  *(_QWORD *)(v24 + 296) = v26;
  *(_QWORD *)(v24 + 304) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MetricsRecorder.deinit()
{
  uint64_t v0;
  _QWORD v2[21];

  swift_release();
  outlined init with take of RepliesToRobotsParameters?(v0 + 120, (uint64_t)v2, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesListGenerated?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t MetricsRecorder.__deallocating_deinit()
{
  uint64_t v0;
  _QWORD v2[21];

  swift_release();
  outlined init with take of RepliesToRobotsParameters?(v0 + 120, (uint64_t)v2, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesListGenerated?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

_QWORD *MetricsRecorder.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[168];

  v0 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0[14] = static ModelAssetLoader.shared;
  _s12SmartReplies07MetricsB13ListGeneratedVSgWOi0_((uint64_t)v3);
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v3, (uint64_t)(v0 + 15), &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v1 = MEMORY[0x24BEE4AF8];
  v0[37] = 0;
  v0[38] = 0;
  v0[36] = v1;
  swift_retain();
  return v0;
}

_QWORD *MetricsRecorder.init()()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[168];

  swift_defaultActor_initialize();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v0[14] = static ModelAssetLoader.shared;
  _s12SmartReplies07MetricsB13ListGeneratedVSgWOi0_((uint64_t)v3);
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v3, (uint64_t)(v0 + 15), &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v1 = MEMORY[0x24BEE4AF8];
  v0[37] = 0;
  v0[38] = 0;
  v0[36] = v1;
  swift_retain();
  return v0;
}

uint64_t MetricsRecorder.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized TrialMetricsFields.init(trialAssets:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  id v26;
  unint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TUSTrialAssets<TrialSmartRepliesFactors>?(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    outlined init with take of RepliesToRobotsParameters?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
    v22 = *((_QWORD *)v10 + 2);
    v23 = *(void **)&v10[*(int *)(v7 + 32)];
    if (v23)
    {
      v36 = *((_QWORD *)v10 + 1);
      v37 = v22;
      swift_bridgeObjectRetain();
      v24 = v23;
      v38 = objc_msgSend(v24, sel_deploymentId);
      v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v19 = v25;
      v26 = objc_msgSend(v24, sel_experimentId);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v27;

      v28 = objc_msgSend(v24, sel_treatmentId);
    }
    else
    {
      v29 = *(void **)&v10[*(int *)(v7 + 28)];
      if (!v29)
      {
        outlined destroy of Any?(a1, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
        v12 = &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>;
        v11 = (uint64_t)v10;
        goto LABEL_3;
      }
      v36 = *((_QWORD *)v10 + 1);
      v37 = v22;
      swift_bridgeObjectRetain();
      v24 = v29;
      v39 = objc_msgSend(v24, sel_deploymentId);
      v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v19 = v30;
      v31 = objc_msgSend(v24, sel_rolloutId);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v32;

      v28 = objc_msgSend(v24, sel_factorPackId);
    }
    v33 = v28;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v34;

    outlined destroy of Any?(a1, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
    result = outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>);
    v14 = v35;
    v16 = v36;
    v15 = v37;
    goto LABEL_9;
  }
  outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  v11 = a1;
  v12 = &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?;
LABEL_3:
  result = outlined destroy of Any?(v11, v12);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0xE000000000000000;
  v20 = 0xE000000000000000;
  v21 = 0xE000000000000000;
LABEL_9:
  *a2 = v16;
  a2[1] = v15;
  a2[2] = v14;
  a2[3] = v19;
  a2[4] = v17;
  a2[5] = v20;
  a2[6] = v18;
  a2[7] = v21;
  return result;
}

uint64_t specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5)
{
  uint64_t v5;
  uint64_t v6;

  *(float *)(v6 + 496) = a5;
  *(_BYTE *)(v6 + 500) = a4;
  *(_QWORD *)(v6 + 448) = a3;
  *(_QWORD *)(v6 + 456) = v5;
  *(_QWORD *)(v6 + 432) = a1;
  *(_QWORD *)(v6 + 440) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  *(_QWORD *)(v6 + 464) = swift_task_alloc();
  *(_QWORD *)(v6 + 472) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 432)) + 0x208))();
  *(_QWORD *)(v0 + 480) = v2;
  if (v2)
    v3 = v1;
  else
    v3 = 0;
  if (v2)
    v4 = v2;
  else
    v4 = 0xE000000000000000;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 488) = v5;
  *v5 = v0;
  v5[1] = specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:);
  return ModelAssetLoader.getTrialAssets(language:)(*(_QWORD *)(v0 + 472), v3, v4);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  int32x2_t v72;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;

  v1 = (uint64_t *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD **)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  outlined init with copy of TUSTrialAssets<TrialSmartRepliesFactors>?(*(_QWORD *)(v0 + 472), v2);
  v79 = v0 + 320;
  v5 = specialized TrialMetricsFields.init(trialAssets:)(v2, (_QWORD *)(v0 + 320));
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x178))(v5);
  v7 = *(void (**)(uint64_t))((*v6 & *v3) + 0x220);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  v7(v8);
  v9 = *(_QWORD *)(v4 + 16);
  if (!v9)
  {
    v54 = *(unsigned __int8 *)(v0 + 500);
    swift_bridgeObjectRetain();
    v33 = MEMORY[0x24BEE4AF8];
    specialized MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)(v54);
    outlined release of TrialMetricsFields(v79);
    MetricsActionInferenceResult.sendEvent()();
    v55 = *(_QWORD *)(v0 + 448);
    if (!v55)
      goto LABEL_98;
    goto LABEL_99;
  }
  v77 = (uint64_t *)(v0 + 168);
  v75 = (_QWORD *)(v0 + 384);
  v81 = (uint64_t *)(v0 + 392);
  v74 = (_QWORD *)(v0 + 400);
  v80 = (uint64_t *)(v0 + 408);
  v78 = v0;
  v10 = *(_QWORD *)(v0 + 440);
  v82 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  v76 = v10;
  v11 = (uint64_t *)(v10 + 40);
  v12 = v9;
  while (2)
  {
    v14 = *(v11 - 1);
    v13 = *v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_247656880;
    v16 = 0xE400000000000000;
    v17 = 1701736302;
    switch(v14)
    {
      case 0:
        goto LABEL_38;
      case 1:
        *(_QWORD *)(v15 + 32) = 0x676E697465656DLL;
        *(_QWORD *)(v15 + 40) = 0xE700000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 2:
        *(_QWORD *)(v15 + 32) = 0x746867696C66;
        *(_QWORD *)(v15 + 40) = 0xE600000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 3:
        *(_QWORD *)(v15 + 32) = 0x6E6F697461636F6CLL;
        *(_QWORD *)(v15 + 40) = 0xE800000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 4:
        *(_QWORD *)(v15 + 32) = 6386789;
        *(_QWORD *)(v15 + 40) = 0xE300000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 5:
        *(_QWORD *)(v15 + 32) = 0x73736572646461;
        *(_QWORD *)(v15 + 40) = 0xE700000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 6:
        v18 = 1701670760;
        goto LABEL_18;
      case 7:
        v18 = 1802661751;
LABEL_18:
        v19 = v18 | 0x7264644100000000;
        v20 = 7566181;
        goto LABEL_22;
      case 8:
        v19 = 0x6D754E656E6F6870;
        v20 = 7497058;
        goto LABEL_22;
      case 9:
        v21 = 1701670760;
        goto LABEL_25;
      case 10:
        v19 = 0x6850656C69626F6DLL;
        v20 = 6647407;
LABEL_22:
        *(_QWORD *)(v15 + 32) = v19;
        *(_QWORD *)(v15 + 40) = v20 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 11:
        v21 = 1802661751;
LABEL_25:
        v24 = v21 | 0x6E6F685000000000;
        goto LABEL_35;
      case 12:
        strcpy((char *)(v15 + 32), "emailAddress");
        *(_BYTE *)(v15 + 45) = 0;
        *(_WORD *)(v15 + 46) = -5120;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 13:
        *(_QWORD *)(v15 + 32) = 0x796150656C707061;
        *(_QWORD *)(v15 + 40) = 0xE800000000000000;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 14:
        *(_QWORD *)(v15 + 32) = 0x6F436C6174736F70;
        *(_QWORD *)(v15 + 40) = 0xEA00000000006564;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 15:
        *(_QWORD *)(v15 + 32) = 0xD000000000000010;
        *(_QWORD *)(v15 + 40) = 0x800000024765BB00;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 16:
        v24 = 0x6D614E6E65766967;
LABEL_35:
        *(_QWORD *)(v15 + 32) = v24;
        *(_QWORD *)(v15 + 40) = 0xE900000000000065;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      case 17:
        v16 = 0xEA0000000000656DLL;
        v17 = 0x614E796C696D6166;
LABEL_38:
        *(_QWORD *)(v15 + 32) = v17;
        *(_QWORD *)(v15 + 40) = v16;
        if (v13)
          goto LABEL_39;
        goto LABEL_23;
      case 18:
        *(_QWORD *)(v15 + 32) = 0x657461676976616ELL;
        *(_QWORD *)(v15 + 40) = 0xEA00000000006F54;
        if (!v13)
          goto LABEL_23;
        goto LABEL_39;
      default:
        *(_QWORD *)(v15 + 32) = 0x726568746FLL;
        *(_QWORD *)(v15 + 40) = 0xE500000000000000;
        if (v13)
        {
LABEL_39:
          if (v13 == 2)
          {
            v25 = 0x506472696874;
          }
          else
          {
            if (v13 != 1)
            {
              *v75 = v13;
              return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            }
            v25 = 0x507473726966;
          }
          v23 = v25 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
          v22 = 0xEB000000006E6F73;
        }
        else
        {
LABEL_23:
          v22 = 0xE400000000000000;
          v23 = 1701736302;
        }
        *(_QWORD *)(v15 + 48) = v23;
        *(_QWORD *)(v15 + 56) = v22;
        *v81 = v15;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v26 = BidirectionalCollection<>.joined(separator:)();
        v28 = v27;
        swift_bridgeObjectRelease();
        v30 = *(_QWORD *)(v82 + 16);
        v29 = *(_QWORD *)(v82 + 24);
        if (v30 >= v29 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v11 += 2;
        *(_QWORD *)(v82 + 16) = v30 + 1;
        v31 = v82 + 16 * v30;
        *(_QWORD *)(v31 + 32) = v26;
        *(_QWORD *)(v31 + 40) = v28;
        if (--v12)
          continue;
        v32 = *(_BYTE *)(v78 + 500);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized MetricsActionInferenceResult.init(componentTriggered:predictionLatency:requestLanguage:modelName:trialDeploymentId:trialExperimentId:trialTreatmentId:prompt:actionInfoStrings:rawScores:)(v32);
        outlined release of TrialMetricsFields(v79);
        MetricsActionInferenceResult.sendEvent()();
        v83 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        v33 = v83;
        v34 = (uint64_t *)(v76 + 40);
        while (2)
        {
          v36 = *(v34 - 1);
          v35 = *v34;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          v37 = swift_allocObject();
          *(_OWORD *)(v37 + 16) = xmmword_247656880;
          v38 = 0xE400000000000000;
          v39 = 1701736302;
          switch(v36)
          {
            case 0:
              goto LABEL_85;
            case 1:
              *(_QWORD *)(v37 + 32) = 0x676E697465656DLL;
              *(_QWORD *)(v37 + 40) = 0xE700000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 2:
              *(_QWORD *)(v37 + 32) = 0x746867696C66;
              *(_QWORD *)(v37 + 40) = 0xE600000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 3:
              *(_QWORD *)(v37 + 32) = 0x6E6F697461636F6CLL;
              *(_QWORD *)(v37 + 40) = 0xE800000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 4:
              *(_QWORD *)(v37 + 32) = 6386789;
              *(_QWORD *)(v37 + 40) = 0xE300000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 5:
              *(_QWORD *)(v37 + 32) = 0x73736572646461;
              *(_QWORD *)(v37 + 40) = 0xE700000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 6:
              v40 = 1701670760;
              goto LABEL_65;
            case 7:
              v40 = 1802661751;
LABEL_65:
              v41 = v40 | 0x7264644100000000;
              v42 = 7566181;
              goto LABEL_69;
            case 8:
              v41 = 0x6D754E656E6F6870;
              v42 = 7497058;
              goto LABEL_69;
            case 9:
              v43 = 1701670760;
              goto LABEL_72;
            case 10:
              v41 = 0x6850656C69626F6DLL;
              v42 = 6647407;
LABEL_69:
              *(_QWORD *)(v37 + 32) = v41;
              *(_QWORD *)(v37 + 40) = v42 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 11:
              v43 = 1802661751;
LABEL_72:
              v46 = v43 | 0x6E6F685000000000;
              goto LABEL_82;
            case 12:
              strcpy((char *)(v37 + 32), "emailAddress");
              *(_BYTE *)(v37 + 45) = 0;
              *(_WORD *)(v37 + 46) = -5120;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 13:
              *(_QWORD *)(v37 + 32) = 0x796150656C707061;
              *(_QWORD *)(v37 + 40) = 0xE800000000000000;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 14:
              *(_QWORD *)(v37 + 32) = 0x6F436C6174736F70;
              *(_QWORD *)(v37 + 40) = 0xEA00000000006564;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 15:
              *(_QWORD *)(v37 + 32) = 0xD000000000000010;
              *(_QWORD *)(v37 + 40) = 0x800000024765BB00;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 16:
              v46 = 0x6D614E6E65766967;
LABEL_82:
              *(_QWORD *)(v37 + 32) = v46;
              *(_QWORD *)(v37 + 40) = 0xE900000000000065;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            case 17:
              v38 = 0xEA0000000000656DLL;
              v39 = 0x614E796C696D6166;
LABEL_85:
              *(_QWORD *)(v37 + 32) = v39;
              *(_QWORD *)(v37 + 40) = v38;
              if (v35)
                goto LABEL_86;
              goto LABEL_70;
            case 18:
              *(_QWORD *)(v37 + 32) = 0x657461676976616ELL;
              *(_QWORD *)(v37 + 40) = 0xEA00000000006F54;
              if (!v35)
                goto LABEL_70;
              goto LABEL_86;
            default:
              *(_QWORD *)(v37 + 32) = 0x726568746FLL;
              *(_QWORD *)(v37 + 40) = 0xE500000000000000;
              if (!v35)
              {
LABEL_70:
                v44 = 0xE400000000000000;
                v45 = 1701736302;
                goto LABEL_91;
              }
LABEL_86:
              if (v35 == 2)
              {
                v47 = 0x506472696874;
                goto LABEL_90;
              }
              if (v35 != 1)
              {
                *v74 = v35;
                return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
              }
              v47 = 0x507473726966;
LABEL_90:
              v45 = v47 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
              v44 = 0xEB000000006E6F73;
LABEL_91:
              *(_QWORD *)(v37 + 48) = v45;
              *(_QWORD *)(v37 + 56) = v44;
              *v80 = v37;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
              v48 = BidirectionalCollection<>.joined(separator:)();
              v50 = v49;
              swift_bridgeObjectRelease();
              v52 = *(_QWORD *)(v83 + 16);
              v51 = *(_QWORD *)(v83 + 24);
              if (v52 >= v51 >> 1)
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
              v34 += 2;
              *(_QWORD *)(v83 + 16) = v52 + 1;
              v53 = v83 + 16 * v52;
              *(_QWORD *)(v53 + 32) = v48;
              *(_QWORD *)(v53 + 40) = v50;
              if (--v9)
                continue;
              v0 = v78;
              swift_bridgeObjectRelease();
              v1 = v77;
              v55 = *(_QWORD *)(v78 + 448);
              if (!v55)
              {
LABEL_98:
                v72.i32[0] = -964689920;
                v55 = specialized Array.init(repeating:count:)(*(_QWORD *)(v33 + 16), v72);
              }
LABEL_99:
              v56 = *(_QWORD *)(v55 + 16);
              v57 = *(_QWORD *)(v33 + 16);
              if (v56 == v57)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v58 = specialized Zip2Sequence.Iterator.next()();
                if (v59)
                {
                  v61 = v58;
                  v62 = v59;
                  do
                  {
                    v63 = v60;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v64 = specialized _ArrayProtocol.filter(_:)(v33, v61, v62);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined retain of MetricsActionInferenceResult((uint64_t)v1);
                    specialized MetricsActionPredicted.init(actionInferencePerformed:predictedActionInfoString:rawScore:otherPredictedActionInfoStrings:)(v1, v61, v62, v64, v0 + 16, v63);
                    outlined release of MetricsActionInferenceResult((uint64_t)v1);
                    MetricsActionPredicted.sendEvent()();
                    outlined release of MetricsActionPredicted(v0 + 16);
                    v61 = specialized Zip2Sequence.Iterator.next()();
                    v62 = v65;
                  }
                  while (v65);
                }
                v66 = *(_QWORD *)(v0 + 472);
                v67 = *(_QWORD *)(v0 + 456);
                outlined release of MetricsActionInferenceResult((uint64_t)v1);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined destroy of Any?(v66, &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
                *(_QWORD *)(v67 + 288) = v33;
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRetain();
                outlined release of MetricsActionInferenceResult((uint64_t)v1);
                if (one-time initialization token for standard != -1)
                  swift_once();
                v68 = type metadata accessor for Logger();
                __swift_project_value_buffer(v68, (uint64_t)static Logger.standard);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v69 = Logger.logObject.getter();
                v70 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v69, v70))
                {
                  v71 = swift_slowAlloc();
                  *(_DWORD *)v71 = 134218240;
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v0 + 416) = v56;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v71 + 12) = 2048;
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v0 + 424) = v57;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_2475DF000, v69, v70, "Unable to register action inference because number of rawScores %ld and predictedActionInfoStrings %ld do not match", (uint8_t *)v71, 0x16u);
                  MEMORY[0x24957ECC0](v71, -1, -1);
                }
                else
                {
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }

                outlined destroy of Any?(*(_QWORD *)(v0 + 472), &demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
              }
              swift_task_dealloc();
              swift_task_dealloc();
              return (*(uint64_t (**)(void))(v0 + 8))();
          }
        }
    }
  }
}

uint64_t outlined init with copy of TUSTrialAssets<TrialSmartRepliesFactors>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSTrialAssets<TrialSmartRepliesFactors>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of TrialMetricsFields(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *outlined release of MetricsRepliesListGenerated?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20]);
  return a1;
}

id outlined copy of MetricsRepliesListGenerated?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  id result;

  if (a7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a21;
  }
  return result;
}

uint64_t outlined release of MetricsReplyEngaged(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of MetricsRepliesDisplayed(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

double _s12SmartReplies07MetricsB13ListGeneratedVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t type metadata accessor for MetricsRecorder()
{
  return objc_opt_self();
}

uint64_t method lookup function for MetricsRecorder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(**(int **)(*(_QWORD *)v6 + 192)
                                                                                   + *(_QWORD *)(*(_QWORD *)v6 + 192));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *v14 = v7;
  v14[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of MetricsRecorder.registerResponsesGenerated(request:response:robotResponseIndices:predictionLatency:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, float);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, float))(**(int **)(*(_QWORD *)v4 + 200)
                                                                 + *(_QWORD *)(*(_QWORD *)v4 + 200));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of MetricsRecorder.registerResponseEngaged(for:message:time:metadata:language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v8 + 208) + *(_QWORD *)(*(_QWORD *)v8 + 208));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v18;
  *v18 = v9;
  v18[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of MetricsRecorder.registerResponseDisplayed(atIndex:displaySetting:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 216)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 216));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of MetricsRecorder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t outlined release of MetricsActionInferenceResult(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of MetricsActionInferenceResult(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of MetricsActionPredicted(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t dispatch thunk of ActionMetadataProviding.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v9(a1, a2, a3);
}

uint64_t PhoneNumberActionMetadataProvider.init(contactDataSource:actionType:)(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 216);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  return a1;
}

uint64_t PhoneNumberActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = a5;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  return swift_task_switch();
}

uint64_t PhoneNumberActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;

  if (one-time initialization token for shared != -1)
    swift_once();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 40)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v2;
  swift_bridgeObjectRetain();
  TUSCache.subscript.getter();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD **)(v0 + 32);
  if (!v4)
  {
    v5 = String.inferredAddressBookContacts()();
    if (v5)
      v4 = v5;
    else
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 24) = v3;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TUSCache.subscript.setter();
  }
  swift_bridgeObjectRelease();
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v6 = (void *)v4[4];
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_12:
    v13 = PhoneNumberActionMetadataProvider.phoneNumberMetadata(for:actionType:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 72));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
  }
  v9 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_BYTE *)(v0 + 72);
  v12 = v7;
  v13 = PhoneNumberActionMetadataProvider.phoneNumberMetadata(for:actionType:)((uint64_t)v6, v8, v10, v9, v11);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t PhoneNumberActionMetadataProvider.phoneNumberMetadata(for:actionType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  if (a1)
    __asm { BR              X10 }
  return 0;
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance PhoneNumberActionMetadataProvider(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *v1;
  v4 = *((_BYTE *)v1 + 16);
  v5 = *((_QWORD *)v1 + 3);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  *(_QWORD *)(v6 + 64) = v5;
  *(_BYTE *)(v6 + 72) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 40) = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for PhoneNumberActionMetadataProvider()
{
  return &type metadata for PhoneNumberActionMetadataProvider;
}

uint64_t storeEnumTagSinglePayload for PhoneNumberActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_247640D00 + 4 * byte_247658475[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_247640D34 + 4 * byte_247658470[v4]))();
}

uint64_t sub_247640D34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_247640D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x247640D44);
  return result;
}

uint64_t sub_247640D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x247640D58);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_247640D5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_247640D64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PhoneNumberActionType()
{
  return &unk_2518C6D38;
}

unint64_t lazy protocol witness table accessor for type PhoneNumberActionType and conformance PhoneNumberActionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneNumberActionType and conformance PhoneNumberActionType;
  if (!lazy protocol witness table cache variable for type PhoneNumberActionType and conformance PhoneNumberActionType)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for PhoneNumberActionType, &unk_2518C6D38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneNumberActionType and conformance PhoneNumberActionType);
  }
  return result;
}

Swift::String __swiftcall LocalizedString(_:comment:tableName:)(Swift::String _, Swift::String comment, Swift::String_optional tableName)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String result;
  Swift::String v16;

  object = tableName.value._object;
  countAndFlagsBits = tableName.value._countAndFlagsBits;
  v5 = comment._object;
  v6 = comment._countAndFlagsBits;
  v7 = _._object;
  v8 = _._countAndFlagsBits;
  if (one-time initialization token for current != -1)
    swift_once();
  v16._object = v5;
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  v10.value._countAndFlagsBits = countAndFlagsBits;
  v10.value._object = object;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = v6;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)static NSBundle.current, v11, v16);
  v13 = v14._object;
  v12 = v14._countAndFlagsBits;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t NSBundle.Sentinel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id one-time initialization function for current()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for NSBundle.Sentinel();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.current = (uint64_t)result;
  return result;
}

uint64_t *NSBundle.current.unsafeMutableAddressor()
{
  if (one-time initialization token for current != -1)
    swift_once();
  return &static NSBundle.current;
}

id static NSBundle.current.getter()
{
  if (one-time initialization token for current != -1)
    swift_once();
  return (id)static NSBundle.current;
}

uint64_t type metadata accessor for NSBundle.Sentinel()
{
  return objc_opt_self();
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

Swift::UInt specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt result;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  result = Hasher.init(_seed:)();
  v7 = 3 * a1;
  if ((unsigned __int128)(a1 * (__int128)3) >> 64 != (3 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  result = v7 + a2;
  if (__OFADD__(v7, a2))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  Hasher._combine(_:)(result);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(a3 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(a3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  v11 = ~v9;
  v12 = *(_QWORD *)(a3 + 48);
  while (*(_QWORD *)(v12 + 16 * v10) != a1 || *(_QWORD *)(v12 + 16 * v10 + 8) != a2)
  {
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(a3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return 0;
  }
  return 1;
}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesManager()), sel_init);
  static SRSmartRepliesManager.shared = (uint64_t)result;
  return result;
}

id SRSmartRepliesManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static SRSmartRepliesManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static SRSmartRepliesManager.shared;
}

uint64_t SRSmartRepliesManager.actionMetadataController.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___actionMetadataController;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___actionMetadataController))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___actionMetadataController);
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v2 = static SRSmartRepliesActionMetadataController.shared;
    *(_QWORD *)(v0 + v1) = static SRSmartRepliesActionMetadataController.shared;
    swift_retain_n();
    swift_release();
  }
  swift_retain();
  return v2;
}

void *SRSmartRepliesManager.biomeManager.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___biomeManager);
  v2 = v1;
  if (v1 == (void *)1)
  {
    *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___biomeManager) = 0;
    outlined consume of BiomeLoggingManager?((id)1);
    v2 = 0;
  }
  outlined copy of BiomeLoggingManager?(v1);
  return v2;
}

uint64_t SRSmartRepliesManager.modelResponseManager.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TUSCache<SRSmartRepliesSuggestionRequest, Result<[SRPredictionType : [SRPredictionItem]]?, Error>>);
    swift_allocObject();
    v3 = TUSCache.init(capacity:)();
    if (one-time initialization token for shared != -1)
      swift_once();
    v4 = static SmartRepliesXPCClient.shared;
    v5 = *v1;
    *v1 = v3;
    v1[1] = v4;
    swift_retain_n();
    swift_retain();
    outlined consume of ModelResponseManager?(v5);
  }
  outlined copy of ModelResponseManager?(v2);
  return v3;
}

id SRSmartRepliesManager.rkManager.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___rkManager;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___rkManager);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___rkManager);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id SRSmartRepliesManager.suggestions(for:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  dispatch_semaphore_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, Swift::Int (*)(void *), uint64_t);
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  objc_class *v20;
  char *v21;
  id v23;
  objc_super v24;
  objc_super v25;

  v2 = v1;
  if (objc_msgSend(a1, sel_hasValidReceivedMessages))
  {
    v4 = swift_allocObject();
    v5 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v6 = (char *)objc_allocWithZone(v5);
    *(_QWORD *)&v6[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
    v24.receiver = v6;
    v24.super_class = v5;
    *(_QWORD *)(v4 + 16) = objc_msgSendSuper2(&v24, sel_init);
    v7 = dispatch_semaphore_create(0);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v4;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = *(void (**)(_QWORD *, Swift::Int (*)(void *), uint64_t))((*MEMORY[0x24BEE4EA0] & *v2)
                                                                                     + 0xE0);
    swift_retain();
    v10 = v7;
    v9(a1, partial apply for closure #1 in SRSmartRepliesManager.suggestions(for:), v8);
    swift_release();
    OS_dispatch_semaphore.wait()();
    if (one-time initialization token for standard != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.standard);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_2475DF000, v12, v13, "Successfully returning results to client", v14, 2u);
      MEMORY[0x24957ECC0](v14, -1, -1);
      v15 = v10;
    }
    else
    {
      v15 = v12;
      v12 = v10;
    }

    swift_beginAccess();
    v23 = *(id *)(v4 + 16);
    swift_release();
    return v23;
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.standard);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2475DF000, v17, v18, "Returning early since request has no valid received messages and no sent messages to predict on", v19, 2u);
      MEMORY[0x24957ECC0](v19, -1, -1);
    }

    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v20 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v21 = (char *)objc_allocWithZone(v20);
    *(_QWORD *)&v21[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = MEMORY[0x24BEE4AF8];
    v25.receiver = v21;
    v25.super_class = v20;
    return objc_msgSendSuper2(&v25, sel_init);
  }
}

Swift::Int closure #1 in SRSmartRepliesManager.suggestions(for:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v5 = a1;

  return OS_dispatch_semaphore.signal()();
}

void SRSmartRepliesManager.suggestions(for:completion:)(_QWORD *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  _QWORD *v27;
  uint8_t *v28;
  objc_class *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  objc_class *v37;
  char *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  objc_class *v52;
  char *v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  objc_class *v66;
  char *v67;
  _QWORD v68[2];
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  _QWORD *v76;
  objc_super v77;
  uint64_t v78;
  objc_super v79;
  objc_super v80;
  objc_super v81;

  v76 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v9 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v74 - 8);
  v18 = MEMORY[0x24BDAC7A8](v74);
  v20 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v73 = (char *)v68 - v21;
  if ((specialized static NSBundle.isBundleDisallowedForDynamicReplies()() & 1) != 0)
  {
    v22 = a2;
    if (one-time initialization token for standard != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.standard);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = v76;
    if (v26)
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_2475DF000, v24, v25, "This bundle does not support dynamic replies. Only canned replies will be provided.", v28, 2u);
      MEMORY[0x24957ECC0](v28, -1, -1);
    }

    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v27) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v29 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v30 = (char *)objc_allocWithZone(v29);
    *(_QWORD *)&v30[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = MEMORY[0x24BEE4AF8];
    v77.receiver = v30;
    v77.super_class = v29;
    v31 = objc_msgSendSuper2(&v77, sel_init);
LABEL_31:
    v39 = v31;
    v22();
LABEL_32:

    return;
  }
  if ((specialized static NSBundle.isDonatingBundleOnly()() & 1) == 0)
  {
LABEL_24:
    v55 = v76;
    if (objc_msgSend(v76, sel_hasValidReceivedMessages))
    {
      v56 = type metadata accessor for TaskPriority();
      v57 = (uint64_t)v72;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v72, 1, 1, v56);
      v58 = (_QWORD *)swift_allocObject();
      v58[2] = 0;
      v58[3] = 0;
      v59 = v75;
      v58[4] = v55;
      v58[5] = v59;
      v58[6] = a2;
      v58[7] = a3;
      v60 = v55;
      v61 = v59;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v57, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesManager.suggestions(for:completion:), (uint64_t)v58);
      swift_release();
      return;
    }
    v22 = a2;
    if (one-time initialization token for standard != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.standard);
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_2475DF000, v63, v64, "Returning early since request has no valid received messages and no sent messages to predict on", v65, 2u);
      MEMORY[0x24957ECC0](v65, -1, -1);
    }

    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v55) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v66 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v67 = (char *)objc_allocWithZone(v66);
    *(_QWORD *)&v67[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = MEMORY[0x24BEE4AF8];
    v81.receiver = v67;
    v81.super_class = v66;
    v31 = objc_msgSendSuper2(&v81, sel_init);
    goto LABEL_31;
  }
  v70 = a2;
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v76) + 0x1C0))();
  v32 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v74) == 1)
  {
    outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Date?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.standard);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_2475DF000, v34, v35, "Throwing away message donation since it does not have a request date", v36, 2u);
      MEMORY[0x24957ECC0](v36, -1, -1);
    }

    v37 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v38 = (char *)objc_allocWithZone(v37);
    *(_QWORD *)&v38[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
    v80.receiver = v38;
    v80.super_class = v37;
    v39 = objc_msgSendSuper2(&v80, sel_init);
    v70();
    goto LABEL_32;
  }
  v68[0] = a3;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v73, v16, v32);
  Date.init()();
  static Calendar.autoupdatingCurrent.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v69 = type metadata accessor for Calendar.Component();
  v40 = *(_QWORD *)(v69 - 8);
  v41 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_247656500;
  v68[1] = v42 + v41;
  (*(void (**)(void))(v40 + 104))();
  specialized Set.init<A>(_:)(v42);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  v43 = DateComponents.minute.getter();
  v44 = 0;
  if ((v45 & 1) == 0)
  {
    v44 = v43;
    if (v43 < 0)
    {
      v44 = -v43;
      if (__OFSUB__(0, v43))
      {
        __break(1u);
        return;
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v71);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v46 = *(void (**)(char *, uint64_t))(v17 + 8);
  v47 = v74;
  v46(v20, v74);
  a3 = v68[0];
  if (v44 <= 3)
  {
    v46(v73, v47);
    a2 = v70;
    goto LABEL_24;
  }
  if (one-time initialization token for standard != -1)
    swift_once();
  v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.standard);
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v51 = 134217984;
    v78 = 3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2475DF000, v49, v50, "Throwing away message donation since it's older than %ld minutes", v51, 0xCu);
    MEMORY[0x24957ECC0](v51, -1, -1);
  }

  v52 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
  v53 = (char *)objc_allocWithZone(v52);
  *(_QWORD *)&v53[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
  v79.receiver = v53;
  v79.super_class = v52;
  v54 = objc_msgSendSuper2(&v79, sel_init);
  v70();

  v46(v73, v74);
}

uint64_t closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v8 = type metadata accessor for DispatchTime();
  v7[12] = v8;
  v7[13] = *(_QWORD *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesManager.suggestions(for:completion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, unint64_t);

  v1 = *(_QWORD **)(v0 + 64);
  v2 = static DispatchTime.now()();
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x118))(v2) & 1) != 0)
  {
    *(_BYTE *)(v0 + 249) = 0;
    v4 = (*(uint64_t (**)(void))((*v3 & **(_QWORD **)(v0 + 64)) + 0x220))();
    v6 = v5;
    *(_QWORD *)(v0 + 152) = v4;
    *(_QWORD *)(v0 + 160) = v5;
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)
                                                                              + async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v7;
    *v7 = v0;
    v7[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
    return v12(v4, v6, 28261, 0xE200000000000000);
  }
  else
  {
    v9 = SRSmartRepliesManager.modelResponseManager.getter();
    *(_QWORD *)(v0 + 128) = v9;
    *(_QWORD *)(v0 + 136) = v10;
    *(_QWORD *)(v0 + 16) = v9;
    *(_QWORD *)(v0 + 24) = v10;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v11;
    *v11 = v0;
    v11[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
    return ModelResponseManager.predictConversationEnd(for:)(*(_QWORD *)(v0 + 64));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, unint64_t);

  *(_BYTE *)(v0 + 249) = *(_BYTE *)(v0 + 248);
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 64)) + 0x220))();
  v3 = v2;
  *(_QWORD *)(v0 + 152) = v1;
  *(_QWORD *)(v0 + 160) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:)
                                                                           + async function pointer to specialized PredictionExemptTermsDetector.checkForPredictionExemptText(in:languageCode:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v4;
  *v4 = v0;
  v4[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
  return v6(v1, v3, 28261, 0xE200000000000000);
}

{
  uint64_t v0;
  char v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  String.tokens()();
  swift_bridgeObjectRelease();
  v1 = static OVSResolver.containsOVS(in:localeIdentifier:)();
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 249) & 1) == 0)
    {
      v2 = 0;
LABEL_7:
      v4 = swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v4;
      *(_QWORD *)v4 = v0;
      *(_QWORD *)(v4 + 8) = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
      v5 = *(_OWORD *)(v0 + 64);
      *(_BYTE *)(v4 + 72) = v2 & 1;
      *(_OWORD *)(v4 + 32) = v5;
      return swift_task_switch();
    }
  }
  else if ((*(_BYTE *)(v0 + 249) & 1) == 0)
  {
    v2 = *(_BYTE *)(v0 + 250) ^ 1;
    goto LABEL_7;
  }
  *(_QWORD *)(v0 + 184) = MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v3;
  *v3 = v0;
  v3[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
  v3[2] = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(id);
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(void);
  objc_class *v26;
  char *v27;
  id v28;

  if (*(_QWORD *)(v0 + 216) >> 62)
  {
    type metadata accessor for SRSmartRepliesSuggestion();
    swift_bridgeObjectRetain();
    v1 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for SRSmartRepliesSuggestion();
    v1 = *(_QWORD *)(v0 + 216);
  }
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
  specialized Array.append<A>(contentsOf:)(v3);
  v4 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease_n();
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_15;
    }
  }
  else
  {
    v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
  }
  v5 = (int64_t)specialized _copyCollectionToContiguousArray<A>(_:)(0, v5);
  *(_QWORD *)(v0 + 224) = v5;
  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_7:
    v6 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v7 = (char *)objc_allocWithZone(v6);
    *(_QWORD *)&v7[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = v4;
    *(_QWORD *)(v0 + 32) = v7;
    *(_QWORD *)(v0 + 40) = v6;
    v8 = objc_msgSendSuper2((objc_super *)(v0 + 32), sel_init);
    *(_QWORD *)(v0 + 232) = v8;
    static DispatchTime.now()();
    v9 = DispatchTime.uptimeNanoseconds.getter();
    v10 = DispatchTime.uptimeNanoseconds.getter();
    v11 = v9 - v10;
    if (v9 < v10)
    {
      __break(1u);
    }
    else if (one-time initialization token for standard == -1)
    {
LABEL_9:
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.standard);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_2475DF000, v13, v14, "Successfully returning results to client", v15, 2u);
        MEMORY[0x24957ECC0](v15, -1, -1);
      }
      v16 = *(void (**)(id))(v0 + 80);

      v16(v8);
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v17;
      *v17 = v0;
      v17[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
      return MetricsRecorder.registerResponsesGenerated(request:response:robotResponseIndices:predictionLatency:)(*(_QWORD *)(v0 + 64), (uint64_t)v8, v5, (float)v11);
    }
    swift_once();
    goto LABEL_9;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for standard != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.standard);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_2475DF000, v21, v22, "Returning empty suggestions to client", v23, 2u);
    MEMORY[0x24957ECC0](v23, -1, -1);
  }
  v24 = *(_QWORD *)(v0 + 104);
  v25 = *(void (**)(void))(v0 + 80);

  v26 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
  v27 = (char *)objc_allocWithZone(v26);
  *(_QWORD *)&v27[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
  *(_QWORD *)(v0 + 48) = v27;
  *(_QWORD *)(v0 + 56) = v26;
  v28 = objc_msgSendSuper2((objc_super *)(v0 + 48), sel_init);
  v25();

  (*(void (**)(_QWORD, _QWORD))(v24 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);

  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v1, v3);
  v4(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v5 = *(_OWORD *)(*(_QWORD *)v1 + 128);
  *(_BYTE *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager) = v5;
  outlined consume of ModelResponseManager?(v3);
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 250) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v3 = (_QWORD *)*v1;
  v6 = (_QWORD *)*v1;
  swift_task_dealloc();
  v3[23] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v3[24] = v4;
  *v4 = v6;
  v4[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
  v4[2] = v3[8];
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v1;
  v3 = *v1;
  *(_QWORD *)(*v1 + 200) = a1;
  swift_task_dealloc();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 208) = v4;
  *v4 = v3;
  v4[1] = closure #1 in SRSmartRepliesManager.suggestions(for:completion:);
  return SRSmartRepliesManager.retrieveActionSuggestions(for:)(*(_QWORD *)(v2 + 64));
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a6;
  v33 = a7;
  v30 = a1;
  v31 = a3;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  outlined init with copy of Date?(a5, (uint64_t)v16);
  v21 = (*(unsigned __int8 *)(v14 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = 0;
  v23[3] = 0;
  v24 = v30;
  v23[4] = v8;
  v23[5] = v24;
  v25 = v31;
  v23[6] = a2;
  v23[7] = v25;
  v23[8] = a4;
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v16, (uint64_t)v23 + v21, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v26 = v33;
  *(_QWORD *)((char *)v23 + v22) = v32;
  v27 = (_QWORD *)((char *)v23 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v27 = v26;
  v27[1] = a8;
  swift_bridgeObjectRetain();
  v28 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v19, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:), (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;

  v6[50] = a6;
  v6[51] = v8;
  v6[48] = a4;
  v6[49] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 416) = *(_QWORD *)(*(_QWORD *)(v0 + 384)
                                    + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager_metricsRecorder);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  outlined init with take of RepliesToRobotsParameters?(v2 + 120, v0 + 216, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v5 = *(_QWORD *)(v2 + 296);
  v6 = *(_QWORD *)(v2 + 304);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized MetricsReplyEngaged.init(replyString:metadata:repliesListGenerated:displaySetting:)(v4, v3, v1, v0 + 216, v5, v6, (_QWORD *)(v0 + 16));
  MetricsReplyEngaged.sendEvent()();
  outlined release of MetricsReplyEngaged(v0 + 16);
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 216), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:)(NSNumber_optional atIndex, NSString_optional displaySetting)
{
  void *v2;
  uint64_t v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  objc_class *v12;
  id v13;
  uint64_t v14;

  v3 = *(_QWORD *)&atIndex.is_nil;
  isa = atIndex.value.super.super.isa;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;
  }
  else
  {
    v9 = 0;
  }
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v2;
  v11[5] = isa;
  v11[6] = v3;
  v11[7] = v9;
  v12 = isa;
  v13 = v2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:), (uint64_t)v11);
  swift_release();
}

uint64_t closure #1 in SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[87] = a7;
  v7[86] = a6;
  v7[85] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 704) = *(_QWORD *)(*(_QWORD *)(v0 + 680)
                                    + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager_metricsRecorder);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  outlined init with take of RepliesToRobotsParameters?(*(_QWORD *)(v0 + 704) + 120, v0 + 184, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  outlined init with take of RepliesToRobotsParameters?(v0 + 184, v0 + 16, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v1 = _s12SmartReplies07MetricsB13ListGeneratedVSgWOg(v0 + 16);
  v2 = 0xE000000000000000;
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0uLL;
    v14 = 0xE000000000000000;
    v15 = 0xE000000000000000;
    v16 = 0xE000000000000000;
    v17 = 0xE000000000000000;
    v18 = 0xE000000000000000;
    v19 = 0xE000000000000000;
  }
  else
  {
    v44 = *(_QWORD *)(v0 + 16);
    outlined init with take of RepliesToRobotsParameters?(v0 + 184, v0 + 352, &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
    v42 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 400);
    v40 = *(_QWORD *)(v0 + 392);
    v41 = *(_QWORD *)(v0 + 376);
    v18 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 432);
    v38 = *(_QWORD *)(v0 + 424);
    v39 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 464);
    v36 = *(_QWORD *)(v0 + 456);
    v37 = *(_QWORD *)(v0 + 440);
    v35 = *(_OWORD *)(v0 + 472);
    v23 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v20;
    v16 = v21;
    v15 = v22;
    v13 = v35;
    v3 = v23;
    v4 = v36;
    v5 = v37;
    v6 = v38;
    v7 = v39;
    v8 = v40;
    v9 = v41;
    v10 = v42;
    v11 = v43;
    v12 = v44;
    v2 = 0xE000000000000000;
  }
  v24 = *(_QWORD *)(v0 + 704);
  v25 = *(_QWORD *)(v0 + 696);
  v26 = *(_QWORD *)(v0 + 688);
  if (v25)
    v27 = *(_QWORD *)(v0 + 688);
  else
    v27 = 0;
  if (v25)
    v2 = *(_QWORD *)(v0 + 696);
  *(_QWORD *)(v0 + 352) = v12;
  *(_QWORD *)(v0 + 360) = v11;
  *(_QWORD *)(v0 + 368) = v10;
  *(_QWORD *)(v0 + 376) = v9;
  *(_QWORD *)(v0 + 384) = v8;
  *(_QWORD *)(v0 + 392) = v19;
  *(_QWORD *)(v0 + 400) = v7;
  *(_QWORD *)(v0 + 408) = v18;
  *(_QWORD *)(v0 + 416) = v6;
  *(_QWORD *)(v0 + 424) = v17;
  *(_QWORD *)(v0 + 432) = v5;
  *(_QWORD *)(v0 + 440) = v16;
  *(_QWORD *)(v0 + 448) = v4;
  *(_QWORD *)(v0 + 456) = v15;
  *(_OWORD *)(v0 + 464) = v13;
  *(_QWORD *)(v0 + 480) = v3;
  *(_QWORD *)(v0 + 488) = v14;
  *(_QWORD *)(v0 + 496) = v27;
  *(_QWORD *)(v0 + 504) = v2;
  v28 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 616) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 632) = v28;
  v29 = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 536) = v29;
  v30 = *(_OWORD *)(v0 + 384);
  v31 = *(_OWORD *)(v0 + 400);
  v32 = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v0 + 584) = *(_OWORD *)(v0 + 416);
  *(_OWORD *)(v0 + 600) = v32;
  *(_OWORD *)(v0 + 552) = v30;
  *(_OWORD *)(v0 + 568) = v31;
  v33 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 648) = *(_OWORD *)(v0 + 480);
  *(_OWORD *)(v0 + 664) = v33;
  swift_bridgeObjectRetain();
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MetricsRepliesListGenerated?);
  MetricsRepliesDisplayed.sendEvent()();
  outlined release of MetricsRepliesListGenerated?((_QWORD *)(v0 + 184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MetricsRepliesListGenerated?);
  outlined release of MetricsRepliesDisplayed(v0 + 352);
  *(_QWORD *)(v24 + 296) = v26;
  *(_QWORD *)(v24 + 304) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SRSmartRepliesManager.retrieveSimpleTextSuggestions(for:includeDynamicSuggestions:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 72) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.retrieveSimpleTextSuggestions(for:includeDynamicSuggestions:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 32)) + 0xE8);
  if (!v2() || v2() == 1)
  {
    if (*(_BYTE *)(v0 + 72) == 1)
    {
      v3 = SRSmartRepliesManager.modelResponseManager.getter();
      *(_QWORD *)(v0 + 48) = v3;
      *(_QWORD *)(v0 + 56) = v4;
      *(_QWORD *)(v0 + 16) = v3;
      *(_QWORD *)(v0 + 24) = v4;
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 64) = v5;
      *v5 = v0;
      v5[1] = SRSmartRepliesManager.retrieveSimpleTextSuggestions(for:includeDynamicSuggestions:);
      return ModelResponseManager.simpleTextSuggestions(for:includeCannedResponses:)(*(_QWORD *)(v0 + 32));
    }
    v7 = *(_QWORD **)(v0 + 32);
    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*v1 & *v7) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

uint64_t SRSmartRepliesManager.retrieveSimpleTextSuggestions(for:includeDynamicSuggestions:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *v1;
  v7 = *(_OWORD *)(v4 + 48);
  swift_task_dealloc();
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  *(_OWORD *)(v3 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager) = v7;
  outlined consume of ModelResponseManager?(v5);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[26] = a1;
  v2[27] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[28] = swift_task_alloc();
  v3 = type metadata accessor for DispatchTime();
  v2[29] = v3;
  v2[30] = *(_QWORD *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.retrieveActionSuggestions(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 208)) + 0xE8);
  if ((!v2() || v2() == 2)
    && ((v3 = (*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 208)) + 0x100))(), v3 >> 62)
      ? (v4 = _CocoaArrayWrapper.endIndex.getter())
      : (v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10)),
        swift_bridgeObjectRelease(),
        v4))
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v5, (uint64_t)static Logger.standard);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2475DF000, v6, v7, "Requesting action suggestions…", v8, 2u);
      MEMORY[0x24957ECC0](v8, -1, -1);
    }
    v9 = *(void **)(v0 + 216);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionHandler>);
    inited = swift_initStackObject();
    *(_QWORD *)(v0 + 272) = inited;
    *(_OWORD *)(inited + 16) = xmmword_247656A20;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v9;
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v9;
    *(_BYTE *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = &async function pointer to partial apply for implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 48) = v11;
    *(_QWORD *)(inited + 56) = &async function pointer to partial apply for implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 64) = v12;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v9;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v9;
    *(_BYTE *)(inited + 72) = 1;
    *(_QWORD *)(inited + 80) = &async function pointer to partial apply for implicit closure #7 in implicit closure #6 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 88) = v13;
    *(_QWORD *)(inited + 96) = &async function pointer to partial apply for implicit closure #9 in implicit closure #8 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 104) = v14;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v9;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v9;
    *(_BYTE *)(inited + 112) = 2;
    *(_QWORD *)(inited + 120) = &async function pointer to partial apply for implicit closure #11 in implicit closure #10 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 128) = v15;
    *(_QWORD *)(inited + 136) = &async function pointer to partial apply for implicit closure #13 in implicit closure #12 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
    *(_QWORD *)(inited + 144) = v16;
    v17 = v9;
    static DispatchTime.now()();
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 280) = v18;
    *v18 = v0;
    v18[1] = SRSmartRepliesManager.retrieveActionSuggestions(for:);
    return dispatchActionHandlersSieve(for:using:)(*(_QWORD *)(v0 + 208), inited);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  }
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 *v44;
  _QWORD *v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  char v69;

  static DispatchTime.now()();
  v3 = DispatchTime.uptimeNanoseconds.getter();
  v4 = DispatchTime.uptimeNanoseconds.getter();
  if (v3 < v4)
  {
    __break(1u);
    goto LABEL_65;
  }
  v1 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v5 + 16);
  v64 = v5;
  v66 = v3 - v4;
  if (!v6)
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_53;
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  *(_QWORD *)&v68 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v7 = v68;
  v8 = (uint64_t *)(v5 + 40);
  while (2)
  {
    v9 = *(v8 - 1);
    v10 = *v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_247656880;
    v12 = 0xE400000000000000;
    v13 = 1701736302;
    switch(v9)
    {
      case 0:
        goto LABEL_40;
      case 1:
        *(_QWORD *)(v11 + 32) = 0x676E697465656DLL;
        *(_QWORD *)(v11 + 40) = 0xE700000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 2:
        *(_QWORD *)(v11 + 32) = 0x746867696C66;
        *(_QWORD *)(v11 + 40) = 0xE600000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 3:
        *(_QWORD *)(v11 + 32) = 0x6E6F697461636F6CLL;
        *(_QWORD *)(v11 + 40) = 0xE800000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 4:
        *(_QWORD *)(v11 + 32) = 6386789;
        *(_QWORD *)(v11 + 40) = 0xE300000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 5:
        *(_QWORD *)(v11 + 32) = 0x73736572646461;
        *(_QWORD *)(v11 + 40) = 0xE700000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 6:
        v14 = 1701670760;
        goto LABEL_19;
      case 7:
        v14 = 1802661751;
LABEL_19:
        *(_QWORD *)(v11 + 32) = v14 | 0x7264644100000000;
        *(_QWORD *)(v11 + 40) = 0xEB00000000737365;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 8:
        *(_QWORD *)(v11 + 32) = 0x6D754E656E6F6870;
        *(_QWORD *)(v11 + 40) = 0xEB00000000726562;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 9:
        v15 = 1701670760;
        goto LABEL_27;
      case 10:
        *(_QWORD *)(v11 + 32) = 0x6850656C69626F6DLL;
        *(_QWORD *)(v11 + 40) = 0xEB00000000656E6FLL;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 11:
        v15 = 1802661751;
LABEL_27:
        v16 = v15 | 0x6E6F685000000000;
        goto LABEL_37;
      case 12:
        strcpy((char *)(v11 + 32), "emailAddress");
        *(_BYTE *)(v11 + 45) = 0;
        *(_WORD *)(v11 + 46) = -5120;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 13:
        *(_QWORD *)(v11 + 32) = 0x796150656C707061;
        *(_QWORD *)(v11 + 40) = 0xE800000000000000;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 14:
        *(_QWORD *)(v11 + 32) = 0x6F436C6174736F70;
        *(_QWORD *)(v11 + 40) = 0xEA00000000006564;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 15:
        *(_QWORD *)(v11 + 32) = 0xD000000000000010;
        *(_QWORD *)(v11 + 40) = 0x800000024765BB00;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 16:
        v16 = 0x6D614E6E65766967;
LABEL_37:
        *(_QWORD *)(v11 + 32) = v16;
        *(_QWORD *)(v11 + 40) = 0xE900000000000065;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      case 17:
        v12 = 0xEA0000000000656DLL;
        v13 = 0x614E796C696D6166;
LABEL_40:
        *(_QWORD *)(v11 + 32) = v13;
        *(_QWORD *)(v11 + 40) = v12;
        if (v10)
          goto LABEL_41;
        goto LABEL_38;
      case 18:
        *(_QWORD *)(v11 + 32) = 0x657461676976616ELL;
        *(_QWORD *)(v11 + 40) = 0xEA00000000006F54;
        if (!v10)
          goto LABEL_38;
        goto LABEL_41;
      default:
        *(_QWORD *)(v11 + 32) = 0x726568746FLL;
        *(_QWORD *)(v11 + 40) = 0xE500000000000000;
        if (v10)
        {
LABEL_41:
          if (v10 == 2)
          {
            v19 = 0x506472696874;
          }
          else
          {
            if (v10 != 1)
            {
              *(_QWORD *)(v0 + 168) = v10;
              return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            }
            v19 = 0x507473726966;
          }
          v18 = v19 & 0xFFFFFFFFFFFFLL | 0x7265000000000000;
          v17 = 0xEB000000006E6F73;
        }
        else
        {
LABEL_38:
          v17 = 0xE400000000000000;
          v18 = 1701736302;
        }
        *(_QWORD *)(v11 + 48) = v18;
        *(_QWORD *)(v11 + 56) = v17;
        *(_QWORD *)(v0 + 176) = v11;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v20 = BidirectionalCollection<>.joined(separator:)();
        v22 = v21;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v68 = v7;
        v24 = *(_QWORD *)(v7 + 16);
        v23 = *(_QWORD *)(v7 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          v7 = v68;
        }
        v8 += 2;
        *(_QWORD *)(v7 + 16) = v24 + 1;
        v25 = v7 + 16 * v24;
        *(_QWORD *)(v25 + 32) = v20;
        *(_QWORD *)(v25 + 40) = v22;
        if (--v6)
          continue;
        swift_bridgeObjectRelease();
        v1 = *(_QWORD *)(v0 + 288);
        if (!*(_QWORD *)(v7 + 16))
          goto LABEL_59;
LABEL_53:
        v2 = v1 >> 62;
        if (!(v1 >> 62))
        {
          if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_55;
LABEL_66:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v26 = Logger.logObject.getter();
          v37 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, v37))
          {
            v28 = swift_slowAlloc();
            v38 = swift_slowAlloc();
            *(_QWORD *)&v68 = v38;
            *(_DWORD *)v28 = 136315138;
            v39 = swift_bridgeObjectRetain();
            v40 = MEMORY[0x24957E108](v39, MEMORY[0x24BEE0D00]);
            v42 = v41;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)&v68);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2475DF000, v26, v37, "Predicted actions: %s but there were no Suggestions to generate", (uint8_t *)v28, 0xCu);
            swift_arrayDestroy();
            v35 = v38;
            goto LABEL_68;
          }

LABEL_70:
          swift_bridgeObjectRelease_n();
          goto LABEL_71;
        }
LABEL_65:
        swift_bridgeObjectRetain();
        v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v36)
          goto LABEL_66;
LABEL_55:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26 = Logger.logObject.getter();
        v27 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v26, v27))
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_70;
        }
        v62 = v27;
        v28 = swift_slowAlloc();
        v61 = swift_slowAlloc();
        *(_QWORD *)&v68 = v61;
        *(_DWORD *)v28 = 136315394;
        v29 = swift_bridgeObjectRetain();
        v30 = MEMORY[0x24957E108](v29, MEMORY[0x24BEE0D00]);
        v32 = v31;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2048;
        if (v2)
        {
          swift_bridgeObjectRetain();
          v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v33 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 192) = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2475DF000, v26, v62, "Predicted actions: %s resulting in %ld suggestions", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        v35 = v61;
LABEL_68:
        MEMORY[0x24957ECC0](v35, -1, -1);
        MEMORY[0x24957ECC0](v28, -1, -1);

LABEL_71:
        v43 = *(_QWORD *)(v64 + 16);
        if (v43)
        {
          v44 = (__int128 *)(*(_QWORD *)(v0 + 296) + 32);
          swift_bridgeObjectRetain();
          do
          {
            v45 = *(_QWORD **)(v0 + 208);
            v46 = *v44++;
            v68 = v46;
            v69 = 0;
            SRSmartRepliesManager.logActionInferenceToBiome(for:actionInfo:)(v45, (uint64_t)&v68);
            --v43;
          }
          while (v43);
          swift_bridgeObjectRelease();
        }
        v47 = *(_BYTE *)(v0 + 312);
        v49 = *(_QWORD *)(v0 + 296);
        v48 = *(_QWORD *)(v0 + 304);
        v50 = *(_QWORD *)(v0 + 288);
        v67 = *(_QWORD *)(v0 + 256);
        v51 = *(_QWORD *)(v0 + 232);
        v63 = *(_QWORD *)(v0 + 240);
        v65 = *(_QWORD *)(v0 + 248);
        v53 = *(void **)(v0 + 216);
        v52 = *(_QWORD *)(v0 + 224);
        v54 = *(void **)(v0 + 208);
        v55 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v52, 1, 1, v55);
        v56 = swift_allocObject();
        *(_QWORD *)(v56 + 16) = 0;
        *(_QWORD *)(v56 + 24) = 0;
        *(_QWORD *)(v56 + 32) = v53;
        *(_QWORD *)(v56 + 40) = v54;
        *(_QWORD *)(v56 + 48) = v50;
        *(_QWORD *)(v56 + 56) = v49;
        *(_QWORD *)(v56 + 64) = v48;
        *(_BYTE *)(v56 + 72) = v47;
        *(_QWORD *)(v56 + 80) = v66;
        swift_bridgeObjectRetain();
        v57 = v53;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v58 = v54;
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:), v56);
        swift_release();
        v59 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
        v59(v65, v51);
        v59(v67, v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v60 = *(_QWORD *)(v0 + 288);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v60);
    }
  }
}

uint64_t SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  *(_QWORD *)(v5 + 288) = a1;
  *(_QWORD *)(v5 + 296) = a2;
  *(_QWORD *)(v5 + 304) = a3;
  *(_BYTE *)(v5 + 312) = a4;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  v5[16] = a1;
  v5[17] = a2;
  return swift_task_switch();
}

uint64_t implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  return swift_task_switch();
}

uint64_t implicit closure #7 in implicit closure #6 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 232) = a1;
  return swift_task_switch();
}

uint64_t implicit closure #7 in implicit closure #6 in SRSmartRepliesManager.retrieveActionSuggestions(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 232)) + 0x208))();
  if (v3
    && (specialized ActionRegexEvaluator.init(languageCode:)(v2, v3, (_QWORD *)(v0 + 160)),
        v4 = outlined init with take of RepliesToRobotsParameters?(v0 + 160, v0 + 88, &demangling cache variable for type metadata for ActionRegexEvaluator?), *(_QWORD *)(v0 + 88)))
  {
    v5 = *(_QWORD **)(v0 + 232);
    v6 = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 64) = v6;
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 152);
    v7 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 88);
    *(_OWORD *)(v0 + 32) = v7;
    v8._countAndFlagsBits = (*(uint64_t (**)(uint64_t))((*v1 & *v5) + 0x220))(v4);
    v9 = ActionRegexEvaluator.normalize(inputText:)(v8);
    ActionRegexEvaluator.findActionsFromNormalizedText(normalizedText:)(v9._countAndFlagsBits, (uint64_t)v9._object);
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ActionRegexEvaluator?(v0 + 160);
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v11, 0);
}

uint64_t implicit closure #11 in implicit closure #10 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch();
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v5 = *(_QWORD *)(*v2 + 40);
  v6 = *v2;
  v9 = *(_OWORD *)(v6 + 48);
  swift_task_dealloc();
  v7 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager);
  *(_OWORD *)(v5 + OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager) = v9;
  outlined consume of ModelResponseManager?(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t implicit closure #11 in implicit closure #10 in SRSmartRepliesManager.retrieveActionSuggestions(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = SRSmartRepliesManager.modelResponseManager.getter();
  v0[6] = v1;
  v0[7] = v2;
  v0[2] = v1;
  v0[3] = v2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[8] = v3;
  *v3 = v0;
  v3[1] = implicit closure #11 in implicit closure #10 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  return ModelResponseManager.predictActionsUsingML(for:)(v0[4]);
}

uint64_t closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 48) = v11;
  *(_BYTE *)(v8 + 64) = v10;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)()
{
  uint64_t v0;
  float v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, char, float);

  v1 = (float)*(unint64_t *)(v0 + 48);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, float))((char *)&async function pointer to specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:)
                                                                      + async function pointer to specialized MetricsRecorder.registerActionInference(request:actionSieveResult:predictionLatency:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  return v4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 64), v1);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t SRSmartRepliesManager.canonicalRequestActionsMapper(for:actionTypesAndPOVs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.canonicalRequestActionsMapper(for:actionTypesAndPOVs:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t (*v21)(_QWORD, uint64_t);
  __int128 v22;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 48)) + 0xE8);
  if (!v1() || v1() == 2)
  {
    v2 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4B08];
      v4 = v2 + 32;
      result = swift_bridgeObjectRetain();
      v6 = 0;
      v7 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        if (v6 <= v3)
          v8 = v3;
        else
          v8 = v6;
        v9 = v6;
        while (1)
        {
          if (v8 == v9)
          {
            __break(1u);
            return result;
          }
          v10 = *(_OWORD *)(v4 + 16 * v9);
          if ((_QWORD)v10)
            break;
          result = specialized Set._Variant.insert(_:)(&v22, 0, *((int64_t *)&v10 + 1));
LABEL_10:
          if (v3 == ++v9)
            goto LABEL_19;
        }
        v20 = *(_OWORD *)(v4 + 16 * v9);
        v11 = specialized Set.contains(_:)(v10, *((uint64_t *)&v10 + 1), *(_QWORD *)(v0 + 32));
        result = specialized Set._Variant.insert(_:)(&v22, v10, *((int64_t *)&v10 + 1));
        if ((v11 & 1) != 0)
          goto LABEL_10;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v12 = v20;
        v14 = *(_QWORD *)(v7 + 16);
        v13 = *(_QWORD *)(v7 + 24);
        v15 = v14 + 1;
        if (v14 >= v13 >> 1)
        {
          result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          v12 = v20;
          v15 = v14 + 1;
        }
        v6 = v9 + 1;
        *(_QWORD *)(v7 + 16) = v15;
        *(_OWORD *)(v7 + 16 * v14 + 32) = v12;
        if (v3 - 1 == v9)
        {
LABEL_19:
          *(_QWORD *)(v0 + 72) = v7;
          swift_bridgeObjectRelease();
          v16 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v0 + 80) = v16;
          if (v16)
          {
            *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4AF8];
            *(_QWORD *)(v0 + 88) = 0;
            v17 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 32);
            v18 = SRSmartRepliesManager.actionMetadataController.getter();
            *(_QWORD *)(v0 + 96) = v18;
            v21 = (uint64_t (*)(_QWORD, uint64_t))(**(int **)(*(_QWORD *)v18 + 304)
                                                          + *(_QWORD *)(*(_QWORD *)v18 + 304));
            v19 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 104) = v19;
            *v19 = v0;
            v19[1] = SRSmartRepliesManager.canonicalRequestActionsMapper(for:actionTypesAndPOVs:);
            return v21(*(_QWORD *)(v0 + 48), v17);
          }
          swift_release();
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
        }
      }
    }
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  objc_super *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, uint64_t);
  uint64_t v28;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = v1;
    MEMORY[0x24957E0E4]();
    if (*(_QWORD *)((*(_QWORD *)(v0 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  v3 = *(_QWORD *)(v0 + 88) + 1;
  if (v3 != *(_QWORD *)(v0 + 80))
  {
    *(_QWORD *)(v0 + 88) = v3;
    v20 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 16 * v3 + 32);
    v21 = SRSmartRepliesManager.actionMetadataController.getter();
    *(_QWORD *)(v0 + 96) = v21;
    v27 = (uint64_t (*)(_QWORD, uint64_t))(**(int **)(*(_QWORD *)v21 + 304)
                                                  + *(_QWORD *)(*(_QWORD *)v21 + 304));
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v22;
    *v22 = v0;
    v22[1] = SRSmartRepliesManager.canonicalRequestActionsMapper(for:actionTypesAndPOVs:);
    return v27(*(_QWORD *)(v0 + 48), v20);
  }
  swift_release();
  v4 = *(_QWORD *)(v0 + 40);
  v28 = MEMORY[0x24BEE4AF8];
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v5)
      goto LABEL_8;
LABEL_23:
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v23);
  }
  swift_bridgeObjectRetain_n();
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    goto LABEL_23;
LABEL_8:
  if (v5 >= 1)
  {
    v7 = 0;
    v24 = (objc_super *)(v0 + 16);
    v25 = v0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (_BYTE *)MEMORY[0x24957E42C](v7, v4);
      else
        v8 = *(id *)(v4 + 8 * v7 + 32);
      v9 = v8;
      v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation + 8];
      if (v10)
      {
        v26 = *(_QWORD *)&v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation];
        v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type];
        v12 = *(_QWORD *)&v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution];
        v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution + 8];
        v14 = v5;
        v15 = v8[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType];
        v16 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionSuggestion());
        *(_QWORD *)&v16[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_type] = v11;
        v17 = &v16[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_attribution];
        *v17 = v12;
        v17[1] = v13;
        v16[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_isRichSuggestion] = v15;
        v5 = v14;
        *(_QWORD *)&v16[OBJC_IVAR____TtC12SmartReplies30SRSmartRepliesActionSuggestion_metadata] = v9;
        v18 = &v16[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_title];
        *v18 = v26;
        v18[1] = v10;
        v0 = v25;
        v16[OBJC_IVAR____TtC12SmartReplies24SRSmartRepliesSuggestion_isDynamicSuggestion] = 1;
        v19 = type metadata accessor for SRSmartRepliesSuggestion();
        *(_QWORD *)(v25 + 16) = v16;
        *(_QWORD *)(v25 + 24) = v19;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (-[objc_super init](v24, sel_init))
        {
          MEMORY[0x24957E0E4]();
          if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {

      }
      ++v7;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    v23 = v28;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t SRSmartRepliesManager.canonicalRequestActionsMapper(for:actionTypesAndPOVs:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.predictUsingResponseKitRegex(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t SRSmartRepliesManager.predictUsingResponseKitRegex(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v16;
  _QWORD *v17;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 128)) + 0x220))();
  v4 = v3;
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v6 = v2;
    v7 = *(_QWORD **)(v0 + 128);
    v8 = SRSmartRepliesManager.rkManager.getter();
    *(_QWORD *)(v0 + 144) = v8;
    v9 = MEMORY[0x24957DF1C](v6, v4);
    *(_QWORD *)(v0 + 152) = v9;
    v10 = swift_bridgeObjectRelease();
    v11 = (*(uint64_t (**)(uint64_t))((*v1 & *v7) + 0x178))(v10);
    if (v12)
    {
      v13 = MEMORY[0x24957DF1C](v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = 0;
    }
    *(_QWORD *)(v0 + 160) = v13;
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 168) = isa;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = SRSmartRepliesManager.predictUsingResponseKitRegex(for:);
    v16 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v17 = (_QWORD *)(v0 + 80);
    v17[1] = 0x40000000;
    v17[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned RKResponse?) -> () with result type RKResponse?;
    v17[3] = &block_descriptor_8;
    v17[4] = v16;
    objc_msgSend(v8, sel_responseWithAttributesMatchingProactiveGrammarForMessage_languageID_kbdInputModes_completionBlock_, v9, v13, isa, v17);
    return swift_continuation_await();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8], 0);
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = *(void **)(v0 + 160);
  v1 = *(void **)(v0 + 168);
  v3 = *(void **)(v0 + 152);
  v4 = *(void **)(v0 + 120);

  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, sel_category);
    if (v6
      && ((v7 = v6,
           v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
           v10 = v9,
           v7,
           v8 == 0x6F72507972657551)
        ? (v11 = v10 == 0xEE00657669746361)
        : (v11 = 0),
          v11))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_14;
    }
    v14 = objc_msgSend(v5, sel_attributes);
    if (v14)
    {
      v15 = v14;
      v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v17 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v16);
      swift_bridgeObjectRelease();
      if (v17)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SRSmartRepliesActionInfo>);
        v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_247656500;
        v18 = SRSmartRepliesManager.actionMetadataController.getter();
        (*(void (**)(unint64_t))(*(_QWORD *)v18 + 312))(v17);
        swift_bridgeObjectRelease();
        swift_release();
LABEL_15:

        return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v12, 0);
      }
    }
LABEL_14:
    v12 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v12 = MEMORY[0x24BEE4AF8];
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v12, 0);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned RKResponse?) -> () with result type RKResponse?(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  outlined init with take of RepliesToRobotsParameters?((uint64_t)&v6, v3, &demangling cache variable for type metadata for RKResponse?);
  return swift_continuation_resume();
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [String : Double].Iterator._Variant();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [String : Double].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    v27 = v24;
    outlined init with take of Any(v26, v28);
    v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
      result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void SRSmartRepliesManager.logActionInferenceToBiome(for:actionInfo:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_BYTE *)(a2 + 16);
  v15 = static LearnFromThisAppChecker.isLearningAllowed(application:)();
  if ((v15 & 1) == 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.standard);
    v32 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_2475DF000, v32, v27, "Not logging inferences to Biome because learning from Messages is disabled", v28, 2u);
      MEMORY[0x24957ECC0](v28, -1, -1);
    }
    goto LABEL_16;
  }
  v31 = v2;
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a1) + 0x100))(v15);
  if (v17 >> 62)
  {
    v18 = _CocoaArrayWrapper.endIndex.getter();
    if (!v18)
      goto LABEL_22;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v18)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else if ((v17 & 0xC000000000000001) == 0)
  {
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v20 < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v21 = *(id *)(v17 + 8 * v20 + 32);
      goto LABEL_9;
    }
    __break(1u);
    return;
  }
  v21 = MEMORY[0x24957E42C](v20, v17);
LABEL_9:
  v32 = v21;
  swift_bridgeObjectRelease();
  v22 = v16;
  v23 = (*(uint64_t (**)(void))((*v16 & (uint64_t)v32->isa) + 0xB8))();
  if (!v24)
  {
LABEL_16:

    return;
  }
  v25 = v24;
  if ((v14 & 1) != 0)
  {

    goto LABEL_22;
  }
  v29 = v23;
  (*(void (**)(void))((*v22 & (uint64_t)v32->isa) + 0x130))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    Date.init()();
    outlined destroy of Any?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  v30 = SRSmartRepliesManager.biomeManager.getter();
  v33[0] = v12;
  v33[1] = v13;
  specialized BiomeLoggingManager.logActionInferenceToContactActivityStream(for:actionInfo:predictionDate:)(v29, v25, v33, (uint64_t)v11);
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

id SRSmartRepliesManager.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;
  _BYTE v8[168];

  *(_QWORD *)&v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___actionMetadataController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___biomeManager] = 1;
  v1 = &v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___modelResponseManager];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager____lazy_storage___rkManager] = 0;
  v2 = OBJC_IVAR____TtC12SmartReplies21SRSmartRepliesManager_metricsRecorder;
  type metadata accessor for MetricsRecorder();
  v3 = (_QWORD *)swift_allocObject();
  v4 = v0;
  swift_defaultActor_initialize();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[14] = static ModelAssetLoader.shared;
  _s12SmartReplies07MetricsB13ListGeneratedVSgWOi0_((uint64_t)v8);
  outlined init with take of RepliesToRobotsParameters?((uint64_t)v8, (uint64_t)(v3 + 15), &demangling cache variable for type metadata for MetricsRepliesListGenerated?);
  v5 = MEMORY[0x24BEE4AF8];
  v3[37] = 0;
  v3[38] = 0;
  v3[36] = v5;
  *(_QWORD *)&v4[v2] = v3;
  swift_retain();

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for SRSmartRepliesManager();
  return objc_msgSendSuper2(&v7, sel_init);
}

id SRSmartRepliesManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_247645E1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_247645E40()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in SRSmartRepliesManager.suggestions(for:)(void *a1)
{
  uint64_t v1;

  return closure #1 in SRSmartRepliesManager.suggestions(for:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Calendar.Component();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component((unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for SRSmartRepliesCaption();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for SRSmartRepliesCaption();
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::UInt specialized Set._Variant.insert(_:)(_OWORD *a1, int64_t a2, int64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::UInt result;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v7 = *v3;
  result = Hasher.init(_seed:)();
  v9 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = v9 + a3;
  if (__OFADD__(v9, a3))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  Hasher._combine(_:)(result);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v7 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v7 + 48);
    while (*(_QWORD *)(v14 + 16 * v12) != a2 || *(_QWORD *)(v14 + 16 * v12 + 8) != a3)
    {
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_9;
    }
    result = 0;
    v15 = *(_OWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v12);
  }
  else
  {
LABEL_9:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v12, isUniquelyReferenced_nonNull_native);
    *v3 = v17;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v15 = a2;
    *((_QWORD *)&v15 + 1) = a3;
    result = 1;
  }
  *a1 = v15;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesCaption>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for SRSmartRepliesCaption();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component((unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesCaption>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

Swift::UInt specialized _NativeSet.resize(capacity:)()
{
  Swift::UInt *v0;
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt result;
  Swift::UInt v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  Swift::UInt v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::UInt v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesActionInfo>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v5 << 6);
      }
      else
      {
        v16 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_42;
        if (v16 >= v10)
        {
LABEL_35:
          v27 = 1 << *(_BYTE *)(v2 + 32);
          if (v27 > 63)
            bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v6 = -1 << v27;
          v1 = v0;
          *(_QWORD *)(v2 + 16) = 0;
          break;
        }
        v17 = v6[v16];
        ++v5;
        if (!v17)
        {
          v5 = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_35;
          v17 = v6[v5];
          if (!v17)
          {
            v5 = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_35;
            v17 = v6[v5];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
                goto LABEL_35;
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v5 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_43;
                  if (v5 >= v10)
                    goto LABEL_35;
                  v17 = v6[v5];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v5 = v18;
            }
          }
        }
LABEL_23:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v5 << 6);
      }
      v28 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      result = Hasher.init(_seed:)();
      v19 = 3 * v28;
      if ((unsigned __int128)((uint64_t)v28 * (__int128)3) >> 64 != (3 * (uint64_t)v28) >> 63)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      result = v19 + *((_QWORD *)&v28 + 1);
      if (__OFADD__(v19, *((_QWORD *)&v28 + 1)))
        goto LABEL_41;
      Hasher._combine(_:)(result);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
        v13 = v28;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        v13 = v28;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12) = v13;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for Calendar.Component();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component((unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for SRSmartRepliesCaption();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

Swift::UInt specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::UInt result, int64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_16;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v9 > v8)
  {
    result = (Swift::UInt)specialized _NativeSet.copy()();
LABEL_16:
    v15 = *v4;
    *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
    v16 = (int64_t *)(*(_QWORD *)(v15 + 48) + 16 * a3);
    *v16 = v7;
    v16[1] = a2;
    v17 = *(_QWORD *)(v15 + 16);
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
    {
      *(_QWORD *)(v15 + 16) = v19;
      return result;
    }
    __break(1u);
    goto LABEL_19;
  }
  specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
  v10 = *v4;
  result = Hasher.init(_seed:)();
  v11 = 3 * v7;
  if ((unsigned __int128)(v7 * (__int128)3) >> 64 != (3 * v7) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  result = v11 + a2;
  if (!__OFADD__(v11, a2))
  {
    Hasher._combine(_:)(result);
    result = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v12;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v13 = ~v12;
      v14 = *(_QWORD *)(v10 + 48);
      while (*(_QWORD *)(v14 + 16 * a3) != v7 || *(_QWORD *)(v14 + 16 * a3 + 8) != a2)
      {
        a3 = (a3 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          goto LABEL_16;
      }
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesActionInfo>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesCaption>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component((unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesCaption>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::UInt specialized _NativeSet.copyAndResize(capacity:)()
{
  Swift::UInt *v0;
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt result;
  Swift::UInt v4;
  int64_t i;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  Swift::UInt v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::UInt v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SRSmartRepliesActionInfo>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    i = 0;
    v6 = v2 + 56;
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (i << 6);
      }
      else
      {
        v16 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_39;
        if (v16 >= v10)
        {
LABEL_34:
          result = swift_release();
          v1 = v0;
          goto LABEL_36;
        }
        v17 = *(_QWORD *)(v6 + 8 * v16);
        ++i;
        if (!v17)
        {
          i = v16 + 1;
          if (v16 + 1 >= v10)
            goto LABEL_34;
          v17 = *(_QWORD *)(v6 + 8 * i);
          if (!v17)
          {
            i = v16 + 2;
            if (v16 + 2 >= v10)
              goto LABEL_34;
            v17 = *(_QWORD *)(v6 + 8 * i);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v10)
                goto LABEL_34;
              v17 = *(_QWORD *)(v6 + 8 * v18);
              for (i = v18; !v17; ++v18)
              {
                i = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_40;
                if (i >= v10)
                  goto LABEL_34;
                v17 = *(_QWORD *)(v6 + 8 * i);
              }
            }
          }
        }
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (i << 6);
      }
      v27 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      result = Hasher.init(_seed:)();
      v19 = 3 * v27;
      if ((unsigned __int128)((uint64_t)v27 * (__int128)3) >> 64 != (3 * (uint64_t)v27) >> 63)
        break;
      result = v19 + *((_QWORD *)&v27 + 1);
      if (__OFADD__(v19, *((_QWORD *)&v27 + 1)))
        goto LABEL_38;
      Hasher._combine(_:)(result);
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
        v13 = v27;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        v13 = v27;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12) = v13;
      ++*(_QWORD *)(v4 + 16);
    }
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  else
  {
    result = swift_release();
LABEL_36:
    *v1 = v4;
  }
  return result;
}

uint64_t sub_247648CF0()
{
  return objectdestroy_5Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  return closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v7 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0
                 + ((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)
                   + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))
                   + 7) & 0xFFFFFFFFFFFFF8));
  v5 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  *(_QWORD *)(v5 + 400) = v3;
  *(_QWORD *)(v5 + 408) = v4;
  *(_OWORD *)(v5 + 384) = v7;
  return swift_task_switch();
}

uint64_t sub_247648E34()
{
  return objectdestroy_5Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for closure #1 in SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  v5[87] = v3;
  v5[86] = v4;
  v5[85] = v2;
  return swift_task_switch();
}

uint64_t type metadata accessor for SRSmartRepliesManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for SRSmartRepliesManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesManager.suggestions(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SRSmartRepliesManager.suggestions(for:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SRSmartRepliesManager.registerResponse(for:message:time:metadata:language:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SRSmartRepliesManager.registerResponseDisplayed(atIndex:displaySetting:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  return implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(a1, v4);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(a1, a2, v6);
}

uint64_t partial apply for implicit closure #7 in implicit closure #6 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  v3[29] = a1;
  return swift_task_switch();
}

uint64_t partial apply for implicit closure #9 in implicit closure #8 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(a1, a2, v6);
}

uint64_t partial apply for implicit closure #11 in implicit closure #10 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = implicit closure #3 in implicit closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:);
  v5[4] = a1;
  v5[5] = v4;
  return swift_task_switch();
}

uint64_t partial apply for implicit closure #13 in implicit closure #12 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return implicit closure #5 in implicit closure #4 in SRSmartRepliesManager.retrieveActionSuggestions(for:)(a1, a2, v6);
}

uint64_t sub_2476491EC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SRSmartRepliesManager.retrieveActionSuggestions(for:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 56);
  v2 = *(_BYTE *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in SRSmartRepliesCaptioner.captions(imageURLs:onComplete:);
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 64) = v2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v7;
  return swift_task_switch();
}

uint64_t outlined consume of ModelResponseManager?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ActionRegexEvaluator?(uint64_t a1)
{
  outlined consume of ActionRegexEvaluator?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  return a1;
}

uint64_t outlined consume of ActionRegexEvaluator?(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

void outlined consume of BiomeLoggingManager?(id a1)
{
  if (a1 != (id)1)

}

id outlined copy of BiomeLoggingManager?(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_2476493B4()
{
  return objectdestroy_5Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized SRSmartRepliesManager.suggestions(for:completion:)(_QWORD *a1, void *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  _QWORD *v26;
  uint8_t *v27;
  objc_class *v28;
  char *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  objc_class *v36;
  char *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  objc_class *v52;
  char *v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  objc_class *v66;
  char *v67;
  void *v68;
  void (**v69)(_QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  objc_super v79;
  uint64_t v80;
  objc_super v81;
  objc_super v82;
  objc_super v83;

  v77 = a2;
  v78 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v4);
  v74 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for DateComponents();
  v6 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v76 - 8);
  v17 = MEMORY[0x24BDAC7A8](v76);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v75 = (char *)&v69 - v20;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  _Block_copy(a3);
  if ((specialized static NSBundle.isBundleDisallowedForDynamicReplies()() & 1) != 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.standard);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = v78;
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2475DF000, v23, v24, "This bundle does not support dynamic replies. Only canned replies will be provided.", v27, 2u);
      MEMORY[0x24957ECC0](v27, -1, -1);
    }

    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v26) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v28 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v29 = (char *)objc_allocWithZone(v28);
    *(_QWORD *)&v29[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = MEMORY[0x24BEE4AF8];
    v79.receiver = v29;
    v79.super_class = v28;
    v30 = objc_msgSendSuper2(&v79, sel_init);
    goto LABEL_31;
  }
  if ((specialized static NSBundle.isDonatingBundleOnly()() & 1) == 0)
  {
LABEL_24:
    v55 = v78;
    if (objc_msgSend(v78, sel_hasValidReceivedMessages))
    {
      v56 = type metadata accessor for TaskPriority();
      v57 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v74, 1, 1, v56);
      v58 = (_QWORD *)swift_allocObject();
      v58[2] = 0;
      v58[3] = 0;
      v59 = v77;
      v58[4] = v55;
      v58[5] = v59;
      v58[6] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SRSmartRepliesSuggestionResponse) -> ();
      v58[7] = v21;
      v60 = v55;
      v61 = v59;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v57, (uint64_t)&closure #1 in SRSmartRepliesManager.suggestions(for:completion:)partial apply, (uint64_t)v58);
      swift_release();
      return swift_release();
    }
    if (one-time initialization token for standard != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.standard);
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_2475DF000, v63, v64, "Returning early since request has no valid received messages and no sent messages to predict on", v65, 2u);
      MEMORY[0x24957ECC0](v65, -1, -1);
    }

    SRSmartRepliesManager.modelResponseManager.getter();
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v55) + 0x178))();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v66 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v67 = (char *)objc_allocWithZone(v66);
    *(_QWORD *)&v67[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = MEMORY[0x24BEE4AF8];
    v83.receiver = v67;
    v83.super_class = v66;
    v30 = objc_msgSendSuper2(&v83, sel_init);
LABEL_31:
    v68 = v30;
    ((void (**)(_QWORD, id))a3)[2](a3, v30);

    return swift_release();
  }
  v72 = v21;
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v78) + 0x1C0))();
  v31 = v76;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v76) == 1)
  {
    outlined destroy of Any?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Date?);
    if (one-time initialization token for standard != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.standard);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_2475DF000, v33, v34, "Throwing away message donation since it does not have a request date", v35, 2u);
      MEMORY[0x24957ECC0](v35, -1, -1);
    }

    v36 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
    v37 = (char *)objc_allocWithZone(v36);
    *(_QWORD *)&v37[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
    v82.receiver = v37;
    v82.super_class = v36;
    v38 = objc_msgSendSuper2(&v82, sel_init);
    ((void (**)(_QWORD, id))a3)[2](a3, v38);

    return swift_release();
  }
  v69 = a3;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v75, v15, v31);
  Date.init()();
  static Calendar.autoupdatingCurrent.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  v70 = type metadata accessor for Calendar.Component();
  v39 = *(_QWORD *)(v70 - 8);
  v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_247656500;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v39 + 104))(v41 + v40, *MEMORY[0x24BDCF258], v70);
  v71 = specialized Set.init<A>(_:)(v41);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  result = DateComponents.minute.getter();
  v43 = 0;
  if ((v44 & 1) != 0
    || (v43 = result, (result & 0x8000000000000000) == 0)
    || (v43 = -result, !__OFSUB__(0, result)))
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v73);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v45 = *(void (**)(char *, uint64_t))(v16 + 8);
    v46 = v19;
    v47 = v76;
    v45(v46, v76);
    a3 = v69;
    if (v43 >= 4)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.standard);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v51 = 134217984;
        v80 = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_2475DF000, v49, v50, "Throwing away message donation since it's older than %ld minutes", v51, 0xCu);
        MEMORY[0x24957ECC0](v51, -1, -1);
      }

      v52 = (objc_class *)type metadata accessor for SRSmartRepliesSuggestionResponse();
      v53 = (char *)objc_allocWithZone(v52);
      *(_QWORD *)&v53[OBJC_IVAR____TtC12SmartReplies32SRSmartRepliesSuggestionResponse_suggestions] = 0;
      v81.receiver = v53;
      v81.super_class = v52;
      v54 = objc_msgSendSuper2(&v81, sel_init);
      ((void (**)(_QWORD, id))a3)[2](a3, v54);

      v45(v75, v76);
      return swift_release();
    }
    v45(v75, v47);
    v21 = v72;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_247649D8C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SRSmartRepliesSuggestionResponse) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_247649DC0()
{
  return objectdestroy_5Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_5Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();

  a1(*(_QWORD *)(v1 + 56));
  return swift_deallocObject();
}

uint64_t closure #1 in SRSmartRepliesManager.suggestions(for:completion:)partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #2 in SRSmartRepliesCaptioner.normalizedShortCodeMessageText(contactDetail:originalMessageText:);
  return closure #1 in SRSmartRepliesManager.suggestions(for:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t specialized SRSmartRepliesManager.retrieveRepliesToRobots(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1)
    v4 = a1;
  else
    v4 = MEMORY[0x24BEE4AF8];
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v4);
}

uint64_t specialized SRSmartRepliesManager.retrieveRepliesToRobots(for:)()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t (*v4)(void);
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0xE8);
  if (v3() && v3() != 1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  v4 = *(uint64_t (**)(void))((*v2 & **(_QWORD **)(v0 + 16)) + 0x100);
  v5 = v4();
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_5;
LABEL_26:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  }
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_26;
LABEL_5:
  v7 = __OFSUB__(v6, 1);
  v8 = v6 - 1;
  if (v7)
  {
    __break(1u);
  }
  else if ((v5 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = *(id *)(v5 + 8 * v8 + 32);
      goto LABEL_10;
    }
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v16 = result;
    if (result)
      goto LABEL_13;
LABEL_33:
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_34;
  }
  v9 = (_QWORD *)MEMORY[0x24957E42C](v8, v5);
LABEL_10:
  v10 = v9;
  v11 = swift_bridgeObjectRelease();
  v12 = (*(uint64_t (**)(uint64_t))((*v2 & *v10) + 0xA0))(v11);
  v14 = v13;

  *(_QWORD *)(v0 + 24) = v14;
  if (!v14)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  v38 = v14;
  v15 = v4();
  v1 = v15;
  v39 = v12;
  if (v15 >> 62)
    goto LABEL_32;
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v16)
    goto LABEL_33;
LABEL_13:
  if (v16 < 1)
  {
    __break(1u);
    return result;
  }
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v21 = (_QWORD *)MEMORY[0x24957E42C](v18, v1);
    else
      v21 = *(id *)(v1 + 8 * v18 + 32);
    v22 = v21;
    v23 = (*(uint64_t (**)(void))((*v2 & *v21) + 0xB8))();
    v25 = v24;

    if (v25)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v27 = v19[2];
      v26 = v19[3];
      if (v27 >= v26 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v19);
      v19[2] = v27 + 1;
      v20 = &v19[2 * v27];
      v20[4] = v23;
      v20[5] = v25;
      v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
    }
    ++v18;
  }
  while (v16 != v18);
LABEL_34:
  *(_QWORD *)(v0 + 32) = v19;
  v28 = *(_QWORD **)(v0 + 16);
  v29 = swift_bridgeObjectRelease_n();
  v30 = (*(uint64_t (**)(uint64_t))((*v2 & *v28) + 0x178))(v29);
  if (v31)
  {
    v32 = v31;
  }
  else
  {
    v30 = 28261;
    v32 = 0xE200000000000000;
  }
  v33 = MEMORY[0x24957DD9C](v30, v32);
  v35 = v34;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v35;
  v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized RepliesToRobotsManager.replies(_:language:recipients:)
                                                                            + async function pointer to specialized RepliesToRobotsManager.replies(_:language:recipients:));
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v36;
  *v36 = v0;
  v36[1] = specialized SRSmartRepliesManager.retrieveRepliesToRobots(for:);
  return v37(v39, v38, v33, v35, (uint64_t)v19);
}

uint64_t outlined copy of ModelResponseManager?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t NavigateToActionMetadataProvider.metadataItem(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v6(a2);
}

uint64_t protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance NavigateToActionMetadataProvider()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = *v0;
  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:)
                                       + async function pointer to specialized NavigateToActionMetadataProvider.metadataItem(for:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for ActionMetadataProviding.metadataItem(for:) in conformance ETAActionMetadataProvider;
  return v5(v2);
}

uint64_t specialized NavigateToActionMetadataProvider.bestStringForPlacemark(_:)(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v23;
  Swift::String v24;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = objc_msgSend(v1, sel_areasOfInterest);
  if (!v2)
  {
    v11 = objc_msgSend(v1, sel_subLocality);
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      if (one-time initialization token for current != -1)
        swift_once();
      v16._countAndFlagsBits = 0xD00000000000001CLL;
      v24._object = (void *)0xE000000000000000;
      v16._object = (void *)0x800000024765D430;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      v24._countAndFlagsBits = 0;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v17, v24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_247656500;
      *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v15;
      v19 = static String.localizedStringWithFormat(_:_:)();

      goto LABEL_19;
    }

    return 0;
  }
  v3 = v2;
  v4 = MEMORY[0x24BEE0D00];
  v5 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for current != -1)
    swift_once();
  v23._object = (void *)0xE000000000000000;
  v6._object = (void *)0x800000024765D450;
  v6._countAndFlagsBits = 0xD000000000000012;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v7, v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_247656500;
  if (v5[2])
  {
    v10 = v5[4];
    v9 = v5[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 56) = v4;
  *(_QWORD *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (v9)
    v20 = v10;
  else
    v20 = 0;
  if (v9)
    v21 = v9;
  else
    v21 = 0xE000000000000000;
  *(_QWORD *)(v8 + 32) = v20;
  *(_QWORD *)(v8 + 40) = v21;
  v19 = static String.localizedStringWithFormat(_:_:)();

LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t specialized NavigateToActionMetadataProvider.metadataItem(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1[2] = a1;
  type metadata accessor for Date();
  v1[3] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  v1[4] = swift_task_alloc();
  v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a1 + 192) + *(_QWORD *)(*(_QWORD *)a1 + 192));
  v3 = (_QWORD *)swift_task_alloc();
  v1[5] = v3;
  *v3 = v1;
  v3[1] = specialized NavigateToActionMetadataProvider.metadataItem(for:);
  return v5();
}

{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 16);
  v7 = *v1;
  *(_QWORD *)(v7 + 48) = a1;
  swift_task_dealloc();
  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v3 + 200) + *(_QWORD *)(*(_QWORD *)v3 + 200));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 56) = v4;
  *v4 = v7;
  v4[1] = specialized NavigateToActionMetadataProvider.metadataItem(for:);
  return v6(a1);
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized NavigateToActionMetadataProvider.metadataItem(for:)()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  Swift::String v20;

  v1 = *(id *)(v0 + 64);
  if (v1)
  {
    v2 = v1;
    v19 = specialized NavigateToActionMetadataProvider.bestStringForPlacemark(_:)(v1);
    v4 = v3;

    if (one-time initialization token for current != -1)
      swift_once();
    v5 = *(void **)(v0 + 64);
    v6 = *(void **)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v20._object = (void *)0xE000000000000000;
    v9._object = (void *)0x800000024765BCE0;
    v9._countAndFlagsBits = 0xD000000000000010;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v20._countAndFlagsBits = 0;
    v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)static NSBundle.current, v10, v20);
    v12 = v2;
    v13 = specialized NavigateToActionMetadataProvider.bestStringForPlacemark(_:)(v5);
    v15 = v14;

    v16 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
    Date.init()();
    v17 = objc_allocWithZone((Class)type metadata accessor for SRSmartRepliesActionMetadata());
    v1 = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(18, v19, v4, v11._countAndFlagsBits, (uint64_t)v11._object, v13, v15, v7, -1.0, -1.0, 0, v8, 0, 0, 4);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v1);
}

ValueMetadata *type metadata accessor for NavigateToActionMetadataProvider()
{
  return &type metadata for NavigateToActionMetadataProvider;
}

Swift::OpaquePointer_optional __swiftcall SRSmartRepliesSuggestionRequest.senderMessagesAsStrings()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  Swift::Bool v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::OpaquePointer_optional result;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
  if (v2)
  {
    v4 = v2;
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
      v5 = (uint64_t)v6;
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v6 = (void *)swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          goto LABEL_22;
        }
        v7 = 0;
        v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if ((v4 & 0xC000000000000001) != 0)
            v10 = (_QWORD *)MEMORY[0x24957E42C](v7, v4);
          else
            v10 = *(id *)(v4 + 8 * v7 + 32);
          v11 = v10;
          v12 = (*(uint64_t (**)(void))((*v1 & *v10) + 0xA0))();
          v14 = v13;

          if (v14)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
            v16 = v8[2];
            v15 = v8[3];
            if (v16 >= v15 >> 1)
              v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
            v8[2] = v16 + 1;
            v9 = &v8[2 * v16];
            v9[4] = v12;
            v9[5] = v14;
          }
          ++v7;
        }
        while (v5 != v7);
        goto LABEL_19;
      }
    }
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_19:
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
  v8 = 0;
LABEL_20:
  v6 = v8;
LABEL_22:
  result.value._rawValue = v6;
  result.is_nil = v3;
  return result;
}

Swift::OpaquePointer_optional __swiftcall SRSmartRepliesSuggestionRequest.receivedMessagesAsStrings()()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::Bool v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::OpaquePointer_optional result;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
  v3 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = (void *)_CocoaArrayWrapper.endIndex.getter();
    v4 = (uint64_t)v5;
    if (v5)
      goto LABEL_3;
LABEL_16:
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = (void *)swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_16;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_19;
  }
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v10 = (_QWORD *)MEMORY[0x24957E42C](v7, v3);
    else
      v10 = *(id *)(v3 + 8 * v7 + 32);
    v11 = v10;
    v12 = (*(uint64_t (**)(void))((*v1 & *v10) + 0xA0))();
    v14 = v13;

    if (v14)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
      v8[2] = v16 + 1;
      v9 = &v8[2 * v16];
      v9[4] = v12;
      v9[5] = v14;
    }
    ++v7;
  }
  while (v4 != v7);
LABEL_17:
  swift_bridgeObjectRelease_n();
  v5 = v8;
LABEL_19:
  result.value._rawValue = v5;
  result.is_nil = v6;
  return result;
}

Class @objc SRSmartRepliesSuggestionRequest.senderMessagesAsStrings()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  NSArray v6;

  v4 = a1;
  v5 = a3();

  if (v5)
  {
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

Swift::Bool __swiftcall SRSmartRepliesSuggestionRequest.hasValidReceivedMessages()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v1 = type metadata accessor for CharacterSet();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))(v3);
  if (v7 >> 62)
    v8 = _CocoaArrayWrapper.endIndex.getter();
  else
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = swift_bridgeObjectRelease();
  if (!v8)
  {
    v10 = (*(uint64_t (**)(uint64_t))((*v6 & *v0) + 0x148))(v9);
    v11 = v10 ? v10 : MEMORY[0x24BEE4AF8];
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v12)
      return 0;
  }
  v13 = objc_msgSend(v0, sel_receivedMessagesAsStrings);
  if (v13)
  {
    v14 = v13;
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v25[0] = v15;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v16 = BidirectionalCollection<>.joined(separator:)();
    v18 = v17;
    swift_bridgeObjectRelease();
    v25[0] = v16;
    v25[1] = v18;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    v19 = StringProtocol.trimmingCharacters(in:)();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    swift_bridgeObjectRelease();
    v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v22 = 0;
    v21 = 0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  v23 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v23 = v22;
  return v23 != 0;
}

Swift::Int __swiftcall String.lengthBin()()
{
  Swift::Int result;
  float v1;
  float v2;

  result = String.count.getter();
  v1 = (float)result / 5.0;
  if (result >= 300)
    v1 = 60.0;
  v2 = ceilf(v1);
  if ((~LODWORD(v2) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 < 9.2234e18)
    return (uint64_t)v2;
LABEL_9:
  __break(1u);
  return result;
}

Swift::Int __swiftcall String.emojiCountBin()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  _QWORD v16[4];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for Unicode.Scalar.Properties();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v3 & 0xFFFFFFFFFFFFLL;
  v16[1] = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v2) & 0xF;
  else
    v9 = v3 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0.0;
    do
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v2 & 0x2000000000000000) != 0)
        {
          v16[2] = v3;
          v16[3] = v2 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      v10 += v12;
      Unicode.Scalar.properties.getter();
      v13 = Unicode.Scalar.Properties.isEmoji.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((v13 & 1) != 0)
        v11 = v11 + 1.0;
    }
    while (v10 < v9);
    result = swift_bridgeObjectRelease();
    v14 = fminf(v11, 300.0);
  }
  else
  {
    v14 = 0.0;
  }
  v15 = ceilf(v14 / 3.0);
  if ((~LODWORD(v15) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v15 <= -9.2234e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v15 < 9.2234e18)
    return (uint64_t)v15;
LABEL_24:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of CoreAnalyticsEvent.sendEvent()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

id static NSBundle.smartRepliesBundle()()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x24957DF1C](0xD000000000000016, 0x800000024765BD20);
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  return v1;
}

uint64_t static NSBundle.isSmartRepliesTester()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD000000000000029 && v4 == 0x800000024765D470)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t static NSBundle.bundleIdentifier()()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t specialized static NSBundle.isDonatingBundleOnly()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD00000000000002CLL && v4 == 0x800000024765D4C0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t specialized static NSBundle.isBundleDisallowedForDynamicReplies()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD00000000000001CLL && v4 == 0x800000024765D4A0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void __swiftcall MetricsMessageTopicExtractionResult.init(message:summary:topic:predictionLatency:trialDeploymentId:trialExperimentId:trialTreatmentId:)(SmartReplies::MetricsMessageTopicExtractionResult *__return_ptr retstr, Swift::String message, Swift::String_optional summary, Swift::String_optional topic, Swift::Float predictionLatency, Swift::String_optional trialDeploymentId, Swift::String_optional trialExperimentId, Swift::String_optional trialTreatmentId)
{
  __int128 v9;
  __int128 v10;
  _OWORD v11[5];

  specialized MetricsMessageTopicExtractionResult.init(message:summary:topic:predictionLatency:trialDeploymentId:trialExperimentId:trialTreatmentId:)((uint64_t)summary.value._object, (uint64_t)topic.value._object, trialDeploymentId.value._countAndFlagsBits, (unint64_t)trialDeploymentId.value._object, (uint64_t)v11, predictionLatency, trialExperimentId.value._countAndFlagsBits, (unint64_t)trialExperimentId.value._object, trialTreatmentId.value._countAndFlagsBits, (unint64_t)trialTreatmentId.value._object);
  v9 = v11[3];
  *(_OWORD *)&retstr->trialExperimentId._object = v11[2];
  *(_OWORD *)&retstr->trialTreatmentId._object = v9;
  *(_OWORD *)&retstr->summaryCharacterCount = v11[4];
  v10 = v11[1];
  *(_OWORD *)&retstr->summaryDetected = v11[0];
  *(_OWORD *)&retstr->trialDeploymentId._object = v10;
}

Swift::Void __swiftcall MetricsMessageTopicExtractionResult.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_247658630;
  *(_QWORD *)(inited + 32) = 0x447972616D6D7573;
  *(_QWORD *)(inited + 40) = 0xEF64657463657465;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "topicDetected");
  *(_WORD *)(inited + 70) = -4864;
  *(NSNumber *)(inited + 72) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000011;
  *(_QWORD *)(inited + 88) = 0x800000024765C4D0;
  *(NSNumber *)(inited + 96) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000011;
  *(_QWORD *)(inited + 112) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 120) = MEMORY[0x24957DF1C](v0[1], v0[2]);
  *(_QWORD *)(inited + 128) = 0xD000000000000011;
  *(_QWORD *)(inited + 136) = 0x800000024765C510;
  *(_QWORD *)(inited + 144) = MEMORY[0x24957DF1C](v0[3], v0[4]);
  *(_QWORD *)(inited + 152) = 0xD000000000000010;
  *(_QWORD *)(inited + 160) = 0x800000024765C530;
  *(_QWORD *)(inited + 168) = MEMORY[0x24957DF1C](v0[5], v0[6]);
  *(_QWORD *)(inited + 176) = 0xD000000000000015;
  *(_QWORD *)(inited + 184) = 0x800000024765D4F0;
  *(NSNumber *)(inited + 192) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 200) = 0xD000000000000015;
  *(_QWORD *)(inited + 208) = 0x800000024765D510;
  *(NSNumber *)(inited + 216) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 224) = 0xD000000000000013;
  *(_QWORD *)(inited + 232) = 0x800000024765D530;
  *(NSNumber *)(inited + 240) = Int._bridgeToObjectiveC()();
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD000000000000032, 0x800000024765D550);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  aBlock[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_9;
  v5 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

uint64_t specialized MetricsMessageTopicExtractionResult.init(message:summary:topic:predictionLatency:trialDeploymentId:trialExperimentId:trialTreatmentId:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, uint64_t a3@<X6>, unint64_t a4@<X7>, uint64_t a5@<X8>, float a6@<S0>, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = String.count.getter();
  result = swift_bridgeObjectRelease();
  if (a1)
  {
    v16 = String.count.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  if (a2)
  {
    v17 = String.count.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v17 = 0;
  }
  *(_BYTE *)a5 = a1 != 0;
  *(_BYTE *)(a5 + 1) = a2 != 0;
  *(float *)(a5 + 4) = a6;
  v18 = 0xE000000000000000;
  if (a10)
    v19 = a10;
  else
    v19 = 0xE000000000000000;
  if (a10)
    v20 = a9;
  else
    v20 = 0;
  if (a8)
    v21 = a8;
  else
    v21 = 0xE000000000000000;
  if (a8)
    v22 = a7;
  else
    v22 = 0;
  if (a4)
    v18 = a4;
  v23 = a3;
  if (!a4)
    v23 = 0;
  *(_QWORD *)(a5 + 8) = v23;
  *(_QWORD *)(a5 + 16) = v18;
  *(_QWORD *)(a5 + 24) = v22;
  *(_QWORD *)(a5 + 32) = v21;
  *(_QWORD *)(a5 + 40) = v20;
  *(_QWORD *)(a5 + 48) = v19;
  *(_QWORD *)(a5 + 56) = v24;
  *(_QWORD *)(a5 + 64) = v16;
  *(_QWORD *)(a5 + 72) = v17;
  return result;
}

uint64_t sub_24764B98C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t destroy for MetricsMessageTopicExtractionResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsMessageTopicExtractionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsMessageTopicExtractionResult(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for MetricsMessageTopicExtractionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsMessageTopicExtractionResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsMessageTopicExtractionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsMessageTopicExtractionResult()
{
  return &type metadata for MetricsMessageTopicExtractionResult;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t MetricsRepliesDisplayed.init(repliesListGenerated:displaySetting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[168];
  _QWORD v48[21];
  _BYTE v49[176];

  outlined init with take of MetricsRepliesListGenerated?(a1, (uint64_t)v47);
  outlined init with take of MetricsRepliesListGenerated?((uint64_t)v47, (uint64_t)v49);
  outlined init with take of MetricsRepliesListGenerated?(a1, (uint64_t)v48);
  if (_s12SmartReplies07MetricsB13ListGeneratedVSgWOg((uint64_t)v48) == 1)
  {
    v7 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v8 = 0xE000000000000000;
    v9 = 0xE000000000000000;
    v10 = 0xE000000000000000;
    v11 = 0xE000000000000000;
    v12 = 0xE000000000000000;
    v13 = 0xE000000000000000;
  }
  else
  {
    v27 = v48[0];
    outlined init with take of MetricsRepliesListGenerated?((uint64_t)v49, (uint64_t)v29);
    v25 = v30;
    v26 = v31;
    v13 = v34;
    v23 = v33;
    v24 = v32;
    v12 = v36;
    v11 = v38;
    v21 = v37;
    v22 = v35;
    v10 = v40;
    v9 = v42;
    v19 = v41;
    v20 = v39;
    v7 = v45;
    v17 = v44;
    v18 = v43;
    v8 = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  result = outlined release of MetricsRepliesListGenerated?(a1);
  v15 = a2;
  if (!a3)
    v15 = 0;
  v16 = 0xE000000000000000;
  if (a3)
    v16 = a3;
  *a4 = v27;
  a4[1] = v26;
  a4[2] = v25;
  a4[3] = v24;
  a4[4] = v23;
  a4[5] = v13;
  a4[6] = v22;
  a4[7] = v12;
  a4[8] = v21;
  a4[9] = v11;
  a4[10] = v20;
  a4[11] = v10;
  a4[12] = v19;
  a4[13] = v9;
  a4[14] = v18;
  a4[15] = v17;
  a4[16] = v7;
  a4[17] = v8;
  a4[18] = v15;
  a4[19] = v16;
  return result;
}

Swift::Void __swiftcall MetricsRepliesDisplayed.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_247657110;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x800000024765C450;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000017;
  *(_QWORD *)(inited + 64) = 0x800000024765C470;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000016;
  *(_QWORD *)(inited + 88) = 0x800000024765C490;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 112) = 0x800000024765C4B0;
  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0x4C74736575716572;
  *(_QWORD *)(inited + 136) = 0xEF65676175676E61;
  *(_QWORD *)(inited + 144) = MEMORY[0x24957DF1C](v0[4], v0[5]);
  *(_QWORD *)(inited + 152) = 0x6D614E6C65646F6DLL;
  *(_QWORD *)(inited + 160) = 0xE900000000000065;
  *(_QWORD *)(inited + 168) = MEMORY[0x24957DF1C](v0[6], v0[7]);
  *(_QWORD *)(inited + 176) = 0xD000000000000011;
  *(_QWORD *)(inited + 184) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 192) = MEMORY[0x24957DF1C](v0[8], v0[9]);
  *(_QWORD *)(inited + 200) = 0xD000000000000011;
  *(_QWORD *)(inited + 208) = 0x800000024765C510;
  *(_QWORD *)(inited + 216) = MEMORY[0x24957DF1C](v0[10], v0[11]);
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x800000024765C530;
  *(_QWORD *)(inited + 240) = MEMORY[0x24957DF1C](v0[12], v0[13]);
  *(_QWORD *)(inited + 248) = 0xD000000000000017;
  *(_QWORD *)(inited + 256) = 0x800000024765C550;
  *(NSNumber *)(inited + 264) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 272) = 0xD000000000000013;
  *(_QWORD *)(inited + 280) = 0x800000024765C570;
  *(NSNumber *)(inited + 288) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 296) = 0xD000000000000013;
  *(_QWORD *)(inited + 304) = 0x800000024765C590;
  *(_QWORD *)(inited + 312) = MEMORY[0x24957DF1C](v0[16], v0[17]);
  strcpy((char *)(inited + 320), "displaySetting");
  *(_BYTE *)(inited + 335) = -18;
  *(_QWORD *)(inited + 336) = MEMORY[0x24957DF1C](v0[18], v0[19]);
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD00000000000001ALL, 0x800000024765D590);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  aBlock[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_10;
  v5 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

uint64_t sub_24764C130()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t destroy for MetricsRepliesDisplayed()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsRepliesDisplayed(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsRepliesDisplayed(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for MetricsRepliesDisplayed(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsRepliesDisplayed(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsRepliesDisplayed(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsRepliesDisplayed()
{
  return &type metadata for MetricsRepliesDisplayed;
}

id SRSmartRepliesActionMetadata.__allocating_init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, char a11, __int128 a12, uint64_t a13, uint64_t a14)
{
  objc_class *v14;
  id v23;

  v23 = objc_allocWithZone(v14);
  return SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, *((uint64_t *)&a12 + 1), a13, a14);
}

unint64_t SRSmartRepliesActionAttributionSource.init(rawValue:)(unint64_t a1)
{
  return specialized SRSmartRepliesActionAttributionSource.init(rawValue:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SRSmartRepliesActionAttributionSource@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = specialized SRSmartRepliesActionAttributionSource.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t SRSmartRepliesActionMetadata.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type);
}

uint64_t SRSmartRepliesActionMetadata.title.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title);
}

uint64_t SRSmartRepliesActionMetadata.attribution.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution);
}

uint64_t SRSmartRepliesActionMetadata.stringRepresentation.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation);
}

uint64_t SRSmartRepliesActionMetadata.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_date;
  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SRSmartRepliesActionMetadata.hasRichActionType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType);
}

uint64_t SRSmartRepliesActionMetadata.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Date?(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url, a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
}

double SRSmartRepliesActionMetadata.locationLatitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude);
}

double SRSmartRepliesActionMetadata.locationLongitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude);
}

id @objc SRSmartRepliesActionMetadata.title.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    swift_bridgeObjectRetain();
    v6 = (void *)MEMORY[0x24957DF1C](v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

uint64_t SRSmartRepliesActionMetadata.imageName.getter()
{
  return SRSmartRepliesConversationTurn.senderID.getter(&OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName);
}

uint64_t SRSmartRepliesActionMetadata.attributionSource.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource);
}

id SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _BYTE *v15;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  objc_super v28;

  *(_QWORD *)&v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type] = a1;
  v19 = &v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title];
  *v19 = a2;
  v19[1] = a3;
  v20 = &v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution];
  *v20 = a4;
  v20[1] = a5;
  v21 = &v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation];
  *v21 = a6;
  v21[1] = a7;
  v22 = &v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_date];
  v23 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, a8, v23);
  v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType] = a11;
  outlined init with copy of Date?(a12, (uint64_t)&v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url], (uint64_t *)&demangling cache variable for type metadata for URL?);
  *(double *)&v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude] = a9;
  *(double *)&v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude] = a10;
  v25 = &v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName];
  *v25 = a13;
  v25[1] = a14;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource] = a15;
  v28.receiver = v15;
  v28.super_class = (Class)type metadata accessor for SRSmartRepliesActionMetadata();
  v26 = objc_msgSendSuper2(&v28, sel_init);
  outlined destroy of Any?(a12, (uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a8, v23);
  return v26;
}

uint64_t static SRSmartRepliesActionMetadata.supportsSecureCoding.getter()
{
  return 1;
}

id SRSmartRepliesActionMetadata.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  id result;
  _QWORD *v22;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v29 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Date();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title + 8);
  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title);
  v28 = v8;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution + 8);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation + 8);
  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation);
  v26 = v10;
  (*(void (**)(_BYTE *, uint64_t))(v13 + 16))(v7, v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_date);
  v24 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType);
  outlined init with copy of Date?(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
  v14 = *(double *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude);
  v15 = *(double *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName + 8);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource);
  v19 = (objc_class *)type metadata accessor for SRSmartRepliesActionMetadata();
  v20 = objc_allocWithZone(v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = SRSmartRepliesActionMetadata.init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)(v28, v27, v9, v26, v11, v25, v12, (uint64_t)v7, v14, v15, v24, (uint64_t)v4, v17, v16, v18);
  v22 = v29;
  v29[3] = v19;
  *v22 = result;
  return result;
}

Swift::Void __swiftcall SRSmartRepliesActionMetadata.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Class isa;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSURL *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  void *v26;
  double v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type);
  v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v8 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title + 8))
    v9 = MEMORY[0x24957DF1C](*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title));
  else
    v9 = 0;
  v10 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution + 8))
    v11 = MEMORY[0x24957DF1C](*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution));
  else
    v11 = 0;
  v12 = (void *)MEMORY[0x24957DF1C](0x7475626972747461, 0xEB000000006E6F69);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation + 8))
    v13 = MEMORY[0x24957DF1C](*(_QWORD *)(v2
                                        + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation));
  else
    v13 = 0;
  v14 = (void *)MEMORY[0x24957DF1C](0xD000000000000014, 0x800000024765D5B0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  isa = Date._bridgeToObjectiveC()().super.isa;
  v16 = (void *)MEMORY[0x24957DF1C](1702125924, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v16);

  v17 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType);
  v18 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D5D0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v17, v18);

  outlined init with copy of Date?(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for URL?);
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) != 1)
  {
    URL._bridgeToObjectiveC()(v21);
    v22 = v23;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
  }
  v24 = (void *)MEMORY[0x24957DF1C](7107189, 0xE300000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v22, v24);
  swift_unknownObjectRelease();

  v25 = *(double *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude);
  v26 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765D5F0);
  -[objc_class encodeDouble:forKey:](with.super.isa, sel_encodeDouble_forKey_, v26, v25);

  v27 = *(double *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude);
  v28 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D610);
  -[objc_class encodeDouble:forKey:](with.super.isa, sel_encodeDouble_forKey_, v28, v27);

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName + 8))
    v29 = MEMORY[0x24957DF1C](*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName));
  else
    v29 = 0;
  v30 = (void *)MEMORY[0x24957DF1C](0x6D614E6567616D69, 0xE900000000000065);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);
  swift_unknownObjectRelease();

  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource);
  v31 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v32 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D630);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v31, v32);
  swift_unknownObjectRelease();

}

id SRSmartRepliesActionMetadata.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SRSmartRepliesActionMetadata.init(coder:)(a1);
}

id SRSmartRepliesActionMetadata.init(coder:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  int v24;
  NSDate v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  NSURL *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  double v39;
  double v40;
  void *v41;
  double v42;
  double v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[24];
  uint64_t v65;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v55 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)MEMORY[0x24957DF1C](1701869940, 0xE400000000000000);
  v12 = objc_msgSend(a1, sel_decodeIntegerForKey_, v11);

  v58 = specialized SRSmartRepliesActionType.init(rawValue:)((unint64_t)v12);
  v57 = v13;
  v14 = (void *)MEMORY[0x24957DF1C](0x656C746974, 0xE500000000000000);
  v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v56 = MEMORY[0x24957DF1C](v60, v61);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v56 = 0;
LABEL_9:
  v16 = (void *)MEMORY[0x24957DF1C](0x7475626972747461, 0xEB000000006E6F69);
  v17 = objc_msgSend(a1, sel_decodeObjectForKey_, v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v18 = (void *)MEMORY[0x24957DF1C](v60, v61);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v18 = 0;
LABEL_17:
  v19 = (void *)MEMORY[0x24957DF1C](0xD000000000000014, 0x800000024765D5B0);
  v20 = objc_msgSend(a1, sel_decodeObjectForKey_, v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v21 = (void *)MEMORY[0x24957DF1C](v60, v61);
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v21 = 0;
LABEL_25:
  v22 = (void *)MEMORY[0x24957DF1C](1702125924, 0xE400000000000000);
  v23 = objc_msgSend(a1, sel_decodeObjectForKey_, v22);

  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    v24 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, v24 ^ 1u, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      goto LABEL_33;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  Date.init()();
  outlined destroy of Any?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_33:
  v25.super.isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D5D0);
  v27 = objc_msgSend(a1, sel_decodeBoolForKey_, v26);

  v28 = (void *)MEMORY[0x24957DF1C](7107189, 0xE300000000000000);
  v29 = objc_msgSend(a1, sel_decodeObjectForKey_, v28);

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  v30 = v55;
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    v31 = type metadata accessor for URL();
    v32 = swift_dynamicCast();
    v33 = *(_QWORD *)(v31 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, v32 ^ 1u, 1, v31);
    v35 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31) != 1)
    {
      URL._bridgeToObjectiveC()(v34);
      v35 = v36;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v31);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v37 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v30, 1, 1, v37);
    v35 = 0;
  }
  v38 = (void *)MEMORY[0x24957DF1C](0xD000000000000010, 0x800000024765D5F0);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v38);
  v40 = v39;

  v41 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D610);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v41);
  v43 = v42;

  v44 = (void *)MEMORY[0x24957DF1C](0x6D614E6567616D69, 0xE900000000000065);
  v45 = objc_msgSend(a1, sel_decodeObjectForKey_, v44);

  if (v45)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v62, (uint64_t)v64);
  if (v65)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v46 = (void *)MEMORY[0x24957DF1C](v60, v61);
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v46 = 0;
LABEL_48:
  v47 = (void *)MEMORY[0x24957DF1C](0xD000000000000011, 0x800000024765D630);
  v48 = objc_msgSend(a1, sel_decodeIntegerForKey_, v47);

  if ((unint64_t)v48 >= 6)
    v49 = 0;
  else
    v49 = v48;
  if ((v57 & 1) != 0)
    v50 = 0;
  else
    v50 = v58;
  v51 = (void *)v56;
  v52 = objc_msgSend(v59, sel_initWithType_title_attribution_stringRepresentation_date_hasRichActionType_url_locationLatitude_locationLongitude_imageName_attributionSource_, v50, v56, v18, v21, v25.super.isa, v27, v40, v43, v35, v46, v49);

  return v52;
}

BOOL SRSmartRepliesActionMetadata.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  _BYTE v33[24];
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL?, URL?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Date?(a1, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v34)
  {
    type metadata accessor for SRSmartRepliesActionMetadata();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v14 = v32;
      if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type) != *(_QWORD *)&v32[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_type])
        goto LABEL_44;
      v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title + 8);
      v16 = *(_QWORD *)&v32[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title + 8];
      if (v15)
      {
        if (!v16
          || (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title) != *(_QWORD *)&v32[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_title]
           || v15 != v16)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_44;
        }
      }
      else if (v16)
      {
        goto LABEL_44;
      }
      v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution + 8);
      v18 = *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution + 8];
      if (v17)
      {
        if (!v18
          || (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution) != *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attribution]
           || v17 != v18)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_44;
        }
      }
      else if (v18)
      {
        goto LABEL_44;
      }
      v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation + 8);
      v20 = *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation + 8];
      if (v19)
      {
        if (!v20
          || (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation) != *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_stringRepresentation]
           || v19 != v20)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_44;
        }
      }
      else if (v20)
      {
        goto LABEL_44;
      }
      if ((static Date.== infix(_:_:)() & 1) == 0
        || *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType) != v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_hasRichActionType])
      {
        goto LABEL_44;
      }
      v21 = (uint64_t)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url];
      v22 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of Date?(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_url, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for URL?);
      outlined init with copy of Date?(v21, v22, (uint64_t *)&demangling cache variable for type metadata for URL?);
      v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v23((uint64_t)v13, 1, v4) == 1)
      {
        if (v23(v22, 1, v4) == 1)
        {
          outlined destroy of Any?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for URL?);
LABEL_35:
          if (*(double *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude) == *(double *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLatitude]
            && *(double *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude) == *(double *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_locationLongitude])
          {
            v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName + 8);
            v27 = *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName + 8];
            if (v26)
            {
              if (v27
                && (*(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName) == *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_imageName]
                 && v26 == v27
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              {
                goto LABEL_42;
              }
            }
            else if (!v27)
            {
LABEL_42:
              v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource);
              v29 = *(_QWORD *)&v14[OBJC_IVAR____TtC12SmartReplies28SRSmartRepliesActionMetadata_attributionSource];

              return v28 == v29;
            }
          }
LABEL_44:

          return 0;
        }
      }
      else
      {
        outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for URL?);
        if (v23(v22, 1, v4) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v22, v4);
          lazy protocol witness table accessor for type URL and conformance URL();
          v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          v25 = *(void (**)(char *, uint64_t))(v5 + 8);
          v25(v7, v4);
          v25(v10, v4);
          outlined destroy of Any?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for URL?);
          if ((v24 & 1) == 0)
            goto LABEL_44;
          goto LABEL_35;
        }
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for (URL?, URL?));
      goto LABEL_44;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

id SRSmartRepliesActionMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SRSmartRepliesActionMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SRSmartRepliesActionMetadata.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SRSmartRepliesActionMetadata();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t specialized SRSmartRepliesActionAttributionSource.init(rawValue:)(unint64_t result)
{
  if (result > 5)
    return 0;
  return result;
}

uint64_t type metadata accessor for SRSmartRepliesActionMetadata()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SRSmartRepliesActionMetadata;
  if (!type metadata singleton initialization cache for SRSmartRepliesActionMetadata)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type SRSmartRepliesActionAttributionSource and conformance SRSmartRepliesActionAttributionSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SRSmartRepliesActionAttributionSource and conformance SRSmartRepliesActionAttributionSource;
  if (!lazy protocol witness table cache variable for type SRSmartRepliesActionAttributionSource and conformance SRSmartRepliesActionAttributionSource)
  {
    result = MEMORY[0x24957EC18](&protocol conformance descriptor for SRSmartRepliesActionAttributionSource, &type metadata for SRSmartRepliesActionAttributionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SRSmartRepliesActionAttributionSource and conformance SRSmartRepliesActionAttributionSource);
  }
  return result;
}

ValueMetadata *type metadata accessor for SRSmartRepliesActionAttributionSource()
{
  return &type metadata for SRSmartRepliesActionAttributionSource;
}

uint64_t ObjC metadata update function for SRSmartRepliesActionMetadata()
{
  return type metadata accessor for SRSmartRepliesActionMetadata();
}

void type metadata completion function for SRSmartRepliesActionMetadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SRSmartRepliesActionMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadata.__allocating_init(type:title:attribution:stringRepresentation:date:hasRichActionType:url:locationLatitude:locationLongitude:imageName:attributionSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadata.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadata.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SRSmartRepliesActionMetadata.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

void __swiftcall MetricsActionPredicted.init(actionInferencePerformed:predictedActionInfoString:rawScore:otherPredictedActionInfoStrings:)(SmartReplies::MetricsActionPredicted *__return_ptr retstr, SmartReplies::MetricsActionInferenceResult *actionInferencePerformed, Swift::String predictedActionInfoString, Swift::Float rawScore, Swift::OpaquePointer otherPredictedActionInfoStrings)
{
  __int128 v7;
  Swift::String v8;
  __int128 v9;
  Swift::String v10;
  _OWORD v11[9];
  Swift::Int v12;

  specialized MetricsActionPredicted.init(actionInferencePerformed:predictedActionInfoString:rawScore:otherPredictedActionInfoStrings:)(&actionInferencePerformed->componentTriggered._countAndFlagsBits, predictedActionInfoString._countAndFlagsBits, (uint64_t)predictedActionInfoString._object, (uint64_t)otherPredictedActionInfoStrings._rawValue, (uint64_t)v11, rawScore);
  outlined release of MetricsActionInferenceResult((uint64_t)actionInferencePerformed);
  v7 = v11[7];
  *(_OWORD *)&retstr->trialDeploymentId._object = v11[6];
  *(_OWORD *)&retstr->trialExperimentId._object = v7;
  *(_OWORD *)&retstr->trialTreatmentId._object = v11[8];
  retstr->promptEmojiCountBin = v12;
  v8 = (Swift::String)v11[3];
  retstr->otherPredictedActionsInfo = (Swift::String)v11[2];
  retstr->requestLanguage = v8;
  v9 = v11[5];
  retstr->modelName = (Swift::String)v11[4];
  *(_OWORD *)&retstr->rawScore = v9;
  v10 = (Swift::String)v11[1];
  retstr->componentTriggered = (Swift::String)v11[0];
  retstr->predictedActionInfo = v10;
}

Swift::Void __swiftcall MetricsActionPredicted.sendEvent()()
{
  _QWORD *v0;
  uint64_t inited;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD aBlock[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2476576A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000024765C8E0;
  *(_QWORD *)(inited + 48) = MEMORY[0x24957DF1C](*v0, v0[1]);
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x800000024765C590;
  *(_QWORD *)(inited + 72) = MEMORY[0x24957DF1C](v0[2], v0[3]);
  *(_QWORD *)(inited + 80) = 0xD000000000000019;
  *(_QWORD *)(inited + 88) = 0x800000024765D7D0;
  *(_QWORD *)(inited + 96) = MEMORY[0x24957DF1C](v0[4], v0[5]);
  *(_QWORD *)(inited + 104) = 0x4C74736575716572;
  *(_QWORD *)(inited + 112) = 0xEF65676175676E61;
  *(_QWORD *)(inited + 120) = MEMORY[0x24957DF1C](v0[6], v0[7]);
  *(_QWORD *)(inited + 128) = 0x6D614E6C65646F6DLL;
  *(_QWORD *)(inited + 136) = 0xE900000000000065;
  *(_QWORD *)(inited + 144) = MEMORY[0x24957DF1C](v0[8], v0[9]);
  *(_QWORD *)(inited + 152) = 0x65726F6353776172;
  *(_QWORD *)(inited + 160) = 0xE800000000000000;
  *(NSNumber *)(inited + 168) = Float._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 176) = 0xD000000000000011;
  *(_QWORD *)(inited + 184) = 0x800000024765C4F0;
  *(_QWORD *)(inited + 192) = MEMORY[0x24957DF1C](v0[11], v0[12]);
  *(_QWORD *)(inited + 200) = 0xD000000000000011;
  *(_QWORD *)(inited + 208) = 0x800000024765C510;
  *(_QWORD *)(inited + 216) = MEMORY[0x24957DF1C](v0[13], v0[14]);
  *(_QWORD *)(inited + 224) = 0xD000000000000010;
  *(_QWORD *)(inited + 232) = 0x800000024765C530;
  *(_QWORD *)(inited + 240) = MEMORY[0x24957DF1C](v0[15], v0[16]);
  *(_QWORD *)(inited + 248) = 0xD000000000000017;
  *(_QWORD *)(inited + 256) = 0x800000024765C550;
  *(NSNumber *)(inited + 264) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 272) = 0xD000000000000013;
  *(_QWORD *)(inited + 280) = 0x800000024765C570;
  *(NSNumber *)(inited + 288) = Int._bridgeToObjectiveC()();
  v2 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v3 = (void *)MEMORY[0x24957DF1C](0xD000000000000025, 0x800000024765D7F0);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  aBlock[4] = partial apply for closure #1 in MetricsRepliesListGenerated.sendEvent();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_11;
  v5 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

}

uint64_t MetricsActionPredicted.componentTriggered.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.predictedActionInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.otherPredictedActionsInfo.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.requestLanguage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

float MetricsActionPredicted.rawScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 80);
}

uint64_t MetricsActionPredicted.trialDeploymentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.trialExperimentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.trialTreatmentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsActionPredicted.promptCharacterCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t MetricsActionPredicted.promptEmojiCountBin.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>, &demangling cache variable for type metadata for [Double]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, (uint64_t *)&demangling cache variable for type metadata for [String]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Double)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Double));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
  v10 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Double)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ResponseType>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<SRPredictionItem>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SRSmartRepliesActionInfo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x24957E54CLL);
}

uint64_t specialized MetricsActionPredicted.init(actionInferencePerformed:predictedActionInfoString:rawScore:otherPredictedActionInfoStrings:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27;

  v9 = *a1;
  v10 = a1[1];
  v27 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v27);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_release();
  v15 = a1[3];
  v14 = a1[4];
  v16 = a1[5];
  v17 = a1[6];
  v18 = a1[9];
  v19 = a1[10];
  v20 = a1[11];
  v21 = a1[12];
  v22 = a1[13];
  v23 = a1[14];
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v10;
  *(_QWORD *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 40) = v13;
  *(_QWORD *)(a5 + 48) = v15;
  *(_QWORD *)(a5 + 56) = v14;
  *(_QWORD *)(a5 + 64) = v16;
  *(_QWORD *)(a5 + 72) = v17;
  *(float *)(a5 + 80) = a6;
  *(_QWORD *)(a5 + 88) = v18;
  *(_QWORD *)(a5 + 96) = v19;
  *(_QWORD *)(a5 + 104) = v20;
  *(_QWORD *)(a5 + 112) = v21;
  *(_QWORD *)(a5 + 120) = v22;
  *(_QWORD *)(a5 + 128) = v23;
  *(_OWORD *)(a5 + 136) = *(_OWORD *)(a1 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_247650790()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t destroy for MetricsActionPredicted()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsActionPredicted(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsActionPredicted(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t assignWithTake for MetricsActionPredicted(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsActionPredicted()
{
  return &type metadata for MetricsActionPredicted;
}

uint64_t srSmartRepliesXPCClientInterface.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Class isa;
  uint64_t result;

  objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_2576B8A00);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_247658890;
  v1 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSArray.Type);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = type metadata accessor for SRSmartRepliesConversationTurn();
  *(_QWORD *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SRSmartRepliesConversationTurn.Type);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v0 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString.Type);
  *(_QWORD *)(v0 + 96) = v3;
  v4 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSDate);
  *(_QWORD *)(v0 + 152) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDate.Type);
  *(_QWORD *)(v0 + 128) = v4;
  v5 = objc_allocWithZone(MEMORY[0x24BDBCF20]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_initWithArray_, isa);

  result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  __break(1u);
  return result;
}

uint64_t srSmartRepliesXPCServerInterface.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  uint64_t result;

  objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_2576B8A00);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2476588A0;
  v1 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSDictionary);
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSDictionary.Type);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString.Type);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(v0 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSArray.Type);
  *(_QWORD *)(v0 + 96) = v3;
  v4 = type metadata accessor for SRSmartRepliesPredictionItem();
  *(_QWORD *)(v0 + 152) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SRSmartRepliesPredictionItem.Type);
  *(_QWORD *)(v0 + 128) = v4;
  v5 = type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(v0 + 184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNumber.Type);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = objc_allocWithZone(MEMORY[0x24BDBCF20]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithArray_, isa);

  result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

unint64_t smartRepliesInferenceServiceName.getter()
{
  return 0xD000000000000032;
}

uint64_t dispatch thunk of ActionDataSource.prewarmDataAccessIfNecessary(synchronously:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ActionEventDataSource.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v9[6];

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  v1 = v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar;
  v2 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService) = 0;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC74E8]), sel_init);
  *(_QWORD *)(v0 + 16) = v3;
  if (*(_BYTE *)(v0 + 24) != 1)
  {
    v4 = v3;
    v5 = swift_allocObject();
    swift_weakInit();
    v9[4] = partial apply for closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:);
    v9[5] = v5;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v9[3] = &block_descriptor_12;
    v6 = _Block_copy(v9);
    v7 = v4;
    swift_release();
    objc_msgSend(v7, sel_requestFullAccessToEventsWithCompletion_, v6);
    _Block_release(v6);

  }
  return v0;
}

uint64_t ActionEventDataSource.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar;
  swift_beginAccess();
  outlined init with copy of Calendar?(v9, (uint64_t)v8);
  v10 = type metadata accessor for Calendar();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  outlined destroy of Any?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Calendar?);
  static Calendar.autoupdatingCurrent.getter();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of Calendar?((uint64_t)v6, v9);
  return swift_endAccess();
}

id ActionEventDataSource.suggestionsService.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService))
  {
    v2 = *(id *)(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_serviceForEvents);
    *(_QWORD *)(v0 + v1) = v2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t ActionEventDataSource.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v0 + 24) = 0;
  v1 = v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar;
  v2 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___suggestionsService) = 0;
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC74E8]), sel_init);
  (*(void (**)(_QWORD))(*(_QWORD *)v0 + 216))(0);
  return v0;
}

Swift::Void __swiftcall ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(Swift::Bool synchronously)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, void *);
  void *v34;
  void (*v35)(char, void *);
  uint64_t v36;

  v3 = type metadata accessor for DispatchTimeInterval();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchTime();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v29 - v12;
  if ((*(_BYTE *)(v1 + 24) & 1) == 0)
  {
    if (synchronously)
    {
      v30 = v11;
      v14 = dispatch_group_create();
      dispatch_group_enter(v14);
      v15 = *(void **)(v1 + 16);
      v16 = swift_allocObject();
      swift_weakInit();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v14;
      *(_QWORD *)(v17 + 24) = v16;
      v35 = partial apply for closure #2 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:);
      v36 = v17;
      aBlock = MEMORY[0x24BDAC760];
      v32 = 1107296256;
      v33 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
      v34 = &block_descriptor_12;
      v18 = _Block_copy(&aBlock);
      v19 = v15;
      v20 = v14;
      swift_release();
      objc_msgSend(v19, sel_requestFullAccessToEventsWithCompletion_, v18);
      _Block_release(v18);

      static DispatchTime.now()();
      *v6 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5420], v3);
      MEMORY[0x24957DE74](v10, v6);
      (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
      v21 = *(void (**)(char *, uint64_t))(v30 + 8);
      v21(v10, v7);
      MEMORY[0x24957E24C](v13);
      v21(v13, v7);
      if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
      {
        if (one-time initialization token for standard != -1)
          swift_once();
        v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.standard);
        v23 = Logger.logObject.getter();
        v24 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v25 = 0;
          _os_log_impl(&dword_2475DF000, v23, v24, "ActionEventDataSource timed out trying to request event store access synchronously", v25, 2u);
          MEMORY[0x24957ECC0](v25, -1, -1);

LABEL_11:
          return;
        }

      }
      v23 = v20;
      goto LABEL_11;
    }
    v26 = *(void **)(v1 + 16);
    v27 = swift_allocObject();
    swift_weakInit();
    v35 = partial apply for closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:);
    v36 = v27;
    aBlock = MEMORY[0x24BDAC760];
    v32 = 1107296256;
    v33 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v34 = &block_descriptor_5;
    v28 = _Block_copy(&aBlock);
    v23 = v26;
    swift_release();
    -[NSObject requestFullAccessToEventsWithCompletion:](v23, sel_requestFullAccessToEventsWithCompletion_, v28);
    _Block_release(v28);
    goto LABEL_11;
  }
}

uint64_t sub_24765179C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void closure #1 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(char a1, void *a2)
{
  uint64_t Strong;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  NSObject *oslog;

  if (a2 || (a1 & 1) == 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.standard);
    v5 = a2;
    v6 = a2;
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 8) = 2112;
      if (a2)
      {
        v10 = a2;
        v11 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v11 = 0;
      }
      *v9 = v11;

      _os_log_impl(&dword_2475DF000, oslog, v7, "ActionEventDataSource granted access %{BOOL}d to user Calendar with error: %@", (uint8_t *)v8, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v9, -1, -1);
      MEMORY[0x24957ECC0](v8, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(_BYTE *)(Strong + 24) = 1;
      swift_release();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

void closure #2 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(char a1, void *a2, NSObject *a3)
{
  uint64_t Strong;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;

  if (a2 || (a1 & 1) == 0)
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.standard);
    v7 = a2;
    v8 = a2;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v11 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 8) = 2112;
      if (a2)
      {
        v13 = a2;
        v14 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v14 = 0;
      }
      *v12 = v14;

      _os_log_impl(&dword_2475DF000, v9, v10, "ActionEventDataSource granted access %{BOOL}d to user Calendar with error: %@", (uint8_t *)v11, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v12, -1, -1);
      MEMORY[0x24957ECC0](v11, -1, -1);
    }
    else
    {

    }
  }
  else
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(_BYTE *)(Strong + 24) = 1;
      swift_release();
    }
  }
  dispatch_group_leave(a3);
}

uint64_t sub_247651D1C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(char a1, void *a2)
{
  uint64_t v2;

  closure #2 in ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)(a1, a2, *(NSObject **)(v2 + 16));
}

uint64_t ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 48) = a2;
  return swift_task_switch();
}

uint64_t ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [EKEvent]);
  *v4 = v0;
  v4[1] = ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[EKEvent], Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = ActionEventDataSource.suggestionsService.getter();
  v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  *(_BYTE *)(v11 + v10 + v7) = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [SGEvent]?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_21_0;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v8, sel_allEventsLimitedTo_withCompletion_, 20, v12);
  _Block_release(v12);
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = result;
    if (a2)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.standard);
      v11 = a2;
      v12 = a2;
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v13, v14))
      {

        goto LABEL_31;
      }
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v15 = 138412290;
      v17 = a2;
      v31 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v16 = v31;

      _os_log_impl(&dword_2475DF000, v13, v14, "Error querying for suggested events: %@", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24957ECC0](v16, -1, -1);
      v18 = v15;
LABEL_7:
      MEMORY[0x24957ECC0](v18, -1, -1);
LABEL_31:

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[EKEvent], Never>);
LABEL_38:
      CheckedContinuation.resume(returning:)();
      return swift_release();
    }
    if (!a1)
    {
      if (one-time initialization token for standard == -1)
      {
LABEL_34:
        v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logger.standard);
        v13 = Logger.logObject.getter();
        v29 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v13, v29))
          goto LABEL_31;
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_2475DF000, v13, v29, "Found no upcoming events of interest", v30, 2u);
        v18 = v30;
        goto LABEL_7;
      }
LABEL_41:
      swift_once();
      goto LABEL_34;
    }
    v32 = MEMORY[0x24BEE4AF8];
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      if (v19)
        goto LABEL_11;
    }
    else
    {
      v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_11:
        if (v19 >= 1)
        {
          v20 = 0;
          while (1)
          {
            if ((a1 & 0xC000000000000001) != 0)
              v23 = (id)MEMORY[0x24957E42C](v20, a1);
            else
              v23 = *(id *)(a1 + 8 * v20 + 32);
            v22 = v23;
            v24 = objc_msgSend(v23, sel_toEKEventWithStore_, *(_QWORD *)(v9 + 16));
            if (!v24)
              goto LABEL_16;
            v25 = v24;
            if ((objc_msgSend(v25, sel_isAllDay) & 1) != 0
              || (v26 = objc_msgSend(v25, sel_availability), (a5 & 1) != 0) && (v26 == (id)1 || v26 == (id)-1))
            {

              v21 = v25;
            }
            else
            {
              v27 = objc_msgSend(v25, sel_status);

              if (v27 != (id)3)
              {
                v21 = v25;
                MEMORY[0x24957E0E4]();
                if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                goto LABEL_15;
              }
              v21 = v22;
            }
            v22 = v25;
LABEL_15:

LABEL_16:
            ++v20;

            if (v19 == v20)
              goto LABEL_37;
          }
        }
        __break(1u);
        goto LABEL_41;
      }
    }
LABEL_37:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[EKEvent], Never>);
    goto LABEL_38;
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [SGEvent]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NLGazetteer(0, &lazy cache variable for type metadata for SGEvent);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t ActionEventDataSource.upcomingValidEvents(within:considerAvailability:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  id v41;
  char *v42;
  Class isa;
  Class v44;
  id v45;
  id v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v52;
  int v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  void (*v55)(uint64_t, uint64_t);
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v53 = a2;
  v58 = a1;
  v2 = type metadata accessor for Calendar();
  v61 = *(char **)(v2 - 8);
  v3 = (uint64_t)v61;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v63 = (char *)&v52 - v9;
  v10 = type metadata accessor for Date();
  v62 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v52 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v52 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v52 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DateComponents();
  v65 = *(_QWORD *)(v67 - 8);
  v23 = MEMORY[0x24BDAC7A8](v67);
  v60 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v52 - v25;
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v57(v22, 1, 1, v2);
  v27 = type metadata accessor for TimeZone();
  v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v56(v19, 1, 1, v27);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.minute.setter();
  ActionEventDataSource.calendar.getter((uint64_t)v5);
  Date.init()();
  v66 = v26;
  v28 = v2;
  v29 = (uint64_t)v63;
  Calendar.date(byAdding:to:wrappingComponents:)();
  v30 = v62;
  v64 = *(void (**)(char *, uint64_t))(v62 + 8);
  v64(v15, v10);
  v31 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v61 + 1);
  v61 = v5;
  v55 = v31;
  v31((uint64_t)v5, v28);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v54(v29, 1, v10) == 1)
  {
    outlined destroy of Any?(v29, (uint64_t *)&demangling cache variable for type metadata for Date?);
    v32 = MEMORY[0x24BEE4AF8];
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
    v33(v68, v29, v10);
    v57(v22, 1, 1, v28);
    v56(v19, 1, 1, v27);
    v34 = v60;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    v35 = (uint64_t)v61;
    v36 = v69;
    ActionEventDataSource.calendar.getter((uint64_t)v61);
    Date.init()();
    v37 = (uint64_t)v59;
    Calendar.date(byAdding:to:wrappingComponents:)();
    v64(v15, v10);
    v55(v35, v28);
    if (v54(v37, 1, v10) == 1)
    {
      outlined destroy of Any?(v37, (uint64_t *)&demangling cache variable for type metadata for Date?);
      v38 = *(void (**)(char *, uint64_t))(v65 + 8);
      v39 = v67;
      v38(v34, v67);
      v64(v68, v10);
      v32 = MEMORY[0x24BEE4AF8];
      v38(v66, v39);
    }
    else
    {
      v40 = v52;
      v33(v52, v37, v10);
      v41 = *(id *)(v36 + 16);
      v42 = v68;
      isa = Date._bridgeToObjectiveC()().super.isa;
      v44 = Date._bridgeToObjectiveC()().super.isa;
      v45 = objc_msgSend(v41, sel_predicateForEventsWithStartDate_endDate_calendars_, isa, v44, 0);

      v46 = objc_msgSend(*(id *)(v36 + 16), sel_eventsMatchingPredicate_, v45);
      type metadata accessor for NLGazetteer(0, (unint64_t *)&lazy cache variable for type metadata for EKEvent);
      v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_retain();
      v32 = specialized _ArrayProtocol.filter(_:)(v47, v53 & 1);

      swift_bridgeObjectRelease();
      swift_release();
      v48 = v64;
      v64(v40, v10);
      v49 = *(void (**)(char *, uint64_t))(v65 + 8);
      v50 = v67;
      v49(v34, v67);
      v48(v42, v10);
      v49(v66, v50);
    }
  }
  return v32;
}

uint64_t ActionEventDataSource.currentValidEvents(considerAvailability:)(int a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  id *v41;
  id v42;
  char *v43;
  Class isa;
  Class v45;
  id v46;
  id v47;
  unint64_t v48;
  char *v50;
  int v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  id *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;

  v51 = a1;
  v2 = type metadata accessor for Calendar();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v61 = (char *)&v50 - v9;
  v65 = type metadata accessor for Date();
  v60 = *(_QWORD *)(v65 - 8);
  v10 = MEMORY[0x24BDAC7A8](v65);
  v50 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v50 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v50 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DateComponents();
  v62 = *(_QWORD *)(v22 - 8);
  v63 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v57 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v66 = (char *)&v50 - v25;
  if (((_BYTE)v1[3] & 1) == 0)
    (*((void (**)(uint64_t))*v1 + 27))(1);
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v54(v21, 1, 1, v2);
  v26 = type metadata accessor for TimeZone();
  v59 = v3;
  v27 = v26;
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v53(v18, 1, 1, v26);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.minute.setter();
  v58 = v1;
  ActionEventDataSource.calendar.getter((uint64_t)v5);
  Date.init()();
  v28 = v2;
  v29 = (uint64_t)v61;
  Calendar.date(byAdding:to:wrappingComponents:)();
  v30 = v60;
  v31 = v65;
  v55 = *(void (**)(char *, uint64_t))(v60 + 8);
  v55(v14, v65);
  v59 = *(_QWORD *)(v59 + 8);
  ((void (*)(char *, uint64_t))v59)(v5, v28);
  v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v52(v29, 1, v31) == 1)
  {
    outlined destroy of Any?(v29, (uint64_t *)&demangling cache variable for type metadata for Date?);
    v32 = v63;
    v33 = *(void (**)(char *, uint64_t))(v62 + 8);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
    v34(v64, v29, v31);
    v54(v21, 1, 1, v28);
    v53(v18, 1, 1, v27);
    v35 = v57;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.minute.setter();
    ActionEventDataSource.calendar.getter((uint64_t)v5);
    Date.init()();
    v36 = (uint64_t)v56;
    Calendar.date(byAdding:to:wrappingComponents:)();
    v37 = v65;
    v38 = v55;
    v55(v14, v65);
    ((void (*)(char *, uint64_t))v59)(v5, v28);
    if (v52(v36, 1, v37) != 1)
    {
      v40 = v50;
      v34(v50, v36, v37);
      v41 = v58;
      v42 = v58[2];
      v43 = v64;
      isa = Date._bridgeToObjectiveC()().super.isa;
      v45 = Date._bridgeToObjectiveC()().super.isa;
      v46 = objc_msgSend(v42, sel_predicateForEventsWithStartDate_endDate_calendars_, isa, v45, 0);

      v47 = objc_msgSend(v41[2], sel_eventsMatchingPredicate_, v46);
      type metadata accessor for NLGazetteer(0, (unint64_t *)&lazy cache variable for type metadata for EKEvent);
      v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_retain();
      v39 = specialized _ArrayProtocol.filter(_:)(v48, v51 & 1);

      swift_bridgeObjectRelease();
      swift_release();
      v38(v40, v37);
      v32 = v63;
      v33 = *(void (**)(char *, uint64_t))(v62 + 8);
      v33(v35, v63);
      v38(v43, v37);
      goto LABEL_9;
    }
    outlined destroy of Any?(v36, (uint64_t *)&demangling cache variable for type metadata for Date?);
    v32 = v63;
    v33 = *(void (**)(char *, uint64_t))(v62 + 8);
    v33(v35, v63);
    v38(v64, v37);
  }
  v39 = MEMORY[0x24BEE4AF8];
LABEL_9:
  v33(v66, v32);
  return v39;
}

uint64_t ActionEventDataSource.deinit()
{
  uint64_t v0;

  outlined destroy of Any?(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar, (uint64_t *)&demangling cache variable for type metadata for Calendar?);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ActionEventDataSource.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Any?(v0 + OBJC_IVAR____TtC12SmartReplies21ActionEventDataSource____lazy_storage___calendar, (uint64_t *)&demangling cache variable for type metadata for Calendar?);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ActionDataSource.prewarmDataAccessIfNecessary(synchronously:) in conformance ActionEventDataSource()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t partial apply for closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  uint64_t result;

  result = a1();
  if (result)
    return _swift_stdlib_bridgeErrorToNSError();
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v3 = v2;
  v4 = a1;
  v17 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_21:
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      v13 = v3;
      v14 = v4;
      v6 = 0;
      v16 = v4 & 0xC000000000000001;
      v7 = v4 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v16)
        {
          v8 = (id)MEMORY[0x24957E42C](v6, v4);
          v9 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
LABEL_18:
            __break(1u);
            return v17;
          }
        }
        else
        {
          if (v6 >= *(_QWORD *)(v7 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          v8 = *(id *)(v4 + 8 * v6 + 32);
          v9 = v6 + 1;
          if (__OFADD__(v6, 1))
            goto LABEL_18;
        }
        v10 = v8;
        if (objc_msgSend(v10, sel_isAllDay)
          || (v11 = objc_msgSend(v10, sel_availability), (a2 & 1) != 0) && (v11 == (id)1 || v11 == (id)-1))
        {

        }
        else
        {
          v3 = (uint64_t *)objc_msgSend(v10, sel_status, v13);

          if (v3 != (uint64_t *)3)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            v4 = v14;
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            v3 = &v17;
            specialized ContiguousArray._endMutation()();
            goto LABEL_6;
          }
        }

LABEL_6:
        ++v6;
        if (v9 == v5)
          return v17;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t ObjC metadata update function for ActionEventDataSource()
{
  return type metadata accessor for ActionEventDataSource();
}

uint64_t type metadata accessor for ActionEventDataSource()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActionEventDataSource;
  if (!type metadata singleton initialization cache for ActionEventDataSource)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ActionEventDataSource()
{
  unint64_t v0;

  type metadata accessor for Calendar?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ActionEventDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActionEventDataSource.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of ActionEventDataSource.prewarmDataAccessIfNecessary(synchronously:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 224) + *(_QWORD *)(*(_QWORD *)v2 + 224));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of SRSmartRepliesActionMetadataController.metadata(for:actionType:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of ActionEventDataSource.upcomingValidEvents(within:considerAvailability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ActionEventDataSource.currentValidEvents(considerAvailability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

void type metadata accessor for Calendar?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Calendar?)
  {
    type metadata accessor for Calendar();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Calendar?);
  }
}

uint64_t outlined init with copy of Calendar?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Calendar?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Calendar?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_247653744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[EKEvent], Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[EKEvent], Never>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in closure #1 in ActionEventDataSource.upcomingSuggestedEvents(within:considerAvailability:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_BYTE *)(v2 + v6 + *(_QWORD *)(v5 + 64)));
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t static CharacterSet.alphanumerics.getter()
{
  return MEMORY[0x24BDCB638]();
}

uint64_t static CharacterSet.punctuationCharacters.getter()
{
  return MEMORY[0x24BDCB6B0]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t CharacterSet.union(_:)()
{
  return MEMORY[0x24BDCB6D8]();
}

uint64_t CharacterSet.inverted.getter()
{
  return MEMORY[0x24BDCB720]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t DateComponents.day.setter()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t DateComponents.hour.getter()
{
  return MEMORY[0x24BDCBD08]();
}

uint64_t DateComponents.hour.setter()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t DateComponents.minute.getter()
{
  return MEMORY[0x24BDCBD60]();
}

uint64_t DateComponents.minute.setter()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x24BDCBDE0]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5;
  void *v6;
  Swift::String result;

  v5 = MEMORY[0x24BDCC6D8](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return MEMORY[0x24BDCCB28]();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return MEMORY[0x24BDCCB38]();
}

uint64_t PersonNameComponents.middleName.setter()
{
  return MEMORY[0x24BDCCB48]();
}

uint64_t PersonNameComponents.namePrefix.setter()
{
  return MEMORY[0x24BDCCB68]();
}

uint64_t PersonNameComponents.nameSuffix.setter()
{
  return MEMORY[0x24BDCCB78]();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  objc_class *v0;
  void *v1;
  NSPersonNameComponents result;

  v0 = (objc_class *)MEMORY[0x24BDCCBB0]();
  result._private = v1;
  result.super.isa = v0;
  return result;
}

uint64_t PersonNameComponents.nickname.setter()
{
  return MEMORY[0x24BDCCBE0]();
}

uint64_t PersonNameComponents.init()()
{
  return MEMORY[0x24BDCCC00]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x24BDCD810]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCD9E8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.append<A>(path:directoryHint:)()
{
  return MEMORY[0x24BDCDA30]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x24BDCE2F8]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t Date.compare(_:)()
{
  return MEMORY[0x24BDCE898]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x24BDCEB20]();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return MEMORY[0x24BDCEB50]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x24BDCEB60]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x24BDCEC90]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x24BDCECA0]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t Locale.Language.languageCode.getter()
{
  return MEMORY[0x24BDCEDE0]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x24BDCEE28]();
}

uint64_t Locale.language.getter()
{
  return MEMORY[0x24BDCEE60]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return MEMORY[0x24BDCF040]();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return MEMORY[0x24BDCF0D0]();
}

uint64_t Calendar.date(from:)()
{
  return MEMORY[0x24BDCF140]();
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)()
{
  return MEMORY[0x24BDCF150]();
}

uint64_t Calendar.isDate(_:inSameDayAs:)()
{
  return MEMORY[0x24BDCF188]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t Calendar.component(_:from:)()
{
  return MEMORY[0x24BDCF2D0]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t static OVSResolver.containsOVS(in:localeIdentifier:)()
{
  return MEMORY[0x24BEB6C60]();
}

uint64_t LocaleDetection.locale(forIncomingMessages:outgoingMessageHistory:defaultLocale:defaultLocaleLastChangedDate:sender:forceRunLanguageDetection:)()
{
  return MEMORY[0x24BEB6C70]();
}

uint64_t LocaleDetection.shared.unsafeMutableAddressor()
{
  return MEMORY[0x24BEB6C78]();
}

uint64_t static LanguageDetection.languageForLocaleIdentifier(_:)()
{
  return MEMORY[0x24BEB6CA8]();
}

Swift::Bool __swiftcall CaptionPhraseResolver.hasUninterestingCaption(with:languageCode:)(Swift::String_optional with, Swift::String_optional languageCode)
{
  return MEMORY[0x24BEB6CC8](with.value._countAndFlagsBits, with.value._object, languageCode.value._countAndFlagsBits, languageCode.value._object);
}

uint64_t CaptionPhraseResolver.init()()
{
  return MEMORY[0x24BEB6CD0]();
}

uint64_t static LearnFromThisAppChecker.isLearningAllowed(application:)()
{
  return MEMORY[0x24BEB6CE0]();
}

uint64_t TUSTrialNamespaceManager.__allocating_init(namespaceName:trialClient:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)()
{
  return MEMORY[0x24BEB6CE8]();
}

uint64_t TUSCache.init(capacity:)()
{
  return MEMORY[0x24BEB6CF8]();
}

uint64_t TUSCache.subscript.getter()
{
  return MEMORY[0x24BEB6D08]();
}

uint64_t TUSCache.subscript.setter()
{
  return MEMORY[0x24BEB6D10]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x24BEE5428]();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return MEMORY[0x24BEE5438]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t DispatchTime.uptimeNanoseconds.getter()
{
  return MEMORY[0x24BEE5558]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5620]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t Character._isLowercased.getter()
{
  return MEMORY[0x24BEE06A8]();
}

uint64_t Character._isUppercased.getter()
{
  return MEMORY[0x24BEE06B0]();
}

uint64_t Character._isSingleScalar.getter()
{
  return MEMORY[0x24BEE06C8]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x24BEE06F8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return MEMORY[0x24BDCF9F0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCFB30](a1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x24BEE0A10]();
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A20]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.digitsOnly.getter()
{
  return MEMORY[0x24BEB6D18]();
}

Swift::String __swiftcall String.lemmatized()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEB6D20]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.properNouns()()
{
  return MEMORY[0x24BEB6D30]();
}

uint64_t String.nounLikeTokens(includePronouns:)()
{
  return MEMORY[0x24BEB6D38]();
}

uint64_t String.verbLikeTokens()()
{
  return MEMORY[0x24BEB6D40]();
}

Swift::Bool __swiftcall String.looksLikeAnAcronym()()
{
  return MEMORY[0x24BEB6D48]();
}

Swift::String_optional __swiftcall String.primaryLanguageTag()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = MEMORY[0x24BEB6D50]();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.trimMessageGreeting()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEB6D58]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.containsAPhoneNumber.getter()
{
  return MEMORY[0x24BEB6D60]();
}

uint64_t String.nounPhrasesContaining(_:isProperNoun:allowConjunctions:)()
{
  return MEMORY[0x24BEB6D68]();
}

uint64_t String.trimLeadingCharacters(_:)()
{
  return MEMORY[0x24BEB6D70]();
}

uint64_t String.looksLikeAnEmailAddress.getter()
{
  return MEMORY[0x24BEB6D78]();
}

uint64_t String.businessRelevantEntities()()
{
  return MEMORY[0x24BEB6D80]();
}

uint64_t String.looksLikeAPhoneShortCode.getter()
{
  return MEMORY[0x24BEB6D88]();
}

uint64_t String.tokens()()
{
  return MEMORY[0x24BEB6D90]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0D98]();
}

{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t static Task<>.sleep(nanoseconds:)()
{
  return MEMORY[0x24BEE6B28]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x24BEE13A8]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC80]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x24BEE1488]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFCC8]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t Range<>.init(_:in:)()
{
  return MEMORY[0x24BDCFD70]();
}

uint64_t NLGazetteer.supportGazetteer.unsafeMutableAddressor()
{
  return MEMORY[0x24BEB6D98]();
}

uint64_t NLTokenizer.enumerateTokens(in:using:)()
{
  return MEMORY[0x24BEE5B28]();
}

Swift::Void __swiftcall CGContextRef.draw(_:in:byTiling:)(CGImageRef _, CGRect in, Swift::Bool byTiling)
{
  MEMORY[0x24BDBD780](_, byTiling, (__n128)in.origin, *(__n128 *)&in.origin.y, (__n128)in.size, *(__n128 *)&in.size.height);
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return MEMORY[0x24BEE5650]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x24BEE5920]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t NLTagger.enumerateTags(in:unit:scheme:options:using:)()
{
  return MEMORY[0x24BEE5B58]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x24BDD04B8]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.localizedLowercase.getter()
{
  return MEMORY[0x24BDD0530]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x24BDD0600]();
}

uint64_t StringProtocol.folding(options:locale:)()
{
  return MEMORY[0x24BDD0628]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t _StringGuts.foreignScalarAlign(_:)()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x24BEE2508]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2648](a1);
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE3540]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x24BEE4320]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x24BEE4330]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t Unicode.Scalar.Properties.isUppercase.getter()
{
  return MEMORY[0x24BEE4778]();
}

uint64_t Unicode.Scalar.Properties.isCased.getter()
{
  return MEMORY[0x24BEE47C0]();
}

uint64_t Unicode.Scalar.Properties.isEmoji.getter()
{
  return MEMORY[0x24BEE47C8]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x24BEE47D0]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x24BEE47E0]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x24BE0C258]();
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x24BDBD918](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x24BDBD920](context);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x24BDBE620](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x24BDBE630](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x24BDBE638](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9168](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x24BEBE2E0](image);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x24BEE71C8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced()
{
  return MEMORY[0x24BEE4E78]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

void vDSP_dotprD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D8](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_mmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3290](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_mtransD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
  MEMORY[0x24BDB32A0](__A, __IA, __C, __IC, __M, __N);
}

