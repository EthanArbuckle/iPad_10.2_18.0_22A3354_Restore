id getTRINamespaceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getTRINamespaceClass_softClass;
  v7 = getTRINamespaceClass_softClass;
  if (!getTRINamespaceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getTRINamespaceClass_block_invoke;
    v3[3] = &unk_1E3A365A8;
    v3[4] = &v4;
    __getTRINamespaceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19AF52988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVSystemControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getAVSystemControllerClass_softClass;
  v7 = getAVSystemControllerClass_softClass;
  if (!getAVSystemControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getAVSystemControllerClass_block_invoke;
    v3[3] = &unk_1E3A365A8;
    v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19AF52A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PickableRoutesDidChangeNotification()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr;
  v8 = getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr;
  if (!getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr)
  {
    v1 = MediaExperienceLibrary();
    v0 = (id *)dlsym(v1, "AVSystemController_PickableRoutesDidChangeNotification");
    v6[3] = (uint64_t)v0;
    getAVSystemController_PickableRoutesDidChangeNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAVSystemController_PickableRoutesDidChangeNotification(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriHeadphonesMonitor.m"), 47, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AF52B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PreferredExternalRouteDidChangeNotification()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr;
  v8 = getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr;
  if (!getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr)
  {
    v1 = MediaExperienceLibrary();
    v0 = (id *)dlsym(v1, "AVSystemController_PreferredExternalRouteDidChangeNotification");
    v6[3] = (uint64_t)v0;
    getAVSystemController_PreferredExternalRouteDidChangeNotificationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAVSystemController_PreferredExternalRouteDidChangeNotification(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriHeadphonesMonitor.m"), 46, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AF52C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_SubscribeToNotificationsAttribute()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVSystemController_SubscribeToNotificationsAttributeSymbolLoc_ptr;
  v8 = getAVSystemController_SubscribeToNotificationsAttributeSymbolLoc_ptr;
  if (!getAVSystemController_SubscribeToNotificationsAttributeSymbolLoc_ptr)
  {
    v1 = MediaExperienceLibrary();
    v0 = (id *)dlsym(v1, "AVSystemController_SubscribeToNotificationsAttribute");
    v6[3] = (uint64_t)v0;
    getAVSystemController_SubscribeToNotificationsAttributeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAVSystemController_SubscribeToNotificationsAttribute(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriHeadphonesMonitor.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AF52D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _AFSupportPreferencesBoolForKeyWithDefault(const __CFString *a1, uint64_t a2)
{
  void *v3;
  void *v4;

  _AFSupportPreferencesBoolValueForKey(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    a2 = objc_msgSend(v3, "BOOLValue");

  return a2;
}

id _AFSupportPreferencesBoolValueForKey(const __CFString *a1)
{
  void *v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  const __CFString *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant.support"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    v3 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "_AFSupportPreferencesBoolValueForKey";
      v7 = 2112;
      v8 = a1;
      v9 = 2112;
      v10 = v2;
      _os_log_error_impl(&dword_19AF50000, v3, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else! Acting as-if no value was set. {key: %@, value: %@}", (uint8_t *)&v5, 0x20u);
    }

    v2 = 0;
  }
  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsOnHearingAidsEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications On Hearing Aids"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsOnBuiltInSpeakerEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications On Built In Speaker"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t AFDeviceSupportsSiriMUX()
{
  uint64_t result;

  if (AFDeviceSupportsHybridUOD() || (result = AFDeviceSupportsSiriUOD(), (_DWORD)result))
  {
    if (AFIsHorseman_onceToken != -1)
      dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
    return AFIsHorseman_isHorseman != 0;
  }
  return result;
}

BOOL AFDeviceSupportsHybridUOD()
{
  _BOOL8 result;
  NSObject *v1;
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (AFDeviceSupportsHybridUOD_once != -1)
    dispatch_once(&AFDeviceSupportsHybridUOD_once, &__block_literal_global_232);
  if (AFDeviceSupportsHybridUOD_productType
    && (objc_msgSend((id)AFDeviceSupportsHybridUOD_supportedProductTypes, "containsObject:") & 1) != 0)
  {
    return 1;
  }
  v1 = AFSiriLogContextDaemon;
  result = os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (result)
  {
    v2 = 136315394;
    v3 = "AFDeviceSupportsHybridUOD";
    v4 = 2112;
    v5 = AFDeviceSupportsHybridUOD_productType;
    _os_log_impl(&dword_19AF50000, v1, OS_LOG_TYPE_INFO, "%s #AsrOnServer For iOS, only the devices with SoC H11 or later are supported for Hybrid. AFDeviceSupportsHybridUOD = NO. productType=%@", (uint8_t *)&v2, 0x16u);
    return 0;
  }
  return result;
}

uint64_t AFPreferencesLanguageIsSupportedForDictation(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  AFLanguagePrefixForLanguageCode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    if (_AFPreferencesDictationLanguagePrefixes_onceToken != -1)
      dispatch_once(&_AFPreferencesDictationLanguagePrefixes_onceToken, &__block_literal_global_1475);
    v2 = objc_msgSend((id)_AFPreferencesDictationLanguagePrefixes_sLanguagePrefixes, "containsObject:", v1);
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesBoolValueForKeyWithContext(const __CFString *a1, uint64_t a2, const __CFString *a3, void *a4)
{
  void *v6;
  uint64_t v7;

  _AFPreferencesValueForKeyWithContext(a1, a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = _AFPreferencesBoolFromValueWithDefault(v6, (uint64_t)a1, a2);

  return v7;
}

uint64_t _AFPreferencesBoolFromValueWithDefault(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    a3 = objc_msgSend(v5, "BOOLValue");
  }
  else if (v5)
  {
    v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315906;
      v9 = "_AFPreferencesBoolFromValueWithDefault";
      v10 = 1024;
      v11 = a3;
      v12 = 2112;
      v13 = a2;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else. Returning %{BOOL}d. {key: %@, value: %@}", (uint8_t *)&v8, 0x26u);
    }
  }

  return a3;
}

AFPreferencesNotificationCenter *_AFPreferencesNotificationCenterGetSharedInstance(int a1)
{
  id v2;
  AFPreferencesNotificationCenter *WeakRetained;

  if (_AFPreferencesNotificationCenterSharedLock_s_once != -1)
    dispatch_once(&_AFPreferencesNotificationCenterSharedLock_s_once, &__block_literal_global_7539);
  v2 = (id)_AFPreferencesNotificationCenterSharedLock_sharedLock;
  objc_msgSend(v2, "lock");
  WeakRetained = (AFPreferencesNotificationCenter *)objc_loadWeakRetained(&_AFPreferencesNotificationCenterGetSharedInstance_weakSharedInstance);
  if (!WeakRetained && a1)
  {
    WeakRetained = objc_alloc_init(AFPreferencesNotificationCenter);
    objc_storeWeak(&_AFPreferencesNotificationCenterGetSharedInstance_weakSharedInstance, WeakRetained);
  }
  objc_msgSend(v2, "unlock");

  return WeakRetained;
}

void sub_19AF5401C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF55184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr;
  v8 = getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr;
  if (!getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr)
  {
    v1 = MediaExperienceLibrary_24137();
    v0 = (id *)dlsym(v1, "AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled");
    v6[3] = (uint64_t)v0;
    getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabledSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriAudioRoute.m"), 28, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AF552F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AFBTProductIDSupportsIED(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
    v2 = objc_msgSend(&unk_1E3AAA958, "containsObject:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t AFBTProductIDSupportsFauxIED(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
    v2 = objc_msgSend(&unk_1E3AAA970, "containsObject:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t AFBTProductIDSupportsAnnounce(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
    v2 = objc_msgSend(&unk_1E3AAA940, "containsObject:", v1);
  else
    v2 = 0;

  return v2;
}

id AFLanguagePrefixForLanguageCode(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "languageCode");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

uint64_t _AFPreferencesSiriDataSharingOptInStatusWithContext(void *a1)
{
  id v1;
  const __CFString *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled](AFFeatureFlags, "isSiriDataSharingRepromptEnabled"))
  {
    v2 = CFSTR("Siri Data Sharing Opt-In Status 2.0");
  }
  else
  {
    v2 = CFSTR("Siri Data Sharing Opt-In Status");
  }
  _AFPreferencesValueForKeyWithContext(v2, CFSTR("com.apple.assistant.support"), v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = objc_msgSend(v3, "integerValue");
  else
    v4 = 0;

  return v4;
}

id _AFPreferencesValueForKeyWithContext(const __CFString *a1, const __CFString *a2, void *a3)
{
  void *v5;
  __CFString *v6;
  void *v7;

  objc_msgSend(a3, "preferencesSubdomain");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@/%@"), v5, a1);
    v7 = (void *)CFPreferencesCopyAppValue(v6, a2);

  }
  else
  {
    v7 = (void *)CFPreferencesCopyAppValue(a1, a2);
  }

  return v7;
}

uint64_t AFDictationHasHighQualityModels()
{
  void *v0;
  void *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "offlineDictationStatus");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __AFDictationHasHighQualityModels_block_invoke;
  v4[3] = &unk_1E3A364A8;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v4);

  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19AF55FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AFAssistantRestricted()
{
  void *v0;
  _BOOL8 v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46F20]) == 2;

  return v1;
}

uint64_t AFDictationRestricted()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isDictationAllowed") ^ 1;

  return v1;
}

BOOL AFConnectionHasEntitlement(void *a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a1, "valueForEntitlement:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

id AFPreferencesSupportedLanguages()
{
  if (AFPreferencesSupportedLanguages_onceToken != -1)
    dispatch_once(&AFPreferencesSupportedLanguages_onceToken, &__block_literal_global_8792);
  return (id)AFPreferencesSupportedLanguages_stAllLanguageCodes;
}

id AFPreferencesSupportedDictationLanguages()
{
  if (AFPreferencesSupportedDictationLanguages_onceToken != -1)
    dispatch_once(&AFPreferencesSupportedDictationLanguages_onceToken, &__block_literal_global_547);
  return (id)AFPreferencesSupportedDictationLanguages_sSupportedDictationLanguages;
}

uint64_t AFSupportPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
}

BOOL AFIsCustomerInstall()
{
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  return AFIsInternalInstall_isInternal == 0;
}

id AFPreferencesSupportedMultiUserLanguages()
{
  _QWORD v1[40];

  v1[39] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("en-US");
  v1[1] = CFSTR("en-GB");
  v1[2] = CFSTR("en-AU");
  v1[3] = CFSTR("en-CA");
  v1[4] = CFSTR("en-IE");
  v1[5] = CFSTR("en-NZ");
  v1[6] = CFSTR("fr-FR");
  v1[7] = CFSTR("fr-CA");
  v1[8] = CFSTR("es-MX");
  v1[9] = CFSTR("es-US");
  v1[10] = CFSTR("es-ES");
  v1[11] = CFSTR("de-DE");
  v1[12] = CFSTR("de-AT");
  v1[13] = CFSTR("fr-CH");
  v1[14] = CFSTR("de-CH");
  v1[15] = CFSTR("en-IN");
  v1[16] = CFSTR("it-CH");
  v1[17] = CFSTR("it-IT");
  v1[18] = CFSTR("ru-RU");
  v1[19] = CFSTR("fr-BE");
  v1[20] = CFSTR("nl-BE");
  v1[21] = CFSTR("nl-NL");
  v1[22] = CFSTR("nb-NO");
  v1[23] = CFSTR("sv-SE");
  v1[24] = CFSTR("zh-CN");
  v1[25] = CFSTR("yue-CN");
  v1[26] = CFSTR("zh-HK");
  v1[27] = CFSTR("zh-TW");
  v1[28] = CFSTR("ja-JP");
  v1[29] = CFSTR("en-ZA");
  v1[30] = CFSTR("es-CL");
  v1[31] = CFSTR("fi-FI");
  v1[32] = CFSTR("en-SG");
  v1[33] = CFSTR("da-DK");
  v1[34] = CFSTR("he-IL");
  v1[35] = CFSTR("th-TH");
  v1[36] = CFSTR("ar-SA");
  v1[37] = CFSTR("tr-TR");
  v1[38] = CFSTR("ms-MY");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 39);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t _IsArrayOfStrings(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v7 = 0;
            goto LABEL_13;
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        if (v4)
          continue;
        break;
      }
    }
    v7 = 1;
LABEL_13:

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id _AFPreferencesBuiltInLanguages()
{
  if (_AFPreferencesBuiltInLanguages_onceToken != -1)
    dispatch_once(&_AFPreferencesBuiltInLanguages_onceToken, &__block_literal_global_1420);
  return (id)_AFPreferencesBuiltInLanguages_sStaticLanguages;
}

id AFInternalConfigValueForKey(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D80];
  v2 = a1;
  CPSystemRootDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("AppleInternal/Library/Assistant/InternalConfig.plist"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dictionaryWithContentsOfFile:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id _AFPreferencesBuiltIniOSLanguages()
{
  _QWORD v1[42];

  v1[41] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("en-US");
  v1[1] = CFSTR("de-DE");
  v1[2] = CFSTR("de-CH");
  v1[3] = CFSTR("en-AU");
  v1[4] = CFSTR("en-GB");
  v1[5] = CFSTR("en-CA");
  v1[6] = CFSTR("en-SG");
  v1[7] = CFSTR("es-ES");
  v1[8] = CFSTR("es-MX");
  v1[9] = CFSTR("es-US");
  v1[10] = CFSTR("fr-FR");
  v1[11] = CFSTR("fr-CA");
  v1[12] = CFSTR("fr-CH");
  v1[13] = CFSTR("it-IT");
  v1[14] = CFSTR("it-CH");
  v1[15] = CFSTR("ja-JP");
  v1[16] = CFSTR("ko-KR");
  v1[17] = CFSTR("zh-CN");
  v1[18] = CFSTR("zh-TW");
  v1[19] = CFSTR("zh-HK");
  v1[20] = CFSTR("pt-BR");
  v1[21] = CFSTR("da-DK");
  v1[22] = CFSTR("nl-NL");
  v1[23] = CFSTR("en-NZ");
  v1[24] = CFSTR("en-IN");
  v1[25] = CFSTR("ru-RU");
  v1[26] = CFSTR("sv-SE");
  v1[27] = CFSTR("th-TH");
  v1[28] = CFSTR("tr-TR");
  v1[29] = CFSTR("nb-NO");
  v1[30] = CFSTR("de-AT");
  v1[31] = CFSTR("fr-BE");
  v1[32] = CFSTR("nl-BE");
  v1[33] = CFSTR("ar-SA");
  v1[34] = CFSTR("fi-FI");
  v1[35] = CFSTR("he-IL");
  v1[36] = CFSTR("ms-MY");
  v1[37] = CFSTR("es-CL");
  v1[38] = CFSTR("en-ZA");
  v1[39] = CFSTR("yue-CN");
  v1[40] = CFSTR("en-IE");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 41);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL AFHasUnlockedSinceBoot()
{
  return softLinkMKBDeviceUnlockedSinceBoot() == 1;
}

BOOL AFProcessIsRunningAsInstance()
{
  void *v0;
  _BOOL8 v1;

  AFProcessGetInstanceUUID();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0 != 0;

  return v1;
}

id AFProcessGetInstanceUUID()
{
  if (AFProcessGetInstanceUUID_onceToken != -1)
    dispatch_once(&AFProcessGetInstanceUUID_onceToken, &__block_literal_global_494);
  return (id)AFProcessGetInstanceUUID_instanceUUID;
}

void sub_19AF598D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AFContextProviderNameForBundleId(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("com.apple.assistant.contextprovider.%@"), v2);

  return v3;
}

BOOL AFUODStatusSupportedFull(void *a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    AFRequiredAssetsForFullUOD(a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "containsObject:", CFSTR("ATTENTION")))
    {
      v6 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        v7 = v6;
        objc_msgSend(v3, "objectForKey:", CFSTR("ATTENTION"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "BOOLValue");

        v11 = 136315394;
        v12 = "AFUODStatusSupportedFull";
        v13 = 1024;
        v14 = v9;
        _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s Checking for availability of Attention assets returned = %u", (uint8_t *)&v11, 0x12u);

      }
    }
    v4 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v5);

  }
  return v4;
}

CFPropertyListRef AFPreferencesMobileUserSessionLanguage()
{
  CFPreferencesSynchronize(CFSTR("com.apple.assistant.backedup"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B250]);
  return (id)CFPreferencesCopyValue(CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
}

uint64_t AFDeviceSupportsSiriUOD()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1)
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_475);
  if ((AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier & 1) != 0)
  {
    v0 = 1;
  }
  else
  {
    if (AFIsInternalInstall_onceToken != -1)
      dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
    if (AFIsInternalInstall_isInternal
      && +[AFFeatureFlags isSiriUODForceEnabledForDevice](AFFeatureFlags, "isSiriUODForceEnabledForDevice"))
    {
      v1 = AFSiriLogContextUtility;
      v0 = 1;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        v4 = 136315138;
        v5 = "AFDeviceSupportsSiriUOD";
        _os_log_impl(&dword_19AF50000, v1, OS_LOG_TYPE_INFO, "%s WARNING: UOD is forced on for this device", (uint8_t *)&v4, 0xCu);
      }
    }
    else
    {
      v0 = 0;
    }
  }
  v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315394;
    v5 = "AFDeviceSupportsSiriUOD";
    v6 = 1024;
    v7 = v0;
    _os_log_debug_impl(&dword_19AF50000, v2, OS_LOG_TYPE_DEBUG, "%s AFDeviceSupportsSiriUOD=%d", (uint8_t *)&v4, 0x12u);
  }
  return v0;
}

uint64_t AFOfflineDictationCapable()
{
  void *v1;
  uint64_t v2;

  if (AFOfflineDictationCapableWithoutOverride_onceToken != -1)
    dispatch_once(&AFOfflineDictationCapableWithoutOverride_onceToken, &__block_literal_global_78_40100);
  if (AFOfflineDictationCapableWithoutOverride_isCapable)
    return 1;
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "offlineDictationOverride");

  return v2;
}

uint64_t AFSetAudioSessionActiveOptionsValidate(char a1)
{
  return a1 & 3;
}

id AFSetAudioSessionActiveOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("waitsUntilRecordingAndAlertsDone"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("updatesAudioContext"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFSetAudioSessionActiveOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFSetAudioSessionActiveOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFSetAudioSessionActiveOptionsGetFromName_onceToken, &__block_literal_global);
            objc_msgSend((id)_AFSetAudioSessionActiveOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19AF5D114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF5F9B0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19AF5FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF611B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id INSerializedCacheItemFunction()
{
  return (id)classINSerializedCacheItem;
}

id initINSerializedCacheItem()
{
  if (initINSerializedCacheItem_sOnce != -1)
    dispatch_once(&initINSerializedCacheItem_sOnce, &__block_literal_global_866);
  return (id)classINSerializedCacheItem;
}

Class __initINSerializedCacheItem_block_invoke()
{
  Class result;

  if (!IntentsLibrary_frameworkLibrary)
  {
    IntentsLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/Intents.framework/Intents", 2);
    if (!IntentsLibrary_frameworkLibrary)
      __assert_rtn("IntentsLibrary", "AFConnection.m", 92, "frameworkLibrary");
  }
  result = objc_getClass("INSerializedCacheItem");
  classINSerializedCacheItem = (uint64_t)result;
  if (!result)
    __assert_rtn("initINSerializedCacheItem_block_invoke", "AFConnection.m", 93, "classINSerializedCacheItem");
  getINSerializedCacheItemClass = INSerializedCacheItemFunction;
  return result;
}

void _LogUEIRequestCategorization(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v5;
  id v6;
  void *v7;
  id v8;

  if (a1)
  {
    v5 = (objc_class *)MEMORY[0x1E0D9A4D0];
    v6 = a1;
    v8 = objc_alloc_init(v5);
    objc_msgSend(v8, "setRequestStatus:", a2);
    objc_msgSend(v8, "setRequestType:", a3);
    +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "logInstrumentation:machAbsoluteTime:turnIdentifier:", v8, mach_absolute_time(), v6);

  }
}

id _PNRFatalErrorInfo(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (objc_class *)MEMORY[0x1E0D9A470];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v2, "code"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setErrorCode:", v5);

  objc_msgSend(v2, "domain");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "setErrorDomain:", v6);
  return v3;
}

BOOL _AFConnectionIsErrorDeallocation(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isEqualToString:", CFSTR("kAFAssistantErrorDomain")))
    v3 = objc_msgSend(v1, "code") == 24;
  else
    v3 = 0;

  return v3;
}

const __CFString *_AFConnectionGetBucketStringFromTimeIntervals(double a1, double a2)
{
  double v2;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;

  if (a1 <= 0.0)
  {
    if (a2 <= 0.0)
      return CFSTR("no_start_and_stop");
    else
      return CFSTR("no_start");
  }
  else if (a2 <= 0.0)
  {
    return CFSTR("no_stop");
  }
  else
  {
    v2 = a2 - a1;
    if (v2 >= 0.0)
    {
      if (v2 >= 0.1)
      {
        if (v2 >= 0.2)
        {
          if (v2 >= 0.3)
          {
            if (v2 >= 0.4)
            {
              if (v2 >= 0.5)
              {
                if (v2 >= 1.0)
                {
                  if (v2 >= 2.0)
                  {
                    if (v2 >= 4.0)
                    {
                      v4 = CFSTR("8-15s");
                      v5 = CFSTR("15-30s");
                      v6 = CFSTR("60s+");
                      if (v2 < 60.0)
                        v6 = CFSTR("30-60s");
                      if (v2 >= 30.0)
                        v5 = v6;
                      if (v2 >= 15.0)
                        v4 = v5;
                      if (v2 >= 8.0)
                        return v4;
                      else
                        return CFSTR("4-8s");
                    }
                    else
                    {
                      return CFSTR("2-4s");
                    }
                  }
                  else
                  {
                    return CFSTR("1-2s");
                  }
                }
                else
                {
                  return CFSTR("500ms-1s");
                }
              }
              else
              {
                return CFSTR("400-500ms");
              }
            }
            else
            {
              return CFSTR("300-400ms");
            }
          }
          else
          {
            return CFSTR("200-300ms");
          }
        }
        else
        {
          return CFSTR("100-200ms");
        }
      }
      else
      {
        return CFSTR("0-100ms");
      }
    }
    else
    {
      return CFSTR("stop_before_start");
    }
  }
}

void _EmitHomePodLaunchContextTime(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  id v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  if (AFIsHorseman_isHorseman)
  {
    if (v9)
    {
      if (v10)
      {
        v11 = objc_msgSend(v10, "activationEventMachAbsoluteTime");
        v12 = mach_absolute_time();
        v13 = AFSiriLogContextConnection;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          v23 = 136316162;
          v24 = "_EmitHomePodLaunchContextTime";
          v25 = 2112;
          v26 = v8;
          v27 = 2112;
          v28 = v9;
          v29 = 2048;
          v30 = v11;
          v31 = 2048;
          v32 = v12;
          _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s Logging instrumentation for requestUUID = %@ turnId = %@ HomePod launch: (startTime = %llu endTime = %llu)", (uint8_t *)&v23, 0x34u);
        }
        v14 = objc_alloc_init(MEMORY[0x1E0D9A4B8]);
        v15 = objc_alloc_init(MEMORY[0x1E0D9A4C8]);
        objc_msgSend(v15, "setExists:", 1);
        objc_msgSend(v14, "setStartedOrChanged:", v15);
        objc_msgSend(v14, "setHasStartedOrChanged:", 1);
        objc_msgSend(v7, "logInstrumentation:machAbsoluteTime:turnIdentifier:", v14, v11, v9);
        v16 = objc_alloc_init(MEMORY[0x1E0D9A4B8]);
        v17 = objc_alloc_init(MEMORY[0x1E0D9A4C0]);
        objc_msgSend(v17, "setExists:", 1);
        objc_msgSend(v16, "setEnded:", v17);
        objc_msgSend(v16, "setHasEnded:", 1);
        objc_msgSend(v7, "logInstrumentation:machAbsoluteTime:turnIdentifier:", v16, v12, v9);

        goto LABEL_12;
      }
      v22 = AFSiriLogContextConnection;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      v23 = 136315650;
      v24 = "_EmitHomePodLaunchContextTime";
      v25 = 2112;
      v26 = v8;
      v27 = 2112;
      v28 = v9;
      v19 = "%s speechRequestOptions is nil. Instrumentation logging is skipped. requestUUID = %@ turnId = %@";
      v20 = v22;
      v21 = 32;
    }
    else
    {
      v18 = AFSiriLogContextConnection;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      v23 = 136315394;
      v24 = "_EmitHomePodLaunchContextTime";
      v25 = 2112;
      v26 = v8;
      v19 = "%s turnId is nil. Instrumentation logging is skipped. requestUUID = %@";
      v20 = v18;
      v21 = 22;
    }
    _os_log_error_impl(&dword_19AF50000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
  }
LABEL_12:

}

id _ConvertIdToSchemaUUID(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0CB3A28];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithUUIDString:", v2);

  if (v3)
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D9A500]), "initWithNSUUID:", v3);
  else
    v4 = 0;

  return v4;
}

id _ExtractAceViewId(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(v1, "allKeys");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKey:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v7, "isEqualToString:", CFSTR("aceId")))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v8);
          v9 = objc_claimAutoreleasedReturnValue();
LABEL_13:
          v10 = (void *)v9;

          goto LABEL_14;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          _ExtractAceViewId(v8);
          v9 = objc_claimAutoreleasedReturnValue();
          if (v9)
            goto LABEL_13;
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v4)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_14:

  return v10;
}

BOOL AFLocationAccessStateGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFLocationAccessStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFLocationAccessStateGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A2CD20[a1];
}

uint64_t AFLocationAccessStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFLocationAccessStateGetFromName_onceToken != -1)
      dispatch_once(&AFLocationAccessStateGetFromName_onceToken, &__block_literal_global_94);
    objc_msgSend((id)AFLocationAccessStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19AF702CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Unwind_Resume(a1);
}

id _AFInterstitialGetLocalizationKey(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("%@_%@_%@"), CFSTR("ASSISTANT_SERVICES_INTERSTITIAL"), CFSTR("DISPLAY"), v2);

  return v3;
}

id AFApplicationClientIdentifierForApp(void *a1)
{
  return a1;
}

uint64_t AFApplicationClientIdentifierForWatchApp(uint64_t a1)
{
  return objc_msgSend(CFSTR("nano://"), "stringByAppendingString:", a1);
}

id AFBundleIDFromApplicationClientIdentifier(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("nano://")))
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(CFSTR("nano://"), "length"));
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

void AFMessagesGetPhoneNumberEmailAddressFromString(_QWORD *a1, _QWORD *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;

  v5 = a3;
  if (v5)
  {
    v9 = v5;
    v6 = objc_msgSend(v5, "rangeOfString:", CFSTR("@"));
    v7 = objc_retainAutorelease(v9);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = a1;
    else
      v8 = a2;
    *v8 = v7;
    v5 = v9;
  }

}

id AFMessagesGetDomainObjectsFromContext(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    v7 = 136315395;
    v8 = "AFMessagesGetDomainObjectsFromContext";
    v9 = 2113;
    v10 = v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s %{private}@", (uint8_t *)&v7, 0x16u);
  }
  v3 = (void *)MEMORY[0x1E0D87F40];
  AFMessagesGetAceDomainObjectsFromContext(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dictionaryArrayWithAceObjectArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id AFMessagesGetAceDomainObjectsFromContext(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_class *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v19;
  id v20;
  id v21;
  id v22;
  _BYTE buf[12];
  __int16 v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "objectForKey:", CFSTR("AssistantDirectActionEventMessagesConversationGUIDKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315395;
      *(_QWORD *)&buf[4] = "AFMessagesGetAceDomainObjectsFromContext";
      v24 = 2113;
      v25 = v2;
      _os_log_impl(&dword_19AF50000, v3, OS_LOG_TYPE_INFO, "%s Using conversation guid: %{private}@", buf, 0x16u);
    }
    v4 = objc_alloc_init(MEMORY[0x1E0D88498]);
    objc_msgSend(v4, "setChatIdentifier:", v2);
    if (v4)
      goto LABEL_5;
LABEL_15:
    v5 = 0;
    goto LABEL_16;
  }
  objc_msgSend(v1, "objectForKey:", CFSTR("AssistantDirectActionEventMessagesFullNameKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("AssistantDirectActionEventMessagesAddressKey"));
  v7 = objc_claimAutoreleasedReturnValue();
  if (!(v6 | v7))
  {
    v4 = 0;
    goto LABEL_14;
  }
  v4 = objc_alloc_init(MEMORY[0x1E0D88498]);
  objc_msgSend(v4, "setOutgoing:", MEMORY[0x1E0C9AAB0]);
  v8 = objc_alloc_init(MEMORY[0x1E0D88310]);
  objc_msgSend(v8, "setDisplayText:", v6);
  objc_msgSend(v8, "setData:", v7);
  v9 = (objc_class *)MEMORY[0x1E0D88308];
  v10 = (id)v6;
  v11 = (id)v7;
  v12 = objc_alloc_init(v9);
  objc_msgSend(v12, "setFullName:", v10);

  *(_QWORD *)buf = 0;
  v20 = 0;
  AFMessagesGetPhoneNumberEmailAddressFromString(buf, &v20, v11);

  v13 = *(id *)buf;
  v14 = v20;
  if (v14)
  {
    v19 = v13;
    v15 = objc_alloc_init(MEMORY[0x1E0D88070]);
    objc_msgSend(v15, "setEmailAddress:", v14);
    v26[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setEmails:", v16);
LABEL_12:

    v13 = v19;
    goto LABEL_13;
  }
  if (v13)
  {
    v15 = objc_alloc_init(MEMORY[0x1E0D88318]);
    v19 = v13;
    objc_msgSend(v15, "setNumber:", v13);
    v26[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setPhones:", v16);
    goto LABEL_12;
  }
LABEL_13:

  objc_msgSend(v8, "setObject:", v12);
  v22 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v22, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setMsgRecipients:", v17);

LABEL_14:
  if (!v4)
    goto LABEL_15;
LABEL_5:
  v21 = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1, v19);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

  return v5;
}

AFAudioSessionAssertionRemoteAcquisitionService *AFAudioSessionAssertionGetCurrentAcquisitionService()
{
  AFAudioSessionAssertionRemoteAcquisitionService *v0;
  AFAudioSessionAssertionRemoteAcquisitionService *v1;
  void *v2;

  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  if (s_currentAcquisitionService)
  {
    v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)(id)s_currentAcquisitionService;
  }
  else
  {
    if (s_localAcquisitionService)
    {
      v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)(id)s_localAcquisitionService;
    }
    else if (!s_localAcquisitionServiceProvider
           || ((*(void (**)(void))(s_localAcquisitionServiceProvider + 16))(),
               (v0 = (AFAudioSessionAssertionRemoteAcquisitionService *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      v1 = [AFAudioSessionAssertionRemoteAcquisitionService alloc];
      +[AFInstanceContext currentContext](AFInstanceContext, "currentContext");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v0 = -[AFAudioSessionAssertionRemoteAcquisitionService initWithInstanceContext:](v1, "initWithInstanceContext:", v2);

    }
    objc_storeStrong((id *)&s_currentAcquisitionService, v0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
  return v0;
}

void AFAudioSessionAssertionSetLocalAcquisitionService(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  v2 = (void *)s_currentAcquisitionService;
  s_currentAcquisitionService = 0;

  v3 = (void *)s_localAcquisitionService;
  s_localAcquisitionService = (uint64_t)v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
}

void AFAudioSessionAssertionSetLocalAcquisitionServiceProvider(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_acquisitionServiceLock);
  v2 = (void *)s_currentAcquisitionService;
  s_currentAcquisitionService = 0;

  v3 = MEMORY[0x1A1AC0C3C](v1);
  v4 = (void *)s_localAcquisitionServiceProvider;
  s_localAcquisitionServiceProvider = v3;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_acquisitionServiceLock);
}

uint64_t initIMStringIsPhoneNumber(void *a1)
{
  id v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v4;

  v1 = a1;
  v2 = IMFoundationLibrary();
  v3 = (uint64_t (*)())dlsym(v2, "IMStringIsPhoneNumber");
  softLinkIMStringIsPhoneNumber = v3;
  if (!v3)
    __assert_rtn("initIMStringIsPhoneNumber", "AFSiriRingtone.m", 34, "softLinkIMStringIsPhoneNumber");
  v4 = ((uint64_t (*)(id))v3)(v1);

  return v4;
}

void *IMFoundationLibrary()
{
  void *result;

  result = (void *)IMFoundationLibrary_frameworkLibrary;
  if (!IMFoundationLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation", 2);
    IMFoundationLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("IMFoundationLibrary", "AFSiriRingtone.m", 33, "frameworkLibrary");
  }
  return result;
}

uint64_t initIMStringIsEmail(void *a1)
{
  id v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v4;

  v1 = a1;
  v2 = IMFoundationLibrary();
  v3 = (uint64_t (*)())dlsym(v2, "IMStringIsEmail");
  softLinkIMStringIsEmail = v3;
  if (!v3)
    __assert_rtn("initIMStringIsEmail", "AFSiriRingtone.m", 35, "softLinkIMStringIsEmail");
  v4 = ((uint64_t (*)(id))v3)(v1);

  return v4;
}

id AFRingtoneLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  +[AFLocalization sharedInstance](AFLocalization, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:table:bundle:languageCode:", v4, CFSTR("Ringtone"), v6, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id CNContactPhonemeDataKeyFunction()
{
  return (id)constantCNContactPhonemeDataKey;
}

id initCNContactPhonemeDataKey()
{
  if (initCNContactPhonemeDataKey_sOnce != -1)
    dispatch_once(&initCNContactPhonemeDataKey_sOnce, &__block_literal_global_483);
  return (id)constantCNContactPhonemeDataKey;
}

id _FullyQualifiedDomainObjectProperty(void *a1, void *a2, void *a3)
{
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v5 = (objc_class *)MEMORY[0x1E0CB3940];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = (void *)objc_msgSend([v5 alloc], "initWithFormat:", CFSTR("%@#%@#%@"), v8, v7, v6);

  return v9;
}

void __initCNContactPhonemeDataKey_block_invoke()
{
  id *v0;

  if (ContactsLibrary_sOnce != -1)
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_176);
  v0 = (id *)dlsym((void *)ContactsLibrary_sLib, "CNContactPhonemeDataKey");
  if (!v0)
    __assert_rtn("initCNContactPhonemeDataKey_block_invoke", "AFSiriRingtone.m", 31, "constant");
  objc_storeStrong((id *)&constantCNContactPhonemeDataKey, *v0);
  getCNContactPhonemeDataKey = (uint64_t (*)())CNContactPhonemeDataKeyFunction;
}

void sub_19AF76F00(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19AF77288(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_19AF774A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id AFProviderServiceXPCInterface()
{
  if (AFProviderServiceXPCInterface_onceToken != -1)
    dispatch_once(&AFProviderServiceXPCInterface_onceToken, &__block_literal_global_892);
  return (id)AFProviderServiceXPCInterface_cachedXPCInterface;
}

id AFProviderServiceDelegateXPCInterface()
{
  if (AFProviderServiceDelegateXPCInterface_onceToken != -1)
    dispatch_once(&AFProviderServiceDelegateXPCInterface_onceToken, &__block_literal_global_59);
  return (id)AFProviderServiceDelegateXPCInterface_cachedXPCInterface;
}

uint64_t AFInvocationFeedbackExperimentFeatureGroupsValidate(char a1)
{
  return a1 & 0xF;
}

id AFInvocationFeedbackExperimentFeatureGroupsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("one"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend(v3, "addObject:", CFSTR("three"));
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("two"));
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((v1 & 8) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("four"));
LABEL_7:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t AFInvocationFeedbackExperimentFeatureGroupsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_onceToken != -1)
              dispatch_once(&_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_onceToken, &__block_literal_global_903);
            objc_msgSend((id)_AFInvocationFeedbackExperimentFeatureGroupsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19AF79AF8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t AFSpeechRecordingEventListenerGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432078);
}

BOOL AFSiriUserNotificationAnnouncementTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xA;
}

BOOL AFSiriUserNotificationAnnouncementTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 9;
}

const __CFString *AFSiriUserNotificationAnnouncementTypeGetName(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("(unknown)");
  else
    return off_1E3A2D0D8[a1];
}

uint64_t AFSiriUserNotificationAnnouncementTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriUserNotificationAnnouncementTypeGetFromName_onceToken != -1)
      dispatch_once(&AFSiriUserNotificationAnnouncementTypeGetFromName_onceToken, &__block_literal_global_1356);
    objc_msgSend((id)AFSiriUserNotificationAnnouncementTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

__CFString *AFVoiceGenderGetName(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E3A2D128[a1];
}

__CFString *AFVoiceFootprintGetName(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E3A2D148[a1];
}

BOOL AFSiriActivationSourceGetIsValid(unint64_t a1)
{
  return a1 < 0x10;
}

BOOL AFSiriActivationSourceGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xF;
}

const __CFString *AFSiriActivationSourceGetName(unint64_t a1)
{
  if (a1 > 0xF)
    return CFSTR("(unknown)");
  else
    return off_1E3A2D180[a1];
}

uint64_t AFSiriActivationSourceGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriActivationSourceGetFromName_onceToken != -1)
      dispatch_once(&AFSiriActivationSourceGetFromName_onceToken, &__block_literal_global_1531);
    objc_msgSend((id)AFSiriActivationSourceGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id BMDiscoverabilitySignalEventFunction()
{
  return (id)classBMDiscoverabilitySignalEvent;
}

id initBMDiscoverabilitySignalEvent()
{
  if (initBMDiscoverabilitySignalEvent_sOnce != -1)
    dispatch_once(&initBMDiscoverabilitySignalEvent_sOnce, &__block_literal_global_26);
  return (id)classBMDiscoverabilitySignalEvent;
}

id BMStreamsFunction()
{
  return (id)classBMStreams;
}

id initBMStreams()
{
  if (initBMStreams_sOnce != -1)
    dispatch_once(&initBMStreams_sOnce, &__block_literal_global_30);
  return (id)classBMStreams;
}

Class __initBMStreams_block_invoke()
{
  Class result;

  if (BiomeStreamsLibrary_sOnce != -1)
    dispatch_once(&BiomeStreamsLibrary_sOnce, &__block_literal_global_28);
  result = objc_getClass("BMStreams");
  classBMStreams = (uint64_t)result;
  getBMStreamsClass = BMStreamsFunction;
  return result;
}

Class __initBMDiscoverabilitySignalEvent_block_invoke()
{
  Class result;

  if (BiomeStreamsLibrary_sOnce != -1)
    dispatch_once(&BiomeStreamsLibrary_sOnce, &__block_literal_global_28);
  result = objc_getClass("BMDiscoverabilitySignalEvent");
  classBMDiscoverabilitySignalEvent = (uint64_t)result;
  getBMDiscoverabilitySignalEventClass = BMDiscoverabilitySignalEventFunction;
  return result;
}

void sub_19AF7FA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _AFAssertionCreateDescriptionOfProperties(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v19;
  void *v20;
  void *v21;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v19 = [v1 alloc];
  objc_msgSend(v2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "context");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v21, "timestamp");
  objc_msgSend(v2, "context");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "reason");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "effectiveDate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "context");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "effectiveDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "timeIntervalSinceNow");
  v11 = v10;
  objc_msgSend(v2, "context");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "expirationDuration");
  v14 = v13;
  objc_msgSend(v2, "context");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "userInfo");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v19, "initWithFormat:", CFSTR("uuid = %@, timestamp = %llu, reason = %@, effectiveDate = %@ (%f), expirationDuration = %f, userInfo = %@"), v3, v4, v5, v7, v11, v14, v16);

  return v17;
}

void sub_19AF821FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF82648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  _Block_object_dispose(&a23, 8);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

BOOL AFMyriadGoodnessScoreBumpReasonGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFMyriadGoodnessScoreBumpReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFMyriadGoodnessScoreBumpReasonGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A2D7C8[a1];
}

uint64_t AFMyriadGoodnessScoreBumpReasonGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFMyriadGoodnessScoreBumpReasonGetFromName_onceToken != -1)
      dispatch_once(&AFMyriadGoodnessScoreBumpReasonGetFromName_onceToken, &__block_literal_global_2670);
    objc_msgSend((id)AFMyriadGoodnessScoreBumpReasonGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFLogDirectory()
{
  void *v0;
  void *v1;

  CPSharedResourcesDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("/Library/Logs/CrashReporter/Assistant/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id AFSpeechLogsDirectory()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  id v4;
  NSObject *v5;
  id v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  AFLogDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("SpeechLogs"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v3 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v1, 1, 0, &v7);
  v4 = v7;

  if ((v3 & 1) == 0)
  {
    v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "AFSpeechLogsDirectory";
      v10 = 2114;
      v11 = v1;
      v12 = 2114;
      v13 = v4;
      _os_log_error_impl(&dword_19AF50000, v5, OS_LOG_TYPE_ERROR, "%s Couldn't create speech log directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v1;
}

id AFAnalyticsLogsDirectory()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  id v4;
  NSObject *v5;
  id v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  AFLogDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Analytics"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v3 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v1, 1, 0, &v7);
  v4 = v7;

  if ((v3 & 1) == 0)
  {
    v5 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "AFAnalyticsLogsDirectory";
      v10 = 2114;
      v11 = v1;
      v12 = 2114;
      v13 = v4;
      _os_log_error_impl(&dword_19AF50000, v5, OS_LOG_TYPE_ERROR, "%s Couldn't create analytics log directory at path %{public}@ %{public}@", buf, 0x20u);
    }
  }

  return v1;
}

void AFClearInternalLogFiles()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  __CFString *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  NSObject *v16;
  const __CFString *v17;
  NSObject *v18;
  NSObject *v19;
  __int128 v20;
  void *v21;
  int v22;
  char *v23;
  uint64_t v24;
  id obj;
  void *v26;
  void *v27;
  id v28;
  id v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  const __CFString *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (AFIsInternalInstall_isInternal)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "dateByAddingTimeInterval:", -1296000.0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = objc_alloc_init(MEMORY[0x1E0CB3620]);
    AFSpeechLogsDirectory();
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v29[1] = 0;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v2;
    objc_msgSend(v2, "contentsOfDirectoryAtPath:error:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (__CFString *)0;
    obj = v3;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
    if (v5)
    {
      v7 = v5;
      v23 = 0;
      v8 = *(_QWORD *)v31;
      v24 = *MEMORY[0x1E0CB2A38];
      *(_QWORD *)&v6 = 136315650;
      v20 = v6;
      v21 = v1;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v31 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_msgSend(v10, "pathExtension", v20);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v11, "compare:options:", CFSTR("opx"), 1)
            || !objc_msgSend(v11, "compare:options:", CFSTR("pcm"), 1))
          {
            objc_msgSend(v26, "stringByAppendingPathComponent:", v10);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v29[0] = v4;
            objc_msgSend(v27, "attributesOfItemAtPath:error:", v12, v29);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = (const __CFString *)v29[0];

            if (!v14)
            {
              objc_msgSend(v13, "objectForKey:", v24);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v15, "compare:", v1) == -1)
              {
                v28 = 0;
                v22 = objc_msgSend(v27, "removeItemAtPath:error:", v12, &v28);
                v14 = (const __CFString *)v28;
                v16 = AFSiriLogContextUtility;
                if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = v20;
                  v17 = &stru_1E3A37708;
                  if (!v22)
                    v17 = v14;
                  v35 = "AFClearInternalLogFiles";
                  v36 = 2112;
                  v37 = v10;
                  v38 = 2112;
                  v39 = v17;
                  _os_log_impl(&dword_19AF50000, v16, OS_LOG_TYPE_INFO, "%s Removing speech log %@ %@", buf, 0x20u);
                }
                ++v23;
                v1 = v21;
              }
              else
              {
                v14 = 0;
              }

            }
            v4 = (__CFString *)v14;
          }

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
      }
      while (v7);
    }
    else
    {
      v23 = 0;
    }

    v19 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "AFClearInternalLogFiles";
      v36 = 2048;
      v37 = v23;
      _os_log_impl(&dword_19AF50000, v19, OS_LOG_TYPE_INFO, "%s Finished, and removed %ld files", buf, 0x16u);
    }

  }
  else
  {
    v18 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v35 = "AFClearInternalLogFiles";
      _os_log_impl(&dword_19AF50000, v18, OS_LOG_TYPE_INFO, "%s Nothing to do on non-internal install", buf, 0xCu);
    }
  }
}

void AFLogInitIfNeeded()
{
  if (AFLogInitIfNeeded_once != -1)
    dispatch_once(&AFLogInitIfNeeded_once, &__block_literal_global_2748);
}

uint64_t AFLogWantsToLogParsedCommandObjects()
{
  return 0;
}

void AFLogParsedCommandObject(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  id v26[2];
  id v27;
  id v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  AFLogDirectory();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringByAppendingPathComponent:", CFSTR("CommandLogs"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  v15 = objc_msgSend(v14, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v13, 1, 0, &v28);
  v16 = v28;

  if ((v15 & 1) != 0)
  {
    v27 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v10, 200, 0, &v27);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v27;

    if (v17)
    {
      v26[1] = &a9;
      v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v11, &a9);
      objc_msgSend(v13, "stringByAppendingPathComponent:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringByAppendingPathExtension:", CFSTR("plist"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      v26[0] = v18;
      v22 = objc_msgSend(v17, "writeToFile:options:error:", v21, 1, v26);
      v16 = v26[0];

      if ((v22 & 1) == 0)
      {
        v23 = AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v30 = "AFLogParsedCommandObject";
          v31 = 2112;
          v32 = v21;
          v33 = 2112;
          v34 = v16;
          _os_log_impl(&dword_19AF50000, v23, OS_LOG_TYPE_INFO, "%s Couldn't write to %@: %@", buf, 0x20u);
        }
      }

    }
    else
    {
      v25 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v30 = "AFLogParsedCommandObject";
        v31 = 2112;
        v32 = v18;
        _os_log_impl(&dword_19AF50000, v25, OS_LOG_TYPE_INFO, "%s Couldn't serialize: %@", buf, 0x16u);
      }
      v16 = v18;
    }

  }
  else
  {
    v24 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "AFLogParsedCommandObject";
      v31 = 2112;
      v32 = v13;
      v33 = 2112;
      v34 = v16;
      _os_log_impl(&dword_19AF50000, v24, OS_LOG_TYPE_INFO, "%s Couldn't create %@: %@", buf, 0x20u);
    }
  }

}

unint64_t AFTruncateMachTimeToTenthOfASecond(uint64_t a1)
{
  if (AFTruncateMachTimeToTenthOfASecond_onceToken != -1)
    dispatch_once(&AFTruncateMachTimeToTenthOfASecond_onceToken, &__block_literal_global_60);
  return 1000000000
       * (unint64_t)AFTruncateMachTimeToTenthOfASecond_machTimebaseInfo
       * a1
       / *(unsigned int *)algn_1EE3E4754
       / 0x3B9ACA00
       * *(unsigned int *)algn_1EE3E4754
       / AFTruncateMachTimeToTenthOfASecond_machTimebaseInfo;
}

void AFDispatchSyncLogged(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  id v10;
  const char *label;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  label = dispatch_queue_get_label(v9);
  v12 = AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v21 = "AFDispatchSyncLogged";
    v22 = 2080;
    v23 = a3;
    v24 = 2048;
    v25 = a4;
    v26 = 2080;
    v27 = label;
    _os_log_impl(&dword_19AF50000, v12, OS_LOG_TYPE_INFO, "%s Queue block at %s line %lu (queue: %s)", buf, 0x2Au);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __AFDispatchSyncLogged_block_invoke;
  block[3] = &unk_1E3A2D820;
  v17 = a4;
  v18 = label;
  v19 = a5;
  v15 = v10;
  v16 = a3;
  v13 = v10;
  dispatch_sync(v9, block);

}

unint64_t _AFConvertMachTimeToMilliseconds(uint64_t a1)
{
  if (_AFConvertMachTimeToMilliseconds_onceToken != -1)
    dispatch_once(&_AFConvertMachTimeToMilliseconds_onceToken, &__block_literal_global_62);
  return (unint64_t)_AFConvertMachTimeToMilliseconds_machTimebaseInfo
       * a1
       / *(unsigned int *)algn_1EE3E4764
       / 0xF4240;
}

void AFDispatchAsyncLogged(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  id v10;
  const char *label;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  label = dispatch_queue_get_label(v9);
  v12 = AFSiriLogContextDispatch;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDispatch, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v21 = "AFDispatchAsyncLogged";
    v22 = 2080;
    v23 = a3;
    v24 = 2048;
    v25 = a4;
    v26 = 2080;
    v27 = label;
    _os_log_impl(&dword_19AF50000, v12, OS_LOG_TYPE_INFO, "%s Queue block at %s line %lu (queue: %s)", buf, 0x2Au);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __AFDispatchAsyncLogged_block_invoke;
  block[3] = &unk_1E3A2D820;
  v17 = a4;
  v18 = label;
  v19 = a5;
  v15 = v10;
  v16 = a3;
  v13 = v10;
  dispatch_async(v9, block);

}

void sub_19AF86FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF87318(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL AFExperimentConfigurationTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFExperimentConfigurationTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFExperimentConfigurationTypeGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A2D940[a1];
}

uint64_t AFExperimentConfigurationTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFExperimentConfigurationTypeGetFromName_onceToken != -1)
      dispatch_once(&AFExperimentConfigurationTypeGetFromName_onceToken, &__block_literal_global_3101);
    objc_msgSend((id)AFExperimentConfigurationTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSiriActivationServicePortGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSiriActivationServicePortGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFSiriActivationServicePortGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A2D978[a1];
}

uint64_t AFSiriActivationServicePortGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriActivationServicePortGetFromName_onceToken != -1)
      dispatch_once(&AFSiriActivationServicePortGetFromName_onceToken, &__block_literal_global_3117);
    objc_msgSend((id)AFSiriActivationServicePortGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFSecurityServiceGetXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[4];

  v45[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3EB610);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v45[0] = objc_opt_class();
  v45[1] = objc_opt_class();
  v45[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v45, 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_processDataMap_usingProcedure_completion_, 0, 0);

  v4 = (void *)MEMORY[0x1E0C99E60];
  v44[0] = objc_opt_class();
  v44[1] = objc_opt_class();
  v44[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_processDataMap_usingProcedure_completion_, 0, 1);

  v7 = (void *)MEMORY[0x1E0C99E60];
  v43[0] = objc_opt_class();
  v43[1] = objc_opt_class();
  v43[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_processDataMap_usingProcedure_completion_, 1, 1);

  v10 = (void *)MEMORY[0x1E0C99E60];
  v42 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setWithArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_internalAuthAppleConnectServiceTicket_, 0, 1);

  v13 = (void *)MEMORY[0x1E0C99E60];
  v41 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v41, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setWithArray:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v15, sel_internalAuthAppleConnectServiceTicket_, 1, 1);

  v16 = (void *)MEMORY[0x1E0C99E60];
  v40 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v40, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setWithArray:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v18, sel_setInternalAuthAppleConnectServiceTicket_completion_, 0, 0);

  v19 = (void *)MEMORY[0x1E0C99E60];
  v39 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v39, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setWithArray:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_setInternalAuthAppleConnectServiceTicket_completion_, 0, 1);

  v22 = (void *)MEMORY[0x1E0C99E60];
  v38 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setWithArray:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v24, sel_internalAuthSessionToken_, 0, 1);

  v25 = (void *)MEMORY[0x1E0C99E60];
  v37 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setWithArray:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v27, sel_internalAuthSessionToken_, 1, 1);

  v28 = (void *)MEMORY[0x1E0C99E60];
  v36 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v36, 1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setWithArray:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v30, sel_setInternalAuthSessionToken_completion_, 0, 0);

  v31 = (void *)MEMORY[0x1E0C99E60];
  v35 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v35, 1);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setWithArray:", v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_setInternalAuthSessionToken_completion_, 0, 1);

  return v0;
}

AFCoreAnalyticsCrossDeviceEvent *AFCoreAnalyticsEventCreateForDeviceContexts(void *a1, void *a2)
{
  id v3;
  id v4;
  AFCoreAnalyticsCrossDeviceEvent *v5;
  void *v6;
  void *v7;
  AFCoreAnalyticsCrossDeviceEvent *v8;

  v3 = a2;
  v4 = a1;
  v5 = [AFCoreAnalyticsCrossDeviceEvent alloc];
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[AFCoreAnalyticsCrossDeviceEvent initWithNearbyDevicesLoggingID:](v5, "initWithNearbyDevicesLoggingID:", v7);

  -[AFCoreAnalyticsCrossDeviceEvent addNearbyDeviceContexts:proximityInfo:](v8, "addNearbyDeviceContexts:proximityInfo:", v4, v3);
  return v8;
}

AFCoreAnalyticsCrossDeviceEvent *AFCoreAnalyticsEventCreateForServiceDeviceContexts(void *a1)
{
  id v1;
  AFCoreAnalyticsCrossDeviceEvent *v2;
  void *v3;
  void *v4;
  AFCoreAnalyticsCrossDeviceEvent *v5;
  id v6;
  AFCoreAnalyticsCrossDeviceEvent *v7;
  id v8;
  void *v9;
  AFCoreAnalyticsCrossDeviceEvent *v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *);
  void *v15;
  AFCoreAnalyticsCrossDeviceEvent *v16;
  id v17;

  v1 = a1;
  v2 = [AFCoreAnalyticsCrossDeviceEvent alloc];
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[AFCoreAnalyticsCrossDeviceEvent initWithNearbyDevicesLoggingID:](v2, "initWithNearbyDevicesLoggingID:", v4);

  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = __AFCoreAnalyticsEventCreateForServiceDeviceContexts_block_invoke;
  v15 = &unk_1E3A2D9E0;
  v7 = v5;
  v16 = v7;
  v17 = v6;
  v8 = v6;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", &v12);

  -[AFCoreAnalyticsCrossDeviceEvent setNearbyDevicesPayloads:](v7, "setNearbyDevicesPayloads:", v8, v12, v13, v14, v15);
  v9 = v17;
  v10 = v7;

  return v10;
}

AFCoreAnalyticsDeviceContextPayload *AFCoreAnalyticsPayloadCreateForDeviceContext(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  const __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  AFCoreAnalyticsDeviceContextPayload *v39;
  void *v40;
  __CFString *v41;
  void *v42;
  void *v43;
  void *v44;

  v5 = a1;
  v6 = (void *)MEMORY[0x1E0C99D68];
  v7 = a3;
  objc_msgSend(v6, "date");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "deviceInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "productType");
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (a2 <= 1999)
  {
    v14 = CFSTR("unknown");
    v15 = CFSTR("far");
    if (a2 != 1000)
      v15 = 0;
    if (a2)
      v14 = (__CFString *)v15;
  }
  else
  {
    switch(a2)
    {
      case 2000:
        v14 = CFSTR("near");
        break;
      case 3000:
        v14 = CFSTR("immediate");
        break;
      case 4000:
        v12 = CFSTR("primary");
        v13 = CFSTR("primary");
        if (!v11)
          v11 = (__CFString *)MGCopyAnswer();
        goto LABEL_17;
      default:
        v14 = 0;
        break;
    }
  }
  v12 = v14;
  if (!v11)
    v11 = CFSTR("Unknown");
LABEL_17:
  v16 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v5, "alarmSnapshot");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "numberWithBool:", objc_msgSend(v17, "hasFiringAlarms"));
  v18 = objc_claimAutoreleasedReturnValue();

  v19 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v5, "timerSnapshot");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "numberWithBool:", objc_msgSend(v20, "hasFiringTimers"));
  v21 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "playbackStateSnapshot");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "playbackState");
  v44 = (void *)v9;
  v42 = v7;
  v24 = v5;
  v25 = (void *)v21;
  v26 = (void *)v18;
  v27 = (__CFString *)v12;
  if (v23 > 5)
    v28 = CFSTR("(unknown)");
  else
    v28 = *(&off_1E3A325B8 + v23);
  v41 = v28;

  objc_msgSend(v24, "playbackStateSnapshot");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "nowPlayingTimestamp");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v30, v43, 1, 1800.0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "homeAnnouncementSnapshot");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  AFHomeAnnouncementStateGetNames(objc_msgSend(v31, "state"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "componentsJoinedByString:", CFSTR(","));
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "homeAnnouncementSnapshot");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "lastPlayedAnnouncement");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "startedDate");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  AFAnalyticsBucketizedDurationForStartDateAndEndDate((uint64_t)v36, v43, 1, 1800.0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = -[AFCoreAnalyticsDeviceContextPayload initWithNearbyProductType:proximity:alarmFiring:timerFiring:playbackState:playbackRecency:homeAnnouncementState:homeAnnouncementRecency:nearbyDevicesRequestIdentifier:targetedResult:contextIdentifier:]([AFCoreAnalyticsDeviceContextPayload alloc], "initWithNearbyProductType:proximity:alarmFiring:timerFiring:playbackState:playbackRecency:homeAnnouncementState:homeAnnouncementRecency:nearbyDevicesRequestIdentifier:targetedResult:contextIdentifier:", v11, v27, v26, v25, v41, v40, v33, v37, v42, 0, v44);

  return v39;
}

uint64_t AFTurnIdentifierGenerate()
{
  return objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
}

id AFTurnIdentifierGetBytes(void *a1)
{
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    objc_msgSend(a1, "getUUIDBytes:", v2);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v2, 16);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id AFTurnIdentifierCreateFromBytes(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  _BYTE v6[22];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length") == 16)
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)&v6[8] = 0;
    objc_msgSend(v1, "getBytes:length:", v6, 16);
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", v6);
  }
  else
  {
    v3 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      v4 = v3;
      *(_DWORD *)v6 = 136315394;
      *(_QWORD *)&v6[4] = "AFTurnIdentifierCreateFromBytes";
      *(_WORD *)&v6[12] = 2048;
      *(_QWORD *)&v6[14] = objc_msgSend(v1, "length");
      _os_log_impl(&dword_19AF50000, v4, OS_LOG_TYPE_INFO, "%s Attempted to convert bytes with invalid length (%ld) to AFTurnIdentifier", v6, 0x16u);

    }
    v2 = 0;
  }

  return v2;
}

void sub_19AF8C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF8DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AF8EDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL AFBluetoothDeviceSettingBooleanValueGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothDeviceSettingBooleanValueGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFBluetoothDeviceSettingBooleanValueGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A2DBC0[a1];
}

uint64_t AFBluetoothDeviceSettingBooleanValueGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothDeviceSettingBooleanValueGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothDeviceSettingBooleanValueGetFromName_onceToken, &__block_literal_global_4333);
    objc_msgSend((id)AFBluetoothDeviceSettingBooleanValueGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFAnalyticsObserverGetXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE417940);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_didObserveEvents_completion_, 0, 0);

  return v0;
}

BOOL AFIsSyncNeeded()
{
  void *v0;
  _BOOL8 v1;

  AFSyncKeysThatNeedToBeSynced();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "count") != 0;

  return v1;
}

id AFSyncKeysThatNeedToBeSynced()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  AFUserSupportDirectoryPath();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "contentsOfDirectoryAtPath:error:", v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v9, "isEqualToString:", CFSTR("sync_flag"), (_QWORD)v12) & 1) == 0
          && objc_msgSend(v9, "hasPrefix:", CFSTR("sync_flag")))
        {
          objc_msgSend(v9, "substringFromIndex:", objc_msgSend(CFSTR("sync_flag"), "length"));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v10, "length"))
            objc_msgSend(v0, "addObject:", v10);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  return v0;
}

void sub_19AF92BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF92DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AF932DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AFErrorEnumerate(void *a1, char a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;
  id v9;
  __int128 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))v6;
  if (v5 && v6)
  {
    if ((a2 & 1) != 0)
    {
      v25[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      _AFErrorGetUnderlyingErrors(v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v9 = v8;
    if (objc_msgSend(v8, "count"))
    {
      v10 = 0uLL;
      do
      {
        v22 = v10;
        v23 = v10;
        v20 = v10;
        v21 = v10;
        v11 = v9;
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v12)
        {
          v13 = v12;
          v9 = 0;
          v14 = *(_QWORD *)v21;
          while (2)
          {
            for (i = 0; i != v13; ++i)
            {
              if (*(_QWORD *)v21 != v14)
                objc_enumerationMutation(v11);
              v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
              v19 = 0;
              ((void (**)(_QWORD, void *, char *))v7)[2](v7, v16, &v19);
              if (v19)
              {

                v9 = v11;
                goto LABEL_25;
              }
              _AFErrorGetUnderlyingErrors(v16);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v17, "count"))
              {
                if (!v9)
                  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                objc_msgSend(v9, "addObjectsFromArray:", v17);
              }

            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
            if (v13)
              continue;
            break;
          }
        }
        else
        {
          v9 = 0;
        }

        v18 = objc_msgSend(v9, "count");
        v10 = 0uLL;
      }
      while (v18);
    }
LABEL_25:

  }
}

id _AFErrorGetUnderlyingErrors(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "userInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0CB3388]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v9[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v2, "userInfo");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKey:", CFSTR("SiriUnderlyingErrors"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "count"))
        v5 = v7;
      else
        v5 = 0;

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t AFErrorSetUnderlyingError(void *a1, _QWORD *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  int v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!a2)
  {
    v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v15 = 136315138;
    v16 = "AFErrorSetUnderlyingError";
    v13 = "%s outTopLevelErrorPtr is NULL";
LABEL_14:
    _os_log_error_impl(&dword_19AF50000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v15, 0xCu);
    goto LABEL_15;
  }
  *a2 = 0;
  if (!v7)
  {
    v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v15 = 136315138;
    v16 = "AFErrorSetUnderlyingError";
    v13 = "%s inTopLevelError is nil";
    goto LABEL_14;
  }
  if (!v8)
  {
    v12 = AFSiriLogContextUtility;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v15 = 136315138;
    v16 = "AFErrorSetUnderlyingError";
    v13 = "%s matchError block is nil";
    goto LABEL_14;
  }
  if (!v9)
  {
    v12 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      v15 = 136315138;
      v16 = "AFErrorSetUnderlyingError";
      v13 = "%s buildUnderlyingError block is nil";
      goto LABEL_14;
    }
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v11 = _AFErrorSetUnderlyingErrorRecursively(v7, a2, v8, v9);
LABEL_16:

  return v11;
}

uint64_t _AFErrorSetUnderlyingErrorRecursively(void *a1, _QWORD *a2, void *a3, void *a4)
{
  id v7;
  unsigned int (**v8)(id, id);
  void (**v9)(_QWORD);
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v31[4];
  id v32;
  unsigned int (**v33)(id, id);
  void (**v34)(_QWORD);
  uint64_t *v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  uint8_t buf[4];
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  v37 = 0;
  v38 = &v37;
  v39 = 0x3032000000;
  v40 = __Block_byref_object_copy__4987;
  v41 = __Block_byref_object_dispose__4988;
  v42 = 0;
  if (v8[2](v8, v7))
  {
    v9[2](v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      v11 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v44 = "_AFErrorSetUnderlyingErrorRecursively";
        _os_log_error_impl(&dword_19AF50000, v11, OS_LOG_TYPE_ERROR, "%s Unable to create the new underlying error from specified block.", buf, 0xCu);
      }
      goto LABEL_10;
    }
LABEL_9:
    v17 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v7, "userInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0CB3388]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v36 = 0;
    _AFErrorSetUnderlyingErrorRecursively(v13, &v36, v8, v9);
    v10 = v36;
  }
  else
  {
    v10 = 0;
  }

  objc_msgSend(v7, "userInfo");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", CFSTR("SiriUnderlyingErrors"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = ___AFErrorSetUnderlyingErrorRecursively_block_invoke;
  v31[3] = &unk_1E3A2DD20;
  v33 = v8;
  v34 = v9;
  v35 = &v37;
  v16 = v15;
  v32 = v16;
  objc_msgSend(v16, "enumerateObjectsUsingBlock:", v31);

  if (v10)
    goto LABEL_9;
LABEL_10:
  v10 = 0;
  if (!objc_msgSend((id)v38[5], "count"))
  {
    v29 = 0;
    goto LABEL_22;
  }
  v17 = 1;
LABEL_12:
  objc_msgSend(v7, "userInfo");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v18, "mutableCopy");
  v20 = v19;
  if (v19)
    v21 = v19;
  else
    v21 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v22 = v21;

  if ((v17 & 1) == 0)
    objc_msgSend(v22, "setObject:forKey:", v10, *MEMORY[0x1E0CB3388]);
  if (objc_msgSend((id)v38[5], "count"))
  {
    v23 = (void *)objc_msgSend((id)v38[5], "copy");
    objc_msgSend(v22, "setObject:forKey:", v23, CFSTR("SiriUnderlyingErrors"));

  }
  v24 = (void *)MEMORY[0x1E0CB35C8];
  objc_msgSend(v7, "domain");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v7, "code");
  v27 = (void *)objc_msgSend(v22, "copy");
  objc_msgSend(v24, "errorWithDomain:code:userInfo:", v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2)
    *a2 = objc_retainAutorelease(v28);

  v29 = 1;
LABEL_22:
  _Block_object_dispose(&v37, 8);

  return v29;
}

void sub_19AF95344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4987(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4988(uint64_t a1)
{

}

void sub_19AF96EB8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void AFRecordCoreDuetEventAtTimestamps(NSObject *a1, void *a2, void *a3, void *a4, void *a5)
{
  _AFRecordCoreDuetEventAtTimestamps(a1, a2, CFSTR("/siri/ui"), a3, a4, a5);
}

void _AFRecordCoreDuetEventAtTimestamps(NSObject *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD block[4];
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___AFRecordCoreDuetEventAtTimestamps_block_invoke;
  block[3] = &unk_1E3A337D8;
  v22 = v12;
  v23 = v14;
  v24 = v15;
  v25 = v11;
  v26 = v13;
  v16 = v13;
  v17 = v11;
  v18 = v15;
  v19 = v14;
  v20 = v12;
  dispatch_async(a1, block);

}

id _DKEventStreamFunction()
{
  return (id)class_DKEventStream;
}

id init_DKEventStream()
{
  if (init_DKEventStream_sOnce != -1)
    dispatch_once(&init_DKEventStream_sOnce, &__block_literal_global_19);
  return (id)class_DKEventStream;
}

id _DKEventFunction()
{
  return (id)class_DKEvent;
}

id init_DKEvent()
{
  if (init_DKEvent_sOnce != -1)
    dispatch_once(&init_DKEvent_sOnce, &__block_literal_global_5347);
  return (id)class_DKEvent;
}

id _DKKnowledgeStoreFunction()
{
  return (id)class_DKKnowledgeStore;
}

id init_DKKnowledgeStore()
{
  if (init_DKKnowledgeStore_sOnce != -1)
    dispatch_once(&init_DKKnowledgeStore_sOnce, &__block_literal_global_23);
  return (id)class_DKKnowledgeStore;
}

void AFRecordCoreDuetEventWithStream(void *a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;

  v7 = (void *)MEMORY[0x1E0C99D68];
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  objc_msgSend(v7, "date");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  _AFRecordCoreDuetEventAtTimestamps(v11, v10, v9, v8, v12, v12);

}

void AFRecordCoreDuetEvent(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;

  v5 = (void *)MEMORY[0x1E0C99D68];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  objc_msgSend(v5, "date");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  _AFRecordCoreDuetEventAtTimestamps(v8, v7, CFSTR("/siri/ui"), v6, v9, v9);

}

void AFRecordCoreDuetContext(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  NSObject *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5 && v6)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __AFRecordCoreDuetContext_block_invoke;
    v9[3] = &unk_1E3A36FC8;
    v10 = v6;
    v11 = v7;
    dispatch_async(v5, v9);

  }
  else
  {
    v8 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "AFRecordCoreDuetContext";
      v14 = 2112;
      v15 = v5;
      v16 = 2112;
      v17 = v6;
      _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Queue and key must be non-nil: %@, %@", buf, 0x20u);
    }
  }

}

id _CDContextualKeyPathFunction()
{
  return (id)class_CDContextualKeyPath;
}

id init_CDContextualKeyPath()
{
  if (init_CDContextualKeyPath_sOnce != -1)
    dispatch_once(&init_CDContextualKeyPath_sOnce, &__block_literal_global_11);
  return (id)class_CDContextualKeyPath;
}

id _CDClientContextFunction()
{
  return (id)class_CDClientContext;
}

id init_CDClientContext()
{
  if (init_CDClientContext_sOnce != -1)
    dispatch_once(&init_CDClientContext_sOnce, &__block_literal_global_15);
  return (id)class_CDClientContext;
}

void AFDeleteCoreDuetEventsInStream(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  NSObject *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __AFDeleteCoreDuetEventsInStream_block_invoke;
    block[3] = &unk_1E3A36F30;
    v8 = v4;
    dispatch_async(v3, block);

  }
  else
  {
    v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "AFDeleteCoreDuetEventsInStream";
      v11 = 2112;
      v12 = v3;
      v13 = 2112;
      v14 = v5;
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Queue and stream must be non-nil: %@, %@", buf, 0x20u);
    }
  }

}

id _DKQueryFunction()
{
  return (id)class_DKQuery;
}

id init_DKQuery()
{
  if (init_DKQuery_sOnce != -1)
    dispatch_once(&init_DKQuery_sOnce, &__block_literal_global_17);
  return (id)class_DKQuery;
}

id _AFFetchCoreDuetEventsWithStream(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  id DKEventQueryClass;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(get_DKKnowledgeStoreClass(), "knowledgeStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    DKEventQueryClass = get_DKEventQueryClass();
    v15 = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(DKEventQueryClass, "eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:", v5, v9, 0, a3, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = 0;
    objc_msgSend(v7, "executeQuery:error:", v10, &v14);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "_AFFetchCoreDuetEventsWithStream";
      _os_log_error_impl(&dword_19AF50000, v12, OS_LOG_TYPE_ERROR, "%s Unable to get an instance of _DKKnowledgeStore.", buf, 0xCu);
    }
    v11 = 0;
  }

  return v11;
}

id _DKEventQueryFunction()
{
  return (id)class_DKEventQuery;
}

id init_DKEventQuery()
{
  if (init_DKEventQuery_sOnce != -1)
    dispatch_once(&init_DKEventQuery_sOnce, &__block_literal_global_21);
  return (id)class_DKEventQuery;
}

id AFBTHeadunitsConnectedInLast24Hours()
{
  void *v0;
  id v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  id v22;
  __int128 v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  _retrieveAllBluetoothDevicesConnectedEventsInLast24Hours();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v0;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v31;
    *(_QWORD *)&v3 = 136315394;
    v24 = v3;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v31 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v6);
        v8 = AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v24;
          v36 = "AFBTHeadunitsConnectedInLast24Hours";
          v37 = 2112;
          v38 = v7;
          _os_log_debug_impl(&dword_19AF50000, v8, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
        }
        objc_msgSend(v7, "metadata", v24);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)get_DKBluetoothMetadataKeyClass(), "deviceType");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v11, "intValue") == 17 || objc_msgSend(v11, "intValue") == 22)
        {
          objc_msgSend((id)get_DKBluetoothMetadataKeyClass(), "productID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKey:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v13, "stringValue");
          v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (!-[__CFString length](v14, "length"))
          {

            v14 = CFSTR("unknown_product_id");
          }
          objc_msgSend(v1, "addObject:", v14);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
    }
    while (v4);
  }

  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v16 = v1;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v27 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
        v22 = objc_alloc_init(MEMORY[0x1E0D9A3F0]);
        objc_msgSend(v22, "setHeadUnitProductId:", v21);
        objc_msgSend(v15, "addObject:", v22);

      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v18);
  }

  return v15;
}

id _retrieveAllBluetoothDevicesConnectedEventsInLast24Hours()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(get_DKSystemEventStreamsClass(), "bluetoothIsConnectedStream");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateByAddingUnit:value:toDate:options:", 32, -24, v1, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("(startDate > %@ AND startDate < %@) OR (endDate > %@ AND endDate < %@)"), v3, v1, v3, v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    _AFFetchCoreDuetEventsWithStream(v4, v0, 1500);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

id _DKBluetoothMetadataKeyFunction()
{
  return (id)class_DKBluetoothMetadataKey;
}

id init_DKBluetoothMetadataKey()
{
  if (init_DKBluetoothMetadataKey_sOnce != -1)
    dispatch_once(&init_DKBluetoothMetadataKey_sOnce, &__block_literal_global_31_5362);
  return (id)class_DKBluetoothMetadataKey;
}

id _DKSystemEventStreamsFunction()
{
  return (id)class_DKSystemEventStreams;
}

id init_DKSystemEventStreams()
{
  if (init_DKSystemEventStreams_sOnce != -1)
    dispatch_once(&init_DKSystemEventStreams_sOnce, &__block_literal_global_29);
  return (id)class_DKSystemEventStreams;
}

id AFAppleAudioDeviceConnectedInLast24Hours()
{
  void *v0;
  id v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  __int128 v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  void *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  _retrieveAllBluetoothDevicesConnectedEventsInLast24Hours();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v0, "count"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v1 = v0;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v20;
    *(_QWORD *)&v3 = 136315394;
    v17 = v3;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v6);
        v8 = AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v17;
          v24 = "AFAppleAudioDeviceConnectedInLast24Hours";
          v25 = 2112;
          v26 = v7;
          _os_log_debug_impl(&dword_19AF50000, v8, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
        }
        objc_msgSend(v7, "metadata", v17);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(get_DKBluetoothMetadataKeyClass(), "isAppleAudioDevice");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v11, "BOOLValue"))
        {
          objc_msgSend(get_DKBluetoothMetadataKeyClass(), "productID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKey:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v13, "stringValue");
          v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (!-[__CFString length](v14, "length"))
          {

            v14 = CFSTR("unknown_product_id");
          }
          objc_msgSend(v18, "addObject:", v14);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v4);
  }

  objc_msgSend(v18, "allObjects");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id AFFileURLForConversationWithIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  CPSharedResourcesDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("Library"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("Assistant"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v4, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "URLByAppendingPathComponent:isDirectory:", v1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

const __CFString *AFActivationEventGetDescription(unint64_t a1)
{
  if (a1 > 0xB)
    return CFSTR("Unknown");
  else
    return off_1E3A2DF18[a1];
}

uint64_t AFSpeechEventIsBluetooth(unint64_t a1)
{
  return (a1 < 0x1C) & (0x9C0C408u >> a1);
}

uint64_t AFSpeechEventIsRemotePlugin(unint64_t a1)
{
  return (a1 < 0x1C) & (0x9C1C400u >> a1);
}

uint64_t AFSpeechEventIsVoiceTrigger(unint64_t a1)
{
  return (a1 < 0x20) & (0x80018900 >> a1);
}

uint64_t AFSpeechEventIsTVRemote(unint64_t a1)
{
  return (a1 < 0x19) & (0x1C00400u >> a1);
}

uint64_t AFSpeechEventIsHardwareTrigger(unint64_t a1)
{
  return (a1 < 0x1C) & (0x800460Eu >> a1);
}

const __CFString *AFSpeechEventGetDescription(unint64_t a1)
{
  if (a1 > 0x24)
    return CFSTR("Unknown");
  else
    return off_1E3A2DF78[a1];
}

__CFString *AFDescriptionOfAFQuickStopActions(uint64_t a1)
{
  __int16 v1;
  void *v2;
  void *v3;
  __CFString *v4;

  if (!a1)
  {
    v4 = CFSTR("AFQuickStopActionNone");
    return v4;
  }
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 4);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("AFQuickStopActionDismissFiringAlarm"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("AFQuickStopActionDismissFiringTimer"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("AFQuickStopActionInterruptSiriVoiceOutput"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("AFQuickStopActionStopMediaPlayback"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("AFQuickStopActionCancelRunningTimer"));
    if ((v1 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("AFQuickStopActionStopHomeAnnouncementPlayback"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x400) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("AFQuickSTopActionPromptForConfirmation"));
LABEL_10:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR("|"));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __af_mergedUtteranceDictionary_block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  *a4 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __af_mergedUtteranceDictionary_block_invoke_2;
  v12[3] = &unk_1E3A2E110;
  v13 = v8;
  v9 = *(void **)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  v15 = v7;
  v10 = v7;
  v11 = v8;
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v12);

}

id af_bestTokenInterpretation(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v4)
  {

LABEL_14:
    objc_msgSend(v2, "appendString:", CFSTR(" "), (_QWORD)v12);
    goto LABEL_15;
  }
  v5 = v4;
  v6 = 0;
  v7 = *(_QWORD *)v13;
  do
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v13 != v7)
        objc_enumerationMutation(v3);
      v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
      if (!((objc_msgSend(v2, "length", (_QWORD)v12) == 0) | v6 & 1)
        && (objc_msgSend(v9, "removeSpaceBefore") & 1) == 0)
      {
        objc_msgSend(v2, "appendString:", CFSTR(" "));
      }
      objc_msgSend(v9, "text");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "appendString:", v10);

      v6 = objc_msgSend(v9, "removeSpaceAfter");
    }
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  }
  while (v5);

  if ((v6 & 1) == 0)
    goto LABEL_14;
LABEL_15:

  return v2;
}

void __af_mergedUtteranceDictionary_block_invoke_2(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  objc_class *v6;
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;

  *a4 = 0;
  v6 = (objc_class *)MEMORY[0x1E0C99E08];
  v7 = a3;
  v8 = a2;
  v35 = objc_alloc_init(v6);
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("min"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "intValue");

  objc_msgSend(v7, "objectForKey:", CFSTR("min"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "intValue");

  if (v10 >= v12)
    v13 = v12;
  else
    v13 = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setObject:forKey:", v14, CFSTR("min"));

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("max"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "intValue");

  objc_msgSend(v7, "objectForKey:", CFSTR("max"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "intValue");

  if (v16 <= v18)
    v19 = v18;
  else
    v19 = v16;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setObject:forKey:", v20, CFSTR("max"));

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("sum"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "intValue");

  objc_msgSend(v7, "objectForKey:", CFSTR("sum"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (int)objc_msgSend(v23, "intValue");

  v25 = v24 + v22;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setObject:forKey:", v26, CFSTR("sum"));

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("count"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v24) = objc_msgSend(v27, "intValue");

  objc_msgSend(v7, "objectForKey:", CFSTR("count"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = (int)objc_msgSend(v28, "intValue");
  v30 = v29 + (int)v24;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setObject:forKey:", v31, CFSTR("count"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v25 / v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setObject:forKey:", v32, CFSTR("avg"));

  v33 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "stringByAppendingString:", v8);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v33, "setObject:forKey:", v35, v34);
}

void sub_19AFA2644(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL AFSiriUserNotificationAnnouncementSpeakingStateGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFSiriUserNotificationAnnouncementSpeakingStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

const __CFString *AFSiriUserNotificationAnnouncementSpeakingStateGetName(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("(unknown)");
  else
    return off_1E3A2E2A0[a1];
}

uint64_t AFSiriUserNotificationAnnouncementSpeakingStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_onceToken != -1)
      dispatch_once(&AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_onceToken, &__block_literal_global_6371);
    objc_msgSend((id)AFSiriUserNotificationAnnouncementSpeakingStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL strictValidationOfObjectWithClassType(void *a1, void *a2)
{
  id v3;
  NSString *v4;
  NSString *v5;
  _BOOL8 v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3)
  {
    NSClassFromString(v4);
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = 1;
  }

  return v6;
}

void sub_19AFA6D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7225(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7226(uint64_t a1)
{

}

id AFSettingsServiceXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[6];
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  id v79;
  _QWORD v80[9];
  _QWORD v81[6];
  uint64_t v82;
  _QWORD v83[3];
  _QWORD v84[4];
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];
  _QWORD v94[2];
  _QWORD v95[3];
  _QWORD v96[4];

  v96[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432198);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v96[0] = objc_opt_class();
  v96[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v96, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_getAvailableVoicesIncludingAssetInfo_completion_, 0, 1);

  v4 = (void *)MEMORY[0x1E0C99E60];
  v95[0] = objc_opt_class();
  v95[1] = objc_opt_class();
  v95[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v95, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_fetchEventRecordsFromAnalyticsStoreAtPath_completion_, 0, 1);

  v7 = (void *)MEMORY[0x1E0C99E60];
  v94[0] = objc_opt_class();
  v94[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v94, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_fetchExperimentConfigurationsWithCompletion_, 0, 1);

  v10 = (void *)MEMORY[0x1E0C99E60];
  v93[0] = objc_opt_class();
  v93[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v93, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setWithArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_getConnectedBluetoothDeviceInfoArrayWithCompletion_, 0, 1);

  v13 = (void *)MEMORY[0x1E0C99E60];
  v92[0] = objc_opt_class();
  v92[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setWithArray:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v15, sel_getPairedBluetoothDeviceInfoArrayWithCompletion_, 0, 1);

  v16 = (void *)MEMORY[0x1E0C99E60];
  v91[0] = objc_opt_class();
  v91[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v91, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setWithArray:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v18, sel_getCrossDeviceContextWithCompletion_, 0, 1);

  v19 = (void *)MEMORY[0x1E0C99E60];
  v90[0] = objc_opt_class();
  v90[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v90, 2);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setWithArray:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_getCurrentContextSnapshotWithCompletion_, 0, 1);

  v22 = (void *)MEMORY[0x1E0C99E60];
  v89[0] = objc_opt_class();
  v89[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v89, 2);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setWithArray:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v24, sel_pushMyriadAdvertisementContext_completionHandler_, 0, 1);

  v25 = (void *)MEMORY[0x1E0C99E60];
  v88[0] = objc_opt_class();
  v88[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v88, 2);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setWithArray:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v27, sel_pushSCDAAdvertisementContext_completionHandler_, 0, 1);

  v28 = (void *)MEMORY[0x1E0C99E60];
  v87[0] = objc_opt_class();
  v87[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v87, 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setWithArray:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v30, sel_getContextCollectorsInfoWithCompletion_, 0, 1);

  v31 = (void *)MEMORY[0x1E0C99E60];
  v86[0] = objc_opt_class();
  v86[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v86, 2);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setWithArray:", v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_getManagedLocalAndRemotePeerInfoWithCompletion_, 1, 1);

  v34 = (void *)MEMORY[0x1E0C99E60];
  v85[0] = objc_opt_class();
  v85[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v85, 2);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setWithArray:", v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v36, sel_getProximityTuplesWithCompletion_, 0, 1);

  v37 = (void *)MEMORY[0x1E0C99E60];
  v84[0] = objc_opt_class();
  v84[1] = objc_opt_class();
  v84[2] = objc_opt_class();
  v84[3] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v84, 4);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setWithArray:", v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v39, sel_getCapabilitiesDataFromReachableDevicesWithCompletion_, 0, 1);

  v40 = (void *)MEMORY[0x1E0C99E60];
  v83[0] = objc_opt_class();
  v83[1] = objc_opt_class();
  v83[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v83, 3);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "setWithArray:", v41);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v42, sel_triggerABCForType_subType_context_completionHandler_, 0, 0);

  v43 = (void *)MEMORY[0x1E0C99E60];
  v82 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v82, 1);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setWithArray:", v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v45, sel_getCurrentAccessoryInfoWithCompletion_, 0, 1);

  v46 = (void *)MEMORY[0x1E0C99E60];
  v81[0] = objc_opt_class();
  v81[1] = objc_opt_class();
  v81[2] = objc_opt_class();
  v81[3] = objc_opt_class();
  v81[4] = objc_opt_class();
  v81[5] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v81, 6);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setWithArray:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v48, sel_getAssistantIsEnabledForDeviceWithSiriInfo_withCompletion_, 0, 0);

  if (objc_opt_class() && objc_opt_class() && objc_opt_class())
  {
    v49 = (void *)MEMORY[0x1E0C99E60];
    v80[0] = objc_opt_class();
    v80[1] = objc_opt_class();
    v80[2] = objc_opt_class();
    v80[3] = objc_opt_class();
    v80[4] = objc_opt_class();
    v80[5] = objc_opt_class();
    v80[6] = objc_opt_class();
    v80[7] = objc_opt_class();
    v80[8] = objc_opt_class();
    v50 = (void *)MEMORY[0x1E0C99D20];
    v51 = v80;
    v52 = 9;
  }
  else
  {
    v53 = (void *)AFSiriLogContextService;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextService, OS_LOG_TYPE_INFO))
    {
      v54 = v53;
      v55 = (void *)objc_opt_class();
      v68 = v55;
      v56 = (void *)objc_opt_class();
      v57 = v56;
      *(_DWORD *)buf = 136315906;
      v73 = "AFSettingsServiceXPCInterface";
      v74 = 2112;
      v75 = v55;
      v76 = 2112;
      v77 = v56;
      v78 = 2112;
      v79 = (id)objc_opt_class();
      v58 = v79;
      _os_log_impl(&dword_19AF50000, v54, OS_LOG_TYPE_INFO, "%s Found nil SCDAF Class: %@, %@, %@.", buf, 0x2Au);

    }
    v49 = (void *)MEMORY[0x1E0C99E60];
    v71[0] = objc_opt_class();
    v71[1] = objc_opt_class();
    v71[2] = objc_opt_class();
    v71[3] = objc_opt_class();
    v71[4] = objc_opt_class();
    v71[5] = objc_opt_class();
    v50 = (void *)MEMORY[0x1E0C99D20];
    v51 = v71;
    v52 = 6;
  }
  objc_msgSend(v50, "arrayWithObjects:count:", v51, v52);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setWithArray:", v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v60, sel_publishFeedbackArbitrationParticipation_, 0, 0);

  v61 = (void *)MEMORY[0x1E0C99E60];
  v70[0] = objc_opt_class();
  v70[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v70, 2);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setWithArray:", v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v63, sel_getPersonalMultiUserDeviceIdentifiers_, 0, 1);

  v64 = (void *)MEMORY[0x1E0C99E60];
  v69[0] = objc_opt_class();
  v69[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 2);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v64, "setWithArray:", v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v66, sel_multiUserCompanionDeviceIdentifiers_, 0, 1);

  return v0;
}

id AFSettingsServiceDelegateXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[7];

  v5[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE409388);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  v5[3] = objc_opt_class();
  v5[4] = objc_opt_class();
  v5[5] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_syncVerificationPartialResult_, 0, 0);

  return v0;
}

BOOL AFDeviceRingerSwitchStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFDeviceRingerSwitchStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFDeviceRingerSwitchStateGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A2E3E0[a1];
}

uint64_t AFDeviceRingerSwitchStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFDeviceRingerSwitchStateGetFromName_onceToken != -1)
      dispatch_once(&AFDeviceRingerSwitchStateGetFromName_onceToken, &__block_literal_global_7507);
    objc_msgSend((id)AFDeviceRingerSwitchStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void _AFPreferencesNotificationCenterTrampoline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v6 = 136315394;
    v7 = "_AFPreferencesNotificationCenterTrampoline";
    v8 = 2112;
    v9 = a3;
    _os_log_impl(&dword_19AF50000, v4, OS_LOG_TYPE_INFO, "%s Received Darwin notification %@; reposting on internal AFPreferencesNotificationCenter",
      (uint8_t *)&v6,
      0x16u);
  }
  _AFPreferencesNotificationCenterGetSharedInstance(0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", a3, 0);

}

BOOL AFTestRequestPathGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFTestRequestPathGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFTestRequestPathGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A2E438[a1];
}

uint64_t AFTestRequestPathGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFTestRequestPathGetFromName_onceToken != -1)
      dispatch_once(&AFTestRequestPathGetFromName_onceToken, &__block_literal_global_7558);
    objc_msgSend((id)AFTestRequestPathGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFMultiUserServiceXPCInterface()
{
  if (AFMultiUserServiceXPCInterface___onceToken != -1)
    dispatch_once(&AFMultiUserServiceXPCInterface___onceToken, &__block_literal_global_7649);
  return (id)AFMultiUserServiceXPCInterface_interface;
}

id SIRINLUEXTERNALCDMNluResponseFunction()
{
  return (id)classSIRINLUEXTERNALCDMNluResponse;
}

id initSIRINLUEXTERNALCDMNluResponse()
{
  if (initSIRINLUEXTERNALCDMNluResponse_sOnce != -1)
    dispatch_once(&initSIRINLUEXTERNALCDMNluResponse_sOnce, &__block_literal_global_7693);
  return (id)classSIRINLUEXTERNALCDMNluResponse;
}

Class __initSIRINLUEXTERNALCDMNluResponse_block_invoke()
{
  Class result;

  if (SiriNLUTypesLibrary_sOnce != -1)
    dispatch_once(&SiriNLUTypesLibrary_sOnce, &__block_literal_global_47);
  result = objc_getClass("SIRINLUEXTERNALCDMNluResponse");
  classSIRINLUEXTERNALCDMNluResponse = (uint64_t)result;
  getSIRINLUEXTERNALCDMNluResponseClass = SIRINLUEXTERNALCDMNluResponseFunction;
  return result;
}

__CFString *AFAnalyticsEventTypeGetName(uint64_t a1)
{
  __CFString *result;

  if (a1 > 2299)
  {
    if (a1 <= 4299)
    {
      if (a1 > 3599)
      {
        if (a1 > 3899)
        {
          if (a1 > 4099)
          {
            switch(a1)
            {
              case 4100:
                result = CFSTR("cloud-kit");
                break;
              case 4101:
                result = CFSTR("cloud-kit.siri.change-arrived");
                break;
              case 4102:
                result = CFSTR("cloud-kit.knowledge.change-arrived");
                break;
              case 4103:
                result = CFSTR("cloud-kit.keychain.sync-error");
                break;
              case 4104:
                result = CFSTR("cloud-kit.zone.not-found");
                break;
              case 4105:
                result = CFSTR("cloud-kit.server.change-token.expired");
                break;
              case 4106:
                result = CFSTR("cloud-kit.rate-limited");
                break;
              case 4107:
                result = CFSTR("cloud-kit.network-failure");
                break;
              case 4108:
                result = CFSTR("cloud-kit.server.record-changed");
                break;
              default:
                if (a1 == 4200)
                {
                  result = CFSTR("ids");
                }
                else
                {
                  if (a1 != 4201)
                    return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                  result = CFSTR("ids.device-connection.snapshot.local");
                }
                break;
            }
          }
          else
          {
            switch(a1)
            {
              case 4000:
                result = CFSTR("assistant-service");
                break;
              case 4001:
                result = CFSTR("assistant-service.launch");
                break;
              case 4002:
                result = CFSTR("assistant-service.exit");
                break;
              case 4003:
                result = CFSTR("assistant-service.message.send");
                break;
              case 4004:
                result = CFSTR("assistant-service.message.delivered");
                break;
              case 4005:
                result = CFSTR("assistant-service.message.begin");
                break;
              case 4006:
                result = CFSTR("assistant-service.message.end");
                break;
              case 4007:
                result = CFSTR("assistant-service.command-perform.begin");
                break;
              case 4008:
                result = CFSTR("assistant-service.command-perform.end");
                break;
              case 4009:
                result = CFSTR("assistant-service.bundle-loading.begin");
                break;
              case 4010:
                result = CFSTR("assistant-service.bundle-loading.end");
                break;
              default:
                switch(a1)
                {
                  case 3900:
                    result = CFSTR("ui.card.present.begin");
                    break;
                  case 3901:
                    result = CFSTR("ui.card.present.end");
                    break;
                  case 3902:
                    result = CFSTR("ui.card.section-present.begin");
                    break;
                  case 3903:
                    result = CFSTR("ui.card.section-present.end");
                    break;
                  case 3904:
                    result = CFSTR("ui.card.engaged-with");
                    break;
                  case 3905:
                    result = CFSTR("ui.card.section-engaged-with");
                    break;
                  case 3906:
                    result = CFSTR("ui.card.async-card-requested");
                    break;
                  case 3907:
                    result = CFSTR("ui.card.async-card-received");
                    break;
                  case 3908:
                    result = CFSTR("ui.card.relationship-identified");
                    break;
                  default:
                    return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                }
                break;
            }
          }
        }
        else
        {
          switch(a1)
          {
            case 3750:
              result = CFSTR("client-flow.update-scripts.script.download-from-server");
              break;
            case 3751:
              result = CFSTR("client-flow.update-scripts.script.download-from-cdn");
              break;
            case 3752:
              result = CFSTR("client-flow.update-scripts.script.download-failed-from-cdn.invalidUrl");
              break;
            case 3753:
              result = CFSTR("client-flow.update-scripts.script.download-failed-from-cdn.networkError");
              break;
            case 3754:
              result = CFSTR("client-flow.update-scripts.script.download-failed-from-cdn.hmacVerificationError");
              break;
            case 3755:
              result = CFSTR("client-flow.update-scripts.script.download-failed-from-cdn.decryptionError");
              break;
            case 3756:
              result = CFSTR("client-flow.update-scripts.script.download-failed-from-cdn.checksumVerificationError");
              break;
            case 3757:
            case 3758:
            case 3759:
            case 3760:
            case 3761:
            case 3762:
            case 3763:
            case 3764:
            case 3765:
            case 3766:
            case 3767:
            case 3768:
            case 3769:
            case 3770:
            case 3771:
            case 3772:
            case 3773:
            case 3774:
            case 3775:
            case 3776:
            case 3777:
            case 3778:
            case 3779:
            case 3780:
            case 3781:
            case 3782:
            case 3783:
            case 3784:
            case 3785:
            case 3786:
            case 3787:
            case 3788:
            case 3789:
            case 3790:
            case 3791:
            case 3792:
            case 3793:
            case 3794:
            case 3795:
            case 3796:
            case 3797:
            case 3798:
            case 3799:
              return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            case 3800:
              result = CFSTR("client-flow.client-scripter");
              break;
            case 3801:
              result = CFSTR("client-flow.client-scripter.started");
              break;
            case 3802:
              result = CFSTR("client-flow.client-scripter.js-context-setup.started");
              break;
            case 3803:
              result = CFSTR("client-flow.client-scripter.js-context-setup.finished");
              break;
            case 3804:
              result = CFSTR("client-flow.client-scripter.js-evaluation.started-for-script");
              break;
            case 3805:
              result = CFSTR("client-flow.client-scripter.js-evaluation.finished-for-script");
              break;
            case 3806:
              result = CFSTR("client-flow.client-scripter.js-execution.started");
              break;
            case 3807:
              result = CFSTR("client-flow.client-scripter.js-execution.finished");
              break;
            case 3808:
              result = CFSTR("client-flow.client-scripter.js-execution.successful");
              break;
            case 3809:
              result = CFSTR("client-flow.client-scripter.js-execution.failed");
              break;
            case 3810:
              result = CFSTR("client-flow.client-scripter.script.sent-from-server");
              break;
            case 3811:
              result = CFSTR("client-flow.client-scripter.script.retrieved-from-server");
              break;
            case 3812:
              result = CFSTR("client-flow.client-scripter.script.loaded-from-memory-cache");
              break;
            case 3813:
              result = CFSTR("client-flow.client-scripter.script.loaded-from-filesystem");
              break;
            case 3814:
              result = CFSTR("client-flow.client-scripter.script.used-cached-js-context");
              break;
            case 3815:
              result = CFSTR("client-flow.client-scripter.script.used-deferred-cached-js-context");
              break;
            case 3816:
              result = CFSTR("client-flow.client-scripter.script.retrieval-failed");
              break;
            case 3817:
              result = CFSTR("client-flow.client-scripter.script.caching-failed");
              break;
            case 3818:
              result = CFSTR("client-flow.client-scripter.sent-command");
              break;
            case 3819:
              result = CFSTR("client-flow.client-scripter.sent-command-async");
              break;
            case 3820:
              result = CFSTR("client-flow.client-scripter.received-response");
              break;
            case 3821:
              result = CFSTR("client-flow.client-scripter.js-context-created-in-warmup");
              break;
            case 3822:
              result = CFSTR("client-flow.client-scripter.js-context-evaluated-script-in-warmup-for-script");
              break;
            case 3823:
              result = CFSTR("client-flow.client-scripter.cached-js-context-count");
              break;
            case 3824:
              result = CFSTR("client-flow.client-scripter.execution.failed");
              break;
            case 3825:
              result = CFSTR("client-flow.client-scripter.connection-interrupted");
              break;
            case 3826:
              result = CFSTR("client-flow.client-scripter.connection-invalidated");
              break;
            case 3827:
              result = CFSTR("client-flow.client-scripter.memory-usage");
              break;
            case 3828:
              result = CFSTR("client-flow.client-scripter.warmup-failed");
              break;
            default:
              switch(a1)
              {
                case 3600:
                  result = CFSTR("client-flow.cf-client");
                  break;
                case 3601:
                  result = CFSTR("client-flow.cf-client.scripter-load-started");
                  break;
                case 3602:
                  result = CFSTR("client-flow.cf-client.scripter-load-finished");
                  break;
                case 3603:
                  result = CFSTR("client-flow.cf-client.scripter-warmed-up");
                  break;
                case 3604:
                  result = CFSTR("client-flow.cf-client.scripter-warmed-up-with-script-hint");
                  break;
                case 3605:
                  result = CFSTR("client-flow.cf-client.execution.started");
                  break;
                case 3606:
                  result = CFSTR("client-flow.cf-client.execution.finished");
                  break;
                case 3607:
                  result = CFSTR("client-flow.cf-client.execution.failed");
                  break;
                case 3608:
                  result = CFSTR("client-flow.cf-client.warmup.started");
                  break;
                case 3609:
                  result = CFSTR("client-flow.cf-client.cache.evicted");
                  break;
                default:
                  switch(a1)
                  {
                    case 3700:
                      result = CFSTR("client-flow.js");
                      break;
                    case 3701:
                      result = CFSTR("client-flow.js.siri-mini");
                      break;
                    case 3702:
                      result = CFSTR("client-flow.js.server-flow");
                      break;
                    case 3703:
                      result = CFSTR("client-flow.js.provider");
                      break;
                    case 3704:
                      result = CFSTR("client-flow.js.background-action.maintenance");
                      break;
                    case 3705:
                      result = CFSTR("client-flow.js.background-action.activity-collection");
                      break;
                    case 3706:
                      result = CFSTR("client-flow.js.background-action.data-migration");
                      break;
                    case 3707:
                      result = CFSTR("client-flow.js.background-action.update-scripts");
                      break;
                    case 3708:
                      result = CFSTR("client-flow.js.background-action.morphun_assets_downloaded");
                      break;
                    case 3709:
                      result = CFSTR("client-flow.js.background-action.morphun_assets_failed");
                      break;
                    default:
                      return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                  }
                  break;
              }
              break;
          }
        }
      }
      else if (a1 > 2799)
      {
        if (a1 > 3299)
        {
          switch(a1)
          {
            case 3300:
              result = CFSTR("setup");
              break;
            case 3301:
              result = CFSTR("setup.phs.bootstrapped");
              break;
            case 3302:
              result = CFSTR("setup.phs.training-started");
              break;
            case 3303:
              result = CFSTR("setup.phs.training-finished");
              break;
            case 3304:
              result = CFSTR("setup.phs.training-canceled");
              break;
            case 3305:
              result = CFSTR("setup.phs.training-phs-1");
              break;
            case 3306:
              result = CFSTR("setup.phs.training-phs-2");
              break;
            case 3307:
              result = CFSTR("setup.phs.training-phs-3");
              break;
            case 3308:
              result = CFSTR("setup.phs.training-phs-4");
              break;
            case 3309:
              result = CFSTR("setup.phs.training-phs-5");
              break;
            case 3310:
              result = CFSTR("setup.phs.training-skipped");
              break;
            case 3311:
              result = CFSTR("setup.phs.training-step-retry");
              break;
            default:
              switch(a1)
              {
                case 3500:
                  result = CFSTR("client-flow.plugin");
                  break;
                case 3501:
                  result = CFSTR("client-flow.plugin.started");
                  break;
                case 3502:
                  result = CFSTR("client-flow.plugin.execution.started");
                  break;
                case 3503:
                  result = CFSTR("client-flow.plugin.execution.finished");
                  break;
                case 3504:
                  result = CFSTR("client-flow.plugin.execution.failed");
                  break;
                default:
                  switch(a1)
                  {
                    case 3400:
                      result = CFSTR("experiment");
                      break;
                    case 3401:
                      result = CFSTR("experiment.exposure.siri-vox-sounds");
                      break;
                    case 3402:
                      result = CFSTR("experiment.exposure.siri-vox-tap-to-siri-behavior");
                      break;
                    case 3403:
                      result = CFSTR("experiment.exposure.invocation-feedback");
                      break;
                    default:
                      return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                  }
                  break;
              }
              break;
          }
        }
        else if (a1 > 2999)
        {
          if (a1 <= 3099)
          {
            switch(a1)
            {
              case 3000:
                return CFSTR("xcode");
              case 3001:
                return CFSTR("xcode.test.begin");
              case 3002:
                return CFSTR("xcode.test.end");
            }
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          }
          switch(a1)
          {
            case 3200:
              result = CFSTR("settings");
              break;
            case 3201:
              result = CFSTR("settings.set-language");
              break;
            case 3202:
              result = CFSTR("settings.set-output-voice");
              break;
            case 3203:
              result = CFSTR("settings.set-voice-feedback");
              break;
            case 3204:
              result = CFSTR("settings.changed-tcc-info");
              break;
            case 3205:
              result = CFSTR("settings.changed-type-to-siri");
              break;
            default:
              if (a1 == 3100)
              {
                result = CFSTR("device-configuration");
              }
              else
              {
                if (a1 != 3101)
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                result = CFSTR("device-configuration.snapshot");
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 2900:
              result = CFSTR("music");
              break;
            case 2901:
              result = CFSTR("music.playback.ready");
              break;
            case 2902:
              result = CFSTR("music.playback.secure-key");
              break;
            case 2903:
              result = CFSTR("music.playback.asset-load");
              break;
            case 2904:
              result = CFSTR("music.playback.summary");
              break;
            case 2905:
              result = CFSTR("music.playback.start");
              break;
            case 2906:
              result = CFSTR("music.playback.queue.received");
              break;
            case 2907:
              result = CFSTR("music.playback.queue.daemon.received");
              break;
            case 2908:
              result = CFSTR("music.playback.alternatives");
              break;
            default:
              if (a1 == 2800)
              {
                result = CFSTR("now-playing");
              }
              else
              {
                if (a1 != 2801)
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                result = CFSTR("now-playing.is-playing.changed");
              }
              break;
          }
        }
      }
      else if (a1 <= 2599)
      {
        if (a1 > 2401)
        {
          if (a1 <= 2499)
          {
            switch(a1)
            {
              case 2402:
                return CFSTR("ui-plugin.movies.loading-media-buttons.end");
              case 2420:
                return CFSTR("ui-plugin.sports.watch-list-kit-call.begin");
              case 2421:
                return CFSTR("ui-plugin.sports.watch-list-kit-call.end");
            }
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          }
          switch(a1)
          {
            case 2500:
              result = CFSTR("qa.automation");
              break;
            case 2501:
              result = CFSTR("qa.automation.begin");
              break;
            case 2502:
              result = CFSTR("qa.automation.end");
              break;
            case 2503:
              result = CFSTR("qa.automation.mark");
              break;
            default:
              return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          }
        }
        else
        {
          switch(a1)
          {
            case 2300:
              result = CFSTR("voice-trigger");
              break;
            case 2301:
              result = CFSTR("voice-trigger.start");
              break;
            case 2302:
              result = CFSTR("voice-trigger.fire");
              break;
            case 2303:
              result = CFSTR("voice-trigger.end");
              break;
            case 2304:
              result = CFSTR("voice-trigger.early-detect");
              break;
            default:
              if (a1 == 2400)
              {
                result = CFSTR("ui-plugin");
              }
              else
              {
                if (a1 != 2401)
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                result = CFSTR("ui-plugin.movies.loading-media-buttons.begin");
              }
              break;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 2600:
            result = CFSTR("cdm");
            break;
          case 2601:
            result = CFSTR("cdm.nl-service.handle-command.begin");
            break;
          case 2602:
            result = CFSTR("cdm.nl-service.handle-command.end");
            break;
          case 2603:
            result = CFSTR("cdm.flow-service.handle-command.begin");
            break;
          case 2604:
            result = CFSTR("cdm.flow-service.handle-command.end");
            break;
          case 2605:
            result = CFSTR("cdm.config.asset-manager.offline-query-start");
            break;
          case 2606:
            result = CFSTR("cdm.config.asset-manager.offline-query-success");
            break;
          case 2607:
            result = CFSTR("cdm.config.asset-manager.offline-query-failed");
            break;
          case 2608:
            result = CFSTR("cdm.config.asset-manager.online-query-start");
            break;
          case 2609:
            result = CFSTR("cdm.config.asset-manager.online-query-success");
            break;
          case 2610:
            result = CFSTR("cdm.config.asset-manager.online-query-failed");
            break;
          case 2611:
            result = CFSTR("cdm.config.asset-manager.asset-download-start");
            break;
          case 2612:
            result = CFSTR("cdm.config.asset-manager.asset-download-completed");
            break;
          case 2613:
            result = CFSTR("cdm.config.asset-manager.asset-download-failed");
            break;
          case 2614:
            result = CFSTR("cdm.config.asset-manager.asset-download-cancelled");
            break;
          case 2615:
            result = CFSTR("cdm.config.asset-manager.asset-purged");
            break;
          case 2616:
            result = CFSTR("cdm.start-speech.received");
            break;
          case 2617:
            result = CFSTR("cdm.set-assistant-data.received");
            break;
          case 2618:
            result = CFSTR("cdm.load-assistant.received");
            break;
          case 2619:
            result = CFSTR("cdm.service.handle-command.begin");
            break;
          case 2620:
            result = CFSTR("cdm.service.handle-command.end");
            break;
          default:
            switch(a1)
            {
              case 2700:
                result = CFSTR("vox");
                break;
              case 2701:
                result = CFSTR("vox.speech-synthesis.enqueued");
                break;
              case 2702:
                result = CFSTR("vox.speech-synthesis.canceled");
                break;
              case 2703:
                result = CFSTR("vox.speech-synthesis.failed");
                break;
              case 2704:
                result = CFSTR("vox.speech-synthesis.finished");
                break;
              case 2705:
                result = CFSTR("vox.speech-synthesis.interrupted");
                break;
              case 2706:
                result = CFSTR("vox.speech-synthesis.started");
                break;
              case 2707:
                result = CFSTR("vox.two-shot-sound.begin");
                break;
              case 2708:
                result = CFSTR("vox.two-shot-sound.end");
                break;
              case 2709:
                result = CFSTR("vox.session-inactive-sound.begin");
                break;
              case 2710:
                result = CFSTR("vox.session-inactive-sound.end");
                break;
              case 2711:
                result = CFSTR("vox.tap-to-siri-sound.begin");
                break;
              case 2712:
                result = CFSTR("vox.tap-to-siri-sound.end");
                break;
              default:
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            }
            break;
        }
      }
    }
    else if (a1 > 5299)
    {
      if (a1 > 6099)
      {
        if (a1 > 6200)
        {
          if (a1 <= 6499)
          {
            if (a1 > 6300)
            {
              switch(a1)
              {
                case 6301:
                  return CFSTR("client-ad-blocker.found-match");
                case 6400:
                  return CFSTR("dialog-engine");
                case 6401:
                  return CFSTR("dialog-engine.cat-executed");
              }
            }
            else
            {
              switch(a1)
              {
                case 6201:
                  return CFSTR("donate-activity.location-search.donation-displayed-in-maps");
                case 6202:
                  return CFSTR("donate-activity.location-search.donation-selected-in-maps");
                case 6300:
                  return CFSTR("client-ad-blocker");
              }
            }
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          }
          switch(a1)
          {
            case 6500:
              result = CFSTR("home-automation");
              break;
            case 6501:
              result = CFSTR("home-automation.homekit-request.start");
              break;
            case 6502:
              result = CFSTR("home-automation.homekit-request.end");
              break;
            case 6503:
              result = CFSTR("home-automation.control-home.flow.start");
              break;
            case 6504:
              result = CFSTR("home-automation.control-home.flow.end");
              break;
            case 6505:
              result = CFSTR("home-automation.control-home.app-extension.start");
              break;
            case 6506:
              result = CFSTR("home-automation.control-home.app-extension.end");
              break;
            case 6507:
              result = CFSTR("home-automation.homekit-warm-up.start");
              break;
            case 6508:
              result = CFSTR("home-automation.homekit-warm-up.end");
              break;
            default:
              if (a1 == 6600)
              {
                result = CFSTR("post-siri-engagement");
              }
              else
              {
                if (a1 != 6601)
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                result = CFSTR("post-siri-engagement.activity-collection");
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 6100:
              result = CFSTR("multi-user");
              break;
            case 6101:
              result = CFSTR("multi-user.voice-profile.upload-failure");
              break;
            case 6102:
              result = CFSTR("multi-user.voice-profile.limit-reached");
              break;
            case 6103:
              result = CFSTR("multi-user.manatee.key-loss");
              break;
            case 6104:
              result = CFSTR("multi-user.participant.sharing-failure");
              break;
            case 6105:
              result = CFSTR("multi-user.voice-profile.upload-success");
              break;
            case 6106:
              result = CFSTR("multi-user.voice-profile.download-failure");
              break;
            case 6107:
              result = CFSTR("multi-user.voice-profile.download-success");
              break;
            case 6108:
              result = CFSTR("multi-user.setup.user.added-to-home");
              break;
            case 6109:
              result = CFSTR("multi-user.setup.user.voice-id-enabled");
              break;
            case 6110:
              result = CFSTR("multi-user.setup.homepod.user.added-to-home");
              break;
            case 6111:
              result = CFSTR("multi-user.setup.homepod.user.voice-id-enabled");
              break;
            case 6112:
              result = CFSTR("multi-user.setup.homepod.user.ready");
              break;
            case 6113:
              result = CFSTR("multi-user.score.confusion");
              break;
            case 6114:
              result = CFSTR("multi-user.metrics.homepod.voice-id-enablement-count");
              break;
            case 6115:
              result = CFSTR("multi-user.score.donation");
              break;
            case 6116:
              result = CFSTR("multi-user.score.usage");
              break;
            case 6117:
              result = CFSTR("multi-user.setup.homepod.missing-home-member-settings");
              break;
            default:
              if (a1 != 6200)
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              result = CFSTR("donate-activity");
              break;
          }
        }
      }
      else if (a1 > 5701)
      {
        switch(a1)
        {
          case 6000:
            return CFSTR("spoken-notifications");
          case 6001:
            return CFSTR("spoken-notifications-start");
          case 6002:
            return CFSTR("spoken-notifications.message-received");
          case 6003:
            return CFSTR("spoken-notifications.message-not-read-inopportune");
          case 6004:
            return CFSTR("spoken-notifications.message-not-read-muted");
          case 6005:
            return CFSTR("spoken-notifications.message-not-read-siri-in-use");
          case 6006:
            return CFSTR("spoken-notifications.message-opportune");
          case 6007:
            return CFSTR("spoken-notifications.message-readout-canceled-pull-out");
          case 6008:
            return CFSTR("spoken-notifications.message-readout-canceled-double-tap");
          case 6009:
            return CFSTR("spoken-notifications.message-readout-canceled-speech");
          case 6010:
            return CFSTR("spoken-notifications.message-readout-finished");
          case 6011:
            return CFSTR("spoken-notifications.message-reply-related");
          case 6012:
            return CFSTR("spoken-notifications.message-reply-silence");
          case 6013:
            return CFSTR("spoken-notifications.message-reply-unrelated");
          case 6014:
            return CFSTR("spoken-notifications-end");
          case 6015:
            return CFSTR("spoken-notification.bundleId");
          case 6016:
          case 6017:
          case 6018:
          case 6019:
          case 6020:
          case 6021:
          case 6022:
          case 6023:
          case 6024:
          case 6025:
          case 6026:
          case 6027:
          case 6028:
          case 6029:
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          case 6030:
            return CFSTR("announce-call-start");
          case 6031:
            return CFSTR("announce-call-end");
          case 6032:
            return CFSTR("announce-call.call-received");
          case 6033:
            return CFSTR("announce-call.call-announcement-readout-start");
          case 6034:
            return CFSTR("announce-call.call-announcement-readout-finished");
          case 6035:
            return CFSTR("announce-call.bargein");
          case 6036:
            return CFSTR("announce-call-responded-manually");
          default:
            if (a1 == 5702)
            {
              result = CFSTR("interactive-messages.keyboard-dismissed");
            }
            else
            {
              if (a1 != 5703)
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              result = CFSTR("interactive-messages.send-via-snippet");
            }
            break;
        }
      }
      else
      {
        if (a1 > 5599)
        {
          if (a1 <= 5601)
          {
            if (a1 == 5600)
              return CFSTR("client-mode");
            else
              return CFSTR("client-mode.computation.evaluated-add-views");
          }
          if (a1 == 5602)
            return CFSTR("client-mode.computation.evaluated-ace-command");
          if (a1 == 5701)
            return CFSTR("interactive-messages.keyboard-invocation");
          return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
        }
        switch(a1)
        {
          case 5500:
            result = CFSTR("proximity.setup");
            break;
          case 5501:
            result = CFSTR("proximity.setup.phs.bootstrapped");
            break;
          case 5502:
            result = CFSTR("proximity.setup.phs.training-started");
            break;
          case 5503:
            result = CFSTR("proximity.setup.phs.training-finished");
            break;
          case 5504:
            result = CFSTR("proximity.setup.phs.training-canceled");
            break;
          case 5505:
            result = CFSTR("proximity.setup.phs.training-phs-1");
            break;
          case 5506:
            result = CFSTR("proximity.setup.phs.training-phs-2");
            break;
          case 5507:
            result = CFSTR("proximity.setup.phs.training-phs-3");
            break;
          case 5508:
            result = CFSTR("proximity.setup.phs.training-phs-4");
            break;
          case 5509:
            result = CFSTR("proximity.setup.phs.training-phs-5");
            break;
          case 5510:
            result = CFSTR("proximity.setup.phs.training-skipped");
            break;
          case 5511:
            result = CFSTR("proximity.setup.phs.training-step-retry");
            break;
          case 5512:
            result = CFSTR("proximity.setup.dismissed");
            break;
          default:
            switch(a1)
            {
              case 5400:
                result = CFSTR("bluetooth-device");
                break;
              case 5401:
                result = CFSTR("bluetooth-device.double-tap");
                break;
              case 5402:
                result = CFSTR("bluetooth-device.voice");
                break;
              case 5403:
                result = CFSTR("bluetooth-device.double-tap.false-remote-activation-decision");
                break;
              case 5404:
                result = CFSTR("bluetooth-device.double-tap.false-remote-deactivation-decision");
                break;
              default:
                switch(a1)
                {
                  case 5300:
                    result = CFSTR("voice-shortcut");
                    break;
                  case 5301:
                    result = CFSTR("voice-shortcut.setup.started");
                    break;
                  case 5302:
                    result = CFSTR("voice-shortcut.setup.finished");
                    break;
                  case 5303:
                    result = CFSTR("voice-shortcut.setup.cancelled");
                    break;
                  default:
                    return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                }
                break;
            }
            break;
        }
      }
    }
    else if (a1 > 4699)
    {
      if (a1 > 4899)
      {
        if (a1 <= 5099)
        {
          if (a1 <= 4901)
          {
            if (a1 == 4900)
              return CFSTR("call-status");
            else
              return CFSTR("call-status.audio-call.on");
          }
          switch(a1)
          {
            case 4902:
              return CFSTR("call-status.audio-call.off");
            case 5000:
              return CFSTR("daemon.peer");
            case 5001:
              return CFSTR("daemon.peer.companion.account.changed");
          }
          return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
        }
        switch(a1)
        {
          case 5200:
            result = CFSTR("raise-to-speak");
            break;
          case 5201:
            result = CFSTR("raise-to-speak.settings-enabled");
            break;
          case 5202:
            result = CFSTR("raise-to-speak.settings-disabled");
            break;
          case 5203:
            result = CFSTR("raise-to-speak.legacy-policy-decision");
            break;
          case 5204:
            result = CFSTR("raise-to-speak.second-pass-policy-decision");
            break;
          case 5205:
            result = CFSTR("raise-to-speak.silence-posterior-generator-decision");
            break;
          case 5206:
            result = CFSTR("raise-to-speak.near-miss.nearby-activation");
            break;
          case 5207:
            result = CFSTR("raise-to-speak.data-collection.session-mark");
            break;
          case 5208:
            result = CFSTR("raise-to-speak.first-pass-policy-decision");
            break;
          default:
            if (a1 == 5100)
            {
              result = CFSTR("daemon.wha");
            }
            else
            {
              if (a1 != 5101)
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              result = CFSTR("daemon.wha.media.system.configuration.changed");
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 4700:
            result = CFSTR("core-speech");
            break;
          case 4701:
            result = CFSTR("core-speech.audio-logging-metrics");
            break;
          case 4702:
            result = CFSTR("core-speech.smart-siri-volume.fetched");
            break;
          case 4703:
            result = CFSTR("core-speech.smart-language-detector.metrics");
            break;
          case 4704:
            result = CFSTR("core-speech.voice-trigger.reject.info");
            break;
          case 4705:
            result = CFSTR("core-speech.voice-trigger.phs-reject.info");
            break;
          case 4706:
            result = CFSTR("core-speech.nvi.additional.signal");
            break;
          case 4707:
            result = CFSTR("core-speech.last-process-chunk");
            break;
          case 4708:
            result = CFSTR("core-speech.voice-trigger.toggle.info");
            break;
          case 4709:
            result = CFSTR("core-speech.voice-trigger.phs-fa-reject.info");
            break;
          case 4710:
            result = CFSTR("core-speech.audio.first-buffer.info");
            break;
          case 4711:
            result = CFSTR("core-speech.audio.endpoint-buffer.info");
            break;
          case 4712:
            result = CFSTR("core-speech.endpointer.latency.info");
            break;
          case 4713:
            result = CFSTR("core-speech.acoustic-ftm.metrics.info");
            break;
          default:
            switch(a1)
            {
              case 4800:
                result = CFSTR("daemon.peer-message");
                break;
              case 4801:
                result = CFSTR("daemon.peer-message.send.begin");
                break;
              case 4802:
                result = CFSTR("daemon.peer-message.send.end");
                break;
              case 4803:
                result = CFSTR("daemon.peer-message.remote.execute.send.begin");
                break;
              case 4804:
                result = CFSTR("daemon.peer-message.remote.execute.send.end");
                break;
              default:
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 4500:
          result = CFSTR("daemon.context");
          break;
        case 4501:
          result = CFSTR("daemon.context.get-background-context.begin");
          break;
        case 4502:
          result = CFSTR("daemon.context.get-background-context.end");
          break;
        case 4503:
          result = CFSTR("daemon.context.get-background-context.nav-status.begin");
          break;
        case 4504:
          result = CFSTR("daemon.context.get-background-context.nav-status.end");
          break;
        case 4505:
          result = CFSTR("daemon.context.get-background-context.now-playing.begin");
          break;
        case 4506:
          result = CFSTR("daemon.context.get-background-context.now-playing.end");
          break;
        case 4507:
          result = CFSTR("daemon.context.get-background-context.siri-kit-settings.begin");
          break;
        case 4508:
          result = CFSTR("daemon.context.get-background-context.siri-kit-settings.end");
          break;
        case 4509:
          result = CFSTR("daemon.context.get-background-context.device-problems.begin");
          break;
        case 4510:
          result = CFSTR("daemon.context.get-background-context.device-problems.end");
          break;
        case 4511:
          result = CFSTR("daemon.context.get-background-context.current-home-kit-home.begin");
          break;
        case 4512:
          result = CFSTR("daemon.context.get-background-context.current-home-kit-home.end");
          break;
        case 4513:
          result = CFSTR("daemon.context.get-background-context.app-subscription-status.begin");
          break;
        case 4514:
          result = CFSTR("daemon.context.get-background-context.app-subscription-status.end");
          break;
        case 4515:
          result = CFSTR("daemon.context.get-background-context.music-personalization-token.begin");
          break;
        case 4516:
          result = CFSTR("daemon.context.get-background-context.music-personalization-token.end");
          break;
        case 4517:
          result = CFSTR("daemon.context.get-background-context.phone-call-state.begin");
          break;
        case 4518:
          result = CFSTR("daemon.context.get-background-context.phone-call-state.end");
          break;
        case 4519:
          result = CFSTR("daemon.context.get-background-context.simple-state.begin");
          break;
        case 4520:
          result = CFSTR("daemon.context.get-background-context.simple-state.end");
          break;
        case 4521:
          result = CFSTR("daemon.context.get-background-context.is-navigating.begin");
          break;
        case 4522:
          result = CFSTR("daemon.context.get-background-context.is-navigating.end");
          break;
        case 4523:
          result = CFSTR("daemon.context.get-background-context.playback-devices.begin");
          break;
        case 4524:
          result = CFSTR("daemon.context.get-background-context.playback-devices.end");
          break;
        case 4525:
          result = CFSTR("daemon.context.get-cross-device-context.begin");
          break;
        case 4526:
          result = CFSTR("daemon.context.get-cross-device-context.end");
          break;
        case 4527:
        case 4530:
        case 4531:
        case 4532:
        case 4533:
        case 4534:
        case 4535:
        case 4536:
        case 4537:
        case 4538:
        case 4539:
        case 4540:
        case 4541:
        case 4542:
        case 4543:
        case 4544:
        case 4545:
        case 4546:
        case 4547:
        case 4548:
        case 4549:
        case 4550:
        case 4551:
        case 4552:
        case 4553:
        case 4554:
        case 4555:
        case 4556:
        case 4557:
        case 4558:
        case 4559:
        case 4562:
        case 4563:
        case 4564:
        case 4565:
        case 4566:
        case 4567:
        case 4568:
        case 4569:
        case 4571:
        case 4572:
        case 4573:
        case 4574:
        case 4576:
        case 4577:
        case 4578:
        case 4579:
        case 4580:
        case 4581:
        case 4582:
        case 4583:
        case 4584:
        case 4590:
        case 4591:
        case 4592:
        case 4593:
        case 4594:
        case 4595:
        case 4596:
        case 4597:
        case 4598:
        case 4599:
          return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
        case 4528:
          result = CFSTR("daemon.context.get-background-context.home-communication-announcement.begin");
          break;
        case 4529:
          result = CFSTR("daemon.context.get-background.context.home-communication-announcement.end");
          break;
        case 4560:
          result = CFSTR("daemon.context.cross-device-command.handled");
          break;
        case 4561:
          result = CFSTR("daemon.context.cross-device-command.nearby-devices");
          break;
        case 4570:
          result = CFSTR("daemon.context.context-collector.changed");
          break;
        case 4575:
          result = CFSTR("daemon.context.local-context.changed");
          break;
        case 4585:
          result = CFSTR("daemon.context.context-fetch.request.sent");
          break;
        case 4586:
          result = CFSTR("daemon.context.context-fetch.request.received");
          break;
        case 4587:
          result = CFSTR("daemon.context.context-fetch.response.sent");
          break;
        case 4588:
          result = CFSTR("daemon.context.context-fetch.response.received");
          break;
        case 4589:
          result = CFSTR("daemon.context.context-fetch.error");
          break;
        case 4600:
          result = CFSTR("volume");
          break;
        case 4601:
          result = CFSTR("volume.changed");
          break;
        case 4602:
          result = CFSTR("volume.fetched");
          break;
        case 4603:
          result = CFSTR("volume.updated");
          break;
        case 4604:
          result = CFSTR("volume.down");
          break;
        case 4605:
          result = CFSTR("volume.up");
          break;
        default:
          switch(a1)
          {
            case 4300:
              result = CFSTR("analytics");
              break;
            case 4301:
              result = CFSTR("analytics.store.database.post-corruption-detected");
              break;
            case 4302:
              result = CFSTR("analytics.store.database.open-failed");
              break;
            case 4303:
              result = CFSTR("analytics.store.database.integrity-check-failed");
              break;
            case 4304:
              result = CFSTR("analytics.store.database.unrecoverable-error-detected");
              break;
            case 4305:
              result = CFSTR("analytics.store.database.preparation-failed");
              break;
            case 4306:
              result = CFSTR("analytics.store.reset");
              break;
            case 4307:
              result = CFSTR("analytics.store.database.created");
              break;
            case 4308:
            case 4309:
              return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            case 4310:
              result = CFSTR("analytics.redaction.summary");
              break;
            default:
              switch(a1)
              {
                case 4400:
                  result = CFSTR("local-recognition");
                  break;
                case 4401:
                  result = CFSTR("local-recognition.started");
                  break;
                case 4402:
                  result = CFSTR("local-recognition.partial-result");
                  break;
                case 4403:
                  result = CFSTR("local-recognition.eager-candidate");
                  break;
                case 4404:
                  result = CFSTR("local-recognition.package");
                  break;
                case 4405:
                  result = CFSTR("local-recognition.finished");
                  break;
                case 4406:
                  result = CFSTR("local-recognition.preheat.start");
                  break;
                case 4407:
                  result = CFSTR("local-recognition.preheat.done");
                  break;
                default:
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 1099)
    {
      if (a1 > 599)
      {
        if (a1 <= 800)
        {
          switch(a1)
          {
            case 600:
              result = CFSTR("daemon.intent");
              break;
            case 601:
              result = CFSTR("daemon.intent.extension.prepare");
              break;
            case 602:
              result = CFSTR("daemon.intent.extension.ready");
              break;
            case 603:
              result = CFSTR("daemon.intent.extension.unexpected-exit");
              break;
            case 604:
              result = CFSTR("daemon.intent.extension.launch.timeout.");
              break;
            case 605:
              result = CFSTR("daemon.intent.extension.request.timeout");
              break;
            case 606:
              result = CFSTR("daemon.intent.resolve.begin");
              break;
            case 607:
              result = CFSTR("daemon.intent.resolve.request.sent");
              break;
            case 608:
              result = CFSTR("daemon.intent.resolve.response.received");
              break;
            case 609:
              result = CFSTR("daemon.intent.resolve.end");
              break;
            case 610:
              result = CFSTR("daemon.intent.confirm.begin");
              break;
            case 611:
              result = CFSTR("daemon.intent.confirm.request.sent");
              break;
            case 612:
              result = CFSTR("daemon.intent.confirm.response.received");
              break;
            case 613:
              result = CFSTR("daemon.intent.confirm.response-ui-visible");
              break;
            case 614:
              result = CFSTR("daemon.intent.confirm.end");
              break;
            case 615:
              result = CFSTR("daemon.intent.handle.begin");
              break;
            case 616:
              result = CFSTR("daemon.intent.handle.request.sent");
              break;
            case 617:
              result = CFSTR("daemon.intent.handle.response.received");
              break;
            case 618:
              result = CFSTR("daemon.intent.handle.response-ui-visible");
              break;
            case 619:
              result = CFSTR("daemon.intent.handle.end");
              break;
            case 620:
              result = CFSTR("daemon.intent.launch-with-intent.begin");
              break;
            case 621:
              result = CFSTR("daemon.intent.launch-with-intent.end");
              break;
            case 622:
              result = CFSTR("daemon.intent.launch-with-user-activity.begin");
              break;
            case 623:
              result = CFSTR("daemon.intent.launch-with-user-activity.end");
              break;
            case 624:
              result = CFSTR("daemon.intent.resolve-app.begin");
              break;
            case 625:
              result = CFSTR("daemon.intent.resolve-app.end");
              break;
            case 626:
              result = CFSTR("daemon.intent.extension.request.begin");
              break;
            case 627:
              result = CFSTR("daemon.intent.extension.request.end");
              break;
            case 628:
              result = CFSTR("daemon.intent.extension.prewarm.begin");
              break;
            case 629:
              result = CFSTR("daemon.intent.extension.prewarm.end");
              break;
            case 630:
              result = CFSTR("daemon.intent.process-intent.begin");
              break;
            case 631:
              result = CFSTR("daemon.intent.process-intent.end");
              break;
            case 632:
              result = CFSTR("daemon.intent.process-intent.extension.sent");
              break;
            case 633:
              result = CFSTR("daemon.intent.process-intent.extension.received");
              break;
            case 634:
              result = CFSTR("daemon.intent.get-app-info.begin");
              break;
            case 635:
              result = CFSTR("daemon.intent.get-app-info.end");
              break;
            case 636:
              result = CFSTR("daemon.intent.process-intent.resolve.begin");
              break;
            case 637:
              result = CFSTR("daemon.intent.process-intent.resolve.end");
              break;
            case 638:
              result = CFSTR("daemon.intent.process-intent.confirm.begin");
              break;
            case 639:
              result = CFSTR("daemon.intent.process-intent.confirm.end");
              break;
            case 640:
              result = CFSTR("daemon.intent.process-intent.handle.begin");
              break;
            case 641:
              result = CFSTR("daemon.intent.process-intent.handle.end");
              break;
            case 642:
            case 643:
            case 644:
            case 645:
            case 646:
            case 647:
            case 648:
            case 649:
            case 650:
            case 651:
            case 652:
            case 653:
            case 654:
            case 655:
            case 656:
            case 657:
            case 658:
            case 659:
            case 660:
            case 661:
            case 662:
            case 663:
            case 664:
            case 665:
            case 666:
            case 667:
            case 668:
            case 669:
            case 670:
            case 671:
            case 672:
            case 673:
            case 674:
            case 675:
            case 676:
            case 677:
            case 678:
            case 679:
            case 680:
            case 681:
            case 682:
            case 683:
            case 684:
            case 685:
            case 686:
            case 687:
            case 688:
            case 689:
            case 690:
            case 691:
            case 692:
            case 693:
            case 694:
            case 695:
            case 696:
            case 697:
            case 698:
            case 699:
              return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            case 700:
              result = CFSTR("daemon.task");
              break;
            case 701:
              result = CFSTR("daemon.task.schedule");
              break;
            case 702:
              result = CFSTR("daemon.task.start");
              break;
            case 703:
              result = CFSTR("daemon.task.deliver");
              break;
            case 704:
              result = CFSTR("daemon.task.finish");
              break;
            default:
              if (a1 != 800)
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              result = CFSTR("daemon.domain-signal");
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 900:
              result = CFSTR("daemon.session");
              break;
            case 901:
              result = CFSTR("daemon.session.connection.opened");
              break;
            case 902:
              result = CFSTR("daemon.session.connection.snapshot.local");
              break;
            case 903:
              result = CFSTR("daemon.session.connection.snapshot.remote");
              break;
            case 904:
              result = CFSTR("daemon.session.connection.timeout");
              break;
            case 905:
              result = CFSTR("daemon.session.connection.dropped");
              break;
            case 906:
              result = CFSTR("daemon.session.connection.failed");
              break;
            case 907:
              result = CFSTR("daemon.session.validation.failed");
              break;
            case 908:
              result = CFSTR("daemon.session.authentication.failed");
              break;
            case 909:
              result = CFSTR("daemon.session.assistant.failed");
              break;
            case 910:
              result = CFSTR("daemon.session.assistant.not-ready");
              break;
            case 911:
              result = CFSTR("daemon.session.remapped-request-id");
              break;
            case 912:
              result = CFSTR("daemon.session.connection.start");
              break;
            case 913:
              result = CFSTR("daemon.session.connection.reset");
              break;
            case 914:
              result = CFSTR("daemon.session.connection.client-connection-id.created");
              break;
            case 915:
              result = CFSTR("daemon.session.connection.first-byte.received");
              break;
            case 916:
              result = CFSTR("daemon.session.local.assistant.not-ready");
              break;
            case 917:
              result = CFSTR("daemon.session.local.connection.reset");
              break;
            case 918:
              result = CFSTR("daemon.session.proxied-request-id");
              break;
            case 919:
              result = CFSTR("daemon.session.won");
              break;
            case 920:
              result = CFSTR("daemon.session.load-assistant");
              break;
            case 921:
              result = CFSTR("daemon.session.failed");
              break;
            case 922:
              result = CFSTR("daemon.session.connection.http-header.created");
              break;
            case 923:
              result = CFSTR("daemon.session.results.queued");
              break;
            case 924:
              result = CFSTR("daemon.session.assistant.loaded");
              break;
            case 925:
              result = CFSTR("daemon.session.reset-on-request-boundary");
              break;
            case 926:
              result = CFSTR("daemon.session.connection-header.ace-host.mismatch");
              break;
            default:
              switch(a1)
              {
                case 1000:
                  result = CFSTR("daemon.network");
                  break;
                case 1001:
                  result = CFSTR("daemon.network.available");
                  break;
                case 1002:
                  result = CFSTR("daemon.network.server-address.resolved");
                  break;
                case 1003:
                  result = CFSTR("daemon.network.failure");
                  break;
                case 1004:
                  result = CFSTR("daemon.network.peer.error");
                  break;
                case 1005:
                  result = CFSTR("daemon.network.ace-ping.sent");
                  break;
                case 1006:
                  result = CFSTR("daemon.network.ace-pong.received");
                  break;
                case 1007:
                  result = CFSTR("daemon.network.provider.open.begin");
                  break;
                case 1008:
                  result = CFSTR("daemon.network.provider.open.end");
                  break;
                case 1009:
                  result = CFSTR("daemon.network.provider.secondary.open.begin");
                  break;
                case 1010:
                  result = CFSTR("daemon.network.provider.secondary.open.end");
                  break;
                case 1011:
                  result = CFSTR("daemon.network.link.recommendation.begin");
                  break;
                case 1012:
                  result = CFSTR("daemon.network.link.recommendation.end");
                  break;
                case 1013:
                  result = CFSTR("daemon.network.link.recommendation.timeout");
                  break;
                case 1014:
                  result = CFSTR("daemon.network.connection.unviable");
                  break;
                case 1015:
                  result = CFSTR("daemon.network.connection.viable");
                  break;
                case 1016:
                  result = CFSTR("daemon.network.connection.state-prepare");
                  break;
                case 1017:
                  result = CFSTR("daemon.network.connection.state-ready");
                  break;
                case 1018:
                  result = CFSTR("daemon.network.connection.data.consumed");
                  break;
                default:
                  if (a1 != 801)
                    return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                  result = CFSTR("daemon.domain-signal.launch-app");
                  break;
              }
              break;
          }
        }
      }
      else if (a1 > 299)
      {
        if (a1 <= 449)
        {
          switch(a1)
          {
            case 300:
              result = CFSTR("daemon.speech");
              break;
            case 301:
              result = CFSTR("daemon.speech.capture.start.begin");
              break;
            case 302:
              result = CFSTR("daemon.speech.capture.start.end");
              break;
            case 303:
              result = CFSTR("daemon.speech.capture.update");
              break;
            case 304:
              result = CFSTR("daemon.speech.capture.cancel");
              break;
            case 305:
              result = CFSTR("daemon.speech.capture.stop");
              break;
            case 306:
              result = CFSTR("daemon.speech.failure");
              break;
            case 307:
              result = CFSTR("daemon.speech.capture.continued");
              break;
            case 308:
              result = CFSTR("daemon.speech.result-candidate.evaluation.begin");
              break;
            case 309:
              result = CFSTR("daemon.speech.result-candidate.evaluation.end");
              break;
            case 310:
              result = CFSTR("daemon.speech.result-candidate.accepted");
              break;
            case 311:
              result = CFSTR("daemon.speech.result-candidate.stashed");
              break;
            case 312:
              result = CFSTR("daemon.speech.log.begin");
              break;
            case 313:
              result = CFSTR("daemon.speech.log.end");
              break;
            default:
              switch(a1)
              {
                case 400:
                  result = CFSTR("daemon.service");
                  break;
                case 401:
                  result = CFSTR("daemon.service.handle.begin");
                  break;
                case 402:
                  result = CFSTR("daemon.service.handle.end");
                  break;
                case 403:
                  result = CFSTR("daemon.service.bundle.handle.begin");
                  break;
                case 404:
                  result = CFSTR("daemon.service.bundle.handle.end");
                  break;
                default:
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 500:
              result = CFSTR("daemon.generic-intent");
              break;
            case 501:
              result = CFSTR("daemon.generic-intent.handle.begin");
              break;
            case 502:
              result = CFSTR("daemon.generic-intent.handle.timeout");
              break;
            case 503:
              result = CFSTR("daemon.generic-intent.deliver.begin");
              break;
            case 504:
              result = CFSTR("daemon.generic-intent.recipient.state-changed");
              break;
            case 505:
              result = CFSTR("daemon.generic-intent.recipient.crash");
              break;
            case 506:
              result = CFSTR("daemon.generic-intent.recipient.finished");
              break;
            case 507:
              result = CFSTR("daemon.generic-intent.handle.end");
              break;
            default:
              if (a1 == 450)
              {
                result = CFSTR("daemon.memory");
              }
              else
              {
                if (a1 != 451)
                  return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
                result = CFSTR("daemon.memory.pressure.notification");
              }
              break;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 100:
            result = CFSTR("daemon");
            break;
          case 101:
            result = CFSTR("daemon.launch");
            break;
          case 102:
            result = CFSTR("daemon.loaded");
            break;
          case 103:
            result = CFSTR("daemon.exit");
            break;
          case 104:
            result = CFSTR("daemon.failure");
            break;
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 124:
          case 125:
          case 126:
          case 127:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          case 120:
            result = CFSTR("daemon.start-request.speech");
            break;
          case 121:
            result = CFSTR("daemon.start-request.dictation");
            break;
          case 122:
            result = CFSTR("daemon.start-request.other");
            break;
          case 123:
            result = CFSTR("daemon.start-request.keyboard");
            break;
          case 140:
            result = CFSTR("daemon.log.numeric-event");
            break;
          case 141:
            result = CFSTR("daemon.log.string-event");
            break;
          case 200:
            result = CFSTR("daemon.audio");
            break;
          case 201:
            result = CFSTR("daemon.audio.init.begin");
            break;
          case 202:
            result = CFSTR("daemon.audio.init.end");
            break;
          case 203:
            result = CFSTR("daemon.audio.configure.begin");
            break;
          case 204:
            result = CFSTR("daemon.audio.configure.end");
            break;
          case 205:
            result = CFSTR("daemon.audio.prewarm.begin");
            break;
          case 206:
            result = CFSTR("daemon.audio.prewarm.end");
            break;
          case 207:
            result = CFSTR("daemon.audio.prepare.begin");
            break;
          case 208:
            result = CFSTR("daemon.audio.prepare.end");
            break;
          case 209:
            result = CFSTR("daemon.audio.fetch-route.begin");
            break;
          case 210:
            result = CFSTR("daemon.audio.fetch-route.end");
            break;
          case 211:
            result = CFSTR("daemon.audio.start-recording.begin");
            break;
          case 212:
            result = CFSTR("daemon.audio.start-recording.end");
            break;
          case 213:
            result = CFSTR("daemon.audio.recording.begin");
            break;
          case 214:
            result = CFSTR("daemon.audio.recording.first-buffer");
            break;
          case 215:
            result = CFSTR("daemon.audio.recording.end");
            break;
          case 216:
            result = CFSTR("daemon.audio.stop-recording.begin");
            break;
          case 217:
            result = CFSTR("daemon.audio.stop-recording.end");
            break;
          case 218:
            result = CFSTR("daemon.audio.late-buffer");
            break;
          case 219:
            result = CFSTR("daemon.audio.analyzer.startpoint.detected");
            break;
          case 220:
            result = CFSTR("daemon.audio.analyzer.hard-endpoint.detected");
            break;
          case 221:
            result = CFSTR("daemon.audio.failure");
            break;
          case 222:
            result = CFSTR("daemon.audio.bt-info.fetch.begin");
            break;
          case 223:
            result = CFSTR("daemon.audio.bt-info.fetch.end");
            break;
          case 224:
            result = CFSTR("daemon.audio.fan-info");
            break;
          case 225:
            result = CFSTR("daemon.audio.first-chance-trigger-info");
            break;
          case 226:
            result = CFSTR("daemon.audio.recording.interruption.begin");
            break;
          case 227:
            result = CFSTR("daemon.audio.recording.interruption.end");
            break;
          case 228:
            result = CFSTR("daemon.audio.set-endpoint-state");
            break;
          case 229:
            result = CFSTR("daemon.audio.recording.first-buffer.start");
            break;
          case 230:
            result = CFSTR("daemon.audio.recording.first-buffer.receipt");
            break;
          case 231:
            result = CFSTR("daemon.audio.recording.last-buffer.start");
            break;
          case 232:
            result = CFSTR("daemon.audio.recording.last-buffer.receipt");
            break;
          case 233:
            result = CFSTR("daemon.audio.session.set-active.begin");
            break;
          case 234:
            result = CFSTR("daemon.audio.session.set-active.end");
            break;
          case 235:
            result = CFSTR("daemon.audio.session.set-inactive.begin");
            break;
          case 236:
            result = CFSTR("daemon.audio.session.set-inactive.end");
            break;
          case 237:
            result = CFSTR("daemon.audio.recording.missed-buffer");
            break;
          case 238:
            result = CFSTR("daemon.audio.file.started");
            break;
          case 239:
            result = CFSTR("daemon.audio.two-shot.transition.begin");
            break;
          case 240:
            result = CFSTR("daemon.audio.two-shot.transition.end");
            break;
          case 241:
            result = CFSTR("daemon.audio.recording.metrics");
            break;
          case 242:
            result = CFSTR("daemon.audio.bluetooth-info");
            break;
          case 243:
            result = CFSTR("daemon.audio.analyzer.multi-modal-endpoint.detected");
            break;
          case 244:
            result = CFSTR("daemon.audio.session.prepare.begin");
            break;
          case 245:
            result = CFSTR("daemon.audio.session.prepare.end");
            break;
          case 246:
            result = CFSTR("daemon.audio.session.release.begin");
            break;
          case 247:
            result = CFSTR("daemon.audio.session.release.end");
            break;
          case 248:
            result = CFSTR("daemon.audio.session.local-assertion.acquire");
            break;
          case 249:
            result = CFSTR("daemon.audio.session.local-assertion.activate");
            break;
          case 250:
            result = CFSTR("daemon.audio.session.local-assertion.deactivate");
            break;
          case 251:
            result = CFSTR("daemon.audio.session.local-assertion.relinquish");
            break;
          case 252:
            result = CFSTR("daemon.audio.session.remote-assertion.acquire");
            break;
          case 253:
            result = CFSTR("daemon.audio.session.remote-assertion.activate");
            break;
          case 254:
            result = CFSTR("daemon.audio.session.remote-assertion.deactivate");
            break;
          case 255:
            result = CFSTR("daemon.audio.session.remote-assertion.relinquish");
            break;
          case 256:
            result = CFSTR("daemon.audio.session.first-assertion.activate");
            break;
          case 257:
            result = CFSTR("daemon.audio.session.last-assertion.deactivate");
            break;
          default:
            if (a1)
              return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            result = CFSTR("unspecified");
            break;
        }
      }
      return result;
    }
    if (a1 > 1799)
    {
      if (a1 > 2099)
      {
        switch(a1)
        {
          case 2200:
            result = CFSTR("client.dictation");
            break;
          case 2201:
            result = CFSTR("client.dictation.start-request");
            break;
          case 2202:
            result = CFSTR("client.dictation.update-speech");
            break;
          case 2203:
            result = CFSTR("client.dictation.stop-speech");
            break;
          case 2204:
            result = CFSTR("client.dictation.cancel-speech");
            break;
          case 2205:
            result = CFSTR("client.dictation.request-canceled");
            break;
          case 2206:
            result = CFSTR("client.dictation.request-failed");
            break;
          case 2207:
            result = CFSTR("client.dictation.request-completed");
            break;
          case 2208:
            result = CFSTR("client.dictation.timeout-request");
            break;
          case 2209:
            result = CFSTR("client.dictation.speech-recording.started");
            break;
          case 2210:
            result = CFSTR("client.dictation.speech-recording.canceled");
            break;
          case 2211:
            result = CFSTR("client.dictation.speech-recording.completed");
            break;
          case 2212:
            result = CFSTR("client.dictation.speech-recording.failed");
            break;
          case 2213:
            result = CFSTR("client.dictation.speech-recognition.phrases-recognized");
            break;
          case 2214:
            result = CFSTR("client.dictation.speech-recognition.tokens-recognized");
            break;
          case 2215:
            result = CFSTR("client.dictation.speech-recognition.transcription-objects-recognized");
            break;
          case 2216:
            result = CFSTR("client.dictation.speech-recognition.completed");
            break;
          case 2217:
            result = CFSTR("client.dictation.speech-recognition.failed");
            break;
          case 2218:
            result = CFSTR("client.dictation.app-did-enter-background");
            break;
          case 2219:
            result = CFSTR("client.dictation.smart-language-selection.language-overridden");
            break;
          case 2220:
            result = CFSTR("client.dictation.request-sampled");
            break;
          case 2221:
            result = CFSTR("client.dictation.personalization-validation-metrics");
            break;
          case 2222:
            result = CFSTR("client.dictation.request-completion-status");
            break;
          case 2223:
            result = CFSTR("client.dictation.sampled-audio.send-to-server.status");
            break;
          case 2224:
            result = CFSTR("client.dictation.request-sampled.save-audio");
            break;
          case 2225:
            result = CFSTR("client.dictation.preheat");
            break;
          case 2226:
            result = CFSTR("client.dictation.offline-dictation-status");
            break;
          default:
            switch(a1)
            {
              case 2100:
                result = CFSTR("ui.watch");
                break;
              case 2101:
                result = CFSTR("ui.activation.gizmo-vt-while-already-recording");
                break;
              case 2102:
                result = CFSTR("ui.delayed-response.education");
                break;
              case 2103:
                result = CFSTR("ui.delayed-response.wrist-lowered");
                break;
              case 2104:
                result = CFSTR("ui.delayed-response.backlight-on");
                break;
              case 2105:
                result = CFSTR("ui.tts.canceled");
                break;
              default:
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 1900:
            result = CFSTR("client");
            break;
          case 1901:
            result = CFSTR("client.start-request");
            break;
          case 1902:
            result = CFSTR("client.start-speech-request");
            break;
          case 1903:
            result = CFSTR("client.start-speech-pronunciation-request");
            break;
          case 1904:
            result = CFSTR("client.start-acoustic-id-request");
            break;
          case 1905:
            result = CFSTR("client.start-continuity-request");
            break;
          case 1906:
            result = CFSTR("client.start-correction-request");
            break;
          case 1907:
            result = CFSTR("client.start-direct-action-request");
            break;
          case 1908:
            result = CFSTR("client.start-text-request");
            break;
          case 1909:
            result = CFSTR("client.update-speech");
            break;
          case 1910:
            result = CFSTR("client.stop-speech");
            break;
          case 1911:
            result = CFSTR("client.cancel-speech");
            break;
          case 1912:
            result = CFSTR("client.request-canceled");
            break;
          case 1913:
            result = CFSTR("client.request-failed");
            break;
          case 1914:
            result = CFSTR("client.request-completed");
            break;
          case 1915:
            result = CFSTR("client.preheat");
            break;
          case 1916:
            result = CFSTR("client.acoustic-id.begin");
            break;
          case 1917:
            result = CFSTR("client.acoustic-id.end");
            break;
          case 1918:
            result = CFSTR("client.tether.wait.begin");
            break;
          case 1919:
            result = CFSTR("client.tether.wait.end");
            break;
          case 1920:
            result = CFSTR("client.tether.attach.begin");
            break;
          case 1921:
            result = CFSTR("client.tether.attach.end");
            break;
          case 1922:
            result = CFSTR("client.tether.attached");
            break;
          case 1923:
            result = CFSTR("client.tether.detached");
            break;
          case 1924:
            result = CFSTR("client.feedback.presented");
            break;
          case 1925:
            result = CFSTR("client.auto-disambiguation.requested");
            break;
          case 1926:
            result = CFSTR("client.auto-disambiguation.saved");
            break;
          case 1927:
            result = CFSTR("client.location.no-result");
            break;
          case 1928:
            result = CFSTR("client.location.start-updating");
            break;
          case 1929:
            result = CFSTR("client.location.did-update");
            break;
          case 1930:
            result = CFSTR("client.screen-wake-requested");
            break;
          case 1931:
            result = CFSTR("client.screen-turn-off-requested");
            break;
          case 1932:
          case 1933:
          case 1934:
          case 1935:
          case 1936:
          case 1937:
          case 1938:
          case 1939:
          case 1940:
          case 1941:
          case 1942:
          case 1943:
          case 1944:
          case 1945:
          case 1946:
          case 1947:
          case 1948:
          case 1949:
          case 1950:
          case 1951:
          case 1952:
          case 1953:
          case 1954:
          case 1955:
          case 1956:
          case 1957:
          case 1958:
          case 1959:
          case 1960:
          case 1961:
          case 1962:
          case 1963:
          case 1964:
          case 1965:
          case 1966:
          case 1967:
          case 1968:
          case 1969:
          case 1970:
          case 1971:
          case 1972:
          case 1973:
          case 1974:
          case 1975:
          case 1976:
          case 1977:
          case 1978:
          case 1979:
          case 1980:
          case 1981:
          case 1982:
          case 1983:
          case 1984:
          case 1985:
          case 1986:
          case 1987:
          case 1988:
          case 1989:
          case 1990:
          case 1991:
          case 1992:
          case 1993:
          case 1994:
          case 1995:
          case 1996:
          case 1997:
          case 1998:
          case 1999:
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
          case 2000:
            result = CFSTR("client.coord");
            break;
          case 2001:
            result = CFSTR("client.coord.audio-ready");
            break;
          case 2002:
            result = CFSTR("client.coord.advertising-start-request");
            break;
          case 2003:
            result = CFSTR("client.coord.advertising-did-start");
            break;
          case 2004:
            result = CFSTR("client.coord.advertising-end-request");
            break;
          case 2005:
            result = CFSTR("client.coord.advertising-did-end");
            break;
          case 2006:
            result = CFSTR("client.coord.decision-made");
            break;
          case 2007:
            result = CFSTR("client.coord.slowdown-generated");
            break;
          case 2008:
            result = CFSTR("client.coord.slowdown-received");
            break;
          case 2009:
            result = CFSTR("client.coord.multiple-continuation-signals");
            break;
          case 2010:
            result = CFSTR("client.coord.advertising-will-end");
            break;
          case 2011:
            result = CFSTR("client.coord.activity-start");
            break;
          case 2012:
            result = CFSTR("client.coord.activity-end");
            break;
          case 2013:
            result = CFSTR("client.coord.advertisement-push-begin");
            break;
          case 2014:
            result = CFSTR("client.coord.advertisement-push-error");
            break;
          case 2015:
            result = CFSTR("client.coord.advertisement-push-response-received");
            break;
          case 2016:
            result = CFSTR("client.coord.advertisement-push-response-received-invalidAdvertisementId");
            break;
          case 2017:
            result = CFSTR("client.coord.advertisement-push-response-received-late");
            break;
          case 2018:
            result = CFSTR("client.coord.suppress-late-trigger");
            break;
          case 2019:
            result = CFSTR("client.coord.accessory-message-pushed");
            break;
          case 2020:
            result = CFSTR("client.coord.accessory-message-push-ack-received");
            break;
          case 2021:
            result = CFSTR("client.coord.accessory-decision-received");
            break;
          case 2022:
            result = CFSTR("client.coord.accessory-emergency-handled");
            break;
          default:
            switch(a1)
            {
              case 1800:
                result = CFSTR("voice-services.daemon");
                break;
              case 1801:
                result = CFSTR("voice-services.daemon.speech-request.creation");
                break;
              case 1802:
                result = CFSTR("voice-services.daemon.speech-request.vocalization.begin");
                break;
              case 1803:
                result = CFSTR("voice-services.daemon.speech-request.vocalization.end");
                break;
              case 1804:
                result = CFSTR("voice-services.daemon.speech-request.synthesize.begin");
                break;
              case 1805:
                result = CFSTR("voice-services.daemon.speech-request.synthesize.end");
                break;
              case 1806:
                result = CFSTR("voice-services.daemon.speech-request.vocalization.output-estimated-begin");
                break;
              default:
                return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
            }
            break;
        }
      }
      return result;
    }
    if (a1 > 1399)
    {
      if (a1 <= 1599)
      {
        switch(a1)
        {
          case 1400:
            result = CFSTR("ui");
            break;
          case 1401:
            result = CFSTR("ui.plugin.loaded");
            break;
          case 1402:
            result = CFSTR("ui.activation.prepare");
            break;
          case 1403:
            result = CFSTR("ui.activation.cancel");
            break;
          case 1404:
            result = CFSTR("ui.activation.handle.begin");
            break;
          case 1405:
            result = CFSTR("ui.activation.handle.end");
            break;
          case 1406:
            result = CFSTR("ui.present.begin");
            break;
          case 1407:
            result = CFSTR("ui.present.end");
            break;
          case 1408:
            result = CFSTR("ui.dismiss.begin");
            break;
          case 1409:
            result = CFSTR("ui.dismiss.end");
            break;
          case 1410:
            result = CFSTR("ui.button.down");
            break;
          case 1411:
            result = CFSTR("ui.button.up");
            break;
          case 1412:
            result = CFSTR("ui.button.tap");
            break;
          case 1413:
            result = CFSTR("ui.blur");
            break;
          case 1414:
            result = CFSTR("ui.flames.present");
            break;
          case 1415:
            result = CFSTR("ui.flames.dismiss");
            break;
          case 1416:
            result = CFSTR("ui.mode.idle");
            break;
          case 1417:
            result = CFSTR("ui.mode.listening");
            break;
          case 1418:
            result = CFSTR("ui.mode.thinking");
            break;
          case 1419:
            result = CFSTR("ui.mode.success");
            break;
          case 1420:
            result = CFSTR("ui.uufr.present");
            break;
          case 1421:
            result = CFSTR("ui.command.handle.begin");
            break;
          case 1422:
            result = CFSTR("ui.command.handle.end");
            break;
          case 1423:
            result = CFSTR("ui.failure");
            break;
          case 1424:
            result = CFSTR("ui.tap-to-edit-button.tap");
            break;
          case 1425:
            result = CFSTR("ui.url-session-load.failure");
            break;
          case 1426:
            result = CFSTR("ui.disambiguation.selected");
            break;
          case 1427:
            result = CFSTR("ui.tts.should-speak");
            break;
          case 1428:
            result = CFSTR("ui.tts.should-not-speak");
            break;
          case 1429:
            result = CFSTR("ui.transcript-item.inserted");
            break;
          case 1430:
            result = CFSTR("ui.transcript-item.did-appear");
            break;
          case 1431:
            result = CFSTR("ui.transcript-item.did-disappear");
            break;
          case 1432:
            result = CFSTR("ui.transcript.scrolled");
            break;
          case 1433:
            result = CFSTR("ui.unlock-ui.presented");
            break;
          case 1434:
            result = CFSTR("ui.unlock-ui.dismissed");
            break;
          case 1435:
            result = CFSTR("ui.device.locked");
            break;
          case 1436:
            result = CFSTR("ui.device.unlocked");
            break;
          case 1437:
            result = CFSTR("ui.punchout.begin");
            break;
          case 1438:
            result = CFSTR("ui.punchout.end");
            break;
          case 1439:
            result = CFSTR("ui.transcript-items.reload.begin");
            break;
          case 1440:
            result = CFSTR("ui.transcript-items.reload.end");
            break;
          case 1441:
            result = CFSTR("ui.mode.presenting");
            break;
          case 1442:
            result = CFSTR("ui.mode.idle.rendered");
            break;
          case 1443:
            result = CFSTR("ui.mode.listening.rendered");
            break;
          case 1444:
            result = CFSTR("ui.mode.thinking.rendered");
            break;
          case 1445:
            result = CFSTR("ui.mode.presenting.rendered");
            break;
          case 1446:
            result = CFSTR("ui.button.text-request-input.start");
            break;
          case 1447:
            result = CFSTR("ui.button.text-request-input.done");
            break;
          case 1448:
            result = CFSTR("ui.button.text-request-input.clear");
            break;
          case 1449:
            result = CFSTR("ui.add-views.view.null-ace-id-detected");
            break;
          case 1450:
            result = CFSTR("ui.swipe.dismiss");
            break;
          case 1451:
            result = CFSTR("ui.bluetooth.bvra1.received");
            break;
          case 1452:
            result = CFSTR("ui.notification-sound.playback.failure");
            break;
          case 1453:
            result = CFSTR("ui.view.presented");
            break;
          case 1454:
            result = CFSTR("ui.view.dismissed");
            break;
          case 1455:
            result = CFSTR("ui.view.did-engage");
            break;
          case 1456:
            result = CFSTR("ui.view.scrolled");
            break;
          case 1457:
            result = CFSTR("ui.view.item-selected");
            break;
          case 1458:
            result = CFSTR("ui.audio-route-picker.tapped");
            break;
          case 1459:
            result = CFSTR("ui.received-reveal-speech-command");
            break;
          case 1460:
            result = CFSTR("ui.dismiss.request");
            break;
          case 1461:
            result = CFSTR("ui.view.did-appear");
            break;
          case 1462:
            result = CFSTR("ui.view.did-disappear");
            break;
          case 1500:
            result = CFSTR("ui.view-service");
            break;
          case 1501:
            result = CFSTR("ui.view-service.launch");
            break;
          case 1502:
            result = CFSTR("ui.view-service.loaded");
            break;
          case 1503:
            result = CFSTR("ui.view-service.exit");
            break;
          case 1504:
            result = CFSTR("ui.view-service.speech-partial-result.received");
            break;
          case 1505:
            result = CFSTR("ui.view-service.speech-partial-result.presented");
            break;
          case 1506:
            result = CFSTR("ui.view-service.speech-recognized.received");
            break;
          case 1507:
            result = CFSTR("ui.view-service.speech-recognized.presented");
            break;
          case 1508:
            result = CFSTR("ui.view-service.failure");
            break;
          case 1509:
            result = CFSTR("ui.view-service.pin");
            break;
          case 1510:
            result = CFSTR("ui.view-service.pin.begin");
            break;
          case 1511:
            result = CFSTR("ui.view-service.pin.end");
            break;
          case 1512:
            result = CFSTR("ui.view-service.drag");
            break;
          case 1513:
            result = CFSTR("ui.view-service.did-appear");
            break;
          case 1514:
            result = CFSTR("ui.view-service.did-disappear");
            break;
          default:
            return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
        }
        return result;
      }
      if (a1 > 1699)
      {
        switch(a1)
        {
          case 1700:
            return CFSTR("coverage.request-statistics");
          case 1701:
            return CFSTR("coverage.request-statistics.cancellation");
          case 1702:
            return CFSTR("coverage.request-statistics.failure");
        }
      }
      else
      {
        switch(a1)
        {
          case 1600:
            return CFSTR("coverage.aggregate-dictionary");
          case 1601:
            return CFSTR("coverage.aggregate-dictionary.scalar");
          case 1602:
            return CFSTR("coverage.aggregate-dictionary.distribution");
        }
      }
      return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
    }
    if (a1 <= 1199)
    {
      switch(a1)
      {
        case 1100:
          return CFSTR("daemon.incoming-command");
        case 1101:
          return CFSTR("daemon.incoming-command.speech-partial-result");
        case 1102:
          return CFSTR("daemon.incoming-command.speech-recognized");
      }
      return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
    }
    switch(a1)
    {
      case 1200:
        result = CFSTR("daemon.outgoing-command");
        break;
      case 1201:
        result = CFSTR("daemon.outgoing-command.failure");
        break;
      case 1202:
        result = CFSTR("daemon.local.outgoing-command.failure");
        break;
      case 1204:
        result = CFSTR("daemon.service.maintenance.begin");
        break;
      case 1205:
        result = CFSTR("daemon.service.maintenance.end");
        break;
      case 1206:
        result = CFSTR("daemon.preferences.synchronize.failure");
        break;
      default:
        return (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("unknown.%ld"), a1);
    }
  }
  return result;
}

uint64_t AFAnalyticsEventTypeIsValid(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = 0;
  if (a1 <= 2299)
  {
    if (a1 <= 1099)
    {
      if (a1 <= 599)
      {
        if (a1 <= 399)
        {
          switch(a1)
          {
            case 120:
            case 121:
            case 122:
            case 123:
            case 140:
            case 141:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
            case 219:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 226:
            case 227:
            case 228:
            case 229:
            case 230:
            case 231:
            case 232:
            case 233:
            case 234:
            case 235:
            case 236:
            case 237:
            case 238:
            case 239:
            case 240:
            case 241:
            case 242:
            case 243:
            case 244:
            case 245:
            case 246:
            case 247:
            case 248:
            case 249:
            case 250:
            case 251:
            case 252:
            case 253:
            case 254:
            case 255:
            case 256:
            case 257:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 310:
            case 311:
            case 312:
            case 313:
              return 1;
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 258:
            case 259:
            case 260:
            case 261:
            case 262:
            case 263:
            case 264:
            case 265:
            case 266:
            case 267:
            case 268:
            case 269:
            case 270:
            case 271:
            case 272:
            case 273:
            case 274:
            case 275:
            case 276:
            case 277:
            case 278:
            case 279:
            case 280:
            case 281:
            case 282:
            case 283:
            case 284:
            case 285:
            case 286:
            case 287:
            case 288:
            case 289:
            case 290:
            case 291:
            case 292:
            case 293:
            case 294:
            case 295:
            case 296:
            case 297:
            case 298:
            case 299:
              return result;
            default:
              v6 = a1 - 100;
              goto LABEL_110;
          }
          return result;
        }
        if ((unint64_t)(a1 - 450) > 0x39 || ((1 << (a1 + 62)) & 0x3FC000000000003) == 0)
        {
          v6 = a1 - 400;
          goto LABEL_110;
        }
        return 1;
      }
      if (a1 <= 799)
      {
        if ((unint64_t)(a1 - 600) >= 0x2A)
        {
          v6 = a1 - 700;
          goto LABEL_110;
        }
        return 1;
      }
      if ((unint64_t)(a1 - 900) < 0x1B || (unint64_t)(a1 - 1000) < 0x13)
        return 1;
      v4 = a1 - 800;
LABEL_107:
      if (v4 >= 2)
        return result;
      return 1;
    }
    if (a1 > 1799)
    {
      if (a1 <= 1999)
      {
        if ((unint64_t)(a1 - 1900) >= 0x20 && (unint64_t)(a1 - 1800) >= 7)
          return result;
      }
      else if ((unint64_t)(a1 - 2200) >= 0x1B
             && (unint64_t)(a1 - 2000) >= 0x17
             && (unint64_t)(a1 - 2100) >= 6)
      {
        return result;
      }
      return 1;
    }
    if (a1 > 1499)
    {
      if ((unint64_t)(a1 - 1500) < 0xF || (unint64_t)(a1 - 1600) < 3)
        return 1;
      v5 = a1 - 1700;
    }
    else
    {
      if ((unint64_t)(a1 - 1400) < 0x3F || (unint64_t)(a1 - 1200) <= 6 && a1 != 1203)
        return 1;
      v5 = a1 - 1100;
    }
LABEL_69:
    if (v5 >= 3)
      return result;
    return 1;
  }
  if (a1 <= 4299)
  {
    if (a1 <= 3599)
    {
      if (a1 > 2799)
      {
        if (a1 <= 3299)
        {
          if (a1 > 2999)
          {
            if ((unint64_t)(a1 - 3200) < 6 || (unint64_t)(a1 - 3000) < 3)
              return 1;
            v4 = a1 - 3100;
          }
          else
          {
            if ((unint64_t)(a1 - 2900) < 9)
              return 1;
            v4 = a1 - 2800;
          }
          goto LABEL_107;
        }
        if ((unint64_t)(a1 - 3300) < 0xC || (unint64_t)(a1 - 3500) < 5)
          return 1;
        v8 = a1 - 3400;
      }
      else
      {
        if (a1 > 2599)
        {
          if ((unint64_t)(a1 - 2600) >= 0x15 && (unint64_t)(a1 - 2700) >= 0xD)
            return result;
          return 1;
        }
        if ((unint64_t)(a1 - 2300) < 5
          || (unint64_t)(a1 - 2400) <= 0x15 && ((1 << (a1 - 96)) & 0x300007) != 0)
        {
          return 1;
        }
        v8 = a1 - 2500;
      }
      goto LABEL_92;
    }
    if (a1 > 3899)
    {
      if (a1 <= 4099)
      {
        if ((unint64_t)(a1 - 4000) >= 0xB && (unint64_t)(a1 - 3900) >= 9)
          return result;
        return 1;
      }
      if ((unint64_t)(a1 - 4100) < 9)
        return 1;
      v9 = -4200;
      goto LABEL_106;
    }
    if ((unint64_t)(a1 - 3800) < 0x1D
      || (unint64_t)(a1 - 3700) <= 0x38 && ((1 << (a1 - 116)) & 0x1FC0000000003FFLL) != 0
      || (unint64_t)(a1 - 3600) < 0xA)
    {
      return 1;
    }
  }
  else
  {
    if (a1 > 5199)
    {
      if (a1 > 5999)
      {
        if (a1 <= 6099)
        {
          v7 = a1 - 6000;
          if (v7 > 0x24 || ((1 << v7) & 0x1FC000FFFFLL) == 0)
            return result;
          return 1;
        }
        if (a1 <= 6299)
        {
          if ((unint64_t)(a1 - 6100) < 0x12)
            return 1;
          v3 = -6200;
          goto LABEL_55;
        }
        if (a1 > 6499)
        {
          if ((unint64_t)(a1 - 6500) >= 9 && (unint64_t)(a1 - 6600) > 1)
            return result;
          return 1;
        }
        if ((unint64_t)(a1 - 6300) < 2)
          return 1;
        v9 = -6400;
LABEL_106:
        v4 = a1 + v9;
        goto LABEL_107;
      }
      if (a1 > 5499)
      {
        if ((unint64_t)(a1 - 5500) < 0xD || (unint64_t)(a1 - 5600) < 3)
          return 1;
        v3 = -5701;
LABEL_55:
        v5 = a1 + v3;
        goto LABEL_69;
      }
      if ((unint64_t)(a1 - 5200) < 9 || (unint64_t)(a1 - 5400) < 5)
        return 1;
      v8 = a1 - 5300;
LABEL_92:
      if (v8 >= 4)
        return result;
      return 1;
    }
    if (a1 > 4699)
    {
      if (a1 <= 4799)
      {
        if ((unint64_t)(a1 - 4700) >= 0xE)
          return result;
        return 1;
      }
      if (a1 <= 4899)
      {
        v6 = a1 - 4800;
LABEL_110:
        if (v6 >= 5)
          return result;
        return 1;
      }
      if ((unint64_t)(a1 - 4900) < 3 || (unint64_t)(a1 - 5000) < 2)
        return 1;
      v9 = -5100;
      goto LABEL_106;
    }
    switch(a1)
    {
      case 4500:
      case 4501:
      case 4502:
      case 4503:
      case 4504:
      case 4505:
      case 4506:
      case 4507:
      case 4508:
      case 4509:
      case 4510:
      case 4511:
      case 4512:
      case 4513:
      case 4514:
      case 4515:
      case 4516:
      case 4517:
      case 4518:
      case 4519:
      case 4520:
      case 4521:
      case 4522:
      case 4523:
      case 4524:
      case 4525:
      case 4526:
      case 4528:
      case 4529:
      case 4560:
      case 4561:
      case 4570:
      case 4575:
      case 4585:
      case 4586:
      case 4587:
      case 4588:
      case 4589:
      case 4600:
      case 4601:
      case 4602:
      case 4603:
      case 4604:
      case 4605:
        return 1;
      case 4527:
      case 4530:
      case 4531:
      case 4532:
      case 4533:
      case 4534:
      case 4535:
      case 4536:
      case 4537:
      case 4538:
      case 4539:
      case 4540:
      case 4541:
      case 4542:
      case 4543:
      case 4544:
      case 4545:
      case 4546:
      case 4547:
      case 4548:
      case 4549:
      case 4550:
      case 4551:
      case 4552:
      case 4553:
      case 4554:
      case 4555:
      case 4556:
      case 4557:
      case 4558:
      case 4559:
      case 4562:
      case 4563:
      case 4564:
      case 4565:
      case 4566:
      case 4567:
      case 4568:
      case 4569:
      case 4571:
      case 4572:
      case 4573:
      case 4574:
      case 4576:
      case 4577:
      case 4578:
      case 4579:
      case 4580:
      case 4581:
      case 4582:
      case 4583:
      case 4584:
      case 4590:
      case 4591:
      case 4592:
      case 4593:
      case 4594:
      case 4595:
      case 4596:
      case 4597:
      case 4598:
      case 4599:
        return result;
      default:
        if ((unint64_t)(a1 - 4300) <= 0xA && ((1 << (a1 + 52)) & 0x4FF) != 0
          || (unint64_t)(a1 - 4400) < 8)
        {
          return 1;
        }
        break;
    }
  }
  return result;
}

void sub_19AFABCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7975(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7976(uint64_t a1)
{

}

void sub_19AFAC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t validationOfObjectWithClassType(void *a1, void *a2)
{
  id v3;
  NSString *v4;
  void *v5;
  char v6;
  char isKindOfClass;

  v3 = a1;
  v4 = a2;
  if (v3
    && (objc_msgSend(MEMORY[0x1E0C99E38], "null"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v3, "isEqual:", v5),
        v5,
        (v6 & 1) == 0))
  {
    NSClassFromString(v4);
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 1;
  }

  return isKindOfClass & 1;
}

void sub_19AFAE314(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL AFSpeechEndpointerOperationModeGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSpeechEndpointerOperationModeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFSpeechEndpointerOperationModeGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A2E4D8[a1];
}

uint64_t AFSpeechEndpointerOperationModeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSpeechEndpointerOperationModeGetFromName_onceToken != -1)
      dispatch_once(&AFSpeechEndpointerOperationModeGetFromName_onceToken, &__block_literal_global_8171);
    objc_msgSend((id)AFSpeechEndpointerOperationModeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19AFB1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB2934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB32B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB34B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB35B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB36B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB37B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB3A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB3DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB3F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB42E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB458C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB48BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB4CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB5968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB5B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB5C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFB5E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NPSDomainAccessorFunction()
{
  return (id)classNPSDomainAccessor;
}

id initNPSDomainAccessor()
{
  if (initNPSDomainAccessor_sOnce != -1)
    dispatch_once(&initNPSDomainAccessor_sOnce, &__block_literal_global_1554);
  return (id)classNPSDomainAccessor;
}

id NPSManagerFunction()
{
  return (id)classNPSManager;
}

id initNPSManager()
{
  if (initNPSManager_sOnce != -1)
    dispatch_once(&initNPSManager_sOnce, &__block_literal_global_1558);
  return (id)classNPSManager;
}

Class __initNPSManager_block_invoke()
{
  Class result;

  NanoPreferencesSyncLibrary();
  result = objc_getClass("NPSManager");
  classNPSManager = (uint64_t)result;
  if (!result)
    __assert_rtn("initNPSManager_block_invoke", "AFPreferences.m", 56, "classNPSManager");
  getNPSManagerClass = (uint64_t (*)(_QWORD))NPSManagerFunction;
  return result;
}

void NanoPreferencesSyncLibrary()
{
  if (!NanoPreferencesSyncLibrary_frameworkLibrary)
  {
    NanoPreferencesSyncLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync", 2);
    if (!NanoPreferencesSyncLibrary_frameworkLibrary)
      __assert_rtn("NanoPreferencesSyncLibrary", "AFPreferences.m", 55, "frameworkLibrary");
  }
}

Class __initNPSDomainAccessor_block_invoke()
{
  Class result;

  NanoPreferencesSyncLibrary();
  result = objc_getClass("NPSDomainAccessor");
  classNPSDomainAccessor = (uint64_t)result;
  if (!result)
    __assert_rtn("initNPSDomainAccessor_block_invoke", "AFPreferences.m", 57, "classNPSDomainAccessor");
  getNPSDomainAccessorClass = (uint64_t (*)(void))NPSDomainAccessorFunction;
  return result;
}

void _AFNanoPreferencesSetValueForKey(void *a1, uint64_t a2)
{
  uint64_t (*v3)(void);
  id v4;
  id v5;
  void *v6;
  void *v7;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v9;

  v3 = getNPSDomainAccessorClass;
  v4 = a1;
  v9 = (id)objc_msgSend(objc_alloc((Class)v3()), "initWithDomain:", CFSTR("com.apple.assistant.nano"));
  objc_msgSend(v9, "setObject:forKey:", v4, a2);

  v5 = (id)objc_msgSend(v9, "synchronize");
  getNPSManagerClass(v5);
  v6 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "synchronizeNanoDomain:keys:", CFSTR("com.apple.assistant.nano"), v7);

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.assistant.nano.preferences.did_change.internal"), 0, 0, 1u);

}

id _AFNanoPreferencesValueForKey(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;

  v2 = (void *)objc_msgSend(objc_alloc((Class)getNPSDomainAccessorClass()), "initWithDomain:", CFSTR("com.apple.assistant.nano"));
  v3 = (id)objc_msgSend(v2, "synchronize");
  objc_msgSend(v2, "objectForKey:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void _AFPreferencesSetValueForKeyWithContext(void *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  void *v7;
  __CFString *v8;
  id value;

  value = a1;
  objc_msgSend(a4, "preferencesSubdomain");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@/%@"), v7, a2);
    CFPreferencesSetAppValue(v8, value, a3);

  }
  else
  {
    CFPreferencesSetAppValue(a2, value, a3);
  }

}

uint64_t _AFPreferencesNetworkLoggingEnabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Network Logging Enabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetNetworkLoggingEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Network Logging Enabled"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesKeepRecorededAudioFiles()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)CFPreferencesCopyValue(CFSTR("Keep Recorded Audio Files"), CFSTR("com.apple.assistant"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 0;

  return v1;
}

BOOL _AFPreferencesDictationOnDeviceSamplingDisabled()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.internal.ck"));
  objc_msgSend(v0, "objectForKey:", CFSTR("DictationOnDeviceSamplingDisabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = 0;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v1, "BOOLValue") & 1) != 0)
      v2 = 1;
  }

  return v2;
}

uint64_t _AFPreferencesDictationLanguageDetectorEnabledByServer()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Dictation Language Detector Enabled By Server"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

uint64_t _AFPreferencesDictationLanguageDetectorEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 1;
  _AFPreferencesValueForKeyWithContext(CFSTR("Dictation Language Detector Enabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

uint64_t _AFPreferencesSetDictationLanguageDetectorEnabled(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Dictation Language Detector Enabled"), CFSTR("com.apple.assistant"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

uint64_t AFPreferencesTypeToSiriEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Type To Siri Enabled"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

AFVoiceInfo *_AFPreferencesOutputVoiceWithContext(void *a1)
{
  void *v1;
  AFVoiceInfo *v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Output Voice"), CFSTR("com.apple.assistant.backedup"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = -[AFVoiceInfo initWithDictionaryRepresentation:]([AFVoiceInfo alloc], "initWithDictionaryRepresentation:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t AFPreferencesLanguageIsSupported(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;

  v1 = a1;
  AFPreferencesSupportedLanguages();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "containsObject:", v1) & 1) == 0)
  {
    if (v1)
    {
      _AFPreferencesAlternativeLocaleLanguages();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectForKey:", v1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
        v3 = (int)(objc_msgSend(v2, "containsObject:", v5) << 31) >> 31;
LABEL_8:

        goto LABEL_9;
      }
    }
    else
    {
      v5 = 0;
    }
    LOBYTE(v3) = 0;
    goto LABEL_8;
  }
  LOBYTE(v3) = 1;
LABEL_9:

  return v3 & 1;
}

id _AFPreferencesAlternativeLocaleLanguages()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObjectsAndKeys:", CFSTR("zh-Hans-HK"), CFSTR("en-IN"), CFSTR("hi-IN"), CFSTR("yue-CN"), CFSTR("zh-Hans-MO"), CFSTR("es-ES"), CFSTR("ca-ES"), CFSTR("en-SG"), CFSTR("en-MY"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  AFPreferencesSupportedLanguages();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(v0, "objectForKey:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          objc_msgSend(v0, "removeObjectForKey:", v6);
          v8 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v16 = "_AFPreferencesAlternativeLocaleLanguages";
            v17 = 2112;
            v18 = v6;
            _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Removing \"%@\" from alternative language map. Please file a radar on Siri Frameworks to remove it permanently.", buf, 0x16u);
          }
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v19, 16);
    }
    while (v3);
  }
  v9 = (void *)objc_msgSend(v0, "copy");

  return v9;
}

id _AFPreferencesBuiltInVisionLanguages()
{
  _QWORD v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("en-US");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 1);
  return (id)objc_claimAutoreleasedReturnValue();
}

void _AFPreferencesSetInProgressOutputVoice(void *a1)
{
  id v1;

  objc_msgSend(a1, "dictionaryRepresentation");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("In Progress Output Voice"), CFSTR("com.apple.assistant.backedup"), 0);

}

AFVoiceInfo *_AFPreferencesInProgressOutputVoice()
{
  void *v0;
  AFVoiceInfo *v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("In Progress Output Voice"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = -[AFVoiceInfo initWithDictionaryRepresentation:]([AFVoiceInfo alloc], "initWithDictionaryRepresentation:", v0);

  return v1;
}

id TIInputModeControllerFunction()
{
  return (id)classTIInputModeController;
}

id initTIInputModeController()
{
  if (initTIInputModeController_sOnce != -1)
    dispatch_once(&initTIInputModeController_sOnce, &__block_literal_global_1545);
  return (id)classTIInputModeController;
}

Class __initTIInputModeController_block_invoke()
{
  Class result;

  if (TextInputLibrary_sOnce != -1)
    dispatch_once(&TextInputLibrary_sOnce, &__block_literal_global_1547);
  result = objc_getClass("TIInputModeController");
  classTIInputModeController = (uint64_t)result;
  getTIInputModeControllerClass = TIInputModeControllerFunction;
  return result;
}

id _AFBestEffortNormalizedLanguageIdentifier(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("@"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("-"), CFSTR("_"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _AFAddCountryCodeToLanguageIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v7 = *MEMORY[0x1E0C997B0];
      objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0C997B0]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v8)
      {
        v9 = (void *)objc_msgSend(v6, "mutableCopy");
        objc_msgSend(v9, "setObject:forKey:", v3, v7);
        objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v9);
        v10 = (id)objc_claimAutoreleasedReturnValue();

LABEL_9:
        goto LABEL_10;
      }
    }
    else
    {
      v11 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        v13 = 136315138;
        v14 = "_AFAddCountryCodeToLanguageIdentifier";
        _os_log_impl(&dword_19AF50000, v11, OS_LOG_TYPE_INFO, "%s Could not parse languageID, passing it through!", (uint8_t *)&v13, 0xCu);
      }
    }
    v10 = v4;
    goto LABEL_9;
  }
  v10 = v4;
LABEL_10:

  return v10;
}

void _AFPreferencesSetEnabledNonFullScreen(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable the New Siri appearance for iOS"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesEnabledNonFullScreen()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable the New Siri appearance for iOS"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetEnabledDragAndDrop(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Drag And Drop Feature for iOS"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesEnabledDragAndDrop()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Drag And Drop Feature for iOS"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetFeedbackBannerForNearMissesEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Feedback Banner for Near Misses"), CFSTR("com.apple.assistant.backedup"), 0);

}

uint64_t _AFBackedUpPreferencesBoolForKeyWithDefault(const __CFString *a1, uint64_t a2)
{
  void *v3;
  void *v4;

  _AFBackedUpPreferencesBoolValueForKey(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    a2 = objc_msgSend(v3, "BOOLValue");

  return a2;
}

id _AFBackedUpPreferencesBoolValueForKey(const __CFString *a1)
{
  void *v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  const __CFString *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant.backedup"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && (objc_opt_respondsToSelector() & 1) == 0)
  {
    v3 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "_AFBackedUpPreferencesBoolValueForKey";
      v7 = 2112;
      v8 = a1;
      v9 = 2112;
      v10 = v2;
      _os_log_error_impl(&dword_19AF50000, v3, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -BOOLValue, but found something else! Acting as-if no value was set. {key: %@, value: %@}", (uint8_t *)&v5, 0x20u);
    }

    v2 = 0;
  }
  return v2;
}

void _AFPreferencesSetFeedbackBannerForAcceptsEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Feedback Banner for Accepts"), CFSTR("com.apple.assistant.backedup"), 0);

}

void _AFPreferencesSetEnableSpeakerGradingDebugUI(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Speaker Grading Debug UI"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesEnableSpeakerGradingDebugUI()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Speaker Grading Debug UI"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetDeviceUnlockSignal(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Phone Unlocked Signal"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesDeviceUnlockSignalEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Phone Unlocked Signal"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetOverrideModeWhileInAmbient(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Override Mode When In Ambient"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesOverrideModeWhileInAmbient()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Override Mode When In Ambient"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetAlwaysInAmbient(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Always In Ambient"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesAlwaysInAmbient()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Always In Ambient"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetEnableSiriDebugUI(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Siri Debug UI"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesEnableSiriDebugUI()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Siri Debug UI"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

uint64_t _AFPreferencesIncludeProbePacketCaptureForABC()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Include Probe Packet Capture For ABC"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesDatabaseSyncingEnabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Database Syncing"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 0;

  return v1;
}

void _AFPreferencesSetDatabaseSyncingEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Database Syncing"), CFSTR("com.apple.assistant"), 0);

}

void _AFPreferencesSetLimitedPersistentAudioLogging(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Limited Audio Logging"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesLimitedPersistentAudioLogging()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Limited Audio Logging"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0 && (objc_opt_respondsToSelector() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 0;

  return v1;
}

void _AFPreferencesSetOpportuneSpeakingFileLoggingIsEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking File Logging Enabled"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesOpportuneSpeakingFileLoggingIsEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking File Logging Enabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetOpportuneSpeakingTimeout(double a1)
{
  id v1;

  *(float *)&a1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking Timeout"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesOpportuneSpeakingTimeout()
{
  void *v0;
  void *v1;
  float v2;
  double v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking Timeout"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 7.0;
  }

  return v3;
}

void _AFPreferencesSetOpportuneSpeakingPause(double a1)
{
  id v1;

  *(float *)&a1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking Pause"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesOpportuneSpeakingPause()
{
  void *v0;
  double v1;
  float v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking Pause"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 3.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v0, "floatValue");
    v1 = v2;
  }

  return v1;
}

void _AFPreferencesEnableBLECompanionConnections(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable BLE Companion Connections"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesBLECompanionConnectionsEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable BLE Companion Connections"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void AFPreferencesSetStreamingDictationEnabled(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Streaming Dictation Enabled"), CFSTR("com.apple.assistant"), 0);

  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Streaming Dictation Enabled"), CFSTR("com.apple.assistant"), 0);
  }
}

uint64_t AFPreferencesStreamingDictationEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  _AFPreferencesValueForKeyWithContext(CFSTR("Streaming Dictation Enabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

id AFPreferencesManualEndpointingThreshold()
{
  void *v0;

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  _AFPreferencesValueForKeyWithContext(CFSTR("Manual Endpointing Threshold"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
    v0 = &unk_1E3AAA9B8;
  return v0;
}

void AFPreferencesSetIgnoreServerManualEndpointingThreshold(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Ignore Server Manual Endpointing Threshold"), CFSTR("com.apple.assistant"), 0);

  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Ignore Server Manual Endpointing Threshold"), CFSTR("com.apple.assistant"), 0);
  }
}

uint64_t AFPreferencesIgnoreServerManualEndpointingThreshold()
{
  void *v0;
  uint64_t v1;

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  _AFPreferencesValueForKeyWithContext(CFSTR("Ignore Server Manual Endpointing Threshold"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t __Block_byref_object_copy__8870(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8871(uint64_t a1)
{

}

void _AFPreferencesSetSiriDesignModeEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("HI/CI Design Mode"), CFSTR("com.apple.assistant.support"), 0);

}

id VTPreferencesFunction()
{
  return (id)classVTPreferences;
}

id initVTPreferences()
{
  if (initVTPreferences_sOnce != -1)
    dispatch_once(&initVTPreferences_sOnce, &__block_literal_global_1508);
  return (id)classVTPreferences;
}

Class __initVTPreferences_block_invoke()
{
  Class result;

  if (!VoiceTriggerLibrary_frameworkLibrary)
  {
    VoiceTriggerLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger", 2);
    if (!VoiceTriggerLibrary_frameworkLibrary)
      __assert_rtn("VoiceTriggerLibrary", "AFPreferences.m", 74, "frameworkLibrary");
  }
  result = objc_getClass("VTPreferences");
  classVTPreferences = (uint64_t)result;
  if (!result)
    __assert_rtn("initVTPreferences_block_invoke", "AFPreferences.m", 75, "classVTPreferences");
  getVTPreferencesClass = VTPreferencesFunction;
  return result;
}

id _AFHashedBluetoothAddressForDiscoveryNotification(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(CFSTR("*^&9aM&A#^&Sn"), "dataUsingEncoding:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "uppercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  AFSecurityDigestChunksWithProvider(v4, 1u, v2, 1, &v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v10;
  if (v6)
  {
    v7 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "_AFHashedBluetoothAddressForDiscoveryNotification";
      v13 = 2112;
      v14 = v6;
      _os_log_error_impl(&dword_19AF50000, v7, OS_LOG_TYPE_ERROR, "%s Failed to generate hashed Bluetooth address due to error: %@", buf, 0x16u);
    }
    v8 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "hexStringFromData:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationHeadphonesEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Message Without Confirmation in Headphones"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetLongLivedIdentifierUploadingEnabled(uint64_t a1)
{
  void *v2;
  void *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v5;
  NSObject *v6;
  void *v7;
  int v8;
  const char *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    v5 = (void *)MEMORY[0x1E0CB37E8];
    v6 = v2;
    objc_msgSend(v5, "numberWithBool:", a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 136315394;
    v9 = "_AFPreferencesSetLongLivedIdentifierUploadingEnabled";
    v10 = 2112;
    v11 = v7;
    _os_log_debug_impl(&dword_19AF50000, v6, OS_LOG_TYPE_DEBUG, "%s #RPI Setting long-lived IDs uploading to %@", (uint8_t *)&v8, 0x16u);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v3, CFSTR("Long Lived Identifier Uploading"), CFSTR("com.apple.assistant"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesLongLivedIdentifierUploadingEnabled()
{
  int v0;
  int v1;
  void *v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  _BOOL4 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v0 = AFDeviceSupportsRemovalOfPersistentIDs();
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  v1 = AFIsInternalInstall_isInternal;
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "siriDataSharingOptInStatus");

  if (v1)
    v4 = 0;
  else
    v4 = v3 == 1;
  v5 = v4;
  v6 = +[AFFeatureFlags isPersistentIDLoggingInternalBuildRuleEnabled](AFFeatureFlags, "isPersistentIDLoggingInternalBuildRuleEnabled");
  v7 = _AFPreferencesValueForLongLivedIdentifierUploadingKey();
  v8 = +[AFFeatureFlags isPersistentIDLoggingInternalSettingEnabled](AFFeatureFlags, "isPersistentIDLoggingInternalSettingEnabled");
  v9 = v8;
  if (v1)
    v10 = v8;
  else
    v10 = 0;
  v11 = v10 & v7;
  if (v1)
    v12 = v3 == 1;
  else
    v12 = 0;
  v13 = v12;
  if (!v6)
    v11 = v13;
  v14 = v11 | v5;
  if (v0)
    v15 = v14;
  else
    v15 = 1;
  v16 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    v18 = 136316930;
    v19 = "_AFPreferencesLongLivedIdentifierUploadingEnabled";
    v20 = 1024;
    v21 = v15;
    v22 = 1024;
    v23 = v0;
    v24 = 1024;
    v25 = v1;
    v26 = 1024;
    v27 = v7;
    v28 = 1024;
    v29 = v3 == 1;
    v30 = 1024;
    v31 = v9;
    v32 = 1024;
    v33 = v6;
    _os_log_debug_impl(&dword_19AF50000, v16, OS_LOG_TYPE_DEBUG, "%s #RPI persistent ID logging=%u (rpiSupported=%u, internalInstall=%u, longLivedIDLoggingOptedIn=%u, siriDataSharingOptedIn=%u, internalSettingEnabled=%u, internalBuildRuleEnabled=%u)", (uint8_t *)&v18, 0x36u);
  }
  return v15;
}

uint64_t _AFPreferencesValueForLongLivedIdentifierUploadingKey()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Long Lived Identifier Uploading"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 1;

  return v1;
}

void _AFPreferencesSetSiriInCallEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Siri In Call"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesGetSiriInCallEnablementState()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Siri In Call"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    if (objc_msgSend(v0, "BOOLValue"))
      v2 = 2;
    else
      v2 = 1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t _AFPreferencesGetShowAppsBehindSiriInCarPlayEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Show Apps Behind Siri in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationInCarPlayEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Message Without Confirmation in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesGetMessageWithoutConfirmationEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Message Without Confirmation"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsOnHearingAidsSupported()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications On Hearing Aids Supported"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetSpokenNotificationSkipTriggerlessReplyConfirmation(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Spoken Notification Skip Triggerless Reply Confirmation"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesRemoveThreadCancellationForApp(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v8;

  v8 = a1;
  v3 = a2;
  _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v4);
  if (objc_msgSend(v8, "length") && objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v8, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeObjectForKey:", v6);

  }
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Announce Notifications Thread Cancellation History"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

id _AFPreferencesLastAnnouncementThreadCancellationDicationary()
{
  void *v0;
  id v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications Thread Cancellation History"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = v0;

  return v1;
}

void _AFPreferencesInsertThreadCancellationForApp(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v9;

  v9 = a1;
  v3 = a2;
  _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v4);
  if (objc_msgSend(v9, "length") && objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v9, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKey:", v7, v6);

  }
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Announce Notifications Thread Cancellation History"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

BOOL _AFPreferencesLastAnnouncementInThreadWasCancelled(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  _BOOL8 v9;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
  {
    _AFPreferencesLastAnnouncementThreadCancellationDicationary();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v3, v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v7, "timeIntervalSinceNow");
        v9 = _AFPreferencesAnnounceNotificationThreadCancellationStaleThreshold() > -v8;
      }
      else
      {
        v9 = 0;
      }

    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

double _AFPreferencesAnnounceNotificationThreadCancellationStaleThreshold()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications Thread Cancellation State Threshold"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 604800.0;
  }

  return v3;
}

id _AFPreferencesCloudSyncEnabledModificationDate()
{
  void *v0;
  id v1;
  void *v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Cloud Sync Enabled Modification Date"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v1 = v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
    v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  v2 = v1;

  return v2;
}

void _AFPreferencesEnableCloudSync(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Cloud Sync Enabled"), CFSTR("com.apple.assistant.backedup"), 0);

}

void _AFPreferencesSetSiriResponseShouldAlwaysPrintOverride(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Always Print Siri Response Override"), CFSTR("com.apple.assistant.backedup"), 0);

}

void _AFPreferencesSetSuppressDictationOptIn(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Suppress Dictation Opt In"), CFSTR("com.apple.assistant.support"), 0);

}

unint64_t _AFPreferencesSearchQueriesDataSharingStatusWithContext(void *a1)
{
  void *v1;
  unint64_t v2;
  void *v3;
  NSObject *v4;
  __CFString *v5;
  __CFString *v6;
  int v8;
  const char *v9;
  __int16 v10;
  __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  _AFPreferencesValueForKeyWithContext(CFSTR("Search Queries Data Sharing Status"), CFSTR("com.apple.assistant.support"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = objc_msgSend(v1, "integerValue");
  else
    v2 = 0;
  v3 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v4 = v3;
    if (v2 > 2)
      v5 = CFSTR("(unknown)");
    else
      v5 = off_1E3A33DD0[v2];
    v6 = v5;
    v8 = 136315395;
    v9 = "_AFPreferencesSearchQueriesDataSharingStatusWithContext";
    v10 = 2113;
    v11 = v6;
    _os_log_impl(&dword_19AF50000, v4, OS_LOG_TYPE_INFO, "%s Search Queries Data Sharing status: %{private}@", (uint8_t *)&v8, 0x16u);

  }
  return v2;
}

uint64_t _AFPreferencesForceOnDeviceOnlyDictationEnabled()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isOnDeviceOnlyDictationForced");

  v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "_AFPreferencesForceOnDeviceOnlyDictationEnabled";
    v6 = 1024;
    v7 = v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s HIPAA On-Device Dictation MDM flag is %d", (uint8_t *)&v4, 0x12u);
  }
  return v1;
}

uint64_t AFInternalPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

void _AFPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
  _AFPreferencesSetValueForKeyWithContext(a1, a2, CFSTR("com.apple.assistant"), 0);
}

id _AFPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant"), 0);
}

uint64_t AFBackedUpPreferencesSynchronize()
{
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
}

void _AFBackedUpPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
  _AFPreferencesSetValueForKeyWithContext(a1, a2, CFSTR("com.apple.assistant.backedup"), 0);
}

id _AFBackedUpPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant.backedup"), 0);
}

void _AFBackedUpPreferencesSetValueForKeyWithContext(void *a1, const __CFString *a2, void *a3)
{
  _AFPreferencesSetValueForKeyWithContext(a1, a2, CFSTR("com.apple.assistant.backedup"), a3);
}

id _AFBackedUpPreferencesValueForKeyWithContext(const __CFString *a1, void *a2)
{
  return _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant.backedup"), a2);
}

double _AFPreferencesDoubleForKeyWithDefault(const __CFString *a1, double a2)
{
  void *v4;
  double v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  double v11;
  __int16 v12;
  const __CFString *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant"), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "doubleValue");
    a2 = v5;
  }
  else
  {
    v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315906;
      v9 = "_AFPreferencesDoubleForKeyWithDefault";
      v10 = 2048;
      v11 = a2;
      v12 = 2112;
      v13 = a1;
      v14 = 2112;
      v15 = v4;
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Expected a value responding to -doubleValue, but found something else. Returning %f. {key: %@, value: %@}", (uint8_t *)&v8, 0x2Au);
    }
  }

  return a2;
}

CFArrayRef _AFBackedUpPreferencesKeyList()
{
  return CFPreferencesCopyKeyList(CFSTR("com.apple.assistant.backedup"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

BOOL AFNavigationStateIsNavigating(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

void _AFSupportPreferencesSetValueForKey(void *a1, const __CFString *a2)
{
  _AFPreferencesSetValueForKeyWithContext(a1, a2, CFSTR("com.apple.assistant.support"), 0);
}

id _AFSupportPreferencesValueForKey(const __CFString *a1)
{
  return _AFPreferencesValueForKeyWithContext(a1, CFSTR("com.apple.assistant.support"), 0);
}

uint64_t AFPreferencesAssistantEnabled()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Assistant Enabled"), 0);
}

BOOL AFPreferencesTestAccessEnabled()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("ADTestAccess"), CFSTR("com.apple.assistant.support"), 0) != 0;
}

uint64_t AFPreferencesSupplementalLanguagesModificationDate()
{
  return 0;
}

uint64_t AFPreferencesHorsemanSupplementalLanguageDictionary()
{
  return 0;
}

uint64_t AFPreferencesSupplementalLanguages()
{
  return 0;
}

id AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion(void *a1)
{
  id v1;
  NSObject *v2;
  double v3;
  double v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  uint64_t i;
  uint64_t j;
  _BYTE v11[32];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
    *(_WORD *)&v11[12] = 2112;
    *(_QWORD *)&v11[14] = v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s version=%@", v11, 0x16u);
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
      *(_WORD *)&v11[12] = 2112;
      *(_QWORD *)&v11[14] = v1;
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Expected a double value for version number, but found something else. Returning an empty list. version=%@", v11, 0x16u);
    }
    goto LABEL_9;
  }
  objc_msgSend(v1, "doubleValue");
  v4 = v3;
  if (v3 < 15.2)
  {
    v5 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v11 = 136315394;
      *(_QWORD *)&v11[4] = "_AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion";
      *(_WORD *)&v11[12] = 2048;
      *(double *)&v11[14] = v4;
      _os_log_impl(&dword_19AF50000, v5, OS_LOG_TYPE_INFO, "%s Version number is smaller than 15.2. Returning an empty list. versionNum=%f", v11, 0x16u);
    }
LABEL_9:
    v7 = (id)MEMORY[0x1E0C9AA60];
    goto LABEL_15;
  }
  *(_OWORD *)v11 = xmmword_1E3A2ED18;
  *(_OWORD *)&v11[16] = unk_1E3A2ED28;
  v12 = xmmword_1E3A2ED38;
  v13 = unk_1E3A2ED48;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  for (i = 0; i != 64; i += 16)
  {
    if (*(double *)&v11[i] > v4)
      break;
    objc_msgSend(v7, "addObjectsFromArray:", *(_QWORD *)&v11[i + 8]);
  }
  for (j = 56; j != -8; j -= 16)

LABEL_15:
  return v7;
}

void sub_19AFC00A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t i;

  for (i = 56; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t AFHasRMVCapableAppleTV()
{
  return 0;
}

id AFPreferencesSupportedLanguagesForStorefrontIdentifier(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (+[AFFeatureFlags isTVPolyglotEnabled](AFFeatureFlags, "isTVPolyglotEnabled"))
  {
    _AFPreferencesBuiltInLanguages();
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (AFPreferencesSupportedLanguagesForStorefrontIdentifier_onceToken != -1)
      dispatch_once(&AFPreferencesSupportedLanguagesForStorefrontIdentifier_onceToken, &__block_literal_global_377);
    _AFPreferencesBuiltInLanguages();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)AFPreferencesSupportedLanguagesForStorefrontIdentifier_sStaticStorefrontMapping, "objectForKey:", v1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v27 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          objc_msgSend(v10, "_afpreferences_languageCodePrefix");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "objectForKey:", v11);
          v12 = (id)objc_claimAutoreleasedReturnValue();
          if (!v12)
            v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          objc_msgSend(v12, "addObject:", v10);
          objc_msgSend(v4, "setObject:forKey:", v12, v11);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v7);
    }

    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v13 = v21;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v23;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v23 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * j);
          if (objc_msgSend(v18, "_afpreferences_isLanguageCodePrefix"))
          {
            objc_msgSend(v4, "objectForKey:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "addObjectsFromArray:", v19);

          }
          else
          {
            objc_msgSend(v2, "addObject:", v18);
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      }
      while (v15);
    }

  }
  return v2;
}

void *_AFPreferencesMultiSiriLanguageScenarios()
{
  return &unk_1E3AA9AF8;
}

id _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (v1)
  {
    if (_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_onceToken != -1)
      dispatch_once(&_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_onceToken, &__block_literal_global_533);
    objc_msgSend((id)_AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode_sAlternativeLocalRecognizerLocaleOverrideMap, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id AFPreferencesSupportedLanguagesForRemote(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  if (AFPreferencesSupportedLanguagesForRemote_onceToken != -1)
    dispatch_once(&AFPreferencesSupportedLanguagesForRemote_onceToken, &__block_literal_global_541);
  if (v3)
    v5 = v3;
  else
    v5 = CFSTR("iPhone OS");
  v6 = AFWatchOSVersion(v5, v4);
  if ((_DWORD)v6 == -1)
    goto LABEL_17;
  v7 = v6;
  if (!AFWatchOSVersionIsGreaterThanOrEqual(v6, 131584))
  {
    if (AFWatchOSVersionIsGreaterThanOrEqual(v7, 131328))
    {
      v9 = CFSTR("fi-FI");
    }
    else if (AFWatchOSVersionIsGreaterThanOrEqual(v7, 0x20000))
    {
      v9 = CFSTR("ar-SA");
    }
    else
    {
      if (!AFWatchOSVersionIsGreaterThanOrEqual(v7, 65537))
        goto LABEL_17;
      v9 = CFSTR("nb-NO");
    }
    _AFSupportedLanguagesToLanguage(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v10, "copy");

    if (v8)
      goto LABEL_18;
LABEL_17:
    _AFSupportedLanguagesToLanguage(CFSTR("pt-BR"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v11, "copy");

    goto LABEL_18;
  }
  _AFPreferencesBuiltInLanguages();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
    goto LABEL_17;
LABEL_18:

  return v8;
}

id _AFSupportedLanguagesToLanguage(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    _AFPreferencesBuiltInLanguages();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "indexOfObject:", v1);

    v4 = 0;
    if (v3 && v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v2, "subarrayWithRange:", 0, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id AFPreferencesSupportedDictationLanguagesSet()
{
  if (AFPreferencesSupportedDictationLanguagesSet_onceToken != -1)
    dispatch_once(&AFPreferencesSupportedDictationLanguagesSet_onceToken, &__block_literal_global_548);
  return (id)AFPreferencesSupportedDictationLanguagesSet_stAllLanguagesSet;
}

uint64_t AFPreferencesLanguageIsSupportedForDeviceSettings(void *a1)
{
  id v1;
  uint64_t IsSupported;

  v1 = a1;
  IsSupported = AFPreferencesLanguageIsSupported(v1);

  return IsSupported;
}

uint64_t AFPreferencesLanguageIsExplicitlySupportedForDictation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  AFPreferencesSupportedDictationLanguages();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsObject:", v2);

  return v4;
}

uint64_t AFPreferencesShouldIgnoreInternalConfig()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Ignore Internal Config"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void AFPreferencesSetShouldIgnoreInternalConfig(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Ignore Internal Config"), CFSTR("com.apple.assistant"), 0);

  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Ignore Internal Config"), CFSTR("com.apple.assistant"), 0);
  }
}

uint64_t AFPreferencesAlwaysEyesFreeEnabled()
{
  void *v0;
  uint64_t v1;

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  _AFPreferencesValueForKeyWithContext(CFSTR("Always Eyes Free"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void AFPreferencesSetAlwaysEyesFreeEnabled(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Always Eyes Free"), CFSTR("com.apple.assistant"), 0);

  }
  else
  {
    _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Always Eyes Free"), CFSTR("com.apple.assistant"), 0);
  }
}

void AFPreferencesSetManualEndpointingThreshold(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Manual Endpointing Threshold"), CFSTR("com.apple.assistant"), 0);
}

double AFPreferencesATVStopRecordingDelay()
{
  void *v0;
  void *v1;
  double v2;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.internal.ck"));
  objc_msgSend(v0, "objectForKey:", CFSTR("ATVStopRecordingDelay"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v2 = 0.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = (double)objc_msgSend(v1, "unsignedIntValue") / 1000.0;

  return v2;
}

uint64_t AFPreferencesSimulateImmediateSpeechCapture()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Simulate Immediate Speech Capture"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

double AFPreferencesBufferedSpeechCapturePacketInterval()
{
  void *v0;
  double v1;
  double v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Buffered Speech Capture Packet Interval"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "doubleValue");
  v2 = v1;

  return v2;
}

id AFPreferencesDefaultsDeleteTypeToSiriSetting()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.siri.textinput"));
  objc_msgSend(v0, "objectForKey:", CFSTR("SiriUITextInputEnabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_msgSend(v0, "setValue:forKey:", 0, CFSTR("SiriUITextInputEnabled"));
    objc_msgSend(v0, "synchronize");
  }

  return v1;
}

void AFPreferencesSetTypeToSiriEnabled(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const __CFString *v12;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v2, CFSTR("Type To Siri Enabled"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = CFSTR("Type To Siri Enabled");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "logEventWithType:context:", 3205, v5);

  v6 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v7 = CFSTR("disabled");
    if ((_DWORD)a1)
      v7 = CFSTR("enabled");
    v9 = 136315394;
    v10 = "AFPreferencesSetTypeToSiriEnabled";
    v11 = 2112;
    v12 = v7;
    _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s #preferences Setting Type To Siri %@", (uint8_t *)&v9, 0x16u);
  }
  _AFPreferencesSetSiriResponseShouldAlwaysPrintOverride(a1);
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "synchronize");

}

uint64_t AFPreferencesHoldToTalkForTypeToSiriEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.siri.textinput"));
  objc_msgSend(v0, "objectForKey:", CFSTR("SiriUITextInputHTTEnabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void AFPreferencesSetHoldToTalkForTypeToSiriEnabled(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.siri.textinput"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v2, CFSTR("SiriUITextInputHTTEnabled"));

}

CFPropertyListRef AFPreferencesLanguageCodeForUser(void *a1)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = a1;
  if (v1)
    v2 = v1;
  else
    v2 = (const __CFString *)*MEMORY[0x1E0C9B260];
  CFPreferencesSynchronize(CFSTR("com.apple.assistant.backedup"), v2, (CFStringRef)*MEMORY[0x1E0C9B250]);
  return (id)CFPreferencesCopyValue(CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), v2, (CFStringRef)*MEMORY[0x1E0C9B230]);
}

id _AFPreferencesLanguageCodeWithContext(void *a1)
{
  return _AFPreferencesValueForKeyWithContext(CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), a1);
}

id _AFPreferencesLanguageCode()
{
  return _AFPreferencesValueForKeyWithContext(CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), 0);
}

void _AFPreferencesSetLanguageCodeWithContext(void *a1, void *a2)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), a2);
}

void _AFPreferencesSetLanguageCode(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Session Language"), CFSTR("com.apple.assistant.backedup"), 0);
}

uint64_t _AFPreferencesShowAllDialogVariantsEnabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Show All Dialog Variants"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetShowAllDialogVariantsEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Show All Dialog Variants"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesForceRTL()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("SessionLanguageUIForceRTL"), 0);
}

void _AFPreferencesSetForceRTL(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("SessionLanguageUIForceRTL"), CFSTR("com.apple.assistant.backedup"), 0);

}

id _AFPreferencesCloudUserID()
{
  void *v0;
  id v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Cloud Sync User ID"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = v0;

  return v1;
}

void _AFPreferencesSetCloudUserID(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Cloud Sync User ID"), CFSTR("com.apple.assistant.backedup"), 0);
}

uint64_t _AFPreferencesCloudSyncEnabled()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Cloud Sync Enabled"), 1);
}

void _AFPreferencesSetCloudSyncEnabledModificationDate(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Cloud Sync Enabled Modification Date"), CFSTR("com.apple.assistant.backedup"), 0);
}

uint64_t AFPreferencesStartAlertEnabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("StartAlertEnabled"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = _AFPreferencesBoolFromValueWithDefault(v0, (uint64_t)CFSTR("StartAlertEnabled"), 0);

  return v1;
}

void AFPreferencesSetStartAlertEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("StartAlertEnabled"), CFSTR("com.apple.assistant.backedup"), 0);

}

uint64_t _AFPreferencesShouldUseTFO()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable TFO"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetTFO(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable TFO"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesGetTuscanyStatus()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Disable Tuscany"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesDisableTuscany(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Disable Tuscany"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesGetEnableServerDebugFlags()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Server Debug Flags"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesEnableServerDebugFlags(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Server Debug Flags"), CFSTR("com.apple.assistant"), 0);

}

void _AFPreferencesSetNonManateeIdentity(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Non Manatee Identity"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesGetNonManateeIdentity()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Non Manatee Identity"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t _AFPreferencesSiriPersonalizedASRDisabled()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  if (+[AFFeatureFlags isSiriXEnabled](AFFeatureFlags, "isSiriXEnabled"))
    return 1;
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1)
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_475);
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier != 1)
    return 1;
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.internal.ck"));
  objc_msgSend(v0, "objectForKey:", CFSTR("SiriPersonalizedASRDisabled"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v2 = (objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v1, "integerValue") != 0;

  return v2;
}

uint64_t _AFPreferencesSyncFromWatchEnabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Sync Directly From Watch"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

AFVoiceInfo *_AFPreferencesOutputVoice()
{
  return _AFPreferencesOutputVoiceWithContext(0);
}

void _AFPreferencesSetOutputVoiceWithContext(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_msgSend(a1, "dictionaryRepresentation");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v4, CFSTR("Output Voice"), CFSTR("com.apple.assistant.backedup"), v3);

}

void _AFPreferencesSetOutputVoice(void *a1)
{
  _AFPreferencesSetOutputVoiceWithContext(a1, 0);
}

id _AFPreferencesMirroredTCCInfo()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("SiriKit Enabled List"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_7;
  v1 = v0;
  objc_msgSend(v1, "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

LABEL_7:
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
  }
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v1);

  if (!v3)
    goto LABEL_7;
LABEL_8:

  return v3;
}

void _AFPreferencesSetMirroredTCCInfo(void *a1)
{
  id v1;

  objc_msgSend(a1, "allObjects");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("SiriKit Enabled List"), CFSTR("com.apple.assistant.backedup"), 0);

}

id _AFPreferencesNetworkStackOverride()
{
  void *v0;
  id v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Network Stack Override"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v1 = v0;
  else
    v1 = 0;

  return v1;
}

uint64_t _AFPreferencesFeedbackBannerForAcceptsEnabled()
{
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (AFIsInternalInstall_isInternal)
    return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Enable Feedback Banner for Accepts"), 1);
  else
    return 0;
}

uint64_t _AFPreferencesFeedbackBannerForNearMissesEnabled()
{
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (AFIsInternalInstall_isInternal)
    return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Enable Feedback Banner for Near Misses"), 1);
  else
    return 0;
}

uint64_t _AFPreferencesCompanionMessagingEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Enable Companion Messaging"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetCompanionMessagingEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Enable Companion Messaging"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesForceSpeexAudioRecording()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Force Speex Audio Recording"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetForceSpeexAudioRecording(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Force Speex Audio Recording"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesForceUncompressedAudioRecording()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Force Uncompressed Audio Recording"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetForceUncompressedAudioRecording(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Force Uncompressed Audio Recording"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesAcousticIDAutoEndpoint()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Acoustic ID Auto Endpoint"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetAcousticIDAutoEndpoint(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Acoustic ID Auto Endpoint"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesVibrateWithAlert()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Vibrate with Siri Alert"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetVibrateWithAlert(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Vibrate with Siri Alert"), CFSTR("com.apple.assistant"), 0);

}

void _AFPreferencesSetKeepRecorededAudioFiles(uint64_t a1)
{
  const void *v1;

  v1 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  CFPreferencesSetValue(CFSTR("Keep Recorded Audio Files"), v1, CFSTR("com.apple.assistant"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B250]);
}

id _AFPreferencesSessionShutdownDelayOverride()
{
  return _AFPreferencesValueForKeyWithContext(CFSTR("SessionShutdownDelayOverride"), CFSTR("com.apple.assistant"), 0);
}

uint64_t _AFPreferencesSetSessionShutdownDelayOverride(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("SessionShutdownDelayOverride"), CFSTR("com.apple.assistant"), 0);
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

float _AFPreferencesVibrationIntensity()
{
  void *v0;
  float v1;
  float v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Beep Vibration Intensity"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "floatValue");
  v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationIntensity()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Beep Vibration Intensity"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesVibrationGap()
{
  void *v0;
  double v1;
  double v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Beep InterVibration Gap"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "doubleValue");
  v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationGap()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Beep InterVibration Gap"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesVibrationDuration()
{
  void *v0;
  double v1;
  double v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Beep Vibration Duration"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "doubleValue");
  v2 = v1;

  return v2;
}

void _AFPreferencesSetVibrationDuration()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Beep Vibration Duration"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesVibrationCount()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Number of Vibrations per Beep"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "integerValue");

  return v1;
}

void _AFPreferencesSetVibrationCount(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Number of Vibrations per Beep"), CFSTR("com.apple.assistant"), 0);

}

id _AFPreferencesCountryCode()
{
  return _AFPreferencesValueForKeyWithContext(CFSTR("Country Code"), CFSTR("com.apple.assistant"), 0);
}

void _AFPreferencesSetCountryCode(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Country Code"), CFSTR("com.apple.assistant"), 0);
}

id AFPreferencesBorealisEducationHeaderDisplayCount()
{
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  return _AFPreferencesValueForKeyWithContext(CFSTR("Borealis Education Header Display Count"), CFSTR("com.apple.assistant"), 0);
}

void AFPreferencesSetBorealisEducationHeaderDisplayCount(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Borealis Education Header Display Count"), CFSTR("com.apple.assistant"), 0);
}

id _AFPreferencesLowerWristEducationHeaderDisplayCount()
{
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  return _AFPreferencesValueForKeyWithContext(CFSTR("Lower Wrist Education Message Display Count"), CFSTR("com.apple.assistant"), 0);
}

void _AFPreferencesSetLowerWristEducationHeaderDisplayCount(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Lower Wrist Education Message Display Count"), CFSTR("com.apple.assistant"), 0);
}

double AFPreferencesSiriTaskResponseTimeout()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 10.0;
  _AFPreferencesValueForKeyWithContext(CFSTR("AFSiriTaskResponseTimeout"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 10.0;
  }

  return v3;
}

double AFPreferencesSiriTaskBackgroundAssertionTimeout()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 5.0;
  _AFPreferencesValueForKeyWithContext(CFSTR("AFSiriTaskBackgroundAssertionTimeout"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 5.0;
  }

  return v3;
}

double _AFPreferencesGetClientCommandDeliveryDelay()
{
  void *v0;
  double v1;
  double v2;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0.0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Client Command Delivery Delay"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v0, "doubleValue");
    v1 = fmax(v2, 0.0);
  }

  return v1;
}

uint64_t _AFPreferencesGetForcedInterstitialStyle()
{
  void *v0;
  uint64_t v1;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Forced Interstitial Style"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = AFInterstitialStyleGetFromName(v0);

  return v1;
}

uint64_t _AFPreferencesGetInterstitialDisplayDisabledBeforeSpeechRecognition()
{
  void *v0;
  uint64_t v1;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Interstitial Display Disabled Before Speech Recognition"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 0;

  return v1;
}

double _AFPreferencesGetInitialInterstitialDelay(uint64_t a1)
{
  void *v1;
  __CFString *v2;
  const __CFString *v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;

  if ((unint64_t)(a1 - 1) > 7)
  {
    v4 = 0;
  }
  else
  {
    v1 = (void *)MEMORY[0x1E0CB3940];
    v2 = off_1E3A35028[a1];
    v3 = (const __CFString *)objc_msgSend(v1, "stringWithFormat:", CFSTR("%@ - %@"), CFSTR("Initial Interstitial Delay"), v2);

    _AFPreferencesValueForKeyWithContext(v3, CFSTR("com.apple.assistant"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    _AFPreferencesValueForKeyWithContext(CFSTR("Initial Interstitial Delay"), CFSTR("com.apple.assistant"), 0);
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  objc_opt_class();
  v6 = 0.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "doubleValue");
    v6 = v7;
  }

  return v6;
}

void _AFPreferencesSetInitialInterstitialDelay(uint64_t a1, double a2)
{
  const __CFString *v3;
  void *v4;
  __CFString *v5;
  id v6;

  v3 = CFSTR("Initial Interstitial Delay");
  if ((unint64_t)(a1 - 1) <= 7)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    v5 = off_1E3A35028[a1];
    v3 = (const __CFString *)objc_msgSend(v4, "stringWithFormat:", CFSTR("%@ - %@"), CFSTR("Initial Interstitial Delay"), v5);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v6, v3, CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesGetInitialInterstitialDelayForVoiceTriggerOneShotWithoutAudioDucking()
{
  void *v0;
  double v1;
  double v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Initial Interstitial Delay for VoiceTrigger One-Shot without Audio Ducking"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0.0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v0, "doubleValue");
    v1 = v2;
  }

  return v1;
}

void _AFPreferencesSetInitialInterstitialDelayForVoiceTriggerOneShotWithoutAudioDucking()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Initial Interstitial Delay for VoiceTrigger One-Shot without Audio Ducking"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesMTEOptOutOverrideEnabled()
{
  void *v0;
  uint64_t v1;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  _AFPreferencesValueForKeyWithContext(CFSTR("Enable MTE Opt Out Override"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = objc_msgSend(v0, "BOOLValue");
  else
    v1 = 0;

  return v1;
}

BOOL AFPreferencesDictationAllowed()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (!CFPreferencesAppValueIsForced(CFSTR("Ironwood Allowed"), CFSTR("com.apple.ironwood.support")))
    return 1;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("Ironwood Allowed"), CFSTR("com.apple.ironwood.support"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

BOOL AFPreferencesAssistantAllowed()
{
  int v0;
  int v1;
  _BOOL8 result;
  int AppBooleanValue;
  BOOL v4;
  Boolean v5;
  Boolean keyExistsAndHasValidFormat;

  if (!CFPreferencesAppValueIsForced(CFSTR("Assistant Allowed"), CFSTR("com.apple.ironwood.support"))
    || (keyExistsAndHasValidFormat = 0,
        v0 = CFPreferencesGetAppBooleanValue(CFSTR("Assistant Allowed"), CFSTR("com.apple.ironwood.support"), &keyExistsAndHasValidFormat), !keyExistsAndHasValidFormat)|| (v1 = v0, result = 0, v1))
  {
    if (CFPreferencesAppValueIsForced(CFSTR("allowAssistant"), CFSTR("com.apple.applicationaccess")))
    {
      v5 = 0;
      AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("allowAssistant"), CFSTR("com.apple.applicationaccess"), &v5);
      if (v5)
        v4 = AppBooleanValue == 0;
      else
        v4 = 0;
      return !v4;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AFPreferencesProfanityFilterForced()
{
  uint64_t result;
  int AppBooleanValue;
  BOOL v2;
  Boolean keyExistsAndHasValidFormat;

  result = CFPreferencesAppValueIsForced(CFSTR("forceAssistantProfanityFilter"), CFSTR("com.apple.applicationaccess"));
  if ((_DWORD)result)
  {
    keyExistsAndHasValidFormat = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("forceAssistantProfanityFilter"), CFSTR("com.apple.applicationaccess"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      v2 = AppBooleanValue == 0;
    else
      v2 = 0;
    return !v2;
  }
  return result;
}

BOOL AFPreferencesUserGeneratedContentAllowed()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (!CFPreferencesAppValueIsForced(CFSTR("allowAssistantUserGeneratedContent"), CFSTR("com.apple.applicationaccess")))
    return 1;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("allowAssistantUserGeneratedContent"), CFSTR("com.apple.applicationaccess"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

void _AFPreferencesSetShouldCensorSpeechInternal(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Censor Speech"), CFSTR("com.apple.assistant.backedup"), 0);

}

uint64_t _AFPreferencesShouldCensorSpeechInternal()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Censor Speech"), 0);
}

BOOL _AFPreferencesClearShouldCensorSpeechInternal()
{
  void *v0;

  _AFPreferencesValueForKeyWithContext(CFSTR("Censor Speech"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();

  if (v0)
    _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Censor Speech"), CFSTR("com.apple.assistant.backedup"), 0);
  return v0 != 0;
}

void _AFPreferencesSetNotificationPreviewRestrictedApps(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Notification Preview Restricted Apps"), CFSTR("com.apple.assistant.backedup"), 0);
}

id _AFPreferencesNotificationPreviewRestrictedApps()
{
  void *v0;
  id v1;
  id v2;
  void *v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Notification Preview Restricted Apps"), CFSTR("com.apple.assistant.backedup"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = v0;
    objc_msgSend(v2, "firstObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      v1 = 0;
    else
      v1 = v2;

  }
  return v1;
}

uint64_t _AFPreferencesLastPushedCensorSpeechSetting()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Last Pushed Censor Speech"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t _AFPreferencesSetLastPushedCensorSpeechSetting(uint64_t a1)
{
  uint64_t result;
  void *v3;

  result = _AFPreferencesLastPushedCensorSpeechSetting();
  if ((_DWORD)result != (_DWORD)a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v3, CFSTR("Last Pushed Censor Speech"), CFSTR("com.apple.assistant"), 0);

    return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  }
  return result;
}

uint64_t _AFPreferencesIsSiriServerLoggingEnabled()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isSiriServerLoggingAllowed");

  return v1;
}

uint64_t _AFPreferencesSiriXNLAssetOverride()
{
  uint64_t result;

  result = AFDeviceSupportsSiriUOD();
  if ((_DWORD)result)
    return _AFPreferencesBoolValueForKeyWithContext(CFSTR("Override Missing SiriX NL Assets"), 0, CFSTR("com.apple.assistant"), 0);
  return result;
}

const __CFString *_AFPreferencesSiriDataSharingOptInStatusKey()
{
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled](AFFeatureFlags, "isSiriDataSharingRepromptEnabled"))
  {
    return CFSTR("Siri Data Sharing Opt-In Status 2.0");
  }
  else
  {
    return CFSTR("Siri Data Sharing Opt-In Status");
  }
}

void _AFPreferencesSetSiriDataSharingOptInStatusWithContext(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v20;
  int v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    v21 = 136315138;
    v22 = "_AFPreferencesSetSiriDataSharingOptInStatusWithContext";
    _os_log_debug_impl(&dword_19AF50000, v9, OS_LOG_TYPE_DEBUG, "%s ", (uint8_t *)&v21, 0xCu);
  }
  v10 = _AFPreferencesSiriDataSharingOptInStatusWithContext(v8);
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "appendToSiriDataSharingOptInStatusHistory:previousOptInStatus:statusChangeSource:reason:", a1, v10, a2, v7);

  AFGradingOptInStateChangeWithNewOptInStatus(a1, v10, a2, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D978A0], "sharedStream");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "emitMessage:", v12);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled](AFFeatureFlags, "isSiriDataSharingRepromptEnabled"))
  {
    v15 = CFSTR("Siri Data Sharing Opt-In Status 2.0");
  }
  else
  {
    v15 = CFSTR("Siri Data Sharing Opt-In Status");
  }
  _AFPreferencesSetValueForKeyWithContext(v14, v15, CFSTR("com.apple.assistant.support"), v8);

  v16 = +[AFFeatureFlags isSiriDataSharingRepromptEnabled](AFFeatureFlags, "isSiriDataSharingRepromptEnabled");
  if (a1 == 2 && v16)
  {
    v17 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      v21 = 136315138;
      v22 = "_AFPreferencesSetSiriDataSharingOptInStatusWithContext";
      _os_log_impl(&dword_19AF50000, v17, OS_LOG_TYPE_INFO, "%s Reprompt feature flag enabled and new status is opted out. Updating legacy value.", (uint8_t *)&v21, 0xCu);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v18, CFSTR("Siri Data Sharing Opt-In Status"), CFSTR("com.apple.assistant.support"), v8);

  }
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
  v20 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v20, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

id AFGradingOptInStateChangeWithNewOptInStatus(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  objc_class *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;

  v7 = (objc_class *)MEMORY[0x1E0D9A430];
  v8 = a4;
  v9 = objc_alloc_init(v7);
  v10 = v9;
  if ((unint64_t)(a2 - 1) < 3)
    v11 = a2;
  else
    v11 = 0;
  objc_msgSend(v9, "setPrevOptInState:", v11);
  if ((unint64_t)(a1 - 1) < 3)
    v12 = a1;
  else
    v12 = 0;
  objc_msgSend(v10, "setNewOptInState:", v12);
  if (a3 < 0xC)
    v13 = (a3 + 1);
  else
    v13 = 0;
  objc_msgSend(v10, "setSource:", v13);
  objc_msgSend(v10, "setReason:", v8);

  v14 = (void *)MGCopyAnswer();
  objc_msgSend(v10, "setSystemBuild:", v14);

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "timeIntervalSince1970");
  objc_msgSend(v10, "setEpochEventTimestampInSeconds:", (unint64_t)v16);

  return v10;
}

void _AFPreferencesSetSiriDataSharingOptInStatus(uint64_t a1, unint64_t a2, void *a3)
{
  _AFPreferencesSetSiriDataSharingOptInStatusWithContext(a1, a2, a3, 0);
}

uint64_t _AFPreferencesSiriDataSharingOptInStatus()
{
  return _AFPreferencesSiriDataSharingOptInStatusWithContext(0);
}

uint64_t _AFPreferencesSiriDataSharingLegacyOptInStatusWithContext(void *a1)
{
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Siri Data Sharing Opt-In Status"), CFSTR("com.apple.assistant.support"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = objc_msgSend(v1, "integerValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Siri Data Sharing Home Accessory Migrated"), CFSTR("com.apple.assistant.support"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
}

uint64_t _AFPreferencesSiriDataSharingHomeAccessoryMigrated()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Siri Data Sharing Home Accessory Migrated"), 0);
}

void _AFPreferencesSetPhoneOptedOut2021()
{
  void *v0;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Siri Data Sharing Phone Has Been Opted Out"), CFSTR("com.apple.assistant.support"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesGetPhoneOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Siri Data Sharing Phone Has Been Opted Out"), 0);
}

void _AFPreferencesSetWatchOptedOut2021()
{
  void *v0;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Siri Data Sharing Watch Has Been Opted Out"), CFSTR("com.apple.assistant.support"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesGetWatchOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Siri Data Sharing Watch Has Been Opted Out"), 0);
}

uint64_t _AFPreferencesSiriDataSharingHomePodSetupDeviceIsValidWithContext(void *a1)
{
  return _AFPreferencesBoolValueForKeyWithContext(CFSTR("Siri Data Sharing HomePod Setup Device Is Valid"), 0, CFSTR("com.apple.assistant.support"), a1);
}

uint64_t _AFPreferencesSetSiriDataSharingHomePodSetupDeviceIsValidWithContext(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithBool:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Siri Data Sharing HomePod Setup Device Is Valid"), CFSTR("com.apple.assistant.support"), v4);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
}

uint64_t _AFPreferencesIsHomePodInHH2Mode()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("HomePod Is In HH2 Mode"), 0);
}

uint64_t _AFPreferencesSetIsHomePodInHH2Mode(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("HomePod Is In HH2 Mode"), CFSTR("com.apple.assistant.support"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
}

void _AFPreferencesSetTVOptedOut2021()
{
  void *v0;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Siri Data Sharing TV Has Been Opted Out"), CFSTR("com.apple.assistant.support"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesGetTVOptedOut2021()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Siri Data Sharing TV Has Been Opted Out"), 0);
}

BOOL _AFPreferencesHomePodPriorOptInValue2021IsPresentWithContext(void *a1)
{
  void *v1;
  _BOOL8 v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Siri Data Sharing Opt-In Status Before Opting HomePod Out 2021"), CFSTR("com.apple.assistant.support"), a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

void _AFPreferencesSetHomePodPriorOptInValue2021WithContext(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  __CFNotificationCenter *DarwinNotifyCenter;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithInteger:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Siri Data Sharing Opt-In Status Before Opting HomePod Out 2021"), CFSTR("com.apple.assistant.support"), v4);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesSetHomePodOptIn2021AdjustedWithContext(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  __CFNotificationCenter *DarwinNotifyCenter;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = a1;
  objc_msgSend(v1, "numberWithBool:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v3, CFSTR("Siri Data Sharing HomePod Has Been Opted Out"), CFSTR("com.apple.assistant.support"), v2);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesHomePodAdjustedOptIn2021WithContext(void *a1)
{
  return _AFPreferencesBoolValueForKeyWithContext(CFSTR("Siri Data Sharing HomePod Has Been Opted Out"), 0, CFSTR("com.apple.assistant.support"), a1);
}

void _AFPreferencesSetSiriDataSharingOptInAlertPresented(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Suppress Siri Data Sharing Opt In"), CFSTR("com.apple.assistant.support"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriDataSharingOptStatusInDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesShouldSuppressSiriDataSharingOptInAlert()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Suppress Siri Data Sharing Opt In"), 0);
}

uint64_t _AFPreferencesSiriDesignModeIsEnabled()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("HI/CI Design Mode"), 0);
}

uint64_t AFPreferencesDisableDictationMode()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Disable Dictation Mode"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t AFPreferencesAudioDuckingAllowed()
{
  return _AFSupportPreferencesBoolForKeyWithDefault(CFSTR("Audio Ducking Allowed"), 1);
}

uint64_t _AFPreferencesOpportuneSpeakingModuleEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking Module Enabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetOpportuneSpeakingModuleEnabled(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking Module Enabled"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesOpportuneSpeakingModelUsed()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking Model Used"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "integerValue");

  return v1;
}

void _AFPreferencesSetOpportuneSpeakingModelUsed(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking Model Used"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesSpokenNotificationShowUIDuringTriggerlessListening()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Show UI During Triggerless Listening"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetSpokenNotificationShowUIDuringTriggerlessListening(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Show UI During Triggerless Listening"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesSpokenNotificationPlayAlertBeforeTriggerlessListening()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Play Alert Before Triggerless Listening"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

void _AFPreferencesSetSpokenNotificationPlayAlertBeforeTriggerlessListening(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Play Alert Before Triggerless Listening"), CFSTR("com.apple.assistant"), 0);

}

float _AFPreferencesSpokenNotificationTriggerlessReplyWindow()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Triggerless Reply Window Time"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 9.0;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationTriggerlessReplyWindow()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Spoken Notification Triggerless Reply Window Time"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesSpokenNotificationQuickIgnoreTime()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Quick Ignore Time"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.35;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationQuickIgnoreTime()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Spoken Notification Quick Ignore Time"), CFSTR("com.apple.assistant"), 0);

}

float _AFPreferencesSpokenNotificationTriggerlessReplyTresholdTime()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Triggerless Reply Time"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.26;
  }

  return v3;
}

void _AFPreferencesSetSpokenNotificationTriggerlessReplyTresholdTime()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Spoken Notification Triggerless Reply Time"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesOpportuneSpeakingEdgeDetectorSignalOverride()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Opportune Speaking Edge Detector Signal Override"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "integerValue");
  else
    v2 = -1;

  return v2;
}

unint64_t _AFPreferencesSetOpportuneSpeakingEdgeDetectorSignalOverride(unint64_t result)
{
  void *v1;

  if (result <= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", result);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Opportune Speaking Edge Detector Signal Override"), CFSTR("com.apple.assistant"), 0);

    return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  }
  return result;
}

uint64_t _AFPreferencesClearOpportuneSpeakingEdgeDetectorSignalOverride()
{
  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Opportune Speaking Edge Detector Signal Override"), CFSTR("com.apple.assistant"), 0);
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

float _AFPreferencesAnnounceNotificationsVoiceOnMinRatio()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications Voice On Min Ratio"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceNotificationsVoiceOnMinRatio()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Announce Notifications Voice On Min Ratio"), CFSTR("com.apple.assistant"), 0);

}

float _AFPreferencesAnnounceNotificationsVoiceOffMaxRatio()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications Voice Off Max Ratio"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.1;
  }

  return v3;
}

void _AFPreferencesSetAnnounceNotificationsVoiceOffMaxRatio()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Announce Notifications Voice Off Max Ratio"), CFSTR("com.apple.assistant"), 0);

}

float _AFPreferencesAnnounceCallsVoiceOnMinRatio()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Calls Voice On Min Ratio"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsVoiceOnMinRatio()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Announce Calls Voice On Min Ratio"), CFSTR("com.apple.assistant"), 0);

}

float _AFPreferencesAnnounceCallsVoiceOffMaxRatio()
{
  void *v0;
  void *v1;
  float v2;
  float v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Calls Voice Off Max Ratio"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.1;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsVoiceOffMaxRatio()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Announce Calls Voice Off Max Ratio"), CFSTR("com.apple.assistant"), 0);

}

double _AFPreferencesAnnounceCallsBargeInTime()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Calls Barge In Time"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.3;
  }

  return v3;
}

void _AFPreferencesSetAnnounceCallsBargeInTime()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v0, CFSTR("Announce Calls Barge In Time"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesSetDictationLanguageDetectorEnabledByServer(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Dictation Language Detector Enabled By Server"), CFSTR("com.apple.assistant"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

uint64_t _AFPreferencesSetMultilingualDictationTimeoutInMilliSeconds(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("MultilingualDictationTimeout"), CFSTR("com.apple.assistant"), 0);
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

id _AFPreferencesMultilingualDictationTimeoutInMilliSeconds()
{
  return _AFPreferencesValueForKeyWithContext(CFSTR("MultilingualDictationTimeout"), CFSTR("com.apple.assistant"), 0);
}

uint64_t _AFPreferencesShouldSyncFirstPartyAppIntentPolicy()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Sync First Party App Intent Policy"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t _AFPreferencesSetShouldSyncFirstPartyAppIntentPolicy(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Sync First Party App Intent Policy"), CFSTR("com.apple.assistant"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

uint64_t _AFPreferencesAuthenticationDisabled()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Authentication Disabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLValue");

  return v1;
}

uint64_t _AFPreferencesSetiRATManagerRecommendationEnabled(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("iRATManagerRecommendationEnabled"), CFSTR("com.apple.assistant"), 0);

  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
}

uint64_t _AFPreferencesiRATManagerRecommendationEnabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("iRATManagerRecommendationEnabled"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

id _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("GLOBAL"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

id _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(uint64_t a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  if ((unint64_t)(a1 - 3) >= 2)
  {
    if (a1 == 2)
    {
      _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v1 = 0;
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v1 = v3;

      objc_msgSend(v1, "objectForKey:", CFSTR("Spoken Notification Temporarily Muted End Date"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v2 = v4;
      else
        v2 = 0;

      goto LABEL_14;
    }
    if (a1 != 1)
      return 0;
  }
  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Temporarily Muted End Date"), CFSTR("com.apple.assistant.backedup"), 0);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v1 = v1;
    v2 = v1;
  }
  else
  {
    v2 = 0;
  }
LABEL_14:

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v7;

  v7 = a1;
  _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v4 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v3);
  else
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = v4;
  if (v7)
    objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("GLOBAL"));
  else
    objc_msgSend(v4, "removeObjectForKey:", CFSTR("GLOBAL"));
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Spoken Notification Temporarily Muted End Date"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

void _AFPreferencesClearSpokenNotificationTemporarilyDisabledStatus()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Spoken Notification Temporarily Muted End Date"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

id _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForAppOnPlatform(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  v3 = a1;
  _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForPlatform(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = v5;
    v8 = v7;
    if (v6)
    {
      objc_msgSend(v7, "laterDate:", v6);
      v9 = objc_claimAutoreleasedReturnValue();

      v8 = (id)v9;
    }
  }
  else
  {
    v8 = v6;
  }
  v10 = v8;

  return v10;
}

void _AFPreferencesSetAnnounceNotificationsTemporarilyDisabledEndDateForAppOnPlatform(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v10;

  v10 = a1;
  v5 = a2;
  _AFPreferencesAnnounceNotificationsDisabledUntilEndDateDictionary(a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v6);
  else
    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = v7;
  if (v10)
    objc_msgSend(v7, "setObject:forKey:", v10, v5);
  else
    objc_msgSend(v7, "removeObjectForKey:", v5);
  _AFPreferencesSetValueForKeyWithContext(v8, CFSTR("Spoken Notification Temporarily Muted End Date"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

void _AFPreferencesRemoveThreadCancellationsOlderThanTimeInterval(double a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  double v11;
  __CFNotificationCenter *DarwinNotifyCenter;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  _AFPreferencesLastAnnouncementThreadCancellationDicationary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKey:", v9, (_QWORD)v13);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v10, "timeIntervalSinceNow");
          if (-v11 < a1)
            objc_msgSend(v3, "setObject:forKey:", v10, v9);
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  _AFPreferencesSetValueForKeyWithContext(v3, CFSTR("Announce Notifications Thread Cancellation History"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

}

uint64_t _AFPreferencesSpokenNotificationsProxCardSeen()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Spoken Notifications Proximity Card Seen"), 0);
}

void _AFPreferencesSetSpokenNotificationsProxCardSeen()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(MEMORY[0x1E0C9AAB0], CFSTR("Spoken Notifications Proximity Card Seen"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesSpokenNotificationSkipTriggerlessReplyConfirmation()
{
  return _AFBackedUpPreferencesBoolForKeyWithDefault(CFSTR("Spoken Notification Skip Triggerless Reply Confirmation"), 0);
}

void _AFPreferencesSetSpokenNotificationIsAlwaysOpportune(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Spoken Notification Should Always Speak Notifications"), CFSTR("com.apple.assistant"), 0);

}

uint64_t _AFPreferencesSpokenNotificationIsAlwaysOpportune()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Should Always Speak Notifications"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetSpokenNotificationShouldAnnounceAllNotifications(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("BBAlwaysSpeakLockScreenNotifications"), CFSTR("com.apple.bulletinboard"), 0);

}

uint64_t _AFPreferencesSpokenNotificationShouldAnnounceAllNotifications()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("BBAlwaysSpeakLockScreenNotifications"), CFSTR("com.apple.bulletinboard"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsOnBuiltInSpeakerEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Announce Notifications On Built In Speaker"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesSetAnnounceNotificationsOnHearingAidsSupported(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Announce Notifications On Hearing Aids Supported"), CFSTR("com.apple.assistant"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesUpdateAnnounceNotificationsOnHearingAidsSupported()
{
  void *v0;
  id v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("AXHearingAidPaired"), CFSTR("com.apple.Accessibility"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v0 = (void *)objc_msgSend(v0, "BOOLValue");
  _AFPreferencesSetAnnounceNotificationsOnHearingAidsSupported((uint64_t)v0);

}

void _AFPreferencesSetAnnounceNotificationsOnHearingAidsEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Announce Notifications On Hearing Aids"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesSetSpokenNotificationShouldSkipTriggerlessReplies(uint64_t a1)
{
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Spoken Notification Should Skip Trggerless Replies"), CFSTR("com.apple.assistant"), 0);

  return notify_post((const char *)objc_msgSend(CFSTR("AFSiriUserNotificationRequestCapabilityForceUpdate"), "UTF8String"));
}

uint64_t _AFPreferencesSpokenNotificationShouldSkipTriggerlessReplies()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Spoken Notification Should Skip Trggerless Replies"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

uint64_t _AFPreferencesAnnounceNotificationsInCarPlayTemporarilyDisabled()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications Temporarily Disabled for CarPlay"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "BOOLValue");
  else
    v2 = 1;

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsInCarPlayTemporarilyDisabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Announce Notifications Temporarily Disabled for CarPlay"), CFSTR("com.apple.assistant"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesClearAnnounceNotificationsInCarPlayTemporarilyDisabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Announce Notifications Temporarily Disabled for CarPlay"), CFSTR("com.apple.assistant"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesAnnounceNotificationsInCarPlayType()
{
  void *v0;
  void *v1;
  uint64_t v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Announce Notifications in CarPlay Type"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0 && (unint64_t)(objc_msgSend(v0, "integerValue") - 1) <= 3)
    v2 = objc_msgSend(v1, "integerValue");
  else
    v2 = 4;

  return v2;
}

void _AFPreferencesSetAnnounceNotificationsInCarPlayType(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  if ((unint64_t)(a1 - 1) <= 3)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Announce Notifications in CarPlay Type"), CFSTR("com.apple.assistant"), 0);

    CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
  }
}

void _AFPreferencesClearAnnounceNotificationsInCarPlayType()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Announce Notifications in CarPlay Type"), CFSTR("com.apple.assistant"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesSiriRMVSetting(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    _AFPreferencesValueForKeyWithContext(CFSTR("Siri Apple TV Recognize my voice setting"), CFSTR("com.apple.assistant.backedup"), 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "uppercaseString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "objectForKey:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "integerValue");

  }
  else
  {
    v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315138;
      v9 = "_AFPreferencesSiriRMVSetting";
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Requested nil iCloudAltDSID", (uint8_t *)&v8, 0xCu);
    }
    v5 = 0;
  }

  return v5;
}

void _AFPreferencesSetSiriRMVSetting(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    _AFPreferencesValueForKeyWithContext(CFSTR("Siri Apple TV Recognize my voice setting"), CFSTR("com.apple.assistant.backedup"), 0);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    v6 = (void *)MEMORY[0x1E0C9AA70];
    if (v4)
      v6 = (void *)v4;
    v7 = v6;

    v8 = (void *)objc_msgSend(v7, "mutableCopy");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "uppercaseString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKey:", v9, v10);

    _AFPreferencesSetValueForKeyWithContext(v8, CFSTR("Siri Apple TV Recognize my voice setting"), CFSTR("com.apple.assistant.backedup"), 0);
    CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);

  }
  else
  {
    v12 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315138;
      v14 = "_AFPreferencesSetSiriRMVSetting";
      _os_log_error_impl(&dword_19AF50000, v12, OS_LOG_TYPE_ERROR, "%s Asked to set nil iCloudAltDSID", (uint8_t *)&v13, 0xCu);
    }
  }

}

void _AFPreferencesSetMessageWithoutConfirmationEnabled(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v2, CFSTR("Message Without Confirmation"), CFSTR("com.apple.assistant.backedup"), 0);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v3, CFSTR("Message Without Confirmation in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v4, CFSTR("Message Without Confirmation in Headphones"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationEnabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Message Without Confirmation"), CFSTR("com.apple.assistant.backedup"), 0);
  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Message Without Confirmation in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Message Without Confirmation in Headphones"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesSetMessageWithoutConfirmationInCarPlayEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Message Without Confirmation in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationInCarPlayEnabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Message Without Confirmation in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesSetMessageWithoutConfirmationHeadphonesEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Message Without Confirmation in Headphones"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesClearMessageWithoutConfirmationHeadphonesEnabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Message Without Confirmation in Headphones"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesSetShowAppsBehindSiriInCarPlayEnabled(uint64_t a1)
{
  void *v1;
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v1, CFSTR("Show Apps Behind Siri in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);

  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

void _AFPreferencesClearShowAppsBehindSiriInCarPlayEnabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Show Apps Behind Siri in CarPlay"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

BOOL _AFPreferencesGetSiriInCallEnabled()
{
  return +[AFFeatureFlags isBlindedSphinxEnabled](AFFeatureFlags, "isBlindedSphinxEnabled")
      || _AFPreferencesGetSiriInCallEnablementState() == 2;
}

void _AFPreferencesClearSiriInCallEnabled()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  _AFPreferencesSetValueForKeyWithContext(0, CFSTR("Siri In Call"), CFSTR("com.apple.assistant.backedup"), 0);
  CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.backedup"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAFPreferencesDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesShouldWriteSODABiomeStreamsToSysdiagnose()
{
  void *v0;
  uint64_t v1;

  _AFPreferencesValueForKeyWithContext(CFSTR("Write SODA Biome Streams To Sysdiagnose"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = _AFPreferencesBoolFromValueWithDefault(v0, (uint64_t)CFSTR("Write SODA Biome Streams To Sysdiagnose"), 0);

  return v1;
}

id _AFPreferencesHardCodedBluetoothProximityNumber()
{
  void *v0;
  void *v1;
  id v2;

  _AFPreferencesValueForKeyWithContext(CFSTR("Hard-coded BT Proximity"), CFSTR("com.apple.assistant"), 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v1 = v0;
  else
    v1 = 0;
  v2 = v1;

  return v2;
}

void _AFPreferencesSetHardCodedBluetoothProximity(void *a1)
{
  _AFPreferencesSetValueForKeyWithContext(a1, CFSTR("Hard-coded BT Proximity"), CFSTR("com.apple.assistant"), 0);
}

void _AFPreferencesSiriXAssetsDidChange()
{
  NSObject *v0;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "_AFPreferencesSiriXAssetsDidChange";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s SiriX assets status changed. Posting AFSiriXAssetDidChangeDarwinNotification", (uint8_t *)&v2, 0xCu);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSiriXAssetDidChangeDarwinNotification"), 0, 0, 1u);
}

uint64_t _AFPreferencesSetSearchQueriesDataSharingStatusWithContext(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  __CFNotificationCenter *DarwinNotifyCenter;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithInteger:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPreferencesSetValueForKeyWithContext(v5, CFSTR("Search Queries Data Sharing Status"), CFSTR("com.apple.assistant.support"), v4);

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("AFSearchQueriesDataSharingStatusDidChangeDarwinNotification"), 0, 0, 1u);
  return CFPreferencesAppSynchronize(CFSTR("com.apple.assistant.support"));
}

id AFGradingOptInStateChangeWithHistoryEntry(void *a1)
{
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0D9A430]);
  objc_msgSend(v1, "valueForKey:", CFSTR("Previous Opt-In Status"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = AFSiriDataSharingOptInStatusGetFromName(v19) - 1;
  if (v3 < 3)
    v4 = (v3 + 1);
  else
    v4 = 0;
  objc_msgSend(v1, "valueForKey:", CFSTR("New Opt-In Status"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = AFSiriDataSharingOptInStatusGetFromName(v5) - 1;
  if (v6 < 3)
    v7 = (v6 + 1);
  else
    v7 = 0;
  objc_msgSend(v1, "valueForKey:", CFSTR("Source"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = AFSiriDataSharingOptInStatusChangeSourceGetFromName(v8);
  if (v9 < 0xC)
    v10 = (v9 + 1);
  else
    v10 = 0;
  objc_msgSend(v1, "valueForKey:", CFSTR("Reason"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForKey:", CFSTR("Build Version"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForKey:", CFSTR("Date"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPrevOptInState:", v4);
  objc_msgSend(v2, "setNewOptInState:", v7);
  objc_msgSend(v2, "setSource:", v10);
  objc_msgSend(v2, "setReason:", v11);
  objc_msgSend(v2, "setSystemBuild:", v12);
  objc_msgSend(v13, "timeIntervalSince1970");
  objc_msgSend(v2, "setEpochEventTimestampInSeconds:", (unint64_t)v14);
  v15 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v16 = v15;
    objc_msgSend(v2, "formattedText");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315650;
    v21 = "AFGradingOptInStateChangeWithHistoryEntry";
    v22 = 2112;
    v23 = v17;
    v24 = 2112;
    v25 = v1;
    _os_log_impl(&dword_19AF50000, v16, OS_LOG_TYPE_INFO, "%s Constructed SELF message %@ from opt-in status history entry %@", buf, 0x20u);

  }
  return v2;
}

uint64_t AFManagedPreferencesDomainForDomain(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  CPSystemRootDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "stringWithFormat:", CFSTR("%@Library/Managed Preferences/mobile/%@"), v3, a1);

  return v4;
}

BOOL AFBluetoothDeviceSettingResponseStatusGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFBluetoothDeviceSettingResponseStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFBluetoothDeviceSettingResponseStatusGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A2EEA0[a1];
}

uint64_t AFBluetoothDeviceSettingResponseStatusGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothDeviceSettingResponseStatusGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothDeviceSettingResponseStatusGetFromName_onceToken, &__block_literal_global_9106);
    objc_msgSend((id)AFBluetoothDeviceSettingResponseStatusGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSiriActivationActionTypeGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFSiriActivationActionTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

const __CFString *AFSiriActivationActionTypeGetName(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("(unknown)");
  else
    return off_1E3A2EEE8[a1];
}

uint64_t AFSiriActivationActionTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriActivationActionTypeGetFromName_onceToken != -1)
      dispatch_once(&AFSiriActivationActionTypeGetFromName_onceToken, &__block_literal_global_9146);
    objc_msgSend((id)AFSiriActivationActionTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id DCLongRunningLogFunction()
{
  return (id)classDCLongRunningLog;
}

id initDCLongRunningLog()
{
  if (initDCLongRunningLog_sOnce != -1)
    dispatch_once(&initDCLongRunningLog_sOnce, &__block_literal_global_92);
  return (id)classDCLongRunningLog;
}

Class __initDCLongRunningLog_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = objc_getClass("DCLongRunningLog");
  classDCLongRunningLog = (uint64_t)result;
  getDCLongRunningLogClass = DCLongRunningLogFunction;
  return result;
}

id DCUtilsFunction()
{
  return (id)classDCUtils;
}

id initDCUtils()
{
  if (initDCUtils_sOnce != -1)
    dispatch_once(&initDCUtils_sOnce, &__block_literal_global_98);
  return (id)classDCUtils;
}

id DCManagerFunction()
{
  return (id)classDCManager;
}

id initDCManager()
{
  if (initDCManager_sOnce != -1)
    dispatch_once(&initDCManager_sOnce, &__block_literal_global_96);
  return (id)classDCManager;
}

Class __initDCManager_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = objc_getClass("DCManager");
  classDCManager = (uint64_t)result;
  getDCManagerClass = DCManagerFunction;
  return result;
}

Class __initDCUtils_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = objc_getClass("DCUtils");
  classDCUtils = (uint64_t)result;
  getDCUtilsClass = DCUtilsFunction;
  return result;
}

id DCConfigurationFunction()
{
  return (id)classDCConfiguration;
}

id initDCConfiguration()
{
  if (initDCConfiguration_sOnce != -1)
    dispatch_once(&initDCConfiguration_sOnce, &__block_literal_global_86);
  return (id)classDCConfiguration;
}

uint64_t DCPackingPolicyTypeOnTimerFunction()
{
  return constantDCPackingPolicyTypeOnTimer;
}

uint64_t initDCPackingPolicyTypeOnTimer()
{
  if (initDCPackingPolicyTypeOnTimer_sOnce != -1)
    dispatch_once(&initDCPackingPolicyTypeOnTimer_sOnce, &__block_literal_global_88_9262);
  return constantDCPackingPolicyTypeOnTimer;
}

id DCRuleFunction()
{
  return (id)classDCRule;
}

id initDCRule()
{
  if (initDCRule_sOnce != -1)
    dispatch_once(&initDCRule_sOnce, &__block_literal_global_94_9258);
  return (id)classDCRule;
}

Class __initDCRule_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = objc_getClass("DCRule");
  classDCRule = (uint64_t)result;
  getDCRuleClass = DCRuleFunction;
  return result;
}

uint64_t *__initDCPackingPolicyTypeOnTimer_block_invoke()
{
  uint64_t *result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = (uint64_t *)dlsym((void *)DataCollectionServicesLibrary_sLib, "DCPackingPolicyTypeOnTimer");
  if (!result)
    __assert_rtn("initDCPackingPolicyTypeOnTimer_block_invoke", "AFOpportuneSpeakingModuleDataCollection.m", 30, "constant");
  constantDCPackingPolicyTypeOnTimer = *result;
  getDCPackingPolicyTypeOnTimer = DCPackingPolicyTypeOnTimerFunction;
  return result;
}

Class __initDCConfiguration_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce, &__block_literal_global_84);
  result = objc_getClass("DCConfiguration");
  classDCConfiguration = (uint64_t)result;
  getDCConfigurationClass = DCConfigurationFunction;
  return result;
}

void sub_19AFC7E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9326(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9327(uint64_t a1)
{

}

void sub_19AFC9164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9502(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9503(uint64_t a1)
{

}

uint64_t AFSiriActivationOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFSiriActivationOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("prewarm"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFSiriActivationOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFSiriActivationOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFSiriActivationOptionsGetFromName_onceToken, &__block_literal_global_9779);
            objc_msgSend((id)_AFSiriActivationOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19AFCBE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFCC020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFCC8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10078(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10079(uint64_t a1)
{

}

void *BluetoothManagerLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!BluetoothManagerLibraryCore_frameworkLibrary)
    BluetoothManagerLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)BluetoothManagerLibraryCore_frameworkLibrary;
  if (!BluetoothManagerLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BluetoothManagerLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFHeadphonesAnnouncementRequestCapabilityProvider.m"), 50, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_19AFCE44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFCE804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getINSearchForMessagesIntentIdentifier()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getINSearchForMessagesIntentIdentifierSymbolLoc_ptr;
  v8 = getINSearchForMessagesIntentIdentifierSymbolLoc_ptr;
  if (!getINSearchForMessagesIntentIdentifierSymbolLoc_ptr)
  {
    v1 = IntentsLibrary();
    v0 = (id *)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    v6[3] = (uint64_t)v0;
    getINSearchForMessagesIntentIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getINSearchForMessagesIntentIdentifier(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFHeadphonesAnnouncementRequestCapabilityProvider.m"), 33, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AFCE90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *IntentsLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!IntentsLibraryCore_frameworkLibrary)
    IntentsLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)IntentsLibraryCore_frameworkLibrary;
  if (!IntentsLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntentsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFHeadphonesAnnouncementRequestCapabilityProvider.m"), 32, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void getINSearchForNotebookItemsIntentIdentifier()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr;
  v8 = getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr;
  if (!getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr)
  {
    v1 = IntentsLibrary();
    v0 = (id *)dlsym(v1, "INSearchForNotebookItemsIntentIdentifier");
    v6[3] = (uint64_t)v0;
    getINSearchForNotebookItemsIntentIdentifierSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getINSearchForNotebookItemsIntentIdentifier(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFHeadphonesAnnouncementRequestCapabilityProvider.m"), 36, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AFCEB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AFClockAlarmManagerEventGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFClockAlarmManagerEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

const __CFString *AFClockAlarmManagerEventGetName(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("(unknown)");
  else
    return off_1E3A2F450[a1];
}

uint64_t AFClockAlarmManagerEventGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFClockAlarmManagerEventGetFromName_onceToken != -1)
      dispatch_once(&AFClockAlarmManagerEventGetFromName_onceToken, &__block_literal_global_10338);
    objc_msgSend((id)AFClockAlarmManagerEventGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSoundIDGetIsValid(unint64_t a1)
{
  return a1 < 0xE;
}

BOOL AFSoundIDGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xD;
}

const __CFString *AFSoundIDGetName(unint64_t a1)
{
  if (a1 > 0xD)
    return CFSTR("(unknown)");
  else
    return off_1E3A2F538[a1];
}

uint64_t AFSoundIDGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSoundIDGetFromName_onceToken != -1)
      dispatch_once(&AFSoundIDGetFromName_onceToken, &__block_literal_global_10418);
    objc_msgSend((id)AFSoundIDGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19AFD1430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFD3158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFD3318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFD37B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFD3868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10581(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10582(uint64_t a1)
{

}

id AFSecurityDigestData(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  return AFSecurityDigestChunksWithProvider(a1, 1u, a2, a3, a4);
}

id AFSecurityDigestChunksWithProvider(void *a1, unsigned int a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[5];
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  CC_SHA512_CTX v23;
  _QWORD v24[5];
  _QWORD v25[5];
  unsigned __int8 md[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a3;
  if (!a5)
  {
    if (!v9)
    {
      v11 = 0;
      goto LABEL_14;
    }
LABEL_5:
    if (a4 == 2)
    {
      v19 = 0;
      v20 = &v19;
      v21 = 0xF010000000;
      v22 = &unk_19B1427C9;
      memset(&v23, 0, sizeof(v23));
      CC_SHA512_Init(&v23);
      v14 = MEMORY[0x1E0C809B0];
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __AFSecurityDigestChunksWithProvider_block_invoke_3;
      v18[3] = &unk_1E3A2F8D8;
      v18[4] = &v19;
      objc_msgSend(v9, "af_enumerateDigestibleChunksWithOptions:usingBlock:", a2, v18);
      v17[0] = v14;
      v17[1] = 3221225472;
      v17[2] = __AFSecurityDigestChunksWithProvider_block_invoke_4;
      v17[3] = &unk_1E3A2F900;
      v17[4] = &v19;
      objc_msgSend(v10, "enumerateByteRangesUsingBlock:", v17);
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)md = 0u;
      v27 = 0u;
      CC_SHA512_Final(md, (CC_SHA512_CTX *)(v20 + 4));
      v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", md, 64);
    }
    else
    {
      if (a4 != 1)
      {
        +[AFError errorWithCode:](AFError, "errorWithCode:", 1601);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 0;
        if (!a5)
        {
LABEL_13:

          goto LABEL_14;
        }
LABEL_12:
        *a5 = objc_retainAutorelease(v15);
        goto LABEL_13;
      }
      v19 = 0;
      v20 = &v19;
      v21 = 0x8810000000;
      v22 = &unk_19B1427C9;
      memset(&v23, 0, 104);
      CC_SHA256_Init((CC_SHA256_CTX *)&v23);
      v12 = MEMORY[0x1E0C809B0];
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __AFSecurityDigestChunksWithProvider_block_invoke;
      v25[3] = &unk_1E3A2F8D8;
      v25[4] = &v19;
      objc_msgSend(v9, "af_enumerateDigestibleChunksWithOptions:usingBlock:", a2, v25);
      v24[0] = v12;
      v24[1] = 3221225472;
      v24[2] = __AFSecurityDigestChunksWithProvider_block_invoke_2;
      v24[3] = &unk_1E3A2F900;
      v24[4] = &v19;
      objc_msgSend(v10, "enumerateByteRangesUsingBlock:", v24);
      *(_OWORD *)md = 0u;
      v27 = 0u;
      CC_SHA256_Final(md, (CC_SHA256_CTX *)(v20 + 4));
      v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", md, 32);
    }
    v11 = (void *)v13;
    _Block_object_dispose(&v19, 8);
    v15 = 0;
    if (!a5)
      goto LABEL_13;
    goto LABEL_12;
  }
  *a5 = 0;
  if (v9)
    goto LABEL_5;
  +[AFError errorWithCode:](AFError, "errorWithCode:", 1603);
  v11 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:

  return v11;
}

void sub_19AFD56AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AFSecurityEncryptData(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  return __AFSecurityPerformCryptoOperationWithData(a1, a2, a3, 0, a4);
}

id __AFSecurityPerformCryptoOperationWithData(void *a1, void *a2, uint64_t a3, CCOperation a4, _QWORD *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  id v22;
  void *v23;
  void *dataOut;
  id v25;
  const void *v26;
  size_t v27;
  id v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  size_t v35;
  size_t dataOutMoved;
  id v37;
  id v38;
  id v39;

  v9 = a1;
  v10 = a2;
  if (!a5)
  {
    if (!objc_msgSend(v9, "length") || !objc_msgSend(v10, "length"))
    {
      v16 = 0;
      goto LABEL_45;
    }
    goto LABEL_7;
  }
  *a5 = 0;
  if (!objc_msgSend(v9, "length"))
  {
    v11 = 1603;
    goto LABEL_13;
  }
  if (objc_msgSend(v10, "length"))
  {
LABEL_7:
    switch(a3)
    {
      case 3:
        v37 = 0;
        AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v37);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        v17 = v37;
        v18 = 16;
        if (!v17)
          goto LABEL_25;
        break;
      case 2:
        v38 = 0;
        AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v38);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        v13 = v38;
        if (!v13)
        {
          v14 = v12;
          v15 = 24;
          goto LABEL_24;
        }
LABEL_19:
        v17 = v13;
        if (!a5)
          goto LABEL_20;
        goto LABEL_17;
      case 1:
        v39 = 0;
        AFSecurityDigestChunksWithProvider(v10, 1u, 0, 1, &v39);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        v13 = v39;
        if (!v13)
        {
          v14 = v12;
          v15 = 16;
LABEL_24:
          objc_msgSend(v14, "subdataWithRange:", 0, v15);
          v19 = objc_claimAutoreleasedReturnValue();

          v18 = 16;
          v12 = (id)v19;
          goto LABEL_25;
        }
        goto LABEL_19;
      default:
        +[AFError errorWithCode:](AFError, "errorWithCode:", 1601);
        v17 = (id)objc_claimAutoreleasedReturnValue();
        v18 = 0;
        v12 = 0;
        if (!v17)
        {
LABEL_25:
          dataOutMoved = 0;
          v12 = objc_retainAutorelease(v12);
          v20 = (const void *)objc_msgSend(v12, "bytes");
          v21 = objc_msgSend(v12, "length");
          v22 = objc_retainAutorelease(v9);
          if (CCCrypt(a4, 0, 1u, v20, v21, 0, (const void *)objc_msgSend(v22, "bytes"), objc_msgSend(v22, "length"), 0, 0, &dataOutMoved) == -4301)
          {
            dataOutMoved += v18;
            v23 = malloc_type_malloc(dataOutMoved, 0xFC7CDDAAuLL);
            if (v23)
            {
              dataOut = v23;
              v35 = 0;
              v25 = objc_retainAutorelease(v12);
              v26 = (const void *)objc_msgSend(v25, "bytes");
              v27 = objc_msgSend(v25, "length");
              v28 = objc_retainAutorelease(v22);
              v29 = (const void *)objc_msgSend(v28, "bytes");
              v30 = objc_msgSend(v28, "length");
              if (CCCrypt(a4, 0, 1u, v26, v27, 0, v29, v30, dataOut, dataOutMoved, &v35))
              {
                if (a4 == 1)
                {
                  if (!a5)
                  {
LABEL_41:
                    free(dataOut);
                    goto LABEL_42;
                  }
                  v31 = 1610;
                }
                else
                {
                  if (a4 || !a5)
                    goto LABEL_41;
                  v31 = 1609;
                }
                +[AFError errorWithCode:](AFError, "errorWithCode:", v31);
                *a5 = (id)objc_claimAutoreleasedReturnValue();
                goto LABEL_41;
              }
              v33 = objc_alloc(MEMORY[0x1E0C99D50]);
              v16 = (void *)objc_msgSend(v33, "initWithBytesNoCopy:length:freeWhenDone:", dataOut, v35, 1);
LABEL_43:
              v17 = 0;
              goto LABEL_44;
            }
            if (a5)
            {
              v32 = 1607;
              goto LABEL_36;
            }
          }
          else if (a5)
          {
            v32 = 1608;
LABEL_36:
            +[AFError errorWithCode:](AFError, "errorWithCode:", v32);
            v16 = 0;
            *a5 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_43;
          }
LABEL_42:
          v16 = 0;
          goto LABEL_43;
        }
        break;
    }
    if (!a5)
    {
LABEL_20:
      v16 = 0;
      goto LABEL_44;
    }
LABEL_17:
    v17 = objc_retainAutorelease(v17);
    v16 = 0;
    *a5 = v17;
LABEL_44:

    goto LABEL_45;
  }
  v11 = 1604;
LABEL_13:
  +[AFError errorWithCode:](AFError, "errorWithCode:", v11);
  v16 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_45:

  return v16;
}

id AFSecurityDecryptData(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  return __AFSecurityPerformCryptoOperationWithData(a1, a2, a3, 1u, a4);
}

char *AFSecurityGenerateRandomData()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  char *v3;
  int v4;
  id v5;
  id v6;
  size_t v7;
  ssize_t v8;
  void *v9;
  _BYTE v11[4096];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = (char *)v0;
  v12 = *MEMORY[0x1E0C80C00];
  if (v1)
  {
    *v1 = 0;
    if (!v0)
    {
      +[AFError errorWithCode:](AFError, "errorWithCode:", 1602);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_23;
    }
    v4 = open("/dev/random", 0);
    if (v4 < 0)
    {
      +[AFError errorWithCode:](AFError, "errorWithCode:", 1611);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      v3 = 0;
LABEL_23:
      *v2 = v5;
      return v3;
    }
    goto LABEL_7;
  }
  if (!v0)
    return v3;
  v4 = open("/dev/random", 0);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_7:
    v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithCapacity:", v3);
    if (!v6)
      v6 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
    do
    {
      if ((unint64_t)v3 >= 0x1000)
        v7 = 4096;
      else
        v7 = (size_t)v3;
      v8 = read(v4, v11, v7);
      if (v8 >= 1 && v8 == v7)
      {
        objc_msgSend(v6, "appendBytes:length:", v11, v7);
        v9 = 0;
        v3 -= v7;
        if (!v3)
          break;
      }
      else
      {
        +[AFError errorWithCode:](AFError, "errorWithCode:", 1612);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v3)
          break;
      }
    }
    while (!v9);
    close(v4);
    if (v9)
    {
      v3 = 0;
      if (!v2)
      {
LABEL_21:

        return v3;
      }
    }
    else
    {
      v3 = (char *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithData:", v6);
      if (!v2)
        goto LABEL_21;
    }
    *v2 = objc_retainAutorelease(v9);
    goto LABEL_21;
  }
  return (char *)0;
}

BOOL AFPineBoardSystemStateGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFPineBoardSystemStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

const __CFString *AFPineBoardSystemStateGetName(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("(unknown)");
  else
    return off_1E3A2F980[a1];
}

uint64_t AFPineBoardSystemStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFPineBoardSystemStateGetFromName_onceToken != -1)
      dispatch_once(&AFPineBoardSystemStateGetFromName_onceToken, &__block_literal_global_10825);
    objc_msgSend((id)AFPineBoardSystemStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSpeechRecordingAlertStyleGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSpeechRecordingAlertStyleGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFSpeechRecordingAlertStyleGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A2F9E8[a1];
}

uint64_t AFSpeechRecordingAlertStyleGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSpeechRecordingAlertStyleGetFromName_onceToken != -1)
      dispatch_once(&AFSpeechRecordingAlertStyleGetFromName_onceToken, &__block_literal_global_10850);
    objc_msgSend((id)AFSpeechRecordingAlertStyleGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19AFD6FA4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 192));
  _Unwind_Resume(a1);
}

BOOL AFClockTimerManagerEventGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFClockTimerManagerEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

const __CFString *AFClockTimerManagerEventGetName(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("(unknown)");
  else
    return off_1E3A2FAC8[a1];
}

uint64_t AFClockTimerManagerEventGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFClockTimerManagerEventGetFromName_onceToken != -1)
      dispatch_once(&AFClockTimerManagerEventGetFromName_onceToken, &__block_literal_global_11299);
    objc_msgSend((id)AFClockTimerManagerEventGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

const __CFString *AFDeviceProximityGetName(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;

  v1 = CFSTR("near");
  v2 = CFSTR("immediate");
  v3 = CFSTR("primary");
  if (a1 != 4000)
    v3 = 0;
  if (a1 != 3000)
    v2 = v3;
  if (a1 != 2000)
    v1 = v2;
  v4 = CFSTR("unknown");
  v5 = CFSTR("far");
  if (a1 != 1000)
    v5 = 0;
  if (a1)
    v4 = v5;
  if (a1 <= 1999)
    return v4;
  else
    return v1;
}

uint64_t AFDeviceProximityCompare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = -1;
  if (a1 <= a2)
    v2 = 1;
  if (a1 == a2)
    return 0;
  else
    return v2;
}

void sub_19AFDA4F0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19AFDAFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19AFDB838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11678(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11679(uint64_t a1)
{

}

void sub_19AFDE094(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19AFDE26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19AFE1A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11944(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11945(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__268(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A1AC0C3C](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__269(uint64_t a1)
{

}

id DeltaPhrases(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v5, "count");
  v8 = objc_msgSend(v6, "count");
  if (v7 >= v8)
    v9 = v8;
  else
    v9 = v7;
  if (!v9)
  {
    v10 = 0;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = 0;
  while (1)
  {
    objc_msgSend(v5, "objectAtIndex:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndex:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v11, "isEqual:", v12);

    if (!v13)
      break;
    if (v9 == ++v10)
    {
      v10 = v9;
      break;
    }
  }
  if (a3)
LABEL_10:
    *a3 = objc_msgSend(v6, "count") - v10;
LABEL_11:
  objc_msgSend(v5, "subarrayWithRange:", v10, objc_msgSend(v5, "count") - v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

BOOL AFBluetoothWirelessSplitterSessionStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothWirelessSplitterSessionStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFBluetoothWirelessSplitterSessionStateGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A30148[a1];
}

uint64_t AFBluetoothWirelessSplitterSessionStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothWirelessSplitterSessionStateGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothWirelessSplitterSessionStateGetFromName_onceToken, &__block_literal_global_12397);
    objc_msgSend((id)AFBluetoothWirelessSplitterSessionStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFBluetoothHeadGestureTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothHeadGestureTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFBluetoothHeadGestureTypeGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A30230[a1];
}

uint64_t AFBluetoothHeadGestureTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothHeadGestureTypeGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothHeadGestureTypeGetFromName_onceToken, &__block_literal_global_12690);
    objc_msgSend((id)AFBluetoothHeadGestureTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFAudioSessionAssertionGetConnectionWorkloop()
{
  if (AFAudioSessionAssertionGetConnectionWorkloop_onceToken != -1)
    dispatch_once(&AFAudioSessionAssertionGetConnectionWorkloop_onceToken, &__block_literal_global_12709);
  return (id)AFAudioSessionAssertionGetConnectionWorkloop_workloop;
}

id ANAnnounceFeatureStatusFunction()
{
  return (id)classANAnnounceFeatureStatus;
}

id initANAnnounceFeatureStatus()
{
  if (initANAnnounceFeatureStatus_sOnce != -1)
    dispatch_once(&initANAnnounceFeatureStatus_sOnce, &__block_literal_global_408);
  return (id)classANAnnounceFeatureStatus;
}

Class __initANAnnounceFeatureStatus_block_invoke()
{
  Class result;

  if (AnnounceLibrary_sOnce != -1)
    dispatch_once(&AnnounceLibrary_sOnce, &__block_literal_global_410);
  result = objc_getClass("ANAnnounceFeatureStatus");
  classANAnnounceFeatureStatus = (uint64_t)result;
  getANAnnounceFeatureStatusClass = ANAnnounceFeatureStatusFunction;
  return result;
}

__CFString *AFDeviceMessagingOptionsGetNames(uint64_t a1)
{
  __int16 v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
  {
    v2 = CFSTR("None");
    return v2;
  }
  v1 = a1;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(&stru_1E3A37708, "stringByAppendingString:", CFSTR("+IDS"));
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if ((v1 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = &stru_1E3A37708;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("+Rapport"));
    v3 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v3;
  }
LABEL_8:
  if ((v1 & 0x400) == 0)
  {
    if ((v1 & 0x800) == 0)
      goto LABEL_10;
LABEL_14:
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("+Wifi"));
    v7 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v7;
    if ((v1 & 0x1000) == 0)
      return v2;
    goto LABEL_11;
  }
  -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("+Bluetooth"));
  v6 = objc_claimAutoreleasedReturnValue();

  v2 = (__CFString *)v6;
  if ((v1 & 0x800) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v1 & 0x1000) != 0)
  {
LABEL_11:
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("+Cloud"));
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v4;
  }
  return v2;
}

BOOL AFClockIsFiringAlarmValid(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "firedDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSinceDate:", v3);
  v5 = v4;

  if (v5 >= 900.0)
  {
    v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      v8 = 136315394;
      v9 = "AFClockIsFiringAlarmValid";
      v10 = 2112;
      v11 = v1;
      _os_log_debug_impl(&dword_19AF50000, v6, OS_LOG_TYPE_DEBUG, "%s Firing alarm is not valid: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return v5 < 900.0;
}

void sub_19AFEB70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CarKitLibraryCore_frameworkLibrary)
    CarKitLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CarKitLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CarKitLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFCarPlayAnnouncementRequestCapabilityProvider.m"), 20, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("CARSessionStatus");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCARSessionStatusClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AFCarPlayAnnouncementRequestCapabilityProvider.m"), 21, CFSTR("Unable to find class %s"), "CARSessionStatus");

LABEL_8:
    __break(1u);
  }
  getCARSessionStatusClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19AFEC100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getINSearchForMessagesIntentIdentifier_13367()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_13376;
  v8 = getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_13376;
  if (!getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_13376)
  {
    v1 = IntentsLibrary_13369();
    v0 = (id *)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    v6[3] = (uint64_t)v0;
    getINSearchForMessagesIntentIdentifierSymbolLoc_ptr_13376 = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getINSearchForMessagesIntentIdentifier(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFCarPlayAnnouncementRequestCapabilityProvider.m"), 29, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19AFEC200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *IntentsLibrary_13369()
{
  void *v0;
  void *v2;
  void *v3;

  if (!IntentsLibraryCore_frameworkLibrary_13373)
    IntentsLibraryCore_frameworkLibrary_13373 = _sl_dlopen();
  v0 = (void *)IntentsLibraryCore_frameworkLibrary_13373;
  if (!IntentsLibraryCore_frameworkLibrary_13373)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntentsLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFCarPlayAnnouncementRequestCapabilityProvider.m"), 28, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

BOOL AFExternalNotificationRequestHandlerStateGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFExternalNotificationRequestHandlerStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

const __CFString *AFExternalNotificationRequestHandlerStateGetName(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("(unknown)");
  else
    return off_1E3A30510[a1];
}

uint64_t AFExternalNotificationRequestHandlerStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFExternalNotificationRequestHandlerStateGetFromName_onceToken != -1)
      dispatch_once(&AFExternalNotificationRequestHandlerStateGetFromName_onceToken, &__block_literal_global_14458);
    objc_msgSend((id)AFExternalNotificationRequestHandlerStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFNonNilMutableCopyOfArray(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  v2 = v1;
  if (v1)
    v3 = v1;
  else
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = v3;

  return v4;
}

id AFNonNilMutableCopyOfDictionary(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  v2 = v1;
  if (v1)
    v3 = v1;
  else
    v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = v3;

  return v4;
}

void sub_19AFF4504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t AFClientLiteClientObjectInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4008F0);
}

uint64_t AFClientLiteRemoteObjectInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4322B8);
}

id AFInterstitialCreateCommand(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  __CFString *v11;
  objc_class *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1 < 1)
  {
    v10 = 0;
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = (void *)*MEMORY[0x1E0D89240];
  if ((unint64_t)a1 >= 5)
    v10 = 0;
  if ((unint64_t)a1 > 4)
    goto LABEL_7;
  v11 = off_1E3A305E8[a1 - 1];
LABEL_8:
  v12 = (objc_class *)MEMORY[0x1E0D88508];
  v13 = v10;
  v14 = objc_alloc_init(v12);
  v15 = objc_alloc_init(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v15, "UUIDString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setAceId:", v16);

  objc_msgSend(v14, "setRefId:", v9);
  objc_msgSend(v14, "setText:", v7);
  objc_msgSend(v14, "setSpeakableText:", v8);
  objc_msgSend(v14, "setDialogIdentifier:", v11);
  objc_msgSend(v14, "setCanUseServerTTS:", 1);
  v17 = objc_alloc_init(MEMORY[0x1E0D884F8]);
  v18 = objc_alloc_init(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v18, "UUIDString");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setAceId:", v19);

  objc_msgSend(v17, "setRefId:", v9);
  objc_msgSend(v17, "setDialogPhase:", v13);
  objc_msgSend(v17, "setDisplayTarget:", *MEMORY[0x1E0D89258]);
  v22[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setViews:", v20);

  objc_msgSend(v17, "setSupplemental:", 1);
  return v17;
}

__CFString *AFInterstitialGetDialogIdentifierForPhase(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return 0;
  else
    return off_1E3A305E8[a1 - 1];
}

BOOL AFInterstitialIsCommandInterstitial(void *a1)
{
  id v1;
  void *v2;
  char v3;
  _BOOL8 v4;

  v1 = a1;
  objc_opt_class();
  v4 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "af_dialogPhase");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isExpository");

    if ((v3 & 1) != 0)
      v4 = 1;
  }

  return v4;
}

uint64_t AFInterstitialIsDialogIdentifierInterstitial(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("client#interstitialInitial")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("client#interstitialFollowUpOne")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("client#interstitialFollowUpTwo")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("client#interstitialFinal"));
  }

  return v2;
}

BOOL AFInterstitialSupportsRequestWithEvent(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = a1 != 32;
  if (a2 == 9)
    v2 = 0;
  if (a2 == 6)
    v2 = 0;
  return a1 != 17 && v2;
}

void sub_19AFF6EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19AFF76A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16_s24(id *a1)
{

}

uint64_t __Block_byref_object_copy__15014(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15015(uint64_t a1)
{

}

void sub_19AFF9264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s0_s8_s16_s24(&a9);
  _Unwind_Resume(a1);
}

uint64_t AFDictationTaskHintTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("VoiceMail")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("FaceTime")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SearchOrMessaging")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("WebSearch")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("VoiceControl")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t AFIsDictationRequestEligibleForOnDeviceDictation(void *a1)
{
  id v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  objc_msgSend(v1, "fieldLabel");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "hasPrefix:", CFSTR("SFSpeech")))
    v3 = objc_msgSend(v1, "keyboardType") == 12 || objc_msgSend(v1, "keyboardType") == 13;
  else
    v3 = 0;

  v4 = objc_msgSend(v1, "transcriptionMode");
  v5 = 0;
  if (!v3 && v4 != 3)
  {
    if ((objc_msgSend(v1, "preferOnlineRecognition") & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(v1, "languageDetectionUserContext");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
        v5 = 0;
      else
        v5 = AFOfflineDictationCapable();

    }
  }

  return v5;
}

BOOL AFIsSearchDictationRequest(void *a1)
{
  return objc_msgSend(a1, "returnKeyType") == 7;
}

void sub_19AFFB12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15429(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15430(uint64_t a1)
{

}

AFMemoryInfo *AFMemoryInfoGetCurrent()
{
  kern_return_t v0;
  mach_error_t v1;
  void *v2;
  AFMemoryInfo *v4;
  NSObject *v5;
  char *v6;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  mach_error_t v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)task_info_out = 0u;
  v9 = 0u;
  task_info_outCnt = 93;
  v0 = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  if (v0)
  {
    v1 = v0;
    v2 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      v5 = v2;
      v6 = mach_error_string(v1);
      *(_DWORD *)buf = 136315650;
      v33 = "AFMemoryInfoGetCurrent";
      v34 = 1024;
      v35 = v1;
      v36 = 2080;
      v37 = v6;
      _os_log_error_impl(&dword_19AF50000, v5, OS_LOG_TYPE_ERROR, "%s task_info() with TASK_VM_INFO returned %d due to %s.", buf, 0x1Cu);

    }
    return (AFMemoryInfo *)0;
  }
  else
  {
    v4 = [AFMemoryInfo alloc];
    return -[AFMemoryInfo initWithVirtualMemorySizeInBytes:numberOfRegions:pageSizeInBytes:residentMemorySizeInBytes:peakResidentMemorySizeInBytes:physicalMemoryFootprintInBytes:](v4, "initWithVirtualMemorySizeInBytes:numberOfRegions:pageSizeInBytes:residentMemorySizeInBytes:peakResidentMemorySizeInBytes:physicalMemoryFootprintInBytes:", *(_QWORD *)task_info_out, task_info_out[2], task_info_out[3], v9, (_QWORD)v17);
  }
}

void extractMyriadDataFromAudioContext(void *a1, _WORD *a2, _BYTE *a3, _BYTE *a4, _QWORD *a5, _BYTE *a6)
{
  id v11;
  void *v12;
  int v13;
  unsigned __int16 v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE buf[12];
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = v11;
  if (!v11 || (unint64_t)objc_msgSend(v11, "length") < 4)
  {
    v15 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "extractMyriadDataFromAudioContext";
      v20 = 2112;
      v21 = v12;
      _os_log_impl(&dword_19AF50000, v15, OS_LOG_TYPE_INFO, "%s AFMyriadRecord invalid data during init: %@", buf, 0x16u);
    }
    if (a2)
      *a2 = 0;
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    goto LABEL_32;
  }
  if (!a2)
    goto LABEL_28;
  v13 = (unsigned __int16)arc4random_uniform(0x10000u);
  while (!v13 || v13 == (unsigned __int16)*a2)
  {
    v14 = arc4random_uniform(0x10000u);
    if ((v14 & 0xFFFB) == 0xF0)
      goto LABEL_11;
    v13 = v14;
    if (v14 > 0xF9F8u)
    {
      if (v14 == 63993 || v14 == 0xFFFF)
        goto LABEL_11;
    }
    else if (v14 - 208 <= 0x2F && ((1 << (v14 + 48)) & 0x830080010001) != 0 || !v14)
    {
LABEL_11:
      v13 = 0;
    }
  }
  v16 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "_generateRandomHash";
    v20 = 1024;
    LODWORD(v21) = v13;
    _os_log_impl(&dword_19AF50000, v16, OS_LOG_TYPE_INFO, "%s Generated myriad hash: %hu", buf, 0x12u);
  }
  *a2 = v13;
LABEL_28:
  if (a3)
    objc_msgSend(v12, "getBytes:range:", a3, 2, 1);
  if (a4)
    objc_msgSend(v12, "getBytes:range:", a4, 3, 1);
LABEL_32:
  if (a5)
  {
    *(_QWORD *)buf = 0;
    v17 = objc_msgSend(v12, "length");
    v18 = 0;
    if (v17 >= 0xC)
    {
      objc_msgSend(v12, "getBytes:range:", buf, 4, 8, 0.0);
      v18 = *(_QWORD *)buf;
    }
    *a5 = v18;
  }
  if (a6)
  {
    if ((unint64_t)objc_msgSend(v12, "length") < 0xD)
      *a6 = 0;
    else
      objc_msgSend(v12, "getBytes:range:", a6, 12, 1);
  }

}

id AFAssertionGetContexts(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "count");
  if (v2)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v2);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v1;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v8), "context", (_QWORD)v12);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (v9)
            objc_msgSend(v3, "addObject:", v9);

          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

    v10 = (void *)objc_msgSend(v3, "copy");
  }
  else
  {
    v10 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v10;
}

id AFAssertionGetCurrentOrUpNextDateIntervalFromContexts(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v35;
  id obj;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  v6 = 0;
  if (!v4 || !v5)
    goto LABEL_38;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v35 = v3;
  v8 = v3;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
  if (!v9)
    goto LABEL_23;
  v10 = v9;
  v11 = *(_QWORD *)v42;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v42 != v11)
        objc_enumerationMutation(v8);
      v13 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
      objc_msgSend(v13, "effectiveDate", v35);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        objc_msgSend(v13, "expirationDuration");
        if (v15 >= 0.0)
        {
          v16 = v15;
          objc_msgSend(v14, "timeIntervalSinceDate:", v4);
          if (v17 <= 0.0)
          {
            if (v16 <= 0.0)
            {
              v19 = objc_alloc(MEMORY[0x1E0CB3588]);
LABEL_19:
              objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = (void *)objc_msgSend(v19, "initWithStartDate:endDate:", v14, v21);

              if (!v20)
                goto LABEL_21;
LABEL_20:
              objc_msgSend(v7, "addObject:", v20);

              goto LABEL_21;
            }
            if (v16 + v17 <= 0.0)
              goto LABEL_21;
            v18 = objc_alloc(MEMORY[0x1E0CB3588]);
          }
          else
          {
            v18 = objc_alloc(MEMORY[0x1E0CB3588]);
            v19 = v18;
            if (v16 <= 0.0)
              goto LABEL_19;
          }
          v20 = (void *)objc_msgSend(v18, "initWithStartDate:duration:", v14, v16);
          if (v20)
            goto LABEL_20;
        }
      }
LABEL_21:

    }
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
  }
  while (v10);
LABEL_23:

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend(v7, "sortedArrayUsingComparator:", &__block_literal_global_16347);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
  if (v22)
  {
    v23 = v22;
    v6 = 0;
    v24 = *(_QWORD *)v38;
    do
    {
      for (j = 0; j != v23; ++j)
      {
        if (*(_QWORD *)v38 != v24)
          objc_enumerationMutation(obj);
        v26 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * j);
        if (v6)
        {
          if (!objc_msgSend(v6, "intersectsDateInterval:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * j)))
            goto LABEL_37;
          objc_msgSend(v6, "endDate");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "endDate");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v27, "compare:", v28);

          if (v29 == -1)
          {
            v30 = objc_alloc(MEMORY[0x1E0CB3588]);
            objc_msgSend(v6, "startDate");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "endDate");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = objc_msgSend(v30, "initWithStartDate:endDate:", v31, v32);

            v6 = (id)v33;
          }
        }
        else
        {
          v6 = v26;
        }
      }
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
    }
    while (v23);
  }
  else
  {
    v6 = 0;
  }
LABEL_37:

  v3 = v35;
LABEL_38:

  return v6;
}

uint64_t AFAssertionGetEffectiveDateAndExpirationDurationFromDateInterval(void *a1, void *a2, _QWORD *a3, double *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  id v16;
  void *v17;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0.0;
  v10 = 0;
  if (v7 && v8)
  {
    objc_msgSend(v7, "startDate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "duration");
    v13 = v12;
    objc_msgSend(v11, "timeIntervalSinceDate:", v9);
    v15 = v11;
    if (v14 <= 0.0 && (v13 = v13 + v14, v15 = v9, v13 <= 0.0))
    {
      v17 = 0;
      v10 = 0;
    }
    else
    {
      v16 = v15;
      v17 = v16;
      if (a3)
        *a3 = objc_retainAutorelease(v16);
      if (a4)
        *a4 = v13;
      v10 = 1;
    }

  }
  return v10;
}

uint64_t AFAssertionRelinquishmentOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFAssertionRelinquishmentOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("inactiveOnly"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFAssertionRelinquishmentOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFAssertionRelinquishmentOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFAssertionRelinquishmentOptionsGetFromName_onceToken, &__block_literal_global_16363);
            objc_msgSend((id)_AFAssertionRelinquishmentOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

const __CFString *_AFMemoryPressureConditionGetName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E3A309E8[a1 - 1];
}

void AFApplicationWorkspaceEnumerateInstalledApplications(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id LSApplicationProxyClass;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  LSApplicationProxyClass = getLSApplicationProxyClass();
  if (!LSApplicationProxyClass)
  {
    v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "AFApplicationWorkspaceEnumerateInstalledApplications";
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Unable to get LSApplicationProxy class.", buf, 0xCu);
    }
  }
  objc_msgSend(getLSApplicationWorkspaceClass(), "defaultWorkspace");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __AFApplicationWorkspaceEnumerateInstalledApplications_block_invoke;
    v9[3] = &unk_1E3A30A18;
    v12 = LSApplicationProxyClass;
    v10 = v4;
    v13 = a1;
    v11 = v3;
    objc_msgSend(v7, "enumerateBundlesOfType:block:", 1, v9);

  }
  else
  {
    v8 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "AFApplicationWorkspaceEnumerateInstalledApplications";
      _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Unable to get an instance of LSApplicationWorkspace.", buf, 0xCu);
    }
  }

}

id LSApplicationProxyFunction()
{
  return (id)classLSApplicationProxy;
}

id initLSApplicationProxy()
{
  if (initLSApplicationProxy_sOnce != -1)
    dispatch_once(&initLSApplicationProxy_sOnce, &__block_literal_global_16807);
  return (id)classLSApplicationProxy;
}

id LSApplicationWorkspaceFunction()
{
  return (id)classLSApplicationWorkspace;
}

id initLSApplicationWorkspace()
{
  if (initLSApplicationWorkspace_sOnce != -1)
    dispatch_once(&initLSApplicationWorkspace_sOnce, &__block_literal_global_12);
  return (id)classLSApplicationWorkspace;
}

Class __initLSApplicationWorkspace_block_invoke()
{
  Class result;

  CoreServicesLibrary();
  result = objc_getClass("LSApplicationWorkspace");
  classLSApplicationWorkspace = (uint64_t)result;
  if (!result)
    __assert_rtn("initLSApplicationWorkspace_block_invoke", "AFApplicationWorkspaceUtils.m", 18, "classLSApplicationWorkspace");
  getLSApplicationWorkspaceClass = (uint64_t (*)())LSApplicationWorkspaceFunction;
  return result;
}

void CoreServicesLibrary()
{
  if (!CoreServicesLibrary_frameworkLibrary)
  {
    CoreServicesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    if (!CoreServicesLibrary_frameworkLibrary)
      __assert_rtn("CoreServicesLibrary", "AFApplicationWorkspaceUtils.m", 16, "frameworkLibrary");
  }
}

Class __initLSApplicationProxy_block_invoke()
{
  Class result;

  CoreServicesLibrary();
  result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy = (uint64_t)result;
  if (!result)
    __assert_rtn("initLSApplicationProxy_block_invoke", "AFApplicationWorkspaceUtils.m", 17, "classLSApplicationProxy");
  getLSApplicationProxyClass = (uint64_t (*)())LSApplicationProxyFunction;
  return result;
}

void AFApplicationWorkspaceEnumerateInstalledUserVisibleApplications(void *a1)
{
  AFApplicationWorkspaceEnumerateInstalledApplications(7, a1);
}

uint64_t AFDeviceContextPrivacyClassFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AFDeviceContextPrivacyClassUnknown")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AFDeviceContextPrivacyClassUsedByLocalUser")) & 1) != 0)
  {
    v2 = 10;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("AFDeviceContextPrivacyClassSharedWithHome")))
  {
    v2 = 50;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *AFDeviceContextPrivacyClassGetStringDescription(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("AFDeviceContextPrivacyClassUsedByLocalUser");
  if (a1 == 50)
    v1 = CFSTR("AFDeviceContextPrivacyClassSharedWithHome");
  if (a1)
    return v1;
  else
    return CFSTR("AFDeviceContextPrivacyClassUnknown");
}

BOOL AFBluetoothHeadphoneEarbudSideGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBluetoothHeadphoneEarbudSideGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFBluetoothHeadphoneEarbudSideGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A30AC0[a1];
}

uint64_t AFBluetoothHeadphoneEarbudSideGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothHeadphoneEarbudSideGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothHeadphoneEarbudSideGetFromName_onceToken, &__block_literal_global_16867);
    objc_msgSend((id)AFBluetoothHeadphoneEarbudSideGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFSiriDeactivationOptionsValidate(char a1)
{
  return a1 & 3;
}

id AFSiriDeactivationOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("keepUISessionAlive"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("keepAudioSessionAlive"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFSiriDeactivationOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFSiriDeactivationOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFSiriDeactivationOptionsGetFromName_onceToken, &__block_literal_global_17312);
            objc_msgSend((id)_AFSiriDeactivationOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void _af_SaveItemSelection(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  AFDisambiguationEvent *v9;
  void *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  double v26;
  NSObject *v27;
  int v28;
  AFDisambiguationStore *v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  AFDisambiguationEvent *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id object;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  const __CFString *v47;
  const __CFString *v48;
  uint8_t v49[128];
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  id v53;
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "af_indexIdentifierForItem:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v37 = v6;
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_alloc_init(AFDisambiguationEvent);
    v41 = v7;
    -[AFDisambiguationEvent setItemIdentifier:](v9, "setItemIdentifier:", v7);
    -[AFDisambiguationEvent setDate:](v9, "setDate:", v8);
    v38 = a3;
    -[AFDisambiguationEvent setSelectionType:](v9, "setSelectionType:", a3);
    object = v5;
    objc_msgSend(v5, "af_disambiguationInfo");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v36 = v9;
    objc_msgSend(v11, "addObject:", v9);
    +[AFAssistedDisambiguationRules defaultRules](AFAssistedDisambiguationRules, "defaultRules");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v12, "maxPersistenceDepth");
    v39 = v12;
    objc_msgSend(v12, "maxPersistenceAge");
    v14 = v13;
    v15 = objc_msgSend(v11, "count");
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v40 = v10;
    objc_msgSend(v10, "history");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v44;
LABEL_4:
      v20 = 0;
      v21 = v35 >= v15;
      v22 = v35 - v15;
      v15 += v18;
      if (v21)
        v23 = v22;
      else
        v23 = 0;
      while (1)
      {
        if (*(_QWORD *)v44 != v19)
          objc_enumerationMutation(v16);
        if (v23 == v20)
          break;
        v24 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v20);
        objc_msgSend(v24, "date");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v25 || (objc_msgSend(v8, "timeIntervalSinceDate:", v25), v26 > v14))
        {

          break;
        }
        objc_msgSend(v11, "addObject:", v24);

        if (v18 == ++v20)
        {
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
          if (v18)
            goto LABEL_4;
          break;
        }
      }
    }

    objc_msgSend(v40, "setHistory:", v11);
    v28 = 1;
    v5 = object;
    objc_setAssociatedObject(object, "DisambiguationInfoKey", 0, (void *)1);
    v29 = objc_alloc_init(AFDisambiguationStore);
    objc_msgSend(object, "af_disambiguationIdentifier");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[AFDisambiguationStore saveInfo:forIdentifier:](v29, "saveInfo:forIdentifier:", v40, v30);

    if (v38 == 2)
    {
      v28 = 0;
      v31 = CFSTR("assisted");
    }
    else if (v38 == 1)
    {
      v28 = 0;
      v31 = CFSTR("singleResult");
    }
    else if (v38)
    {
      v31 = 0;
    }
    else
    {
      v28 = 0;
      v31 = CFSTR("manual");
    }
    v6 = v37;
    +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v32;
    if (v28)
    {
      objc_msgSend(v32, "logEventWithType:context:", 1926, 0);
    }
    else
    {
      v47 = CFSTR("type");
      v48 = v31;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "logEventWithType:context:", 1926, v34);

    }
    v7 = v41;

  }
  else
  {
    v27 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "_af_SaveItemSelection";
      v52 = 2112;
      v53 = v6;
      v54 = 2112;
      v55 = v5;
      _os_log_error_impl(&dword_19AF50000, v27, OS_LOG_TYPE_ERROR, "%s Not saving disambiguation event. Item %@ does not exist in object %@", buf, 0x20u);
    }
  }

}

id _af_AssistedSelectionItem(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  void *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[4];
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "af_disambiguationInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "history");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v37 = v1;
    +[AFAssistedDisambiguationRules defaultRules](AFAssistedDisambiguationRules, "defaultRules");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v4, "decisionDepth");
    objc_msgSend(v4, "decisionAge");
    v6 = v5;
    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v36 = v3;
    v8 = v3;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    if (v9)
    {
      v10 = v9;
      v39 = 0;
      v11 = *(_QWORD *)v43;
LABEL_4:
      v12 = 0;
      if (v38 >= v39)
        v13 = v38 - v39;
      else
        v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v43 != v11)
          objc_enumerationMutation(v8);
        if (v13 == v12)
          break;
        v14 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v12);
        objc_msgSend(v14, "itemIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v15)
        {
          objc_msgSend(v14, "date");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "timeIntervalSinceNow");
          v18 = -v17;

          if (v6 >= v18)
          {
            objc_msgSend(v4, "weightForEvent:", v14);
            v20 = v19;
            objc_msgSend(v7, "objectForKey:", v15);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "doubleValue");
            v23 = v20 + v22;

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v23);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "itemIdentifier");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "setObject:forKey:", v24, v25);

          }
        }

        if (v10 == ++v12)
        {
          v39 += v12;
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
          if (v10)
            goto LABEL_4;
          break;
        }
      }
    }

    objc_msgSend(v7, "allKeys");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = ___af_AssistedSelectionItem_block_invoke;
    v40[3] = &unk_1E3A30C60;
    v27 = v7;
    v41 = v27;
    objc_msgSend(v26, "sortedArrayUsingComparator:", v40);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "lastObject");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v27, "objectForKey:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "doubleValue");
    v32 = v31;

    objc_msgSend(v4, "decisionThreshold");
    if (v32 - v33 <= -2.22044605e-16)
    {
      v34 = 0;
      v1 = v37;
    }
    else
    {
      v1 = v37;
      objc_msgSend(v37, "af_itemForIndexIdentifier:", v29);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
    }

    v3 = v36;
  }
  else
  {
    v34 = 0;
  }

  return v34;
}

AFDisambiguationInfo *_af_DisambiguationInfo(void *a1)
{
  id v1;
  AFDisambiguationInfo *v2;
  AFDisambiguationStore *v3;
  void *v4;

  v1 = a1;
  objc_getAssociatedObject(v1, "DisambiguationInfoKey");
  v2 = (AFDisambiguationInfo *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v3 = objc_alloc_init(AFDisambiguationStore);
    objc_msgSend(v1, "af_disambiguationIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[AFDisambiguationStore infoForIdentifier:](v3, "infoForIdentifier:", v4);
    v2 = (AFDisambiguationInfo *)objc_claimAutoreleasedReturnValue();

    if (!v2)
      v2 = objc_alloc_init(AFDisambiguationInfo);
    objc_setAssociatedObject(v1, "DisambiguationInfoKey", v2, (void *)1);
  }

  return v2;
}

void _UpdateSha1WithDisambiguationList(CC_SHA1_CTX *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  const char *v7;
  CC_LONG v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  id v17;
  const char *v18;
  const char *v19;
  CC_LONG v20;
  id v21;
  const char *v22;
  const char *v23;
  CC_LONG v24;
  id v25;
  const char *v26;
  const char *v27;
  CC_LONG v28;
  void *v29;
  void *v30;
  id v31;
  const char *v32;
  const char *v33;
  CC_LONG v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1 && v3)
  {
    objc_msgSend(v3, "disambiguationKey");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v6 = (const char *)objc_msgSend(v5, "UTF8String");
    if (v6)
    {
      v7 = v6;
      v8 = strlen(v6);
      CC_SHA1_Update(a1, v7, v8);
    }

    v35 = v4;
    objc_msgSend(v4, "items");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sortedArrayUsingComparator:", &__block_literal_global_17375);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v11 = v10;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v37 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_msgSend(v16, "label");
          v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v18 = (const char *)objc_msgSend(v17, "UTF8String");
          if (v18)
          {
            v19 = v18;
            v20 = strlen(v18);
            CC_SHA1_Update(a1, v19, v20);
          }

          objc_msgSend(v16, "labelValue");
          v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v22 = (const char *)objc_msgSend(v21, "UTF8String");
          if (v22)
          {
            v23 = v22;
            v24 = strlen(v22);
            CC_SHA1_Update(a1, v23, v24);
          }

          objc_msgSend(v16, "title");
          v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v26 = (const char *)objc_msgSend(v25, "UTF8String");
          if (v26)
          {
            v27 = v26;
            v28 = strlen(v26);
            CC_SHA1_Update(a1, v27, v28);
          }

          objc_msgSend(v16, "object");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v29, "identifier");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "absoluteString");
            v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v32 = (const char *)objc_msgSend(v31, "UTF8String");
            if (v32)
            {
              v33 = v32;
              v34 = strlen(v32);
              CC_SHA1_Update(a1, v33, v34);
            }

          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      }
      while (v13);
    }

    v4 = v35;
  }

}

__CFString *AFDisambiguationSelectionTypeGetName(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E3A30C80[a1];
}

void AFDisambiguationHistoryReset()
{
  AFDisambiguationStore *v0;

  v0 = objc_alloc_init(AFDisambiguationStore);
  -[AFDisambiguationStore reset](v0, "reset");

}

void sub_19B00795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B007B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B007D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17426(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17427(uint64_t a1)
{

}

id AFOpportuneSpeakingModelServiceInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432378);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4323D8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0C99E60];
  v15[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_modelWithIdentifier_didUpdateScore_forSpeakable_, 2, 0);

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432438);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setInterface:forSelector:argumentIndex:ofReply:", v1, sel_startWithDelegate_, 0, 0);
  v6 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v14, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_setSpeakable_, 0, 0);

  v9 = (void *)MEMORY[0x1E0C99E60];
  v13 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v13, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setWithArray:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v11, sel_recordFeedbackOfType_forSpeakable_, 1, 0);

  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", v5, sel_createModelWithType_completion_, 0, 1);
  return v0;
}

void sub_19B009BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B009FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B00A234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B00A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B00AD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19B00AE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void *__getBluetoothAccessoryAACPCapabilitiesReceivedSymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!BluetoothManagerLibraryCore_frameworkLibrary_17882)
    BluetoothManagerLibraryCore_frameworkLibrary_17882 = _sl_dlopen();
  v2 = (void *)BluetoothManagerLibraryCore_frameworkLibrary_17882;
  if (!BluetoothManagerLibraryCore_frameworkLibrary_17882)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BluetoothManagerLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFSiriHeadphonesMonitor.m"), 58, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "BluetoothAccessoryAACPCapabilitiesReceived");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getBluetoothAccessoryAACPCapabilitiesReceivedSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__17896(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17897(uint64_t a1)
{

}

void *MediaExperienceLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaExperienceLibraryCore_frameworkLibrary)
    MediaExperienceLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary;
  if (!MediaExperienceLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaExperienceLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFSiriHeadphonesMonitor.m"), 39, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getAVSystemControllerClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  MediaExperienceLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("AVSystemController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getAVSystemControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getAVSystemControllerClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AFSiriHeadphonesMonitor.m"), 40, CFSTR("Unable to find class %s"), "AVSystemController");

    __break(1u);
  }
}

void sub_19B00E034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AFSiriUserNotificationSummaryTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSiriUserNotificationSummaryTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFSiriUserNotificationSummaryTypeGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A31088[a1];
}

uint64_t AFSiriUserNotificationSummaryTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriUserNotificationSummaryTypeGetFromName_onceToken != -1)
      dispatch_once(&AFSiriUserNotificationSummaryTypeGetFromName_onceToken, &__block_literal_global_18185);
    objc_msgSend((id)AFSiriUserNotificationSummaryTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

double AFMyriadMaxNoOperationDelay()
{
  if (AFMyriadMaxNoOperationDelay_onceToken != -1)
    dispatch_once(&AFMyriadMaxNoOperationDelay_onceToken, &__block_literal_global_18308);
  return *(double *)&AFMyriadMaxNoOperationDelay_noopDelay;
}

uint64_t AFMyriadMaxNoOperationAccessoryMessageCount()
{
  return 3;
}

double AFMyriadDecisionGetWaitTime()
{
  return 2.9000001;
}

double AFMyriadMonitorDecisionGetWaitTime()
{
  return 5.80000019;
}

double AFMyriadPreheatGetWaitTime()
{
  return 2.0;
}

id TUHandleFunction()
{
  return (id)classTUHandle;
}

id initTUHandle()
{
  if (initTUHandle_sOnce != -1)
    dispatch_once(&initTUHandle_sOnce, &__block_literal_global_18370);
  return (id)classTUHandle;
}

Class __initTUHandle_block_invoke()
{
  Class result;

  if (!TelephonyUtilitiesLibrary_frameworkLibrary)
  {
    TelephonyUtilitiesLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities", 2);
    if (!TelephonyUtilitiesLibrary_frameworkLibrary)
      __assert_rtn("TelephonyUtilitiesLibrary", "AFSiriIncomingCall.m", 16, "frameworkLibrary");
  }
  result = objc_getClass("TUHandle");
  classTUHandle = (uint64_t)result;
  if (!result)
    __assert_rtn("initTUHandle_block_invoke", "AFSiriIncomingCall.m", 17, "classTUHandle");
  getTUHandleClass = TUHandleFunction;
  return result;
}

void sub_19B010D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _StartUIRequest(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  AFRequestInfo *v11;

  v6 = a2;
  v11 = objc_alloc_init(AFRequestInfo);
  -[AFRequestInfo setNotifyState:](v11, "setNotifyState:", &unk_1E3AA6478);
  objc_msgSend(a5, "objectForKey:", CFSTR("RequiresUserInteraction"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[AFRequestInfo setHandoffRequiresUserInteraction:](v11, "setHandoffRequiresUserInteraction:", objc_msgSend(v7, "BOOLValue"));

  objc_msgSend(a5, "objectForKey:", CFSTR("OriginDeviceName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AFRequestInfo setHandoffOriginDeviceName:](v11, "setHandoffOriginDeviceName:", v8);

  objc_msgSend(a5, "objectForKey:", CFSTR("ActivationEvent"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[AFRequestInfo setActivationEvent:](v11, "setActivationEvent:", objc_msgSend(v9, "integerValue"));

  v10 = v6[4];
  if (v10)
    (*(void (**)(uint64_t, AFRequestInfo *, void *))(v10 + 16))(v10, v11, &__block_literal_global_101);

}

BOOL AFResponseModeDeviceOrientationGetIsValid(unint64_t a1)
{
  return a1 < 7;
}

BOOL AFResponseModeDeviceOrientationGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 6;
}

const __CFString *AFResponseModeDeviceOrientationGetName(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("(unknown)");
  else
    return off_1E3A311B8[a1];
}

uint64_t AFResponseModeDeviceOrientationGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFResponseModeDeviceOrientationGetFromName_onceToken != -1)
      dispatch_once(&AFResponseModeDeviceOrientationGetFromName_onceToken, &__block_literal_global_18600);
    objc_msgSend((id)AFResponseModeDeviceOrientationGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFDeviceContextServiceGetXPCInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432498);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, v3, v4, v5, v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_donateSerializedContextMapByPrivacyClass_withMetadataMap_forType_pushToRemote_completion_, 0, 0);

  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v11, sel_donateSerializedContextMapByPrivacyClass_withMetadataMap_forType_pushToRemote_completion_, 1, 0);

  return v0;
}

uint64_t AFDeviceContextServiceDelegateGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE417710);
}

void sub_19B0131F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18819(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18820(uint64_t a1)
{

}

id AFOpportuneSpeakingModelFeedbackPath()
{
  void *v0;
  void *v1;

  AFUserSupportDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("com.apple.siri.opportune_speaking.feedback.plist"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id _DKSystemEventStreamsFunction_18938()
{
  return (id)class_DKSystemEventStreams_18979;
}

id init_DKSystemEventStreams_18939()
{
  if (init_DKSystemEventStreams_sOnce_18978 != -1)
    dispatch_once(&init_DKSystemEventStreams_sOnce_18978, &__block_literal_global_87);
  return (id)class_DKSystemEventStreams_18979;
}

id _DKQueryFunction_18942()
{
  return (id)class_DKQuery_18974;
}

id init_DKQuery_18943()
{
  if (init_DKQuery_sOnce_18973 != -1)
    dispatch_once(&init_DKQuery_sOnce_18973, &__block_literal_global_90);
  return (id)class_DKQuery_18974;
}

id _DKEventQueryFunction_18947()
{
  return (id)class_DKEventQuery_18968;
}

id init_DKEventQuery_18948()
{
  if (init_DKEventQuery_sOnce_18967 != -1)
    dispatch_once(&init_DKEventQuery_sOnce_18967, &__block_literal_global_93);
  return (id)class_DKEventQuery_18968;
}

id _DKNotificationUsageMetadataKeyFunction()
{
  return (id)class_DKNotificationUsageMetadataKey;
}

id init_DKNotificationUsageMetadataKey()
{
  if (init_DKNotificationUsageMetadataKey_sOnce != -1)
    dispatch_once(&init_DKNotificationUsageMetadataKey_sOnce, &__block_literal_global_96_18961);
  return (id)class_DKNotificationUsageMetadataKey;
}

void CoreDuetLibrary()
{
  if (!CoreDuetLibrary_frameworkLibrary)
  {
    CoreDuetLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet", 2);
    if (!CoreDuetLibrary_frameworkLibrary)
      __assert_rtn("CoreDuetLibrary", "AFOpportuneSpeakingModelFeedback.m", 18, "frameworkLibrary");
  }
}

id _DKKnowledgeStoreFunction_18987()
{
  return (id)class_DKKnowledgeStore_18992;
}

id init_DKKnowledgeStore_18988()
{
  if (init_DKKnowledgeStore_sOnce_18990 != -1)
    dispatch_once(&init_DKKnowledgeStore_sOnce_18990, &__block_literal_global_18991);
  return (id)class_DKKnowledgeStore_18992;
}

const __CFString *AFOpportuneSpeakingModelFeedbackGetDescription(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E3A312A0[a1];
}

__CFString *AFMetricsCategoryGetName(unint64_t a1)
{
  if (a1 > 8)
    return 0;
  else
    return off_1E3A31330[a1];
}

void sub_19B017800(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19B017BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19B018834(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19B018CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B01EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B01EDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19718(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19719(uint64_t a1)
{

}

void sub_19B029CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id AFCreateDirectoryWithPath(void *a1)
{
  id v1;
  void *v2;
  char v3;
  id v4;
  id v5;
  NSObject *v6;
  id v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  v3 = objc_msgSend(v2, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v1, 1, 0, &v8);
  v4 = v8;

  if ((v3 & 1) != 0)
  {
    v5 = v1;
  }
  else
  {
    v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v10 = "AFCreateDirectoryWithPath";
      v11 = 2112;
      v12 = v1;
      v13 = 2112;
      v14 = v4;
      _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Error creating directory %@ - %@", buf, 0x20u);
    }
    v5 = 0;
  }

  return v5;
}

void AFAssetDownloadOptionsApplyForEmbeddedSpeechAssetDownload(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "setAllowsCellularAccess:", 0);
  objc_msgSend(v1, "setDiscretionary:", 0);

}

id AFPNRFatalErrorInfoFromNSError(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0D9A470];
    v2 = a1;
    v3 = objc_alloc_init(v1);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v2, "code"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setErrorCode:", v5);

    objc_msgSend(v2, "domain");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "setErrorDomain:", v6);
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_19B02D004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20347(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20348(uint64_t a1)
{

}

void sub_19B02D550(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t AFUserNotificationAnnouncementSpeakingStateServiceGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4324F8);
}

uint64_t AFUserNotificationAnnouncementSpeakingStateServiceDelegateGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EF00);
}

uint64_t AFShouldUseLanguageDetector(void *a1)
{
  id v1;
  void *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isLanguageDetectorEnabled");
    v4 = objc_msgSend(v2, "isLanguageDetectorEnabledByServer");
    v5 = v3 & v4;
    v6 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      v9 = 136315906;
      v10 = "AFShouldUseLanguageDetector";
      v11 = 1024;
      v12 = v3 & v4;
      v13 = 1024;
      v14 = v3;
      v15 = 1024;
      v16 = v4;
      _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s Language detector enabled - %d (Client: %d, Server: %d)", (uint8_t *)&v9, 0x1Eu);
    }

  }
  else
  {
    v7 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "AFShouldUseLanguageDetector";
      _os_log_error_impl(&dword_19AF50000, v7, OS_LOG_TYPE_ERROR, "%s Language detection user context is nil. Not using language detector", (uint8_t *)&v9, 0xCu);
    }
    v5 = 0;
  }

  return v5;
}

id AFOverrideLanguageCode(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int IsExplicitlySupportedForDictation;
  NSObject *v7;
  id v8;
  void *v9;
  int v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v4)
  {
LABEL_9:
    AFDictationLanguageForKeyboardLanguage(v3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = 0;
    goto LABEL_10;
  }
  IsExplicitlySupportedForDictation = AFPreferencesLanguageIsExplicitlySupportedForDictation(v4);
  v7 = AFSiriLogContextDaemon;
  if (!IsExplicitlySupportedForDictation)
  {
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "AFOverrideLanguageCode";
      v13 = 2114;
      v14 = v5;
      _os_log_error_impl(&dword_19AF50000, v7, OS_LOG_TYPE_ERROR, "%s Dictation override %{public}@ is not in our supported list.", (uint8_t *)&v11, 0x16u);
    }

    goto LABEL_9;
  }
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "AFOverrideLanguageCode";
    v13 = 2112;
    v14 = v5;
    v15 = 2112;
    v16 = v3;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s Skipping dictation fallback code because override %@ has been set for keyboard %@", (uint8_t *)&v11, 0x20u);
  }
  v8 = v5;
  v9 = v8;
LABEL_10:

  return v8;
}

void sub_19B02F1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20717(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20718(uint64_t a1)
{

}

BOOL AFClockTimerStateGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFClockTimerStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFClockTimerStateGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A31D58[a1];
}

uint64_t AFClockTimerStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFClockTimerStateGetFromName_onceToken != -1)
      dispatch_once(&AFClockTimerStateGetFromName_onceToken, &__block_literal_global_20772);
    objc_msgSend((id)AFClockTimerStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSiriDeactivationReasonGetIsValid(unint64_t a1)
{
  return a1 < 0x15;
}

BOOL AFSiriDeactivationReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x14;
}

const __CFString *AFSiriDeactivationReasonGetName(unint64_t a1)
{
  if (a1 > 0x14)
    return CFSTR("(unknown)");
  else
    return off_1E3A31D98[a1];
}

uint64_t AFSiriDeactivationReasonGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriDeactivationReasonGetFromName_onceToken != -1)
      dispatch_once(&AFSiriDeactivationReasonGetFromName_onceToken, &__block_literal_global_20828);
    objc_msgSend((id)AFSiriDeactivationReasonGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id CSActivationEventNotifierFunction()
{
  return (id)classCSActivationEventNotifier;
}

id initCSActivationEventNotifier()
{
  if (initCSActivationEventNotifier_sOnce != -1)
    dispatch_once(&initCSActivationEventNotifier_sOnce, &__block_literal_global_21161);
  return (id)classCSActivationEventNotifier;
}

id CSActivationEventFunction()
{
  return (id)classCSActivationEvent;
}

id initCSActivationEvent()
{
  if (initCSActivationEvent_sOnce != -1)
    dispatch_once(&initCSActivationEvent_sOnce, &__block_literal_global_59_21155);
  return (id)classCSActivationEvent;
}

Class __initCSActivationEvent_block_invoke()
{
  Class result;

  CoreSpeechLibrary();
  result = objc_getClass("CSActivationEvent");
  classCSActivationEvent = (uint64_t)result;
  if (!result)
    __assert_rtn("initCSActivationEvent_block_invoke", "AFSiriActivationHandlerCoreSpeechDaemon.m", 25, "classCSActivationEvent");
  getCSActivationEventClass = CSActivationEventFunction;
  return result;
}

void CoreSpeechLibrary()
{
  if (!CoreSpeechLibrary_frameworkLibrary)
  {
    CoreSpeechLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech", 2);
    if (!CoreSpeechLibrary_frameworkLibrary)
      __assert_rtn("CoreSpeechLibrary", "AFSiriActivationHandlerCoreSpeechDaemon.m", 24, "frameworkLibrary");
  }
}

Class __initCSActivationEventNotifier_block_invoke()
{
  Class result;

  CoreSpeechLibrary();
  result = objc_getClass("CSActivationEventNotifier");
  classCSActivationEventNotifier = (uint64_t)result;
  if (!result)
    __assert_rtn("initCSActivationEventNotifier_block_invoke", "AFSiriActivationHandlerCoreSpeechDaemon.m", 26, "classCSActivationEventNotifier");
  getCSActivationEventNotifierClass = CSActivationEventNotifierFunction;
  return result;
}

id AFBTCarHeadunitsConnectedInLast24Hours()
{
  AFEventStore *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v0 = objc_alloc_init(AFEventStore);
  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__21213;
  v8 = __Block_byref_object_dispose__21214;
  v9 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __AFBTCarHeadunitsConnectedInLast24Hours_block_invoke;
  v3[3] = &unk_1E3A31F10;
  v3[4] = &v4;
  -[AFEventStore fetchHeadunitsConnectedInLast24HoursWithCompletionHandler:](v0, "fetchHeadunitsConnectedInLast24HoursWithCompletionHandler:", v3);
  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19B032740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21213(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21214(uint64_t a1)
{

}

__CFDictionary *AFCopyKeychainBaseQueryDictionary(__CFString *a1, void *a2)
{
  __CFString *v4;
  __CFString *v5;
  id v6;
  __CFString *v7;
  __CFDictionary *Mutable;
  const void *v9;
  const void *v10;

  v4 = CFSTR("Siri Global");
  if (a1)
    v4 = a1;
  v5 = v4;
  v6 = a2;
  v7 = a1;
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CD6C98], (const void *)*MEMORY[0x1E0CD6CA8]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CD6898], CFSTR("com.apple.assistant"));
  v9 = (const void *)*MEMORY[0x1E0CD68F8];
  v10 = (const void *)-[__CFString stringByAppendingFormat:](v5, "stringByAppendingFormat:", CFSTR(" - %@"), v6);

  CFDictionarySetValue(Mutable, v9, v10);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CD6B58], CFSTR("com.apple.assistant"));

  return Mutable;
}

id AFKeychainValueForAccountAndKey(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  __CFDictionary *Dictionary;
  OSStatus v6;
  void *v7;
  NSObject *v8;
  CFTypeRef result;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  __CFString *v16;
  __int16 v17;
  OSStatus v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v3, v4);
    CFDictionarySetValue(Dictionary, (const void *)*MEMORY[0x1E0CD7018], (const void *)*MEMORY[0x1E0C9AE50]);
    result = 0;
    v6 = SecItemCopyMatching(Dictionary, &result);
    if (Dictionary)
      CFRelease(Dictionary);
    if (v6 != -25300 && v6)
    {
      v8 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v12 = "AFKeychainValueForAccountAndKey";
        v13 = 2112;
        v14 = v4;
        v15 = 2112;
        v16 = v3;
        v17 = 1026;
        v18 = v6;
        _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Couldn't find keychain value %@ for account %@ %{public}d", buf, 0x26u);
      }
      v7 = 0;
    }
    else
    {
      v7 = (void *)objc_msgSend((id)result, "copy");
    }
    if (result)
      CFRelease(result);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL AFKeychainRemoveValueForAccountAndKey(void *a1, void *a2)
{
  __CFString *v3;
  id v4;
  __CFDictionary *Dictionary;
  OSStatus v6;
  _BOOL8 v7;
  NSObject *v8;
  int v10;
  const char *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  __CFString *v15;
  __int16 v16;
  OSStatus v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v3, v4);
    v6 = SecItemDelete(Dictionary);
    if (Dictionary)
      CFRelease(Dictionary);
    v7 = v6 == -25300 || v6 == 0;
    if (v6 != -25300)
    {
      if (v6)
      {
        v8 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          v10 = 136315906;
          v11 = "AFKeychainRemoveValueForAccountAndKey";
          v12 = 2112;
          v13 = v4;
          v14 = 2112;
          v15 = v3;
          v16 = 1026;
          v17 = v6;
          _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Couldn't delete value %@ from keychain for account %@ %{public}d", (uint8_t *)&v10, 0x26u);
        }
      }
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL AFKeychainSetValueForAccountAndKey(void *a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  id v7;
  __CFDictionary *Dictionary;
  const void *v9;
  void *v10;
  void *v11;
  const __CFDictionary *v12;
  OSStatus v13;
  _BOOL8 v14;
  NSObject *v15;
  int v17;
  const char *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  __CFString *v22;
  __int16 v23;
  OSStatus v24;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    Dictionary = AFCopyKeychainBaseQueryDictionary(v6, v7);
    v9 = (const void *)*MEMORY[0x1E0CD70D8];
    v10 = (void *)*MEMORY[0x1E0CD68A0];
    keys[0] = *(void **)MEMORY[0x1E0CD70D8];
    keys[1] = v10;
    v11 = (void *)*MEMORY[0x1E0CD68D0];
    values[0] = v5;
    values[1] = v11;
    v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, 0, 0);
    v13 = SecItemUpdate(Dictionary, v12);
    if (v13 == -25300)
    {
      CFDictionarySetValue(Dictionary, v9, v5);
      CFDictionarySetValue(Dictionary, v10, v11);
      v13 = SecItemAdd(Dictionary, 0);
    }
    if (Dictionary)
      CFRelease(Dictionary);
    if (v12)
      CFRelease(v12);
    v14 = v13 == -25300 || v13 == 0;
    if (v13 != -25300)
    {
      if (v13)
      {
        v15 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          v17 = 136315906;
          v18 = "AFKeychainSetValueForAccountAndKey";
          v19 = 2112;
          v20 = v7;
          v21 = 2112;
          v22 = v6;
          v23 = 1026;
          v24 = v13;
          _os_log_error_impl(&dword_19AF50000, v15, OS_LOG_TYPE_ERROR, "%s Couldn't update value %@ from keychain for account %@ %{public}d", (uint8_t *)&v17, 0x26u);
        }
      }
    }
  }
  else
  {
    v14 = AFKeychainRemoveValueForAccountAndKey(v6, v7);
  }

  return v14;
}

uint64_t AFCallStateValidate(char a1)
{
  return a1 & 0xF;
}

id AFCallStateGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = &unk_1E3AAA868;
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("active"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
LABEL_12:
      objc_msgSend(v3, "addObject:", CFSTR("ringing"));
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("sending"));
  if ((v1 & 4) != 0)
    goto LABEL_12;
LABEL_5:
  if ((v1 & 8) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("disconnecting"));
LABEL_7:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t AFCallStateGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFCallStateGetFromName_onceToken != -1)
              dispatch_once(&_AFCallStateGetFromName_onceToken, &__block_literal_global_21322);
            objc_msgSend((id)_AFCallStateGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

BOOL AFInterstitialPhaseGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFInterstitialPhaseGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFInterstitialPhaseGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A32208[a1];
}

uint64_t AFInterstitialPhaseGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFInterstitialPhaseGetFromName_onceToken != -1)
      dispatch_once(&AFInterstitialPhaseGetFromName_onceToken, &__block_literal_global_22526);
    objc_msgSend((id)AFInterstitialPhaseGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

AFNotifyStatePublisher *AFElectionBeginNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.begin", a1, a2);
}

AFNotifyStatePublisher *publisherWithNotificationName(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  AFNotifyStatePublisher *v7;

  v5 = a3;
  getEffectiveNotificationName(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[AFNotifyStatePublisher initWithName:queue:]([AFNotifyStatePublisher alloc], "initWithName:queue:", v6, v5);

  return v7;
}

id getEffectiveNotificationName(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  objc_msgSend(v3, "stringWithCString:encoding:", a1, 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  AFNotifyGetEffectiveNotificationName(v5, v4);
  objc_claimAutoreleasedReturnValue();

  return v5;
}

AFNotifyStatePublisher *AFElectionWinNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.won", a1, a2);
}

AFNotifyStatePublisher *AFElectionLossNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.lost", a1, a2);
}

AFNotifyStatePublisher *AFElectionRepostWinDecisionNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.repost.decision.won", a1, a2);
}

AFNotifyStatePublisher *AFMyriadPreferencesChangedNotifyStatePublisher(void *a1, void *a2)
{
  return publisherWithNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1, a2);
}

id AFMyriadForceNoActivityNotifyStatePublisher(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  v4 = a1;
  publisherWithNotificationName(objc_msgSend(CFSTR("com.apple.siri.myriad.force.noactivity.state"), "UTF8String"), v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

AFNotifyObserver *AFElectionBeginNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.begin", a1, a2, a3, a4);
}

AFNotifyObserver *observerWithNotificationName(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  AFNotifyObserver *v12;

  v9 = a5;
  v10 = a4;
  getEffectiveNotificationName(a1, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[AFNotifyObserver initWithName:options:queue:delegate:]([AFNotifyObserver alloc], "initWithName:options:queue:delegate:", v11, a3, v9, v10);

  return v12;
}

AFNotifyObserver *AFElectionWinNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.won", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionLossNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.decision.lost", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionDecisionRequestNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.get.decision", a1, a2, a3, a4);
}

AFNotifyObserver *AFElectionRepostWinDecisionNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.repost.decision.won", a1, a2, a3, a4);
}

AFNotifyObserver *AFMyriadPreferencesChangedNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  return observerWithNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1, a2, a3, a4);
}

id AFMyriadForceNoActivityNotifyStateObserver(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;

  v7 = a4;
  v8 = a3;
  v9 = a1;
  observerWithNotificationName(objc_msgSend(CFSTR("com.apple.siri.myriad.force.noactivity.state"), "UTF8String"), v9, a2, v8, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id AFMyriadReadDefaultsNotificationName(void *a1)
{
  return getEffectiveNotificationName((uint64_t)"com.apple.siri.myriad.readdefaults", a1);
}

BOOL AFResponseModeVoiceFeedbackGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFResponseModeVoiceFeedbackGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFResponseModeVoiceFeedbackGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A322B8[a1];
}

uint64_t AFResponseModeVoiceFeedbackGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFResponseModeVoiceFeedbackGetFromName_onceToken != -1)
      dispatch_once(&AFResponseModeVoiceFeedbackGetFromName_onceToken, &__block_literal_global_23171);
    objc_msgSend((id)AFResponseModeVoiceFeedbackGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFMyriadGoodnessScoreOverrideOptionGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFMyriadGoodnessScoreOverrideOptionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFMyriadGoodnessScoreOverrideOptionGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return *(&off_1E3A322F8 + a1);
}

uint64_t AFMyriadGoodnessScoreOverrideOptionGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFMyriadGoodnessScoreOverrideOptionGetFromName_onceToken != -1)
      dispatch_once(&AFMyriadGoodnessScoreOverrideOptionGetFromName_onceToken, &__block_literal_global_23189);
    objc_msgSend((id)AFMyriadGoodnessScoreOverrideOptionGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFAnalyticsObservationServiceGetXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432558);
}

void sub_19B03D55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

Class __getBMDeviceBluetoothClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!BiomeLibraryLibraryCore_frameworkLibrary)
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("BMDeviceBluetooth");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getBMDeviceBluetoothClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AFAudioPlaybackOptionsValidate(char a1)
{
  return a1 & 7;
}

id AFAudioPlaybackOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0)
      goto LABEL_4;
LABEL_10:
    objc_msgSend(v3, "addObject:", CFSTR("recyclesWhenDone"));
    if ((v1 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  objc_msgSend(v2, "addObject:", CFSTR("reusesRecycled"));
  if ((v1 & 2) != 0)
    goto LABEL_10;
LABEL_4:
  if ((v1 & 4) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("forcesAirPlay"));
LABEL_6:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t AFAudioPlaybackOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFAudioPlaybackOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFAudioPlaybackOptionsGetFromName_onceToken, &__block_literal_global_23614);
            objc_msgSend((id)_AFAudioPlaybackOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

BOOL SISchemaClientTurnBasedEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaClientTurnContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaClientTurnContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SISchemaClientTurnContextReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaClientAnyEvent);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (SISchemaClientAnyEventReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void AFSiriActivationVoiceActivityDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    if (a2 > 0xF)
      v14 = CFSTR("(unknown)");
    else
      v14 = off_1E3A2D180[a2];
    v15 = v14;
    *(_DWORD *)buf = 136316162;
    v25 = "AFSiriActivationVoiceActivityDetected";
    v26 = 2048;
    v27 = a1;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);

  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceActivityDetected_block_invoke;
  v19[3] = &unk_1E3A32428;
  v22 = a1;
  v23 = a2;
  v20 = v9;
  v21 = v10;
  v16 = v10;
  v17 = v9;
  v18 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  AFSiriActivationPerform(v18, 0, v11);

}

void AFSiriActivationPerform(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  void (**v29)(_QWORD, _QWORD);
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  id v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v38 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v46 = "AFSiriActivationPerform";
    v47 = 2112;
    v48 = v5;
    v49 = 2112;
    v50 = v6;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s context = %@, instanceContext = %@", buf, 0x20u);
  }
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", 2);
  AFSiriActivationGetDarwinNotificationNameFromContext(v5, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v9);

  v39 = v5;
  AFSiriActivationGetDarwinNotificationNameFromContext(v5, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObject:", v10);

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v11 = v8;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v41 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        v17 = AFSiriLogContextConnection;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          v46 = "AFSiriActivationPerform";
          v47 = 2112;
          v48 = v16;
          _os_log_debug_impl(&dword_19AF50000, v17, OS_LOG_TYPE_DEBUG, "%s Post darwin notification %@", buf, 0x16u);
        }
        notify_post((const char *)objc_msgSend(objc_retainAutorelease(v16), "UTF8String"));
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    }
    while (v13);
  }

  if ((AFSiriActivationValidate(v39) & 1) != 0)
  {
    v18 = v39;
    v19 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "_AFSiriActivationGetHandler";
      v47 = 2048;
      v48 = v18;
      _os_log_impl(&dword_19AF50000, v19, OS_LOG_TYPE_INFO, "%s context = %p", buf, 0x16u);
    }
    v20 = objc_msgSend(v18, "source");
    v21 = objc_msgSend(v18, "event") + (v20 << 16);
    os_unfair_lock_lock((os_unfair_lock_t)&s_overrideHandlerMapLock);
    v22 = (void *)s_overrideHandlerMap;
    if (!s_overrideHandlerMap)
    {
      if (!s_overrideHandlerMapProvider)
      {
        v25 = 0;
LABEL_19:
        os_unfair_lock_unlock((os_unfair_lock_t)&s_overrideHandlerMapLock);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v21);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "objectForKey:", v26);
        v27 = (id)objc_claimAutoreleasedReturnValue();

        if (v27)
        {
          v28 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            v46 = "_AFSiriActivationGetHandler";
            v47 = 2112;
            v48 = v27;
            _os_log_impl(&dword_19AF50000, v28, OS_LOG_TYPE_INFO, "%s handler = %@ (override)", buf, 0x16u);
          }
          v29 = (void (**)(_QWORD, _QWORD))v38;
        }
        else
        {
          if (_AFSiriActivationGetDefaultHandler_onceToken != -1)
            dispatch_once(&_AFSiriActivationGetDefaultHandler_onceToken, &__block_literal_global_67_23761);
          v33 = (void *)_AFSiriActivationGetDefaultHandler_handlerMap;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v21);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "objectForKey:", v34);
          v27 = (id)objc_claimAutoreleasedReturnValue();

          v35 = AFSiriLogContextConnection;
          if (!v27)
          {
            v29 = (void (**)(_QWORD, _QWORD))v38;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              v46 = "_AFSiriActivationGetHandler";
              _os_log_error_impl(&dword_19AF50000, v35, OS_LOG_TYPE_ERROR, "%s No handler can be found.", buf, 0xCu);
            }

            v36 = AFSiriLogContextConnection;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v46 = "AFSiriActivationPerform";
              v47 = 2112;
              v48 = v18;
              _os_log_error_impl(&dword_19AF50000, v36, OS_LOG_TYPE_ERROR, "%s No handler for context %@.", buf, 0x16u);
            }
            v27 = 0;
            if (!v38)
              goto LABEL_43;
            v31 = &__block_literal_global_33_23766;
            goto LABEL_42;
          }
          v29 = (void (**)(_QWORD, _QWORD))v38;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            v46 = "_AFSiriActivationGetHandler";
            v47 = 2112;
            v48 = v27;
            _os_log_impl(&dword_19AF50000, v35, OS_LOG_TYPE_INFO, "%s handler = %@ (default)", buf, 0x16u);
          }
        }

        if ((objc_msgSend(v27, "handleContext:completion:", v18, v29) & 1) == 0)
        {
          v30 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v46 = "AFSiriActivationPerform";
            v47 = 2112;
            v48 = v18;
            v49 = 2112;
            v50 = v27;
            _os_log_error_impl(&dword_19AF50000, v30, OS_LOG_TYPE_ERROR, "%s Context %@ rejected by handler %@.", buf, 0x20u);
            if (!v29)
              goto LABEL_43;
            goto LABEL_26;
          }
          if (v29)
          {
LABEL_26:
            v31 = &__block_literal_global_35_23767;
LABEL_42:
            v37 = +[AFSiriActivationResult newWithBuilder:](AFSiriActivationResult, "newWithBuilder:", v31);
            ((void (**)(_QWORD, id))v29)[2](v29, v37);

          }
        }
LABEL_43:

        goto LABEL_44;
      }
      (*(void (**)(void))(s_overrideHandlerMapProvider + 16))();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = (void *)s_overrideHandlerMap;
      s_overrideHandlerMap = v23;

      v22 = (void *)s_overrideHandlerMap;
    }
    v25 = v22;
    goto LABEL_19;
  }
  v32 = AFSiriLogContextConnection;
  v29 = (void (**)(_QWORD, _QWORD))v38;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v46 = "AFSiriActivationPerform";
    v47 = 2112;
    v48 = v39;
    _os_log_error_impl(&dword_19AF50000, v32, OS_LOG_TYPE_ERROR, "%s Invalid context %@.", buf, 0x16u);
    if (!v38)
      goto LABEL_44;
    goto LABEL_29;
  }
  if (v38)
  {
LABEL_29:
    v27 = +[AFSiriActivationResult newWithBuilder:](AFSiriActivationResult, "newWithBuilder:", &__block_literal_global_23758);
    (*((void (**)(id, id))v38 + 2))(v38, v27);
    goto LABEL_43;
  }
LABEL_44:

}

id AFSiriActivationGetDarwinNotificationNameFromContext(void *a1, int a2)
{
  id v3;
  id v4;
  unint64_t v5;
  __CFString *v6;
  __CFString *v7;
  unint64_t v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = a1;
  v4 = objc_alloc(MEMORY[0x1E0CB3940]);
  v5 = objc_msgSend(v3, "source");
  if (v5 > 0xF)
    v6 = CFSTR("(unknown)");
  else
    v6 = off_1E3A2D180[v5];
  v7 = v6;
  v8 = objc_msgSend(v3, "event");
  if (v8 > 0x17)
    v9 = CFSTR("(unknown)");
  else
    v9 = off_1E3A359D8[v8];
  v10 = v9;
  v11 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("com.apple.siri.activation.%@-%@"), v7, v10);

  AFSiriActivationOptionsGetNames(objc_msgSend(v3, "options"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "componentsJoinedByString:", CFSTR("-"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v13, "length"))
  {
    v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-%@"), v11, v13);

    v11 = (void *)v14;
  }
  if (a2)
  {
    objc_msgSend(v3, "deviceID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "length"))
    {
      v16 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@.%@"), v11, v15);

      v11 = (void *)v16;
    }

  }
  return v11;
}

uint64_t AFSiriActivationValidate(void *a1)
{
  id v1;
  NSObject *v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  __CFString *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  __CFString *v28;
  void *v29;
  __CFString *v30;
  __CFString *v31;
  void *v32;
  __CFString *v33;
  void *v34;
  __CFString *v35;
  __CFString *v36;
  void *v37;
  __CFString *v38;
  __CFString *v39;
  void *v40;
  __CFString *v41;
  const char *v42;
  void *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  NSObject *v48;
  int v49;
  const char *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  const __CFString *v54;
  __int16 v55;
  __CFString *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    v49 = 136315394;
    v50 = "AFSiriActivationValidate";
    v51 = 2048;
    v52 = v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s Validating Siri activation context %p...", (uint8_t *)&v49, 0x16u);
  }
  v3 = objc_msgSend(v1, "event");
  v4 = objc_msgSend(v1, "source");
  switch(v4)
  {
    case 1uLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x1841C) != 0)
        goto LABEL_6;
      v11 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v11;
      v12 = CFSTR("builtInMicrophone");
      v13 = CFSTR("builtInMicrophone");
      if (v3 > 0x17)
        v14 = CFSTR("(unknown)");
      else
        v14 = off_1E3A359D8[v3];
      v46 = v14;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("builtInMicrophone");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 2uLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x10380) != 0)
        goto LABEL_6;
      v15 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v15;
      v12 = CFSTR("builtInDigitizer");
      v16 = CFSTR("builtInDigitizer");
      if (v3 > 0x17)
        v17 = CFSTR("(unknown)");
      else
        v17 = off_1E3A359D8[v3];
      v46 = v17;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("builtInDigitizer");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 3uLL:
      if (v3 == 5 || v3 == 16)
        goto LABEL_6;
      v18 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v18;
      v12 = CFSTR("accelerometer");
      v19 = CFSTR("accelerometer");
      if (v3 > 0x17)
        v20 = CFSTR("(unknown)");
      else
        v20 = off_1E3A359D8[v3];
      v46 = v20;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("accelerometer");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 4uLL:
      if (v3 == 10)
        goto LABEL_6;
      objc_msgSend(v1, "deviceID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v21)
      {
        v43 = (void *)AFSiriLogContextUtility;
        if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
          goto LABEL_85;
        v8 = v43;
        v9 = CFSTR("bluetoothDevice");
        v44 = CFSTR("bluetoothDevice");
        v49 = 136315650;
        v50 = "AFSiriActivationValidate";
        v51 = 2112;
        v52 = v1;
        v53 = 2112;
        v54 = CFSTR("bluetoothDevice");
        v42 = "%s Siri activation context %@ is invalid, because source '%@' requires a non-nil device ID.";
        goto LABEL_65;
      }
      if (v3 <= 0x14 && ((1 << v3) & 0x11985E) != 0)
        goto LABEL_6;
      v22 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v22;
      v12 = CFSTR("bluetoothDevice");
      v23 = CFSTR("bluetoothDevice");
      if (v3 > 0x17)
        v24 = CFSTR("(unknown)");
      else
        v24 = off_1E3A359D8[v3];
      v46 = v24;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("bluetoothDevice");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 5uLL:
      objc_msgSend(v1, "deviceID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v25)
      {
        v40 = (void *)AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        {
          v8 = v40;
          v9 = CFSTR("carPlayDevice");
          v41 = CFSTR("carPlayDevice");
          v49 = 136315650;
          v50 = "AFSiriActivationValidate";
          v51 = 2112;
          v52 = v1;
          v53 = 2112;
          v54 = CFSTR("carPlayDevice");
          v42 = "%s Siri activation context %@ is invalid, because source '%@' requires a non-nil device ID.";
LABEL_65:
          _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&v49, 0x20u);
LABEL_66:

LABEL_84:
        }
LABEL_85:
        if (AFIsInternalInstall_onceToken != -1)
          dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
        if (AFIsInternalInstall_isInternal && (v4 == 11 || v3 == 13))
        {
          v48 = AFSiriLogContextUtility;
          v6 = 1;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            v49 = 136315394;
            v50 = "AFSiriActivationValidate";
            v51 = 2112;
            v52 = v1;
            _os_log_impl(&dword_19AF50000, v48, OS_LOG_TYPE_INFO, "%s Siri activation context %@ is valid. (internal override)", (uint8_t *)&v49, 0x16u);
          }
        }
        else
        {
          v6 = 0;
        }
        goto LABEL_91;
      }
      if (v3 > 0x15 || ((1 << v3) & 0x21801C) == 0)
      {
        v26 = (void *)AFSiriLogContextUtility;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        {
          v8 = v26;
          v12 = CFSTR("carPlayDevice");
          v27 = CFSTR("carPlayDevice");
          if (v3 > 0x17)
            v28 = CFSTR("(unknown)");
          else
            v28 = off_1E3A359D8[v3];
          v46 = v28;
          v49 = 136315906;
          v50 = "AFSiriActivationValidate";
          v51 = 2112;
          v52 = v1;
          v53 = 2112;
          v54 = CFSTR("carPlayDevice");
          v55 = 2112;
          v56 = v46;
LABEL_83:
          _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Siri activation context %@ is invalid, because source '%@' does not support event '%@'.", (uint8_t *)&v49, 0x2Au);

          goto LABEL_84;
        }
        goto LABEL_85;
      }
LABEL_6:
      v5 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
      {
        v49 = 136315394;
        v50 = "AFSiriActivationValidate";
        v51 = 2048;
        v52 = v1;
        _os_log_debug_impl(&dword_19AF50000, v5, OS_LOG_TYPE_DEBUG, "%s Siri activation context %p is valid.", (uint8_t *)&v49, 0x16u);
      }
      v6 = 1;
LABEL_91:

      return v6;
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xEuLL:
      if (v3 <= 0x10 && ((1 << v3) & 0x10300) != 0)
        goto LABEL_6;
      v7 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v7;
      v9 = off_1E3A2D180[v4];
      if (v3 > 0x17)
        v10 = CFSTR("(unknown)");
      else
        v10 = off_1E3A359D8[v3];
      v45 = v10;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = v9;
      v55 = 2112;
      v56 = v45;
      _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Siri activation context %@ is invalid, because source '%@' does not support event '%@'.", (uint8_t *)&v49, 0x2Au);

      goto LABEL_66;
    case 0xBuLL:
      if (v3 <= 0x13 && ((1 << v3) & 0xB2000) != 0)
        goto LABEL_6;
      v29 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v29;
      v12 = CFSTR("internal");
      v30 = CFSTR("internal");
      if (v3 > 0x17)
        v31 = CFSTR("(unknown)");
      else
        v31 = off_1E3A359D8[v3];
      v46 = v31;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("internal");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 0xDuLL:
      if (v3 <= 0x17 && ((1 << v3) & 0x818410) != 0)
        goto LABEL_6;
      v34 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v34;
      v12 = CFSTR("honeycombDevice");
      v35 = CFSTR("honeycombDevice");
      if (v3 > 0x17)
        v36 = CFSTR("(unknown)");
      else
        v36 = off_1E3A359D8[v3];
      v46 = v36;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("honeycombDevice");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    case 0xFuLL:
      if (v3 == 4)
        goto LABEL_6;
      v37 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v37;
      v12 = CFSTR("exclave");
      v38 = CFSTR("exclave");
      if (v3 > 0x17)
        v39 = CFSTR("(unknown)");
      else
        v39 = off_1E3A359D8[v3];
      v46 = v39;
      v49 = 136315906;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = CFSTR("exclave");
      v55 = 2112;
      v56 = v46;
      goto LABEL_83;
    default:
      v32 = (void *)AFSiriLogContextUtility;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v8 = v32;
      if (v4 > 0xF)
        v33 = CFSTR("(unknown)");
      else
        v33 = off_1E3A2D180[v4];
      v9 = v33;
      v49 = 136315650;
      v50 = "AFSiriActivationValidate";
      v51 = 2112;
      v52 = v1;
      v53 = 2112;
      v54 = v9;
      v42 = "%s Siri activation context %@ is invalid, because source '%@' is not supported yet.";
      goto LABEL_65;
  }
}

void AFSiriActivationVoiceKeywordDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    if (a2 > 0xF)
      v14 = CFSTR("(unknown)");
    else
      v14 = off_1E3A2D180[a2];
    v15 = v14;
    *(_DWORD *)buf = 136316162;
    v25 = "AFSiriActivationVoiceKeywordDetected";
    v26 = 2048;
    v27 = a1;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);

  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceKeywordDetected_block_invoke;
  v19[3] = &unk_1E3A32428;
  v22 = a1;
  v23 = a2;
  v20 = v9;
  v21 = v10;
  v16 = v10;
  v17 = v9;
  v18 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  AFSiriActivationPerform(v18, 0, v11);

}

void AFSiriActivationVoiceTriggerPrewarm(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    if (a2 > 0xF)
      v14 = CFSTR("(unknown)");
    else
      v14 = off_1E3A2D180[a2];
    v15 = v14;
    *(_DWORD *)buf = 136316162;
    v25 = "AFSiriActivationVoiceTriggerPrewarm";
    v26 = 2048;
    v27 = a1;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);

  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceTriggerPrewarm_block_invoke;
  v19[3] = &unk_1E3A32428;
  v22 = a1;
  v23 = a2;
  v20 = v9;
  v21 = v10;
  v16 = v10;
  v17 = v9;
  v18 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  AFSiriActivationPerform(v18, 0, v11);

}

void AFSiriActivationVoiceTriggerActivate(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    if (a2 > 0xF)
      v14 = CFSTR("(unknown)");
    else
      v14 = off_1E3A2D180[a2];
    v15 = v14;
    *(_DWORD *)buf = 136316162;
    v25 = "AFSiriActivationVoiceTriggerActivate";
    v26 = 2048;
    v27 = a1;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);

  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationVoiceTriggerActivate_block_invoke;
  v19[3] = &unk_1E3A32428;
  v22 = a1;
  v23 = a2;
  v20 = v9;
  v21 = v10;
  v16 = v10;
  v17 = v9;
  v18 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  AFSiriActivationPerform(v18, 0, v11);

}

void AFSiriActivationContinuousVoiceTriggerDetected(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  __CFString *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v13 = v12;
    if (a2 > 0xF)
      v14 = CFSTR("(unknown)");
    else
      v14 = off_1E3A2D180[a2];
    v15 = v14;
    *(_DWORD *)buf = 136316162;
    v25 = "AFSiriActivationContinuousVoiceTriggerDetected";
    v26 = 2048;
    v27 = a1;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v9;
    v32 = 2112;
    v33 = v10;
    _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s timestamp = %llu, source = %@, deviceID = %@, context = %@", buf, 0x34u);

  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationContinuousVoiceTriggerDetected_block_invoke;
  v19[3] = &unk_1E3A32428;
  v22 = a1;
  v23 = a2;
  v20 = v9;
  v21 = v10;
  v16 = v10;
  v17 = v9;
  v18 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  AFSiriActivationPerform(v18, 0, v11);

}

void AFSiriActivationBuiltInMicVoice(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationBuiltInMicVoice";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationBuiltInMicVoice_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerformLegacy(v9, v6);

}

void AFSiriActivationPerformLegacy(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationPerformLegacy_block_invoke;
  v5[3] = &unk_1E3A35680;
  v6 = v3;
  v4 = v3;
  AFSiriActivationPerform(a1, 0, v5);

}

void AFSiriActivationBuiltInMicVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationBuiltInMicVoiceTriggerPrewarm";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationBuiltInMicVoiceTriggerPrewarm_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerformLegacy(v9, v6);

}

void AFSiriActivationBuiltInMicVoiceTrigger(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationBuiltInMicVoiceTrigger";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationBuiltInMicVoiceTrigger_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerformLegacy(v9, v6);

}

void AFSiriActivationHearst(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    v14 = 136315138;
    v15 = "AFSiriActivationHearst";
    _os_log_error_impl(&dword_19AF50000, v12, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceDoubleTap() or AFSiriActivationBluetoothDeviceVoice() instead.", (uint8_t *)&v14, 0xCu);
  }
  if (a2 == 2)
  {
    AFSiriActivationHearstVoice(a1, v9, v10, v11);
  }
  else if (a2 == 1)
  {
    AFSiriActivationHearstDoubleTap(a1, v9, v10, v11);
  }
  else if (v11)
  {
    +[AFError errorWithCode:](AFError, "errorWithCode:", 13);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v11 + 2))(v11, 0, v13);

  }
}

void AFSiriActivationHearstDoubleTap(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v15 = "AFSiriActivationHearstDoubleTap";
    _os_log_error_impl(&dword_19AF50000, v10, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceDoubleTap() instead.", buf, 0xCu);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationHearstDoubleTap_block_invoke;
  v12[3] = &unk_1E3A35680;
  v13 = v9;
  v11 = v9;
  AFSiriActivationBluetoothDeviceDoubleTap(a1, v7, v8, v12);

}

void AFSiriActivationHearstVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v15 = "AFSiriActivationHearstVoice";
    _os_log_error_impl(&dword_19AF50000, v10, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceVoice() instead.", buf, 0xCu);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationHearstVoice_block_invoke;
  v12[3] = &unk_1E3A35680;
  v13 = v9;
  v11 = v9;
  AFSiriActivationBluetoothDeviceVoice(a1, v7, v8, v12);

}

void AFSiriActivationBluetoothDeviceVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v20 = "AFSiriActivationBluetoothDeviceVoice";
    v21 = 2048;
    v22 = a1;
    v23 = 2112;
    v24 = v7;
    v25 = 2112;
    v26 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "logEventWithType:machAbsoluteTime:context:", 5402, a1, 0);

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __AFSiriActivationBluetoothDeviceVoice_block_invoke;
  v15[3] = &unk_1E3A32478;
  v17 = v8;
  v18 = a1;
  v16 = v7;
  v12 = v8;
  v13 = v7;
  v14 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v15);
  AFSiriActivationPerform(v14, 0, v9);

}

void AFSiriActivationBluetoothDeviceDoubleTap(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v24 = "AFSiriActivationBluetoothDeviceDoubleTap";
    v25 = 2048;
    v26 = a1;
    v27 = 2112;
    v28 = v7;
    v29 = 2112;
    v30 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "logEventWithType:machAbsoluteTime:context:", 5401, a1, 0);

  v12 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke;
  v19[3] = &unk_1E3A32478;
  v21 = v8;
  v22 = a1;
  v20 = v7;
  v13 = v8;
  v14 = v7;
  v15 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v19);
  v17[0] = v12;
  v17[1] = 3221225472;
  v17[2] = __AFSiriActivationBluetoothDeviceDoubleTap_block_invoke_2;
  v17[3] = &unk_1E3A35680;
  v18 = v9;
  v16 = v9;
  AFSiriActivationPerform(v15, 0, v17);

}

void AFSiriActivationHearstBoron(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v14 = "AFSiriActivationHearstBoron";
    _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s Deprecated, use AFSiriActivationBluetoothDeviceBoronSignal() instead.", buf, 0xCu);
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __AFSiriActivationHearstBoron_block_invoke;
  v11[3] = &unk_1E3A35680;
  v12 = v8;
  v10 = v8;
  AFSiriActivationBluetoothDeviceBoronSignal(a1, v7, v11, a4);

}

void AFSiriActivationBluetoothDeviceBoronSignal(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  double v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v17 = "AFSiriActivationBluetoothDeviceBoronSignal";
    v18 = 2048;
    v19 = a1;
    v20 = 2112;
    v21 = v7;
    v22 = 2048;
    v23 = a4;
    _os_log_impl(&dword_19AF50000, v9, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, score = %f", buf, 0x2Au);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __AFSiriActivationBluetoothDeviceBoronSignal_block_invoke;
  v12[3] = &unk_1E3A324A0;
  v13 = v7;
  v14 = a1;
  v15 = a4;
  v10 = v7;
  v11 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v12);
  AFSiriActivationPerform(v11, 0, v8);

}

void AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationBluetoothDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationBluetoothDeviceVoiceTrigger";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationBluetoothDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationBluetoothDeviceTriggerless(uint64_t a1, void *a2, void *a3, void *a4, double a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  double v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v22 = "AFSiriActivationBluetoothDeviceTriggerless";
    v23 = 2048;
    v24 = a1;
    v25 = 2048;
    v26 = a5;
    v27 = 2112;
    v28 = v9;
    _os_log_impl(&dword_19AF50000, v12, OS_LOG_TYPE_INFO, "%s timestamp = %llu, activationTimeShift = %f, deviceID = %@", buf, 0x2Au);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __AFSiriActivationBluetoothDeviceTriggerless_block_invoke;
  v16[3] = &unk_1E3A32428;
  v18 = v10;
  v19 = a1;
  v20 = a5;
  v17 = v9;
  v13 = v10;
  v14 = v9;
  v15 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v16);
  AFSiriActivationPerform(v15, 0, v11);

}

void AFSiriActivationBluetoothDeviceButtonPress(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationBluetoothDeviceButtonPress";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationBluetoothDeviceButtonPress_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationBluetoothDeviceButtonRelease(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationBluetoothDeviceButtonRelease";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationBluetoothDeviceButtonRelease_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationHoneycombDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationHoneycombDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationHoneycombDeviceVoiceTrigger";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationHoneycombDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationCarPlayDeviceVoice(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationCarPlayDeviceVoice";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationCarPlayDeviceVoice_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationCarPlayDeviceVoiceTrigger(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationCarPlayDeviceVoiceTrigger";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationCarPlayDeviceVoiceTrigger_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationRaiseToSpeakPrewarm(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationRaiseToSpeakPrewarm";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationRaiseToSpeakPrewarm_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerformLegacy(v9, v6);

}

void AFSiriActivationRaiseToSpeak(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationRaiseToSpeak";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationRaiseToSpeak_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerformLegacy(v9, v6);

}

void AFSiriActivationTriggerless(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v14 = "AFSiriActivationTriggerless";
    v15 = 2048;
    v16 = a1;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFSiriActivationTriggerless_block_invoke;
  v10[3] = &unk_1E3A32450;
  v11 = v5;
  v12 = a1;
  v8 = v5;
  v9 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v10);
  AFSiriActivationPerform(v9, 0, v6);

}

void AFSiriActivationContinuousConversation(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v19 = "AFSiriActivationContinuousConversation";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationContinuousConversation_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v7;
  v17 = a1;
  v15 = v8;
  v11 = v7;
  v12 = v8;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationContinuousConversationHearst(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v19 = "AFSiriActivationContinuousConversationHearst";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationContinuousConversationHearst_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v7;
  v17 = a1;
  v15 = v8;
  v11 = v7;
  v12 = v8;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationContinuousConversationJarvis(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v19 = "AFSiriActivationContinuousConversationJarvis";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationContinuousConversationJarvis_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v7;
  v17 = a1;
  v15 = v8;
  v11 = v7;
  v12 = v8;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationContinuousConversationHoneycomb(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v19 = "AFSiriActivationContinuousConversationHoneycomb";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationContinuousConversationHoneycomb_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v7;
  v17 = a1;
  v15 = v8;
  v11 = v7;
  v12 = v8;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationSiriPrompt(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v19 = "AFSiriActivationSiriPrompt";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s LAS activation: timestamp = %llu, context = %@", buf, 0x20u);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationSiriPrompt_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v7;
  v17 = a1;
  v15 = v8;
  v11 = v7;
  v12 = v8;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationHardwareKeyboardInvocation(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationHardwareKeyboardInvocation";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationHardwareKeyboardInvocation_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerformLegacy(v13, v9);

}

void AFSiriActivationExternalKeyboardInvocation(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v19 = "AFSiriActivationExternalKeyboardInvocation";
    v20 = 2048;
    v21 = a1;
    v22 = 2112;
    v23 = v7;
    v24 = 2112;
    v25 = v8;
    _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s timestamp = %llu, deviceID = %@, context = %@", buf, 0x2Au);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __AFSiriActivationExternalKeyboardInvocation_block_invoke;
  v14[3] = &unk_1E3A32478;
  v16 = v8;
  v17 = a1;
  v15 = v7;
  v11 = v8;
  v12 = v7;
  v13 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v14);
  AFSiriActivationPerform(v13, 0, v9);

}

void AFSiriActivationSetOverrideHandlerMapProvider(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&s_overrideHandlerMapLock);
  v2 = MEMORY[0x1A1AC0C3C](v1);

  v3 = (void *)s_overrideHandlerMapProvider;
  s_overrideHandlerMapProvider = v2;

  v4 = (void *)s_overrideHandlerMap;
  s_overrideHandlerMap = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)&s_overrideHandlerMapLock);
}

AFRequestInfo *AFSiriActivationCreateRequestInfoFromContext(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  AFRequestInfo *v10;
  void *v11;
  NSObject *v12;
  __CFString *v13;
  int v14;
  NSObject *v15;
  AFSpeechRequestOptions *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  __CFString *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v40 = 136315394;
    v41 = "AFSiriActivationCreateRequestInfoFromContext";
    v42 = 2112;
    v43 = (uint64_t)v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s context = %@", (uint8_t *)&v40, 0x16u);
  }
  v3 = objc_msgSend(v1, "source");
  v4 = objc_msgSend(v1, "event");
  v5 = v4;
  switch(v3)
  {
    case 1:
      if (v4 == 4)
        goto LABEL_25;
      if (v4 != 16)
        goto LABEL_20;
      goto LABEL_35;
    case 3:
      if (v4 != 5)
        goto LABEL_13;
      v6 = 0;
      v7 = 13;
      goto LABEL_41;
    case 4:
      v6 = 0;
      v7 = 14;
      switch(v4)
      {
        case 1:
          goto LABEL_41;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
          goto LABEL_32;
        case 4:
          v6 = 0;
          v7 = 15;
          goto LABEL_41;
        case 8:
          v6 = 0;
          v7 = 27;
          goto LABEL_41;
        case 10:
          goto LABEL_21;
        default:
          if (v4 == 16)
            goto LABEL_35;
          if (v4 != 20)
            goto LABEL_32;
          v6 = 0;
          v7 = 34;
          break;
      }
      goto LABEL_41;
    case 5:
      if (v4 == 4)
      {
        v6 = 0;
        v7 = 16;
        goto LABEL_41;
      }
      if (v4 == 21)
      {
        v6 = 0;
        v7 = 35;
        goto LABEL_41;
      }
LABEL_13:
      if (v4 == 16)
        goto LABEL_35;
      goto LABEL_32;
    case 11:
      if (v4 == 17)
      {
        v6 = 0;
        v7 = 30;
      }
      else
      {
        if (v4 != 19)
          goto LABEL_32;
        v6 = 0;
        v7 = 5;
      }
      goto LABEL_41;
    case 13:
      if (v4 > 15)
      {
        if (v4 == 16)
        {
LABEL_35:
          v6 = 0;
          v7 = 28;
          goto LABEL_41;
        }
        if (v4 == 23)
        {
          v6 = 0;
          v7 = 36;
          goto LABEL_41;
        }
      }
      else
      {
        if (v4 == 4)
        {
          v6 = 0;
          v7 = 31;
          goto LABEL_41;
        }
LABEL_20:
        if (v4 == 10)
        {
LABEL_21:
          v6 = 0;
          v7 = 17;
LABEL_41:
          v11 = (void *)AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            v12 = v11;
            v13 = off_1E3A2DF78[v7];
            v14 = AFPreferencesTypeToSiriEnabled();
            v40 = 136316162;
            v41 = "AFSiriActivationCreateRequestInfoFromContext";
            v42 = 2048;
            v43 = v7;
            v44 = 2112;
            v45 = v13;
            v46 = 1024;
            v47 = v14;
            v48 = 1024;
            v49 = v6;
            _os_log_impl(&dword_19AF50000, v12, OS_LOG_TYPE_INFO, "%s speechEvent = %ld (%@), isTypeToSiriEnabled = %d, isTextRequest = %d.", (uint8_t *)&v40, 0x2Cu);

          }
          v10 = -[AFRequestInfo initWithTimestamp:]([AFRequestInfo alloc], "initWithTimestamp:", objc_msgSend(v1, "timestamp"));
          if (v6)
          {
            v15 = AFSiriLogContextConnection;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
            {
              v40 = 136315138;
              v41 = "AFSiriActivationCreateRequestInfoFromContext";
              _os_log_impl(&dword_19AF50000, v15, OS_LOG_TYPE_INFO, "%s Activation context is textRequest. Don't set speechRequestOptions.", (uint8_t *)&v40, 0xCu);
            }
          }
          else
          {
            v16 = -[AFSpeechRequestOptions initWithActivationEvent:]([AFSpeechRequestOptions alloc], "initWithActivationEvent:", v7);
            objc_msgSend(v1, "deviceID");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setActivationDeviceIdentifier:](v16, "setActivationDeviceIdentifier:", v17);

            v18 = objc_msgSend(v1, "timestamp");
            if (_AFMachAbsoluteTimeRate_onceToken != -1)
              dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
            -[AFSpeechRequestOptions setActivationEventTime:](v16, "setActivationEventTime:", *(double *)&_AFMachAbsoluteTimeRate_rate * (double)v18 / 1000000000.0);
            -[AFSpeechRequestOptions setActivationEventMachAbsoluteTime:](v16, "setActivationEventMachAbsoluteTime:", objc_msgSend(v1, "timestamp"));
            objc_msgSend(v1, "userInfo");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "objectForKey:", CFSTR("hasPlayedStartAlert"));
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setHasPlayedStartAlert:](v16, "setHasPlayedStartAlert:", objc_msgSend(v20, "BOOLValue"));

            objc_msgSend(v1, "userInfo");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "objectForKey:", CFSTR("voiceTriggerInfo"));
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setVoiceTriggerEventInfo:](v16, "setVoiceTriggerEventInfo:", v22);

            objc_msgSend(v1, "userInfo");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "objectForKey:", CFSTR("raiseToSpeakInfo"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setRaiseToSpeakEventInfo:](v16, "setRaiseToSpeakEventInfo:", v24);

            objc_msgSend(v1, "userInfo");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "objectForKey:", CFSTR("continuousConversationInfo"));
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setContinuousConversationInfo:](v16, "setContinuousConversationInfo:", v26);

            objc_msgSend(v1, "userInfo");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "objectForKey:", CFSTR("intuitiveConversationRequestId"));
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setIntuitiveConversationRequestId:](v16, "setIntuitiveConversationRequestId:", v28);

            if (AFSupportsSCDAFramework_onceToken != -1)
              dispatch_once(&AFSupportsSCDAFramework_onceToken, &__block_literal_global_143_40244);
            v29 = AFSupportsSCDAFramework_scdaFrameworkEnabled;
            objc_msgSend(v1, "userInfo");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = v30;
            if (v29)
            {
              objc_msgSend(v30, "objectForKey:", CFSTR("scdaContext"));
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[AFSpeechRequestOptions setScdaContext:](v16, "setScdaContext:", v32);
            }
            else
            {
              objc_msgSend(v30, "objectForKey:", CFSTR("myriadContext"));
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[AFSpeechRequestOptions setMyriadContext:](v16, "setMyriadContext:", v32);
            }

            objc_msgSend(v1, "userInfo");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "objectForKey:", CFSTR("analyticsContext"));
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            -[AFSpeechRequestOptions setClientAnalyticsContext:](v16, "setClientAnalyticsContext:", v34);

            objc_msgSend(v1, "userInfo");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "objectForKey:", CFSTR("endpointerMode"));
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if (v36)
            {
              v37 = objc_msgSend(v36, "integerValue");
              if ((unint64_t)(v37 - 1) >= 4)
                v38 = 3;
              else
                v38 = v37;
            }
            else
            {
              v38 = 3;
            }

            -[AFSpeechRequestOptions setEndpointerOperationMode:](v16, "setEndpointerOperationMode:", v38);
            -[AFRequestInfo setSpeechRequestOptions:](v10, "setSpeechRequestOptions:", v16);

          }
          goto LABEL_59;
        }
      }
LABEL_32:
      v9 = AFSiriLogContextConnection;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
      {
        v40 = 136315394;
        v41 = "AFSiriActivationCreateRequestInfoFromContext";
        v42 = 2112;
        v43 = (uint64_t)v1;
        _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s Unable to resolve speech event for context %@.", (uint8_t *)&v40, 0x16u);
      }
      v10 = 0;
LABEL_59:

      return v10;
    case 14:
      v8 = AFPreferencesTypeToSiriEnabled();
      if (v5 != 8)
        goto LABEL_32;
      v6 = v8;
      v7 = 1;
      goto LABEL_41;
    case 15:
      if (v4 != 4)
        goto LABEL_32;
LABEL_25:
      v6 = 0;
      v7 = 8;
      goto LABEL_41;
    default:
      goto LABEL_32;
  }
}

id AFSiriActivationCreateContextFromXPCDictionary(void *a1)
{
  id v1;
  id v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationCreateContextFromXPCDictionary_block_invoke;
  v5[3] = &unk_1E3A32528;
  v6 = v1;
  v2 = v1;
  v3 = +[AFSiriActivationContext newWithBuilder:](AFSiriActivationContext, "newWithBuilder:", v5);

  return v3;
}

id AFSiriActivationCreateXPCDictionaryFromContext(void *a1)
{
  id v1;
  xpc_object_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  id v8;
  uint64_t i;
  id v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  id v17;
  xpc_object_t values[3];
  char *keys[2];
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  *(_OWORD *)keys = xmmword_1E3A32548;
  v20 = "s";
  values[0] = xpc_uint64_create(objc_msgSend(v1, "timestamp"));
  values[1] = xpc_int64_create(objc_msgSend(v1, "event"));
  values[2] = xpc_int64_create(objc_msgSend(v1, "source"));
  v2 = xpc_dictionary_create((const char *const *)keys, values, 3uLL);
  objc_msgSend(v1, "deviceID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "length"))
    xpc_dictionary_set_string(v2, "d", (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
  objc_msgSend(v1, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count"))
  {
    v11 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v4, 1, &v11);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v11;
    if (v6)
    {
      v7 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v13 = "AFSiriActivationCreateXPCDictionaryFromContext";
        v14 = 2112;
        v15 = v4;
        v16 = 2112;
        v17 = v6;
        _os_log_error_impl(&dword_19AF50000, v7, OS_LOG_TYPE_ERROR, "%s Unable to serialize user info %@ due to error %@.", buf, 0x20u);
      }
    }
    if (objc_msgSend(v5, "length"))
    {
      v8 = objc_retainAutorelease(v5);
      xpc_dictionary_set_data(v2, "u", (const void *)objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"));
    }

  }
  for (i = 2; i != -1; --i)

  return v2;
}

id AFSiriActivationCreateResultFromXPCDictionary(void *a1)
{
  id v1;
  id v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __AFSiriActivationCreateResultFromXPCDictionary_block_invoke;
  v5[3] = &unk_1E3A32DB0;
  v6 = v1;
  v2 = v1;
  v3 = +[AFSiriActivationResult newWithBuilder:](AFSiriActivationResult, "newWithBuilder:", v5);

  return v3;
}

id AFSiriActivationCreateXPCDictionaryFromResult(void *a1)
{
  id v1;
  xpc_object_t v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  id v15;
  xpc_object_t values;
  char *keys[2];

  keys[1] = *(char **)MEMORY[0x1E0C80C00];
  keys[0] = "a";
  v1 = a1;
  values = xpc_int64_create(objc_msgSend(v1, "actionType"));
  v2 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  objc_msgSend(v1, "error");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v9 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v9;
    if (v5)
    {
      v6 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v11 = "AFSiriActivationCreateXPCDictionaryFromResult";
        v12 = 2112;
        v13 = v3;
        v14 = 2112;
        v15 = v5;
        _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Unable to serialize error %@ due to error %@.", buf, 0x20u);
      }
    }
    if (objc_msgSend(v4, "length"))
    {
      v7 = objc_retainAutorelease(v4);
      xpc_dictionary_set_data(v2, "e", (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"));
    }

  }
  return v2;
}

id AFPeerContentTupleGetContentMapFromArray(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  uint64_t (**v11)(id, void *);
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void (**v32)(_QWORD, _QWORD);
  id obj;
  void (**v34)(id, void *);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v34 = a4;
  v32 = (void (**)(_QWORD, _QWORD))v10;
  if (v10)
  {
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDictionary<NSString *,id> * _Nullable AFPeerContentTupleGetContentMapFromArray(NSArray<AFPeerContentTuple *> * _Nullable __strong, __strong AFPeerContentTupleKeyProvider _Nonnull, AFPeerContentTupleContentFilter  _Nullable __strong, AFPeerContentTupleFallbackPeerProvider  _Nullable __strong, NSArray<AFPeerContentTuple *> * _Nullable __autoreleasing * _Nullable)");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("AFPeerContentUtils.m"), 15, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("keyProvider != nil"));

  if (a5)
LABEL_3:
    *a5 = 0;
LABEL_4:
  if (v9)
  {
    v12 = objc_msgSend(v9, "count");
    if (v12)
    {
      v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", v12);
      v28 = a5;
      if (a5)
        v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      else
        v13 = 0;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v29 = v9;
      obj = v9;
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v36;
        do
        {
          v18 = 0;
          v31 = v16;
          do
          {
            if (*(_QWORD *)v36 != v17)
              objc_enumerationMutation(obj);
            v19 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v18);
            objc_msgSend(v19, "content");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            if (v20 && (!v11 || (v11[2](v11, v20) & 1) != 0))
            {
              objc_msgSend(v19, "info");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (v21)
              {
                ((void (**)(_QWORD, void *))v32)[2](v32, v21);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v22 = 0;
              }
              if (v34 && !v22)
              {
                v34[2](v34, v20);
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                if (v23)
                {
                  ((void (**)(_QWORD, void *))v32)[2](v32, v23);
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  v22 = 0;
                }

              }
              if (v22)
              {
                objc_msgSend(v30, "objectForKey:", v22);
                v24 = (void *)objc_claimAutoreleasedReturnValue();

                if (v24)
                  objc_msgSend(v13, "addObject:", v19);
                else
                  objc_msgSend(v30, "setObject:forKey:", v20, v22);
                v16 = v31;
              }
              else
              {
                objc_msgSend(v13, "addObject:", v19);
              }

            }
            else
            {
              objc_msgSend(v13, "addObject:", v19);
            }

            ++v18;
          }
          while (v16 != v18);
          v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        }
        while (v16);
      }

      if (v28)
        *v28 = (id)objc_msgSend(v13, "copy");
      v14 = (void *)objc_msgSend(v30, "copy");

      v9 = v29;
    }
    else
    {
      v14 = (void *)MEMORY[0x1E0C9AA70];
    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

BOOL AFMediaPlaybackStateGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFMediaPlaybackStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

const __CFString *AFMediaPlaybackStateGetName(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("(unknown)");
  else
    return *(&off_1E3A325B8 + a1);
}

uint64_t AFMediaPlaybackStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFMediaPlaybackStateGetFromName_onceToken != -1)
      dispatch_once(&AFMediaPlaybackStateGetFromName_onceToken, &__block_literal_global_23992);
    objc_msgSend((id)AFMediaPlaybackStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void *MediaExperienceLibrary_24137()
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaExperienceLibraryCore_frameworkLibrary_24158)
    MediaExperienceLibraryCore_frameworkLibrary_24158 = _sl_dlopen();
  v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary_24158;
  if (!MediaExperienceLibraryCore_frameworkLibrary_24158)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaExperienceLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFSiriAudioRoute.m"), 25, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

BOOL AFUserIdentityClassficationGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFUserIdentityClassficationGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFUserIdentityClassficationGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A32620[a1];
}

uint64_t AFUserIdentityClassficationGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFUserIdentityClassficationGetFromName_onceToken != -1)
      dispatch_once(&AFUserIdentityClassficationGetFromName_onceToken, &__block_literal_global_24180);
    objc_msgSend((id)AFUserIdentityClassficationGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSetAudioSessionActiveReasonGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSetAudioSessionActiveReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFSetAudioSessionActiveReasonGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A32718[a1];
}

uint64_t AFSetAudioSessionActiveReasonGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSetAudioSessionActiveReasonGetFromName_onceToken != -1)
      dispatch_once(&AFSetAudioSessionActiveReasonGetFromName_onceToken, &__block_literal_global_24940);
    objc_msgSend((id)AFSetAudioSessionActiveReasonGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B04D0C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFString *AFOpportuneSpeakingModelTypeGetDescription(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E3A327B0[a1];
}

uint64_t AFSetAudioSessionInactiveOptionsValidate(char a1)
{
  return a1 & 1;
}

id AFSetAudioSessionInactiveOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("performsOnlyIfIdle"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFSetAudioSessionInactiveOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFSetAudioSessionInactiveOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFSetAudioSessionInactiveOptionsGetFromName_onceToken, &__block_literal_global_25438);
            objc_msgSend((id)_AFSetAudioSessionInactiveOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19B050438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25470(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25471(uint64_t a1)
{

}

uint64_t AFClockAlarmRepeatOptionsValidate(char a1)
{
  return a1 & 0x7F;
}

id AFClockAlarmRepeatOptionsGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("monday"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("tuesday"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("wednesday"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("thursday"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("saturday"));
    if ((v1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("friday"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x40) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("sunday"));
LABEL_10:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t AFClockAlarmRepeatOptionsGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFClockAlarmRepeatOptionsGetFromName_onceToken != -1)
              dispatch_once(&_AFClockAlarmRepeatOptionsGetFromName_onceToken, &__block_literal_global_25498);
            objc_msgSend((id)_AFClockAlarmRepeatOptionsGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19B0513B0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL AFHomeAccessorySiriDataSharingPropagationEventGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFHomeAccessorySiriDataSharingPropagationEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFHomeAccessorySiriDataSharingPropagationEventGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A329C8[a1];
}

uint64_t AFHomeAccessorySiriDataSharingPropagationEventGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFHomeAccessorySiriDataSharingPropagationEventGetFromName_onceToken != -1)
      dispatch_once(&AFHomeAccessorySiriDataSharingPropagationEventGetFromName_onceToken, &__block_literal_global_25869);
    objc_msgSend((id)AFHomeAccessorySiriDataSharingPropagationEventGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AWAttentionAwarenessConfigurationFunction()
{
  return (id)classAWAttentionAwarenessConfiguration;
}

id initAWAttentionAwarenessConfiguration()
{
  if (initAWAttentionAwarenessConfiguration_sOnce != -1)
    dispatch_once(&initAWAttentionAwarenessConfiguration_sOnce, &__block_literal_global_25912);
  return (id)classAWAttentionAwarenessConfiguration;
}

id AWAttentionAwarenessClientFunction()
{
  return (id)classAWAttentionAwarenessClient;
}

id initAWAttentionAwarenessClient()
{
  if (initAWAttentionAwarenessClient_sOnce != -1)
    dispatch_once(&initAWAttentionAwarenessClient_sOnce, &__block_literal_global_23_25905);
  return (id)classAWAttentionAwarenessClient;
}

Class __initAWAttentionAwarenessClient_block_invoke()
{
  Class result;

  AttentionAwarenessLibrary();
  result = objc_getClass("AWAttentionAwarenessClient");
  classAWAttentionAwarenessClient = (uint64_t)result;
  if (!result)
    __assert_rtn("initAWAttentionAwarenessClient_block_invoke", "AFAttentionAwarenessController.m", 16, "classAWAttentionAwarenessClient");
  getAWAttentionAwarenessClientClass = AWAttentionAwarenessClientFunction;
  return result;
}

void AttentionAwarenessLibrary()
{
  if (!AttentionAwarenessLibrary_frameworkLibrary)
  {
    AttentionAwarenessLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness", 2);
    if (!AttentionAwarenessLibrary_frameworkLibrary)
      __assert_rtn("AttentionAwarenessLibrary", "AFAttentionAwarenessController.m", 15, "frameworkLibrary");
  }
}

Class __initAWAttentionAwarenessConfiguration_block_invoke()
{
  Class result;

  AttentionAwarenessLibrary();
  result = objc_getClass("AWAttentionAwarenessConfiguration");
  classAWAttentionAwarenessConfiguration = (uint64_t)result;
  if (!result)
    __assert_rtn("initAWAttentionAwarenessConfiguration_block_invoke", "AFAttentionAwarenessController.m", 17, "classAWAttentionAwarenessConfiguration");
  getAWAttentionAwarenessConfigurationClass = AWAttentionAwarenessConfigurationFunction;
  return result;
}

BOOL AFRequestCancellationReasonGetIsValid(unint64_t a1)
{
  return a1 < 0xF;
}

BOOL AFRequestCancellationReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xE;
}

const __CFString *AFRequestCancellationReasonGetName(unint64_t a1)
{
  if (a1 > 0xE)
    return CFSTR("(unknown)");
  else
    return off_1E3A32A50[a1];
}

uint64_t AFRequestCancellationReasonGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFRequestCancellationReasonGetFromName_onceToken != -1)
      dispatch_once(&AFRequestCancellationReasonGetFromName_onceToken, &__block_literal_global_25950);
    objc_msgSend((id)AFRequestCancellationReasonGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFExperimentDeploymentReasonGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFExperimentDeploymentReasonGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFExperimentDeploymentReasonGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A32B90[a1];
}

uint64_t AFExperimentDeploymentReasonGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFExperimentDeploymentReasonGetFromName_onceToken != -1)
      dispatch_once(&AFExperimentDeploymentReasonGetFromName_onceToken, &__block_literal_global_26546);
    objc_msgSend((id)AFExperimentDeploymentReasonGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFSiriActivationServiceGetXPCInterface()
{
  if (AFSiriActivationServiceGetXPCInterface_onceToken != -1)
    dispatch_once(&AFSiriActivationServiceGetXPCInterface_onceToken, &__block_literal_global_26656);
  return (id)AFSiriActivationServiceGetXPCInterface_interface;
}

uint64_t AFSiriActivationServiceGetPort()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  if (AFIsHorseman_isHorseman)
    return 2;
  else
    return 1;
}

__CFString *AFSiriActivationServiceGetMachServiceName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return (__CFString *)0;
  else
    return *off_1E3A32BE0[a1 - 1];
}

AFAnalyticsEvent *_AFAnalyticsEventCreate(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  AFAnalyticsEvent *v14;
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)MEMORY[0x1A1AC0A74]();
  if (v5)
  {
    v16 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v5, 0, &v16);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v16;
    if (v8)
    {
      v9 = AFSiriLogContextAnalytics;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v18 = "_AFAnalyticsEventCreate";
        v19 = 2112;
        v20 = v5;
        v21 = 2112;
        v22 = v8;
        _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s Failed to serialize context %@ to JSON due to error %@.", buf, 0x20u);
      }

      v7 = 0;
    }
    if (objc_msgSend(v7, "length"))
    {
      v10 = objc_alloc(MEMORY[0x1E0C99D50]);
      v11 = objc_retainAutorelease(v7);
      v12 = (void *)objc_msgSend(v10, "initWithBytes:length:", objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"));
      v13 = 2;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }

  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  objc_autoreleasePoolPop(v6);
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  v14 = -[AFAnalyticsEvent initWithDeliveryStream:type:timestamp:contextDataType:contextData:]([AFAnalyticsEvent alloc], "initWithDeliveryStream:type:timestamp:contextDataType:contextData:", 0, a1, (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a2), v13, v12);

  return v14;
}

id _AFAnalyticsEventGetContextGuarded(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    (*((void (**)(id))v3 + 2))(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19B056F5C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id AFAnalyticsEventCreateCurrent(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  v4 = mach_absolute_time();
  kdebug_trace();
  _AFAnalyticsEventCreate(a1, v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

BOOL AFEnablementFlowGetIsValid(unint64_t a1)
{
  return a1 < 0xA;
}

BOOL AFEnablementFlowGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 9;
}

const __CFString *AFEnablementFlowGetName(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("(unknown)");
  else
    return off_1E3A32D20[a1];
}

uint64_t AFEnablementFlowGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFEnablementFlowGetFromName_onceToken != -1)
      dispatch_once(&AFEnablementFlowGetFromName_onceToken, &__block_literal_global_26779);
    objc_msgSend((id)AFEnablementFlowGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFAudioSessionAssertionServiceXPCInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4325B8);
}

void sub_19B058ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, char a16)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27003(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27004(uint64_t a1)
{

}

unsigned int AFMyriadGoodnessComputeExponentialBoost(double a1, double a2, double a3, double a4, double a5)
{
  double v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = exp(-((a2 - a1) * a4 + a3 * ((a2 - a1) * (a2 - a1)) + a5));
  v6 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "AFMyriadGoodnessComputeExponentialBoost";
    v10 = 2048;
    v11 = v5;
    _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s #myriad exponential bump %f", (uint8_t *)&v8, 0x16u);
  }
  return llround(v5);
}

void sub_19B05EC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLSApplicationRecordClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreServicesLibraryCore_frameworkLibrary)
    CoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriAnnouncementRequestCapabilityManager.m"), 18, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("LSApplicationRecord");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLSApplicationRecordClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AFSiriAnnouncementRequestCapabilityManager.m"), 19, CFSTR("Unable to find class %s"), "LSApplicationRecord");

LABEL_8:
    __break(1u);
  }
  getLSApplicationRecordClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getINAppInfoClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!IntentsLibraryCore_frameworkLibrary_27395)
    IntentsLibraryCore_frameworkLibrary_27395 = _sl_dlopen();
  if (!IntentsLibraryCore_frameworkLibrary_27395)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *IntentsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFSiriAnnouncementRequestCapabilityManager.m"), 24, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("INAppInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getINAppInfoClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AFSiriAnnouncementRequestCapabilityManager.m"), 25, CFSTR("Unable to find class %s"), "INAppInfo");

LABEL_8:
    __break(1u);
  }
  getINAppInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19B069DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_19B06B698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B06E4E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id WPHeySiriKeyManufacturerDataFunction()
{
  return (id)constantWPHeySiriKeyManufacturerData;
}

id initWPHeySiriKeyManufacturerData()
{
  if (initWPHeySiriKeyManufacturerData_sOnce != -1)
    dispatch_once(&initWPHeySiriKeyManufacturerData_sOnce, &__block_literal_global_840);
  return (id)constantWPHeySiriKeyManufacturerData;
}

void __initWPHeySiriKeyManufacturerData_block_invoke()
{
  void *v0;
  id *v1;

  v0 = WirelessProximityLibrary();
  v1 = (id *)dlsym(v0, "WPHeySiriKeyManufacturerData");
  if (!v1)
    __assert_rtn("initWPHeySiriKeyManufacturerData_block_invoke", "AFMyriadCoordinator.m", 59, "constant");
  objc_storeStrong((id *)&constantWPHeySiriKeyManufacturerData, *v1);
  getWPHeySiriKeyManufacturerData = WPHeySiriKeyManufacturerDataFunction;
}

void *WirelessProximityLibrary()
{
  void *result;

  result = (void *)WirelessProximityLibrary_frameworkLibrary;
  if (!WirelessProximityLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/WirelessProximity.framework/WirelessProximity", 2);
    WirelessProximityLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("WirelessProximityLibrary", "AFMyriadCoordinator.m", 56, "frameworkLibrary");
  }
  return result;
}

id SFDiagnosticsFunction()
{
  return (id)classSFDiagnostics;
}

id initSFDiagnostics()
{
  if (initSFDiagnostics_sOnce != -1)
    dispatch_once(&initSFDiagnostics_sOnce, &__block_literal_global_836);
  return (id)classSFDiagnostics;
}

Class __initSFDiagnostics_block_invoke()
{
  Class result;

  if (!SharingLibrary_frameworkLibrary)
  {
    SharingLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Sharing.framework/Sharing", 2);
    if (!SharingLibrary_frameworkLibrary)
      __assert_rtn("SharingLibrary", "AFMyriadCoordinator.m", 47, "frameworkLibrary");
  }
  result = objc_getClass("SFDiagnostics");
  classSFDiagnostics = (uint64_t)result;
  if (!result)
    __assert_rtn("initSFDiagnostics_block_invoke", "AFMyriadCoordinator.m", 48, "classSFDiagnostics");
  getSFDiagnosticsClass = SFDiagnosticsFunction;
  return result;
}

id WPHeySiriAdvertisingDataFunction()
{
  return (id)constantWPHeySiriAdvertisingData;
}

id initWPHeySiriAdvertisingData()
{
  if (initWPHeySiriAdvertisingData_sOnce != -1)
    dispatch_once(&initWPHeySiriAdvertisingData_sOnce, &__block_literal_global_833);
  return (id)constantWPHeySiriAdvertisingData;
}

void __initWPHeySiriAdvertisingData_block_invoke()
{
  void *v0;
  id *v1;

  v0 = WirelessProximityLibrary();
  v1 = (id *)dlsym(v0, "WPHeySiriAdvertisingData");
  if (!v1)
    __assert_rtn("initWPHeySiriAdvertisingData_block_invoke", "AFMyriadCoordinator.m", 58, "constant");
  objc_storeStrong((id *)&constantWPHeySiriAdvertisingData, *v1);
  getWPHeySiriAdvertisingData = WPHeySiriAdvertisingDataFunction;
}

id safelyGetAudioData()
{
  void *v0;
  void *v1;
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  ssize_t v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  unsigned __int8 v24;
  unint64_t v25;
  __int16 v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  _BYTE v34[10];
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  _BYTE v41[13];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  NSHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Library/VoiceTrigger"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v30 = "AFMyriadCoordinatorAudioHashFileBaseDirectory";
    v31 = 2113;
    v32 = (uint64_t)v1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s BTLE audio hash base directory %{private}@", buf, 0x16u);
  }

  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("siriBC"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v30 = "AFMyriadCoordinatorAudioHashFilePath";
    v31 = 2113;
    v32 = (uint64_t)v3;
    _os_log_impl(&dword_19AF50000, v4, OS_LOG_TYPE_INFO, "%s BTLE audio hash file path %{private}@", buf, 0x16u);
  }

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "fileExistsAtPath:", v3))
    v6 = (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String");
  else
    v6 = 0;

  v7 = AFSiriLogContextConnection;
  if (!os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    if (v6)
      goto LABEL_10;
LABEL_27:
    v9 = AFSiriLogContextConnection;
LABEL_28:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v30 = "safelyGetAudioData";
      v18 = "%s #myriad BTLE could not open audio data file";
      goto LABEL_32;
    }
LABEL_29:
    *(_DWORD *)buf = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", buf, 4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_30;
  }
  *(_DWORD *)buf = 136315395;
  v30 = "safelyGetAudioData";
  v31 = 2081;
  v32 = (uint64_t)v6;
  _os_log_debug_impl(&dword_19AF50000, v7, OS_LOG_TYPE_DEBUG, "%s #myriad BTLE opening audio file at path %{private}s", buf, 0x16u);
  if (!v6)
    goto LABEL_27;
LABEL_10:
  v8 = open(v6, 0);
  v9 = AFSiriLogContextConnection;
  if (v8 < 0)
    goto LABEL_28;
  v10 = v8;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "safelyGetAudioData";
    v31 = 1024;
    LODWORD(v32) = 12;
    _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s #myriad BTLE could open audio data file, MYR_EXT_FINGERPRINT_LEN: %d", buf, 0x12u);
  }
  v11 = read(v10, v41, 0xDuLL);
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0xC)
  {
    v9 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v30 = "safelyGetAudioData";
      v18 = "%s #myriad BTLE could not read 12 bytes from audio data file";
LABEL_32:
      _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, v18, buf, 0xCu);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v41, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  close(v10);
  v28 = 0;
  if ((unint64_t)objc_msgSend(v12, "length") >= 0xC)
    objc_msgSend(v12, "getBytes:range:", &v28, 4, 8);
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  objc_msgSend(v12, "getBytes:range:", &v27, 0, 2);
  objc_msgSend(v12, "getBytes:range:", (char *)&v26 + 1, 2, 1);
  objc_msgSend(v12, "getBytes:range:", &v26, 3, 1);
  objc_msgSend(v12, "getBytes:range:", &v25, 4, 8);
  objc_msgSend(v12, "getBytes:range:", &v24, 12, 1);
  v13 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    v20 = v13;
    objc_msgSend(v12, "debugDescription");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315650;
    v30 = "safelyGetAudioData";
    v31 = 2112;
    v32 = (uint64_t)v21;
    v33 = 2048;
    *(_QWORD *)v34 = v28;
    _os_log_debug_impl(&dword_19AF50000, v20, OS_LOG_TYPE_DEBUG, "%s data=%@, voiceTriggerTimeRaw=%f", buf, 0x20u);

    v13 = AFSiriLogContextConnection;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v22 = v13;
    objc_msgSend(v12, "debugDescription");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136316674;
    v30 = "safelyGetAudioData";
    v31 = 2112;
    v32 = (uint64_t)v23;
    v33 = 1024;
    *(_DWORD *)v34 = v27;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = HIBYTE(v26);
    v35 = 1024;
    v36 = v26;
    v37 = 2048;
    v38 = v25;
    v39 = 1024;
    v40 = v24;
    _os_log_debug_impl(&dword_19AF50000, v22, OS_LOG_TYPE_DEBUG, "%s data=%@, hash=%hu, good=%hu, conf=%hu, absTime=%llu, frac=%hu", buf, 0x38u);

  }
  v14 = mach_absolute_time();
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  v15 = *(double *)&_AFMachAbsoluteTimeRate_rate;
  v16 = v25;
  v17 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v30 = "safelyGetAudioData";
    v31 = 2048;
    v32 = v14;
    v33 = 2048;
    *(double *)v34 = v15 * (double)v14 / 1000000000.0
                   - *(double *)&_AFMachAbsoluteTimeRate_rate * (double)v16 / 1000000000.0;
    _os_log_impl(&dword_19AF50000, v17, OS_LOG_TYPE_INFO, "%s currentTime=%llu timeSinceActivationInSeconds=%f", buf, 0x20u);
  }
LABEL_30:

  return v12;
}

uint64_t notificationCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "notificationCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE audio data signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "startAdvertisingFromVoiceTrigger");
  return result;
}

uint64_t outputTriggerSeenCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "outputTriggerSeenCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE self trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "startAdvertisingFromInTaskVoiceTrigger");
  return result;
}

uint64_t emergencyCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "emergencyCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE emergency signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "startAdvertisingEmergency");
  return result;
}

uint64_t myriadDecisionRequestCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "myriadDecisionRequestCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE myriad decision fetch signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "notifyCurrentDecisionResult");
  return result;
}

uint64_t inEarTriggerSeenCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "inEarTriggerSeenCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE in ear trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "startAdvertisingFromInEarTrigger");
  return result;
}

uint64_t carplayTriggerSeenCallback()
{
  NSObject *v0;
  uint64_t result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v2 = 136315138;
    v3 = "carplayTriggerSeenCallback";
    _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s #myriad BTLE CarPlay trigger signal received", (uint8_t *)&v2, 0xCu);
  }
  result = _currentCoordinator;
  if (_currentCoordinator)
    return objc_msgSend((id)_currentCoordinator, "startAdvertisingFromCarPlayTrigger");
  return result;
}

id WPHeySiriFunction()
{
  return (id)classWPHeySiri;
}

id initWPHeySiri()
{
  if (initWPHeySiri_sOnce != -1)
    dispatch_once(&initWPHeySiri_sOnce, &__block_literal_global_824);
  return (id)classWPHeySiri;
}

Class __initWPHeySiri_block_invoke()
{
  Class result;

  WirelessProximityLibrary();
  result = objc_getClass("WPHeySiri");
  classWPHeySiri = (uint64_t)result;
  if (!result)
    __assert_rtn("initWPHeySiri_block_invoke", "AFMyriadCoordinator.m", 57, "classWPHeySiri");
  getWPHeySiriClass = WPHeySiriFunction;
  return result;
}

uint64_t hammingDistance(int a1, int a2)
{
  int v2;
  uint64_t result;

  v2 = a2 ^ a1;
  if (a2 == a1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v2 &= v2 - 1;
  }
  while (v2);
  return result;
}

id AFAnalyticsServiceGetXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3F1338);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_stageEvents_completion_, 0, 0);

  return v0;
}

uint64_t AFAnalyticsServiceDelegateGetXPCInterface()
{
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3F1228);
  return objc_claimAutoreleasedReturnValue();
}

void sub_19B07A9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B07B1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id BKSProcessAssertionFunction()
{
  return (id)classBKSProcessAssertion;
}

id initBKSProcessAssertion()
{
  if (initBKSProcessAssertion_sOnce != -1)
    dispatch_once(&initBKSProcessAssertion_sOnce, &__block_literal_global_147);
  return (id)classBKSProcessAssertion;
}

Class __initBKSProcessAssertion_block_invoke()
{
  Class result;

  if (AssertionServicesLibrary_sOnce != -1)
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_111_29670);
  result = objc_getClass("BKSProcessAssertion");
  classBKSProcessAssertion = (uint64_t)result;
  getBKSProcessAssertionClass = BKSProcessAssertionFunction;
  return result;
}

id UISiriTaskActionFunction()
{
  return (id)classUISiriTaskAction;
}

id initUISiriTaskAction()
{
  if (initUISiriTaskAction_sOnce != -1)
    dispatch_once(&initUISiriTaskAction_sOnce, &__block_literal_global_127);
  return (id)classUISiriTaskAction;
}

id FBSOpenApplicationOptionKeyActionsFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyActions;
}

id initFBSOpenApplicationOptionKeyActions()
{
  if (initFBSOpenApplicationOptionKeyActions_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationOptionKeyActions_sOnce, &__block_literal_global_131);
  return (id)constantFBSOpenApplicationOptionKeyActions;
}

id FBSOpenApplicationOptionKeyActivateSuspendedFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyActivateSuspended;
}

id initFBSOpenApplicationOptionKeyActivateSuspended()
{
  if (initFBSOpenApplicationOptionKeyActivateSuspended_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationOptionKeyActivateSuspended_sOnce, &__block_literal_global_135_29692);
  return (id)constantFBSOpenApplicationOptionKeyActivateSuspended;
}

id FBSOpenApplicationOptionKeyUnlockDeviceFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyUnlockDevice;
}

id initFBSOpenApplicationOptionKeyUnlockDevice()
{
  if (initFBSOpenApplicationOptionKeyUnlockDevice_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationOptionKeyUnlockDevice_sOnce, &__block_literal_global_137);
  return (id)constantFBSOpenApplicationOptionKeyUnlockDevice;
}

id FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction()
{
  return (id)constantFBSOpenApplicationOptionKeyPromptUnlockDevice;
}

id initFBSOpenApplicationOptionKeyPromptUnlockDevice()
{
  if (initFBSOpenApplicationOptionKeyPromptUnlockDevice_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationOptionKeyPromptUnlockDevice_sOnce, &__block_literal_global_139);
  return (id)constantFBSOpenApplicationOptionKeyPromptUnlockDevice;
}

id FBSOpenApplicationServiceFunction()
{
  return (id)classFBSOpenApplicationService;
}

id initFBSOpenApplicationService()
{
  if (initFBSOpenApplicationService_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationService_sOnce, &__block_literal_global_141);
  return (id)classFBSOpenApplicationService;
}

id FBSOpenApplicationOptionsFunction()
{
  return (id)classFBSOpenApplicationOptions;
}

id initFBSOpenApplicationOptions()
{
  if (initFBSOpenApplicationOptions_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationOptions_sOnce, &__block_literal_global_143);
  return (id)classFBSOpenApplicationOptions;
}

id FBSOpenApplicationServiceErrorDomainFunction()
{
  return (id)constantFBSOpenApplicationServiceErrorDomain;
}

id initFBSOpenApplicationServiceErrorDomain()
{
  if (initFBSOpenApplicationServiceErrorDomain_sOnce != -1)
    dispatch_once(&initFBSOpenApplicationServiceErrorDomain_sOnce, &__block_literal_global_145_29683);
  return (id)constantFBSOpenApplicationServiceErrorDomain;
}

void __initFBSOpenApplicationServiceErrorDomain_block_invoke()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationServiceErrorDomain");
  if (!v0)
    __assert_rtn("initFBSOpenApplicationServiceErrorDomain_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 53, "constant");
  objc_storeStrong((id *)&constantFBSOpenApplicationServiceErrorDomain, *v0);
  getFBSOpenApplicationServiceErrorDomain = FBSOpenApplicationServiceErrorDomainFunction;
}

Class __initFBSOpenApplicationOptions_block_invoke()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  result = objc_getClass("FBSOpenApplicationOptions");
  classFBSOpenApplicationOptions = (uint64_t)result;
  getFBSOpenApplicationOptionsClass = FBSOpenApplicationOptionsFunction;
  return result;
}

Class __initFBSOpenApplicationService_block_invoke()
{
  Class result;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass = FBSOpenApplicationServiceFunction;
  return result;
}

void __initFBSOpenApplicationOptionKeyPromptUnlockDevice_block_invoke()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyPromptUnlockDevice");
  if (!v0)
    __assert_rtn("initFBSOpenApplicationOptionKeyPromptUnlockDevice_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 56, "constant");
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyPromptUnlockDevice, *v0);
  getFBSOpenApplicationOptionKeyPromptUnlockDevice = FBSOpenApplicationOptionKeyPromptUnlockDeviceFunction;
}

void __initFBSOpenApplicationOptionKeyUnlockDevice_block_invoke()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyUnlockDevice");
  if (!v0)
    __assert_rtn("initFBSOpenApplicationOptionKeyUnlockDevice_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 57, "constant");
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyUnlockDevice, *v0);
  getFBSOpenApplicationOptionKeyUnlockDevice = FBSOpenApplicationOptionKeyUnlockDeviceFunction;
}

void __initFBSOpenApplicationOptionKeyActivateSuspended_block_invoke()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyActivateSuspended");
  if (!v0)
    __assert_rtn("initFBSOpenApplicationOptionKeyActivateSuspended_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 55, "constant");
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyActivateSuspended, *v0);
  getFBSOpenApplicationOptionKeyActivateSuspended = FBSOpenApplicationOptionKeyActivateSuspendedFunction;
}

void __initFBSOpenApplicationOptionKeyActions_block_invoke()
{
  id *v0;

  if (FrontBoardServicesLibrary_sOnce != -1)
    dispatch_once(&FrontBoardServicesLibrary_sOnce, &__block_literal_global_133);
  v0 = (id *)dlsym((void *)FrontBoardServicesLibrary_sLib, "FBSOpenApplicationOptionKeyActions");
  if (!v0)
    __assert_rtn("initFBSOpenApplicationOptionKeyActions_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 54, "constant");
  objc_storeStrong((id *)&constantFBSOpenApplicationOptionKeyActions, *v0);
  getFBSOpenApplicationOptionKeyActions = FBSOpenApplicationOptionKeyActionsFunction;
}

Class __initUISiriTaskAction_block_invoke()
{
  Class result;

  if (UIKitLibrary_sOnce != -1)
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_129);
  result = objc_getClass("UISiriTaskAction");
  classUISiriTaskAction = (uint64_t)result;
  getUISiriTaskActionClass = UISiriTaskActionFunction;
  return result;
}

id BKSApplicationStateMonitorFunction()
{
  return (id)classBKSApplicationStateMonitor;
}

id initBKSApplicationStateMonitor()
{
  if (initBKSApplicationStateMonitor_sOnce != -1)
    dispatch_once(&initBKSApplicationStateMonitor_sOnce, &__block_literal_global_29716);
  return (id)classBKSApplicationStateMonitor;
}

uint64_t BKSApplicationStateAllFunction()
{
  return constantBKSApplicationStateAll;
}

uint64_t initBKSApplicationStateAll()
{
  if (initBKSApplicationStateAll_sOnce != -1)
    dispatch_once(&initBKSApplicationStateAll_sOnce, &__block_literal_global_113_29714);
  return constantBKSApplicationStateAll;
}

void _LogAppStateInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  NSObject *v10;
  int v11;
  void *v12;
  NSObject *v14;
  void *v15;
  int v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getSBApplicationStateDisplayIDKey();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _SafelyGetObject(v1, (uint64_t)v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  getSBApplicationStateKey();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _SafelyGetObject(v1, (uint64_t)v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  getBKSApplicationStateAppIsFrontmostKey();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  _SafelyGetObject(v1, (uint64_t)v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v8 = v5 == 0;
  else
    v8 = 1;
  if (v8 || v7 == 0)
  {
    v10 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      v16 = 136315394;
      v17 = "_LogAppStateInfo";
      v18 = 2112;
      v19 = v1;
      _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s missing expected values dumping everything %@", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    v11 = objc_msgSend(v5, "unsignedIntValue");
    v12 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      v14 = v12;
      AFDescriptionOfBKSApplicationState(v11);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 136315906;
      v17 = "_LogAppStateInfo";
      v18 = 2112;
      v19 = v3;
      v20 = 2112;
      v21 = v15;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_19AF50000, v14, OS_LOG_TYPE_INFO, "%s %@ is %@ frontmost=%@", (uint8_t *)&v16, 0x2Au);

    }
  }

}

id SBApplicationStateKeyFunction()
{
  return (id)constantSBApplicationStateKey;
}

id initSBApplicationStateKey()
{
  if (initSBApplicationStateKey_sOnce != -1)
    dispatch_once(&initSBApplicationStateKey_sOnce, &__block_literal_global_125_29706);
  return (id)constantSBApplicationStateKey;
}

id _SafelyGetObject(void *a1, uint64_t a2)
{
  void *v3;

  v3 = 0;
  if (a1 && a2)
  {
    objc_msgSend(a1, "objectForKey:", a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

void __initSBApplicationStateKey_block_invoke()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_123_29707);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBApplicationStateKey");
  if (!v0)
    __assert_rtn("initSBApplicationStateKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 38, "constant");
  objc_storeStrong((id *)&constantSBApplicationStateKey, *v0);
  getSBApplicationStateKey = SBApplicationStateKeyFunction;
}

id SBApplicationStateDisplayIDKeyFunction()
{
  return (id)constantSBApplicationStateDisplayIDKey;
}

id initSBApplicationStateDisplayIDKey()
{
  if (initSBApplicationStateDisplayIDKey_sOnce != -1)
    dispatch_once(&initSBApplicationStateDisplayIDKey_sOnce, &__block_literal_global_121);
  return (id)constantSBApplicationStateDisplayIDKey;
}

id BKSApplicationStateAppIsFrontmostKeyFunction()
{
  return (id)constantBKSApplicationStateAppIsFrontmostKey;
}

id initBKSApplicationStateAppIsFrontmostKey()
{
  if (initBKSApplicationStateAppIsFrontmostKey_sOnce != -1)
    dispatch_once(&initBKSApplicationStateAppIsFrontmostKey_sOnce, &__block_literal_global_119);
  return (id)constantBKSApplicationStateAppIsFrontmostKey;
}

void __initBKSApplicationStateAppIsFrontmostKey_block_invoke()
{
  id *v0;

  if (AssertionServicesLibrary_sOnce != -1)
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_111_29670);
  v0 = (id *)dlsym((void *)AssertionServicesLibrary_sLib, "BKSApplicationStateAppIsFrontmostKey");
  if (!v0)
    __assert_rtn("initBKSApplicationStateAppIsFrontmostKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 27, "constant");
  objc_storeStrong((id *)&constantBKSApplicationStateAppIsFrontmostKey, *v0);
  getBKSApplicationStateAppIsFrontmostKey = BKSApplicationStateAppIsFrontmostKeyFunction;
}

void __initSBApplicationStateDisplayIDKey_block_invoke()
{
  id *v0;

  if (SpringBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SpringBoardServicesLibrary_sOnce, &__block_literal_global_123_29707);
  v0 = (id *)dlsym((void *)SpringBoardServicesLibrary_sLib, "SBApplicationStateDisplayIDKey");
  if (!v0)
    __assert_rtn("initSBApplicationStateDisplayIDKey_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 37, "constant");
  objc_storeStrong((id *)&constantSBApplicationStateDisplayIDKey, *v0);
  getSBApplicationStateDisplayIDKey = SBApplicationStateDisplayIDKeyFunction;
}

_QWORD *__initBKSApplicationStateAll_block_invoke()
{
  _QWORD *result;

  if (AssertionServicesLibrary_sOnce != -1)
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_111_29670);
  result = dlsym((void *)AssertionServicesLibrary_sLib, "BKSApplicationStateAll");
  if (!result)
    __assert_rtn("initBKSApplicationStateAll_block_invoke", "AFUIApplicationSiriTaskDeliverer.m", 28, "constant");
  constantBKSApplicationStateAll = *result;
  getBKSApplicationStateAll = BKSApplicationStateAllFunction;
  return result;
}

Class __initBKSApplicationStateMonitor_block_invoke()
{
  Class result;

  if (AssertionServicesLibrary_sOnce != -1)
    dispatch_once(&AssertionServicesLibrary_sOnce, &__block_literal_global_111_29670);
  result = objc_getClass("BKSApplicationStateMonitor");
  classBKSApplicationStateMonitor = (uint64_t)result;
  getBKSApplicationStateMonitorClass = BKSApplicationStateMonitorFunction;
  return result;
}

void sub_19B07CA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

id __copy_constructor_8_8_s0_s8_s16_s24_t32w1(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  result = *(id *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

void sub_19B07CCF4(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16_s24(v1);
  _Unwind_Resume(a1);
}

void sub_19B07CE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void sub_19B07D018(_Unwind_Exception *a1)
{
  id *v1;

  __destructor_8_s0_s8_s16_s24(v1);
  _Unwind_Resume(a1);
}

BOOL AFSiriAnnouncementPlatformGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSiriAnnouncementPlatformGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFSiriAnnouncementPlatformGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A33BB8[a1];
}

uint64_t AFSiriAnnouncementPlatformGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriAnnouncementPlatformGetFromName_onceToken != -1)
      dispatch_once(&AFSiriAnnouncementPlatformGetFromName_onceToken, &__block_literal_global_29831);
    objc_msgSend((id)AFSiriAnnouncementPlatformGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id LSApplicationProxyFunction_30435()
{
  return (id)classLSApplicationProxy_30441;
}

id initLSApplicationProxy_30436()
{
  if (initLSApplicationProxy_sOnce_30439 != -1)
    dispatch_once(&initLSApplicationProxy_sOnce_30439, &__block_literal_global_30440);
  return (id)classLSApplicationProxy_30441;
}

Class __initLSApplicationProxy_block_invoke_30442()
{
  Class result;

  if (CoreServicesLibrary_sOnce != -1)
    dispatch_once(&CoreServicesLibrary_sOnce, &__block_literal_global_236_30443);
  result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy_30441 = (uint64_t)result;
  getLSApplicationProxyClass_30434 = LSApplicationProxyFunction_30435;
  return result;
}

void sub_19B0826C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30831(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30832(uint64_t a1)
{

}

uint64_t AFClockAlarmTypeValidate(char a1)
{
  return a1 & 1;
}

id AFClockAlarmTypeGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("media"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFClockAlarmTypeGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFClockAlarmTypeGetFromName_onceToken != -1)
              dispatch_once(&_AFClockAlarmTypeGetFromName_onceToken, &__block_literal_global_30981);
            objc_msgSend((id)_AFClockAlarmTypeGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id AFPeerInfoGetCompactDescription(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;

  v1 = a1;
  if (!v1)
  {
    v27 = 0;
    goto LABEL_30;
  }
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 3);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 9);
  objc_msgSend(v1, "assistantIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPeerInfoGetShortIdentifier(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v5, "length"))
    objc_msgSend(v2, "addObject:", v5);

  objc_msgSend(v1, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("\"%@\""), v6);
    objc_msgSend(v2, "addObject:", v7);

  }
  objc_msgSend(v1, "idsDeviceUniqueIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPeerInfoGetShortIdentifier(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "length"))
  {
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("ids %@"), v9);
    objc_msgSend(v3, "addObject:", v10);

  }
  objc_msgSend(v1, "rapportEffectiveIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPeerInfoGetShortIdentifier(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v12, "length"))
  {
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("rp %@"), v12);
    objc_msgSend(v3, "addObject:", v13);

  }
  objc_msgSend(v1, "mediaRouteIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPeerInfoGetShortIdentifier(v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v15, "length"))
  {
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("mr %@"), v15);
    objc_msgSend(v3, "addObject:", v16);

  }
  objc_msgSend(v1, "homeKitAccessoryIdentifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  _AFPeerInfoGetShortIdentifier(v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v18, "length"))
  {
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("hk %@"), v18);
    objc_msgSend(v3, "addObject:", v19);

  }
  objc_msgSend(v1, "roomName");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "length"))
  {
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("rm \"%@\""), v20);
    objc_msgSend(v3, "addObject:", v21);

  }
  objc_msgSend(v1, "productType");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "buildVersion");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v22, "length");
  v25 = objc_msgSend(v23, "length");
  if (!v24)
  {
    if (!v25)
      goto LABEL_24;
    v28 = v3;
    v29 = v23;
LABEL_23:
    objc_msgSend(v28, "addObject:", v29);
    goto LABEL_24;
  }
  if (!v25)
  {
    v28 = v3;
    v29 = v22;
    goto LABEL_23;
  }
  v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("md %@/%@"), v22, v23);
  objc_msgSend(v3, "addObject:", v26);

LABEL_24:
  v30 = objc_msgSend(v1, "isSiriCloudSyncEnabled");
  v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("sc \"%d\""), v30);
  objc_msgSend(v3, "addObject:", v31);

  LODWORD(v31) = objc_msgSend(v1, "isLocationSharingDevice");
  v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("ls \"%d\""), v31);
  objc_msgSend(v3, "addObject:", v32);

  objc_msgSend(v1, "myriadTrialTreatment");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v33, "length"))
  {
    v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("tt \"%@\""), v33);
    objc_msgSend(v3, "addObject:", v34);

  }
  v35 = objc_msgSend(v2, "count");
  v36 = objc_alloc(MEMORY[0x1E0CB37A0]);
  if (v35)
  {
    objc_msgSend(v2, "componentsJoinedByString:", CFSTR(" "));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" "));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v36, "initWithFormat:", CFSTR("Peer %@ (%@)"), v37, v38);

  }
  else
  {
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(" "));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v36, "initWithFormat:", CFSTR("Peer (%@)"), v37);
  }

LABEL_30:
  return v27;
}

id _AFPeerInfoGetShortIdentifier(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 8)
  {
    objc_msgSend(v1, "substringToIndex:", 8);
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

id AFPeerInfoMerge(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    v7 = v4;
LABEL_6:
    v6 = v7;
    goto LABEL_7;
  }
  if (!v4)
  {
    v7 = v3;
    goto LABEL_6;
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __AFPeerInfoMerge_block_invoke;
  v9[3] = &unk_1E3A33D90;
  v10 = v3;
  v11 = v5;
  objc_msgSend(v10, "mutatedCopyWithMutator:", v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_7:
  return v6;
}

uint64_t SISchemaClientTurnContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL AFSearchQueriesDataSharingStatusGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSearchQueriesDataSharingStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFSearchQueriesDataSharingStatusGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A33DD0[a1];
}

uint64_t AFSearchQueriesDataSharingStatusGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSearchQueriesDataSharingStatusGetFromName_onceToken != -1)
      dispatch_once(&AFSearchQueriesDataSharingStatusGetFromName_onceToken, &__block_literal_global_31082);
    objc_msgSend((id)AFSearchQueriesDataSharingStatusGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B08481C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_19B084C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31209(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31210(uint64_t a1)
{

}

BOOL AFWorkoutTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xB;
}

BOOL AFWorkoutTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xA;
}

const __CFString *AFWorkoutTypeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return CFSTR("(unknown)");
  else
    return off_1E3A33FD8[a1];
}

uint64_t AFWorkoutTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFWorkoutTypeGetFromName_onceToken != -1)
      dispatch_once(&AFWorkoutTypeGetFromName_onceToken, &__block_literal_global_31276);
    objc_msgSend((id)AFWorkoutTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFSiriResponseHandlingInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3EDD68);
}

__CFString *AFAnalyticsEventTypeGetLegacyName(uint64_t a1)
{
  __CFString *result;
  uint64_t v2;

  if (a1 <= 1601)
  {
    if (a1 <= 799)
    {
      if (a1 > 399)
      {
        if (a1 <= 599)
        {
          switch(a1)
          {
            case 500:
              result = CFSTR("Daemon.GenericIntent");
              break;
            case 501:
              result = CFSTR("Daemon.GenericIntent.Handle.Begin");
              break;
            case 502:
              result = CFSTR("Daemon.GenericIntent.Handle.Timeout");
              break;
            case 503:
              result = CFSTR("Daemon.GenericIntent.Deliver.Begin");
              break;
            case 504:
              result = CFSTR("Daemon.GenericIntent.Recipient.StateChange");
              break;
            case 505:
              result = CFSTR("Daemon.GenericIntent.Recipient.Crash");
              break;
            case 506:
              result = CFSTR("Daemon.GenericIntent.Recipient.Finished");
              break;
            case 507:
              result = CFSTR("Daemon.GenericIntent.Handle.End");
              break;
            default:
              switch(a1)
              {
                case 400:
                  result = CFSTR("Daemon.Service");
                  break;
                case 401:
                  result = CFSTR("Daemon.Service.Handle.Begin");
                  break;
                case 402:
                  result = CFSTR("Daemon.Service.Handle.End");
                  break;
                case 403:
                  result = CFSTR("Daemon.Service.Bundle.Handle.Begin");
                  break;
                case 404:
                  result = CFSTR("Daemon.Service.Bundle.Handle.End");
                  break;
                default:
                  goto LABEL_404;
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 600:
              result = CFSTR("Daemon.Intent");
              break;
            case 601:
              result = CFSTR("Daemon.Intent.Extension.Prepare");
              break;
            case 602:
              result = CFSTR("Daemon.Intent.Extension.Ready");
              break;
            case 603:
              result = CFSTR("Daemon.Intent.Extension.UnexpectedExit");
              break;
            case 604:
              result = CFSTR("Daemon.Intent.Extension.TimedOut.Launching");
              break;
            case 605:
              result = CFSTR("Daemon.Intent.Extension.TimedOut.Request");
              break;
            case 606:
              result = CFSTR("Daemon.Intent.Resolve.Begin");
              break;
            case 607:
              result = CFSTR("Daemon.Intent.Resolve.Request.Sent");
              break;
            case 608:
              result = CFSTR("Daemon.Intent.Resolve.Response.Received");
              break;
            case 609:
              result = CFSTR("Daemon.Intent.Resolve.End");
              break;
            case 610:
              result = CFSTR("Daemon.Intent.Confirm.Begin");
              break;
            case 611:
              result = CFSTR("Daemon.Intent.Confirm.Request.Sent");
              break;
            case 612:
              result = CFSTR("Daemon.Intent.Confirm.Request.Received");
              break;
            case 613:
              result = CFSTR("Daemon.Intent.Confirm.ResponseUIVisible");
              break;
            case 614:
              result = CFSTR("Daemon.Intent.Confirm.End");
              break;
            case 615:
              result = CFSTR("Daemon.Intent.Handle.Begin");
              break;
            case 616:
              result = CFSTR("Daemon.Intent.Handle.Request.Sent");
              break;
            case 617:
              result = CFSTR("Daemon.Intent.Handle.Request.Received");
              break;
            case 618:
              result = CFSTR("Daemon.Intent.Handle.ResponseUIVisible");
              break;
            case 619:
              result = CFSTR("Daemon.Intent.Handle.End");
              break;
            case 620:
              result = CFSTR("Daemon.Intent.Launch.WithIntent.Begin");
              break;
            case 621:
              result = CFSTR("Daemon.Intent.Launch.WithIntent.End");
              break;
            case 622:
              result = CFSTR("Daemon.Intent.Launch.WithUserActivity.Begin");
              break;
            case 623:
              result = CFSTR("Daemon.Intent.Launch.WithUserActivity.End");
              break;
            case 624:
              result = CFSTR("Daemon.Intent.ResolveApp.Begin");
              break;
            case 625:
              result = CFSTR("Daemon.Intent.ResolveApp.End");
              break;
            case 626:
              result = CFSTR("Daemon.Intent.Extension.Request.Begin");
              break;
            case 627:
              result = CFSTR("Daemon.Intent.Extension.Request.End");
              break;
            case 628:
              result = CFSTR("Daemon.Intent.Extension.Prewarm.Begin");
              break;
            case 629:
              result = CFSTR("Daemon.Intent.Extension.Prewarm.End");
              break;
            default:
              switch(a1)
              {
                case 700:
                  result = CFSTR("Daemon.Task");
                  break;
                case 701:
                  result = CFSTR("Daemon.Task.Schedule");
                  break;
                case 702:
                  result = CFSTR("Daemon.Task.Start");
                  break;
                case 703:
                  result = CFSTR("Daemon.Task.Deliver");
                  break;
                case 704:
                  result = CFSTR("Daemon.Task.Finish");
                  break;
                default:
                  goto LABEL_404;
              }
              break;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 200:
            a1 = (uint64_t)CFSTR("Daemon.Audio");
            return (__CFString *)(id)a1;
          case 201:
            result = CFSTR("Daemon.Audio.Init.Begin");
            break;
          case 202:
            result = CFSTR("Daemon.Audio.Init.End");
            break;
          case 203:
            result = CFSTR("Daemon.Audio.Configure.Begin");
            break;
          case 204:
            result = CFSTR("Daemon.Audio.Configure.End");
            break;
          case 205:
            result = CFSTR("Daemon.Audio.Prewarm.Begin");
            break;
          case 206:
            result = CFSTR("Daemon.Audio.Prewarm.End");
            break;
          case 207:
            result = CFSTR("Daemon.Audio.Prepare.Begin");
            break;
          case 208:
            result = CFSTR("Daemon.Audio.Prepare.End");
            break;
          case 209:
            result = CFSTR("Daemon.Audio.FetchRoute.Begin");
            break;
          case 210:
            result = CFSTR("Daemon.Audio.FetchRoute.End");
            break;
          case 211:
            result = CFSTR("Daemon.Audio.StartRecording.Begin");
            break;
          case 212:
            result = CFSTR("Daemon.Audio.StartRecording.End");
            break;
          case 213:
            result = CFSTR("Daemon.Audio.Recording.Begin");
            break;
          case 214:
            result = CFSTR("Daemon.Audio.Recording.FirstBuffer");
            break;
          case 215:
            result = CFSTR("Daemon.Audio.Recording.End");
            break;
          case 216:
            result = CFSTR("Daemon.Audio.StopRecording.Begin");
            break;
          case 217:
            result = CFSTR("Daemon.Audio.StopRecording.End");
            break;
          case 218:
            result = CFSTR("Daemon.Audio.LateBuffer");
            break;
          case 219:
            result = CFSTR("Daemon.Audio.Analyzer.Startpoint.Detected");
            break;
          case 220:
            result = CFSTR("Daemon.Audio.Analyzer.Endpoint.Hard.Detected");
            break;
          case 221:
            result = CFSTR("Daemon.Audio.Failure");
            break;
          case 222:
            result = CFSTR("Daemon.Audio.BTInfoFetch.Begin");
            break;
          case 223:
            result = CFSTR("Daemon.Audio.BTInfoFetch.End");
            break;
          case 224:
            result = CFSTR("Daemon.Audio.FanInfo");
            break;
          case 225:
            result = CFSTR("Daemon.Audio.FirstChanceTriggerInfo");
            break;
          case 226:
            result = CFSTR("Daemon.Audio.Recording.Interruption.Begin");
            break;
          case 227:
            result = CFSTR("Daemon.Audio.Recording.Interruption.End");
            break;
          case 228:
            result = CFSTR("Daemon.Audio.Endpointer.State");
            break;
          case 229:
            result = CFSTR("Daemon.Audio.Recording.FirstBuffer.Start");
            break;
          case 230:
            result = CFSTR("Daemon.Audio.Recording.FirstBuffer.Receipt");
            break;
          case 231:
            result = CFSTR("Daemon.Audio.Recording.LastBuffer.Start");
            break;
          case 232:
            result = CFSTR("Daemon.Audio.Recording.LastBuffer.Receipt");
            break;
          case 233:
            result = CFSTR("Daemon.Audio.Session.SetActive.Begin");
            break;
          case 234:
            result = CFSTR("Daemon.Audio.Session.SetActive.End");
            break;
          case 235:
            result = CFSTR("Daemon.Audio.Session.SetInactive.Begin");
            break;
          case 236:
            result = CFSTR("Daemon.Audio.Session.SetInactive.End");
            break;
          case 237:
            result = CFSTR("Daemon.Audio.Recording.MissedBuffer");
            break;
          case 238:
            result = CFSTR("Daemon.Audio.File.Started");
            break;
          case 239:
            result = CFSTR("Daemon.Audio.TwoShot.Transition.Begin");
            break;
          case 240:
            result = CFSTR("Daemon.Audio.TwoShot.Transition.End");
            break;
          case 241:
            result = CFSTR("Daemon.Audio.Recording.Metrics");
            break;
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 256:
          case 257:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 264:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
          case 282:
          case 283:
          case 284:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
            goto LABEL_404;
          case 300:
            result = CFSTR("Daemon.Speech");
            break;
          case 301:
            result = CFSTR("Daemon.Speech.Capture.Start.Begin");
            break;
          case 302:
            result = CFSTR("Daemon.Speech.Capture.Start.End");
            break;
          case 303:
            result = CFSTR("Daemon.Speech.Capture.Update");
            break;
          case 304:
            result = CFSTR("Daemon.Speech.Capture.Cancel");
            break;
          case 305:
            result = CFSTR("Daemon.Speech.Capture.Stop");
            break;
          case 306:
            result = CFSTR("Daemon.Speech.Failure");
            break;
          case 307:
            result = CFSTR("Daemon.Speech.Capture.Continued");
            break;
          case 308:
            result = CFSTR("Daemon.Speech.ResultCandidate.Evaluation.Begin");
            break;
          case 309:
            result = CFSTR("Daemon.Speech.ResultCandidate.Evaluation.End");
            break;
          case 310:
            result = CFSTR("Daemon.Speech.ResultCandidate.Accepted");
            break;
          case 311:
            result = CFSTR("Daemon.Speech.ResultCandidate.Stashed");
            break;
          default:
            v2 = a1 - 100;
            a1 = (uint64_t)CFSTR("Daemon");
            switch(v2)
            {
              case 0:
                return (__CFString *)(id)a1;
              case 1:
                result = CFSTR("Daemon.Launch");
                break;
              case 2:
                result = CFSTR("Daemon.Loaded");
                break;
              case 3:
                result = CFSTR("Daemon.Exit");
                break;
              case 4:
                result = CFSTR("Daemon.Failure");
                break;
              default:
                switch((unint64_t)CFSTR("Daemon"))
                {
                  case 'x':
                    result = CFSTR("Daemon.StartRequest.Speech");
                    break;
                  case 'y':
                    result = CFSTR("Daemon.StartRequest.Dictation");
                    break;
                  case 'z':
                    result = CFSTR("Daemon.StartRequest.Other");
                    break;
                  case '{':
                    result = CFSTR("Daemon.StartRequest.Keyboard");
                    break;
                  default:
                    goto LABEL_404;
                }
                break;
            }
            break;
        }
      }
      return result;
    }
    if (a1 > 1399)
    {
      switch(a1)
      {
        case 1400:
          return CFSTR("UI");
        case 1401:
          return CFSTR("UI.Plugin.Loaded");
        case 1402:
          return CFSTR("UI.Activation.Prepare");
        case 1403:
          return CFSTR("UI.Activation.Cancel");
        case 1404:
          return CFSTR("UI.Activation.Handle.Begin");
        case 1405:
          return CFSTR("UI.Activation.Handle.End");
        case 1406:
          return CFSTR("UI.Present.Begin");
        case 1407:
          return CFSTR("UI.Present.End");
        case 1408:
          return CFSTR("UI.Dismiss.Begin");
        case 1409:
          return CFSTR("UI.Dismiss.End");
        case 1410:
          return CFSTR("UI.Button.Down");
        case 1411:
          return CFSTR("UI.Button.Up");
        case 1412:
          return CFSTR("UI.Button.Tap");
        case 1413:
          return CFSTR("UI.Blur");
        case 1414:
          return CFSTR("UI.Flames.Present");
        case 1415:
          return CFSTR("UI.Flames.Dismiss");
        case 1416:
          return CFSTR("UI.Mode.Idle");
        case 1417:
          return CFSTR("UI.Mode.Listening");
        case 1418:
          return CFSTR("UI.Mode.Thinking");
        case 1419:
          return CFSTR("UI.Mode.Success");
        case 1420:
          return CFSTR("UI.UUFR.Present");
        case 1421:
          return CFSTR("UI.Command.Handle.Begin");
        case 1422:
          return CFSTR("UI.Command.Handle.End");
        case 1423:
          return CFSTR("UI.Failure");
        case 1424:
          return CFSTR("UI.TapToEditButton.Tap");
        case 1425:
          return CFSTR("UI.URLSessionLoad.Failure");
        case 1426:
          return CFSTR("UI.Disambiguation.Selected");
        case 1427:
          return CFSTR("UI.TTS.ShouldSpeak");
        case 1428:
          return CFSTR("UI.TTS.ShouldNotSpeak");
        case 1429:
          return CFSTR("UI.TranscriptItem.Inserted");
        case 1430:
          return CFSTR("UI.TranscriptItem.DidAppear");
        case 1431:
          return CFSTR("UI.TranscriptItem.DidDisappear");
        case 1432:
          return CFSTR("UI.Transcript.Scrolled");
        case 1433:
          return CFSTR("UI.Unlock.Presented");
        case 1434:
          return CFSTR("UI.Unlock.Dismissed");
        case 1435:
          return CFSTR("UI.Device.Locked");
        case 1436:
          return CFSTR("UI.Device.Unlocked");
        case 1437:
          return CFSTR("UI.Punchout.Begin");
        case 1438:
          return CFSTR("UI.Punchout.End");
        case 1439:
          return CFSTR("UI.TranscriptItems.Reload.Begin");
        case 1440:
          return CFSTR("UI.TranscriptItems.Reload.End");
        case 1441:
          return CFSTR("UI.Mode.Presenting");
        case 1442:
          return CFSTR("UI.Mode.Idle.Rendered");
        case 1443:
          return CFSTR("UI.Mode.Listening.Rendered");
        case 1444:
          return CFSTR("UI.Mode.Thinking.Rendered");
        case 1445:
          return CFSTR("UI.Mode.Presenting.Rendered");
        case 1446:
          return CFSTR("UI.Button.TextRequestInput.Start");
        case 1447:
          return CFSTR("UI.Button.TextRequestInput.Done");
        case 1448:
          return CFSTR("UI.Button.TextRequestInput.Clear");
        case 1449:
        case 1450:
        case 1451:
        case 1452:
        case 1453:
        case 1454:
        case 1455:
        case 1456:
        case 1457:
        case 1458:
        case 1459:
        case 1460:
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1465:
        case 1466:
        case 1467:
        case 1468:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
          goto LABEL_404;
        case 1500:
          return CFSTR("UI.ViewService");
        case 1501:
          return CFSTR("UI.ViewService.Launch");
        case 1502:
          return CFSTR("UI.ViewService.Loaded");
        case 1503:
          return CFSTR("UI.ViewService.Exit");
        case 1504:
          return CFSTR("UI.ViewService.SpeechPartialResult.Received");
        case 1505:
          return CFSTR("UI.ViewService.SpeechPartialResult.Presented");
        case 1506:
          return CFSTR("UI.ViewService.SpeechRecognized.Received");
        case 1507:
          return CFSTR("UI.ViewService.SpeechRecognized.Presented");
        case 1508:
          return CFSTR("UI.ViewService.Failure");
        case 1509:
          return CFSTR("UI.ViewService.Pin");
        case 1510:
          return CFSTR("UI.ViewService.Pin.Begin");
        case 1511:
          return CFSTR("UI.ViewService.Pin.End");
        case 1512:
          return CFSTR("UI.ViewService.Drag");
        case 1513:
          return CFSTR("UI.ViewService.DidAppear");
        case 1514:
          return CFSTR("UI.ViewService.DidDisappear");
        default:
          if (a1 == 1600)
          {
            result = CFSTR("Coverage.AggregateDictionary");
          }
          else
          {
            if (a1 != 1601)
              goto LABEL_404;
            result = CFSTR("Coverage.AggregateDictionary.Scalar");
          }
          break;
      }
      return result;
    }
    if (a1 <= 999)
    {
      switch(a1)
      {
        case 900:
          return CFSTR("Daemon.Session");
        case 901:
          return CFSTR("Daemon.Session.Connection.Opened");
        case 902:
          return CFSTR("Daemon.Session.Connection.Snapshot.Local");
        case 903:
          return CFSTR("Daemon.Session.Connection.Snapshot.Remote");
        case 904:
          return CFSTR("Daemon.Session.Connection.Timeout");
        case 905:
          return CFSTR("Daemon.Session.Connection.Dropped");
        case 906:
          return CFSTR("Daemon.Session.Connection.Failed");
        case 907:
          return CFSTR("Daemon.Session.Validation.Failed");
        case 908:
          return CFSTR("Daemon.Session.Authentication.Failed");
        case 909:
          return CFSTR("Daemon.Session.Assistant.Failed");
        case 910:
          return CFSTR("Daemon.Session.Assistant.NotReady");
        case 911:
          return CFSTR("Daemon.Session.RemappedRequestId");
        case 912:
          return CFSTR("Daemon.Session.Connection.Start");
        case 913:
          return CFSTR("Daemon.Session.Connection.Reset");
        case 914:
          return CFSTR("Daemon.Session.Connection.ClientConnectionId.Created");
        case 915:
          return CFSTR("Daemon.Session.Connection.FirstByteReceived");
        case 916:
          return CFSTR("Daemon.Session.Local.Assistant.NotReady");
        case 917:
          return CFSTR("Daemon.Session.Local.Connection.Reset");
        case 918:
          return CFSTR("Daemon.Session.ProxiedRequestId");
        case 919:
          return CFSTR("Daemon.Session.Won");
        case 920:
          return CFSTR("Daemon.Session.LoadAssistant");
        case 921:
          return CFSTR("Daemon.Session.Failed");
        case 922:
          goto LABEL_404;
        case 923:
          return CFSTR("Daemon.Session.Results.Queued");
        default:
          if (a1 == 800)
          {
            result = CFSTR("Daemon.Signal");
          }
          else
          {
            if (a1 != 801)
              goto LABEL_404;
            result = CFSTR("Daemon.DomainSignal.LaunchApp");
          }
          break;
      }
      return result;
    }
    if (a1 <= 1099)
    {
      switch(a1)
      {
        case 1000:
          result = CFSTR("Daemon.Network");
          break;
        case 1001:
          result = CFSTR("Daemon.Network.Available");
          break;
        case 1002:
          result = CFSTR("Daemon.Network.ServerAddress.Resolved");
          break;
        case 1003:
          result = CFSTR("Daemon.Network.Failure");
          break;
        case 1004:
          result = CFSTR("Daemon.Network.Peer.Error");
          break;
        case 1005:
          result = CFSTR("Daemon.Network.AcePing.Sent");
          break;
        case 1006:
          result = CFSTR("Daemon.Network.AcePong.Received");
          break;
        case 1007:
          result = CFSTR("Daemon.Network.Provider.Open.Begin");
          break;
        case 1008:
          result = CFSTR("Daemon.Network.Provider.Open.End");
          break;
        case 1009:
          result = CFSTR("Daemon.Network.Provider.Secondary.Open.Begin");
          break;
        case 1010:
          result = CFSTR("Daemon.Network.Provider.Secondary.Open.End");
          break;
        case 1011:
          result = CFSTR("Daemon.Network.Link.Recommendation.Begin");
          break;
        case 1012:
          result = CFSTR("Daemon.Network.Link.Recommendation.End");
          break;
        case 1013:
          result = CFSTR("Daemon.Network.Link.Recommendation.Timedout");
          break;
        default:
          goto LABEL_404;
      }
      return result;
    }
    if (a1 > 1199)
    {
      switch(a1)
      {
        case 1200:
          return CFSTR("Daemon.OutgoingCommand");
        case 1201:
          return CFSTR("Daemon.OutgoingCommand.Failure");
        case 1202:
          return CFSTR("Daemon.Local.OutgoingCommand.Failure");
      }
    }
    else
    {
      switch(a1)
      {
        case 1100:
          return CFSTR("Daemon.IncomingCommand");
        case 1101:
          return CFSTR("Daemon.IncomingCommand.SpeechPartialResult");
        case 1102:
          return CFSTR("Daemon.IncomingCommand.SpeechRecognized");
      }
    }
LABEL_404:
    AFAnalyticsEventTypeGetName(a1);
    a1 = objc_claimAutoreleasedReturnValue();
    return (__CFString *)(id)a1;
  }
  if (a1 > 2799)
  {
    if (a1 <= 3799)
    {
      if (a1 > 3400)
      {
        if (a1 <= 3599)
        {
          switch(a1)
          {
            case 3500:
              result = CFSTR("ClientFlow.Plugin");
              break;
            case 3501:
              result = CFSTR("ClientFlow.Plugin.Started");
              break;
            case 3502:
              result = CFSTR("ClientFlow.Plugin.ExecutionStarted");
              break;
            case 3503:
              result = CFSTR("ClientFlow.Plugin.ExecutionFinished");
              break;
            case 3504:
              result = CFSTR("ClientFlow.Plugin.ExecutionFailed");
              break;
            default:
              if (a1 == 3401)
              {
                result = CFSTR("Experiment.Exposure.SiriVOXSounds");
              }
              else
              {
                if (a1 != 3402)
                  goto LABEL_404;
                result = CFSTR("Experiment.Exposure.SiriVOXTapToSiriBehavior");
              }
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 3600:
              result = CFSTR("ClientFlow.CFClient");
              break;
            case 3601:
              result = CFSTR("ClientFlow.CFClient.ScripterLoadStarted");
              break;
            case 3602:
              result = CFSTR("ClientFlow.CFClient.ScripterLoadFinished");
              break;
            case 3603:
              result = CFSTR("ClientFlow.CFClient.ScripterWarmedUp");
              break;
            case 3604:
              result = CFSTR("ClientFlow.CFClient.ScripterWarmedUpWithScriptHint");
              break;
            case 3605:
              result = CFSTR("ClientFlow.CFClient.Execution.Started");
              break;
            case 3606:
              result = CFSTR("ClientFlow.CFClient.Execution.Finished");
              break;
            case 3607:
              result = CFSTR("ClientFlow.CFClient.Execution.Failed");
              break;
            default:
              switch(a1)
              {
                case 3700:
                  result = CFSTR("ClientFlow.JS");
                  break;
                case 3701:
                  result = CFSTR("ClientFlow.JS.SiriMini");
                  break;
                case 3702:
                  result = CFSTR("ClientFlow.JS.ServerFlow");
                  break;
                case 3703:
                  result = CFSTR("ClientFlow.JS.Provider");
                  break;
                case 3704:
                  result = CFSTR("ClientFlow.JS.BackgroundAction.Maintenance");
                  break;
                case 3705:
                  result = CFSTR("ClientFlow.JS.BackgroundAction.ActivityCollection");
                  break;
                case 3706:
                  result = CFSTR("ClientFlow.JS.BackgroundAction.DataMigration");
                  break;
                default:
                  goto LABEL_404;
              }
              break;
          }
        }
      }
      else if (a1 > 3100)
      {
        if (a1 > 3299)
        {
          if (a1 <= 3301)
          {
            if (a1 == 3300)
              return CFSTR("Setup");
            else
              return CFSTR("Setup.PHSBootstrapped");
          }
          if (a1 == 3302)
            return CFSTR("Setup.PHSTrainingStarted");
          if (a1 == 3400)
            return CFSTR("Experiment");
          goto LABEL_404;
        }
        switch(a1)
        {
          case 3200:
            result = CFSTR("Settings");
            break;
          case 3201:
            result = CFSTR("Settings.SetLanguage");
            break;
          case 3202:
            result = CFSTR("Settings.SetOutputVoice");
            break;
          case 3203:
            result = CFSTR("Settings.SetVoiceFeedback");
            break;
          case 3204:
            result = CFSTR("Settings.ChangedTCCInfo");
            break;
          case 3205:
            result = CFSTR("Settings.ChangedTypeToSiri");
            break;
          default:
            if (a1 != 3101)
              goto LABEL_404;
            result = CFSTR("DeviceConfiguration.Snapshot");
            break;
        }
      }
      else
      {
        if (a1 > 2999)
        {
          if (a1 <= 3001)
          {
            if (a1 == 3000)
              return CFSTR("Xcode");
            else
              return CFSTR("Xcode.Test.Begin");
          }
          if (a1 == 3002)
            return CFSTR("Xcode.Test.End");
          if (a1 == 3100)
            return CFSTR("DeviceConfiguration");
          goto LABEL_404;
        }
        switch(a1)
        {
          case 2900:
            result = CFSTR("Music");
            break;
          case 2901:
            result = CFSTR("Music.Playback.Ready");
            break;
          case 2902:
            result = CFSTR("Music.Playback.SecureKey");
            break;
          case 2903:
            result = CFSTR("Music.Playback.AssetLoad");
            break;
          case 2904:
            result = CFSTR("Music.Playback.Summary");
            break;
          default:
            if (a1 == 2800)
            {
              result = CFSTR("NowPlaying");
            }
            else
            {
              if (a1 != 2801)
                goto LABEL_404;
              result = CFSTR("NowPlaying.isPlaying.Changed");
            }
            break;
        }
      }
    }
    else if (a1 > 3999)
    {
      if (a1 > 4199)
      {
        if (a1 > 4399)
        {
          switch(a1)
          {
            case 4400:
              result = CFSTR("LocalRecognition");
              break;
            case 4401:
              result = CFSTR("LocalRecognition.Started");
              break;
            case 4402:
              result = CFSTR("LocalRecognition.PartialResult");
              break;
            case 4403:
              result = CFSTR("LocalRecognition.EagerCandidate");
              break;
            case 4404:
              result = CFSTR("LocalRecognition.Package");
              break;
            case 4405:
              result = CFSTR("LocalRecognition.Finished");
              break;
            default:
              goto LABEL_404;
          }
        }
        else
        {
          switch(a1)
          {
            case 4300:
              result = CFSTR("Analytics");
              break;
            case 4301:
              result = CFSTR("Analytics.Store.Database.PostCorruptionDetected");
              break;
            case 4302:
              result = CFSTR("Analytics.Store.Database.OpenFailed");
              break;
            case 4303:
              result = CFSTR("Analytics.Store.Database.IntegrityCheckFailed");
              break;
            case 4304:
              result = CFSTR("Analytics.Store.Database.UnrecoverableErrorDetected");
              break;
            case 4305:
              result = CFSTR("Analytics.Store.Database.PreparationFailed");
              break;
            default:
              if (a1 == 4200)
              {
                result = CFSTR("IDS");
              }
              else
              {
                if (a1 != 4201)
                  goto LABEL_404;
                result = CFSTR("IDS.DeviceConnection.Snapshot.Local");
              }
              break;
          }
        }
      }
      else
      {
        if (a1 > 4099)
        {
          switch(a1)
          {
            case 4100:
              return CFSTR("CloudKit");
            case 4101:
              return CFSTR("CloudKit.Siri.ChangeArrived");
            case 4102:
              return CFSTR("CloudKit.Knowledge.ChangeArrived");
          }
          goto LABEL_404;
        }
        switch(a1)
        {
          case 4000:
            result = CFSTR("AssistantService");
            break;
          case 4001:
            result = CFSTR("AssistantService.Launch");
            break;
          case 4002:
            result = CFSTR("AssistantService.Exit");
            break;
          case 4003:
            result = CFSTR("AssistantService.Message.Send");
            break;
          case 4004:
            result = CFSTR("AssistantService.Message.Delivered");
            break;
          case 4005:
            result = CFSTR("AssistantService.Message.Begin");
            break;
          case 4006:
            result = CFSTR("AssistantService.Message.End");
            break;
          case 4007:
            result = CFSTR("AssistantService.CommandPerform.Begin");
            break;
          case 4008:
            result = CFSTR("AssistantService.CommandPerform.End");
            break;
          case 4009:
            result = CFSTR("AssistantService.BundleLoading.Begin");
            break;
          case 4010:
            result = CFSTR("AssistantService.BundleLoading.End");
            break;
          default:
            goto LABEL_404;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 3800:
          result = CFSTR("ClientFlow.ClientScripter");
          break;
        case 3801:
          result = CFSTR("ClientFlow.ClientScripter.Started");
          break;
        case 3802:
          result = CFSTR("ClientFlow.ClientScripter.JSContextSetup.Started");
          break;
        case 3803:
          result = CFSTR("ClientFlow.ClientScripter.JSContextSetup.Finished");
          break;
        case 3804:
          result = CFSTR("ClientFlow.ClientScripter.JSEvaluation.StartedForScript");
          break;
        case 3805:
          result = CFSTR("ClientFlow.ClientScripter.JSEvaluation.FinishedForScript");
          break;
        case 3806:
          result = CFSTR("ClientFlow.ClientScripter.JSExecution.Started");
          break;
        case 3807:
          result = CFSTR("ClientFlow.ClientScripter.JSExecution.Finished");
          break;
        case 3808:
          result = CFSTR("ClientFlow.ClientScripter.JSExecution.Successful");
          break;
        case 3809:
          result = CFSTR("ClientFlow.ClientScripter.JSExecution.Failed");
          break;
        case 3810:
          result = CFSTR("ClientFlow.ClientScripter.Script.SentFromServer");
          break;
        case 3811:
          result = CFSTR("ClientFlow.ClientScripter.Script.RetrievedFromServer");
          break;
        case 3812:
          result = CFSTR("ClientFlow.ClientScripter.Script.LoadedFromMemoryCache");
          break;
        case 3813:
          result = CFSTR("ClientFlow.ClientScripter.Script.LoadedFromFilesystem");
          break;
        case 3814:
          result = CFSTR("ClientFlow.ClientScripter.Script.UsedCachedJSContext");
          break;
        case 3815:
          result = CFSTR("ClientFlow.ClientScripter.Script.UsedDeferredCachedJSContext");
          break;
        case 3816:
          result = CFSTR("ClientFlow.ClientScripter.Script.RetrievalFailed");
          break;
        case 3817:
          result = CFSTR("ClientFlow.ClientScripter.Script.CachingFailed");
          break;
        case 3818:
          result = CFSTR("ClientFlow.ClientScripter.SentCommand");
          break;
        case 3819:
          result = CFSTR("ClientFlow.ClientScripter.SentCommandAsync");
          break;
        case 3820:
          result = CFSTR("ClientFlow.ClientScripter.ReceivedResponse");
          break;
        case 3821:
          result = CFSTR("ClientFlow.ClientScripter.JSContextCreatedInWarmup");
          break;
        case 3822:
          result = CFSTR("ClientFlow.ClientScripter.JSContextEvaluatedScriptInWarmupForScript");
          break;
        case 3823:
          result = CFSTR("ClientFlow.ClientScripter.CachedJSContextCount");
          break;
        case 3824:
          result = CFSTR("ClientFlow.ClientScripter.ExecutionFailed");
          break;
        default:
          switch(a1)
          {
            case 3900:
              result = CFSTR("UI.Card.PresentBegin");
              break;
            case 3901:
              result = CFSTR("UI.Card.PresentEnd");
              break;
            case 3902:
              result = CFSTR("UI.Card.SectionPresentBegin");
              break;
            case 3903:
              result = CFSTR("UI.Card.SectionPresentEnd");
              break;
            case 3904:
              result = CFSTR("UI.Card.EngagedWith");
              break;
            case 3905:
              result = CFSTR("UI.Card.SectionEngagedWith");
              break;
            case 3906:
              result = CFSTR("UI.Card.AsyncCardRequested");
              break;
            case 3907:
              result = CFSTR("UI.Card.AsyncCardReceived");
              break;
            default:
              goto LABEL_404;
          }
          break;
      }
    }
  }
  else if (a1 <= 2199)
  {
    if (a1 > 1899)
    {
      switch(a1)
      {
        case 1900:
          result = CFSTR("Client");
          break;
        case 1901:
          result = CFSTR("Client.StartRequest");
          break;
        case 1902:
          result = CFSTR("Client.StartSpeechRequest");
          break;
        case 1903:
          result = CFSTR("Client.StartSpeechPronunciationRequest");
          break;
        case 1904:
          result = CFSTR("Client.StartAcousticIDRequest");
          break;
        case 1905:
          result = CFSTR("Client.StartContinuityRequest");
          break;
        case 1906:
          result = CFSTR("Client.StartCorrectionRequest");
          break;
        case 1907:
          result = CFSTR("Client.StartDirectActionRequest");
          break;
        case 1908:
          result = CFSTR("Client.StartTextRequest");
          break;
        case 1909:
          result = CFSTR("Client.UpdateSpeech");
          break;
        case 1910:
          result = CFSTR("Client.StopSpeech");
          break;
        case 1911:
          result = CFSTR("Client.CancelSpeech");
          break;
        case 1912:
          result = CFSTR("Client.RequestCanceled");
          break;
        case 1913:
          result = CFSTR("Client.RequestFailed");
          break;
        case 1914:
          result = CFSTR("Client.RequestCompleted");
          break;
        case 1915:
          result = CFSTR("Client.Preheat");
          break;
        case 1916:
          result = CFSTR("Client.AcousticId.Begin");
          break;
        case 1917:
          result = CFSTR("Client.AcousticId.End");
          break;
        case 1918:
          result = CFSTR("Client.Tether.Wait.Begin");
          break;
        case 1919:
          result = CFSTR("Client.Tether.Wait.End");
          break;
        case 1920:
          result = CFSTR("Client.Tether.Attach.Begin");
          break;
        case 1921:
          result = CFSTR("Client.Tether.Attach.End");
          break;
        case 1922:
          result = CFSTR("Client.Tether.Attached");
          break;
        case 1923:
          result = CFSTR("Client.Tether.Detached");
          break;
        case 1924:
          result = CFSTR("Client.Feedback.Presented");
          break;
        case 1925:
          result = CFSTR("Client.AutoDisambiguation.Requested");
          break;
        case 1926:
          result = CFSTR("Client.AutoDisambiguation.Saved");
          break;
        default:
          switch(a1)
          {
            case 2000:
              result = CFSTR("Client.Coord");
              break;
            case 2001:
              result = CFSTR("Client.Coord.AudioReady");
              break;
            case 2002:
              result = CFSTR("Client.Coord.AdvertisingStartRequest");
              break;
            case 2003:
              result = CFSTR("Client.Coord.AdvertisingDidStart");
              break;
            case 2004:
              result = CFSTR("Client.Coord.AdvertisingEndRequest");
              break;
            case 2005:
              result = CFSTR("Client.Coord.AdvertisingDidEnd");
              break;
            case 2006:
              result = CFSTR("Client.Coord.DecisionMade");
              break;
            case 2007:
              result = CFSTR("Client.Coord.SlowdownGenerated");
              break;
            case 2008:
              result = CFSTR("Client.Coord.SlowdownReceived");
              break;
            case 2009:
              goto LABEL_404;
            case 2010:
              result = CFSTR("Client.Coord.AdvertisingWillEnd");
              break;
            case 2011:
              result = CFSTR("Client.Coord.ActivityStart");
              break;
            case 2012:
              result = CFSTR("Client.Coord.ActivityEnd");
              break;
            default:
              switch(a1)
              {
                case 2100:
                  result = CFSTR("UI.Watch");
                  break;
                case 2101:
                  result = CFSTR("UI.Activation.GizmoVTWhileAlreadyRecording");
                  break;
                case 2102:
                  result = CFSTR("UI.DelayedResponse.Education");
                  break;
                case 2103:
                  result = CFSTR("UI.DelayedResponse.WristLowered");
                  break;
                case 2104:
                  result = CFSTR("UI.DelayedResponse.BacklightOn");
                  break;
                case 2105:
                  result = CFSTR("UI.TTS.Canceled");
                  break;
                default:
                  goto LABEL_404;
              }
              break;
          }
          break;
      }
    }
    else
    {
      if (a1 <= 1701)
      {
        switch(a1)
        {
          case 1602:
            return CFSTR("Coverage.AggregateDictionary.Distribution");
          case 1700:
            return CFSTR("Coverage.RequestStatistics");
          case 1701:
            return CFSTR("Coverage.RequestStatistics.Cancellation");
        }
        goto LABEL_404;
      }
      switch(a1)
      {
        case 1800:
          result = CFSTR("voice-services.daemon");
          break;
        case 1801:
          result = CFSTR("voice-services.daemon.speech-request.creation");
          break;
        case 1802:
          result = CFSTR("voice-services.daemon.speech-request.vocalization.begin");
          break;
        case 1803:
          result = CFSTR("voice-services.daemon.speech-request.vocalization.end");
          break;
        default:
          if (a1 != 1702)
            goto LABEL_404;
          result = CFSTR("Coverage.RequestStatistics.Failure");
          break;
      }
    }
  }
  else if (a1 > 2499)
  {
    switch(a1)
    {
      case 2600:
        result = CFSTR("CDM");
        break;
      case 2601:
        result = CFSTR("CDM.NLService.HandleCommand.Begin");
        break;
      case 2602:
        result = CFSTR("CDM.NLService.HandleCommand.End");
        break;
      case 2603:
        result = CFSTR("CDM.FlowService.HandleCommand.Begin");
        break;
      case 2604:
        result = CFSTR("CDM.FlowService.HandleCommand.End");
        break;
      case 2605:
        result = CFSTR("CDM.Config.AssetManager.OfflineQueryStart");
        break;
      case 2606:
        result = CFSTR("CDM.Config.AssetManager.OfflineQuerySuccess");
        break;
      case 2607:
        result = CFSTR("CDM.Config.AssetManager.OfflineQueryFailed");
        break;
      case 2608:
        result = CFSTR("CDM.Config.AssetManager.OnlineQueryStart");
        break;
      case 2609:
        result = CFSTR("CDM.Config.AssetManager.OnlineQuerySuccess");
        break;
      case 2610:
        result = CFSTR("CDM.Config.AssetManager.OnlineQueryFailed");
        break;
      case 2611:
        result = CFSTR("CDM.Config.AssetManager.AssetDownloadStart");
        break;
      case 2612:
        result = CFSTR("CDM.Config.AssetManager.AssetDownloadCompleted");
        break;
      case 2613:
        result = CFSTR("CDM.Config.AssetManager.AssetDownloadFailed");
        break;
      case 2614:
        result = CFSTR("CDM.Config.AssetManager.AssetDownloadCancelled");
        break;
      case 2615:
        result = CFSTR("CDM.Config.AssetManager.AssetPurged");
        break;
      case 2616:
        result = CFSTR("CDM.StartSpeech.Received");
        break;
      case 2617:
        result = CFSTR("CDM.SetAssistantData.Received");
        break;
      case 2618:
        result = CFSTR("CDM.LoadAssistant.Received");
        break;
      default:
        switch(a1)
        {
          case 2700:
            result = CFSTR("VOXService");
            break;
          case 2701:
            result = CFSTR("VOXService.SpeechSynthesis.Enqueued");
            break;
          case 2702:
            result = CFSTR("VOXService.SpeechSynthesis.Canceled");
            break;
          case 2703:
            result = CFSTR("VOXService.SpeechSynthesis.Failed");
            break;
          case 2704:
            result = CFSTR("VOXService.SpeechSynthesis.Finished");
            break;
          case 2705:
            result = CFSTR("VOXService.SpeechSynthesis.Interrupted");
            break;
          case 2706:
            result = CFSTR("VOXService.SpeechSynthesis.Started");
            break;
          case 2707:
            result = CFSTR("VOXService.TwoShotSound.Begin");
            break;
          case 2708:
            result = CFSTR("VOXService.TwoShotSound.End");
            break;
          case 2709:
            result = CFSTR("VOXService.SessionInactiveSound.Begin");
            break;
          case 2710:
            result = CFSTR("VOXService.SessionInactiveSound.End");
            break;
          case 2711:
            result = CFSTR("VOXService.TapToSiriSound.Begin");
            break;
          case 2712:
            result = CFSTR("VOXService.TapToSiriSound.End");
            break;
          default:
            switch(a1)
            {
              case 2500:
                result = CFSTR("QA.Automation");
                break;
              case 2501:
                result = CFSTR("QA.Automation.Begin");
                break;
              case 2502:
                result = CFSTR("QA.Automation.End");
                break;
              case 2503:
                result = CFSTR("QA.Automation.Mark");
                break;
              default:
                goto LABEL_404;
            }
            break;
        }
        break;
    }
  }
  else if (a1 > 2299)
  {
    if (a1 > 2399)
    {
      switch(a1)
      {
        case 2400:
          return CFSTR("UIPlugin.Movies");
        case 2401:
          return CFSTR("UIPlugin.Movies.BeginLoadingMediaButtons");
        case 2402:
          return CFSTR("UIPlugin.Movies.EndLoadingMediaButtons");
      }
      goto LABEL_404;
    }
    switch(a1)
    {
      case 2300:
        result = CFSTR("VoiceTrigger");
        break;
      case 2301:
        result = CFSTR("VoiceTrigger.Start");
        break;
      case 2302:
        result = CFSTR("VoiceTrigger.Fire");
        break;
      case 2303:
        result = CFSTR("VoiceTrigger.End");
        break;
      case 2304:
        result = CFSTR("VoiceTrigger.EarlyDetect");
        break;
      default:
        goto LABEL_404;
    }
  }
  else
  {
    switch(a1)
    {
      case 2200:
        result = CFSTR("Client.Dictation");
        break;
      case 2201:
        result = CFSTR("Client.Dictation.StartRequest");
        break;
      case 2202:
        result = CFSTR("Client.Dictation.UpdateSpeech");
        break;
      case 2203:
        result = CFSTR("Client.Dictation.StopSpeech");
        break;
      case 2204:
        result = CFSTR("Client.Dictation.CancelSpeech");
        break;
      case 2205:
        result = CFSTR("Client.Dictation.RequestCanceled");
        break;
      case 2206:
        result = CFSTR("Client.Dictation.RequestFailed");
        break;
      case 2207:
        result = CFSTR("Client.Dictation.RequestCompleted");
        break;
      case 2208:
        result = CFSTR("Client.Dictation.TimeoutRequest");
        break;
      case 2209:
        result = CFSTR("Client.Dictation.SpeechRecording.Started");
        break;
      case 2210:
        result = CFSTR("Client.Dictation.SpeechRecording.Canceled");
        break;
      case 2211:
        result = CFSTR("Client.Dictation.SpeechRecording.Completed");
        break;
      case 2212:
        result = CFSTR("Client.Dictation.SpeechRecording.Failed");
        break;
      case 2213:
        result = CFSTR("Client.Dictation.SpeechRecognition.PhrasesRecognized");
        break;
      case 2214:
        result = CFSTR("Client.Dictation.SpeechRecognition.TokensRecognized");
        break;
      case 2215:
        result = CFSTR("Client.Dictation.SpeechRecognition.TranscriptionObjectsRecognized");
        break;
      case 2216:
        result = CFSTR("Client.Dictation.SpeechRecognition.Completed");
        break;
      case 2217:
        result = CFSTR("Client.Dictation.SpeechRecognition.Failed");
        break;
      case 2218:
        result = CFSTR("Client.Dictation.AppDidEnterBackground");
        break;
      case 2219:
        result = CFSTR("Client.Dictation.SmartLanguageSelection.LanguageOverridden");
        break;
      default:
        goto LABEL_404;
    }
  }
  return result;
}

void sub_19B087A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B087D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

AFKeyValueObserver *AFKeyValueObservingCreate(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  AFKeyValueObserver *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("AFKeyValueObserving.m"), 138, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("object != nil"));

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("AFKeyValueObserving.m"), 139, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[keyPath isKindOfClass:[NSString class]]"));

    if (v9)
      goto LABEL_5;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "id<AFKeyValueObserving> AFKeyValueObservingCreate(__strong id, NSString *__strong, __strong AFKeyValueObservingHandler, AFKeyValueObservingDeliveryOptions *__strong)");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("AFKeyValueObserving.m"), 140, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("handler != nil"));

    goto LABEL_5;
  }
  if (!v9)
    goto LABEL_7;
LABEL_5:
  v11 = -[AFKeyValueObserver initWithObject:keyPath:handler:deliveryOptions:]([AFKeyValueObserver alloc], "initWithObject:keyPath:handler:deliveryOptions:", v7, v8, v9, v10);

  return v11;
}

BOOL AFSiriAnnouncementSummaryDecisionGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSiriAnnouncementSummaryDecisionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFSiriAnnouncementSummaryDecisionGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A340E8[a1];
}

uint64_t AFSiriAnnouncementSummaryDecisionGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriAnnouncementSummaryDecisionGetFromName_onceToken != -1)
      dispatch_once(&AFSiriAnnouncementSummaryDecisionGetFromName_onceToken, &__block_literal_global_32425);
    objc_msgSend((id)AFSiriAnnouncementSummaryDecisionGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B08A9F4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19B08AA0C(uint64_t a1, int a2)
{
  if (a2)
    objc_terminate();
  JUMPOUT(0x19B08AA18);
}

id AFAnalyticsContextCreateWithCommand(void *a1)
{
  id v1;
  char v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = objc_opt_respondsToSelector();
  v3 = (id)MEMORY[0x1E0C9AA70];
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v1, "af_analyticsContext");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      v6 = (void *)v4;
    else
      v6 = v3;
    v3 = v6;

  }
  return v3;
}

id AFAnalyticsContextCreateWithError(void *a1)
{
  void *v1;
  void *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  _AFAnalyticsContextCreateWithErrorRecursively(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count"))
  {
    v4 = CFSTR("error");
    v5[0] = v1;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v2;
}

id _AFAnalyticsContextCreateWithErrorRecursively(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("domain"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v1, "code"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("code"));

    objc_msgSend(v1, "userInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0CB3388]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      _AFAnalyticsContextCreateWithErrorRecursively(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("underlyingError"));

    }
    objc_msgSend(v1, "userInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ___AFAnalyticsContextCreateWithErrorRecursively_block_invoke;
    v11[3] = &unk_1E3A34B58;
    v9 = v2;
    v12 = v9;
    objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v11);

  }
  else
  {
    v9 = (id)MEMORY[0x1E0C9AA70];
  }

  return v9;
}

id AFAnalyticsContextCreateWithSpeechRequestOptions(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "activationEvent"))
  {
    v3 = objc_msgSend(v1, "activationEvent");
    if (v3 > 0x24)
      v4 = CFSTR("Unknown");
    else
      v4 = off_1E3A2DF78[v3];
    v5 = v4;
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("speechEvent"));

  }
  objc_msgSend(v1, "serverCommandId");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v1, "serverCommandId");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("serverCommandId"));

  }
  if (objc_msgSend(v1, "isEyesFree"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("isEyesFree"));
  if (objc_msgSend(v1, "useAutomaticEndpointing"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("useAutomaticEndpointing"));
  if (objc_msgSend(v1, "useStreamingDictation"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("useStreamingDictation"));
  if (objc_msgSend(v1, "isInitialBringUp"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("isInitialBringUp"));
  if (objc_msgSend(v1, "acousticIdEnabled"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("acousticIdEnabled"));
  if (objc_msgSend(v1, "usePrelisteningMode"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("usePrelisteningMode"));
  if (objc_msgSend(v1, "useBorealisBuffer"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("useBorealisBuffer"));
  if (objc_msgSend(v1, "reloadSmartSiriVolume"))
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("reloadSmartSiriVolume"));
  objc_msgSend(v1, "notifyState");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasNotifyState"));
  objc_msgSend(v1, "audioFileURL");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasAudioFileURL"));
  if (objc_msgSend(v1, "bargeInOptions"))
  {
    if ((objc_msgSend(v1, "bargeInOptions") & 0x20) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverHomeAnnouncementPlayback"));
    if ((objc_msgSend(v1, "bargeInOptions") & 2) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverSiriRequest"));
    if ((objc_msgSend(v1, "bargeInOptions") & 4) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverSiriVoiceOutput"));
    if ((objc_msgSend(v1, "bargeInOptions") & 8) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverFiringAlarm"));
    if ((objc_msgSend(v1, "bargeInOptions") & 0x10) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverFiringTimer"));
    if ((objc_msgSend(v1, "bargeInOptions") & 1) != 0)
      objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("bargeInOverMediaPlayback"));
  }
  if (objc_msgSend(v1, "isMediaPlaying"))
  {
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("isMediaPlaying"));
    v10 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "mediaPlaybackVolume");
    objc_msgSend(v10, "numberWithFloat:");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v11, CFSTR("mediaPlaybackVolume"));

  }
  objc_msgSend(v1, "clientAnalyticsContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");

  if (v13)
  {
    objc_msgSend(v1, "clientAnalyticsContext");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addEntriesFromDictionary:", v14);

  }
  if (objc_msgSend(v1, "activationEvent") == 12)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("isRecordedAudio"));
  if (objc_msgSend(v2, "count"))
    v15 = v2;
  else
    v15 = (void *)MEMORY[0x1E0C9AA70];
  v16 = v15;

  return v16;
}

id AFAnalyticsContextCreateWithRequestInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  unint64_t v10;
  id v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  id v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "notifyState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasNotifyState"));
  objc_msgSend(v1, "text");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v1, "text");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("text"));

  }
  objc_msgSend(v1, "legacyDirectActionIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v1, "activationEvent") == 2)
  {
    objc_msgSend(v1, "startLocalRequest");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7 != 0;

    if (v6)
      goto LABEL_10;
LABEL_9:
    if (!v8)
      goto LABEL_55;
    goto LABEL_10;
  }
  v8 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_10:
  objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasDirectAction"));
  objc_msgSend(v1, "legacyDirectActionIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v1, "directActionEvent");
  v11 = v9;
  v12 = v11;
  if (v11)
  {
    if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D891A8]) & 1) != 0)
    {
      v13 = CFSTR("smsInitiate");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D891B0]) & 1) != 0)
    {
      v13 = CFSTR("smsRead");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D891A0]) & 1) != 0)
    {
      v13 = CFSTR("smsCompose");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D891B8]) & 1) != 0)
    {
      v13 = CFSTR("smsReply");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89190]) & 1) != 0)
    {
      v13 = CFSTR("phoneInitiate");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89188]) & 1) != 0)
    {
      v13 = CFSTR("phoneCall");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89198]) & 1) != 0)
    {
      v13 = CFSTR("phoneVoicemail");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89138]) & 1) != 0)
    {
      v13 = CFSTR("acousticId");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89170]) & 1) != 0)
    {
      v13 = CFSTR("musicSmartPlayInitiate");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89168]) & 1) != 0)
    {
      v13 = CFSTR("musicSearch");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89158]) & 1) != 0)
    {
      v13 = CFSTR("mapsSearch");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89160]) & 1) != 0)
    {
      v13 = CFSTR("mapsSearchInNav");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89150]) & 1) != 0)
    {
      v13 = CFSTR("guideUpdateAndShow");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89140]) & 1) != 0)
    {
      v13 = CFSTR("appLaunch");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D891C0]) & 1) != 0)
    {
      v13 = CFSTR("weatherInitiate");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89148]) & 1) != 0)
    {
      v13 = CFSTR("calendarInitiate");
    }
    else if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89178]) & 1) != 0)
    {
      v13 = CFSTR("newsInitiate");
    }
    else if (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D89180]))
    {
      v13 = CFSTR("spokenNotificationInitiate");
    }
    else
    {
      v13 = 0;
    }
  }
  else if (v10 > 0x12)
  {
    v13 = 0;
  }
  else
  {
    v13 = off_1E3A34200[v10];
  }

  if (v13)
    objc_msgSend(v2, "setObject:forKey:", v13, CFSTR("directActionEvent"));
  objc_msgSend(v1, "directActionAppId");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v1, "directActionAppId");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v15, CFSTR("directActionAppId"));

  }
LABEL_55:
  if (!objc_msgSend(v1, "activationEvent"))
  {
    objc_msgSend(v1, "startLocalRequest");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      v45 = v1;
      objc_msgSend(v1, "startLocalRequest");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "clientBoundCommands");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v19 = v18;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v48;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v48 != v22)
              objc_enumerationMutation(v19);
            v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v24, "parse");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if (v25)
              {
                v26 = v25;
                objc_msgSend(v25, "directInvocation");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                v28 = v27;
                if (v27)
                {
                  objc_msgSend(v27, "invocationIdentifier");
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  v30 = objc_msgSend(v29, "length");

                  if (v30)
                  {
                    objc_msgSend(v28, "invocationIdentifier");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v2, "setObject:forKey:", v31, CFSTR("invocationIdentifier"));

                    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasDirectInvocation"));
                    objc_msgSend(v28, "data");
                    v32 = objc_claimAutoreleasedReturnValue();
                    if (v32)
                    {
                      v33 = (void *)v32;
                      v46 = 0;
                      objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v32, 0, 0, &v46);
                      v34 = (void *)objc_claimAutoreleasedReturnValue();
                      v35 = v46;
                      if (v35)
                      {
                        v36 = AFSiriLogContextService;
                        if (os_log_type_enabled((os_log_t)AFSiriLogContextService, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 136315394;
                          v52 = "AFAnalyticsContextCreateWithRequestInfo";
                          v53 = 2112;
                          v54 = v35;
                          _os_log_error_impl(&dword_19AF50000, v36, OS_LOG_TYPE_ERROR, "%s Unexpected error converting invocation context from plist to dictionary: %@", buf, 0x16u);
                        }
                      }
                      else
                      {
                        objc_msgSend(v34, "objectForKey:", CFSTR("directActionEvent"));
                        v37 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v37, "length"))
                          objc_msgSend(v2, "setObject:forKey:", v37, CFSTR("directActionEvent"));
                        objc_msgSend(v34, "objectForKey:", CFSTR("directActionAppId"));
                        v38 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v38, "length"))
                          objc_msgSend(v2, "setObject:forKey:", v38, CFSTR("directActionAppId"));

                      }
                      goto LABEL_82;
                    }
                  }
                }

              }
            }
          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
          if (v21)
            continue;
          break;
        }
      }
LABEL_82:

      v1 = v45;
    }
  }
  objc_msgSend(v1, "handoffRequestData");
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v39)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasHandoffRequestData"));
  objc_msgSend(v1, "handoffURLString");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasHandoffURLString"));
  objc_msgSend(v1, "correctedSpeech");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  if (v41)
    objc_msgSend(v2, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("hasCorrectedSpeech"));
  if (objc_msgSend(v2, "count"))
    v42 = v2;
  else
    v42 = (void *)MEMORY[0x1E0C9AA70];
  v43 = v42;

  return v43;
}

id AFAnalyticsContextCreateWithDictationOptions(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "applicationName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("applicationName"));
  objc_msgSend(v1, "applicationVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("applicationVersion"));
  objc_msgSend(v1, "languageCodeOverride");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("languageCodeOverride"));
  objc_msgSend(v1, "offlineLanguage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("offlineLanguageCode"));
  v7 = objc_msgSend(v1, "taskHint") - 1;
  if (v7 <= 4)
    objc_msgSend(v2, "setObject:forKey:", off_1E3A34298[v7], CFSTR("taskHint"));
  objc_msgSend(v1, "languageDetectionUserContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "getContextForAnalytics");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
    objc_msgSend(v2, "setObject:forKey:", v9, CFSTR("languageDetectionContext"));
  if (objc_msgSend(v2, "count"))
    v10 = v2;
  else
    v10 = (void *)MEMORY[0x1E0C9AA70];
  v11 = v10;

  return v11;
}

id AFAnalyticsContextCreateWithExperiment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  id v10;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "configurationIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("configurationIdentifier"));
  objc_msgSend(v1, "configurationVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("configurationVersion"));
  objc_msgSend(v1, "deploymentGroupIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("deploymentGroupIdentifier"));
  v6 = objc_msgSend(v1, "deploymentReason");
  if (v6 > 2)
    v7 = CFSTR("(unknown)");
  else
    v7 = off_1E3A32B90[v6];
  v8 = v7;
  objc_msgSend(v2, "setObject:forKey:", v8, CFSTR("deploymentReason"));
  if (objc_msgSend(v2, "count"))
    v9 = v2;
  else
    v9 = (void *)MEMORY[0x1E0C9AA70];
  v10 = v9;

  return v10;
}

id AFAnalyticsContextCreateWithLanguageDetectorMetrics(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v3)
    objc_msgSend(v5, "addEntriesFromDictionary:", v3);
  if (v4)
    objc_msgSend(v6, "setObject:forKey:", v4, CFSTR("interactionId"));

  return v6;
}

id AFAnalyticsTurnContextCreateWithRequestInfo(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "turnIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "turnIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("turnId"));

  }
  else
  {
    v6 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      v8 = 136315138;
      v9 = "AFAnalyticsTurnContextCreateWithRequestInfo";
      _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s turnId not provided in request info.", (uint8_t *)&v8, 0xCu);
    }
  }

  return v2;
}

id AFAnalyticsTurnContextCreateWithSpeechRequestOptions(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "turnIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v1, "turnIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("turnId"));

  }
  else
  {
    v6 = AFSiriLogContextAnalytics;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      v8 = 136315138;
      v9 = "AFAnalyticsTurnContextCreateWithSpeechRequestOptions";
      _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s turnId not provided in speech options.", (uint8_t *)&v8, 0xCu);
    }
  }

  return v2;
}

id AFAnalyticsContextCreateForCrossDeviceCommandHandled(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __CFString *v12;
  __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  void *v18;
  void *v19;

  v5 = a1;
  v6 = a3;
  v7 = objc_msgSend(v5, "count");
  if (a2 != 4000 && !v7)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", CFSTR("Unknown"));
    v8 = objc_claimAutoreleasedReturnValue();

    v5 = (id)v8;
  }
  objc_msgSend(v5, "af_mappedSet:", &__block_literal_global_32791);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "count"))
  {
    objc_msgSend(v9, "allObjects");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "sortedArrayUsingSelector:", sel_localizedCaseInsensitiveCompare_);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (a2)
      goto LABEL_10;
  }
  else
  {
    v11 = 0;
    if (a2)
      goto LABEL_10;
  }
  if (!v11)
  {
    v12 = 0;
    goto LABEL_23;
  }
LABEL_10:
  v13 = CFSTR("near");
  v14 = CFSTR("immediate");
  v15 = CFSTR("primary");
  if (a2 != 4000)
    v15 = 0;
  if (a2 != 3000)
    v14 = v15;
  if (a2 != 2000)
    v13 = (__CFString *)v14;
  v16 = CFSTR("unknown");
  v17 = CFSTR("far");
  if (a2 != 1000)
    v17 = 0;
  if (a2)
    v16 = v17;
  if (a2 <= 1999)
    v13 = (__CFString *)v16;
  v12 = v13;
LABEL_23:
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v11)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v11, CFSTR("targetDevices"));
  if (v12)
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v12, CFSTR("proximity"));
  if (v6)
    objc_msgSend(v19, "setObject:forKeyedSubscript:", v6, CFSTR("result"));

  return v19;
}

id AFAnalyticsContextCreateForCrossDeviceCommandHandledWithServiceDeviceContexts(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v6);
        v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        v13 = objc_msgSend(v12, "proximity", (_QWORD)v18);
        if (v9 <= v13)
          v9 = v13;
        objc_msgSend(v12, "metricsContext");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectForKey:", CFSTR("productType"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
          objc_msgSend(v5, "addObject:", v15);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }

  AFAnalyticsContextCreateForCrossDeviceCommandHandled(v5, v9, v4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id AFAnalyticsContextCreateForCrossDeviceCommandNearbyDevices(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  const __CFString *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1E0C99D68];
  v8 = a1;
  objc_msgSend(v7, "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __AFAnalyticsContextCreateForCrossDeviceCommandNearbyDevices_block_invoke;
  v17[3] = &unk_1E3A34168;
  v11 = v5;
  v18 = v11;
  v12 = v9;
  v19 = v12;
  v13 = v6;
  v20 = v13;
  v14 = v10;
  v21 = v14;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v17);

  if (objc_msgSend(v14, "count"))
  {
    v22 = CFSTR("devices");
    v23[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

id AFAnalyticsBucketizedDurationForStartDateAndEndDate(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v6;
  double v8;
  void *v9;
  double v10;

  v6 = 0;
  if (a1 && a2 && a3 >= 1)
  {
    objc_msgSend(a2, "timeIntervalSinceDate:");
    if (v8 > 0.0)
    {
      v9 = (void *)MEMORY[0x1E0CB37E8];
      v10 = fmin(a4, ceil(v8 / (double)a3) * (double)a3);
LABEL_9:
      objc_msgSend(v9, "numberWithDouble:", v10);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      return v6;
    }
    if (v8 < 0.0)
    {
      v9 = (void *)MEMORY[0x1E0CB37E8];
      v10 = fmax(-a4, floor(v8 / (double)a3) * (double)a3);
      goto LABEL_9;
    }
    v6 = &unk_1E3AAA9D8;
  }
  return v6;
}

id AFAnalyticsContextCreateForCurrentProcess()
{
  void *v0;
  void *v1;
  void *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = CFSTR("processName");
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "processName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id AFAnalyticsContextsMerge(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "addEntriesFromDictionary:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7++), (_QWORD)v9);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

id AFAnalyticsSafeContextForJson(void *a1)
{
  id v1;
  id v2;
  void *v3;
  char v5;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v5 = 0;
    _AFAnalyticsMapToSafeValueForJson(v1, &v5);
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

id _AFAnalyticsMapToSafeValueForJson(void *a1, _BYTE *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  const __CFString **v25;
  _BYTE *v26;
  const __CFString *v27;
  const __CFString **v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v3;
      if (objc_msgSend(v6, "count"))
      {
        v27 = 0;
        v28 = &v27;
        v29 = 0x3032000000;
        v30 = __Block_byref_object_copy__32842;
        v31 = __Block_byref_object_dispose__32843;
        v32 = 0;
        v7 = MEMORY[0x1E0C809B0];
        v20 = (void *)MEMORY[0x1E0C809B0];
        v21 = 3221225472;
        v22 = ___AFAnalyticsSafeDictionaryValueForJson_block_invoke;
        v23 = &unk_1E3A34190;
        v25 = &v27;
        v26 = a2;
        v8 = v6;
        v24 = v8;
        objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", &v20);
        if (-[__CFString count]((id)v28[5], "count"))
        {
          v9 = (void *)objc_msgSend(v8, "mutableCopy");
          v10 = (__CFString *)v28[5];
          v15 = v7;
          v16 = 3221225472;
          v17 = ___AFAnalyticsSafeDictionaryValueForJson_block_invoke_2;
          v18 = &unk_1E3A34B58;
          v5 = v9;
          v19 = v5;
          -[__CFString enumerateKeysAndObjectsUsingBlock:](v10, "enumerateKeysAndObjectsUsingBlock:", &v15);

LABEL_16:
          _Block_object_dispose(&v27, 8);

          goto LABEL_17;
        }
        goto LABEL_15;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v5 = v3;
        goto LABEL_18;
      }
      v6 = v3;
      if (objc_msgSend(v6, "count"))
      {
        v27 = 0;
        v28 = &v27;
        v29 = 0x3032000000;
        v30 = __Block_byref_object_copy__32842;
        v31 = __Block_byref_object_dispose__32843;
        v32 = 0;
        v11 = MEMORY[0x1E0C809B0];
        v20 = (void *)MEMORY[0x1E0C809B0];
        v21 = 3221225472;
        v22 = ___AFAnalyticsSafeArrayValueForJson_block_invoke;
        v23 = &unk_1E3A341B8;
        v25 = &v27;
        v26 = a2;
        v8 = v6;
        v24 = v8;
        objc_msgSend(v8, "enumerateObjectsUsingBlock:", &v20);
        if (-[__CFString count]((id)v28[5], "count"))
        {
          v12 = (void *)objc_msgSend(v8, "mutableCopy");
          v13 = (__CFString *)v28[5];
          v15 = v11;
          v16 = 3221225472;
          v17 = ___AFAnalyticsSafeArrayValueForJson_block_invoke_2;
          v18 = &unk_1E3A341E0;
          v5 = v12;
          v19 = v5;
          -[__CFString enumerateKeysAndObjectsUsingBlock:](v13, "enumerateKeysAndObjectsUsingBlock:", &v15);

          goto LABEL_16;
        }
LABEL_15:
        v5 = v8;
        goto LABEL_16;
      }
    }
    v5 = v6;
LABEL_17:

    goto LABEL_18;
  }
  *a2 = 1;
  v27 = CFSTR("bytes");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v3, "length"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v27, 1);
  v5 = (id)objc_claimAutoreleasedReturnValue();

LABEL_18:
  return v5;
}

void sub_19B08D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32842(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32843(uint64_t a1)
{

}

id AFFlowServiceXPCInterface()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432618);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (AFFlowServiceXPCInterface___onceToken != -1)
    dispatch_once(&AFFlowServiceXPCInterface___onceToken, &__block_literal_global_32861);
  return v0;
}

void _AFAggregatorClientAddValueForScalarKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  ADClientAddValueForScalarKey();
  +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = CFSTR("add");
  v7[1] = CFSTR("value");
  v8[0] = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "logEventWithType:context:contextNoCopy:", 1601, v6, 1);

}

void _AFAggregatorClientPushValueForDistributionKey(uint64_t a1, double a2)
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  ADClientPushValueForDistributionKey();
  +[AFAnalytics sharedAnalytics](AFAnalytics, "sharedAnalytics");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = CFSTR("push");
  v7[1] = CFSTR("value");
  v8[0] = a1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "logEventWithType:context:contextNoCopy:", 1602, v6, 1);

}

void sub_19B08FD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_19B090228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL AFResponseModeDeviceMotionGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFResponseModeDeviceMotionGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFResponseModeDeviceMotionGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A34588[a1];
}

uint64_t AFResponseModeDeviceMotionGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFResponseModeDeviceMotionGetFromName_onceToken != -1)
      dispatch_once(&AFResponseModeDeviceMotionGetFromName_onceToken, &__block_literal_global_33619);
    objc_msgSend((id)AFResponseModeDeviceMotionGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFBooleanGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFBooleanGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFBooleanGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A345C8[a1];
}

uint64_t AFBooleanGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBooleanGetFromName_onceToken != -1)
      dispatch_once(&AFBooleanGetFromName_onceToken, &__block_literal_global_33637);
    objc_msgSend((id)AFBooleanGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void AFSiriLocationAuthorizationStatus(void *a1)
{
  id v1;
  void *v2;
  _QWORD block[4];
  id v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __AFSiriLocationAuthorizationStatus_block_invoke;
    block[3] = &unk_1E3A36BB8;
    v4 = v1;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t AFEffectiveSiriBundleForLocation()
{
  return objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
}

BOOL AFLocationStatusIsDenied(unsigned int a1)
{
  return a1 < 3;
}

BOOL AFLocationStatusIsAllowed(int a1)
{
  return (a1 - 3) < 2;
}

id AFEffectiveSiriBundlePathForLocation()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundlePath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_19B092454(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19B092810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __getTRINamespaceClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TrialLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRINamespace");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRINamespaceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTRINamespaceClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AFSiriDataSharingSensitivityManager.m"), 21, CFSTR("Unable to find class %s"), "TRINamespace");

    __break(1u);
  }
}

void TrialLibrary()
{
  void *v0;
  void *v1;
  void *v2;

  if (!TrialLibraryCore_frameworkLibrary)
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!TrialLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TrialLibrary(void)");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AFSiriDataSharingSensitivityManager.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
}

void __getTRIClientClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  TrialLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("TRIClient");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getTRIClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getTRIClientClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("AFSiriDataSharingSensitivityManager.m"), 20, CFSTR("Unable to find class %s"), "TRIClient");

    __break(1u);
  }
}

const __CFString *AFSiriDataSharingSensitivityPolicyToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("AFSiriDataSharingSensitivityPolicyUnknown");
  else
    return off_1E3A34640[a1 - 1];
}

BOOL AFWorkoutPredictionTypeGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFWorkoutPredictionTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFWorkoutPredictionTypeGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A34678[a1];
}

uint64_t AFWorkoutPredictionTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFWorkoutPredictionTypeGetFromName_onceToken != -1)
      dispatch_once(&AFWorkoutPredictionTypeGetFromName_onceToken, &__block_literal_global_33775);
    objc_msgSend((id)AFWorkoutPredictionTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B094C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33882(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33883(uint64_t a1)
{

}

void notificationNearMissCallback(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = AFSiriLogContextConnection;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    v4 = 136315138;
    v5 = "notificationNearMissCallback";
    _os_log_impl(&dword_19AF50000, v3, OS_LOG_TYPE_INFO, "%s #myriad #feedback near miss!", (uint8_t *)&v4, 0xCu);
  }
  objc_msgSend(v2, "_publishFeedbackArbitrationRecordForNearMiss");

}

AFRequestInfo *AFDirectActionCreateRequestInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  AFRequestInfo *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id SKIMessagesInvocationClass;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id SKIVoiceShortcutsInvocationClass;
  void *v28;
  void *v29;
  AFSpeechRequestOptions *v30;
  id v32;
  id v33;

  v5 = a3;
  v6 = objc_alloc_init(AFRequestInfo);
  -[AFRequestInfo setActivationEvent:](v6, "setActivationEvent:", 2);
  v7 = a2 - 8;
  if ((unint64_t)(a2 - 8) <= 6 && ((0x5Fu >> v7) & 1) != 0)
    v8 = **((id **)&unk_1E3A347F8 + v7);
  else
    v8 = 0;
  -[AFRequestInfo setLegacyDirectActionIdentifier:](v6, "setLegacyDirectActionIdentifier:", v8);

  -[AFRequestInfo setDirectActionEvent:](v6, "setDirectActionEvent:", a2);
  objc_msgSend(v5, "associatedBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[AFRequestInfo setDirectActionAppId:](v6, "setDirectActionAppId:", v9);

  v10 = v5;
  objc_msgSend(v10, "associatedBundleIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "contextDictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  v14 = 0;
  switch(a2)
  {
    case 1:
    case 15:
      objc_msgSend(getSKIMessagesInvocationClass(), "beginSiriRequestForApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    case 2:
    case 3:
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("AssistantDirectActionEventMessagesFullNameKey"));
      v16 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("AssistantDirectActionEventMessagesAddressKey"));
      v17 = objc_claimAutoreleasedReturnValue();
      if (v16 | v17)
      {
        v32 = 0;
        v33 = 0;
        AFMessagesGetPhoneNumberEmailAddressFromString(&v33, &v32, (void *)v17);
        v18 = v33;
        v19 = v32;
        objc_msgSend(getSKIMessagesInvocationClass(), "composeNewMessageRequestToContact:phoneNumber:emailAddress:inApp:", v16, v18, v19, v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_33;
      }
      objc_msgSend(getSKIMessagesInvocationClass(), "composeNewMessageRequestInApp:", v11);
      v26 = objc_claimAutoreleasedReturnValue();
      goto LABEL_26;
    case 4:
      objc_msgSend(v10, "bulletin");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (uint64_t)v20;
      if (v20)
      {
        objc_msgSend(v20, "threadID");
        v17 = objc_claimAutoreleasedReturnValue();
        SKIMessagesInvocationClass = getSKIMessagesInvocationClass();
        v22 = SKIMessagesInvocationClass;
        if (!v17)
        {
          objc_msgSend((id)v16, "publisherBulletinID");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "readMessagesRequestFromNotificationIdentifier:fromApp:", v29, v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          v17 = 0;
LABEL_33:

          goto LABEL_34;
        }
LABEL_25:
        objc_msgSend(SKIMessagesInvocationClass, "readMessagesRequestFromConversationIdentifier:inApp:", v17, v11);
        v26 = objc_claimAutoreleasedReturnValue();
LABEL_26:
        v14 = (void *)v26;
        goto LABEL_33;
      }
      if (v13)
      {
        objc_msgSend(v13, "objectForKey:", CFSTR("AssistantDirectActionEventMessagesConversationGUIDKey"));
        v17 = objc_claimAutoreleasedReturnValue();
        SKIMessagesInvocationClass = getSKIMessagesInvocationClass();
        goto LABEL_25;
      }
      v14 = 0;
LABEL_34:

LABEL_35:
      -[AFRequestInfo setStartLocalRequest:](v6, "setStartLocalRequest:", v14);

      if ((unint64_t)(a1 - 1) <= 2)
      {
        v30 = -[AFSpeechRequestOptions initWithActivationEvent:]([AFSpeechRequestOptions alloc], "initWithActivationEvent:", 9);
        -[AFRequestInfo setSpeechRequestOptions:](v6, "setSpeechRequestOptions:", v30);

      }
      return v6;
    case 5:
      if (v12)
      {
        objc_msgSend(v12, "objectForKey:", CFSTR("AssistantDirectActionEventMessagesConversationGUIDKey"));
        v16 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(getSKIMessagesInvocationClass(), "composeReplyRequestToConversationIdentifier:inApp:", v16, v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_34;
      }
      v14 = 0;
      goto LABEL_35;
    case 6:
      objc_msgSend(getSKIMapsInvocationClass(), "searchLocationRequestInApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    case 7:
      objc_msgSend(getSKIMusicInvocationClass(), "searchMusicRequestInApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    case 13:
      objc_msgSend(getSKIPhoneInvocationClass(), "startPhoneCallRequestFromApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    case 16:
      objc_msgSend(getSKIPhoneInvocationClass(), "readHomeAnnouncementRequestFromApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    case 17:
      objc_msgSend(v10, "bulletin");
      v16 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v16, "threadID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      if (v23)
      {
        v25 = v23;
      }
      else
      {
        objc_msgSend((id)v16, "publisherBulletinID");
        v25 = (id)objc_claimAutoreleasedReturnValue();
      }
      v17 = (uint64_t)v25;

      v14 = 0;
      if (v16 && v17)
      {
        SKIVoiceShortcutsInvocationClass = getSKIVoiceShortcutsInvocationClass();
        objc_msgSend((id)v16, "displayName");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(SKIVoiceShortcutsInvocationClass, "startVoiceShortcutInCarPlayUsingTriggerId:withTriggerName:fromApp:", v17, v28, v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

      }
      goto LABEL_33;
    case 18:
      objc_msgSend(getSKIMapsInvocationClass(), "shareETARequestInApp:", v11);
      v15 = objc_claimAutoreleasedReturnValue();
LABEL_21:
      v14 = (void *)v15;
      goto LABEL_35;
    default:
      goto LABEL_35;
  }
}

id SKIMessagesInvocationFunction()
{
  return (id)classSKIMessagesInvocation;
}

id initSKIMessagesInvocation()
{
  if (initSKIMessagesInvocation_sOnce != -1)
    dispatch_once(&initSKIMessagesInvocation_sOnce, &__block_literal_global_33988);
  return (id)classSKIMessagesInvocation;
}

id SKIPhoneInvocationFunction()
{
  return (id)classSKIPhoneInvocation;
}

id initSKIPhoneInvocation()
{
  if (initSKIPhoneInvocation_sOnce != -1)
    dispatch_once(&initSKIPhoneInvocation_sOnce, &__block_literal_global_64_33986);
  return (id)classSKIPhoneInvocation;
}

id SKIVoiceShortcutsInvocationFunction()
{
  return (id)classSKIVoiceShortcutsInvocation;
}

id initSKIVoiceShortcutsInvocation()
{
  if (initSKIVoiceShortcutsInvocation_sOnce != -1)
    dispatch_once(&initSKIVoiceShortcutsInvocation_sOnce, &__block_literal_global_66_33984);
  return (id)classSKIVoiceShortcutsInvocation;
}

id SKIMapsInvocationFunction()
{
  return (id)classSKIMapsInvocation;
}

id initSKIMapsInvocation()
{
  if (initSKIMapsInvocation_sOnce != -1)
    dispatch_once(&initSKIMapsInvocation_sOnce, &__block_literal_global_68_33982);
  return (id)classSKIMapsInvocation;
}

id SKIMusicInvocationFunction()
{
  return (id)classSKIMusicInvocation;
}

id initSKIMusicInvocation()
{
  if (initSKIMusicInvocation_sOnce != -1)
    dispatch_once(&initSKIMusicInvocation_sOnce, &__block_literal_global_70_33978);
  return (id)classSKIMusicInvocation;
}

Class __initSKIMusicInvocation_block_invoke()
{
  Class result;

  if (SiriKitInvocationLibrary_sOnce != -1)
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_62_33979);
  result = objc_getClass("SKIMusicInvocation");
  classSKIMusicInvocation = (uint64_t)result;
  getSKIMusicInvocationClass = SKIMusicInvocationFunction;
  return result;
}

Class __initSKIMapsInvocation_block_invoke()
{
  Class result;

  if (SiriKitInvocationLibrary_sOnce != -1)
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_62_33979);
  result = objc_getClass("SKIMapsInvocation");
  classSKIMapsInvocation = (uint64_t)result;
  getSKIMapsInvocationClass = SKIMapsInvocationFunction;
  return result;
}

Class __initSKIVoiceShortcutsInvocation_block_invoke()
{
  Class result;

  if (SiriKitInvocationLibrary_sOnce != -1)
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_62_33979);
  result = objc_getClass("SKIVoiceShortcutsInvocation");
  classSKIVoiceShortcutsInvocation = (uint64_t)result;
  getSKIVoiceShortcutsInvocationClass = SKIVoiceShortcutsInvocationFunction;
  return result;
}

Class __initSKIPhoneInvocation_block_invoke()
{
  Class result;

  if (SiriKitInvocationLibrary_sOnce != -1)
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_62_33979);
  result = objc_getClass("SKIPhoneInvocation");
  classSKIPhoneInvocation = (uint64_t)result;
  getSKIPhoneInvocationClass = SKIPhoneInvocationFunction;
  return result;
}

Class __initSKIMessagesInvocation_block_invoke()
{
  Class result;

  if (SiriKitInvocationLibrary_sOnce != -1)
    dispatch_once(&SiriKitInvocationLibrary_sOnce, &__block_literal_global_62_33979);
  result = objc_getClass("SKIMessagesInvocation");
  classSKIMessagesInvocation = (uint64_t)result;
  getSKIMessagesInvocationClass = SKIMessagesInvocationFunction;
  return result;
}

const __CFString *AFDirectActionEventGetName(unint64_t a1)
{
  if (a1 > 0x12)
    return CFSTR("Invalid direct action event");
  else
    return off_1E3A34830[a1];
}

const __CFString *AFDirectActionSourceGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Invalid direct action source");
  else
    return off_1E3A348C8[a1];
}

id AFValidatedNowPlayingInfo(void *a1)
{
  id v1;
  objc_class *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[4];
  id v11;
  id v12;

  v1 = a1;
  if (_WhitelistedNowPlayingKeysAndTypes_makeSchemaOnlyOnceGuard != -1)
    dispatch_once(&_WhitelistedNowPlayingKeysAndTypes_makeSchemaOnlyOnceGuard, &__block_literal_global_34139);
  v2 = (objc_class *)MEMORY[0x1E0C99E08];
  v3 = (id)_WhitelistedNowPlayingKeysAndTypes_schema;
  v4 = objc_alloc_init(v2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFValidatedNowPlayingInfo_block_invoke;
  v10[3] = &unk_1E3A34980;
  v11 = v1;
  v5 = v4;
  v12 = v5;
  v6 = v1;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v10);
  v7 = v12;
  v8 = v5;

  return v8;
}

id AFGetCurrentItemAdamIDFromNowPlayingInfo(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  __int128 v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  void *v22;
  _BYTE v23[128];
  _QWORD v24[4];

  v24[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = *MEMORY[0x1E0D4CB90];
  v24[0] = *MEMORY[0x1E0D4CB88];
  v24[1] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v14;
    *(_QWORD *)&v5 = 136315650;
    v12 = v5;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v1, "objectForKeyedSubscript:", v8, v12, (_QWORD)v13);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithLongLong:", objc_msgSend(v9, "longLongValue"));

            goto LABEL_14;
          }
          v10 = AFSiriLogContextConnection;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v12;
            v18 = "AFGetCurrentItemAdamIDFromNowPlayingInfo";
            v19 = 2112;
            v20 = v8;
            v21 = 2112;
            v22 = v9;
            _os_log_error_impl(&dword_19AF50000, v10, OS_LOG_TYPE_ERROR, "%s Found %@ value that is illegal (not a 64 bit integer): %@", buf, 0x20u);
          }
        }

      }
      v4 = (void *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v23, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_14:

  return v4;
}

id AFLanguageOptionsForNowPlayingInfo(void *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  const void *v3;
  id v4;
  const void *Value;
  const void *v6;
  CFTypeID v7;
  const __CFArray *Copy;
  id v9;
  CFTypeID v10;
  const __CFArray *v11;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v14;
  uint64_t v15;
  const void *v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex v19;
  CFIndex v20;
  const void *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  CFTypeID v27;
  const __CFArray *v28;
  CFTypeID v29;
  const __CFArray *v30;
  CFIndex v31;
  void *v32;
  CFIndex v33;
  const void *v34;
  CFTypeID v35;
  uint64_t v36;
  const void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  const __CFDictionary *theDict;
  CFIndex Count;
  id v46;

  v1 = a1;
  theDict = v1;
  if (v1)
  {
    v2 = v1;
    v3 = (const void *)*MEMORY[0x1E0D4C9C0];
    if (CFDictionaryContainsKey(v1, (const void *)*MEMORY[0x1E0D4C9C0]))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v46 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      Value = CFDictionaryGetValue(v2, v3);
      v6 = Value;
      if (!Value)
        goto LABEL_28;
      v7 = CFGetTypeID(Value);
      if (v7 == CFDataGetTypeID())
      {
        Copy = (const __CFArray *)MRLanguageOptionGroupsCreateFromExternalRepresentation();
      }
      else
      {
        v10 = CFGetTypeID(v6);
        if (v10 != CFArrayGetTypeID())
          goto LABEL_28;
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)v6);
      }
      v11 = Copy;
      if (Copy)
      {
        Count = CFArrayGetCount(Copy);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
            v14 = CFGetTypeID(ValueAtIndex);
            if (v14 == CFDataGetTypeID())
              v15 = MRLanguageOptionGroupCreateFromExternalRepresentation();
            else
              v15 = (uint64_t)CFRetain(ValueAtIndex);
            v16 = (const void *)v15;
            v17 = (const __CFArray *)MRLanguageOptionGroupCopyLanguageOptions();
            v18 = v17;
            if (v17)
            {
              v19 = CFArrayGetCount(v17);
              if (v19 >= 1)
              {
                v20 = 0;
                while (1)
                {
                  v21 = CFArrayGetValueAtIndex(v18, v20);
                  v22 = MEMORY[0x1A1AC03FC]();
                  objc_msgSend(MEMORY[0x1E0D88300], "_languageOptionFromMediaRemoteRepresentation:", v21);
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v23)
                  {
                    v24 = v4;
                    if (!v22)
                      goto LABEL_22;
                    if (v22 == 1)
                      break;
                  }
LABEL_23:

                  if (v19 == ++v20)
                    goto LABEL_24;
                }
                v24 = v46;
LABEL_22:
                objc_msgSend(v24, "addObject:", v23);
                goto LABEL_23;
              }
LABEL_24:
              CFRelease(v18);
              if (v16)
                CFRelease(v16);
            }
          }
        }
        CFRelease(v11);
      }
LABEL_28:
      v25 = (void *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D4C9F0]);
      v26 = v25;
      if (!v25)
      {
LABEL_50:
        v32 = 0;
LABEL_53:
        v9 = objc_alloc_init(MEMORY[0x1E0D882F8]);
        objc_msgSend(v9, "setAvailableTracks:", v4);
        objc_msgSend(v9, "setAvailableSubtitles:", v46);
        objc_msgSend(v9, "setCurrentAudioTrack:", v32);
        objc_msgSend(v9, "setCurrentSubtitles:", v26);

        goto LABEL_54;
      }
      v27 = CFGetTypeID(v25);
      if (v27 == CFDataGetTypeID())
      {
        v28 = (const __CFArray *)MRLanguageOptionsCreateFromExternalRepresentation();
      }
      else
      {
        v29 = CFGetTypeID(v26);
        if (v29 != CFArrayGetTypeID())
        {
LABEL_49:
          v26 = 0;
          goto LABEL_50;
        }
        v28 = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)v26);
      }
      v30 = v28;
      if (v28)
      {
        v31 = CFArrayGetCount(v28);
        if (v31 >= 1)
        {
          v32 = 0;
          v33 = 0;
          v26 = 0;
          while (1)
          {
            v34 = CFArrayGetValueAtIndex(v30, v33);
            v35 = CFGetTypeID(v34);
            if (v35 == CFDataGetTypeID())
              v36 = MRLanguageOptionCreateFromExternalRepresentation();
            else
              v36 = (uint64_t)CFRetain(v34);
            v37 = (const void *)v36;
            v38 = MEMORY[0x1A1AC03FC]();
            objc_msgSend(MEMORY[0x1E0D88300], "_languageOptionFromMediaRemoteRepresentation:", v37);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = v39;
            if (v39)
            {
              if (!v38)
              {
                v41 = v32;
                v32 = v39;
                goto LABEL_44;
              }
              if (v38 == 1)
              {
                v41 = v26;
                v26 = v39;
LABEL_44:
                v42 = v39;

              }
            }
            if (v37)
              CFRelease(v37);

            if (v31 == ++v33)
              goto LABEL_52;
          }
        }
        v32 = 0;
        v26 = 0;
LABEL_52:
        CFRelease(v30);
        goto LABEL_53;
      }
      goto LABEL_49;
    }
  }
  v9 = 0;
LABEL_54:

  return v9;
}

void sub_19B097468(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  id v13;
  NSObject *v14;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    v14 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "AFLanguageOptionsForNowPlayingInfo";
      WORD6(buf) = 2112;
      *(_QWORD *)((char *)&buf + 14) = v13;
      _os_log_error_impl(&dword_19AF50000, v14, OS_LOG_TYPE_ERROR, "%s Exception when decoding subtitle and audio languages %@", (uint8_t *)&buf, 0x16u);
    }

    objc_end_catch();
    JUMPOUT(0x19B09740CLL);
  }
  _Unwind_Resume(a1);
}

void _AddSanitizedKeyAndValueToListeningToContainer(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint32_t v15;
  void *v16;
  NSObject *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)buf = 136315394;
    v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
    v23 = 2112;
    v24 = v5;
    v11 = "%s Ignoring non-string key %@";
LABEL_22:
    v14 = v10;
    v15 = 22;
    goto LABEL_23;
  }
  if (!objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D4C958]))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v12 = v6;
    }
    else
    {
      v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        v17 = v16;
        *(_DWORD *)buf = 136315650;
        v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
        v23 = 2112;
        v24 = (id)objc_opt_class();
        v25 = 2112;
        v26 = v5;
        v18 = v24;
        _os_log_impl(&dword_19AF50000, v17, OS_LOG_TYPE_INFO, "%s Unexpected non-string value of class %@ for key %@ -- attempting to convert to string", buf, 0x20u);

      }
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
LABEL_20:
        v10 = AFSiriLogContextDaemon;
        if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        *(_DWORD *)buf = 136315394;
        v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
        v23 = 2112;
        v24 = v5;
        v11 = "%s Could not make safe value for key %@";
        goto LABEL_22;
      }
      objc_msgSend(v6, "stringValue");
      v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    v8 = v12;
    if (v12)
    {
      objc_msgSend(v7, "setObject:forKey:", v12, v5);
LABEL_19:

      goto LABEL_24;
    }
    goto LABEL_20;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v6;
    v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
      _os_log_impl(&dword_19AF50000, v9, OS_LOG_TYPE_INFO, "%s Processing kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers", buf, 0xCu);
    }
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = ___AddSanitizedKeyAndValueToListeningToContainer_block_invoke;
    v19[3] = &unk_1E3A34B58;
    v20 = v7;
    objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v19);

    goto LABEL_19;
  }
  v13 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v22 = "_AddSanitizedKeyAndValueToListeningToContainer";
    v11 = "%s Unexpected non-dictionary value for kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers";
    v14 = v13;
    v15 = 12;
LABEL_23:
    _os_log_error_impl(&dword_19AF50000, v14, OS_LOG_TYPE_ERROR, v11, buf, v15);
  }
LABEL_24:

}

id _AFMediaIdURLFromHostAndIdentifier(void *a1, void *a2)
{
  id v2;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[3];

  v2 = 0;
  v12[2] = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v4 = (objc_class *)MEMORY[0x1E0CB3998];
    v5 = a2;
    v6 = a1;
    v2 = objc_alloc_init(v4);
    objc_msgSend(v2, "setScheme:", CFSTR("x-sampmeditem"));
    objc_msgSend(v2, "setHost:", v6);

    v7 = (void *)MEMORY[0x1E0CB3940];
    v12[0] = CFSTR("/");
    v12[1] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "pathWithComponents:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "setPath:", v9);
  }
  objc_msgSend(v2, "URL");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void AFPerformDeviceVolumeAction(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  id v7;
  id v8;

  v5 = a3;
  v8 = a4;
  v6 = v5;
  v7 = v8;
  MRMediaRemoteGetPickedRouteHasVolumeControl();

}

void AFMediaRemoteSendCommandNoCheck(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;
  id v5;

  v5 = a4;
  v4 = v5;
  MRMediaRemoteSendCommandWithReply();

}

id AFCommandOutcomeFromMediaRemoteStatuses(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v6 = AFAceErrorCodeFromMRMediaRemoteCommandHandlerStatus(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v5), "integerValue", (_QWORD)v9));
        if (v6)
        {
          v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D87FE8]), "initWithErrorCode:", v6);

          return v8;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }

  return objc_alloc_init(MEMORY[0x1E0D87FF8]);
}

uint64_t AFAceErrorCodeFromMRMediaRemoteCommandHandlerStatus(int a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  if (a1 > 99)
  {
    if ((a1 - 102) >= 2)
    {
      if (a1 == 101)
      {
        v3 = MEMORY[0x1E0D88DC0];
      }
      else
      {
        if (a1 != 100)
          return result;
        v3 = MEMORY[0x1E0D88E60];
      }
      return *(_QWORD *)v3;
    }
    goto LABEL_10;
  }
  if (a1 > 9)
  {
    if (a1 == 10)
    {
      v3 = MEMORY[0x1E0D88F48];
    }
    else
    {
      if (a1 != 20)
        return result;
      v3 = MEMORY[0x1E0D88D90];
    }
    return *(_QWORD *)v3;
  }
  if (a1 == 1)
  {
    v3 = MEMORY[0x1E0D88EB8];
    return *(_QWORD *)v3;
  }
  if (a1 == 2)
  {
LABEL_10:
    v3 = MEMORY[0x1E0D88E98];
    return *(_QWORD *)v3;
  }
  return result;
}

void AFMediaRemoteSendCommandWithOptions(int a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    MRMediaRemoteGetSupportedCommands();

  }
  else
  {
    AFMediaRemoteSendCommandNoCheck(0, (uint64_t)v7, (uint64_t)v8, v9);
  }

}

void AFGetNowPlayingInfoDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  if (a2)
  {
    v3 = a2;
    v4 = a1;
    +[AFInstanceContext currentContext](AFInstanceContext, "currentContext");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    _AFGetNowPlayingInfoDictionary(v4, 0, v3);

  }
}

void _AFGetNowPlayingInfoDictionary(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id *v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (a2)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = ___AFGetNowPlayingInfoDictionary_block_invoke;
    v11[3] = &unk_1E3A34A98;
    v8 = &v12;
    v12 = v5;
    v13 = v7;
    objc_msgSend(a2, "performRequestWithCompletion:", v11);

  }
  else
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___AFGetNowPlayingInfoDictionary_block_invoke_96;
    v9[3] = &unk_1E3A34B10;
    v8 = &v10;
    v10 = v6;
    _AFGetNowPlayingMediaContentItmes(0, 1, v5, v9);
  }

}

void _AFGetNowPlayingMediaContentItmes(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v5;
  id v6;
  const void *v7;
  id *v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  _QWORD block[4];
  id v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v7 = (const void *)MRPlaybackQueueRequestCreate();
  MRPlaybackQueueRequestSetIncludeLanguageOptions();
  MRPlaybackQueueRequestSetIncludeMetadata();
  if (v7)
  {
    v8 = (id *)&v12;
    v12 = v5;
    v13 = v6;
    v9 = v6;
    MRMediaRemoteRequestNowPlayingPlaybackQueueSync();
    CFRelease(v7);

  }
  else
  {
    v10 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "_AFGetNowPlayingMediaContentItmes";
      _os_log_error_impl(&dword_19AF50000, v10, OS_LOG_TYPE_ERROR, "%s Failed to create queue request.", buf, 0xCu);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___AFGetNowPlayingMediaContentItmes_block_invoke;
    block[3] = &unk_1E3A36BB8;
    v8 = &v15;
    v15 = v6;
    v11 = v6;
    dispatch_async(v5, block);
  }

}

__CFString *AFStringFromMRPlaybackState(uint64_t a1)
{
  if (a1 < 6)
    return off_1E3A34CC0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<Unknown MRPlaybackState:%u>"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t SAMPPlayStateFromMRPlaybackState(int a1)
{
  if ((a1 - 1) > 4)
    return 0;
  else
    return dword_19B0ED6DC[a1 - 1];
}

uint64_t MRPlaybackStateFromAFMediaPlaybackState(uint64_t result)
{
  if ((unint64_t)(result - 1) < 5)
    return result;
  else
    return 0;
}

void AFGetNowPlayingQueueState(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  dispatch_group_t v8;
  dispatch_group_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  id v28;
  NSObject *v29;
  id v30;
  id v31;
  void *v32;
  _QWORD block[4];
  id v34;
  id v35;
  _QWORD v36[4];
  NSObject *v37;
  id v38;
  _BYTE buf[24];
  void *v40;
  NSObject *v41;
  id v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    if (v6)
      v8 = (dispatch_group_t)v6;
    else
      v8 = dispatch_group_create();
    v9 = v8;
    +[AFInstanceContext currentContext](AFInstanceContext, "currentContext");
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = objc_alloc_init(MEMORY[0x1E0D88288]);
    v12 = v9;
    v13 = v11;
    v14 = MEMORY[0x1E0C809B0];
    if (v13)
    {
      v15 = v5;
      dispatch_group_enter(v12);
      *(_QWORD *)buf = v14;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___AFAddNowPlayingItemInfoToQueue_block_invoke;
      v40 = &unk_1E3A34BF8;
      v41 = v12;
      v42 = v13;
      v16 = (void *)MEMORY[0x1A1AC0C3C](buf);
      _AFGetNowPlayingMediaContentItmes(-1, 3, v15, v16);

    }
    v31 = v5;
    v17 = v5;
    v18 = v12;
    v19 = v13;
    objc_msgSend(getCSAudioSessionControllerClass(), "sharedInstance");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "getAudioSessionID");
    v32 = (void *)v10;
    if ((_DWORD)v21)
    {
      objc_msgSend(getAVAudioSessionClass(), "retrieveSessionWithID:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      if (v22)
      {
        v24 = objc_msgSend(v22, "lastActivationStoppedNowPlayingApp");
        v25 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "_AFAddPlaybackStateToQueue";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v18;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v40) = v24;
          _os_log_impl(&dword_19AF50000, v25, OS_LOG_TYPE_INFO, "%s group=%p lastActivationStoppedNowPlayingApp=%d", buf, 0x1Cu);
        }
        if (v24)
        {
          if (AFIsInternalInstall_onceToken != -1)
            dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
          if (AFIsInternalInstall_isInternal)
            dispatch_assert_queue_V2(v17);
          objc_msgSend(v19, "setState:", 1, v31, v32);
          v26 = MEMORY[0x1E0C809B0];
          goto LABEL_21;
        }
        v27 = 2;
LABEL_20:
        dispatch_group_enter(v18);
        v26 = MEMORY[0x1E0C809B0];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___AFAddPlaybackStateToQueue_block_invoke;
        v40 = &unk_1E3A34C20;
        v41 = v18;
        v43 = v27;
        v42 = v19;
        _AFGetPlaybackState(v17, 0, buf);

LABEL_21:
        dispatch_group_enter(v18);
        v36[0] = v26;
        v36[1] = 3221225472;
        v36[2] = __AFGetNowPlayingQueueState_block_invoke;
        v36[3] = &unk_1E3A34A70;
        v37 = v18;
        v28 = v19;
        v38 = v28;
        v29 = v18;
        _AFGetNowPlayingApplicationIdentifier(v17, 0, v36);
        block[0] = v26;
        block[1] = 3221225472;
        block[2] = __AFGetNowPlayingQueueState_block_invoke_81;
        block[3] = &unk_1E3A36FA0;
        v34 = v28;
        v35 = v7;
        v30 = v28;
        dispatch_group_notify(v29, v17, block);

        v5 = v31;
        goto LABEL_22;
      }
    }
    else
    {
      v23 = 0;
    }
    v27 = 1;
    goto LABEL_20;
  }
LABEL_22:

}

id CSAudioSessionControllerFunction()
{
  return (id)classCSAudioSessionController;
}

id initCSAudioSessionController()
{
  if (initCSAudioSessionController_sOnce != -1)
    dispatch_once(&initCSAudioSessionController_sOnce, &__block_literal_global_115_34202);
  return (id)classCSAudioSessionController;
}

id AVAudioSessionFunction()
{
  return (id)classAVAudioSession;
}

id initAVAudioSession()
{
  if (initAVAudioSession_sOnce != -1)
    dispatch_once(&initAVAudioSession_sOnce, &__block_literal_global_121_34196);
  return (id)classAVAudioSession;
}

void _AFGetPlaybackState(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id *v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v8 = AFSiriLogContextConnection;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v18 = "_AFGetPlaybackState";
      _os_log_debug_impl(&dword_19AF50000, v8, OS_LOG_TYPE_DEBUG, "%s Calling -[MRNowPlayingController performRequestWithCompletion:]...", buf, 0xCu);
    }
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = ___AFGetPlaybackState_block_invoke;
    v14[3] = &unk_1E3A34A98;
    v9 = &v15;
    v15 = v5;
    v16 = v7;
    v10 = v7;
    objc_msgSend(v6, "performRequestWithCompletion:", v14);

  }
  else
  {
    v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v18 = "_AFGetPlaybackState";
      _os_log_debug_impl(&dword_19AF50000, v11, OS_LOG_TYPE_DEBUG, "%s Calling MRMediaRemoteGetNowPlayingApplicationPlaybackState()...", buf, 0xCu);
    }
    v9 = &v13;
    v13 = v7;
    v12 = v7;
    MRMediaRemoteGetNowPlayingApplicationPlaybackState();
  }

}

void _AFGetNowPlayingApplicationIdentifier(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (a2)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___AFGetNowPlayingApplicationIdentifier_block_invoke;
    v10[3] = &unk_1E3A34A98;
    v8 = &v11;
    v11 = v5;
    v12 = v7;
    objc_msgSend(a2, "performRequestWithCompletion:", v10);

  }
  else
  {
    v8 = &v9;
    v9 = v6;
    MRMediaRemoteGetNowPlayingClient();
  }

}

Class __initAVAudioSession_block_invoke()
{
  Class result;

  if (!AVFAudioLibrary_frameworkLibrary)
  {
    AVFAudioLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/Frameworks/AVFAudio.framework/AVFAudio", 2);
    if (!AVFAudioLibrary_frameworkLibrary)
      __assert_rtn("AVFAudioLibrary", "AFMediaRemoteUtilities.m", 38, "frameworkLibrary");
  }
  result = objc_getClass("AVAudioSession");
  classAVAudioSession = (uint64_t)result;
  if (!result)
    __assert_rtn("initAVAudioSession_block_invoke", "AFMediaRemoteUtilities.m", 39, "classAVAudioSession");
  getAVAudioSessionClass = AVAudioSessionFunction;
  return result;
}

Class __initCSAudioSessionController_block_invoke()
{
  Class result;

  if (!CoreSpeechLibrary_frameworkLibrary_34203)
  {
    CoreSpeechLibrary_frameworkLibrary_34203 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech", 2);
    if (!CoreSpeechLibrary_frameworkLibrary_34203)
      __assert_rtn("CoreSpeechLibrary", "AFMediaRemoteUtilities.m", 40, "frameworkLibrary");
  }
  result = objc_getClass("CSAudioSessionController");
  classCSAudioSessionController = (uint64_t)result;
  if (!result)
    __assert_rtn("initCSAudioSessionController_block_invoke", "AFMediaRemoteUtilities.m", 41, "classCSAudioSessionController");
  getCSAudioSessionControllerClass = CSAudioSessionControllerFunction;
  return result;
}

BOOL AFPauseCommandsInterruptAudio()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman == 0;
}

BOOL AFClockIsFiringTimerValid(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;
  double v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "firedDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSinceDate:", v3);
  v5 = v4;

  if (v5 >= 900.0)
  {
    v6 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      v8 = 136315394;
      v9 = "AFClockIsFiringTimerValid";
      v10 = 2112;
      v11 = v1;
      _os_log_debug_impl(&dword_19AF50000, v6, OS_LOG_TYPE_DEBUG, "%s Firing timer is not valid: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return v5 < 900.0;
}

BOOL AFSiriCarPlayAnnounceEnablementTypeGetIsValid(unint64_t a1)
{
  return a1 < 5;
}

BOOL AFSiriCarPlayAnnounceEnablementTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 4;
}

const __CFString *AFSiriCarPlayAnnounceEnablementTypeGetName(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("(unknown)");
  else
    return off_1E3A34DA8[a1];
}

uint64_t AFSiriCarPlayAnnounceEnablementTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriCarPlayAnnounceEnablementTypeGetFromName_onceToken != -1)
      dispatch_once(&AFSiriCarPlayAnnounceEnablementTypeGetFromName_onceToken, &__block_literal_global_34562);
    objc_msgSend((id)AFSiriCarPlayAnnounceEnablementTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFMyriadAdvertisementRecordTypeGetIsValid(unint64_t a1)
{
  return a1 < 0xB;
}

BOOL AFMyriadAdvertisementRecordTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xA;
}

const __CFString *AFMyriadAdvertisementRecordTypeGetName(unint64_t a1)
{
  if (a1 > 0xA)
    return CFSTR("(unknown)");
  else
    return off_1E3A34DF0[a1];
}

uint64_t AFMyriadAdvertisementRecordTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFMyriadAdvertisementRecordTypeGetFromName_onceToken != -1)
      dispatch_once(&AFMyriadAdvertisementRecordTypeGetFromName_onceToken, &__block_literal_global_34595);
    objc_msgSend((id)AFMyriadAdvertisementRecordTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFDictationServiceDelegateXPCInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[4];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3FCC10);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v35[0] = objc_opt_class();
  v35[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setWithArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_, 0, 0);

  v4 = (void *)MEMORY[0x1E0C99E60];
  v34[0] = objc_opt_class();
  v34[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_, 1, 0);

  v7 = (void *)MEMORY[0x1E0C99E60];
  v33[0] = objc_opt_class();
  v33[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_, 2, 0);

  v10 = (void *)MEMORY[0x1E0C99E60];
  v32[0] = objc_opt_class();
  v32[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setWithArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_speechDidRecognizePhrases_rawPhrases_utterances_rawUtterances_nluResult_usingSpeechModel_correctionContext_audioAnalytics_, 3, 0);

  v13 = (void *)MEMORY[0x1E0C99E60];
  v31[0] = objc_opt_class();
  v31[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setWithArray:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v15, sel_speechDidRecognizeTokens_nluResult_usingSpeechModel_, 0, 0);

  v16 = (void *)MEMORY[0x1E0C99E60];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setWithArray:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v18, sel_speechDidRecognizeTranscriptionObjects_usingSpeechModel_, 0, 0);

  v19 = (void *)MEMORY[0x1E0C99E60];
  v29[0] = objc_opt_class();
  v29[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setWithArray:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_speechDidReceiveSearchResults_recognitionText_stable_final_, 0, 0);

  v22 = (void *)MEMORY[0x1E0C99E60];
  v26 = objc_opt_class();
  v27 = objc_opt_class();
  v28 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v26, 3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setWithArray:", v23, v26, v27);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v24, sel_speechDidDetectLanguage_confidenceScores_isConfident_, 1, 0);

  return v0;
}

uint64_t AFPendingSpeechRequestServiceInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE432678);
}

BOOL AFBluetoothHeadphoneInEarStatusGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFBluetoothHeadphoneInEarStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFBluetoothHeadphoneInEarStatusGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A34F60[a1];
}

uint64_t AFBluetoothHeadphoneInEarStatusGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothHeadphoneInEarStatusGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothHeadphoneInEarStatusGetFromName_onceToken, &__block_literal_global_35457);
    objc_msgSend((id)AFBluetoothHeadphoneInEarStatusGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFBluetoothHeadphoneListeningModeGetIsValid(unint64_t a1)
{
  return a1 < 6;
}

BOOL AFBluetoothHeadphoneListeningModeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 5;
}

const __CFString *AFBluetoothHeadphoneListeningModeGetName(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("(unknown)");
  else
    return off_1E3A34FA0[a1];
}

uint64_t AFBluetoothHeadphoneListeningModeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFBluetoothHeadphoneListeningModeGetFromName_onceToken != -1)
      dispatch_once(&AFBluetoothHeadphoneListeningModeGetFromName_onceToken, &__block_literal_global_35479);
    objc_msgSend((id)AFBluetoothHeadphoneListeningModeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFInterstitialStyleGetIsValid(unint64_t a1)
{
  return a1 < 9;
}

BOOL AFInterstitialStyleGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

const __CFString *AFInterstitialStyleGetName(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("(unknown)");
  else
    return off_1E3A35028[a1];
}

uint64_t AFInterstitialStyleGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFInterstitialStyleGetFromName_onceToken != -1)
      dispatch_once(&AFInterstitialStyleGetFromName_onceToken, &__block_literal_global_35722);
    objc_msgSend((id)AFInterstitialStyleGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSleepStateGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFSleepStateGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFSleepStateGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A350C0[a1];
}

uint64_t AFSleepStateGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSleepStateGetFromName_onceToken != -1)
      dispatch_once(&AFSleepStateGetFromName_onceToken, &__block_literal_global_35924);
    objc_msgSend((id)AFSleepStateGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id AFClientServiceXPCInterface()
{
  if (AFClientServiceXPCInterface___onceToken != -1)
    dispatch_once(&AFClientServiceXPCInterface___onceToken, &__block_literal_global_36321);
  return (id)AFClientServiceXPCInterface_interface;
}

id AFClientServiceDelegateXPCInterface()
{
  if (AFClientServiceDelegateXPCInterface___onceToken != -1)
    dispatch_once(&AFClientServiceDelegateXPCInterface___onceToken, &__block_literal_global_178);
  return (id)AFClientServiceDelegateXPCInterface_interface;
}

id AFNotifyGetEffectiveNotificationName(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  objc_msgSend(a2, "info");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "applicationType");

  return v3;
}

uint64_t AFNotifyGetEffectiveNotification(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithCString:encoding:", a1, 1);
  AFNotifyGetEffectiveNotificationName(v5, v4);
  objc_claimAutoreleasedReturnValue();

  v6 = objc_retainAutorelease(v5);
  v7 = objc_msgSend(v6, "cStringUsingEncoding:", 1);

  return v7;
}

void sub_19B0A6140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0A68A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0A6AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0A6CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0A7E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36690(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36691(uint64_t a1)
{

}

BOOL AFInstanceApplicationTypeGetIsValid(unint64_t a1)
{
  return a1 < 2;
}

BOOL AFInstanceApplicationTypeGetIsValidAndSpecified(uint64_t a1)
{
  return a1 == 1;
}

const __CFString *AFInstanceApplicationTypeGetName(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("(unknown)");
  if (a1 == 1)
    v1 = CFSTR("default");
  if (a1)
    return v1;
  else
    return CFSTR("unspecified");
}

uint64_t AFInstanceApplicationTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFInstanceApplicationTypeGetFromName_onceToken != -1)
      dispatch_once(&AFInstanceApplicationTypeGetFromName_onceToken, &__block_literal_global_36711);
    objc_msgSend((id)AFInstanceApplicationTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFSiriUsageResultHandlingInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E3F0);
}

void sub_19B0A8954(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19B0AE400(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

_xpc_connection_s *_ExternalRequestConnectionWithContext(void *a1)
{
  _xpc_connection_s *mach_service;
  _xpc_connection_s *v2;

  if (a1)
  {
    objc_msgSend(a1, "createXPCConnectionForMachService:targetQueue:flags:", "com.apple.siri.external_request", 0, 0);
    mach_service = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    mach_service = xpc_connection_create_mach_service("com.apple.siri.external_request", 0, 0);
  }
  v2 = mach_service;
  xpc_connection_set_event_handler(mach_service, &__block_literal_global_37984);
  xpc_connection_resume(v2);
  return v2;
}

_xpc_connection_s *_ExternalRequestConnection()
{
  return _ExternalRequestConnectionWithContext(0);
}

id ANAnnouncementInfoPlaybackIsActiveKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackIsActiveKey;
}

id initANAnnouncementInfoPlaybackIsActiveKey()
{
  if (initANAnnouncementInfoPlaybackIsActiveKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoPlaybackIsActiveKey_sOnce, &__block_literal_global_136);
  return (id)constantANAnnouncementInfoPlaybackIsActiveKey;
}

id ANAnnouncementInfoAnnouncementIDKeyFunction()
{
  return (id)constantANAnnouncementInfoAnnouncementIDKey;
}

id initANAnnouncementInfoAnnouncementIDKey()
{
  if (initANAnnouncementInfoAnnouncementIDKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoAnnouncementIDKey_sOnce, &__block_literal_global_138_38148);
  return (id)constantANAnnouncementInfoAnnouncementIDKey;
}

id ANAnnouncementInfoPlaybackStartMachTimeKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackStartMachTimeKey;
}

id initANAnnouncementInfoPlaybackStartMachTimeKey()
{
  if (initANAnnouncementInfoPlaybackStartMachTimeKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoPlaybackStartMachTimeKey_sOnce, &__block_literal_global_140);
  return (id)constantANAnnouncementInfoPlaybackStartMachTimeKey;
}

id ANAnnouncementInfoPlaybackFinishedMachTimeKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackFinishedMachTimeKey;
}

id initANAnnouncementInfoPlaybackFinishedMachTimeKey()
{
  if (initANAnnouncementInfoPlaybackFinishedMachTimeKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoPlaybackFinishedMachTimeKey_sOnce, &__block_literal_global_142);
  return (id)constantANAnnouncementInfoPlaybackFinishedMachTimeKey;
}

id ANAnnouncementInfoPlaybackStartDateKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackStartDateKey;
}

id initANAnnouncementInfoPlaybackStartDateKey()
{
  if (initANAnnouncementInfoPlaybackStartDateKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoPlaybackStartDateKey_sOnce, &__block_literal_global_144);
  return (id)constantANAnnouncementInfoPlaybackStartDateKey;
}

id ANAnnouncementInfoPlaybackFinishedDateKeyFunction()
{
  return (id)constantANAnnouncementInfoPlaybackFinishedDateKey;
}

id initANAnnouncementInfoPlaybackFinishedDateKey()
{
  if (initANAnnouncementInfoPlaybackFinishedDateKey_sOnce != -1)
    dispatch_once(&initANAnnouncementInfoPlaybackFinishedDateKey_sOnce, &__block_literal_global_146);
  return (id)constantANAnnouncementInfoPlaybackFinishedDateKey;
}

void __initANAnnouncementInfoPlaybackFinishedDateKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoPlaybackFinishedDateKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackFinishedDateKey, *v0);
  getANAnnouncementInfoPlaybackFinishedDateKey = ANAnnouncementInfoPlaybackFinishedDateKeyFunction;
}

void __initANAnnouncementInfoPlaybackStartDateKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoPlaybackStartDateKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackStartDateKey, *v0);
  getANAnnouncementInfoPlaybackStartDateKey = ANAnnouncementInfoPlaybackStartDateKeyFunction;
}

void __initANAnnouncementInfoPlaybackFinishedMachTimeKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoPlaybackFinishedMachTimeKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackFinishedMachTimeKey, *v0);
  getANAnnouncementInfoPlaybackFinishedMachTimeKey = ANAnnouncementInfoPlaybackFinishedMachTimeKeyFunction;
}

void __initANAnnouncementInfoPlaybackStartMachTimeKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoPlaybackStartMachTimeKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackStartMachTimeKey, *v0);
  getANAnnouncementInfoPlaybackStartMachTimeKey = ANAnnouncementInfoPlaybackStartMachTimeKeyFunction;
}

void __initANAnnouncementInfoAnnouncementIDKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoAnnouncementIDKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoAnnouncementIDKey, *v0);
  getANAnnouncementInfoAnnouncementIDKey = ANAnnouncementInfoAnnouncementIDKeyFunction;
}

void __initANAnnouncementInfoPlaybackIsActiveKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "ANAnnouncementInfoPlaybackIsActiveKey");
  if (v0)
    objc_storeStrong((id *)&constantANAnnouncementInfoPlaybackIsActiveKey, *v0);
  getANAnnouncementInfoPlaybackIsActiveKey = ANAnnouncementInfoPlaybackIsActiveKeyFunction;
}

id ANLocalPlaybackSessionFunction()
{
  return (id)classANLocalPlaybackSession;
}

id initANLocalPlaybackSession()
{
  if (initANLocalPlaybackSession_sOnce != -1)
    dispatch_once(&initANLocalPlaybackSession_sOnce, &__block_literal_global_134);
  return (id)classANLocalPlaybackSession;
}

Class __initANLocalPlaybackSession_block_invoke()
{
  Class result;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  result = objc_getClass("ANLocalPlaybackSession");
  classANLocalPlaybackSession = (uint64_t)result;
  getANLocalPlaybackSessionClass = ANLocalPlaybackSessionFunction;
  return result;
}

id initkANAnnounceStateNotificationKey()
{
  if (initkANAnnounceStateNotificationKey_sOnce != -1)
    dispatch_once(&initkANAnnounceStateNotificationKey_sOnce, &__block_literal_global_38156);
  return (id)constantkANAnnounceStateNotificationKey;
}

id kANAnnounceStateNotificationKeyFunction()
{
  return (id)constantkANAnnounceStateNotificationKey;
}

void __initkANAnnounceStateNotificationKey_block_invoke()
{
  id *v0;

  if (AnnounceLibrary_sOnce_38140 != -1)
    dispatch_once(&AnnounceLibrary_sOnce_38140, &__block_literal_global_132);
  v0 = (id *)dlsym((void *)AnnounceLibrary_sLib_38141, "kANAnnounceStateNotificationKey");
  if (v0)
    objc_storeStrong((id *)&constantkANAnnounceStateNotificationKey, *v0);
  getkANAnnounceStateNotificationKey = kANAnnounceStateNotificationKeyFunction;
}

BOOL AFSiriDataSharingOptInStatusChangeSourceGetIsValid(unint64_t a1)
{
  return a1 < 0xC;
}

BOOL AFSiriDataSharingOptInStatusChangeSourceGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xB;
}

const __CFString *AFSiriDataSharingOptInStatusChangeSourceGetName(unint64_t a1)
{
  if (a1 > 0xB)
    return CFSTR("(unknown)");
  else
    return off_1E3A358B0[a1];
}

uint64_t AFSiriDataSharingOptInStatusChangeSourceGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriDataSharingOptInStatusChangeSourceGetFromName_onceToken != -1)
      dispatch_once(&AFSiriDataSharingOptInStatusChangeSourceGetFromName_onceToken, &__block_literal_global_38564);
    objc_msgSend((id)AFSiriDataSharingOptInStatusChangeSourceGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSiriDataSharingOptInStatusGetIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL AFSiriDataSharingOptInStatusGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

const __CFString *AFSiriDataSharingOptInStatusGetName(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("(unknown)");
  else
    return off_1E3A35998[a1];
}

uint64_t AFSiriDataSharingOptInStatusGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriDataSharingOptInStatusGetFromName_onceToken != -1)
      dispatch_once(&AFSiriDataSharingOptInStatusGetFromName_onceToken, &__block_literal_global_38796);
    objc_msgSend((id)AFSiriDataSharingOptInStatusGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL AFSiriActivationEventGetIsValid(unint64_t a1)
{
  return a1 < 0x18;
}

BOOL AFSiriActivationEventGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x17;
}

const __CFString *AFSiriActivationEventGetName(unint64_t a1)
{
  if (a1 > 0x17)
    return CFSTR("(unknown)");
  else
    return off_1E3A359D8[a1];
}

uint64_t AFSiriActivationEventGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFSiriActivationEventGetFromName_onceToken != -1)
      dispatch_once(&AFSiriActivationEventGetFromName_onceToken, &__block_literal_global_38858);
    objc_msgSend((id)AFSiriActivationEventGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B0B4C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t SISchemaClientAnyEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadData();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19B0BBD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void *__getBiomeLibrarySymbolLoc_block_invoke(_QWORD *a1)
{
  void *v2;
  void *result;
  void *v4;

  if (!BiomeLibraryLibraryCore_frameworkLibrary_39928)
    BiomeLibraryLibraryCore_frameworkLibrary_39928 = _sl_dlopen();
  v2 = (void *)BiomeLibraryLibraryCore_frameworkLibrary_39928;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_39928)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    a1 = (_QWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AFEventDefs.h"), 12, CFSTR("%s"), 0);

    __break(1u);
    free(v4);
  }
  result = dlsym(v2, "BiomeLibrary");
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(a1[4] + 8) + 24);
  return result;
}

id BluetoothManagerFunction()
{
  return (id)classBluetoothManager;
}

id initBluetoothManager()
{
  if (initBluetoothManager_sOnce != -1)
    dispatch_once(&initBluetoothManager_sOnce, &__block_literal_global_667);
  return (id)classBluetoothManager;
}

Class __initBluetoothManager_block_invoke()
{
  Class result;

  BluetoothManagerLibrary_40016();
  result = objc_getClass("BluetoothManager");
  classBluetoothManager = (uint64_t)result;
  if (!result)
    __assert_rtn("initBluetoothManager_block_invoke", "AFUtilities.m", 142, "classBluetoothManager");
  getBluetoothManagerClass = BluetoothManagerFunction;
  return result;
}

void *BluetoothManagerLibrary_40016()
{
  void *result;

  result = (void *)BluetoothManagerLibrary_frameworkLibrary;
  if (!BluetoothManagerLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager", 2);
    BluetoothManagerLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("BluetoothManagerLibrary", "AFUtilities.m", 141, "frameworkLibrary");
  }
  return result;
}

id BluetoothPairedStatusChangedNotificationFunction()
{
  return (id)constantBluetoothPairedStatusChangedNotification;
}

id initBluetoothPairedStatusChangedNotification()
{
  if (initBluetoothPairedStatusChangedNotification_sOnce != -1)
    dispatch_once(&initBluetoothPairedStatusChangedNotification_sOnce, &__block_literal_global_664);
  return (id)constantBluetoothPairedStatusChangedNotification;
}

void __initBluetoothPairedStatusChangedNotification_block_invoke()
{
  void *v0;
  id *v1;

  v0 = BluetoothManagerLibrary_40016();
  v1 = (id *)dlsym(v0, "BluetoothPairedStatusChangedNotification");
  if (!v1)
    __assert_rtn("initBluetoothPairedStatusChangedNotification_block_invoke", "AFUtilities.m", 144, "constant");
  objc_storeStrong((id *)&constantBluetoothPairedStatusChangedNotification, *v1);
  getBluetoothPairedStatusChangedNotification = BluetoothPairedStatusChangedNotificationFunction;
}

id AFBundleServicesCachePath()
{
  void *v0;
  void *v1;
  void *v2;

  NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "firstObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("com.apple.siri.bundleservicecache.plist"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id AFMobileUserBundleServicesCachePath()
{
  void *v0;
  void *v1;

  NSHomeDirectoryForUser(CFSTR("mobile"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("com.apple.siri.bundleservicecache.plist"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id AFUserSupportDirectoryPath()
{
  if (AFUserSupportDirectoryPath_once != -1)
    dispatch_once(&AFUserSupportDirectoryPath_once, &__block_literal_global_40067);
  return (id)AFUserSupportDirectoryPath_sUserSupportDirectoryPath;
}

id AFKeyboardResourcesDirectoryPath()
{
  if (AFKeyboardResourcesDirectoryPath_once != -1)
    dispatch_once(&AFKeyboardResourcesDirectoryPath_once, &__block_literal_global_6_40070);
  return (id)AFKeyboardResourcesDirectoryPath_sKeyboardResourcesDirectoryPath;
}

__CFString *AFKeyboardLMLocaleOverride(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("zh-CN")) & 1) != 0)
    v2 = CFSTR("zh-Hans");
  else
    v2 = (__CFString *)v1;

  return v2;
}

id AFSupportBaseURL()
{
  if (AFSupportBaseURL_once != -1)
    dispatch_once(&AFSupportBaseURL_once, &__block_literal_global_13_40077);
  return (id)AFSupportBaseURL_sSupportBaseURL;
}

id AFServicePluginsURL()
{
  void *v0;
  void *v1;

  AFSupportBaseURL();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLByAppendingPathComponent:", CFSTR("Plugins"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id AFPresentationPluginsURL()
{
  void *v0;
  void *v1;

  AFSupportBaseURL();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLByAppendingPathComponent:", CFSTR("PresentationPlugins"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

BOOL AFIsFileNotFoundError(void *a1)
{
  id v1;
  void *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CB28A8]);

  v4 = v3 && (objc_msgSend(v1, "code") & 0xFFFFFFFFFFFFFEFFLL) == 4;
  return v4;
}

uint64_t AFAssistantCapable()
{
  if (AFAssistantCapable_onceToken != -1)
    dispatch_once(&AFAssistantCapable_onceToken, &__block_literal_global_39_40088);
  return AFAssistantCapable_isCapable;
}

uint64_t AFIsVirtualDevice()
{
  if (AFIsVirtualDevice_onceToken != -1)
    dispatch_once(&AFIsVirtualDevice_onceToken, &__block_literal_global_42);
  return AFIsVirtualDevice_isVM;
}

uint64_t AFDictationCapable()
{
  if (AFDictationCapable_onceToken != -1)
    dispatch_once(&AFDictationCapable_onceToken, &__block_literal_global_45_40095);
  return AFDictationCapable_isCapable;
}

uint64_t AFOfflineDictationCapableWithoutOverride()
{
  if (AFOfflineDictationCapableWithoutOverride_onceToken != -1)
    dispatch_once(&AFOfflineDictationCapableWithoutOverride_onceToken, &__block_literal_global_78_40100);
  return AFOfflineDictationCapableWithoutOverride_isCapable;
}

uint64_t AFOfflineDictationStatusStringForVersion(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Version: %@"), a1);
}

uint64_t AFOfflineDictationStatusStringIsInstalled(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("Version:"));
}

uint64_t AFOfflineDictationStatusStringIsHighQualityModelInstalled(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("Version: HQ:"));
}

uint64_t AFOfflineDictationStatusStringIsInstalling(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("Installing")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "hasPrefix:", CFSTR("Waiting to Install"));

  return v2;
}

uint64_t AFOfflineDictationStatusStringIsHighQualityModelSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": HQ:"));
}

uint64_t AFOfflineDictationStatusStringIsContinuousListeningSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": CL:"));
}

uint64_t AFOfflineDictationStatusStringIsOnDeviceSearchSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": DS:"));
}

uint64_t AFOfflineDictationStatusStringIsAutoPunctuationSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": AP:"));
}

uint64_t AFOfflineDictationStatusStringIsEmojiRecognitionSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": ER:"));
}

uint64_t AFOfflineDictationStatusStringIsVoiceCommandsSupported(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR(": VC:"));
}

id AFOfflineDictationStatusStringAssetId(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR(":"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if ((objc_msgSend(v6, "hasPrefix:", CFSTR(" AssetId=")) & 1) != 0)
        {
          objc_msgSend(v6, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" AssetId="), &stru_1E3A37708);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

uint64_t AFIsMac()
{
  return 0;
}

BOOL AFDiagnosticsSubmissionAllowed()
{
  void *v0;
  _BOOL8 v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46FC0]) == 1;

  return v1;
}

uint64_t AFShouldRunDESRecording(char a1)
{
  uint64_t result;
  uint32_t v3;

  result = AFDiagnosticsSubmissionAllowed();
  if ((_DWORD)result)
  {
    result = AFOfflineDictationCapable();
    if ((_DWORD)result)
    {
      if ((a1 & 1) == 0)
      {
        if (AFIsInternalInstall_onceToken != -1)
          dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
        if (AFIsInternalInstall_isInternal)
          v3 = 2;
        else
          v3 = 100;
        return arc4random_uniform(v3) == 0;
      }
    }
  }
  return result;
}

uint64_t AFIsInternalInstall()
{
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  return AFIsInternalInstall_isInternal;
}

uint64_t initMKBDeviceUnlockedSinceBoot()
{
  void *v0;
  uint64_t (*v1)();

  v0 = MobileKeyBagLibrary();
  v1 = (uint64_t (*)())dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  softLinkMKBDeviceUnlockedSinceBoot = v1;
  if (!v1)
    __assert_rtn("initMKBDeviceUnlockedSinceBoot", "AFUtilities.m", 102, "softLinkMKBDeviceUnlockedSinceBoot");
  return v1();
}

void *MobileKeyBagLibrary()
{
  void *result;

  result = (void *)MobileKeyBagLibrary_frameworkLibrary;
  if (!MobileKeyBagLibrary_frameworkLibrary)
  {
    result = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
      __assert_rtn("MobileKeyBagLibrary", "AFUtilities.m", 101, "frameworkLibrary");
  }
  return result;
}

BOOL AFIsDeviceUnlocked()
{
  return softLinkMKBGetDeviceLockState(0) == 3 || softLinkMKBGetDeviceLockState(0) == 0;
}

uint64_t initMKBGetDeviceLockState(uint64_t a1)
{
  void *v2;
  uint64_t (*v3)();

  v2 = MobileKeyBagLibrary();
  v3 = (uint64_t (*)())dlsym(v2, "MKBGetDeviceLockState");
  softLinkMKBGetDeviceLockState = v3;
  if (!v3)
    __assert_rtn("initMKBGetDeviceLockState", "AFUtilities.m", 103, "softLinkMKBGetDeviceLockState");
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

id AFCurrentUserInterfaceIdiom()
{
  id *v0;

  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  if (AFIsHorseman_isHorseman)
  {
    v0 = (id *)MEMORY[0x1E0D892F8];
  }
  else
  {
    if (AFIsPad_onceToken != -1)
      dispatch_once(&AFIsPad_onceToken, &__block_literal_global_132_40147);
    if (AFIsPad_isPad)
      v0 = (id *)MEMORY[0x1E0D89300];
    else
      v0 = (id *)MEMORY[0x1E0D89308];
  }
  return *v0;
}

uint64_t AFIsNano()
{
  return 0;
}

uint64_t AFIsHorseman()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman;
}

uint64_t AFIsPad()
{
  if (AFIsPad_onceToken != -1)
    dispatch_once(&AFIsPad_onceToken, &__block_literal_global_132_40147);
  return AFIsPad_isPad;
}

uint64_t AFIsATV()
{
  return 0;
}

id AFDeviceName()
{
  return (id)MGCopyAnswer();
}

id AFUserAssignedDeviceName()
{
  return (id)MGCopyAnswer();
}

id AFProductName()
{
  return (id)MGCopyAnswer();
}

id AFProductType()
{
  return (id)MGCopyAnswer();
}

id AFProductTypeForInstrumentation()
{
  return (id)MGCopyAnswer();
}

id AFBuildVersion()
{
  return (id)MGCopyAnswer();
}

id AFProductVersion()
{
  return (id)MGCopyAnswer();
}

id AFHardwareTarget()
{
  int v0;
  int v1;
  void *v2;
  size_t v4;
  NSObject *v5;
  char *v6;
  size_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  char *v11;
  _BYTE v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = 64;
  v0 = sysctlbyname("hw.target", v12, &v7, 0, 0);
  if (v0)
  {
    v1 = v0;
    v2 = (void *)AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      v5 = v2;
      v6 = strerror(v1);
      *(_DWORD *)buf = 136315394;
      v9 = "AFHardwareTarget";
      v10 = 2080;
      v11 = v6;
      _os_log_error_impl(&dword_19AF50000, v5, OS_LOG_TYPE_ERROR, "%s Failed getting hw.target with sysctlbyname() %s", buf, 0x16u);

    }
    return 0;
  }
  else
  {
    v4 = v7;
    if (v7 >= 0x3F)
      v4 = 63;
    v12[v4] = 0;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v12, 30);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

id AFModelNumber()
{
  return (id)MGCopyAnswer();
}

id AFModelForDailyStatus()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  const char *v3;
  int v5;
  const char *v6;
  __int16 v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = MGCopyAnswer();
  if (v0)
  {
    v1 = (void *)v0;
    v2 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      v5 = 136315394;
      v6 = "AFModelForDailyStatus";
      v7 = 2112;
      v8 = v1;
      v3 = "%s ModelNumber returned by MobileGestalt: %@";
LABEL_7:
      _os_log_debug_impl(&dword_19AF50000, v2, OS_LOG_TYPE_DEBUG, v3, (uint8_t *)&v5, 0x16u);
    }
  }
  else
  {
    AFHardwareTarget();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      v5 = 136315394;
      v6 = "AFModelForDailyStatus";
      v7 = 2112;
      v8 = v1;
      v3 = "%s MobileGestalt not available. Using sysctlbyname() as fallback. ModelNumber returned: %@";
      goto LABEL_7;
    }
  }
  return v1;
}

id AFRegionInfo()
{
  return (id)MGCopyAnswer();
}

uint64_t AFIsPPT()
{
  if (AFIsPPT___once != -1)
    dispatch_once(&AFIsPPT___once, &__block_literal_global_102);
  return AFIsPPT_isPPTDevice;
}

BOOL AFIsCustomerInstallOrPPT()
{
  if (AFIsPPT___once != -1)
    dispatch_once(&AFIsPPT___once, &__block_literal_global_102);
  if (AFIsPPT_isPPTDevice)
    return 1;
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  return AFIsInternalInstall_isInternal == 0;
}

uint64_t AFHasCellularData()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasBaseband()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasCellularTelephony()
{
  return MGGetBoolAnswer();
}

uint64_t AFHasPearlCameraCapability()
{
  if (AFHasPearlCameraCapability_onceToken != -1)
    dispatch_once(&AFHasPearlCameraCapability_onceToken, &__block_literal_global_112_40202);
  return AFHasPearlCameraCapability_hasPearlCameraCapability;
}

uint64_t AFAccessibilitySupportsAttentionAwareFeatures()
{
  uint64_t v0;
  void *v1;
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = softLink_AXSAttentionAwarenessFeaturesEnabled();
  v1 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v3 = (void *)MEMORY[0x1E0CB37E8];
    v4 = v1;
    objc_msgSend(v3, "numberWithBool:", v0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 136315394;
    v7 = "AFAccessibilitySupportsAttentionAwareFeatures";
    v8 = 2112;
    v9 = v5;
    _os_log_debug_impl(&dword_19AF50000, v4, OS_LOG_TYPE_DEBUG, "%s #myriad _AXSAttentionAwarenessFeaturesEnabled %@", (uint8_t *)&v6, 0x16u);

  }
  return v0;
}

uint64_t init_AXSAttentionAwarenessFeaturesEnabled()
{
  void *v0;
  uint64_t (*v1)();

  v0 = (void *)AccessibilityLibrary_frameworkLibrary;
  if (!AccessibilityLibrary_frameworkLibrary)
  {
    v0 = dlopen("/System/Library/Frameworks/Accessibility.framework/Accessibility", 2);
    AccessibilityLibrary_frameworkLibrary = (uint64_t)v0;
    if (!v0)
      __assert_rtn("AccessibilityLibrary", "AFUtilities.m", 48, "frameworkLibrary");
  }
  v1 = (uint64_t (*)())dlsym(v0, "_AXSAttentionAwarenessFeaturesEnabled");
  softLink_AXSAttentionAwarenessFeaturesEnabled = v1;
  if (!v1)
    __assert_rtn("init_AXSAttentionAwarenessFeaturesEnabled", "AFUtilities.m", 49, "softLink_AXSAttentionAwarenessFeaturesEnabled");
  return v1();
}

uint64_t AFCanProxyTelephony()
{
  return 1;
}

BOOL AFSupportsVibration()
{
  if (AFHasHapticEngine_onceToken != -1)
    dispatch_once(&AFHasHapticEngine_onceToken, &__block_literal_global_119_40213);
  if (AFHasHapticEngine_hasHapticEngine)
    return 1;
  if (AFSupportsVibration_onceToken != -1)
    dispatch_once(&AFSupportsVibration_onceToken, &__block_literal_global_116_40214);
  return AFSupportsVibration_supportsVibration != 0;
}

uint64_t AFHasHapticEngine()
{
  if (AFHasHapticEngine_onceToken != -1)
    dispatch_once(&AFHasHapticEngine_onceToken, &__block_literal_global_119_40213);
  return AFHasHapticEngine_hasHapticEngine;
}

BOOL AFHasRingerSwitch()
{
  if (AFHasRingerSwitch_onceToken != -1)
    dispatch_once(&AFHasRingerSwitch_onceToken, &__block_literal_global_122);
  if (AFHasRingerSwitch_hasRingerSwitch)
    return 1;
  if (AFHasRingerButton_onceToken != -1)
    dispatch_once(&AFHasRingerButton_onceToken, &__block_literal_global_125_40221);
  return AFHasRingerButton_hasRingerButton != 0;
}

uint64_t AFHasRingerButton()
{
  if (AFHasRingerButton_onceToken != -1)
    dispatch_once(&AFHasRingerButton_onceToken, &__block_literal_global_125_40221);
  return AFHasRingerButton_hasRingerButton;
}

uint64_t AFSupportsSiriSpeaks()
{
  return 0;
}

uint64_t AFHasGPS()
{
  return MGGetBoolAnswer();
}

uint64_t AFSupportsWAPI()
{
  return MGGetBoolAnswer();
}

uint64_t AFSupportsWatchListKit()
{
  return 0;
}

uint64_t AFIsIPod()
{
  if (AFIsIPod_onceToken != -1)
    dispatch_once(&AFIsIPod_onceToken, &__block_literal_global_135_40232);
  return AFIsIPod_isIPod;
}

uint64_t AFIsIPad()
{
  if (AFIsIPad_onceToken != -1)
    dispatch_once(&AFIsIPad_onceToken, &__block_literal_global_138_40235);
  return AFIsIPad_isIPad;
}

uint64_t AFIsIOS()
{
  return 1;
}

uint64_t AFIsATVOnly()
{
  return 0;
}

uint64_t AFIsVision()
{
  return 0;
}

uint64_t AFIsUODCapableHorsemanDevice()
{
  return 0;
}

uint64_t AFIsUODCapableZeusDevice()
{
  return 0;
}

uint64_t AFIsHybridUODCapableZeusDevice()
{
  return 0;
}

uint64_t AFIsUODEnabledByDefaultDevice()
{
  return 0;
}

uint64_t AFIsUODCapableTVOSDevice()
{
  return 0;
}

uint64_t AFIsUODCapableWatchOSDevice()
{
  return 0;
}

uint64_t AFIsUODCapableMacOSDevice()
{
  return 0;
}

BOOL AFCDAFaceDetection()
{
  if (!+[AFFeatureFlags isCDAFaceDetectionEnabled](AFFeatureFlags, "isCDAFaceDetectionEnabled"))
    return 0;
  if (AFHasPearlCameraCapability_onceToken != -1)
    dispatch_once(&AFHasPearlCameraCapability_onceToken, &__block_literal_global_112_40202);
  return AFHasPearlCameraCapability_hasPearlCameraCapability != 0;
}

uint64_t AFSupportsSCDAFramework()
{
  if (AFSupportsSCDAFramework_onceToken != -1)
    dispatch_once(&AFSupportsSCDAFramework_onceToken, &__block_literal_global_143_40244);
  return AFSupportsSCDAFramework_scdaFrameworkEnabled;
}

uint64_t AFSupportsSCDAProximity()
{
  if (AFSupportsSCDAProximity_onceToken != -1)
    dispatch_once(&AFSupportsSCDAProximity_onceToken, &__block_literal_global_144_40245);
  return AFSupportsSCDAProximity_scdaProximityEnabled;
}

BOOL AFMyriadEmitSelfMetrics()
{
  return +[AFFeatureFlags isMyriadSelfMetricsEnabled](AFFeatureFlags, "isMyriadSelfMetricsEnabled");
}

uint64_t AFMyriadEmitClassicMetrics()
{
  return +[AFFeatureFlags isMyriadSelfMetricsEnabled](AFFeatureFlags, "isMyriadSelfMetricsEnabled") ^ 1;
}

uint64_t AFSupportsPairedDevice()
{
  if (AFSupportsPairedDevice_onceToken != -1)
    dispatch_once(&AFSupportsPairedDevice_onceToken, &__block_literal_global_145_40250);
  return AFSupportsPairedDevice_supportsPairedDevice;
}

uint64_t AFSupportsAirPlayEndpointRoute()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman;
}

BOOL AFSupportsPlayThisOnThat()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman == 0;
}

uint64_t AFSupportsPlayThisOnThatPlayback()
{
  return 0;
}

uint64_t AFSupportsMultiUser()
{
  if (+[AFFeatureFlags isLassoEnabled](AFFeatureFlags, "isLassoEnabled"))
  {
    if (AFIsHorseman_onceToken == -1)
      return AFIsHorseman_isHorseman;
    goto LABEL_6;
  }
  if (AFIsHorseman_onceToken != -1)
LABEL_6:
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman;
}

uint64_t AFIsMultiUserCompanion()
{
  return 1;
}

uint64_t AFSupportsWirelessSplitter()
{
  if (AFSupportsWirelessSplitter_onceToken != -1)
    dispatch_once(&AFSupportsWirelessSplitter_onceToken, &__block_literal_global_148);
  return AFSupportsWirelessSplitter_supportsWirelessSplitter;
}

uint64_t AFSupportsSpeechExtraction()
{
  return 1;
}

uint64_t AFDeviceHighestLanguageModelCapabilityIdentifier()
{
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1)
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_475);
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier)
    return 10;
  else
    return 0;
}

uint64_t AFDeviceSupportsOnDeviceDictation()
{
  if (AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken != -1)
    dispatch_once(&AFDeviceHighestLanguageModelCapabilityIdentifier_onceToken, &__block_literal_global_475);
  return AFDeviceHighestLanguageModelCapabilityIdentifier_deviceHighestCapabilityIdentifier;
}

uint64_t AFIsTop13Locale(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = AFIsTop13Locale_once;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&AFIsTop13Locale_once, &__block_literal_global_151);
  v3 = objc_msgSend((id)AFIsTop13Locale_top13Locales, "containsObject:", v2);

  return v3;
}

uint64_t AFIsGoldLocale(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = AFIsGoldLocale_once;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&AFIsGoldLocale_once, &__block_literal_global_177);
  v3 = objc_msgSend((id)AFIsGoldLocale_goldLocales, "containsObject:", v2);

  return v3;
}

uint64_t AFIsVisionBuiltInLocale(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = AFIsVisionBuiltInLocale_once;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&AFIsVisionBuiltInLocale_once, &__block_literal_global_194);
  v3 = objc_msgSend((id)AFIsVisionBuiltInLocale_builtInLocales, "containsObject:", v2);

  return v3;
}

uint64_t AFIsTop41Locale(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _AFTop41Locales();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", v1);

  return v3;
}

id _AFTop41Locales()
{
  if (_AFTop41Locales_once != -1)
    dispatch_once(&_AFTop41Locales_once, &__block_literal_global_594);
  return (id)_AFTop41Locales_top41Locales;
}

uint64_t AFShouldRunAsrOnServerForUODLanguage(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  id v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD block[4];
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (AFDeviceSupportsHybridUOD())
  {
    v2 = (void *)MGCopyAnswer();
    if (v2)
    {
      if (v1)
      {
        if (+[AFFeatureFlags isAsrOnServerForUODEnabled](AFFeatureFlags, "isAsrOnServerForUODEnabled"))
        {
          if (+[AFFeatureFlags forceAsrOnServerForUOD](AFFeatureFlags, "forceAsrOnServerForUOD"))
          {
            v3 = AFSiriLogContextDaemon;
            v4 = 1;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v14 = "AFShouldRunAsrOnServerForUODLanguage";
              _os_log_impl(&dword_19AF50000, v3, OS_LOG_TYPE_INFO, "%s #AsrOnServer Forcing Hybrid UOD mode to true.", buf, 0xCu);
            }
          }
          else
          {
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __AFShouldRunAsrOnServerForUODLanguage_block_invoke;
            block[3] = &unk_1E3A36F30;
            v8 = v1;
            v12 = v8;
            if (AFShouldRunAsrOnServerForUODLanguage_once != -1)
              dispatch_once(&AFShouldRunAsrOnServerForUODLanguage_once, block);
            if (AFDeviceSupportsSiriUOD()
              && objc_msgSend((id)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForFullUOD, "containsObject:", v8))
            {
              v9 = AFSiriLogContextDaemon;
              if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315138;
                v14 = "AFShouldRunAsrOnServerForUODLanguage";
                _os_log_impl(&dword_19AF50000, v9, OS_LOG_TYPE_INFO, "%s #AsrOnServer Hybrid UOD mode not supported - as Full UOD is supported.", buf, 0xCu);
              }
              v4 = 0;
            }
            else
            {
              if (objc_msgSend((id)AFShouldRunAsrOnServerForUODLanguage_supportedLanguageCodesForNL, "containsObject:", v8))
              {
                if (AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL)
                  v4 = objc_msgSend((id)AFShouldRunAsrOnServerForUODLanguage_unsupportedProductTypesForNL, "containsObject:", v2) ^ 1;
                else
                  v4 = 1;
              }
              else
              {
                v4 = 0;
              }
              v10 = AFSiriLogContextDaemon;
              if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315906;
                v14 = "AFShouldRunAsrOnServerForUODLanguage";
                v15 = 1024;
                v16 = v4;
                v17 = 2112;
                v18 = v8;
                v19 = 2112;
                v20 = v2;
                _os_log_impl(&dword_19AF50000, v10, OS_LOG_TYPE_INFO, "%s #AsrOnServer Hybrid UOD mode supported=%d for languageCode=%@ and productType=%@", buf, 0x26u);
              }
            }

          }
          goto LABEL_17;
        }
        v5 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          v14 = "AFShouldRunAsrOnServerForUODLanguage";
          v6 = "%s #AsrOnServer Hybrid UOD mode not supported - uod_asr_on_server_enabled is false.";
          goto LABEL_15;
        }
LABEL_16:
        v4 = 0;
LABEL_17:

        goto LABEL_18;
      }
      v5 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        goto LABEL_16;
      *(_DWORD *)buf = 136315138;
      v14 = "AFShouldRunAsrOnServerForUODLanguage";
      v6 = "%s #AsrOnServer Hybrid UOD mode not supported - languageCode is nil.";
    }
    else
    {
      v5 = AFSiriLogContextDaemon;
      if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        goto LABEL_16;
      *(_DWORD *)buf = 136315138;
      v14 = "AFShouldRunAsrOnServerForUODLanguage";
      v6 = "%s #AsrOnServer Hybrid UOD mode not supported - productType is nil.";
    }
LABEL_15:
    _os_log_impl(&dword_19AF50000, v5, OS_LOG_TYPE_INFO, v6, buf, 0xCu);
    goto LABEL_16;
  }
  v4 = 0;
LABEL_18:

  return v4;
}

uint64_t AFShouldRunAsrOnServerForUOD()
{
  void *v0;
  void *v1;
  uint64_t v2;

  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "languageCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = AFShouldRunAsrOnServerForUODLanguage(v1);
  return v2;
}

uint64_t AFIsSpeechAssetAvailableFromUodStatus(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", CFSTR("SPEECH"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

uint64_t AFIsMorphunAssetAvailableFromUodStatus(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", CFSTR("MORPHUN"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

uint64_t AFIsNLAssetAvailableFromUodStatus(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", CFSTR("NL"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

uint64_t AFIsAttentionAssetAvailableFromUodStatus(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", CFSTR("ATTENTION"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

id AFRequiredAssetsForFullUOD(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  int v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0C99E20];
  v2 = a1;
  objc_msgSend(v1, "setWithObjects:", CFSTR("NL"), CFSTR("SPEECH"), CFSTR("MORPHUN"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = AFIsTop13Locale(v2);

  if (v4)
    objc_msgSend(v3, "addObject:", CFSTR("ATTENTION"));
  v5 = (void *)objc_msgSend(v3, "copy");

  return v5;
}

BOOL AFAssetsAvailabilityMatchesRequiredAssets(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __AFAssetsAvailabilityMatchesRequiredAssets_block_invoke;
  v8[3] = &unk_1E3A362C0;
  v5 = v3;
  v9 = v5;
  v10 = &v11;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v8);
  v6 = *((_BYTE *)v12 + 24) == 0;

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_19B0BF024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL AFUODStatusSupportedSAE(void *a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;

  if (!a1 || !a2)
    return 0;
  v3 = a1;
  AFSAERequiredAssets(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v4);

  return v5;
}

id AFSAERequiredAssets(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  AFRequiredAssetsForFullUOD(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "mutableCopy");

  objc_msgSend(v2, "addObject:", CFSTR("NLROUTER"));
  v3 = (void *)objc_msgSend(v2, "copy");

  return v3;
}

BOOL AFUODStatusSupportedHybrid(void *a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  id v5;
  void *v6;
  int v7;

  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    v5 = a2;
    AFRequiredAssetsForHybridUOD();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = AFShouldRunAsrOnServerForUODLanguage(v5);

    if (v7)
      v4 = AFAssetsAvailabilityMatchesRequiredAssets(v3, v6);
    else
      v4 = 0;

  }
  return v4;
}

id AFRequiredAssetsForHybridUOD()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("NL"), CFSTR("MORPHUN"), 0);
}

uint64_t AFSimulatorSupportsSiriUOD()
{
  if (AFSimulatorSupportsSiriUOD_onceToken != -1)
    dispatch_once(&AFSimulatorSupportsSiriUOD_onceToken, &__block_literal_global_208);
  return AFSimulatorSupportsSiriUOD_currentSimulatorSupportsUOD;
}

uint64_t AFDeviceSupportsFullSiriUOD()
{
  uint64_t result;

  result = AFDeviceSupportsSiriUOD();
  if ((_DWORD)result)
    return AFShouldRunAsrOnServerForUOD() ^ 1;
  return result;
}

BOOL AFDeviceSupportsBobble()
{
  _BOOL8 v0;
  NSObject *v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = +[AFFeatureFlags isBobbleEnabled](AFFeatureFlags, "isBobbleEnabled");
  if (!v0)
  {
    v1 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      v3 = 136315138;
      v4 = "AFDeviceSupportsBobble";
      _os_log_debug_impl(&dword_19AF50000, v1, OS_LOG_TYPE_DEBUG, "%s 🫨 Feature flag is disabled!", (uint8_t *)&v3, 0xCu);
    }
  }
  return v0;
}

uint64_t AFNanoDeviceHasDedicatedSiriResources()
{
  return 0;
}

uint64_t AFDeviceSupportsCarPlay()
{
  if (AFDeviceSupportsCarPlay_onceToken != -1)
    dispatch_once(&AFDeviceSupportsCarPlay_onceToken, &__block_literal_global_245);
  return AFDeviceSupportsCarPlay_supportsCarPlay;
}

uint64_t AFWatchOSVersion(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  if (NanoRegistryLibrary_sLib && dlsym((void *)NanoRegistryLibrary_sLib, "NRWatchOSVersion"))
    v5 = softLinkNRWatchOSVersion(v3, v4);
  else
    v5 = 0xFFFFFFFFLL;

  return v5;
}

uint64_t initNRWatchOSVersion(void *a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;

  v3 = NanoRegistryLibrary_sOnce;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  softLinkNRWatchOSVersion = (uint64_t (*)())dlsym((void *)NanoRegistryLibrary_sLib, "NRWatchOSVersion");
  v6 = ((uint64_t (*)(id, id))softLinkNRWatchOSVersion)(v5, v4);

  return v6;
}

uint64_t AFWatchOSVersionIsGreaterThanOrEqual(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a1 == -1)
    return 0;
  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  if (NanoRegistryLibrary_sLib && dlsym((void *)NanoRegistryLibrary_sLib, "NRVersionIsGreaterThanOrEqual"))
    return softLinkNRVersionIsGreaterThanOrEqual(a1, a2);
  else
    return 0;
}

uint64_t initNRVersionIsGreaterThanOrEqual(uint64_t a1, uint64_t a2)
{
  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  softLinkNRVersionIsGreaterThanOrEqual = (uint64_t (*)())dlsym((void *)NanoRegistryLibrary_sLib, "NRVersionIsGreaterThanOrEqual");
  return ((uint64_t (*)(uint64_t, uint64_t))softLinkNRVersionIsGreaterThanOrEqual)(a1, a2);
}

double AFMainScreenScale()
{
  float v0;

  MGGetFloat32Answer();
  return v0;
}

id AFDeviceColor()
{
  return (id)MGCopyAnswer();
}

id AFDeviceEnclosureColor()
{
  return (id)MGCopyAnswer();
}

uint64_t AFDeviceEnclosureRGBColor()
{
  return MGGetSInt32Answer();
}

uint64_t AFDeviceIsVictory()
{
  return 0;
}

BOOL AFPairedDeviceIsVictory()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  objc_msgSend(getNRPairedDeviceRegistryClass(), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getActivePairedDevice");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  getNRDevicePropertyDeviceBrand();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "intValue") == 2;
  return v4;
}

id NRPairedDeviceRegistryFunction()
{
  return (id)classNRPairedDeviceRegistry;
}

id initNRPairedDeviceRegistry()
{
  if (initNRPairedDeviceRegistry_sOnce != -1)
    dispatch_once(&initNRPairedDeviceRegistry_sOnce, &__block_literal_global_613);
  return (id)classNRPairedDeviceRegistry;
}

id NRDevicePropertyDeviceBrandFunction()
{
  return (id)constantNRDevicePropertyDeviceBrand;
}

id initNRDevicePropertyDeviceBrand()
{
  if (initNRDevicePropertyDeviceBrand_sOnce != -1)
    dispatch_once(&initNRDevicePropertyDeviceBrand_sOnce, &__block_literal_global_616);
  return (id)constantNRDevicePropertyDeviceBrand;
}

void __initNRDevicePropertyDeviceBrand_block_invoke()
{
  id *v0;

  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  v0 = (id *)dlsym((void *)NanoRegistryLibrary_sLib, "NRDevicePropertyDeviceBrand");
  if (!v0)
    __assert_rtn("initNRDevicePropertyDeviceBrand_block_invoke", "AFUtilities.m", 116, "constant");
  objc_storeStrong((id *)&constantNRDevicePropertyDeviceBrand, *v0);
  getNRDevicePropertyDeviceBrand = NRDevicePropertyDeviceBrandFunction;
}

Class __initNRPairedDeviceRegistry_block_invoke()
{
  Class result;

  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  result = objc_getClass("NRPairedDeviceRegistry");
  classNRPairedDeviceRegistry = (uint64_t)result;
  if (!result)
    __assert_rtn("initNRPairedDeviceRegistry_block_invoke", "AFUtilities.m", 115, "classNRPairedDeviceRegistry");
  getNRPairedDeviceRegistryClass = NRPairedDeviceRegistryFunction;
  return result;
}

uint64_t AFDeviceIsTinker()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(getNRPairedDeviceRegistryClass(), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(getNRPairedDeviceRegistryClass(), "activeDeviceSelectorBlock");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getAllDevicesWithArchivedAltAccountDevicesMatching:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  getNRDevicePropertyIsAltAccount();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForProperty:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLValue");

  return v6;
}

id NRDevicePropertyIsAltAccountFunction()
{
  return (id)constantNRDevicePropertyIsAltAccount;
}

id initNRDevicePropertyIsAltAccount()
{
  if (initNRDevicePropertyIsAltAccount_sOnce != -1)
    dispatch_once(&initNRDevicePropertyIsAltAccount_sOnce, &__block_literal_global_619);
  return (id)constantNRDevicePropertyIsAltAccount;
}

void __initNRDevicePropertyIsAltAccount_block_invoke()
{
  id *v0;

  if (NanoRegistryLibrary_sOnce != -1)
    dispatch_once(&NanoRegistryLibrary_sOnce, &__block_literal_global_611);
  v0 = (id *)dlsym((void *)NanoRegistryLibrary_sLib, "NRDevicePropertyIsAltAccount");
  if (!v0)
    __assert_rtn("initNRDevicePropertyIsAltAccount_block_invoke", "AFUtilities.m", 117, "constant");
  objc_storeStrong((id *)&constantNRDevicePropertyIsAltAccount, *v0);
  getNRDevicePropertyIsAltAccount = NRDevicePropertyIsAltAccountFunction;
}

void (__cdecl *AFInstallCommonSignalHandlers())(int)
{
  void (__cdecl *result)(int);

  signal(15, (void (__cdecl *)(int))_AFHandleSignalByExitingCleanly);
  result = (void (__cdecl *)(int))AFEnableCrashTrappingTTRs();
  if ((_DWORD)result)
  {
    signal(6, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
    signal(10, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
    return signal(11, (void (__cdecl *)(int))_AFHandleSignalByFilingIssue);
  }
  return result;
}

uint64_t _AFHandleSignalByExitingCleanly(int a1)
{
  NSObject *v2;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "_AFHandleSignalByExitingCleanly";
    v6 = 2048;
    v7 = a1;
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s Got signal %ld, exiting when clean", (uint8_t *)&v4, 0x16u);
  }
  return xpc_transaction_exit_clean();
}

BOOL AFEnableCrashTrappingTTRs()
{
  NSObject *v0;
  _BOOL8 v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __AFEnableCrashTrappingTTRs_block_invoke;
  block[3] = &unk_1E3A365A8;
  block[4] = &v4;
  if (AFEnableCrashTrappingTTRs_onceToken != -1)
    dispatch_once(&AFEnableCrashTrappingTTRs_onceToken, block);
  if (*((_BYTE *)v5 + 24))
  {
    v0 = AFSiriLogContextUtility;
    v1 = 1;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v9 = "AFEnableCrashTrappingTTRs";
      _os_log_impl(&dword_19AF50000, v0, OS_LOG_TYPE_INFO, "%s Crash trapping TTRs has been enabled", buf, 0xCu);
      v1 = *((_BYTE *)v5 + 24) != 0;
    }
  }
  else
  {
    v1 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void _AFHandleSignalByFilingIssue(int a1)
{
  NSObject *v2;
  dispatch_semaphore_t v3;
  AFSettingsConnection *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  _QWORD v10[4];
  NSObject *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  uint64_t (*v15)(_QWORD, _QWORD);
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "_AFHandleSignalByFilingIssue";
    v14 = 2048;
    v15 = MEMORY[0x1E0C853F0];
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s Got signal %ld, filing radar", buf, 0x16u);
  }
  v3 = dispatch_semaphore_create(0);
  v4 = objc_alloc_init(AFSettingsConnection);
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "processName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___AFHandleSignalByFilingIssue_block_invoke;
  v10[3] = &unk_1E3A36A00;
  v7 = v3;
  v11 = v7;
  -[AFSettingsConnection createRadarForCrashWithReason:process:completion:](v4, "createRadarForCrashWithReason:process:completion:", CFSTR("crash_trap"), v6, v10);

  v8 = dispatch_time(0, 5000000000);
  if (dispatch_semaphore_wait(v7, v8))
  {
    v9 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "_AFHandleSignalByFilingIssue";
      _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s Timed out waiting for radar to launch", buf, 0xCu);
    }
  }
  signal(a1, 0);
  raise(a1);

}

uint64_t AFConnectionHasEntitlementCached(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  +[AFConnectionEntitlementCache sharedCache](AFConnectionEntitlementCache, "sharedCache");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v5, "processIdentifier");
  if ((objc_msgSend(v8, "hasEntitlement:forPID:", v6, v9) & 1) == 0)
  {
    objc_msgSend(v5, "valueForEntitlement:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v11 = 0;
      goto LABEL_6;
    }
    objc_msgSend(v8, "cacheEntitlement:forPID:bundleID:", v6, v9, v7);
  }
  v11 = 1;
LABEL_6:

  return v11;
}

id AFOutputVoiceLanguageForRecognitionLanguage(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(&unk_1E3AAA340, "objectForKey:", v1);
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)v2;
    if (v2)
      v4 = (void *)v2;
    else
      v4 = v1;
    v5 = v4;

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id AFOutputVoiceLanguageForMacrolanguage(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 1)
  {
    objc_msgSend(v1, "substringToIndex:", 2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(&unk_1E3AAA368, "objectForKey:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
      v5 = v4;
    else
      v5 = v1;
    v2 = v5;

  }
  else
  {
    v2 = v1;
  }

  return v2;
}

const __CFString *AFCarouselBundleIdentifier()
{
  return CFSTR("com.apple.Carousel");
}

id AFOfflineDictationLanguageForKeyboardLanguage(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a2;
  objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "containsObject:", v4))
  {
    v5 = v4;
  }
  else
  {
    _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6
      && (objc_msgSend(v6, "isEqualToString:", v4) & 1) == 0
      && objc_msgSend(v3, "containsObject:", v7))
    {
      v5 = v7;
    }
    else
    {
      AFDictationLanguageForKeyboardLanguage(v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8 && objc_msgSend(v3, "containsObject:", v8))
      {
        v5 = v8;
      }
      else
      {
        _AFSpecificFallbackForLanguage(v4, 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9 && objc_msgSend(v3, "containsObject:", v9))
        {
          v5 = v9;
        }
        else
        {
          objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("-"));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "firstObject");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          _AFSpecificFallbackForLanguage(v4, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12 && objc_msgSend(v3, "containsObject:", v12))
            v5 = v12;
          else
            v5 = 0;

        }
      }

    }
  }

  return v5;
}

id AFDictationLanguageForKeyboardLanguage(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = (void *)MEMORY[0x1E0C99DC8];
  v2 = a1;
  objc_msgSend(v1, "currentLocale");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "countryCode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "languageCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  _AFDictationLanguageForKeyboardLanguageAndConfiguration(v2, v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id _AFSpecificFallbackForLanguage(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  int v13;
  const char *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    objc_msgSend(&unk_1E3AAA390, "objectForKey:", v3);
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
    if (!v4)
      goto LABEL_7;
  }
  if (!v6)
  {
    objc_msgSend(&unk_1E3AAA390, "objectForKey:", v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_7:
  if (v6 && AFPreferencesLanguageIsExplicitlySupportedForDictation(v6))
  {
    v7 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      v13 = 136315650;
      v14 = "_AFSpecificFallbackForLanguage";
      v15 = 2112;
      v16 = v6;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_19AF50000, v7, OS_LOG_TYPE_INFO, "%s Using dictation hardcoded fallback %@ for %@", (uint8_t *)&v13, 0x20u);
    }
    goto LABEL_28;
  }

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
  {
    v6 = 0;
    goto LABEL_28;
  }
  AFInternalConfigValueForKey(CFSTR("Language Fallbacks"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v3)
  {
    v10 = 0;
    if (!v5)
      goto LABEL_21;
LABEL_19:
    if (!v10)
    {
      objc_msgSend(v9, "objectForKey:", v5);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_21;
  }
  objc_msgSend(v8, "objectForKey:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    goto LABEL_19;
LABEL_21:
  if (v10 && AFPreferencesLanguageIsExplicitlySupportedForDictation(v10))
  {
    v11 = AFSiriLogContextUtility;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      v13 = 136315650;
      v14 = "_AFSpecificFallbackForLanguage";
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_19AF50000, v11, OS_LOG_TYPE_INFO, "%s Using dictation internal hardcoded fallback %@ for %@", (uint8_t *)&v13, 0x20u);
    }
    v6 = v10;
  }
  else
  {
    v6 = 0;
  }

LABEL_28:
  return v6;
}

id _AFDictationLanguageForKeyboardLanguageAndConfiguration(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  void *v16;
  int v17;
  NSObject *v18;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  id v59;
  __int16 v60;
  id v61;
  __int16 v62;
  id v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v5, "length");
  v9 = AFSiriLogContextUtility;
  v10 = os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136315906;
      v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
      v58 = 2112;
      v59 = v5;
      v60 = 2112;
      v61 = v6;
      v62 = 2112;
      v63 = v7;
      _os_log_impl(&dword_19AF50000, v9, OS_LOG_TYPE_INFO, "%s %@ countryCode=%@ siriLanguage=%@", buf, 0x2Au);
    }
    objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR("-"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    _AFSpecificFallbackForLanguage(v11, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
        v58 = 2112;
        v59 = v5;
        v60 = 2112;
        v61 = v12;
        _os_log_impl(&dword_19AF50000, v13, OS_LOG_TYPE_INFO, "%s %@ is specifically supported as %@", buf, 0x20u);
      }
      v14 = v12;
    }
    else
    {
      AFPreferencesSupportedDictationLanguagesSet();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "containsObject:", v5);

      if (!v17)
      {
        v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 3);
        objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)objc_msgSend(v21, "mutableCopy");

        if (v22)
        {
          if (v6
            && (v23 = *MEMORY[0x1E0C997B0],
                objc_msgSend(v22, "objectForKey:", *MEMORY[0x1E0C997B0]),
                v24 = (void *)objc_claimAutoreleasedReturnValue(),
                v24,
                !v24))
          {
            objc_msgSend(v22, "setObject:forKey:", v6, v23);
            objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v22);
            v48 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "addObject:");
          }
          else
          {
            v48 = v5;
          }
          objc_msgSend(v20, "addObject:", v5);
          v26 = *MEMORY[0x1E0C997E8];
          objc_msgSend(v22, "objectForKey:", *MEMORY[0x1E0C997E8]);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            objc_msgSend(MEMORY[0x1E0C99DC8], "componentsFromLocaleIdentifier:", v7);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "objectForKey:", v26);
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v28, "isEqualToString:", v50))
              objc_msgSend(v20, "addObject:", v7);

          }
          v29 = (void *)MEMORY[0x1E0CB34D0];
          AFPreferencesSupportedDictationLanguages();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "preferredLocalizationsFromArray:forPreferences:", v30, v20);
          v49 = (void *)objc_claimAutoreleasedReturnValue();

          v31 = AFSiriLogContextUtility;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
            v58 = 2112;
            v59 = v20;
            v60 = 2112;
            v61 = v49;
            _os_log_impl(&dword_19AF50000, v31, OS_LOG_TYPE_INFO, "%s preferences %@ -> %@", buf, 0x20u);
          }
          if (v50)
          {
            v44 = v22;
            v45 = v20;
            v46 = v7;
            v47 = v6;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v32 = v49;
            v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
            if (v33)
            {
              v34 = v33;
              v35 = *(_QWORD *)v52;
              while (2)
              {
                v36 = 0;
                do
                {
                  if (*(_QWORD *)v52 != v35)
                    objc_enumerationMutation(v32);
                  v37 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v36);
                  v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", v37);
                  objc_msgSend(v38, "languageCode");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  v40 = objc_msgSend(v39, "isEqualToString:", v50);

                  if (v40)
                  {
                    v42 = AFSiriLogContextUtility;
                    if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 136315394;
                      v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
                      v58 = 2112;
                      v59 = v38;
                      _os_log_impl(&dword_19AF50000, v42, OS_LOG_TYPE_INFO, "%s %@ is the best-choice in the same base language, using it.", buf, 0x16u);
                    }
                    v15 = v37;

                    goto LABEL_47;
                  }

                  ++v36;
                }
                while (v34 != v36);
                v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
                if (v34)
                  continue;
                break;
              }
            }

            v41 = AFSiriLogContextUtility;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
              _os_log_impl(&dword_19AF50000, v41, OS_LOG_TYPE_INFO, "%s No dictation language found", buf, 0xCu);
            }
            v15 = 0;
LABEL_47:
            v7 = v46;
            v6 = v47;
            v22 = v44;
            v20 = v45;
          }
          else
          {
            objc_msgSend(v49, "firstObject");
            v15 = (id)objc_claimAutoreleasedReturnValue();
            v43 = AFSiriLogContextUtility;
            if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
              v58 = 2112;
              v59 = v15;
              _os_log_impl(&dword_19AF50000, v43, OS_LOG_TYPE_INFO, "%s Could not determine keyboard language-code, returning best-guess: %@", buf, 0x16u);
            }
          }

        }
        else
        {
          v25 = AFSiriLogContextUtility;
          if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315138;
            v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
            _os_log_impl(&dword_19AF50000, v25, OS_LOG_TYPE_INFO, "%s Could not parse keyboard language, giving up", buf, 0xCu);
          }
          v15 = 0;
        }

        goto LABEL_16;
      }
      v18 = AFSiriLogContextUtility;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
        v58 = 2112;
        v59 = v5;
        _os_log_impl(&dword_19AF50000, v18, OS_LOG_TYPE_INFO, "%s %@ is an exact match for a dictation language, using it", buf, 0x16u);
      }
      v14 = v5;
    }
    v15 = v14;
LABEL_16:

    goto LABEL_17;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136315138;
    v57 = "_AFDictationLanguageForKeyboardLanguageAndConfiguration";
    _os_log_impl(&dword_19AF50000, v9, OS_LOG_TYPE_INFO, "%s Can not infer dictation language with no keyboard language", buf, 0xCu);
  }
  v15 = 0;
LABEL_17:

  return v15;
}

uint64_t AFDeviceSupportsANE()
{
  return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsZLL()
{
  if (AFDeviceSupportsZLL_onceToken != -1)
    dispatch_once(&AFDeviceSupportsZLL_onceToken, &__block_literal_global_315);
  return AFDeviceSupportsZLL_deviceSupportsZLL;
}

uint64_t AFDeviceSupportsAOP()
{
  return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsTTS()
{
  return 1;
}

uint64_t AFDeviceSupportsBargeIn()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  if (AFIsHorseman_isHorseman)
    return 1;
  else
    return MGGetBoolAnswer();
}

uint64_t AFDeviceSupportsWiFiLPASMode()
{
  return 1;
}

uint64_t AFDeviceSupportsAudioSessionCoordination()
{
  void *v0;
  uint64_t v1;

  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  if (!AFIsHorseman_isHorseman)
    return 0;
  +[AFInstanceContext currentContext](AFInstanceContext, "currentContext");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isDefault");

  return v1;
}

uint64_t AFDeviceSupportsUSBTypeCDisplay()
{
  if (AFDeviceSupportsUSBTypeCDisplay_onceToken != -1)
    dispatch_once(&AFDeviceSupportsUSBTypeCDisplay_onceToken, &__block_literal_global_323);
  return AFDeviceSupportsUSBTypeCDisplay_supportsAppleDisplay;
}

id AFDeviceRegionCode()
{
  if (AFDeviceRegionCode_onceToken != -1)
    dispatch_once(&AFDeviceRegionCode_onceToken, &__block_literal_global_326);
  return (id)AFDeviceRegionCode_deviceRegionCode;
}

uint64_t AFDeviceSupportsSpokenMessages()
{
  return MGGetBoolAnswer();
}

BOOL AFDeviceHasAddressBook()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman == 0;
}

id _AFRedactedCopyPerson(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v1 = (void *)objc_msgSend(a1, "copy");
  objc_msgSend(v1, "fullName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "length");

  if (v3)
    objc_msgSend(v1, "setFullName:", CFSTR("@{fn#fullName}"));
  objc_msgSend(v1, "firstName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "length");

  if (v5)
    objc_msgSend(v1, "setFirstName:", CFSTR("@{fn#firstName}"));
  objc_msgSend(v1, "middleName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "length");

  if (v7)
    objc_msgSend(v1, "setMiddleName:", CFSTR("@{fn#middleName}"));
  objc_msgSend(v1, "lastName");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "length");

  if (v9)
    objc_msgSend(v1, "setLastName:", CFSTR("@{fn#lastName}"));
  objc_msgSend(v1, "nickName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "length");

  if (v11)
    objc_msgSend(v1, "setNickName:", CFSTR("@{fn#nickName}"));
  objc_msgSend(v1, "internalGUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "length");

  if (v13)
    objc_msgSend(v1, "setInternalGUID:", CFSTR("@{fn#internalGUID}"));
  return v1;
}

id _AFRedactedFamilyNamesCopyPerson(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (void *)objc_msgSend(a1, "copy");
  objc_msgSend(v1, "relatedNames");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    objc_msgSend(v1, "relatedNames");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          v11 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v10), "copy", (_QWORD)v13);
          objc_msgSend(v11, "setName:", CFSTR("@{fn#relationName}"));
          objc_msgSend(v5, "addObject:", v11);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }

    objc_msgSend(v1, "setRelatedNames:", v5);
  }
  return v1;
}

unint64_t AFMachAbsoluteTimeGetNanoseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1);
}

unint64_t AFMachAbsoluteTimeGetMicroseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000.0);
}

unint64_t AFMachAbsoluteTimeGetMilliseconds(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return (unint64_t)(*(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000000.0);
}

double AFMachAbsoluteTimeGetTimeInterval(unint64_t a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return *(double *)&_AFMachAbsoluteTimeRate_rate * (double)a1 / 1000000000.0;
}

unint64_t AFGetMachAbsoluteTimeFromTimeInterval(double a1)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return (unint64_t)(a1 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate);
}

uint64_t AFMachAbsoluteTimeAddTimeInterval(uint64_t a1, double a2)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return (unint64_t)(a2 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate) + a1;
}

uint64_t AFMachAbsoluteTimeSubtractTimeInterval(uint64_t a1, double a2)
{
  if (_AFMachAbsoluteTimeRate_onceToken != -1)
    dispatch_once(&_AFMachAbsoluteTimeRate_onceToken, &__block_literal_global_652);
  return a1 - (unint64_t)(a2 * 1000000000.0 / *(double *)&_AFMachAbsoluteTimeRate_rate);
}

unint64_t AFGetTimeSinceEpochRoundedToHourInMilliseconds()
{
  void *v0;
  double v1;
  double v2;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "timeIntervalSince1970");
  v2 = v1;

  return (unint64_t)((double)((int)v2 / 3600) * 3600.0 * 1000.0);
}

unint64_t AFGetTimeSinceEpochInMilliseconds()
{
  void *v0;
  double v1;
  unint64_t v2;

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "timeIntervalSince1970");
  v2 = (unint64_t)(v1 * 1000.0);

  return v2;
}

uint64_t AFSystemGetBootTimeInMicroseconds()
{
  if (AFSystemGetBootTimeInMicroseconds_onceToken != -1)
    dispatch_once(&AFSystemGetBootTimeInMicroseconds_onceToken, &__block_literal_global_332);
  return AFSystemGetBootTimeInMicroseconds_bootTime;
}

double AFSystemGetBootTimeInTimeInterval()
{
  if (AFSystemGetBootTimeInMicroseconds_onceToken != -1)
    dispatch_once(&AFSystemGetBootTimeInMicroseconds_onceToken, &__block_literal_global_332);
  return (double)(unint64_t)AFSystemGetBootTimeInMicroseconds_bootTime / 1000000.0;
}

BOOL AFDeviceSupportsNavigation()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman == 0;
}

BOOL AFMapsNavigationStatusIsActive()
{
  void *v0;
  uint64_t v1;

  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "currentNavigationState");

  return (unint64_t)(v1 - 1) < 3;
}

id AFLibraryDirectoryWithSubPath(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;

  v3 = a1;
  NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v5, "stringByAppendingPathComponent:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v6, 1, 0, a2);

    v9 = 0;
    if (v8)
      v9 = v6;

  }
  else if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 2, 0);
    v9 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id AFAddInterruptingAudioSessionInfoToAnalyticsContext(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  __CFString *v9;
  int v10;
  CFArrayRef theArray;
  _QWORD v12[2];
  const __CFString *v13;
  CFArrayRef v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  CFArrayRef v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  theArray = 0;
  v10 = 8;
  v2 = MEMORY[0x1A1AC0030](1634952297, &v10, &theArray);
  if ((_DWORD)v2 || !theArray || CFArrayGetCount(theArray) < 1)
  {
    v5 = (id)AFSiriLogContextSpeech;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if ((_DWORD)v2)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v2);
        v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v9 = CFSTR("No displayIDs found, but success reported");
      }
      *(_DWORD *)buf = 136315394;
      v16 = "AFAddInterruptingAudioSessionInfoToAnalyticsContext";
      v17 = 2112;
      v18 = (CFArrayRef)v9;
      _os_log_error_impl(&dword_19AF50000, v5, OS_LOG_TYPE_ERROR, "%s Error fetching kAudioSessionProperty_ActiveSessionDisplayIDs %@", buf, 0x16u);
      if ((_DWORD)v2)

    }
  }
  else
  {
    v3 = AFSiriLogContextSpeech;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "AFAddInterruptingAudioSessionInfoToAnalyticsContext";
      v17 = 2112;
      v18 = theArray;
      _os_log_impl(&dword_19AF50000, v3, OS_LOG_TYPE_INFO, "%s kAudioSessionProperty_ActiveSessionDisplayIDs: %@", buf, 0x16u);
    }
    v13 = CFSTR("kAudioSessionProperty_ActiveSessionDisplayIDs");
    v14 = theArray;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v1)
    {
      v12[0] = v1;
      v12[1] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      AFAnalyticsContextsMerge(v6);
      v7 = objc_claimAutoreleasedReturnValue();

      v1 = (id)v7;
    }
    else
    {
      v5 = v4;
      v1 = v5;
    }
  }

  return v1;
}

const __CFString *AFDescriptionOfBKSApplicationState(int a1)
{
  const __CFString *result;
  const __CFString *v3;

  result = CFSTR("Unknown");
  switch(a1)
  {
    case 1:
      result = CFSTR("Terminated");
      break;
    case 2:
      result = CFSTR("Suspended");
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      result = CFSTR("BackgroundRunning");
      break;
    case 8:
      result = CFSTR("ForegroundRunning");
      break;
    default:
      v3 = CFSTR("RunningObscured");
      if (a1 != 32)
        v3 = CFSTR("Unknown");
      if (a1 == 16)
        result = CFSTR("ProcessServer");
      else
        result = v3;
      break;
  }
  return result;
}

id AFSiriUsageDescriptionForAppID(void *a1)
{
  return _AFLocalizedValueForInfoPlistKey(a1, CFSTR("NSSiriUsageDescription"));
}

id _AFLocalizedValueForInfoPlistKey(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a1;
  v4 = a2;
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "languageCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  +[AFLocalization sharedInstance](AFLocalization, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:table:bundle:languageCode:", v4, CFSTR("InfoPlist"), v8, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(getLSApplicationProxyClass_40533(), "applicationProxyForIdentifier:", v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v10, "objectForInfoDictionaryKey:ofClass:", v4, objc_opt_class());
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }

  }
  return v9;
}

id LSApplicationProxyFunction_40534()
{
  return (id)classLSApplicationProxy_40537;
}

id initLSApplicationProxy_40535()
{
  if (initLSApplicationProxy_sOnce_40536 != -1)
    dispatch_once(&initLSApplicationProxy_sOnce_40536, &__block_literal_global_656);
  return (id)classLSApplicationProxy_40537;
}

Class __initLSApplicationProxy_block_invoke_40538()
{
  Class result;

  if (!CoreServicesLibrary_frameworkLibrary_40539)
  {
    CoreServicesLibrary_frameworkLibrary_40539 = (uint64_t)dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    if (!CoreServicesLibrary_frameworkLibrary_40539)
      __assert_rtn("CoreServicesLibrary", "AFUtilities.m", 122, "frameworkLibrary");
  }
  result = objc_getClass("LSApplicationProxy");
  classLSApplicationProxy_40537 = (uint64_t)result;
  if (!result)
    __assert_rtn("initLSApplicationProxy_block_invoke", "AFUtilities.m", 123, "classLSApplicationProxy");
  getLSApplicationProxyClass_40533 = LSApplicationProxyFunction_40534;
  return result;
}

id AFSpeechRecognitionUsageDescriptionForAppID(void *a1)
{
  return _AFLocalizedValueForInfoPlistKey(a1, CFSTR("NSSpeechRecognitionUsageDescription"));
}

uint64_t AFSerializeNSUserActivity(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_createUserActivityDataWithOptions:completionHandler:", 0, a2);
}

uint64_t AFSpokenNotificationDataCollectionEnabled()
{
  void *v0;
  uint64_t v1;

  if (DataCollectionServicesLibrary_sOnce_40553 != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce_40553, &__block_literal_global_660);
  if (!DataCollectionServicesLibrary_sLib_40554)
    return 0;
  objc_msgSend(getDCPreferencesClass(), "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isDataCollectionEnabled");

  return v1;
}

id DCPreferencesFunction()
{
  return (id)classDCPreferences;
}

id initDCPreferences()
{
  if (initDCPreferences_sOnce != -1)
    dispatch_once(&initDCPreferences_sOnce, &__block_literal_global_662);
  return (id)classDCPreferences;
}

Class __initDCPreferences_block_invoke()
{
  Class result;

  if (DataCollectionServicesLibrary_sOnce_40553 != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce_40553, &__block_literal_global_660);
  result = objc_getClass("DCPreferences");
  classDCPreferences = (uint64_t)result;
  getDCPreferencesClass = DCPreferencesFunction;
  return result;
}

void AFSetSpokenNotificationDataCollectionEnabled(uint64_t a1)
{
  id v2;

  if (DataCollectionServicesLibrary_sOnce_40553 != -1)
    dispatch_once(&DataCollectionServicesLibrary_sOnce_40553, &__block_literal_global_660);
  if (DataCollectionServicesLibrary_sLib_40554)
  {
    objc_msgSend((id)getDCPreferencesClass(), "sharedPreferences");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setDataCollectionEnabled:", a1);

  }
}

uint64_t AFSupportsHALCapabilitiesDonation()
{
  return 1;
}

uint64_t AFSupportsHALContextDonation()
{
  return 1;
}

uint64_t AFSupportsHALContextCollectorElection()
{
  return 1;
}

uint64_t AFSupportsHALContextCollecting()
{
  if (AFIsHorseman_onceToken != -1)
    dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
  return AFIsHorseman_isHorseman;
}

uint64_t AFSupportsHALOnDemandRapportConnection()
{
  return 0;
}

BOOL AFSupportsHALProximityScanning()
{
  return !AFProcessIsRunningAsInstance();
}

uint64_t AFSupportsHALDeviceRouting()
{
  return 1;
}

uint64_t AFSupportsHALFlowRouting()
{
  return 0;
}

uint64_t AFSupportsCrossDeviceMediaControlFromWatch()
{
  return 0;
}

uint64_t AFSupportsAudioSessionCoordination()
{
  uint64_t result;

  result = AFDeviceSupportsAudioSessionCoordination();
  if ((_DWORD)result)
    return +[AFFeatureFlags isAudioSessionCoordinationEnabled](AFFeatureFlags, "isAudioSessionCoordinationEnabled");
  return result;
}

id AFGetFlashlightLevel()
{
  unint64_t AppIntegerValue;
  double v1;
  void *v2;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("FlashlightLevel"), CFSTR("com.apple.springboard"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    LODWORD(v1) = 1.0;
    if (AppIntegerValue <= 3)
      LODWORD(v1) = dword_19B0EC7D0[AppIntegerValue];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

double AFSpokenMessagesExecutionTimeout()
{
  double v0;

  v0 = (double)softLinkBBGetObserverGatewayTimeout() + -3.0;
  return v0 - _AFPreferencesOpportuneSpeakingTimeout();
}

uint64_t initBBGetObserverGatewayTimeout()
{
  if (BulletinBoardLibrary_sOnce != -1)
    dispatch_once(&BulletinBoardLibrary_sOnce, &__block_literal_global_671);
  softLinkBBGetObserverGatewayTimeout = (uint64_t (*)())dlsym((void *)BulletinBoardLibrary_sLib, "BBGetObserverGatewayTimeout");
  return softLinkBBGetObserverGatewayTimeout();
}

uint64_t AFIsW1Headset(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("BTHeadphones")))
    {
      objc_msgSend(v1, "substringFromIndex:", objc_msgSend(CFSTR("BTHeadphones"), "length"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(&unk_1E3AAA8E0, "containsObject:", v2);

    }
    else
    {
      v3 = objc_msgSend(&unk_1E3AAA8E0, "containsObject:", v1);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFIsH1Headset(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("BTHeadphones")))
    {
      objc_msgSend(v1, "substringFromIndex:", objc_msgSend(CFSTR("BTHeadphones"), "length"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(&unk_1E3AAA8F8, "containsObject:", v2);

    }
    else
    {
      v3 = objc_msgSend(&unk_1E3AAA8F8, "containsObject:", v1);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFIsH2Headset(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("BTHeadphones")))
    {
      objc_msgSend(v1, "substringFromIndex:", objc_msgSend(CFSTR("BTHeadphones"), "length"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(&unk_1E3AAA910, "containsObject:", v2);

    }
    else
    {
      v3 = objc_msgSend(&unk_1E3AAA910, "containsObject:", v1);
    }
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t AFBTAnnounceCallsUnsupportedOnProductID(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
    v2 = objc_msgSend(&unk_1E3AAA928, "containsObject:", v1);
  else
    v2 = 0;

  return v2;
}

uint64_t AFPlaybackRouteIsHandsFree(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "isEqualToString:", CFSTR("Speaker")) & 1) == 0)
    v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("Receiver")) ^ 1;
  else
    v3 = 0;

  return v3;
}

void *AFRecordRouteIsHearst(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "isEqualToString:", CFSTR("BluetoothDoAP"));
  return a1;
}

uint64_t AFSupportsBluetooth()
{
  if (AFSupportsBluetooth_onceToken != -1)
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_468);
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t AFSupportsRecordFromBluetoothDevice()
{
  if (AFSupportsBluetooth_onceToken != -1)
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_468);
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t AFSupportsPlaybackToBluetoothDevice()
{
  if (AFSupportsBluetooth_onceToken != -1)
    dispatch_once(&AFSupportsBluetooth_onceToken, &__block_literal_global_468);
  return AFSupportsBluetooth_supportsBluetooth;
}

uint64_t AFGryphonAssetsExistForLanguage(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  char v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  AFOutputVoiceLanguageForRecognitionLanguage(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[AFVoiceInfo allVoicesForSiriSessionLanguage:](AFVoiceInfo, "allVoicesForSiriSessionLanguage:", v1);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v6, "isCustom", (_QWORD)v10))
        {
          objc_msgSend(v6, "languageCode");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_msgSend(v7, "isEqualToString:", v1);

          if ((v8 & 1) != 0)
          {
            v3 = 1;
            goto LABEL_12;
          }
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_12:

  return v3;
}

void AFFetchLocalTTSAssetAvailabilityWithCompletion(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (objc_msgSend(v5, "length") && objc_msgSend(v6, "length"))
  {
    AFOutputVoiceLanguageForRecognitionLanguage(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DA7900]), "initWithLanguage:name:", v8, v6);
      objc_msgSend(MEMORY[0x1E0DA78B0], "afSharedSession");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __AFFetchLocalTTSAssetAvailabilityWithCompletion_block_invoke;
      v11[3] = &unk_1E3A36460;
      v12 = v8;
      v13 = v7;
      objc_msgSend(v10, "downloadedVoicesMatching:reply:", v9, v11);

    }
    else
    {
      (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, 0);
    }

  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD))v7 + 2))(v7, 0, 0);
  }

}

uint64_t AFIsDictationRequestSpeechApiRequest(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("SFSpeech"));
}

id _AFXPCListenerCreateForMachServiceName(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3B58];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithMachServiceName:", v2);

  return v3;
}

id AFOfflineDictationStatusForLanguage(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  if (a2)
  {
    v3 = a2;
    objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("_"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR("-"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    _AFPreferencesReplacementLanguageForLocalRecognizerLanguageCode(v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v6)
      v8 = (void *)v6;
    else
      v8 = v5;
    v9 = v8;

    objc_msgSend(v3, "objectForKey:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }
  return v10;
}

uint64_t AFIsDictationLanguageSupportedForOnDeviceDictation(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  AFOfflineDictationStatusForLanguage(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "objectForKey:", CFSTR("High Quality"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLValue");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t AFIsDictationLanguageInstalledForOnDeviceDictation(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;

  AFOfflineDictationStatusForLanguage(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "objectForKey:", CFSTR("High Quality"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLValue");

    objc_msgSend(v3, "objectForKey:", CFSTR("Installed"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "BOOLValue");

    v8 = v5 & v7;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t AFIsDictationLanguageInstalledForOfflineRecognition(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  AFOfflineDictationStatusForLanguage(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "objectForKey:", CFSTR("Installed"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLValue");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t AFDictationRequiresRequestValidation()
{
  if (AFDictationRequiresRequestValidation_onceToken != -1)
    dispatch_once(&AFDictationRequiresRequestValidation_onceToken, &__block_literal_global_480);
  return AFDictationRequiresRequestValidation_requiresEntitlement;
}

uint64_t AFIsDictationRequestFromAppleClient(void *a1)
{
  id v1;
  void *v2;
  __SecTask *v3;
  __SecTask *v4;
  __CFString *v5;
  CFErrorRef v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  audit_token_t token;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  CFErrorRef v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    error = 0;
    objc_msgSend(v1, "auditToken");
    v3 = SecTaskCreateWithAuditToken(0, &token);
    if (v3)
    {
      v4 = v3;
      v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, &error);
      v6 = error;
      if (error)
      {
        v7 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v16 = "AFIsDictationRequestFromAppleClient";
          v17 = 2112;
          v18 = v2;
          v19 = 2112;
          v20 = v6;
          _os_log_error_impl(&dword_19AF50000, v7, OS_LOG_TYPE_ERROR, "%s Could not get signing identifier. Connection: %@, error:  %@", buf, 0x20u);
          v6 = error;
        }
        CFRelease(v6);
      }
      if (!v5)
      {
        v8 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v16 = "AFIsDictationRequestFromAppleClient";
          v17 = 2112;
          v18 = v2;
          _os_log_error_impl(&dword_19AF50000, v8, OS_LOG_TYPE_ERROR, "%s Could not get the bundle identifier. Connection: %@", buf, 0x16u);
        }
      }
      CFRelease(v4);
    }
    else
    {
      v11 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "AFIsDictationRequestFromAppleClient";
        v17 = 2112;
        v18 = v2;
        _os_log_error_impl(&dword_19AF50000, v11, OS_LOG_TYPE_ERROR, "%s Could not create task with audit token. Connection: %@", buf, 0x16u);
      }
      v5 = 0;
    }
    v10 = -[__CFString hasPrefix:](v5, "hasPrefix:", CFSTR("com.apple"));

  }
  else
  {
    v9 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = "AFIsDictationRequestFromAppleClient";
      _os_log_error_impl(&dword_19AF50000, v9, OS_LOG_TYPE_ERROR, "%s Requiers non null xpc connection", buf, 0xCu);
    }
    v10 = 0;
  }

  return v10;
}

id AFProductAndBuildVersion()
{
  if (AFProductAndBuildVersion_onceToken != -1)
    dispatch_once(&AFProductAndBuildVersion_onceToken, &__block_literal_global_486);
  return (id)AFProductAndBuildVersion_systemVersionString;
}

dispatch_time_t AFDispatchTimeGetFromDateAndOffset(void *a1, double a2)
{
  long double v3;
  long double v4;
  float64x2_t v5;
  timespec v7;
  float64_t __y;

  if (!a1)
    return dispatch_walltime(0, (uint64_t)(a2 * 1000000000.0));
  __y = 0.0;
  objc_msgSend(a1, "timeIntervalSince1970");
  v4 = modf(v3, (long double *)&__y);
  v5.f64[0] = __y;
  v5.f64[1] = v4 * 1000000000.0;
  v7 = (timespec)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v5, (float64x2_t)vdupq_n_s64(0xC3E0000000000000)), (float64x2_t)vdupq_n_s64(0x43E0000000000000uLL)));
  return dispatch_walltime(&v7, (uint64_t)(a2 * 1000000000.0));
}

void AFDispatchScheduleAtTime(dispatch_time_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  dispatch_source_t v18;

  v7 = a4;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__40662;
  v17 = __Block_byref_object_dispose__40663;
  v18 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, a3);
  dispatch_source_set_timer((dispatch_source_t)v14[5], a1, 0xFFFFFFFFFFFFFFFFLL, a2);
  v8 = v14[5];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __AFDispatchScheduleAtTime_block_invoke;
  v10[3] = &unk_1E3A364F0;
  v11 = v7;
  v12 = &v13;
  v9 = v7;
  dispatch_source_set_event_handler(v8, v10);
  dispatch_resume((dispatch_object_t)v14[5]);

  _Block_object_dispose(&v13, 8);
}

uint64_t __Block_byref_object_copy__40662(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40663(uint64_t a1)
{

}

void AFDispatchScheduleWithDelay(void *a1, void *a2, double a3)
{
  int64_t v4;
  id v5;
  dispatch_time_t v6;
  NSObject *v7;

  v4 = (uint64_t)(a3 * 1000000000.0);
  v5 = a2;
  v7 = a1;
  v6 = dispatch_walltime(0, v4);
  AFDispatchScheduleAtTime(v6, 0, v7, v5);

}

void AFFetchFollowerStatusInStereoPair(void *a1)
{
  id v1;
  void *v2;
  _QWORD v3[4];
  id v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;

  v1 = a1;
  if (v1)
  {
    v6 = 0;
    v7 = &v6;
    v8 = 0x3032000000;
    v9 = __Block_byref_object_copy__40662;
    v10 = __Block_byref_object_dispose__40663;
    v11 = objc_alloc_init((Class)getSBSStereoLeaderInterfaceClass());
    if (AFIsHorseman_onceToken != -1)
      dispatch_once(&AFIsHorseman_onceToken, &__block_literal_global_139_40146);
    if (AFIsHorseman_isHorseman && (v2 = (void *)v7[5]) != 0)
    {
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = __AFFetchFollowerStatusInStereoPair_block_invoke;
      v3[3] = &unk_1E3A36520;
      v4 = v1;
      v5 = &v6;
      objc_msgSend(v2, "isFollower:", v3);

    }
    else
    {
      (*((void (**)(id, _QWORD))v1 + 2))(v1, 0);
    }
    _Block_object_dispose(&v6, 8);

  }
}

void sub_19B0C3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SBSStereoLeaderInterfaceFunction()
{
  return (id)classSBSStereoLeaderInterface;
}

id initSBSStereoLeaderInterface()
{
  if (initSBSStereoLeaderInterface_sOnce != -1)
    dispatch_once(&initSBSStereoLeaderInterface_sOnce, &__block_literal_global_673);
  return (id)classSBSStereoLeaderInterface;
}

Class __initSBSStereoLeaderInterface_block_invoke()
{
  Class result;

  if (SoundBoardServicesLibrary_sOnce != -1)
    dispatch_once(&SoundBoardServicesLibrary_sOnce, &__block_literal_global_675);
  result = objc_getClass("SBSStereoLeaderInterface");
  classSBSStereoLeaderInterface = (uint64_t)result;
  getSBSStereoLeaderInterfaceClass = SBSStereoLeaderInterfaceFunction;
  return result;
}

id AFNormalizeMacAddress(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(v1, "uppercaseString");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), CFSTR("-"));
    v3 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = v1;
  }

  return v3;
}

id AFProcessGetValueForEntitlement(void *a1)
{
  __CFString *v1;
  __SecTask *v2;
  __SecTask *v3;
  void *v4;
  CFErrorRef v5;
  NSObject *v6;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  __CFString *v12;
  __int16 v13;
  CFErrorRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = SecTaskCreateFromSelf(0);
  if (v2)
  {
    v3 = v2;
    error = 0;
    v4 = (void *)SecTaskCopyValueForEntitlement(v2, v1, &error);
    CFRelease(v3);
    v5 = error;
    if (error)
    {
      v6 = AFSiriLogContextDaemon;
      if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v10 = "AFProcessGetValueForEntitlement";
        v11 = 2112;
        v12 = v1;
        v13 = 2112;
        v14 = v5;
        _os_log_error_impl(&dword_19AF50000, v6, OS_LOG_TYPE_ERROR, "%s Failed to check if %@ entitlement is set: %@", buf, 0x20u);
        v5 = error;
      }
      CFRelease(v5);
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t AFProcessIsAssistantDaemon()
{
  if (AFProcessIsAssistantDaemon_onceToken != -1)
    dispatch_once(&AFProcessIsAssistantDaemon_onceToken, &__block_literal_global_496);
  return AFProcessIsAssistantDaemon_isAssistantDaemon;
}

uint64_t AFProcessIsAssistantService()
{
  if (AFProcessIsAssistantService_onceToken != -1)
    dispatch_once(&AFProcessIsAssistantService_onceToken, &__block_literal_global_503);
  return AFProcessIsAssistantService_isAssistantService;
}

uint64_t AFHasPerfPowerEntitlement()
{
  if (AFHasPerfPowerEntitlement_token != -1)
    dispatch_once(&AFHasPerfPowerEntitlement_token, &__block_literal_global_508);
  return AFHasPerfPowerEntitlement_hasEntitlement;
}

uint64_t AFDeviceSetupIsActive(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v19;
  double v20;
  int v21;
  const char *v22;
  __int16 v23;
  double v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v5)
  {
    if (!v6)
      goto LABEL_14;
    v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    v21 = 136315394;
    v22 = "AFDeviceSetupIsActive";
    v23 = 2112;
    v24 = *(double *)&v6;
    v12 = "%s endDate is %@ but not beginDate is nil.";
    goto LABEL_10;
  }
  objc_msgSend(v7, "timeIntervalSinceDate:", v5);
  if (v9 < 0.0)
    goto LABEL_14;
  if (!v6)
  {
    objc_msgSend(v8, "timeIntervalSinceDate:", v5);
    if (v16 <= 3600.0)
      goto LABEL_17;
    v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    v21 = 136315394;
    v22 = "AFDeviceSetupIsActive";
    v23 = 2112;
    v24 = *(double *)&v5;
    v12 = "%s endDate is nil but beginDate is %@ and it is more than one hour ago.";
    goto LABEL_10;
  }
  objc_msgSend(v6, "timeIntervalSinceDate:", v5);
  if (v10 >= 0.0)
  {
    objc_msgSend(v8, "timeIntervalSinceDate:", v6);
    if (v19 < 0.0)
      goto LABEL_17;
    if (a3 > 0.0)
    {
      objc_msgSend(v8, "timeIntervalSinceDate:", v6);
      if (v20 >= a3)
        goto LABEL_14;
LABEL_17:
      v17 = 1;
      goto LABEL_15;
    }
    if (a3 >= 0.0)
      goto LABEL_14;
    v15 = AFSiriLogContextDaemon;
    if (!os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    v21 = 136315394;
    v22 = "AFDeviceSetupIsActive";
    v23 = 2048;
    v24 = a3;
    v12 = "%s recencyDuration %f is invalid.";
LABEL_10:
    v13 = v15;
    v14 = 22;
    goto LABEL_11;
  }
  v11 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    v21 = 136315650;
    v22 = "AFDeviceSetupIsActive";
    v23 = 2112;
    v24 = *(double *)&v6;
    v25 = 2112;
    v26 = v5;
    v12 = "%s endDate %@ is earlier than beginDate %@.";
    v13 = v11;
    v14 = 32;
LABEL_11:
    _os_log_error_impl(&dword_19AF50000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v21, v14);
  }
LABEL_14:
  v17 = 0;
LABEL_15:

  return v17;
}

id ADCreateRequestLinkInfo(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = (objc_class *)MEMORY[0x1E0D9A500];
  v4 = a1;
  v5 = [v3 alloc];
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v4);

  v7 = (void *)objc_msgSend(v5, "initWithNSUUID:", v6);
  v8 = objc_alloc_init(MEMORY[0x1E0D9A498]);
  objc_msgSend(v8, "setUuid:", v7);
  objc_msgSend(v8, "setComponent:", a2);

  return v8;
}

void ADEmitRequestLinkEventMessage(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v3 = (objc_class *)MEMORY[0x1E0D9A488];
  v4 = a2;
  v5 = a1;
  v7 = objc_alloc_init(v3);
  objc_msgSend(v7, "setSource:", v5);

  objc_msgSend(v7, "setTarget:", v4);
  objc_msgSend(MEMORY[0x1E0D978A0], "sharedStream");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "emitMessage:", v7);

}

uint64_t AFShouldOptOutDataSharingForMigrationFromProductVersion(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("15.0")) & 1) != 0
    || (objc_msgSend(v1, "hasPrefix:", CFSTR("15.1")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "hasPrefix:", CFSTR("15.2"));
  }

  return v2;
}

uint64_t AFShouldOptOutDataSharingForMigrationFromBuildVersion(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("19A")) & 1) != 0
    || (objc_msgSend(v1, "hasPrefix:", CFSTR("19B")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "hasPrefix:", CFSTR("19C"));
  }

  return v2;
}

uint64_t AFDeviceSupportsFileACrashRadar()
{
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  return AFIsInternalInstall_isInternal;
}

uint64_t AFDeviceSupportsFileARadar()
{
  return 0;
}

uint64_t AFDoesProductTypeSupportMUX(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(&unk_1E3AAA988, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(&unk_1E3AAA988);
        if ((objc_msgSend(v1, "hasSuffix:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 0;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(&unk_1E3AAA988, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 1;
LABEL_11:

  return v6;
}

uint64_t AFSupportsSiriInCall()
{
  void *v0;
  void *v1;
  unsigned int v2;
  _BOOL4 v3;
  _BOOL4 v4;
  uint64_t v5;

  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "languageCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = AFIsVisionBuiltInLocale(v1);
  v3 = +[AFFeatureFlags isBlindedSphinxEnabled](AFFeatureFlags, "isBlindedSphinxEnabled");
  v4 = +[AFFeatureFlags isBlushingPhantomEnabled](AFFeatureFlags, "isBlushingPhantomEnabled");
  if (v3)
  {
    v5 = v4 & v2;
  }
  else if (v4 && AFDeviceSupportsSiriUOD())
  {
    v5 = v2 & ~AFShouldRunAsrOnServerForUOD();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t AFSupportsCallHangUp()
{
  uint64_t v0;
  int v1;
  void *v2;

  if (+[AFFeatureFlags isBlindedSphinxEnabled](AFFeatureFlags, "isBlindedSphinxEnabled"))
    return 1;
  if (AFDeviceSupportsSiriUOD())
    v1 = AFShouldRunAsrOnServerForUOD() ^ 1;
  else
    v1 = 0;
  objc_msgSend(getVTPreferencesClass_40704(), "sharedPreferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v0 = v1 & objc_msgSend(v2, "voiceTriggerEnabled");

  return v0;
}

id VTPreferencesFunction_40705()
{
  return (id)classVTPreferences_40708;
}

id initVTPreferences_40706()
{
  if (initVTPreferences_sOnce_40707 != -1)
    dispatch_once(&initVTPreferences_sOnce_40707, &__block_literal_global_677);
  return (id)classVTPreferences_40708;
}

Class __initVTPreferences_block_invoke_40709()
{
  Class result;

  if (!VoiceTriggerLibrary_frameworkLibrary_40710)
  {
    VoiceTriggerLibrary_frameworkLibrary_40710 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger", 2);
    if (!VoiceTriggerLibrary_frameworkLibrary_40710)
      __assert_rtn("VoiceTriggerLibrary", "AFUtilities.m", 163, "frameworkLibrary");
  }
  result = objc_getClass("VTPreferences");
  classVTPreferences_40708 = (uint64_t)result;
  if (!result)
    __assert_rtn("initVTPreferences_block_invoke", "AFUtilities.m", 164, "classVTPreferences");
  getVTPreferencesClass_40704 = VTPreferencesFunction_40705;
  return result;
}

uint64_t AFDeviceSupportsMedoc()
{
  if (AFDeviceSupportsMedoc_onceToken != -1)
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_556);
  return AFDeviceSupportsMedoc_supportsMedoc;
}

uint64_t AFDeviceSupportsMedocHelper(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  __CFString *v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1 && (a2 & 1) != 0)
  {
    v4 = 1;
    v5 = CFSTR("isMedocSupported=true, reason=Medoc feature flag enabled and device supports UOD");
  }
  else if (a3 && (a4 & 1) != 0)
  {
    v4 = 1;
    v5 = CFSTR("isMedocSupported=true, reason=Medoc Hybrid feature flag enabled and device should run hybrid mode");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("isMedocSupported=false, Medoc feature flag: %d, device supports UOD? %d, Medoc Hybrid feature flag: %d, device should run hybrid mode? %d"), a1, a2, a3, a4);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v4 = 0;
  }
  v6 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v9 = "AFDeviceSupportsMedocHelper";
    v10 = 2114;
    v11 = v5;
    _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s #medoc %{public}@", buf, 0x16u);
  }

  return v4;
}

uint64_t AFHasGMSCapability()
{
  NSObject *v0;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "AFHasGMSCapability";
    _os_log_debug_impl(&dword_19AF50000, v0, OS_LOG_TYPE_DEBUG, "%s deviceSupportsGenerativeModelSystems = 0", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t AFHasGMSCapabilityUnembargoed()
{
  NSObject *v0;
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (AFHasGMSCapabilityUnembargoed_once != -1)
    dispatch_once(&AFHasGMSCapabilityUnembargoed_once, &__block_literal_global_563);
  v0 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315394;
    v3 = "AFHasGMSCapabilityUnembargoed";
    v4 = 1024;
    v5 = AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems;
    _os_log_debug_impl(&dword_19AF50000, v0, OS_LOG_TYPE_DEBUG, "%s deviceSupportsGenerativeModelSystems = %d", (uint8_t *)&v2, 0x12u);
  }
  return AFHasGMSCapabilityUnembargoed_deviceSupportsGenerativeModelSystems;
}

uint64_t AFDeviceSupportsSAE()
{
  int v0;
  unsigned int v1;
  void *v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v1 = AFLocaleSupportsSAE();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2050000000;
  v2 = (void *)getGMAvailabilityWrapperClass_softClass;
  v9 = getGMAvailabilityWrapperClass_softClass;
  if (!getGMAvailabilityWrapperClass_softClass)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __getGMAvailabilityWrapperClass_block_invoke;
    v5[3] = &unk_1E3A365A8;
    v5[4] = &v6;
    __getGMAvailabilityWrapperClass_block_invoke((uint64_t)v5);
    v2 = (void *)v7[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v6, 8);
  if ((unint64_t)objc_msgSend(v3, "currentWithUseCaseIdentifiers:", &unk_1E3AAA9A0) < 2)
    return v0 & v1;
  else
    return 0;
}

void sub_19B0C4AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags()
{
  _BOOL4 v0;
  _BOOL4 v1;
  int v2;
  _BOOL4 v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  _BOOL4 v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = +[AFFeatureFlags isSAEOverrideEnabled](AFFeatureFlags, "isSAEOverrideEnabled");
  v1 = +[AFFeatureFlags isNLRouterEnabled](AFFeatureFlags, "isNLRouterEnabled");
  if (AFDeviceSupportsMedoc_onceToken != -1)
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_556);
  v2 = AFDeviceSupportsMedoc_supportsMedoc;
  AFHasGMSCapability();
  if (v2)
    v3 = v0;
  else
    v3 = 0;
  v4 = v3 & v1;
  v5 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v7 = 136316418;
    v8 = "AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags";
    v9 = 1024;
    v10 = v2;
    v11 = 1024;
    v12 = 0;
    v13 = 1024;
    v14 = v0;
    v15 = 1024;
    v16 = v1;
    v17 = 1024;
    v18 = v4;
    _os_log_debug_impl(&dword_19AF50000, v5, OS_LOG_TYPE_DEBUG, "%s isMedocSupported = %d, deviceSupportsGenerativeModelSystems = %d, isSAEOverrideEnabled = %d, isNLRouterEnabled = %d, deviceSupportsSAEByDeviceCapabilityAndFeatureFlags = %d", (uint8_t *)&v7, 0x2Au);
  }
  return v4;
}

uint64_t AFLocaleSupportsSAE()
{
  void *v0;
  void *v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "languageCode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
    goto LABEL_5;
  v2 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = 136315138;
    v8 = "AFLocaleSupportsSAE";
    _os_log_impl(&dword_19AF50000, v2, OS_LOG_TYPE_INFO, "%s Locale is nil, fall back to system lanugage", (uint8_t *)&v7, 0xCu);
  }
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bestSupportedLanguageCodeForLanguageCode:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
LABEL_5:
    if (AFLocaleSupportsSAE_once != -1)
      dispatch_once(&AFLocaleSupportsSAE_once, &__block_literal_global_566);
    v4 = objc_msgSend((id)AFLocaleSupportsSAE_supportedLocales, "containsObject:", v1);

  }
  else
  {
    v6 = AFSiriLogContextDaemon;
    if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      v7 = 136315138;
      v8 = "AFLocaleSupportsSAE";
      _os_log_impl(&dword_19AF50000, v6, OS_LOG_TYPE_INFO, "%s Locale is nil, returning unsupported", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
  return v4;
}

Class __getGMAvailabilityWrapperClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!GenerativeModelsLibraryCore_frameworkLibrary)
    GenerativeModelsLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!GenerativeModelsLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *GenerativeModelsLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AFUtilities.m"), 183, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("GMAvailabilityWrapper");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getGMAvailabilityWrapperClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AFUtilities.m"), 184, CFSTR("Unable to find class %s"), "GMAvailabilityWrapper");

LABEL_8:
    __break(1u);
  }
  getGMAvailabilityWrapperClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AFDeviceSupportsSystemAssistantExperience()
{
  _BOOL4 v0;

  v0 = +[AFFeatureFlags isSystemAssistantExperienceEnabled](AFFeatureFlags, "isSystemAssistantExperienceEnabled");
  return v0 & AFDeviceSupportsSAE();
}

uint64_t AFDeviceSupportsRemovalOfPersistentIDs()
{
  _BOOL4 v0;
  int v1;
  int v2;
  int v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BOOL4 v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = +[AFFeatureFlags isPersistentIDLoggingDisabled](AFFeatureFlags, "isPersistentIDLoggingDisabled");
  v1 = AFHasGMSCapabilityUnembargoed();
  v2 = AFDeviceSupportsSiriUOD();
  v3 = v1 & v2;
  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  v4 = AFSiriLogContextUtility;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    v6 = 136316418;
    v7 = "AFDeviceSupportsRemovalOfPersistentIDs";
    v8 = 1024;
    v9 = v0 & v3;
    v10 = 1024;
    v11 = v0;
    v12 = 1024;
    v13 = v2;
    v14 = 1024;
    v15 = v1 & v2;
    v16 = 1024;
    v17 = AFIsInternalInstall_isInternal;
    _os_log_debug_impl(&dword_19AF50000, v4, OS_LOG_TYPE_DEBUG, "%s #RPI: featureSupported=%u (featureFlagEnabled=%u, siriUODSupported=%u, saeCapable=%u, internalInstall=%u)", (uint8_t *)&v6, 0x2Au);
  }
  return v0 & v3;
}

BOOL AFDeviceSupportsDisablingServerFallbackWhenMissingAsset()
{
  _BOOL8 result;
  void *v1;
  uint64_t v2;

  result = +[AFFeatureFlags isServerFallbackDisabledWhenMissingAsset](AFFeatureFlags, "isServerFallbackDisabledWhenMissingAsset");
  if (result)
  {
    +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v1, "shouldDisableServerFallbackNL");

    return v2;
  }
  return result;
}

BOOL AFFetchDeviceCarryStatus()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  if (AFIsInternalInstall_onceToken != -1)
    dispatch_once(&AFIsInternalInstall_onceToken, &__block_literal_global_100_40135);
  if (!AFIsInternalInstall_isInternal)
    return 0;
  +[AFPreferences sharedPreferences](AFPreferences, "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "internalUserClassification");

  if (v1)
    return v1 == 1;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "persistentDomainForName:", CFSTR("com.apple.da"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("ExperimentGroup"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("walkabout")) & 1) != 0)
      v2 = 1;
    else
      v2 = objc_msgSend(v5, "isEqualToString:", CFSTR("carry"));
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t AFDeviceSupportsPatientSiri()
{
  _BOOL4 v0;
  unsigned int v1;
  int v2;
  _BOOL4 v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BOOL4 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = +[AFFeatureFlags isPatientSiriFeatureEnabled](AFFeatureFlags, "isPatientSiriFeatureEnabled");
  v1 = AFDeviceSupportsSAE();
  if (AFDeviceSupportsMedoc_onceToken != -1)
    dispatch_once(&AFDeviceSupportsMedoc_onceToken, &__block_literal_global_556);
  v2 = AFDeviceSupportsMedoc_supportsMedoc;
  if (AFDeviceSupportsMedoc_supportsMedoc)
    v3 = v0;
  else
    v3 = 0;
  v4 = v3 & v1;
  v5 = AFSiriLogContextDaemon;
  if (os_log_type_enabled((os_log_t)AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = 136316162;
    v8 = "AFDeviceSupportsPatientSiri";
    v9 = 1024;
    v10 = v4;
    v11 = 1024;
    v12 = v0;
    v13 = 1024;
    v14 = v2;
    v15 = 1024;
    v16 = v1;
    _os_log_impl(&dword_19AF50000, v5, OS_LOG_TYPE_INFO, "%s #patientSiri: featureSupported(%u), featureFlagSupported(%u), medocFeatureSupported(%u), assistantEngineSupported(%u)", (uint8_t *)&v7, 0x24u);
  }
  return v4;
}

uint64_t AFDeviceSupportsSiriCapella()
{
  return 0;
}

uint64_t AFDeviceSupportsShimTools()
{
  uint64_t result;

  result = AFDeviceSupportsSAE();
  if ((_DWORD)result)
    return +[AFFeatureFlags isShimToolsEnabled](AFFeatureFlags, "isShimToolsEnabled");
  return result;
}

uint64_t AFDeviceSupportsGM()
{
  if (AFDeviceSupportsGM_onceToken != -1)
    dispatch_once(&AFDeviceSupportsGM_onceToken, &__block_literal_global_581);
  return AFDeviceSupportsGM_isGMDevice;
}

uint64_t AFDeviceRequestHandlingRolesValidate(char a1)
{
  return a1 & 0x1F;
}

id AFDeviceRequestHandlingRolesGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (!a1)
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("input"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("understanding"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
LABEL_14:
    objc_msgSend(v3, "addObject:", CFSTR("intentHandler"));
    if ((v1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_13:
  objc_msgSend(v3, "addObject:", CFSTR("flow"));
  if ((v1 & 8) != 0)
    goto LABEL_14;
LABEL_6:
  if ((v1 & 0x10) != 0)
LABEL_7:
    objc_msgSend(v3, "addObject:", CFSTR("presentation"));
LABEL_8:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t AFDeviceRequestHandlingRolesGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFDeviceRequestHandlingRolesGetFromName_onceToken != -1)
              dispatch_once(&_AFDeviceRequestHandlingRolesGetFromName_onceToken, &__block_literal_global_41001);
            objc_msgSend((id)_AFDeviceRequestHandlingRolesGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t AFHomeAnnouncementStateValidate(char a1)
{
  return a1 & 1;
}

id AFHomeAnnouncementStateGetNames(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("isPlaying"));
    v4 = (void *)objc_msgSend(v3, "copy");

  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }
  return v4;
}

uint64_t AFHomeAnnouncementStateGetFromNames(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v2);
          v8 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v7);
          if (objc_msgSend(v8, "length"))
          {
            if (_AFHomeAnnouncementStateGetFromName_onceToken != -1)
              dispatch_once(&_AFHomeAnnouncementStateGetFromName_onceToken, &__block_literal_global_41019);
            objc_msgSend((id)_AFHomeAnnouncementStateGetFromName_map, "objectForKey:", v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = objc_msgSend(v9, "unsignedIntegerValue");

          }
          else
          {
            v10 = 0;
          }

          v5 |= v10;
          ++v7;
        }
        while (v4 != v7);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v12;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id TUCallProviderManagerFunction()
{
  return (id)classTUCallProviderManager;
}

id initTUCallProviderManager()
{
  if (initTUCallProviderManager_sOnce != -1)
    dispatch_once(&initTUCallProviderManager_sOnce, &__block_literal_global_13_41304);
  return (id)classTUCallProviderManager;
}

id TUDialRequestFunction()
{
  return (id)classTUDialRequest;
}

id initTUDialRequest()
{
  if (initTUDialRequest_sOnce != -1)
    dispatch_once(&initTUDialRequest_sOnce, &__block_literal_global_17_41302);
  return (id)classTUDialRequest;
}

id TUCallSourceIdentifierSpeakerRouteFunction()
{
  return (id)constantTUCallSourceIdentifierSpeakerRoute;
}

id initTUCallSourceIdentifierSpeakerRoute()
{
  if (initTUCallSourceIdentifierSpeakerRoute_sOnce != -1)
    dispatch_once(&initTUCallSourceIdentifierSpeakerRoute_sOnce, &__block_literal_global_19_41296);
  return (id)constantTUCallSourceIdentifierSpeakerRoute;
}

void __initTUCallSourceIdentifierSpeakerRoute_block_invoke()
{
  id *v0;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_15_41297);
  v0 = (id *)dlsym((void *)TelephonyUtilitiesLibrary_sLib, "TUCallSourceIdentifierSpeakerRoute");
  if (!v0)
    __assert_rtn("initTUCallSourceIdentifierSpeakerRoute_block_invoke", "AFMyriadEmergencyCallPunchout.m", 19, "constant");
  objc_storeStrong((id *)&constantTUCallSourceIdentifierSpeakerRoute, *v0);
  getTUCallSourceIdentifierSpeakerRoute = TUCallSourceIdentifierSpeakerRouteFunction;
}

Class __initTUDialRequest_block_invoke()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_15_41297);
  result = objc_getClass("TUDialRequest");
  classTUDialRequest = (uint64_t)result;
  getTUDialRequestClass = TUDialRequestFunction;
  return result;
}

Class __initTUCallProviderManager_block_invoke()
{
  Class result;

  if (TelephonyUtilitiesLibrary_sOnce != -1)
    dispatch_once(&TelephonyUtilitiesLibrary_sOnce, &__block_literal_global_15_41297);
  result = objc_getClass("TUCallProviderManager");
  classTUCallProviderManager = (uint64_t)result;
  getTUCallProviderManagerClass = TUCallProviderManagerFunction;
  return result;
}

void sub_19B0CAF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41748(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41749(uint64_t a1)
{

}

BOOL AFClockTimerTypeGetIsValid(unint64_t a1)
{
  return a1 < 3;
}

BOOL AFClockTimerTypeGetIsValidAndSpecified(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

const __CFString *AFClockTimerTypeGetName(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("(unknown)");
  else
    return off_1E3A36DB8[a1];
}

uint64_t AFClockTimerTypeGetFromName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    if (AFClockTimerTypeGetFromName_onceToken != -1)
      dispatch_once(&AFClockTimerTypeGetFromName_onceToken, &__block_literal_global_42356);
    objc_msgSend((id)AFClockTimerTypeGetFromName_map, "objectForKey:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "integerValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_19B0CF690(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42393(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42394(uint64_t a1)
{

}

void sub_19B0CFFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0D014C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B0D0358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t init_AXSVibrationDisabled()
{
  void *v0;
  uint64_t (*v1)();

  v0 = libAccessibilityLibrary();
  v1 = (uint64_t (*)())dlsym(v0, "_AXSVibrationDisabled");
  softLink_AXSVibrationDisabled = v1;
  if (!v1)
    __assert_rtn("init_AXSVibrationDisabled", "AFAccessibilityObserver.m", 18, "softLink_AXSVibrationDisabled");
  return v1();
}

void *libAccessibilityLibrary()
{
  void *result;

  result = (void *)libAccessibilityLibrary_frameworkLibrary;
  if (!libAccessibilityLibrary_frameworkLibrary)
  {
    result = dlopen("/usr/local/lib/libAccessibility.dylib", 2);
    libAccessibilityLibrary_frameworkLibrary = (uint64_t)result;
    if (!result)
    {
      result = dlopen("/usr/lib/libAccessibility.dylib", 2);
      libAccessibilityLibrary_frameworkLibrary = (uint64_t)result;
      if (!result)
        __assert_rtn("libAccessibilityLibrary", "AFAccessibilityObserver.m", 14, "frameworkLibrary");
    }
  }
  return result;
}

uint64_t init_AXSVoiceOverTouchEnabled()
{
  void *v0;
  uint64_t (*v1)();

  v0 = libAccessibilityLibrary();
  v1 = (uint64_t (*)())dlsym(v0, "_AXSVoiceOverTouchEnabled");
  softLink_AXSVoiceOverTouchEnabled = v1;
  if (!v1)
    __assert_rtn("init_AXSVoiceOverTouchEnabled", "AFAccessibilityObserver.m", 17, "softLink_AXSVoiceOverTouchEnabled");
  return v1();
}

uint64_t __Block_byref_object_copy__42662(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42663(uint64_t a1)
{

}

id initkAXSVoiceOverTouchEnabledNotification()
{
  if (initkAXSVoiceOverTouchEnabledNotification_sOnce != -1)
    dispatch_once(&initkAXSVoiceOverTouchEnabledNotification_sOnce, &__block_literal_global_44);
  return (id)constantkAXSVoiceOverTouchEnabledNotification;
}

id kAXSVoiceOverTouchEnabledNotificationFunction()
{
  return (id)constantkAXSVoiceOverTouchEnabledNotification;
}

id initkAXSVibrationDisabledPreferenceDidChangeNotification()
{
  if (initkAXSVibrationDisabledPreferenceDidChangeNotification_sOnce != -1)
    dispatch_once(&initkAXSVibrationDisabledPreferenceDidChangeNotification_sOnce, &__block_literal_global_51);
  return (id)constantkAXSVibrationDisabledPreferenceDidChangeNotification;
}

id kAXSVibrationDisabledPreferenceDidChangeNotificationFunction()
{
  return (id)constantkAXSVibrationDisabledPreferenceDidChangeNotification;
}

void __initkAXSVibrationDisabledPreferenceDidChangeNotification_block_invoke()
{
  void *v0;
  id *v1;

  v0 = libAccessibilityLibrary();
  v1 = (id *)dlsym(v0, "kAXSVibrationDisabledPreferenceDidChangeNotification");
  if (!v1)
    __assert_rtn("initkAXSVibrationDisabledPreferenceDidChangeNotification_block_invoke", "AFAccessibilityObserver.m", 16, "constant");
  objc_storeStrong((id *)&constantkAXSVibrationDisabledPreferenceDidChangeNotification, *v1);
  getkAXSVibrationDisabledPreferenceDidChangeNotification = kAXSVibrationDisabledPreferenceDidChangeNotificationFunction;
}

void __initkAXSVoiceOverTouchEnabledNotification_block_invoke()
{
  void *v0;
  id *v1;

  v0 = libAccessibilityLibrary();
  v1 = (id *)dlsym(v0, "kAXSVoiceOverTouchEnabledNotification");
  if (!v1)
    __assert_rtn("initkAXSVoiceOverTouchEnabledNotification_block_invoke", "AFAccessibilityObserver.m", 15, "constant");
  objc_storeStrong((id *)&constantkAXSVoiceOverTouchEnabledNotification, *v1);
  getkAXSVoiceOverTouchEnabledNotification = kAXSVoiceOverTouchEnabledNotificationFunction;
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1E0CF63A0]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1E0CF63C0]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

OSStatus AudioSessionGetProperty(AudioSessionPropertyID inID, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1E0C921B0](*(_QWORD *)&inID, ioDataSize, outData);
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80088](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

int CC_SHA512_Final(unsigned __int8 *md, CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B0](md, c);
}

int CC_SHA512_Init(CC_SHA512_CTX *c)
{
  return MEMORY[0x1E0C803B8](c);
}

int CC_SHA512_Update(CC_SHA512_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C803C0](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988C8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A38](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return MEMORY[0x1E0C995D0](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, timeout);
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

uint64_t CPSystemRootDirectory()
{
  return MEMORY[0x1E0CFA908]();
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB708](AssertionType, *(_QWORD *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1E0DE2B58]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MRContentItemCopyNowPlayingInfo()
{
  return MEMORY[0x1E0D4B720]();
}

uint64_t MRContentItemGetAlbumArtistName()
{
  return MEMORY[0x1E0D4B758]();
}

uint64_t MRContentItemGetAlbumName()
{
  return MEMORY[0x1E0D4B760]();
}

uint64_t MRContentItemGetCalculatedPlaybackPosition()
{
  return MEMORY[0x1E0D4B788]();
}

uint64_t MRContentItemGetDuration()
{
  return MEMORY[0x1E0D4B7C8]();
}

uint64_t MRContentItemGetElapsedTime()
{
  return MEMORY[0x1E0D4B7E0]();
}

uint64_t MRContentItemGetITunesStoreIdentifier()
{
  return MEMORY[0x1E0D4B858]();
}

uint64_t MRContentItemGetITunesStoreSubscriptionIdentifier()
{
  return MEMORY[0x1E0D4B860]();
}

uint64_t MRContentItemGetMediaType()
{
  return MEMORY[0x1E0D4B8F0]();
}

uint64_t MRContentItemGetPlayCount()
{
  return MEMORY[0x1E0D4B900]();
}

uint64_t MRContentItemGetReleaseDate()
{
  return MEMORY[0x1E0D4B940]();
}

uint64_t MRContentItemGetTitle()
{
  return MEMORY[0x1E0D4B980]();
}

uint64_t MRContentItemGetTrackArtistName()
{
  return MEMORY[0x1E0D4B998]();
}

uint64_t MRLanguageOptionCopyCharacteristics()
{
  return MEMORY[0x1E0D4BCD8]();
}

uint64_t MRLanguageOptionCopyDisplayName()
{
  return MEMORY[0x1E0D4BCE0]();
}

uint64_t MRLanguageOptionCopyIdentifier()
{
  return MEMORY[0x1E0D4BCE8]();
}

uint64_t MRLanguageOptionCopyLanguageTag()
{
  return MEMORY[0x1E0D4BCF0]();
}

uint64_t MRLanguageOptionCreateFromExternalRepresentation()
{
  return MEMORY[0x1E0D4BD10]();
}

uint64_t MRLanguageOptionGetType()
{
  return MEMORY[0x1E0D4BD18]();
}

uint64_t MRLanguageOptionGroupCopyLanguageOptions()
{
  return MEMORY[0x1E0D4BD20]();
}

uint64_t MRLanguageOptionGroupCreateFromExternalRepresentation()
{
  return MEMORY[0x1E0D4BD30]();
}

uint64_t MRLanguageOptionGroupsCreateFromExternalRepresentation()
{
  return MEMORY[0x1E0D4BD50]();
}

uint64_t MRLanguageOptionsCreateFromExternalRepresentation()
{
  return MEMORY[0x1E0D4BD70]();
}

uint64_t MRMediaRemoteCommandInfoGetCommand()
{
  return MEMORY[0x1E0D4BE20]();
}

uint64_t MRMediaRemoteCommandInfoGetEnabled()
{
  return MEMORY[0x1E0D4BE28]();
}

uint64_t MRMediaRemoteGetDeviceInfo()
{
  return MEMORY[0x1E0D4BEE8]();
}

uint64_t MRMediaRemoteGetLocalOrigin()
{
  return MEMORY[0x1E0D4BEF8]();
}

uint64_t MRMediaRemoteGetMediaPlaybackVolume()
{
  return MEMORY[0x1E0D4BF10]();
}

uint64_t MRMediaRemoteGetNowPlayingApplicationPlaybackState()
{
  return MEMORY[0x1E0D4BF18]();
}

uint64_t MRMediaRemoteGetNowPlayingClient()
{
  return MEMORY[0x1E0D4BF28]();
}

uint64_t MRMediaRemoteGetPickedRouteHasVolumeControl()
{
  return MEMORY[0x1E0D4BF48]();
}

uint64_t MRMediaRemoteGetSupportedCommands()
{
  return MEMORY[0x1E0D4BF78]();
}

uint64_t MRMediaRemoteRegisterWantsSystemAppDidSkipTrackNotifications()
{
  return MEMORY[0x1E0D4C080]();
}

uint64_t MRMediaRemoteRequestNowPlayingPlaybackQueueSync()
{
  return MEMORY[0x1E0D4C0A8]();
}

uint64_t MRMediaRemoteSendCommandWithReply()
{
  return MEMORY[0x1E0D4C0D0]();
}

uint64_t MRNowPlayingClientGetBundleIdentifier()
{
  return MEMORY[0x1E0D4C1E0]();
}

uint64_t MRPairedDeviceCopyGroupUID()
{
  return MEMORY[0x1E0D4C230]();
}

uint64_t MRPairedDeviceCopyLocalReceiverPairingIdentity()
{
  return MEMORY[0x1E0D4C240]();
}

uint64_t MRPlaybackQueueCopyContentItems()
{
  return MEMORY[0x1E0D4C258]();
}

uint64_t MRPlaybackQueueGetRange()
{
  return MEMORY[0x1E0D4C270]();
}

uint64_t MRPlaybackQueueRequestCreate()
{
  return MEMORY[0x1E0D4C278]();
}

uint64_t MRPlaybackQueueRequestSetIncludeLanguageOptions()
{
  return MEMORY[0x1E0D4C2C0]();
}

uint64_t MRPlaybackQueueRequestSetIncludeMetadata()
{
  return MEMORY[0x1E0D4C2D0]();
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1E0CB2858](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  return (NSString *)MEMORY[0x1E0CB2C08](userName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1E0CB2DA0](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  MEMORY[0x1E0CB2DA8](table, key, value);
}

void NSMapRemove(NSMapTable *table, const void *key)
{
  MEMORY[0x1E0CB2DC8](table, key);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t SIReflectionHydrateProtoFromEventTypeAndData()
{
  return MEMORY[0x1E0D9A680]();
}

uint64_t SIReflectionInferClassFromEventType()
{
  return MEMORY[0x1E0D9A688]();
}

uint64_t SIReflectionInferEventTypeFromClass()
{
  return MEMORY[0x1E0D9A690]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t VSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences()
{
  return MEMORY[0x1E0DC7420]();
}

uint64_t VSPreferencesCopySpokenLanguageIdentifier()
{
  return MEMORY[0x1E0DC7430]();
}

uint64_t VSPreferencesSetSpokenLanguageIdentifier()
{
  return MEMORY[0x1E0DC7438]();
}

BOOL _Block_has_signature(void *aBlock)
{
  return MEMORY[0x1E0C80930](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

const char *__cdecl _Block_signature(void *aBlock)
{
  return (const char *)MEMORY[0x1E0C80960](aBlock);
}

uint64_t _CFPreferencesWriteManagedDomainForUser()
{
  return MEMORY[0x1E0C9A3B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

uint64_t nwi_ifstate_get_flags()
{
  return MEMORY[0x1E0C84438]();
}

uint64_t nwi_state_copy()
{
  return MEMORY[0x1E0C84448]();
}

uint64_t nwi_state_get_first_ifstate()
{
  return MEMORY[0x1E0C84450]();
}

uint64_t nwi_state_get_notify_key()
{
  return MEMORY[0x1E0C84460]();
}

uint64_t nwi_state_release()
{
  return MEMORY[0x1E0C84470]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int raise(int a1)
{
  return MEMORY[0x1E0C84FA8](*(_QWORD *)&a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1E0C853F0](*(_QWORD *)&a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x1E0C857B0](a1, a2, a3);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
  MEMORY[0x1E0C86020](connection, barrier);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86288](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

uint64_t xpc_get_instance()
{
  return MEMORY[0x1E0C86510]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C866F0](region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x1E0C86700](xshmem, region);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1E0C86748](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1E0C86758](xstring);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1E0C86778]();
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

